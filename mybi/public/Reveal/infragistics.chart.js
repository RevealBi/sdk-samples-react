/*!@license
* Infragistics.Web.ClientUI ..\..\..\..\Native\infragistics.chart.js <build_number>
*
* Copyright (c) 2011-<year> Infragistics Inc.
*
* http://www.infragistics.com/
*
* Depends:
*     jquery-1.4.4.js
*     jquery.ui.core.js
*     jquery.ui.widget.js
*     infragistics.util.js
*/
(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine([
"PieChartBaseView:a",
"BaseView:b",
"View:c",
"InteractiveView:d",
"Object:e",
"Type:f",
"Boolean:g",
"ValueType:h",
"Void:i",
"IConvertible:j",
"IFormatProvider:k",
"Number:l",
"String:m",
"IComparable:n",
"Number:o",
"IComparable$1:p",
"IEquatable$1:q",
"Number:r",
"Number:s",
"Number:t",
"Number:u",
"NumberStyles:v",
"Enum:w",
"Array:x",
"IList:y",
"ICollection:z",
"IEnumerable:aa",
"IEnumerator:ab",
"NotSupportedException:ac",
"Error:ad",
"Number:ae",
"String:af",
"StringComparison:ag",
"RegExp:ah",
"CultureInfo:ai",
"DateTimeFormatInfo:aj",
"Calendar:ak",
"Date:al",
"Number:am",
"DayOfWeek:an",
"DateTimeKind:ao",
"CalendarWeekRule:ap",
"NumberFormatInfo:aq",
"CompareInfo:ar",
"CompareOptions:as",
"IEnumerable$1:at",
"IEnumerator$1:au",
"IDisposable:av",
"StringSplitOptions:aw",
"Number:ax",
"Number:ay",
"Number:az",
"Number:a0",
"Number:a1",
"Number:a2",
"Assembly:a3",
"Stream:a4",
"SeekOrigin:a5",
"RuntimeTypeHandle:a6",
"MethodInfo:a7",
"MethodBase:a8",
"MemberInfo:a9",
"ParameterInfo:ba",
"TypeCode:bb",
"ConstructorInfo:bc",
"PropertyInfo:bd",
"CPTimer:be",
"AnimationHelperBase:bf",
"Timer:bg",
"window:bh",
"Callback:bi",
"MulticastDelegate:bj",
"IntPtr:bk",
"NativeDateUtility:bl",
"Script:bm",
"JSDate:bn",
"Nullable$1:bo",
"DateUtility:bp",
"NativeNullableUtility:bq",
"Array:br",
"Array:bs",
"CompareCallback:bt",
"Math:bu",
"CPStringUtility:bv",
"NativeStringUtility:bw",
"Dictionary:bx",
"Dictionary:by",
"CPMonthInfo:bz",
"CPDateTime:b0",
"CPDateTimeFormatProvider:b1",
"AnimationTickBlock:b2",
"ExecutionBlock:b3",
"IntBlock:b4",
"JQueryObject:b5",
"Element:b6",
"ElementAttributeCollection:b7",
"ElementCollection:b8",
"WebStyle:b9",
"ElementNodeType:ca",
"document:cb",
"EventListener:cc",
"IElementEventHandler:cd",
"ElementEventHandler:ce",
"ElementAttribute:cf",
"JQueryPosition:cg",
"JQueryCallback:ch",
"JQueryEvent:ci",
"JQueryTouchEventObject:cj",
"JQueryUICallback:ck",
"TouchPoints:cl",
"UIEventManager:cm",
"CPPoint:cn",
"NativeUIUtility:co",
"ThemeManager:cp",
"CPLongTermMemoryStorageUtility:cq",
"NativeLongTermStorageUtility:cr",
"CPJSONObject:cs",
"JSDictionary:ct",
"NativeJSONUtility:cu",
"CPTheme:cv",
"ColorUtility:cw",
"CPMathUtility:cx",
"CPRect:cy",
"CPSize:cz",
"NativeColorUtility:c0",
"JQuery:c1",
"JQueryDeferred:c2",
"JQueryPromise:c3",
"Action:c4",
"Action$1:c5",
"CPThemeColor:c6",
"CPThemeColorSet:c7",
"CPItemLayoutGuide:c8",
"CPButtonLayoutGuide:c9",
"NativeDictionaryUtility:da",
"CPView:db",
"CPViewBase:dc",
"CPViewCore:dd",
"NativePanel:de",
"CPLayoutParams:df",
"CPLayoutParamsBase:dg",
"CanvasElement:dh",
"CanvasContext:di",
"AnimationHelperDelegate:dj",
"FocusableElementDelegate:dk",
"CPSectionContainer:dl",
"ICPViewCore:dm",
"SizeChangeBlock:dn",
"ArrayUtility:dp",
"BoolForObjectBlock:dq",
"ObjectForObjectBlock:dr",
"AnimationHelper:ds",
"AnimationType:dt",
"ExecutionBoolBlock:du",
"CPKeyboardEventManager:dv",
"CPKeyCombo:dw",
"Key:dx",
"UIUtility:dy",
"CancellableObjectBlock:dz",
"CPLabel:d0",
"CPLabelTextStyle:d1",
"TextAlignment:d2",
"JSHelperUtility:d3",
"MultilineInputView:d4",
"InputView:d5",
"CPFocusManager:d6",
"CPKeyboardCommandListener:d7",
"CPKeyCommand:d8",
"CPKeyboardCommandBlock:d9",
"CPTextViewBase:ea",
"CPTextViewOnScreenKeyboardResizeMode:eb",
"CPTextViewKeyboardDelegate:ec",
"CPTextView:ed",
"ObjectBlock:ee",
"CPPasteEvent:ef",
"KeyboardType:eg",
"CPScrollView:eh",
"CPScrollViewBase:ei",
"ScrollEventProcessorDelegate:ej",
"CPScrollViewDelegate:ek",
"ScrollEventProcessor:el",
"UpdateValueBlock:em",
"CPScrollBarView:en",
"CPScrollBarThumbView:eo",
"DoubleObjectBlock:ep",
"CPRange:eq",
"StringBlock:er",
"RangeBlock:es",
"CPSection:et",
"CPWeakObject:eu",
"FocusableElement:ev",
"DynamicFocusableContainer:ew",
"CPInteractionView:ex",
"CPCursors:ey",
"CPPopupPosition:ez",
"CPRichLabelTooltip:e0",
"InteractiveLabel:e1",
"InterativeLabelCanvas:e2",
"DrawingViewBase:e3",
"CanvasContext:e4",
"CanvasContext2D:e5",
"TextMetrics:e6",
"ImageData:e7",
"Gradient:e8",
"CPStrokeCap:e9",
"CPStrokeJoin:fa",
"CPLinearGradientBrush:fb",
"ImageElement:fc",
"WordRenderInfo:fd",
"InteractiveLabelRenderInfo:fe",
"InteractionTrigger:ff",
"CPLabelTooltip:fg",
"CPPopupManager:fh",
"CPNavigationViewController:fi",
"CPViewController:fj",
"ViewController:fk",
"ViewControllerModalPresentationStyle:fl",
"CPNavigationBar:fm",
"CPIconLabelButton:fn",
"CPIconButton:fo",
"CPIconButtonStyle:fp",
"PathIconView:fq",
"AnimatableDrawingView:fr",
"PathIconRenderInfo:fs",
"PathIcon:ft",
"PathIconPart:fu",
"PathCommandType:fv",
"PathCommand:fw",
"CPCircleView:fx",
"UIPathIcons:fy",
"PathIconsBase:fz",
"CPNavBarButtonPanel:f0",
"PointExecutionBlock:f1",
"ViewControllerBase:f2",
"EscapeKeyCloseMode:f3",
"CPPopupManagerBase:f4",
"CPPopupViewDelegate:f5",
"CPPopupCloseDelegate:f6",
"CPPopupContainerView:f7",
"CPPopupContainerBackgroundView:f8",
"CPPopupAnimatorDelegate:f9",
"CPPopupListViewCellBase:ga",
"CPGridViewItemIconCell:gb",
"CPGridViewItemCell:gc",
"CPGridViewItemOverflowCell:gd",
"CPGridViewItemCellBase:ge",
"CPGridViewCellBase:gf",
"ListBlock:gg",
"CPGridView:gh",
"CPGridViewCellsPanel:gi",
"CPGridViewCellsPanelBase:gj",
"CPGridViewLayoutEngine:gk",
"CPGridViewCellAnimator:gl",
"CPRowPath:gm",
"GridLayoutChangeDelegate:gn",
"CPCellPath:go",
"CPGridViewFixedColumnDirection:gp",
"CPGridViewDatasourceHelper:gq",
"CPSectionSortType:gr",
"CPGridViewColumnDefinition:gs",
"CPColumnWidth:gt",
"CPGridViewCellSetupDelegate:gu",
"CreateNewCellBlock:gv",
"ResolveCellIdentifierForPathBlock:gw",
"CreateCellBlock:gx",
"CPOverflowLabel:gy",
"NativeReflectorUtility:gz",
"CPGridViewValueColumnDefinition:g0",
"CPPropertySortConverter:g1",
"CPSortConverter:g2",
"NativeSortUtility:g3",
"CustomSortComparisonBlock:g4",
"CPGridViewRowSeparatorCell:g5",
"CPGridViewItemSectionHeaderCell:g6",
"CPGridViewRowHeightBlock:g7",
"CPGridSectionInfo:g8",
"CPColumnInfo:g9",
"Console:ha",
"ItemValueChangedBlock:hb",
"GridColumnResizeHandle:hc",
"CPCellType:hd",
"CPGridViewUpdateCellAnimator:he",
"CPGridViewSelectionType:hf",
"CPGridViewCellSectionExpansionAnimator:hg",
"CPGridViewCellSectionCollapseAnimator:hh",
"CPGridRowCollapseAnimator:hi",
"CPGridRowExpansionAnimator:hj",
"CPPopupListManager:hk",
"CPLocalPopupManager:hl",
"CPPopupContentContainerView:hm",
"CPPopupContentContainerInfo:hn",
"CPPopupContentContainerNavBar:ho",
"CPPopupHeader:hp",
"CPPopupFooter:hq",
"CPPopupSeciton:hr",
"CPImageView:hs",
"ImageVerticalAlignment:ht",
"ImageHorizontalAlignment:hu",
"CPPopupBackgroundView:hv",
"CPPopupBackgroundViewInfo:hw",
"CPPopupListView:hx",
"CPPopupListViewColumn:hy",
"CPPopupListItemBase:hz",
"CPPopupListItemSelectionMode:h0",
"CPPopupListItem:h1",
"CPPopupListViewCell:h2",
"CPGridViewSingleFieldMultiColumnDataSourceHelper:h3",
"PlatformInfo:h4",
"PlatformType:h5",
"CPKeyedObject:h6",
"CPPopupListContainerView:h7",
"CPReorderCellPopupManager:h8",
"CPDroppableViewDelegate:h9",
"StringObjectBlock:ia",
"CPDroppableViewManager:ib",
"CPDroppableViewManagerListener:ic",
"CPPopupMessageBoxManager:id",
"CPRichMessageBoxView:ie",
"CPMessageBoxView:ig",
"CPMessageTextView:ih",
"CPTextProcessorView:ii",
"CPRichTextView:ij",
"CPMultilineTextView:ik",
"QuillCancellableEnterPressedBlock:il",
"QuillWrapper:im",
"QuillToggleTextFormatBlock:io",
"QuillSelectionChangedBlock:ip",
"PendingAction:iq",
"QuillTextChangedBlock:ir",
"JSDOMRect:is",
"CPRichTextFormattingBlock:it",
"BackingStoreObjectBase:iu",
"CPRichTextStylingBlock:iv",
"HybridFormattingBlock:iw",
"CPTextDetectorMatchDelegate:ix",
"CPTextTracker:iy",
"CPTextTrackerWordProcessorDelegate:iz",
"CPTextTrackerWord:i0",
"CPTextTrackerWhiteSpaceWord:i1",
"CPTextTrackerWordProcessor:i2",
"CPLiveInputProcessor:i3",
"CPTextDetectorBase:i4",
"ListBoolBlock:i5",
"CPLiveInputReplaceProcessor:i6",
"CPTextURLDetector:i7",
"CPModalDialogPopupManager:i8",
"CPModalDialogContentView:i9",
"CPContentViewController:ja",
"CPKeyboardDelegate:jb",
"CPContentPopupManager:jc",
"CPContentPopupDynamicSizingViewDelegate:jd",
"CPContentPopupViewDelegate:je",
"CPTooltipPopupManager:jf",
"CPBubblePopupManager:jg",
"CPBubblePopupView:jh",
"CPProgressIndexIndicator:ji",
"CPEditTextPopupManager:jj",
"CPEditTextPopupView:jk",
"CPGridViewItemTextBoxCell:jl",
"CPDialogTextBox:jm",
"ProgressDisplayView:jn",
"ProgressView:jo",
"CPTextViewManager:jp",
"NativeCPTextViewManager:jq",
"CPNotificationMessageView:jr",
"CPPopupNotificationMessageManager:js",
"CPMaximizePopupManager:jt",
"CPHighlightAreaPopupManager:ju",
"CPHighlightViewPopupManager:jv",
"CPProgressPopupManager:jw",
"CPExternalDropHandler:jx",
"CPDropInfo:jy",
"CPDropTargetDisplayView:jz",
"CPThemeLight:j0",
"CPThemeDark:j1",
"ProgressHelper:j2",
"WebCoreUtils:j3",
"CPHapticType:j4",
"CPImageUtility:j5",
"NativeImageUtility:j6",
"CPImage:j7",
"KeyboardKeys:j8",
"CPFile:j9",
"AnimatedSnapshotView:ka",
"SnapshotView:kb",
"AnimationManagerDelegate:kc",
"SnapshotBase:kd",
"NativeUtility:ke",
"DataValueInfo:kf",
"DataInfo:kg",
"DateValueInfo:kh",
"IDataProcessorCallback:ki",
"ChartCanvasView:kj",
"Layer:kk",
"PointBoolExecutionBlock:kl",
"AnimationManager:km",
"AnimationManagerBase:kn",
"ZoomType:ko",
"GestureState:kp",
"CustomScrollViewerDelegate:kq",
"SharedScrollableBaseView:kr",
"CustomScrollHelper:ks",
"ChartsUtility:kt",
"RectRotationBounds:ku",
"FormatSettingsNegativeNumberMode:kv",
"FormatSettingsNumberType:kw",
"FormatSettingsPositiveNumberMode:kx",
"KeyedObject:ky",
"CombinedDataItemType:kz",
"CategoryDataItemType:k0",
"RangeCategoryDataItemType:k1",
"ScatterDataItemType:k2",
"FinancialDataItemType:k3",
"LegendIconShape:k4",
"CrosshairsVisibility:k5",
"ScrollableBaseView:k6",
"AdornmentBase:k7",
"AdornmentSnapshot:k8",
"LegendSnapshotBase:k9",
"LegendLocation:la",
"YAxisLocation:lb",
"TooltipPinLocation:lc",
"HighlightMode:ld",
"AxisAnnotationsLayer:le",
"CalculatedLayer:lf",
"TextInstructionsWithBackground:lg",
"TextInstructions:lh",
"TextHorizontalAlignment:li",
"TextVerticalAlignment:lj",
"SeriesSnapshot:lk",
"SeriesSnapshotBase:ll",
"ChartAxisMode:lm",
"SeriesObject:ln",
"TrendlineType:lo",
"XAxisLocation:lp",
"TooltipItem:lq",
"MCTrendCalculators:lr",
"ItemLayoutInfo:ls",
"AxisLocation:lt",
"CrosshairsAdornment:lu",
"HighlightAdornment:lv",
"TooltipAdornment:lw",
"BarChart:lx",
"CategoryChartBase:ly",
"CartesianChartBase:lz",
"ChartBase:l0",
"ScrollableSnapshotView:l1",
"ItemPath:l2",
"ISecondaryAxisFormatting:l3",
"XMajorAxisLinesLayer:l4",
"AxisLineLayer:l5",
"CategoryYAxisLayer:l6",
"NumericXAxisLayer:l7",
"BarChartLayer:l8",
"TrendlineLayer:l9",
"XAxisTitleLayer:ma",
"YAxisTitleLayer:mb",
"BarTextMarkerLayer:mc",
"LegendLayer:md",
"CategoryChart:me",
"YMajorAxisLinesLayer:mf",
"CategoryXAxisLayer:mg",
"NumericYAxisLayer:mh",
"CategoryChartLayer:mi",
"MarkerLayer:mj",
"TextMarkerLayer:mk",
"AdornmentType:ml",
"ExplodedDisplayStyle:mm",
"OthersThresholdType:mn",
"PieChartLabelLocation:mo",
"FunnelChartLabelLocation:mp",
"AngleAxisLabelOrientation:mq",
"TreemapLayout:mr",
"FunnelChartDisplayMode:ms",
"GaugeShape:mt",
"RadiusAxisLocation:mu",
"SliceLabelType:mv",
"IndicatorDifferenceMode:mw",
"FunnelChart:mx",
"SliceChartBase:my",
"SliceChartSnapshot:mz",
"SliceBase:m0",
"FunnelChartSnapshot:m1",
"FunnelChartSlice:m2",
"FunnelChartLayer:m3",
"FunnelChartLabelLayer:m4",
"SliceLegendLayer:m5",
"AngleAxisLabelLayer:m6",
"PolarSeriesSnapshot:m7",
"Orientation:m8",
"LineSegment:m9",
"PieChartLabelLayer:na",
"PieChartSnapshot:nb",
"PieChartSlice:nc",
"PieChartLayer:nd",
"PolarAxisLayer:ne",
"PolarScatterChartLayer:nf",
"RadialChartLayer:ng",
"RadiusAxisLabelLayer:nh",
"RPBulletGaugeLayer:ni",
"RPGaugeSnapshot:nj",
"RPGaugeLayer:nk",
"RPIndicatorLayer:nl",
"RPIndicatorShapeInstruction:nm",
"RPIndicatorSnapshot:nn",
"RPLabelGaugeLayer:no",
"ScatterChartLayer:np",
"ScatterSeriesSnapshot:nq",
"ScatterLegendLayer:nr",
"TreemapLayer:ns",
"TreemapSnapshot:nt",
"TreemapData:nu",
"TreemapCalculatorContext:nv",
"TreemapTooltipLayer:nw",
"PieChart:nx",
"PolarChart:ny",
"RadialChart:nz",
"RPGaugeBase:n0",
"RPLabelGauge:n1",
"RPGauge:n2",
"RPBulletGauge:n3",
"RPIndicator:n4",
"ScatterChart:n5",
"Treemap:n6",
"TreemapItem:n7"]);
/*<BeginType Name="Infragistics.TextHorizontalAlignment" />*/

$.ig.util.defType('TextHorizontalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Left";
			case 1: return "Center";
			case 2: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TextHorizontalAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TextHorizontalAlignment" />*/

/*<BeginType Name="Infragistics.TextVerticalAlignment" />*/

$.ig.util.defType('TextVerticalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Top";
			case 1: return "Center";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TextVerticalAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TextVerticalAlignment" />*/

/*<BeginType Name="Infragistics.LegendIconShape" />*/

$.ig.util.defType('LegendIconShape', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Circle";
			case 1: return "Line";
			case 2: return "Square";
			case 3: return "Triangle";
			case 4: return "Diamond";
			case 5: return "Pyramid";
			case 6: return "Pentagon";
			case 7: return "Hexagon";
			case 8: return "Tetragram";
			case 9: return "Pentagram";
			case 10: return "Hexagram";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('LegendIconShape', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.LegendIconShape" />*/

/*<BeginType Name="Infragistics.IndicatorDifferenceMode" />*/

$.ig.util.defType('IndicatorDifferenceMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Percentage";
			case 1: return "Value";
			case 2: return "ValueAndPercentage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('IndicatorDifferenceMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.IndicatorDifferenceMode" />*/

/*<BeginType Name="Infragistics.SliceLabelType" />*/

$.ig.util.defType('SliceLabelType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Percentage";
			case 1: return "Value";
			case 2: return "ValueAndPercentage";
			case 3: return "LabelAndPercentage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('SliceLabelType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SliceLabelType" />*/

/*<BeginType Name="Infragistics.RadiusAxisLocation" />*/

$.ig.util.defType('RadiusAxisLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "TopRight";
			case 1: return "BottomRight";
			case 2: return "TopLeft";
			case 3: return "BottomLeft";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('RadiusAxisLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RadiusAxisLocation" />*/

/*<BeginType Name="Infragistics.GaugeShape" />*/

$.ig.util.defType('GaugeShape', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Circle";
			case 2: return "Dash";
			case 3: return "ArrowUp";
			case 4: return "ArrowRight";
			case 5: return "ArrowDown";
			case 6: return "ArrowLeft";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('GaugeShape', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.GaugeShape" />*/

/*<BeginType Name="Infragistics.FunnelChartDisplayMode" />*/

$.ig.util.defType('FunnelChartDisplayMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "DynamicHeightAndSlope";
			case 1: return "UniformHeight";
			case 2: return "UniformSlope";
			case 3: return "UniformHeightAndSlope";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FunnelChartDisplayMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartDisplayMode" />*/

/*<BeginType Name="Infragistics.TreemapLayout" />*/

$.ig.util.defType('TreemapLayout', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Squarified";
			case 1: return "SliceAndDice";
			case 2: return "Strip";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TreemapLayout', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapLayout" />*/

/*<BeginType Name="Infragistics.LegendLocation" />*/

$.ig.util.defType('LegendLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Top";
			case 2: return "Left";
			case 3: return "Bottom";
			case 4: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('LegendLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.LegendLocation" />*/

/*<BeginType Name="Infragistics.AngleAxisLabelOrientation" />*/

$.ig.util.defType('AngleAxisLabelOrientation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NoLabels";
			case 1: return "Arc";
			case 2: return "Spoke";
			case 3: return "Horizontal";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AngleAxisLabelOrientation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AngleAxisLabelOrientation" />*/

/*<BeginType Name="Infragistics.FunnelChartLabelLocation" />*/

$.ig.util.defType('FunnelChartLabelLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NoLabels";
			case 1: return "Inside";
			case 2: return "OutsideLeft";
			case 3: return "OutsideRight";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FunnelChartLabelLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartLabelLocation" />*/

/*<BeginType Name="Infragistics.PieChartLabelLocation" />*/

$.ig.util.defType('PieChartLabelLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NoLabels";
			case 1: return "Inside";
			case 2: return "InsideEdge";
			case 3: return "OutsideCenter";
			case 4: return "OutsideCorner";
			case 5: return "OutsideColumn";
			case 6: return "OutsideEdge";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('PieChartLabelLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartLabelLocation" />*/

/*<BeginType Name="Infragistics.OthersThresholdType" />*/

$.ig.util.defType('OthersThresholdType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Value";
			case 1: return "Percent";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('OthersThresholdType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.OthersThresholdType" />*/

/*<BeginType Name="Infragistics.ExplodedDisplayStyle" />*/

$.ig.util.defType('ExplodedDisplayStyle', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "AwayFromCenter";
			case 1: return "ExtendedRadius";
			case 2: return "HighlightedEdge";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ExplodedDisplayStyle', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ExplodedDisplayStyle" />*/

/*<BeginType Name="Infragistics.HighlightMode" />*/

$.ig.util.defType('HighlightMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Light";
			case 1: return "Dark";
			case 2: return "Custom";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('HighlightMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.HighlightMode" />*/

/*<BeginType Name="Infragistics.AdornmentType" />*/

$.ig.util.defType('AdornmentType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: (function () {
		function getNameSingle(v) {
			switch (v) {
				case 0: return "None";
				case 1: return "Tooltip";
				case 2: return "Crosshairs";
				case 4: return "Highlight";
				default: return v.toString();
			}
		}
		return function (v) {
			return this.getFlaggedName(v, getNameSingle);
		};
	}()),
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AdornmentType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AdornmentType" />*/

/*<BeginType Name="Infragistics.CrosshairsVisibility" />*/

$.ig.util.defType('CrosshairsVisibility', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Both";
			case 1: return "None";
			case 2: return "Horizontal";
			case 3: return "Vertical";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CrosshairsVisibility', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CrosshairsVisibility" />*/

/*<BeginType Name="Infragistics.TooltipPinLocation" />*/

$.ig.util.defType('TooltipPinLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Floating";
			case 1: return "Top";
			case 2: return "Left";
			case 3: return "Bottom";
			case 4: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TooltipPinLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TooltipPinLocation" />*/

/*<BeginType Name="Infragistics.TrendlineType" />*/

$.ig.util.defType('TrendlineType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "LinearFit";
			case 1: return "QuadraticFit";
			case 2: return "CubicFit";
			case 3: return "QuarticFit";
			case 4: return "QuinticFit";
			case 5: return "LogarithmicFit";
			case 6: return "ExponentialFit";
			case 7: return "PowerLawFit";
			case 8: return "SimpleMovingAverage";
			case 9: return "ExponentialMovingAverage";
			case 10: return "ModifiedMovingAverage";
			case 11: return "CumulativeMovingAverage";
			case 12: return "WeightedMovingAverage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TrendlineType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TrendlineType" />*/

/*<BeginType Name="Infragistics.FormatSettingsPositiveNumberMode" />*/

$.ig.util.defType('FormatSettingsPositiveNumberMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NoSign";
			case 1: return "Plus";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FormatSettingsPositiveNumberMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FormatSettingsPositiveNumberMode" />*/

/*<BeginType Name="Infragistics.FormatSettingsNegativeNumberMode" />*/

$.ig.util.defType('FormatSettingsNegativeNumberMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Minus";
			case 1: return "Parens";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FormatSettingsNegativeNumberMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FormatSettingsNegativeNumberMode" />*/

/*<BeginType Name="Infragistics.FormatSettingsNumberType" />*/

$.ig.util.defType('FormatSettingsNumberType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Number";
			case 1: return "Percent";
			case 2: return "Currency";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FormatSettingsNumberType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FormatSettingsNumberType" />*/

/*<BeginType Name="Infragistics.ChartAxisMode" />*/

$.ig.util.defType('ChartAxisMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NumericYCategoryX";
			case 1: return "CategoryYNumericX";
			case 2: return "NumericYNumericX";
			case 3: return "NumericRadiusNumericValue";
			case 4: return "NumericRadiusCategoryValue";
			case 5: return "CategoryRadiusNumericValue";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ChartAxisMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ChartAxisMode" />*/

/*<BeginType Name="Infragistics.XAxisLocation" />*/

$.ig.util.defType('XAxisLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Top";
			case 1: return "Bottom";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('XAxisLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.XAxisLocation" />*/

/*<BeginType Name="Infragistics.YAxisLocation" />*/

$.ig.util.defType('YAxisLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Left";
			case 1: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('YAxisLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.YAxisLocation" />*/

/*<BeginType Name="Infragistics.FinancialDataItemType" />*/

$.ig.util.defType('FinancialDataItemType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Ohlc";
			case 1: return "Candlestick";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FinancialDataItemType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FinancialDataItemType" />*/

/*<BeginType Name="Infragistics.ScatterDataItemType" />*/

$.ig.util.defType('ScatterDataItemType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Scatter";
			case 1: return "Bubble";
			case 2: return "ScatterLine";
			case 3: return "ScatterOutlier";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ScatterDataItemType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScatterDataItemType" />*/

/*<BeginType Name="Infragistics.RangeCategoryDataItemType" />*/

$.ig.util.defType('RangeCategoryDataItemType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "RangeColumn";
			case 1: return "RangeArea";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('RangeCategoryDataItemType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RangeCategoryDataItemType" />*/

/*<BeginType Name="Infragistics.CategoryDataItemType" />*/

$.ig.util.defType('CategoryDataItemType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Column";
			case 1: return "Line";
			case 2: return "Area";
			case 3: return "Point";
			case 4: return "Waterfall";
			case 5: return "Spline";
			case 6: return "SplineArea";
			case 7: return "StepLine";
			case 8: return "StepArea";
			case 9: return "OutlierPoint";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CategoryDataItemType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryDataItemType" />*/

/*<BeginType Name="Infragistics.CombinedDataItemType" />*/

$.ig.util.defType('CombinedDataItemType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Column";
			case 1: return "Line";
			case 2: return "Area";
			case 3: return "Point";
			case 4: return "Waterfall";
			case 5: return "Spline";
			case 6: return "SplineArea";
			case 7: return "StepLine";
			case 8: return "StepArea";
			case 9: return "RangeColumn";
			case 10: return "RangeArea";
			case 11: return "Scatter";
			case 12: return "Bubble";
			case 13: return "ScatterLine";
			case 14: return "Ohlc";
			case 15: return "Candlestick";
			case 16: return "Pie";
			case 17: return "Funnel";
			case 18: return "OutlierPoint";
			case 19: return "ScatterOutlier";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CombinedDataItemType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CombinedDataItemType" />*/

/*<BeginType Name="Infragistics.AxisLocation" />*/

$.ig.util.defType('AxisLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Y";
			case 1: return "X";
			case 2: return "None";
			case 3: return "Both";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AxisLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AxisLocation" />*/

/*<BeginType Name="Infragistics.BaseView" />*/

$.ig.util.defType('BaseView', 'View', {
	_drawingContext: null,
	init: function () {
		this._size = new $.ig.CPSize();
		$.ig.View.prototype.init.call(this);
		var canvas = this._element[0];
		this._drawingContext = canvas.getContext("2d");
		this.setup();
	},
	/*<BeginMethod Name="System.Void Infragistics.BaseView::InternalSetup(System.Boolean)" />*/
	internalSetup: function (setup) {
	}
	/*<EndMethod Name="System.Void Infragistics.BaseView::InternalSetup(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.BaseView::CreateElement()" />*/
	createElement: function () {
		return $("<canvas></canvas>");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.BaseView::CreateElement()" />*/
	,
	_size: null,
	/*<BeginProperty Name="Infragistics.NativeSize Infragistics.BaseView::Size()" />*/
	size: function (value) {
		if (arguments.length === 1) {
			this._size = value;
			return value;
		} else {
			return this._size;
		}
	}
	/*<EndProperty Name="Infragistics.NativeSize Infragistics.BaseView::Size()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BaseView::Setup()" />*/
	setup: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.BaseView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BaseView::SizeChanged()" />*/
	sizeChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.BaseView::SizeChanged()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.BaseView::ResolveScale()" />*/
	resolveScale: function () {
		return new $.ig.CPRect(0);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.BaseView::ResolveScale()" />*/
	,
	$type: new $.ig.Type('BaseView', $.ig.View.prototype.$type)
}, true);

/*<EndType Name="Infragistics.BaseView" />*/

/*<BeginType Name="Infragistics.PieChartBaseView" />*/

$.ig.util.defType('PieChartBaseView', 'BaseView', {
	init: function () {
		$.ig.BaseView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.PieChartBaseView::setup()" />*/
	setup: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartBaseView::setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartBaseView::sizeChanged()" />*/
	sizeChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartBaseView::sizeChanged()" />*/
	,
	$type: new $.ig.Type('PieChartBaseView', $.ig.BaseView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartBaseView" />*/

/*<BeginType Name="Infragistics.AnimationManagerDelegate" />*/

$.ig.util.defType('AnimationManagerDelegate', 'Object', {
	$type: new $.ig.Type('AnimationManagerDelegate', null)
}, true);

/*<EndType Name="Infragistics.AnimationManagerDelegate" />*/

/*<BeginType Name="Infragistics.SnapshotView" />*/

$.ig.util.defType('SnapshotView', 'CPViewBase', {
	init: function () {
		this.__skipRender = false;
		$.ig.CPViewBase.prototype.init.call(this);
	},
	_canvas: null,
	__density: 0,
	__isAnimating: false,
	__skipRender: false,
	__viewClickedAction: null,
	/*<BeginProperty Name="System.Boolean Infragistics.SnapshotView::SkipRender()" />*/
	skipRender: function (value) {
		if (arguments.length === 1) {
			this.__skipRender = value;
			return value;
		} else {
			return this.__skipRender;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SnapshotView::SkipRender()" />*/
	,
	__animationManager: null,
	__animatedSnapshot: null,
	__fromSnapshot: null,
	__toSnapshot: null,
	__animationCompleted: null,
	__lastSnapshot: null,
	/*<BeginProperty Name="System.String Infragistics.SnapshotView::Font()" />*/
	font: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._fontName = value;
			return value;
		} else {
			return this.__lastSnapshot._fontName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.SnapshotView::Font()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SnapshotView::FontColor()" />*/
	fontColor: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._fontColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative(this.__lastSnapshot._fontColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.SnapshotView::FontColor()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SnapshotView::LabelMinFontSize()" />*/
	labelMinFontSize: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._minFontSize = value;
			return value;
		} else {
			return this.__lastSnapshot._minFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SnapshotView::LabelMinFontSize()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SnapshotView::LabelMaxFontSize()" />*/
	labelMaxFontSize: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._maxFontSize = value;
			return value;
		} else {
			return this.__lastSnapshot._maxFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SnapshotView::LabelMaxFontSize()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SnapshotView::LabelFontSizePercent()" />*/
	labelFontSizePercent: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._fontSizePercent = value;
			return value;
		} else {
			return this.__lastSnapshot._fontSizePercent;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SnapshotView::LabelFontSizePercent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SnapshotView::TreatNullValuesAsZeroes()" />*/
	treatNullValuesAsZeroes: function (value) {
		if (arguments.length === 1) {
			this.__lastSnapshot._treatNullValuesAsZeroes = value;
			return value;
		} else {
			return this.__lastSnapshot._treatNullValuesAsZeroes;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SnapshotView::TreatNullValuesAsZeroes()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::Setup()" />*/
	setup: function () {
		var $self = this;
		$.ig.CPViewBase.prototype.setup.call(this);
		this._canvas = new $.ig.ChartCanvasView();
		this._canvas.addClickHandler(function (x, y) {
			$self.canvasClicked(x, y);
		});
		this.attachCanvas(this._canvas);
		this.__density = $.ig.NativeUtility.prototype.utility().getScreenDensity();
		this.__animationManager = new $.ig.AnimationManager();
		this.__animationManager._delegate = this;
		this.__lastSnapshot = this.createNewSnapshot(true);
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::CanvasClicked(System.Int32, System.Int32)" />*/
	canvasClicked: function (x, y) {
		if (this.__viewClickedAction != null) {
			this.__viewClickedAction(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::CanvasClicked(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	attachCanvas: function (canvas) {
		this.addSubview(canvas);
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::MeasureCanvas(Infragistics.ChartCanvasView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureCanvas: function (canvas, x, y, w, h) {
		this.measureView(canvas, 0, 0, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::MeasureCanvas(Infragistics.ChartCanvasView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::AddViewClicked(Infragistics.PointExecutionBlock)" />*/
	addViewClicked: function (action) {
		this.__viewClickedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::AddViewClicked(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var sr = this.__skipRender;
		this.__skipRender = true;
		this.update(false);
		this.__skipRender = sr;
		if (!this.__skipRender) {
			this.measureCanvas(this._canvas, 0, 0, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.SnapshotView::ResolveScale()" />*/
	resolveScale: function () {
		return this._canvas._scale;
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.SnapshotView::ResolveScale()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::SetZoomType(Infragistics.ZoomType)" />*/
	setZoomType: function (zoomType) {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::SetZoomType(Infragistics.ZoomType)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SnapshotView::GetMaximumZoomScale(Infragistics.SnapshotBase)" />*/
	getMaximumZoomScale: function (snapshot) {
		return 1;
	}
	/*<EndMethod Name="System.Single Infragistics.SnapshotView::GetMaximumZoomScale(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::Update(System.Boolean)" />*/
	update: function (async) {
		this.__lastSnapshot._width = this.currentWidth();
		this.__lastSnapshot._height = this.currentHeight();
		this.__lastSnapshot._scale = this.resolveScale();
		this.__lastSnapshot.invalidate();
		if (this.__isAnimating) {
			this.__animationManager.stop();
			this.animationManagerCompleted();
		}
		var snapshot = this.createNewSnapshot(false);
		this.__lastSnapshot.copyTo(snapshot);
		if (!this.__skipRender) {
			this._canvas.renderSnapshot(async, snapshot);
		} else {
			this._canvas.updateSnapshot(snapshot);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::Update(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::NewSnapshotAvailable(Infragistics.SnapshotBase)" />*/
	newSnapshotAvailable: function (snapshot) {
		this._canvas.renderSnapshot(true, snapshot);
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::NewSnapshotAvailable(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::GetSnapshotCopy()" />*/
	getSnapshotCopy: function () {
		var snapshotCopy = this.createNewSnapshot(false);
		this.__lastSnapshot.copyTo(snapshotCopy);
		return snapshotCopy;
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::GetSnapshotCopy()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::GetAnimatedSnapshotCopy()" />*/
	getAnimatedSnapshotCopy: function () {
		var snapshotCopy = this.createNewSnapshot(false);
		if (this.__animatedSnapshot != null) {
			this.__animatedSnapshot.copyTo(snapshotCopy);
		}
		return snapshotCopy;
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::GetAnimatedSnapshotCopy()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SnapshotView::IsAnimating()" />*/
	isAnimating: function () {
		return this.__isAnimating;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SnapshotView::IsAnimating()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.SnapshotBase(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.SnapshotView::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::OnLongPress(Infragistics.NativePoint, System.GestureState)" />*/
	onLongPress: function (location, state) {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::OnLongPress(Infragistics.NativePoint, System.GestureState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::OnTap(Infragistics.NativePoint)" />*/
	onTap: function (location) {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::OnTap(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::OnDrag(Infragistics.NativePoint)" />*/
	onDrag: function (location) {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::OnDrag(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.SnapshotView::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.SnapshotView::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaX()" />*/
	getScrollableAreaX: function () {
		return this.__lastSnapshot._canvasFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaX()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaY()" />*/
	getScrollableAreaY: function () {
		return this.__lastSnapshot._canvasFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaY()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaWidth()" />*/
	getScrollableAreaWidth: function () {
		return this.__lastSnapshot._canvasFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaWidth()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaHeight()" />*/
	getScrollableAreaHeight: function () {
		return this.__lastSnapshot._canvasFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.SnapshotView::GetScrollableAreaHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::AnimateInternal(Infragistics.SnapshotBase, Infragistics.SnapshotBase, System.Double, Infragistics.ExecutionBoolBlock)" />*/
	animateInternal: function (from, to, duration, completed) {
		this.__isAnimating = true;
		if (this.__animationManager.isPlaying()) {
			this.__animationManager.stop();
			if (this.__animationCompleted != null) {
				this.__animationCompleted(false);
				this.__animationCompleted = null;
			}
		}
		this.__toSnapshot = to;
		if (this.__animatedSnapshot == null) {
			this.__fromSnapshot = from;
		} else {
			this.__animatedSnapshot.copyTo(this.__fromSnapshot);
		}
		this.__animationCompleted = completed;
		this.__animationManager._duration = duration;
		this.initializeSnapshotTransition(this.__fromSnapshot, to);
		this.__animationManager.start();
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::AnimateInternal(Infragistics.SnapshotBase, Infragistics.SnapshotBase, System.Double, Infragistics.ExecutionBoolBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::AnimationManagerTick(System.Double)" />*/
	animationManagerTick: function (tick) {
		this.__animatedSnapshot = this.createNewSnapshot(false);
		if (this.__toSnapshot._width != this.__lastSnapshot._width || this.__toSnapshot._height != this.__lastSnapshot._height || this.__toSnapshot._scale._x != this.__lastSnapshot._scale._x || this.__toSnapshot._scale._y != this.__lastSnapshot._scale._y || this.__toSnapshot._scale._width != this.__lastSnapshot._scale._width || this.__toSnapshot._scale._height != this.__lastSnapshot._scale._height) {
			this.__toSnapshot._scale = this.__lastSnapshot._scale;
			this.__toSnapshot._width = this.__lastSnapshot._width;
			this.__toSnapshot._height = this.__lastSnapshot._height;
			this.__toSnapshot.invalidate();
		}
		this.__toSnapshot.copyTo(this.__animatedSnapshot);
		this.__fromSnapshot.transition(this.__animatedSnapshot, tick);
		if (!this.__skipRender) {
			this.newSnapshotAvailable(this.__animatedSnapshot);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::AnimationManagerTick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::AnimationManagerCompleted()" />*/
	animationManagerCompleted: function () {
		this.__fromSnapshot = this.__toSnapshot = this.__animatedSnapshot = null;
		this.__isAnimating = false;
		if (this.__animationCompleted != null) {
			this.__animationCompleted(true);
			this.__animationCompleted = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::AnimationManagerCompleted()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::Disable()" />*/
	disable: function () {
		$.ig.CPViewBase.prototype.disable.call(this);
		this._canvas.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotView::Enable()" />*/
	enable: function () {
		$.ig.CPViewBase.prototype.enable.call(this);
		this._canvas.enable();
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotView::Enable()" />*/
	,
	$type: new $.ig.Type('SnapshotView', $.ig.CPViewBase.prototype.$type, [$.ig.AnimationManagerDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.SnapshotView" />*/

/*<BeginType Name="Infragistics.AnimatedSnapshotView" />*/

$.ig.util.defType('AnimatedSnapshotView', 'SnapshotView', {
	init: function () {
		$.ig.SnapshotView.prototype.init.call(this);
	},
	__animation: null,
	__duration: 0,
	__completed: null,
	/*<BeginMethod Name="System.Void Infragistics.AnimatedSnapshotView::Animate(Infragistics.ExecutionBlock, System.Single)" />*/
	animate2: function (animation, duration) {
		this.animate1(animation, null, duration);
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatedSnapshotView::Animate(Infragistics.ExecutionBlock, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatedSnapshotView::Animate(Infragistics.ExecutionBlock, Infragistics.ExecutionBoolBlock, System.Single)" />*/
	animate1: function (animation, completed, duration) {
		if (duration > 100) {
			duration = duration / 1000;
		}
		this.__completed = completed;
		if (this.currentWidth() == 0 || this.currentHeight() == 0) {
			this.__animation = animation;
			this.__duration = duration;
		} else {
			this.runAnimation(animation, duration);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatedSnapshotView::Animate(Infragistics.ExecutionBlock, Infragistics.ExecutionBoolBlock, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatedSnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.SnapshotView.prototype.sizeChanged.call(this, w, h);
		if (this.__animation != null && w != 0 && h != 0) {
			this.runAnimation(this.__animation, this.__duration);
			this.__animation = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatedSnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatedSnapshotView::RunAnimation(Infragistics.ExecutionBlock, System.Single)" />*/
	runAnimation: function (animation, duration) {
		this.__lastSnapshot._width = this.currentWidth();
		this.__lastSnapshot._height = this.currentHeight();
		this.__lastSnapshot._scale = this.resolveScale();
		var from = this.createNewSnapshot(false);
		var to = this.createNewSnapshot(false);
		this.__lastSnapshot.copyTo(from);
		animation();
		this.__lastSnapshot.invalidate();
		this.__lastSnapshot.copyTo(to);
		this.animateInternal(from, to, duration, this.__completed);
		this.__completed = null;
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatedSnapshotView::RunAnimation(Infragistics.ExecutionBlock, System.Single)" />*/
	,
	$type: new $.ig.Type('AnimatedSnapshotView', $.ig.SnapshotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AnimatedSnapshotView" />*/

/*<BeginType Name="Infragistics.CustomScrollViewerDelegate" />*/

$.ig.util.defType('CustomScrollViewerDelegate', 'Object', {
	$type: new $.ig.Type('CustomScrollViewerDelegate', null)
}, true);

/*<EndType Name="Infragistics.CustomScrollViewerDelegate" />*/

/*<BeginType Name="Infragistics.SharedScrollableBaseView" />*/

$.ig.util.defType('SharedScrollableBaseView', 'AnimatedSnapshotView', {
	init: function () {
		$.ig.AnimatedSnapshotView.prototype.init.call(this);
	},
	__scrollHelper: null,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::Setup()" />*/
	setup: function () {
		$.ig.AnimatedSnapshotView.prototype.setup.call(this);
		this.__scrollHelper = new $.ig.CustomScrollHelper();
		this.__scrollHelper.setSnapshot(this.__lastSnapshot);
		this.__scrollHelper._scrollHelperDelegate = this;
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::SetZoomType(Infragistics.ZoomType)" />*/
	setZoomType: function (zoomType) {
		this.__scrollHelper._zoomType = zoomType;
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::SetZoomType(Infragistics.ZoomType)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.SharedScrollableBaseView::ResolveScale()" />*/
	resolveScale: function () {
		return this.__scrollHelper.zoomScale();
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.SharedScrollableBaseView::ResolveScale()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SharedScrollableBaseView::GetMaximumZoomScale(Infragistics.SnapshotBase)" />*/
	getMaximumZoomScale: function (snapshot) {
		return this.__scrollHelper._maxZoomScale;
	}
	/*<EndMethod Name="System.Single Infragistics.SharedScrollableBaseView::GetMaximumZoomScale(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::SetScrollViewMaximum(System.Single)" />*/
	setScrollViewMaximum: function (maximum) {
		this.__scrollHelper._maxZoomScale = maximum;
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::SetScrollViewMaximum(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::SnapshotUpdateNeeded(System.Boolean)" />*/
	snapshotUpdateNeeded: function (async) {
		this.update(async);
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::SnapshotUpdateNeeded(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::LongPressTriggered(Infragistics.NativePoint, System.GestureState)" />*/
	longPressTriggered: function (point, state) {
		this.onLongPress(point, state);
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::LongPressTriggered(Infragistics.NativePoint, System.GestureState)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::IsInteractionEnabled()" />*/
	isInteractionEnabled: function () {
		return (this.__lastSnapshot != null && this.__lastSnapshot._userInteractionEnabled);
	}
	/*<EndProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::IsInteractionEnabled()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.SharedScrollableBaseView::CurrentViewWidth()" />*/
	currentViewWidth: function () {
		return this.currentWidth();
	}
	/*<EndProperty Name="System.Double Infragistics.SharedScrollableBaseView::CurrentViewWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.SharedScrollableBaseView::CurrentViewHeight()" />*/
	currentViewHeight: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Double Infragistics.SharedScrollableBaseView::CurrentViewHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::RequiresTouchSlopForMove()" />*/
	requiresTouchSlopForMove: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::RequiresTouchSlopForMove()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesTouchEvents()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesScrollWheelEvents()" />*/
	handlesScrollWheelEvents: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesScrollWheelEvents()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.__scrollHelper.handleMouseDown(x, y);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		return this.__scrollHelper.handleMouseMove(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this.__scrollHelper.handleMouseUp();
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleTouchesStart(, , System.Boolean)" />*/
	handleTouchesStart: function (x, y, quietly) {
		if (this.isInteractionEnabled()) {
			this.__scrollHelper.handleTouchStart(x, y);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleTouchesStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		if (this.isInteractionEnabled()) {
			this.__scrollHelper.handleTouchMove(x, y);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SharedScrollableBaseView::HandleTouchesEnd(System.Int32)" />*/
	handleTouchesEnd: function (count) {
		if (this.isInteractionEnabled()) {
			this.__scrollHelper.handleTouchEnd(count);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SharedScrollableBaseView::HandleTouchesEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	handleScrollWheel: function (x, y, deltaX, deltaY) {
		if (this.isInteractionEnabled()) {
			this.__scrollHelper.handleMouseWheel(x, y, deltaY);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SharedScrollableBaseView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	$type: new $.ig.Type('SharedScrollableBaseView', $.ig.AnimatedSnapshotView.prototype.$type, [$.ig.CustomScrollViewerDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.SharedScrollableBaseView" />*/

/*<BeginType Name="Infragistics.CustomScrollHelper" />*/

$.ig.util.defType('CustomScrollHelper', 'Object', {
	_scrollHelperDelegate: null,
	__lastSnapshot: null,
	__scale: null,
	__tempScale: null,
	__tempZoomScale: 0,
	__previousScaleX: 0,
	__previousScaleY: 0,
	__velocityX: 0,
	__velocityY: 0,
	__scrollDisplacementX: 0,
	__scrollDisplacementY: 0,
	__previousContentOffsetX: 0,
	__previousContentOffsetY: 0,
	__finalContentOffsetX: 0,
	__finalContentOffsetY: 0,
	__anchorPointX: 0,
	__anchorPointY: 0,
	__lastX: 0,
	__lastY: 0,
	__scrollAnimationTimerHorizontal: null,
	__scrollAnimationTimerVertical: null,
	__hTickBlock: null,
	__vTickBlock: null,
	__hBTickBlock: null,
	__vBTickBlock: null,
	__scrollHDuration: 0,
	__scrollVDuration: 0,
	__scrollHStartTime: 0,
	__scrollVStartTime: 0,
	__lastTimeStampH: 0,
	__lastTimeStampV: 0,
	__previousTouchMoveTimeStamp: 0,
	__tempTouchMoveTimeStamp: 0,
	__previousTouch: null,
	__anchorPoints: null,
	__mouseDown: false,
	__mouseOver: false,
	__isMultitouch: false,
	__wasMultitouch: false,
	_maxZoomScale: 0,
	_zoomType: 0,
	init: function () {
		var $self = this;
		this.__scale = new $.ig.CPRect(1, 0, 0, 1, 1);
		this.__tempScale = new $.ig.CPRect();
		this.__previousTouchMoveTimeStamp = 0;
		this.__tempTouchMoveTimeStamp = 0;
		this.__previousTouch = new $.ig.CPPoint(NaN, NaN);
		this.__mouseDown = false;
		this.__mouseOver = false;
		this.__isMultitouch = false;
		this.__wasMultitouch = false;
		$.ig.Object.prototype.init.call(this);
		this.__scrollAnimationTimerHorizontal = new $.ig.CPTimer();
		this.__scrollAnimationTimerVertical = new $.ig.CPTimer();
		this.__hTickBlock = function (p) {
			$self.animateScrollH(p);
		};
		this.__vTickBlock = function (p) {
			$self.animateScrollV(p);
		};
		this.__hBTickBlock = function (p) {
			$self.animateBounceH(p);
		};
		this.__vBTickBlock = function (p) {
			$self.animateBounceV(p);
		};
	},
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::StopAnimationTimers()" />*/
	stopAnimationTimers: function () {
		this.__scrollAnimationTimerHorizontal.stop();
		this.__scrollAnimationTimerVertical.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::StopAnimationTimers()" />*/
	,
	/*<BeginProperty Name="Infragistics.NativeRect Infragistics.CustomScrollHelper::ZoomScale()" />*/
	zoomScale: function () {
		return this.__scale;
	}
	/*<EndProperty Name="Infragistics.NativeRect Infragistics.CustomScrollHelper::ZoomScale()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::SetSnapshot(Infragistics.SnapshotBase)" />*/
	setSnapshot: function (snapshot) {
		this.__lastSnapshot = snapshot;
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::SetSnapshot(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CustomScrollHelper::HorizontalZoomable()" />*/
	horizontalZoomable: function () {
		return this._zoomType == $.ig.ZoomType.prototype.horizontalOnly || this._zoomType == $.ig.ZoomType.prototype.both;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CustomScrollHelper::HorizontalZoomable()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CustomScrollHelper::VerticalZoomable()" />*/
	verticalZoomable: function () {
		return this._zoomType == $.ig.ZoomType.prototype.verticalOnly || this._zoomType == $.ig.ZoomType.prototype.both;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CustomScrollHelper::VerticalZoomable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::ResetTouchAnchors(Infragistics.CPList)" />*/
	resetTouchAnchors: function (touchPoints) {
		if (this.__wasMultitouch && !this.__isMultitouch) {
			this.__anchorPointX = (touchPoints[0])._x - this.__lastSnapshot._canvasFrameX;
			this.__anchorPointY = (touchPoints[0])._y - this.__lastSnapshot._canvasFrameY;
			this.__wasMultitouch = false;
			this.__isMultitouch = false;
			return;
		}
		if (!this.__wasMultitouch && this.__isMultitouch) {
			this.__anchorPoints = null;
			this.__tempZoomScale = this.__scale._width;
			this.__tempScale = this.__scale;
			this.__wasMultitouch = true;
			this.__isMultitouch = true;
			return;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::ResetTouchAnchors(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::BounceHelperH()" />*/
	bounceHelperH: function () {
		if (!this.horizontalZoomable()) {
			return;
		}
		this.__scrollHDuration = $.ig.CustomScrollHelper.prototype.bOUNCE_DURATION;
		this.__scrollHStartTime = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__finalContentOffsetX = (this.__scale._x < 0) ? 0 : (this.__scale._x + 1 / this.__scale._width > 1) ? 1 - 1 / this.__scale._width : this.__scale._x;
		this.__previousContentOffsetX = this.__scale._x;
		if (this.__finalContentOffsetX == this.__previousContentOffsetX) {
			return;
		}
		this.__scrollAnimationTimerHorizontal.start(this.__scrollHDuration, this.__hTickBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::BounceHelperH()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::BounceHelperV()" />*/
	bounceHelperV: function () {
		if (!this.verticalZoomable()) {
			return;
		}
		this.__scrollVDuration = $.ig.CustomScrollHelper.prototype.bOUNCE_DURATION;
		this.__scrollVStartTime = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__finalContentOffsetY = (this.__scale._y < 0) ? 0 : (this.__scale._y + 1 / this.__scale._height > 1) ? 1 - 1 / this.__scale._height : this.__scale._y;
		this.__previousContentOffsetY = this.__scale._y;
		if (this.__finalContentOffsetY == this.__previousContentOffsetY) {
			return;
		}
		this.__scrollAnimationTimerVertical.start(this.__scrollVDuration, this.__vTickBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::BounceHelperV()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::StartScrollAnimationH()" />*/
	startScrollAnimationH: function () {
		if (!this.horizontalZoomable()) {
			return;
		}
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__scrollHStartTime = now;
		this.__lastTimeStampH = now;
		this.__lastX = this.__scale._x;
		this.__scrollAnimationTimerHorizontal.start(this.__scrollHDuration, this.__hTickBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::StartScrollAnimationH()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::StartScrollAnimationV()" />*/
	startScrollAnimationV: function () {
		if (!this.verticalZoomable()) {
			return;
		}
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__scrollVStartTime = now;
		this.__lastTimeStampV = now;
		this.__lastY = this.__scale._y;
		this.__scrollAnimationTimerVertical.start(this.__scrollVDuration, this.__vTickBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::StartScrollAnimationV()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CustomScrollHelper::CalculateNewScalePositionForBounce(System.Double, System.Double, System.Double, System.Double, System.Double)" />*/
	calculateNewScalePositionForBounce: function (oldScalePos, contentOffset, lastPos, scaleSize, percentComplete) {
		var pos = oldScalePos;
		if (contentOffset <= 0) {
			var peak = contentOffset * 0.3;
			pos = lastPos + $.ig.ChartsUtility.prototype.easeOutCubic(percentComplete) * (peak - lastPos);
			if (pos < peak / 2) {
				pos = peak - pos;
			}
		}
		if (contentOffset >= 1 - 1 / scaleSize) {
			var peak1 = (1 - 1 / scaleSize) + (contentOffset - (1 - 1 / scaleSize)) * 0.3;
			pos = lastPos + $.ig.ChartsUtility.prototype.easeOutCubic(percentComplete) * (peak1 - lastPos);
			if (pos > (1 - 1 / scaleSize + peak1) / 2) {
				pos = 1 - 1 / scaleSize + peak1 - pos;
			}
		}
		return pos;
	}
	/*<EndMethod Name="System.Double Infragistics.CustomScrollHelper::CalculateNewScalePositionForBounce(System.Double, System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::UpdateSnapshotView(System.Boolean)" />*/
	updateSnapshotView: function (async) {
		if (this._scrollHelperDelegate != null) {
			this._scrollHelperDelegate.snapshotUpdateNeeded(async);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::UpdateSnapshotView(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CustomScrollHelper::ResolveWidth()" />*/
	resolveWidth: function () {
		if (this._scrollHelperDelegate != null) {
			return this._scrollHelperDelegate.currentViewWidth();
		}
		return 0;
	}
	/*<EndMethod Name="System.Double Infragistics.CustomScrollHelper::ResolveWidth()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CustomScrollHelper::ResolveHeight()" />*/
	resolveHeight: function () {
		if (this._scrollHelperDelegate != null) {
			return this._scrollHelperDelegate.currentViewHeight();
		}
		return 0;
	}
	/*<EndMethod Name="System.Double Infragistics.CustomScrollHelper::ResolveHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateBounceH(System.Double)" />*/
	animateBounceH: function (percentComplete) {
		if (percentComplete >= 1) {
			this.__scrollAnimationTimerHorizontal.stop();
			percentComplete = 1;
		}
		var x = this.calculateNewScalePositionForBounce(this.__scale._x, this.__finalContentOffsetX, this.__lastX, this.__scale._width, percentComplete);
		this.__scale._x = x;
		this.updateSnapshotView(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateBounceH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateBounceV(System.Double)" />*/
	animateBounceV: function (percentComplete) {
		if (percentComplete >= 1) {
			this.__scrollAnimationTimerVertical.stop();
			percentComplete = 1;
		}
		var y = this.calculateNewScalePositionForBounce(this.__scale._y, this.__finalContentOffsetY, this.__lastY, this.__scale._height, percentComplete);
		this.__scale._y = y;
		this.updateSnapshotView(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateBounceV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateScrollH(System.Double)" />*/
	animateScrollH: function (percentComplete) {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		if (percentComplete >= 1) {
			this.__scrollAnimationTimerHorizontal.stop();
			percentComplete = 1;
		}
		this.__previousScaleX = this.__scale._x;
		if (this.__finalContentOffsetX < 0 && this.__scale._x <= 0) {
			var peak = this.__finalContentOffsetX * 0.3;
			var xDelta = (0 - peak) * 2 - (0 - this.__lastX);
			this.__scrollHDuration = Math.min($.ig.CustomScrollHelper.prototype.bOUNCE_DURATION, this.__scrollHDuration - $.ig.ChartsUtility.prototype.calculateDecelerationTime(1, 1, 0, 1 - xDelta));
			this.__scrollHStartTime = now;
			this.__scrollAnimationTimerHorizontal.start(this.__scrollHDuration, this.__hBTickBlock);
		} else if (this.__finalContentOffsetX > 1 - 1 / this.__scale._width && this.__scale._x >= 1 - 1 / this.__scale._width) {
			var peak1 = (1 - 1 / this.__scale._width) + (this.__finalContentOffsetX - (1 - 1 / this.__scale._width)) * 0.3;
			var xDelta1 = (peak1 - 1) * 2 - (this.__lastX - 1);
			this.__scrollHDuration = Math.min($.ig.CustomScrollHelper.prototype.bOUNCE_DURATION, this.__scrollHDuration - $.ig.ChartsUtility.prototype.calculateDecelerationTime(1, 1, 0, 1 - xDelta1));
			this.__scrollHStartTime = now;
			this.__scrollAnimationTimerHorizontal.start(this.__scrollHDuration, this.__hBTickBlock);
		} else {
			this.__scale._x = (this.__previousContentOffsetX + $.ig.ChartsUtility.prototype.easeOutCubic(percentComplete) * (this.__finalContentOffsetX - this.__previousContentOffsetX));
			this.__lastTimeStampH = now;
			this.__lastX = this.__scale._x;
		}
		this.updateSnapshotView(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateScrollH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateScrollV(System.Double)" />*/
	animateScrollV: function (percentComplete) {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		if (percentComplete >= 1) {
			this.__scrollAnimationTimerVertical.stop();
			percentComplete = 1;
		}
		this.__previousScaleY = this.__scale._y;
		if (this.__finalContentOffsetY < 0 && this.__scale._y <= 0) {
			var peak = this.__finalContentOffsetY * 0.3;
			var yDelta = (0 - peak) * 2 - (0 - this.__lastY);
			this.__scrollVDuration = Math.min($.ig.CustomScrollHelper.prototype.bOUNCE_DURATION, this.__scrollVDuration - $.ig.ChartsUtility.prototype.calculateDecelerationTime(1, 1, 0, 1 - yDelta));
			this.__scrollVStartTime = now;
			this.__scrollAnimationTimerVertical.start(this.__scrollHDuration, this.__vBTickBlock);
		} else if (this.__finalContentOffsetY > 1 - 1 / this.__scale._height && this.__scale._y >= 1 - 1 / this.__scale._height) {
			var peak1 = (1 - 1 / this.__scale._height) + (this.__finalContentOffsetY - (1 - 1 / this.__scale._height)) * 0.3;
			var yDelta1 = (peak1 - 1) * 2 - (this.__lastY - 1);
			this.__scrollVDuration = Math.min($.ig.CustomScrollHelper.prototype.bOUNCE_DURATION, this.__scrollVDuration - $.ig.ChartsUtility.prototype.calculateDecelerationTime(1, 1, 0, 1 - yDelta1));
			this.__scrollVStartTime = now;
			this.__scrollAnimationTimerVertical.start(this.__scrollHDuration, this.__vBTickBlock);
		} else {
			this.__scale._y = (this.__previousContentOffsetY + $.ig.ChartsUtility.prototype.easeOutCubic(percentComplete) * (this.__finalContentOffsetY - this.__previousContentOffsetY));
			this.__lastTimeStampV = now;
			this.__lastY = this.__scale._y;
		}
		this.updateSnapshotView(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::AnimateScrollV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::ScrollEventHelper(Infragistics.NativePoint, System.Double)" />*/
	scrollEventHelper: function (pt, timestamp) {
		if (this.__scale._width <= 1 && this.__scale._height <= 1) {
			return;
		}
		if (isNaN(this.__previousTouch._x) || isNaN(this.__previousTouch._y)) {
			this.__previousTouch = pt;
		}
		var scrollFactor = new $.ig.CPPoint(1, 1);
		if (this.__scale._x < 0 || this.__scale._x + 1 / this.__scale._width > 1) {
			scrollFactor._x = 3;
		}
		if (this.__scale._y < 0 || this.__scale._y + 1 / this.__scale._height > 1) {
			scrollFactor._y = 3;
		}
		var scrollAreaW = this.__lastSnapshot._canvasFrameWidth;
		var scrollAreaH = this.__lastSnapshot._canvasFrameHeight;
		var left = 0;
		var top = 0;
		if (this.horizontalZoomable()) {
			left = this.__scale._x + 1 / this.__scale._width * (this.__anchorPointX - pt._x) / scrollAreaW / scrollFactor._x;
		}
		if (this.verticalZoomable()) {
			top = this.__scale._y + 1 / this.__scale._height * (this.__anchorPointY - pt._y) / scrollAreaH / scrollFactor._y;
		}
		this.__anchorPointX = pt._x;
		this.__anchorPointY = pt._y;
		var timeElapsed = (timestamp - this.__previousTouchMoveTimeStamp) * $.ig.CustomScrollHelper.prototype.tO_MILLISECONDS;
		this.__velocityX = Math.min(15, (pt._x - this.__previousTouch._x) / timeElapsed);
		this.__velocityY = Math.min(15, (pt._y - this.__previousTouch._y) / timeElapsed);
		this.__previousTouchMoveTimeStamp = timestamp;
		this.__previousTouch = pt;
		this.__tempTouchMoveTimeStamp = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__scale = new $.ig.CPRect(1, left, top, this.__scale._width, this.__scale._height);
		this.updateSnapshotView(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::ScrollEventHelper(Infragistics.NativePoint, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::MouseWheelHelper(System.Double, Infragistics.NativePoint, System.Single, System.Single, System.Single)" />*/
	mouseWheelHelper: function (delta, pt, maxZoom, scrollAreaW, scrollAreaH) {
		var zoomX = this.__scale._width;
		var zoomY = this.__scale._height;
		var left = this.__scale._x;
		var top = this.__scale._y;
		var scale = 1 - Math.min(0.5, Math.max(-0.5, delta));
		if (this.horizontalZoomable() && (delta > 0 && zoomX < maxZoom || delta < 0 && zoomX > 1)) {
			var cx = this.__scale._x + (1 / this.__scale._width) * pt._x / scrollAreaW;
			left = Math.max(0, cx - scale * (cx - this.__scale._x));
			var right = Math.min(1, cx + scale * (this.__scale._x + 1 / this.__scale._width - cx));
			zoomX = 1 / (right - left);
			if (zoomX > maxZoom) {
				zoomX = maxZoom;
			}
		}
		if (this.verticalZoomable() && (delta > 0 && zoomY < maxZoom || delta < 0 && zoomY > 1)) {
			var cy = this.__scale._y + (1 / this.__scale._height) * pt._y / scrollAreaH;
			top = Math.max(0, cy - scale * (cy - this.__scale._y));
			var bottom = Math.min(1, cy + scale * (this.__scale._y + 1 / this.__scale._height - cy));
			zoomY = 1 / (bottom - top);
			if (zoomY > maxZoom) {
				zoomY = maxZoom;
			}
		}
		this.__scale = new $.ig.CPRect(1, left, top, zoomX, zoomY);
		if (this.__scale._x < 0 || this.__scale._x + 1 / this.__scale._width > 1) {
			this.bounceHelperH();
		}
		if (this.__scale._y < 0 || this.__scale._y + 1 / this.__scale._height > 1) {
			this.bounceHelperV();
		}
		this.updateSnapshotView(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::MouseWheelHelper(System.Double, Infragistics.NativePoint, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::MouseUpHelper(System.Double, System.Double)" />*/
	mouseUpHelper: function (width, height) {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		if (now - this.__tempTouchMoveTimeStamp > $.ig.CustomScrollHelper.prototype.tIMER_THRESHOLD || (isNaN(this.__previousTouch._x) || isNaN(this.__previousTouch._y))) {
			if (this.__scale._x < 0 || this.__scale._x + 1 / this.__scale._width > 1) {
				this.bounceHelperH();
			}
			if (this.__scale._y < 0 || this.__scale._y + 1 / this.__scale._height > 1) {
				this.bounceHelperV();
			}
			return;
		}
		this.__previousContentOffsetX = this.__scale._x;
		this.__previousContentOffsetY = this.__scale._y;
		this.__scrollDisplacementX = this.__velocityX / $.ig.CustomScrollHelper.prototype.dECELERATION;
		this.__scrollDisplacementY = this.__velocityY / $.ig.CustomScrollHelper.prototype.dECELERATION;
		var minContentOffsetX = 0 - (1 / this.__scale._width);
		var minContentOffsetY = 0 - (1 / this.__scale._height);
		var maxContentOffsetX = 1 + (1 / this.__scale._width);
		var maxContentOffsetY = 1 + (1 / this.__scale._height);
		this.__finalContentOffsetX = Math.min(maxContentOffsetX, Math.max(minContentOffsetX, this.__scale._x + this.__scrollDisplacementX / this.__scale._width / width));
		this.__finalContentOffsetY = Math.min(maxContentOffsetY, Math.max(minContentOffsetY, this.__scale._y + this.__scrollDisplacementY / this.__scale._height / height));
		var vX = Math.abs(this.__velocityX);
		var vY = Math.abs(this.__velocityY);
		this.__scrollHDuration = (-0.02 * vX * vX + 0.3 * vX + 2) * $.ig.CustomScrollHelper.prototype.mUlTIPLIER;
		this.__scrollVDuration = (-0.02 * vY * vY + 0.3 * vY + 2) * $.ig.CustomScrollHelper.prototype.mUlTIPLIER;
		if (this.__scale._x < 0 || this.__scale._x + 1 / this.__scale._width > 1) {
			this.bounceHelperH();
		} else {
			this.startScrollAnimationH();
		}
		if (this.__scale._y < 0 || this.__scale._y + 1 / this.__scale._height > 1) {
			this.bounceHelperV();
		} else {
			this.startScrollAnimationV();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::MouseUpHelper(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::TouchMoveHelper(Infragistics.CPList, System.Double, System.Single)" />*/
	touchMoveHelper: function (touchPoints, timestamp, maxZoom) {
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		var scrollAreaW = this.__lastSnapshot._canvasFrameWidth;
		var scrollAreaH = this.__lastSnapshot._canvasFrameHeight;
		if (touchPoints.length == 1) {
			var touch = touchPoints[0];
			var pt = new $.ig.CPPoint(touch._x - scrollAreaX, touch._y - scrollAreaY);
			this.scrollEventHelper(pt, timestamp);
		} else if (touchPoints.length == 2) {
			var touch1 = touchPoints[0];
			var touch2 = touchPoints[1];
			var pt1 = new $.ig.CPPoint((touch1)._x - scrollAreaX, touch1._y - scrollAreaY);
			var pt2 = new $.ig.CPPoint((touch2)._x - scrollAreaX, touch2._y - scrollAreaY);
			var center = new $.ig.CPPoint(Math.min(pt1._x, pt2._x) + Math.abs(pt1._x - pt2._x) / 2, Math.min(pt1._y, pt2._y) + Math.abs(pt1._y - pt2._y) / 2);
			if (center._x < 0 || center._x > scrollAreaW || center._y < 0 || center._y > scrollAreaH) {
				return;
			}
			if (this.__anchorPoints == null) {
				this.__anchorPoints = new Array(2);
				this.__anchorPoints[0] = new $.ig.CPPoint(touch1._x - scrollAreaX, touch1._y - scrollAreaY);
				this.__anchorPoints[1] = new $.ig.CPPoint(touch2._x - scrollAreaX, touch2._y - scrollAreaY);
			}
			var originalDistance = Math.sqrt(Math.pow(this.__anchorPoints[0]._x - this.__anchorPoints[1]._x, 2) + Math.pow(this.__anchorPoints[0]._y - this.__anchorPoints[1]._y, 2));
			var currentDistance = Math.sqrt(Math.pow(pt1._x - pt2._x, 2) + Math.pow(pt1._y - pt2._y, 2));
			var zoomingIn = originalDistance < currentDistance;
			var scaleX = this.__scale._width;
			var scaleY = this.__scale._height;
			var left = this.__scale._x;
			var top = this.__scale._y;
			if (this.horizontalZoomable() && (!zoomingIn && scaleX > 1 || zoomingIn && scaleX < maxZoom)) {
				scaleX = Math.max(1, Math.min(maxZoom, this.__tempZoomScale * currentDistance / originalDistance));
				var cx = this.__tempScale._x + 1 / this.__tempScale._width * center._x / scrollAreaW;
				left = Math.max(0, this.__tempScale._x + (cx * (1 / this.__tempScale._width - 1 / scaleX)));
			}
			if (this.verticalZoomable() && (!zoomingIn && scaleY > 1 || zoomingIn && scaleY < maxZoom)) {
				scaleY = (this.__tempZoomScale * (currentDistance / originalDistance));
				var cy = this.__tempScale._y + 1 / this.__tempScale._height * center._y / scrollAreaH;
				top = Math.max(0, Math.min(maxZoom, this.__tempScale._y + (cy * (1 / this.__tempScale._height - 1 / scaleY))));
			}
			this.__scale = new $.ig.CPRect(1, left, top, scaleX, scaleY);
			this.updateSnapshotView(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::TouchMoveHelper(Infragistics.CPList, System.Double, System.Single)" />*/
	,
	__startX: 0,
	__startY: 0,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseDown(System.Double, System.Double)" />*/
	handleMouseDown: function (x, y) {
		this.__startX = x;
		this.__startY = y;
		this.__mouseDown = true;
		this.__previousTouch = new $.ig.CPPoint(NaN, NaN);
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		this.__anchorPointX = x - scrollAreaX;
		this.__anchorPointY = y - scrollAreaY;
		this.stopAnimationTimers();
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseDown(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseUp()" />*/
	handleMouseUp: function () {
		this.__mouseDown = false;
		this.mouseUpHelper(this.resolveWidth(), this.resolveHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchStart(, )" />*/
	handleTouchStart: function (x, y) {
		var numberOfTouchPoints = x.length;
		this.__wasMultitouch = false;
		this.__isMultitouch = numberOfTouchPoints > 1;
		this.stopAnimationTimers();
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		this.__startX = x[0];
		this.__startY = y[0];
		if (numberOfTouchPoints == 1) {
			this.__anchorPointX = x[0] - scrollAreaX;
			this.__anchorPointY = y[0] - scrollAreaY;
			this.__previousTouch = new $.ig.CPPoint(NaN, NaN);
			this.__anchorPoints = null;
		} else if (numberOfTouchPoints == 2) {
			this.__tempZoomScale = this.__scale._width;
			this.__tempScale = this.__scale;
			this.__anchorPoints = new Array(2);
			this.__anchorPoints[0] = new $.ig.CPPoint((x[0] - scrollAreaX), (y[0] - scrollAreaY));
			this.__anchorPoints[1] = new $.ig.CPPoint((x[1] - scrollAreaX), (y[1] - scrollAreaY));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchStart(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchMove(, )" />*/
	handleTouchMove: function (x, y) {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		var scrollAreaW = this.__lastSnapshot._canvasFrameWidth;
		var scrollAreaH = this.__lastSnapshot._canvasFrameHeight;
		var numberOfTouchPoints = x.length;
		var touchPoints = new $.ig.Array();
		for (var i = 0; i < numberOfTouchPoints; i++) {
			touchPoints.add(new $.ig.CPPoint(x[i], y[i]));
		}
		this.resetTouchAnchors(touchPoints);
		this.__isMultitouch = numberOfTouchPoints > 1;
		var maxZoom = this._maxZoomScale;
		this.touchMoveHelper(touchPoints, now, maxZoom);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchEnd(System.Int32)" />*/
	handleTouchEnd: function (touchCount) {
		this.__isMultitouch = false;
		this.__wasMultitouch = false;
		if (touchCount == 1) {
			this.mouseUpHelper(this.resolveWidth(), this.resolveHeight());
		} else if (touchCount == 2) {
			if (this.__scale._width < 1) {
				this.__scale = new $.ig.CPRect(1, 0, this.__scale._y, 1, this.__scale._height);
			}
			if (this.__scale._height < 1) {
				this.__scale = new $.ig.CPRect(1, this.__scale._x, 0, this.__scale._width, 1);
			}
			if (this.__scale._x < 0 || this.__scale._x + 1 / this.__scale._width > 1) {
				this.bounceHelperH();
			}
			if (this.__scale._y < 0 || this.__scale._y + 1 / this.__scale._height > 1) {
				this.bounceHelperV();
			}
			this.updateSnapshotView(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchVelocity(System.Double, System.Double)" />*/
	handleTouchVelocity: function (x, y) {
		this.__velocityX = x;
		this.__velocityY = y;
		this.mouseUpHelper(this.resolveWidth(), this.resolveHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleTouchVelocity(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseWheel(System.Double, System.Double, System.Double)" />*/
	handleMouseWheel: function (x, y, delta) {
		this.stopAnimationTimers();
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		var scrollAreaW = this.__lastSnapshot._canvasFrameWidth;
		var scrollAreaH = this.__lastSnapshot._canvasFrameHeight;
		var pt = new $.ig.CPPoint((x - scrollAreaX), (y - scrollAreaY));
		if (pt._x < 0 || pt._x > scrollAreaW || pt._y < 0 || pt._y > scrollAreaH) {
			return;
		}
		var maxZoom = this._maxZoomScale;
		this.mouseWheelHelper(delta, pt, maxZoom, scrollAreaW, scrollAreaH);
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseWheel(System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CustomScrollHelper::HandleMouseMove(System.Double, System.Double)" />*/
	handleMouseMove: function (x, y) {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		var scrollAreaX = this.__lastSnapshot._canvasFrameX;
		var scrollAreaY = this.__lastSnapshot._canvasFrameY;
		var pt = new $.ig.CPPoint((x - scrollAreaX), (y - scrollAreaY));
		if (this.__mouseDown) {
			this.scrollEventHelper(pt, now);
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CustomScrollHelper::HandleMouseMove(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseEnter()" />*/
	handleMouseEnter: function () {
		this.__mouseOver = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseEnter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseLeave()" />*/
	handleMouseLeave: function () {
		this.__mouseOver = false;
		this.__mouseDown = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CustomScrollHelper::HandleMouseLeave()" />*/
	,
	$type: new $.ig.Type('CustomScrollHelper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CustomScrollHelper" />*/

/*<BeginType Name="Infragistics.AnimationManagerBase" />*/

$.ig.util.defType('AnimationManagerBase', 'Object', {
	__easy_a: 0,
	__easy_k: 0,
	__easy_b: 0,
	_delegate: null,
	_duration: 0,
	__startTime: 0,
	__timer: null,
	__isDone: false,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__easy_a = -0.75;
		this.__easy_b = 1.5;
		this.__easy_k = 1 / ((this.__easy_a * Math.pow(1, 2)) + (this.__easy_b * 1));
	},
	/*<BeginMethod Name="System.Void Infragistics.AnimationManagerBase::start()" />*/
	start: function () {
		this.__isDone = false;
		this.internalStop();
		this.__startTime = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		this.__timer = this.nextTimer();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimationManagerBase::start()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimationManagerBase::stop()" />*/
	stop: function () {
		this.__isDone = true;
		this.internalStop();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimationManagerBase::stop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimationManagerBase::InternalStop()" />*/
	internalStop: function () {
		if (this.__timer != null) {
			this.__timer.stop();
			this.__timer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AnimationManagerBase::InternalStop()" />*/
	,
	/*<BeginMethod Name="System.Timer Infragistics.AnimationManagerBase::nextTimer()" />*/
	nextTimer: function () {
	}
	/*<EndMethod Name="System.Timer Infragistics.AnimationManagerBase::nextTimer()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.AnimationManagerBase::isPlaying()" />*/
	isPlaying: function () {
		return this.__timer != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.AnimationManagerBase::isPlaying()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.AnimationManagerBase::getValueForCurrentTime()" />*/
	getValueForCurrentTime: function () {
		var now = $.ig.NativeUtility.prototype.utility().getCurrentTime();
		var timeElapsed = now - this.__startTime;
		if (timeElapsed >= this._duration) {
			return 1;
		}
		return (1 * this.__easy_k) * ((this.__easy_a * Math.pow(timeElapsed / this._duration, 2)) + (this.__easy_b * (timeElapsed / this._duration)));
	}
	/*<EndMethod Name="System.Double Infragistics.AnimationManagerBase::getValueForCurrentTime()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimationManagerBase::Tick()" />*/
	tick: function () {
		if (!this.__isDone) {
			var val = this.getValueForCurrentTime();
			this._delegate.animationManagerTick(val);
			if (val == 1) {
				this.__isDone = true;
				this.internalStop();
				this._delegate.animationManagerCompleted();
			} else {
				this.internalStop();
				this.__timer = this.nextTimer();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AnimationManagerBase::Tick()" />*/
	,
	$type: new $.ig.Type('AnimationManagerBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AnimationManagerBase" />*/

/*<BeginType Name="Infragistics.AnimationManager" />*/

$.ig.util.defType('AnimationManager', 'AnimationManagerBase', {
	init: function () {
		$.ig.AnimationManagerBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Timer Infragistics.AnimationManager::nextTimer()" />*/
	nextTimer: function () {
		var t = new $.ig.Timer();
		t.start(this.tick.runOn(this));
		return t;
	}
	/*<EndMethod Name="System.Timer Infragistics.AnimationManager::nextTimer()" />*/
	,
	$type: new $.ig.Type('AnimationManager', $.ig.AnimationManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AnimationManager" />*/

/*<BeginType Name="Infragistics.NativeUtility" />*/

$.ig.util.defType('NativeUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.NativeUtility Infragistics.NativeUtility::Utility()" />*/
	utility: function () {
		if ($.ig.NativeUtility.prototype.__utility == null) {
			$.ig.NativeUtility.prototype.__utility = new $.ig.NativeUtility();
		}
		return $.ig.NativeUtility.prototype.__utility;
	}
	/*<EndMethod Name="Infragistics.NativeUtility Infragistics.NativeUtility::Utility()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUtility::NumberIsFinite(System.Double)" />*/
	numberIsFinite: function (value) {
		var result = false;
		result = isFinite(value);
		return result;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUtility::NumberIsFinite(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeSize Infragistics.NativeUtility::MeasureText(System.String, System.String, System.Single)" />*/
	measureText: function (text, fontName, fontSize) {
		$.ig.JSHelperUtility.prototype.utility().measureText(text, null, fontName, fontSize);
		var width = $.ig.JSHelperUtility.prototype.utility().measuredWidth();
		var height = $.ig.JSHelperUtility.prototype.utility().nonRoundedHeight();
		return new $.ig.CPSize(1, width, height);
	}
	/*<EndMethod Name="Infragistics.NativeSize Infragistics.NativeUtility::MeasureText(System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeSize Infragistics.NativeUtility::MeasureTextIgnoreBaseline(System.String, System.String, System.Single)" />*/
	measureTextIgnoreBaseline: function (text, fontName, fontSize) {
		return this.measureText(text, fontName, fontSize);
	}
	/*<EndMethod Name="Infragistics.NativeSize Infragistics.NativeUtility::MeasureTextIgnoreBaseline(System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NativeUtility::GetTextBaseline(System.String, System.String, System.Single)" />*/
	getTextBaseline: function (text, fontName, fontSize) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.NativeUtility::GetTextBaseline(System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUtility::ConvertNumberToString(System.Double, System.Int32, System.Boolean)" />*/
	convertNumberToString: function (value, decimalPlaces, showGroupingSeparator) {
		if (value == null) {
			return "";
		}
		var withDecimalPlaces = value.toFixed(decimalPlaces);
		return showGroupingSeparator ? String(withDecimalPlaces).replace(/\B(?=(\d{3})+(?!\d))/g, ',') : withDecimalPlaces;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUtility::ConvertNumberToString(System.Double, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.NativeUtility::GetCurrentTime()" />*/
	getCurrentTime: function () {
		var date = new Date();
		return date.getTime() / 1000;
	}
	/*<EndMethod Name="System.Double Infragistics.NativeUtility::GetCurrentTime()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NativeUtility::GetScreenDensity()" />*/
	getScreenDensity: function () {
		return 1;
	}
	/*<EndMethod Name="System.Single Infragistics.NativeUtility::GetScreenDensity()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.NativeUtility::ConvertNativeRectToObject(Infragistics.NativeRect)" />*/
	convertNativeRectToObject: function (rect) {
		return rect;
	}
	/*<EndMethod Name="System.Object Infragistics.NativeUtility::ConvertNativeRectToObject(Infragistics.NativeRect)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.NativeUtility::ConvertObjectToNativeRect(System.Object)" />*/
	convertObjectToNativeRect: function (rect) {
		return rect;
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.NativeUtility::ConvertObjectToNativeRect(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataValueInfo Infragistics.NativeUtility::InitDataInfo(System.String, System.Int32)" />*/
	initDataInfo: function (key, count) {
		if (key != null) {
			var info = new $.ig.DataValueInfo();
			info._min = 3.4028230607370965E+38;
			info._max = -3.4028230607370965E+38;
			info._total = 0;
			info._values = new Array(count);
			return info;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.DataValueInfo Infragistics.NativeUtility::InitDataInfo(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUtility::FixName(System.String, System.Boolean)" />*/
	fixName: function (propertyName, underscore) {
		var prop = propertyName.substr(0, 1).toLowerCase() + propertyName.substr(1, propertyName.length);
		if (underscore) {
			prop = "_" + prop;
		}
		return prop;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUtility::FixName(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.NativeUtility::GetValue(System.Object, System.String)" />*/
	getValue: function (obj, propName) {
		if (propName == null) {
			return obj;
		}
		var name = this.fixName(propName, true);
		var val = obj[name];
		if (val == null) {
			name = this.fixName(propName, false);
			val = obj[name]();
		}
		return val;
	}
	/*<EndMethod Name="System.Object Infragistics.NativeUtility::GetValue(System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.NativeUtility::GetDouble(System.Object, System.String)" />*/
	getDouble: function (obj, propName) {
		var val = this.getValue(obj, propName);
		if (val == null) {
			return NaN;
		}
		return val;
	}
	/*<EndMethod Name="System.Double Infragistics.NativeUtility::GetDouble(System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.NativeUtility::SetData(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Boolean, Infragistics.IDataProcessorCallback)" />*/
	setData: function (data, value1Key, value2Key, value3Key, value4Key, value5Key, labelKey, dateKey, childrenKey, nansAsZero, callback) {
		var info = new $.ig.DataInfo();
		info._count = data.length;
		if (info._count != 0) {
			info._value1 = this.initDataInfo(value1Key, info._count);
			info._value2 = this.initDataInfo(value2Key, info._count);
			info._value3 = this.initDataInfo(value3Key, info._count);
			info._value4 = this.initDataInfo(value4Key, info._count);
			info._value5 = this.initDataInfo(value5Key, info._count);
			if (childrenKey != null) {
				info._children = new $.ig.Array();
			}
			if (labelKey != null) {
				info._labels = new $.ig.Array();
			}
			if (dateKey != null) {
				info._dates = new $.ig.DateValueInfo();
				info._dates._min = 0x7FFFFFFFFFFFFFFF;
				info._dates._max = -9.2233720368547758E+18;
				info._dates._values = new Array(info._count);
			}
			var longestLabelLength = 0;
			for (var index = 0; index < info._count; index++) {
				var dataObj = data[index];
				var value = 0;
				var label = "";
				if (info._value1 != null) {
					value = this.getDouble(dataObj, value1Key);
					if (!isNaN(value)) {
						info._value1._max = Math.max(value, info._value1._max);
						info._value1._min = Math.min(value, info._value1._min);
						info._value1._total += value;
					} else if (nansAsZero) {
						value = 0;
					} else {
						info._hasNans = true;
					}
					info._value1._values[index] = value;
				}
				if (info._value2 != null) {
					value = this.getDouble(dataObj, value2Key);
					if (!isNaN(value)) {
						info._value2._max = Math.max(value, info._value2._max);
						info._value2._min = Math.min(value, info._value2._min);
						info._value2._total += value;
					} else if (nansAsZero) {
						value = 0;
					} else {
						info._hasNans = true;
					}
					info._value2._values[index] = value;
				}
				if (info._value3 != null) {
					value = this.getDouble(dataObj, value3Key);
					if (!isNaN(value)) {
						info._value3._max = Math.max(value, info._value3._max);
						info._value3._min = Math.min(value, info._value3._min);
						info._value3._total += value;
					} else if (nansAsZero) {
						value = 0;
					} else {
						info._hasNans = true;
					}
					info._value3._values[index] = value;
				}
				if (info._value4 != null) {
					value = this.getDouble(dataObj, value4Key);
					if (!isNaN(value)) {
						info._value4._max = Math.max(value, info._value4._max);
						info._value4._min = Math.min(value, info._value4._min);
						info._value4._total += value;
					} else if (nansAsZero) {
						value = 0;
					} else {
						info._hasNans = true;
					}
					info._value4._values[index] = value;
				}
				if (info._value5 != null) {
					value = this.getDouble(dataObj, value5Key);
					if (!isNaN(value)) {
						info._value5._max = Math.max(value, info._value5._max);
						info._value5._min = Math.min(value, info._value5._min);
						info._value5._total += value;
					} else if (nansAsZero) {
						value = 0;
					} else {
						info._hasNans = true;
					}
					info._value5._values[index] = value;
				}
				if (labelKey != null) {
					label = this.getValue(dataObj, labelKey);
					info._labels[index] = label;
					if (label != null && label.length > longestLabelLength) {
						info._longestLabel = label;
						longestLabelLength = label.length;
					}
				}
				if (dateKey != null) {
					var date = this.getValue(dataObj, dateKey);
					if (date != null) {
						var dateValue = date.getTime();
						info._dates._max = Math.max(info._dates._max, dateValue);
						info._dates._min = Math.min(info._dates._min, dateValue);
						info._dates._values[index] = dateValue;
					}
				}
				if (info._children != null) {
					var children = null;
					children = this.getValue(dataObj, childrenKey);
					if (children != null) {
						var childInfo = this.setData(children, value1Key, value2Key, value3Key, value4Key, value5Key, labelKey, dateKey, childrenKey, nansAsZero, callback);
						if (childInfo._count > 0) {
							info._depth = 1 + childInfo._depth;
						}
						info._children[index] = childInfo;
					} else {
						info._children = null;
					}
				}
				if (callback != null) {
					callback.itemProcessed(index, info._value1 != null ? info._value1._values[index] : NaN, info._value2 != null ? info._value2._values[index] : NaN, info._value3 != null ? info._value3._values[index] : NaN, info._value4 != null ? info._value4._values[index] : NaN, info._value5 != null ? info._value5._values[index] : NaN, info._labels != null ? info._labels[index] : null, info._dates != null ? info._dates._values[index] : -1, info._children);
				}
			}
		}
		return info;
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.NativeUtility::SetData(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Boolean, Infragistics.IDataProcessorCallback)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUtility::LabelForDateFromTicks(System.Int64, System.String)" />*/
	labelForDateFromTicks: function (ticks, formatString) {
		var date = new Date(ticks);
		return date.format(formatString);
	}
	/*<EndMethod Name="System.String Infragistics.NativeUtility::LabelForDateFromTicks(System.Int64, System.String)" />*/
	,
	$type: new $.ig.Type('NativeUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeUtility" />*/

/*<BeginType Name="Infragistics.ScrollableBaseView" />*/

$.ig.util.defType('ScrollableBaseView', 'SharedScrollableBaseView', {
	init: function () {
		$.ig.SharedScrollableBaseView.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollableBaseView::HandlesMouseEvents()" />*/
	handlesMouseEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollableBaseView::HandlesMouseEvents()" />*/
	,
	$type: new $.ig.Type('ScrollableBaseView', $.ig.SharedScrollableBaseView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScrollableBaseView" />*/

/*<BeginType Name="Infragistics.Layer" />*/

$.ig.util.defType('Layer', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_hidden: false,
	/*<BeginMethod Name="System.Void Infragistics.Layer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	render: function (canvas, context, x, y, w, h, info) {
	}
	/*<EndMethod Name="System.Void Infragistics.Layer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layer::shouldClip()" />*/
	shouldClip: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layer::shouldClip()" />*/
	,
	$type: new $.ig.Type('Layer', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Layer" />*/

/*<BeginType Name="Infragistics.AdornmentBase" />*/

$.ig.util.defType('AdornmentBase', 'Layer', {
	init: function () {
		$.ig.Layer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.AdornmentBase::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	render: function (canvas, context, vpx, vpy, vpw, vph, info) {
		if (info == null) {
			return;
		}
		var snapshot = info;
		if (snapshot.isValid()) {
			var bounds = snapshot.getAdornmentBounds();
			var x = bounds._x;
			var y = bounds._y;
			var w = bounds._width;
			var h = bounds._height;
			if (this.shouldClip()) {
				canvas.clipCanvas(context, x, y, w, h);
			}
			if (h > 0 && w > 0) {
				this.renderLayer(canvas, context, snapshot, x, y, w, h);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AdornmentBase::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AdornmentBase::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, context, snapshot, x, y, w, h) {
	}
	/*<EndMethod Name="System.Void Infragistics.AdornmentBase::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('AdornmentBase', $.ig.Layer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AdornmentBase" />*/

/*<BeginType Name="Infragistics.SnapshotBase" />*/

$.ig.util.defType('SnapshotBase', 'Object', {
	_width: 0,
	_height: 0,
	_scale: null,
	_density: 0,
	_canvasFrameX: 0,
	_canvasFrameY: 0,
	_canvasFrameWidth: 0,
	_canvasFrameHeight: 0,
	_userInteractionEnabled: false,
	_scaleFactor: 0,
	_fontSize: 0,
	_fontName: null,
	_fontColor: null,
	_fontResourceStream: null,
	_minFontSize: 0,
	_maxFontSize: 0,
	_fontSizePercent: 0,
	_treatNullValuesAsZeroes: false,
	init: function (setDefaults) {
		this._scale = new $.ig.CPRect();
		this._fontColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		if (setDefaults) {
			this._density = $.ig.NativeUtility.prototype.utility().getScreenDensity();
			this._userInteractionEnabled = true;
			this._fontSizePercent = 0.12;
			this._minFontSize = 7;
			this._maxFontSize = 12;
			this._fontName = $.ig.ThemeManager.prototype.theme().drawingRegularFont();
			this._fontColor = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._treatNullValuesAsZeroes = false;
			this._fontResourceStream = null;
		}
	},
	/*<BeginMethod Name="System.Boolean Infragistics.SnapshotBase::IsValid()" />*/
	isValid: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SnapshotBase::IsValid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SnapshotBase::GetValueInterval()" />*/
	getValueInterval: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SnapshotBase::GetValueInterval()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.SnapshotBase::GetAdornmentBounds()" />*/
	getAdornmentBounds: function () {
		return new $.ig.CPRect(1, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.SnapshotBase::GetAdornmentBounds()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotBase::CalculateFontInfo()" />*/
	calculateFontInfo: function () {
		var baseSize = this._width < this._height ? this._width : this._height;
		var fs = baseSize * this._fontSizePercent;
		fs = fs > this._minFontSize ? fs : this._minFontSize;
		fs = fs < this._maxFontSize ? fs : this._maxFontSize;
		this._fontSize = $.ig.truncate((fs * this._density));
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotBase::CalculateFontInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotBase::Invalidate()" />*/
	invalidate: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotBase::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SnapshotBase::GetSeriesCount()" />*/
	getSeriesCount: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SnapshotBase::GetSeriesCount()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		snapshot._scale = this._scale;
		snapshot._width = this._width;
		snapshot._height = this._height;
		snapshot._density = this._density;
		snapshot._userInteractionEnabled = this._userInteractionEnabled;
		snapshot._scaleFactor = this._scaleFactor;
		snapshot._treatNullValuesAsZeroes = this._treatNullValuesAsZeroes;
		snapshot._fontSize = this._fontSize;
		snapshot._fontSizePercent = this._fontSizePercent;
		snapshot._fontName = this._fontName;
		snapshot._fontColor = this._fontColor;
		snapshot._fontResourceStream = this._fontResourceStream;
		snapshot._minFontSize = this._minFontSize;
		snapshot._maxFontSize = this._maxFontSize;
		snapshot._canvasFrameX = this._canvasFrameX;
		snapshot._canvasFrameY = this._canvasFrameY;
		snapshot._canvasFrameWidth = this._canvasFrameWidth;
		snapshot._canvasFrameHeight = this._canvasFrameHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		newSnapshot._fontColor = $.ig.ColorUtility.prototype.transitionColor(this._fontColor, newSnapshot._fontColor, percent);
		newSnapshot._fontSizePercent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._fontSizePercent, newSnapshot._fontSizePercent, percent);
		newSnapshot._minFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._minFontSize, newSnapshot._minFontSize, percent);
		newSnapshot._maxFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._maxFontSize, newSnapshot._maxFontSize, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.SnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	$type: new $.ig.Type('SnapshotBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SnapshotBase" />*/

/*<BeginType Name="Infragistics.LegendSnapshotBase" />*/

$.ig.util.defType('LegendSnapshotBase', 'SnapshotBase', {
	_legendLocationFrameX: 0,
	_legendLocationFrameY: 0,
	_legendLocationFrameWidth: 0,
	_legendLocationFrameHeight: 0,
	_legendTopOffset: 0,
	_legendLeftOffset: 0,
	_legendMarkerSize: 0,
	_legendItemSpacing: 0,
	_legendSmallPadding: 0,
	_legendFontName: null,
	_legendFontSize: 0,
	_densifiedLegendFontSize: 0,
	_legendLocation: 0,
	_legendLabelColor: null,
	_flipIndexOrder: false,
	_legendWidthToRemove: 0,
	_legendHeighToRemove: 0,
	_displayTooltips: false,
	_touchPoint: null,
	_highlightFadeInDataIndex: 0,
	_highlightFadeInSeriesIndex: 0,
	_categoryLabel: null,
	_crosshairsAnnotationForeColor: null,
	_crosshairsAnnotationBackColor: null,
	_crosshairsThickness: 0,
	_crosshairsVisibility: 0,
	_nonHighlightedAlpha: 0,
	_usingClickAdorners: false,
	_highlightFadeOutDataIndex: 0,
	_highlightFadeOutSeriesIndex: 0,
	_highlightFadeInAlpha: 0,
	_highlightFadeOutAlpha: 0,
	init: function (setDefaults) {
		this._legendLabelColor = new $.ig.Number();
		this._flipIndexOrder = false;
		this._crosshairsAnnotationForeColor = new $.ig.Number();
		this._crosshairsAnnotationBackColor = new $.ig.Number();
		$.ig.SnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._legendLocation = $.ig.LegendLocation.prototype.none;
			this._legendFontSize = -1;
			this._touchPoint = new $.ig.CPPoint(-1, -1);
			this._categoryLabel = "";
			this._crosshairsAnnotationBackColor = $.ig.ColorUtility.prototype.createColor1(225, 0, 0, 0);
			this._crosshairsAnnotationForeColor = $.ig.ColorUtility.prototype.createColor1(225, 255, 255, 255);
			this._crosshairsThickness = 1;
			this._crosshairsVisibility = $.ig.CrosshairsVisibility.prototype.both;
			this.resetHighlighting();
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.LegendSnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SnapshotBase.prototype.copyTo.call(this, snapshot);
		var s = snapshot;
		s._legendLocation = this._legendLocation;
		s._legendLocationFrameX = this._legendLocationFrameX;
		s._legendLocationFrameY = this._legendLocationFrameY;
		s._legendLocationFrameWidth = this._legendLocationFrameWidth;
		s._legendLocationFrameHeight = this._legendLocationFrameHeight;
		s._legendLeftOffset = this._legendLeftOffset;
		s._legendTopOffset = this._legendTopOffset;
		s._legendMarkerSize = this._legendMarkerSize;
		s._legendItemSpacing = this._legendItemSpacing;
		s._legendFontName = this._legendFontName;
		s._legendFontSize = this._legendFontSize;
		s._densifiedLegendFontSize = this._densifiedLegendFontSize;
		s._legendLabelColor = this._legendLabelColor;
		s._flipIndexOrder = this._flipIndexOrder;
		s._legendSmallPadding = this._legendSmallPadding;
		s._touchPoint = this._touchPoint;
		s._highlightFadeInDataIndex = this._highlightFadeInDataIndex;
		s._highlightFadeInSeriesIndex = this._highlightFadeInSeriesIndex;
		s._categoryLabel = this._categoryLabel;
		s._crosshairsAnnotationBackColor = this._crosshairsAnnotationBackColor;
		s._crosshairsAnnotationForeColor = this._crosshairsAnnotationForeColor;
		s._crosshairsThickness = this._crosshairsThickness;
		s._crosshairsVisibility = this._crosshairsVisibility;
		s._nonHighlightedAlpha = this._nonHighlightedAlpha;
		s._displayTooltips = this._displayTooltips;
		s._usingClickAdorners = this._usingClickAdorners;
		s._highlightFadeOutDataIndex = this._highlightFadeOutDataIndex;
		s._highlightFadeOutSeriesIndex = this._highlightFadeOutSeriesIndex;
		s._highlightFadeOutAlpha = this._highlightFadeOutAlpha;
		s._highlightFadeInAlpha = this._highlightFadeInAlpha;
	}
	/*<EndMethod Name="System.Void Infragistics.LegendSnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.LegendSnapshotBase::GetLabelForLegend(System.Int32, System.Int32)" />*/
	getLabelForLegend: function (seriesIndex, itemIndex) {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.LegendSnapshotBase::GetLabelForLegend(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.LegendSnapshotBase::GetLegendPositions(System.Int32)" />*/
	getLegendPositions: function (seriesIndex) {
		return null;
	}
	/*<EndMethod Name=" Infragistics.LegendSnapshotBase::GetLegendPositions(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.LegendSnapshotBase::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	getNumberOfLegendItemsInSeries: function (seriesIndex) {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.LegendSnapshotBase::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.LegendSnapshotBase::CalculateLegendSizeInfo()" />*/
	calculateLegendSizeInfo: function () {
		this._legendWidthToRemove = 0;
		this._legendHeighToRemove = 0;
		var numberOfLegendItems = 0;
		if (this._legendLocation != $.ig.LegendLocation.prototype.none) {
			if (this._legendFontSize < 0) {
				this._densifiedLegendFontSize = this._fontSize;
			} else {
				this._densifiedLegendFontSize = this._legendFontSize * this._density;
			}
			var largestText = 0;
			this._legendLabelColor = this._fontColor;
			this._legendFontName = this._fontName;
			this._legendItemSpacing = $.ig.ThemeManager.prototype.theme().padding15();
			this._legendMarkerSize = 9 * this._density;
			this._legendSmallPadding = $.ig.ThemeManager.prototype.theme().padding5();
			var legendMargin = 2 * this._density;
			var x = legendMargin;
			var y = 0;
			var numberOfSeries = this.getSeriesCount();
			var landScape = this._legendLocation == $.ig.LegendLocation.prototype.top || this._legendLocation == $.ig.LegendLocation.prototype.bottom;
			var isLegendSplit = this.isLegendSplit();
			var x2 = this._width - legendMargin;
			var y2 = 0;
			var availableExtent = landScape ? this._width : this._height;
			if (isLegendSplit) {
				availableExtent = availableExtent / 2 - this._legendItemSpacing;
			}
			for (var seriesIndex = 0; seriesIndex < numberOfSeries; seriesIndex++) {
				var legendPositions = this.getLegendPositions(seriesIndex);
				var iconSize = this.getLegendIconSize(this.getLegendIconShape(seriesIndex));
				var itemCount = this.getNumberOfLegendItemsInSeries(seriesIndex);
				numberOfLegendItems += itemCount;
				for (var itemIndex = 0; itemIndex < itemCount; itemIndex++) {
					var offset = itemIndex * 4;
					var labelIndex = this._flipIndexOrder ? itemCount - (itemIndex + 1) : itemIndex;
					var label = this.getLabelForLegend(seriesIndex, labelIndex);
					if ($.ig.ChartsUtility.prototype.stringIsNullOrEmpty(label)) {
						legendPositions[offset] = NaN;
						legendPositions[offset + 1] = NaN;
						legendPositions[offset + 2] = NaN;
						legendPositions[offset + 3] = NaN;
						continue;
					}
					var textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(label, this._fontName, this._densifiedLegendFontSize);
					var w = legendPositions[offset + 2] = Math.ceil(iconSize._width + this._legendSmallPadding + textSize._width);
					legendPositions[offset + 3] = textSize._height;
					if (isLegendSplit) {
						if (this.getSeriesYAxisLocation(seriesIndex) == $.ig.YAxisLocation.prototype.left) {
							legendPositions[offset] = x;
							legendPositions[offset + 1] = y;
							largestText = Math.max(largestText, Math.max(this._legendMarkerSize, textSize._height));
							x += w + this._legendItemSpacing;
							if (x > availableExtent) {
								x = legendMargin;
								y += largestText + this._legendSmallPadding;
								legendPositions[offset] = x;
								legendPositions[offset + 1] = y;
								x += w + this._legendItemSpacing;
							}
						} else {
							x2 -= w;
							legendPositions[offset] = x2;
							legendPositions[offset + 1] = y2;
							largestText = Math.max(largestText, Math.max(this._legendMarkerSize, textSize._height));
							if (this._width - x2 > availableExtent) {
								x2 = this._width - w - legendMargin;
								y2 += largestText + this._legendSmallPadding;
								legendPositions[offset] = x2;
								legendPositions[offset + 1] = y2;
								x2 -= w;
							}
							x2 -= this._legendItemSpacing;
						}
					} else {
						legendPositions[offset] = x;
						legendPositions[offset + 1] = y;
						if (landScape) {
							largestText = Math.max(largestText, Math.max(this._legendMarkerSize, textSize._height));
							x += w + this._legendItemSpacing;
							if (x > this._width) {
								x = legendMargin;
								y += largestText + this._legendSmallPadding;
								legendPositions[offset] = x;
								legendPositions[offset + 1] = y;
								x += w + this._legendItemSpacing;
							}
						} else {
							largestText = Math.max(largestText, w);
							y += textSize._height + this._legendItemSpacing;
							if (y > this._height) {
								y = this._legendItemSpacing;
								x += w + this._legendItemSpacing;
								legendPositions[offset] = x;
								legendPositions[offset + 1] = y;
								y += textSize._height + this._legendItemSpacing;
							}
						}
					}
				}
			}
			switch (this._legendLocation) {
				case $.ig.LegendLocation.prototype.left:
				case $.ig.LegendLocation.prototype.right:
					{
						this._legendLocationFrameWidth = largestText + x + this._legendItemSpacing;
						this._legendLocationFrameHeight = this._height;
						if (this._legendLocationFrameWidth > (this._width * 0.25) || numberOfLegendItems < 1) {
							this._legendLocationFrameWidth = 0;
						} else {
							this._legendWidthToRemove = this._legendLocationFrameWidth;
						}
						break;
					}
				case $.ig.LegendLocation.prototype.top:
				case $.ig.LegendLocation.prototype.bottom:
					{
						this._legendLocationFrameWidth = this._width;
						this._legendLocationFrameHeight = largestText + this._legendItemSpacing + Math.max(y, y2);
						if (this._legendLocationFrameHeight > (this._height * 0.25) || numberOfLegendItems < 1) {
							this._legendLocationFrameHeight = 0;
						} else {
							this._legendHeighToRemove = this._legendLocationFrameHeight;
						}
						break;
					}
				case $.ig.LegendLocation.prototype.none: break;
			}
		}
		this._legendLeftOffset = (this._legendLocation == $.ig.LegendLocation.prototype.left) ? this._legendLocationFrameWidth : 0;
		this._legendTopOffset = (this._legendLocation == $.ig.LegendLocation.prototype.top) ? this._legendLocationFrameHeight : 0;
		this._legendLocationFrameX = (this._legendLocation == $.ig.LegendLocation.prototype.right) ? this._width - this._legendLocationFrameWidth : 0;
		this._legendLocationFrameY = (this._legendLocation == $.ig.LegendLocation.prototype.bottom) ? this._height - this._legendLocationFrameHeight : 0;
	}
	/*<EndMethod Name="System.Void Infragistics.LegendSnapshotBase::CalculateLegendSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.LegendSnapshotBase::IsLegendSplit()" />*/
	isLegendSplit: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.LegendSnapshotBase::IsLegendSplit()" />*/
	,
	/*<BeginMethod Name="Infragistics.YAxisLocation Infragistics.LegendSnapshotBase::GetSeriesYAxisLocation(System.Int32)" />*/
	getSeriesYAxisLocation: function (seriesIndex) {
		return $.ig.YAxisLocation.prototype.left;
	}
	/*<EndMethod Name="Infragistics.YAxisLocation Infragistics.LegendSnapshotBase::GetSeriesYAxisLocation(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.LegendIconShape Infragistics.LegendSnapshotBase::GetLegendIconShape(System.Int32)" />*/
	getLegendIconShape: function (seriesIndex) {
		return $.ig.LegendIconShape.prototype.circle;
	}
	/*<EndMethod Name="Infragistics.LegendIconShape Infragistics.LegendSnapshotBase::GetLegendIconShape(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeSize Infragistics.LegendSnapshotBase::GetLegendIconSize(Infragistics.LegendIconShape)" />*/
	getLegendIconSize: function (shape) {
		switch (shape) {
			case $.ig.LegendIconShape.prototype.line: return new $.ig.CPSize(1, 9 * this._density, 3 * this._density);
			case $.ig.LegendIconShape.prototype.square: return new $.ig.CPSize(1, 8 * this._density, 8 * this._density);
			case $.ig.LegendIconShape.prototype.circle:
			default:
				return new $.ig.CPSize(1, 8 * this._density, 8 * this._density);
		}
	}
	/*<EndMethod Name="Infragistics.NativeSize Infragistics.LegendSnapshotBase::GetLegendIconSize(Infragistics.LegendIconShape)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.LegendSnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var snapshot = newSnapshot;
		snapshot._nonHighlightedAlpha = $.ig.truncate($.ig.CPMathUtility.prototype.transitionNativeNumber(this._nonHighlightedAlpha, snapshot._nonHighlightedAlpha, percent));
		snapshot._highlightFadeInAlpha = $.ig.truncate($.ig.CPMathUtility.prototype.transitionNativeNumber(this._highlightFadeInAlpha, snapshot._highlightFadeInAlpha, percent));
		snapshot._highlightFadeOutAlpha = $.ig.truncate($.ig.CPMathUtility.prototype.transitionNativeNumber(this._highlightFadeOutAlpha, snapshot._highlightFadeOutAlpha, percent));
		if (snapshot._touchPoint._x != -1 && snapshot._touchPoint._y != -1 && this._touchPoint._x != -1 && this._touchPoint._y != -1) {
			snapshot._touchPoint = new $.ig.CPPoint($.ig.CPMathUtility.prototype.transitionNativeNumber(this._touchPoint._x, snapshot._touchPoint._x, percent), $.ig.CPMathUtility.prototype.transitionNativeNumber(this._touchPoint._y, snapshot._touchPoint._y, percent));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.LegendSnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveHighlightColor(System.ColorInt, System.ColorInt, System.Int32)" />*/
	resolveHighlightColor: function (baseColor, fadedColor, index) {
		if (this._highlightFadeInDataIndex != -1) {
			var valInt = Math.max(this.getValueInterval(), 1);
			if ($.ig.intDivide(this._highlightFadeInDataIndex, valInt) == index) {
				return $.ig.ColorUtility.prototype.transitionAlpha(baseColor, this._highlightFadeInAlpha / 255);
			} else if (this._highlightFadeOutDataIndex != -1 && $.ig.intDivide(this._highlightFadeOutDataIndex, valInt) == index) {
				return $.ig.ColorUtility.prototype.transitionAlpha(baseColor, this._highlightFadeOutAlpha / 255);
			} else if ($.ig.intDivide(this._highlightFadeInDataIndex, valInt) != index) {
				return fadedColor;
			}
		}
		return baseColor;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveHighlightColor(System.ColorInt, System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveHighlightColor(System.ColorInt, System.Int32)" />*/
	resolveHighlightColor1: function (baseColor, index) {
		return this.resolveHighlightColor(baseColor, this.resolveFadedColor(baseColor), index);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveHighlightColor(System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveFadedColor(System.ColorInt)" />*/
	resolveFadedColor: function (baseColor) {
		return $.ig.ColorUtility.prototype.transitionAlpha(baseColor, this._nonHighlightedAlpha / 255);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.LegendSnapshotBase::ResolveFadedColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.LegendSnapshotBase::ResetHighlighting()" />*/
	resetHighlighting: function () {
		this._highlightFadeInDataIndex = -1;
		this._highlightFadeInSeriesIndex = -1;
		this._nonHighlightedAlpha = 255;
		this._highlightFadeOutDataIndex = -1;
		this._highlightFadeOutSeriesIndex = -1;
		this._highlightFadeInAlpha = $.ig.SnapshotBase.prototype.hOVER_FADED_ALPHA;
		this._highlightFadeOutAlpha = 255;
	}
	/*<EndMethod Name="System.Void Infragistics.LegendSnapshotBase::ResetHighlighting()" />*/
	,
	$type: new $.ig.Type('LegendSnapshotBase', $.ig.SnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.LegendSnapshotBase" />*/

/*<BeginType Name="Infragistics.AdornmentSnapshot" />*/

$.ig.util.defType('AdornmentSnapshot', 'LegendSnapshotBase', {
	init: function (setDefaults) {
		this._crosshairsColor = new $.ig.Number();
		this._tooltipBackground = new $.ig.Number();
		this._tooltipBorderColor = new $.ig.Number();
		this._tooltipLabelColor = new $.ig.Number();
		this._highlightStrokeColor = new $.ig.Number();
		this._highlightFillColor = new $.ig.Number();
		$.ig.LegendSnapshotBase.prototype.init.call(this, setDefaults);
	},
	_chartSnapshot: null,
	_dataPointIndex: 0,
	_valueInterval: 0,
	_crosshairsColor: null,
	_tooltipBackground: null,
	_tooltipBorderColor: null,
	_tooltipBorderThickness: 0,
	_tooltipPinLocation: 0,
	_tooltipPinPoint: null,
	_tooltipFontName: null,
	_tooltipFontSize: 0,
	_tooltipLabelColor: null,
	_tooltipItems: null,
	_highlightStrokeColor: null,
	_highlightStrokeWidth: 0,
	_highlightFillColor: null,
	_highlightMode: 0,
	$type: new $.ig.Type('AdornmentSnapshot', $.ig.LegendSnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AdornmentSnapshot" />*/

/*<BeginType Name="Infragistics.CalculatedLayer" />*/

$.ig.util.defType('CalculatedLayer', 'Layer', {
	init: function () {
		$.ig.Layer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CalculatedLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	render: function (canvas, context, viewportX, viewportY, viewportWidth, viewportHeight, info) {
		if (info == null) {
			return;
		}
		var snapshot = info;
		if (snapshot.isValid()) {
			var x = this.frameX(snapshot);
			var y = this.frameY(snapshot);
			var w = this.frameWidth(snapshot);
			var h = this.frameHeight(snapshot);
			if (this.shouldClip()) {
				canvas.clipCanvas(context, x, y, w, h);
			}
			if (h > 0 && w > 0) {
				this.renderLayer(canvas, context, snapshot, x, y, w, h);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CalculatedLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CalculatedLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
	}
	/*<EndMethod Name="System.Void Infragistics.CalculatedLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CalculatedLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return snapshot._canvasFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.CalculatedLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CalculatedLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return snapshot._canvasFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.CalculatedLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CalculatedLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return snapshot._canvasFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.CalculatedLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CalculatedLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return snapshot._canvasFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.CalculatedLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	$type: new $.ig.Type('CalculatedLayer', $.ig.Layer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CalculatedLayer" />*/

/*<BeginType Name="Infragistics.AxisAnnotationsLayer" />*/

$.ig.util.defType('AxisAnnotationsLayer', 'CalculatedLayer', {
	__textInstructions: null,
	__showBottomAnnotations: false,
	__showTopAnnotations: false,
	__showLeftAnnotations: false,
	__showRightAnnotations: false,
	__bounds: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructionsWithBackground();
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
		this.__bounds = new $.ig.RectRotationBounds();
	},
	/*<BeginMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return snapshot._width;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return snapshot._height;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisAnnotationsLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var showCrosshairs = seriesSnapshot._crosshairsPoints.count() > 0 && seriesSnapshot._crosshairsVisibility == $.ig.CrosshairsVisibility.prototype.both;
		if (!showCrosshairs) {
			return;
		}
		var resolvedCrosshairs = seriesSnapshot._crosshairsVisibility;
		this.__showBottomAnnotations = seriesSnapshot._hasBottomAxis && !seriesSnapshot._resolvedXAxisBottomLabelsHidden && seriesSnapshot._xAxisBottomFrameHeight > 0 && (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.vertical || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both);
		this.__showTopAnnotations = seriesSnapshot._hasTopAxis && !seriesSnapshot._resolvedXAxisTopLabelsHidden && seriesSnapshot._xAxisTopFrameHeight > 0 && (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.vertical || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both);
		this.__showLeftAnnotations = seriesSnapshot._hasLeftAxis && !seriesSnapshot._resolvedYAxisLeftLabelsHidden && seriesSnapshot._yAxisLeftFrameHeight > 0 && (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.horizontal || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both);
		this.__showRightAnnotations = seriesSnapshot._hasRightAxis && !seriesSnapshot._resolvedYAxisRightLabelsHidden && seriesSnapshot._yAxisRightFrameHeight > 0 && (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.horizontal || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both);
		if (!this.__showBottomAnnotations && !this.__showTopAnnotations && !this.__showLeftAnnotations && !this.__showRightAnnotations) {
			return;
		}
		this.__textInstructions._textColor = seriesSnapshot._crosshairsAnnotationForeColor;
		this.__textInstructions._font = seriesSnapshot._fontName;
		this.__textInstructions._fontSize = seriesSnapshot._fontSize;
		var leftInfoList = new $.ig.Array();
		var rightInfoList = new $.ig.Array();
		for (var i = 0; i < seriesSnapshot._seriesCount; i++) {
			var series = seriesSnapshot._seriesList[i];
			var leftSeriesTotal = NaN;
			var leftTotal = 0;
			var rightSeriesTotal = NaN;
			var rightTotal = 0;
			var keys = (series.isFinancialSeries() || series.isRangeSeries()) ? series._propertyNames : series._stackKeys;
			for (var stackIndex = 0; stackIndex < keys.length; stackIndex++) {
				var key = keys[stackIndex];
				if ($.ig.NativeDictionaryUtility.prototype.containsKey(seriesSnapshot._crosshairsPoints, key)) {
					var info = seriesSnapshot._crosshairsPoints.item(key);
					info._adjustedYPosition = info._point._y;
					if (series._yLocation == $.ig.YAxisLocation.prototype.left) {
						if ($.ig.util.isNaN(leftSeriesTotal)) {
							leftSeriesTotal = seriesSnapshot.getSeriesTotal(info._index, i);
						}
						leftTotal += info._value;
						var stackPercentage = (leftTotal / leftSeriesTotal) * 100;
						info._percentage = $.ig.NativeUtility.prototype.utility().convertNumberToString(stackPercentage, 0, false) + "%";
						leftInfoList.add(info);
					} else {
						if ($.ig.util.isNaN(rightSeriesTotal)) {
							rightSeriesTotal = seriesSnapshot.getSeriesTotal(info._index, i);
						}
						rightTotal += info._value;
						var stackPercentage1 = (rightTotal / rightSeriesTotal) * 100;
						info._percentage = $.ig.NativeUtility.prototype.utility().convertNumberToString(stackPercentage1, 0, false) + "%";
						rightInfoList.add(info);
					}
				}
			}
		}
		this.renderAnnotations(leftInfoList, canvas, ctx, seriesSnapshot);
		this.renderAnnotations(rightInfoList, canvas, ctx, seriesSnapshot);
	}
	/*<EndMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderAnnotations(Infragistics.CPList, Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshot)" />*/
	renderAnnotations: function (list, canvas, ctx, seriesSnapshot) {
		list = $.ig.NativeSortUtility.prototype.sortListNumericDouble(new $.ig.CPPropertySortConverter("pointY"), list, true);
		var labelTextHeight = seriesSnapshot._labelTextHeight;
		var crosshairBounds = seriesSnapshot.getAdornmentBounds();
		this.__textInstructions._degrees = seriesSnapshot._labelAngle;
		var previousPos = -1;
		for (var i = 0; i < list.length; i++) {
			var info = list[i];
			if (i > 0 && previousPos == info._bounds._x) {
				continue;
			}
			previousPos = info._bounds._x;
			var series = seriesSnapshot._seriesList[info._seriesIndex];
			var shouldRenderAnnotation = false;
			var yPos = -1;
			if (series._xLocation == $.ig.XAxisLocation.prototype.bottom && this.__showBottomAnnotations) {
				shouldRenderAnnotation = true;
				yPos = seriesSnapshot._xAxisBottomFrameY;
			} else if (series._xLocation == $.ig.XAxisLocation.prototype.top && this.__showTopAnnotations) {
				shouldRenderAnnotation = true;
				yPos = seriesSnapshot._xAxisTopFrameY;
			}
			if (shouldRenderAnnotation) {
				var resolvedColor = seriesSnapshot._crosshairsAnnotationBackColor;
				var annotationString = null;
				if (seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.numericYCategoryX) {
					if ((info._index % seriesSnapshot._labelInterval) == 0) {
						var adjustedIndex = seriesSnapshot.adjustIndexForInterval(info._index);
						annotationString = (seriesSnapshot._subsetIndices.length > 0) ? seriesSnapshot.labelForItem(seriesSnapshot._subsetIndices[adjustedIndex]) : seriesSnapshot.labelForItem(info._index);
					} else {
						annotationString = seriesSnapshot.labelForItem(info._index);
					}
					if (seriesSnapshot._crosshairsPoints.count() == 1) {
						resolvedColor = info._color;
					}
				} else {
					var useSecondary = seriesSnapshot._useSecondaryAxisValueFormat;
					var useMK = useSecondary ? seriesSnapshot._secondaryAxisValueFormatUseMKFormatting : seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
					var negMode = useSecondary ? seriesSnapshot._secondaryAxisValueFormatNegativeMode : seriesSnapshot._primaryAxisValueFormatNegativeMode;
					var numType = useSecondary ? seriesSnapshot._secondaryAxisValueFormatType : seriesSnapshot._primaryAxisValueFormatType;
					var digits = useSecondary ? seriesSnapshot._secondaryAxisValueFormatFractionDigits : seriesSnapshot._primaryAxisValueFormatFractionDigits;
					var currencySymbol = useSecondary ? seriesSnapshot._secondaryAxisValueFormatCurrencySymbol : seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
					var showGroupingSeparator = useSecondary ? seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator : seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
					annotationString = $.ig.ChartsUtility.prototype.labelForValue(info._x, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
					resolvedColor = series._colors[0];
				}
				var crosshairType = $.ig.ChartsUtility.prototype.getSupportedCrosshairsVisibility(info._seriesType);
				if (seriesSnapshot._labelAngle != 0 && (crosshairType == $.ig.CrosshairsVisibility.prototype.both || crosshairType == $.ig.CrosshairsVisibility.prototype.vertical)) {
					var textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(annotationString, this.__textInstructions._font, this.__textInstructions._fontSize);
					var centerX = info._point._x;
					var centerY = yPos;
					if (this.__textInstructions._alignment == $.ig.TextVerticalAlignment.prototype.top) {
						var radians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(this.__textInstructions._degrees);
						$.ig.ChartsUtility.prototype.calculateBoundsOfRect(this.__bounds, centerX, centerY, textSize._width, textSize._height, radians);
						centerY += (centerY - this.__bounds._minY);
					}
					canvas.drawRect(ctx, centerX, centerY, seriesSnapshot._crosshairsThickness, (series._xLocation == $.ig.XAxisLocation.prototype.top ? crosshairBounds._y - centerY : crosshairBounds._y + crosshairBounds._height - centerY), resolvedColor, 0, 0);
				}
				this.renderAnnotationHelper(canvas, ctx, info._point._x, yPos, annotationString, resolvedColor);
			}
		}
		this.__textInstructions._degrees = 0;
		var count = list.length;
		if (count > 1) {
			var labelHeightWithPadding = labelTextHeight + $.ig.ThemeManager.prototype.theme().padding5();
			var canvasTop = seriesSnapshot._canvasFrameY - labelHeightWithPadding / 2;
			var canvasBottom = seriesSnapshot._canvasFrameY + seriesSnapshot._canvasFrameHeight + labelHeightWithPadding / 2;
			var reachedBottom = false;
			for (var i1 = 1; i1 < count; i1++) {
				var topAnnotation = list[i1 - 1];
				var bottomAnnotation = list[i1];
				if (topAnnotation._value == bottomAnnotation._value) {
					topAnnotation._color = seriesSnapshot._crosshairsAnnotationBackColor;
					list.removeItem(bottomAnnotation);
					count--;
					i1--;
					continue;
				}
				var diff = bottomAnnotation._adjustedYPosition - topAnnotation._adjustedYPosition;
				if (diff < labelHeightWithPadding) {
					var adjustment = (labelHeightWithPadding - diff + 1) / 2;
					bottomAnnotation._adjustedYPosition = Math.min(bottomAnnotation._adjustedYPosition + adjustment, canvasBottom);
					var plotAreaLimitingAdjustment = canvasBottom - bottomAnnotation._adjustedYPosition;
					if (plotAreaLimitingAdjustment > 0) {
						plotAreaLimitingAdjustment = 0;
					}
					topAnnotation._adjustedYPosition = Math.max(topAnnotation._adjustedYPosition - adjustment + plotAreaLimitingAdjustment, canvasTop);
					plotAreaLimitingAdjustment = topAnnotation._adjustedYPosition - canvasTop;
					if (plotAreaLimitingAdjustment < 0) {
						bottomAnnotation._adjustedYPosition += plotAreaLimitingAdjustment;
						reachedBottom = true;
					}
					i1 = Math.max(0, i1 - 2);
					if (i1 == 0 && reachedBottom) {
						var yPos1 = canvasTop;
						while (i1 < count) {
							(list[i1])._adjustedYPosition = yPos1;
							yPos1 += labelHeightWithPadding;
							i1++;
						}
						break;
					}
				}
			}
		}
		for (var i2 = 0; i2 < list.length; i2++) {
			var info1 = list[i2];
			var series1 = seriesSnapshot._seriesList[info1._seriesIndex];
			var shouldRenderAnnotation1 = false;
			var xPos = -1;
			if (series1._yLocation == $.ig.YAxisLocation.prototype.left && this.__showLeftAnnotations) {
				shouldRenderAnnotation1 = true;
				xPos = seriesSnapshot._yAxisLeftFrameX + seriesSnapshot._yAxisLeftFrameWidth / 2;
			} else if (series1._yLocation == $.ig.YAxisLocation.prototype.right && this.__showRightAnnotations) {
				shouldRenderAnnotation1 = true;
				xPos = seriesSnapshot._yAxisRightFrameX + seriesSnapshot._yAxisRightFrameWidth / 2;
			}
			if (shouldRenderAnnotation1) {
				var resolvedColor1 = info1._color;
				var annotationString1 = null;
				if (seriesSnapshot._actualStack100ModeEnabled) {
					annotationString1 = info1._percentage;
				} else {
					var useSecondary1 = series1._yLocation == $.ig.YAxisLocation.prototype.right && seriesSnapshot._useSecondaryAxisValueFormat;
					var useMK1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatUseMKFormatting : seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
					var negMode1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatNegativeMode : seriesSnapshot._primaryAxisValueFormatNegativeMode;
					var numType1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatType : seriesSnapshot._primaryAxisValueFormatType;
					var digits1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatFractionDigits : seriesSnapshot._primaryAxisValueFormatFractionDigits;
					var currencySymbol1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatCurrencySymbol : seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
					var showGroupingSeparator1 = useSecondary1 ? seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator : seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
					annotationString1 = $.ig.ChartsUtility.prototype.labelForValue(seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.numericYNumericX ? info1._y : info1._value, useMK1, negMode1, numType1, digits1, showGroupingSeparator1, currencySymbol1);
				}
				this.renderAnnotationHelper(canvas, ctx, xPos, info1._adjustedYPosition - labelTextHeight / 2, annotationString1, resolvedColor1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderAnnotations(Infragistics.CPList, Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshot)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderAnnotationHelper(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.String, System.ColorInt)" />*/
	renderAnnotationHelper: function (canvas, ctx, x, y, text, color) {
		this.__textInstructions._x = x;
		this.__textInstructions._y = y;
		this.__textInstructions._text = text;
		this.__textInstructions._backgroundColor = color;
		this.__textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.AxisAnnotationsLayer::RenderAnnotationHelper(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.String, System.ColorInt)" />*/
	,
	$type: new $.ig.Type('AxisAnnotationsLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AxisAnnotationsLayer" />*/

/*<BeginType Name="Infragistics.CrosshairsAdornment" />*/

$.ig.util.defType('CrosshairsAdornment', 'AdornmentBase', {
	init: function () {
		$.ig.AdornmentBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CrosshairsAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var showCrosshairs = seriesSnapshot._touchPoint._x != -1 && seriesSnapshot._touchPoint._y != -1 && seriesSnapshot._crosshairsVisibility == $.ig.CrosshairsVisibility.prototype.both;
		if (!showCrosshairs) {
			return;
		}
		var useSeriesColor = seriesSnapshot._crosshairsPoints.count() < 2;
		var keyList = $.ig.NativeDictionaryUtility.prototype.getKeys(seriesSnapshot._crosshairsPoints);
		var infoList = new $.ig.Array();
		var resolvedCrosshairs = $.ig.CrosshairsVisibility.prototype.none;
		for (var i = 0; i < keyList.length; i++) {
			var key = keyList[i];
			var tooltipItem = seriesSnapshot._crosshairsPoints.item(key);
			infoList.add(tooltipItem);
			if (resolvedCrosshairs != $.ig.CrosshairsVisibility.prototype.both) {
				var seriesCrosshairs = $.ig.ChartsUtility.prototype.getSupportedCrosshairsVisibility(tooltipItem._seriesType);
				switch (resolvedCrosshairs) {
					case $.ig.CrosshairsVisibility.prototype.horizontal:
						if (seriesCrosshairs == $.ig.CrosshairsVisibility.prototype.vertical || seriesCrosshairs == $.ig.CrosshairsVisibility.prototype.both) {
							resolvedCrosshairs = $.ig.CrosshairsVisibility.prototype.both;
						}
						break;
					case $.ig.CrosshairsVisibility.prototype.vertical:
						if (seriesCrosshairs == $.ig.CrosshairsVisibility.prototype.horizontal || seriesCrosshairs == $.ig.CrosshairsVisibility.prototype.both) {
							resolvedCrosshairs = $.ig.CrosshairsVisibility.prototype.both;
						}
						break;
					case $.ig.CrosshairsVisibility.prototype.none:
						resolvedCrosshairs = seriesCrosshairs;
						break;
				}
			}
		}
		var count = infoList.length;
		if (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.horizontal) {
			infoList = $.ig.NativeSortUtility.prototype.sortListNumericDouble(new $.ig.CPPropertySortConverter("pointY"), infoList, true);
			var i1 = 0;
			while (i1 < count) {
				var current = infoList[i1];
				var color = current._color;
				var seriesCount = 1;
				var extendsToPrimaryAxis = (seriesSnapshot._seriesList[current._seriesIndex])._yLocation == $.ig.YAxisLocation.prototype.left;
				var extendsToSecondaryAxis = !extendsToPrimaryAxis;
				i1++;
				while (i1 < count && (infoList[i1]).pointY() == current.pointY()) {
					var next = infoList[i1];
					seriesCount++;
					if ((seriesSnapshot._seriesList[next._seriesIndex])._yLocation == $.ig.YAxisLocation.prototype.left) {
						extendsToPrimaryAxis = true;
					} else {
						extendsToSecondaryAxis = true;
					}
					i1++;
				}
				var xPos = x;
				var width = w;
				if (seriesCount > 1) {
					color = seriesSnapshot._crosshairsAnnotationBackColor;
				}
				if (!extendsToSecondaryAxis) {
					width -= seriesSnapshot._innerAxisPadding + seriesSnapshot._yAxisRightFrameWidth / 2;
				} else if (!extendsToPrimaryAxis) {
					var offset = seriesSnapshot._innerAxisPadding + seriesSnapshot._yAxisLeftFrameWidth / 2;
					xPos += offset;
					width -= offset;
				}
				canvas.drawRect(ctx, xPos, Math.min(y + h, Math.max(current._point._y, y)), width, seriesSnapshot._crosshairsThickness, color, 0, 0);
			}
		}
		if (resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.both || resolvedCrosshairs == $.ig.CrosshairsVisibility.prototype.vertical) {
			infoList = $.ig.NativeSortUtility.prototype.sortListNumericDouble(new $.ig.CPPropertySortConverter("pointX"), infoList, true);
			var i2 = 0;
			while (i2 < count) {
				var current1 = infoList[i2];
				var color1 = current1._color;
				var seriesCount1 = 1;
				var extendsToPrimaryAxis1 = (seriesSnapshot._seriesList[current1._seriesIndex])._xLocation == $.ig.XAxisLocation.prototype.bottom;
				var extendsToSecondaryAxis1 = !extendsToPrimaryAxis1;
				i2++;
				while (i2 < count && (infoList[i2]).pointX() == current1.pointX()) {
					var next1 = infoList[i2];
					seriesCount1++;
					if ((seriesSnapshot._seriesList[next1._seriesIndex])._xLocation == $.ig.XAxisLocation.prototype.bottom) {
						extendsToPrimaryAxis1 = true;
					} else {
						extendsToSecondaryAxis1 = true;
					}
					i2++;
				}
				var yPos = y;
				var height = h;
				if (seriesCount1 > 1) {
					color1 = seriesSnapshot._crosshairsAnnotationBackColor;
				}
				if (seriesSnapshot._labelAngle == 0) {
					if (!extendsToPrimaryAxis1) {
						height -= seriesSnapshot._innerAxisPadding + seriesSnapshot._xAxisBottomFrameHeight / 2;
					}
					if (!extendsToSecondaryAxis1) {
						var offset1 = seriesSnapshot._innerAxisPadding + seriesSnapshot._xAxisTopFrameHeight / 2;
						yPos += offset1;
						height -= offset1;
					}
				}
				canvas.drawRect(ctx, Math.min(x + w, Math.max(current1._point._x, x)), yPos, seriesSnapshot._crosshairsThickness, height, color1, 0, 0);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CrosshairsAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('CrosshairsAdornment', $.ig.AdornmentBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CrosshairsAdornment" />*/

/*<BeginType Name="Infragistics.HighlightAdornment" />*/

$.ig.util.defType('HighlightAdornment', 'AdornmentBase', {
	init: function () {
		$.ig.AdornmentBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.HighlightAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var adornmentSnapshot = snapshot;
		for (var i = 0; i < adornmentSnapshot._tooltipItems.length; i++) {
			var item = adornmentSnapshot._tooltipItems[i];
			var strokeColor = 0;
			var fillColor = 0;
			if (adornmentSnapshot._highlightMode == $.ig.HighlightMode.prototype.light) {
				strokeColor = $.ig.ColorUtility.prototype.lightenColor(item._color, 0.10000000149011612);
				fillColor = $.ig.ColorUtility.prototype.lightenColor(item._color, 0.10000000149011612);
			} else if (adornmentSnapshot._highlightMode == $.ig.HighlightMode.prototype.dark) {
				strokeColor = $.ig.ColorUtility.prototype.darkenColor(item._color, 0.10000000149011612);
				fillColor = $.ig.ColorUtility.prototype.darkenColor(item._color, 0.10000000149011612);
			} else {
				strokeColor = adornmentSnapshot._highlightStrokeColor;
				fillColor = adornmentSnapshot._highlightFillColor;
			}
			switch (item._seriesType) {
				case $.ig.CombinedDataItemType.prototype.column:
					canvas.drawRect(ctx, item._bounds._x, item._bounds._y, item._bounds._width, item._bounds._height, fillColor, strokeColor, adornmentSnapshot._highlightStrokeWidth);
					break;
				case $.ig.CombinedDataItemType.prototype.line:
				case $.ig.CombinedDataItemType.prototype.spline:
				case $.ig.CombinedDataItemType.prototype.area:
				case $.ig.CombinedDataItemType.prototype.splineArea:
					if (adornmentSnapshot._valueInterval == 1) {
						var size = (adornmentSnapshot._chartSnapshot)._markerRadius;
						canvas.drawCircle(ctx, item._point._x, item._point._y, size, item._color, 0, 0);
					}
					break;
				case $.ig.CombinedDataItemType.prototype.scatter:
				case $.ig.CombinedDataItemType.prototype.scatterLine:
				case $.ig.CombinedDataItemType.prototype.bubble:
					var radius = item._radius;
					canvas.drawCircle(ctx, item._point._x, item._point._y, radius, fillColor, 0, 0);
					break;
				case $.ig.CombinedDataItemType.prototype.point:
				case $.ig.CombinedDataItemType.prototype.waterfall:
				case $.ig.CombinedDataItemType.prototype.stepLine:
				case $.ig.CombinedDataItemType.prototype.stepArea:
				case $.ig.CombinedDataItemType.prototype.rangeArea:
				case $.ig.CombinedDataItemType.prototype.rangeColumn:
				case $.ig.CombinedDataItemType.prototype.ohlc:
				case $.ig.CombinedDataItemType.prototype.candlestick:
				case $.ig.CombinedDataItemType.prototype.pie:
				case $.ig.CombinedDataItemType.prototype.funnel:
				case $.ig.CombinedDataItemType.prototype.outlierPoint:
					break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.HighlightAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('HighlightAdornment', $.ig.AdornmentBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.HighlightAdornment" />*/

/*<BeginType Name="Infragistics.TooltipAdornment" />*/

$.ig.util.defType('TooltipAdornment', 'AdornmentBase', {
	init: function () {
		this.__tooltipMargin = 2;
		this.__tooltipSpacing = 2;
		this.__badgeMinSize = 20;
		this.__tooltipSize = new $.ig.CPSize();
		$.ig.AdornmentBase.prototype.init.call(this);
	},
	__tooltipMargin: 0,
	__tooltipSpacing: 0,
	__badgeMinSize: 0,
	__badgeSize: 0,
	__tooltipSize: null,
	/*<BeginMethod Name="System.Void Infragistics.TooltipAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var adornmentSnapshot = snapshot;
		var tooltipWidth = 0;
		var tooltipHeight = this.__tooltipMargin;
		var tooltipRowHeight = 0;
		var tooltipLeft = 0;
		var tooltipTop = 0;
		var longestSeriesLabelWidth = 0;
		var seriesCount = adornmentSnapshot._chartSnapshot.getSeriesCount();
		var labels = new $.ig.Array();
		var textHeight = $.ig.NativeUtility.prototype.utility().measureText("bq", adornmentSnapshot._tooltipFontName, adornmentSnapshot._tooltipFontSize)._height;
		this.__badgeSize = Math.max(textHeight, this.__badgeMinSize);
		for (var i = 0; i < adornmentSnapshot._tooltipItems.length; i++) {
			var item = adornmentSnapshot._tooltipItems[i];
			var itemString = "";
			var categorySeriesWithMultipleBoundFields = item._seriesType == $.ig.CombinedDataItemType.prototype.ohlc || item._seriesType == $.ig.CombinedDataItemType.prototype.candlestick || item._seriesType == $.ig.CombinedDataItemType.prototype.rangeArea || item._seriesType == $.ig.CombinedDataItemType.prototype.rangeColumn;
			if (seriesCount > 1 || item._numberOfStacks > 1 || categorySeriesWithMultipleBoundFields) {
				itemString = item._seriesKey;
				itemString = itemString + " ";
				longestSeriesLabelWidth = Math.max(longestSeriesLabelWidth, $.ig.NativeUtility.prototype.utility().measureText(itemString, adornmentSnapshot._tooltipFontName, adornmentSnapshot._tooltipFontSize)._width);
			}
			if (item._seriesType == $.ig.CombinedDataItemType.prototype.scatter || item._seriesType == $.ig.CombinedDataItemType.prototype.scatterLine) {
				if (seriesCount > 1) {
					itemString = itemString + " ";
				}
				itemString = itemString + "(";
				itemString = itemString + $.ig.NativeUtility.prototype.utility().convertNumberToString(item._x, 2, true);
				itemString = itemString + ", ";
				itemString = itemString + $.ig.NativeUtility.prototype.utility().convertNumberToString(item._y, 2, true);
				itemString = itemString + ")";
			} else if (item._seriesType == $.ig.CombinedDataItemType.prototype.bubble) {
				itemString = itemString + "(";
				itemString = itemString + $.ig.NativeUtility.prototype.utility().convertNumberToString(item._x, 2, true);
				itemString = itemString + ", ";
				itemString = itemString + $.ig.NativeUtility.prototype.utility().convertNumberToString(item._y, 2, true);
				itemString = itemString + ", ";
				itemString = itemString + $.ig.NativeUtility.prototype.utility().convertNumberToString(item._radius, 2, true);
				itemString = itemString + ")";
			} else {
				itemString = itemString + item._valueLabel;
			}
			var itemSize = $.ig.NativeUtility.prototype.utility().measureText(itemString, adornmentSnapshot._tooltipFontName, adornmentSnapshot._tooltipFontSize);
			tooltipWidth = Math.max(tooltipWidth, this.__tooltipMargin * 2 + this.__badgeSize + itemSize._width + this.__tooltipSpacing * 2);
			tooltipRowHeight = Math.max(this.__badgeSize, itemSize._height);
			tooltipHeight += this.__tooltipSpacing + tooltipRowHeight;
			labels.add(itemString);
		}
		this.__tooltipSize = new $.ig.CPSize(1, tooltipWidth, tooltipHeight);
		var tooltipOffset = 2;
		var tooltipAreaBounds = new $.ig.CPRect(1, x + tooltipOffset, y + tooltipOffset, w - 2 * tooltipOffset, h - 2 * tooltipOffset);
		switch (adornmentSnapshot._tooltipPinLocation) {
			case $.ig.TooltipPinLocation.prototype.floating:
				tooltipLeft = adornmentSnapshot._touchPoint._x - this.__tooltipSize._width / 2;
				tooltipTop = adornmentSnapshot._touchPoint._y - this.__tooltipSize._height - tooltipOffset;
				break;
			case $.ig.TooltipPinLocation.prototype.top:
				tooltipLeft = adornmentSnapshot._touchPoint._x - this.__tooltipSize._width / 2;
				tooltipTop = tooltipAreaBounds._y;
				break;
			case $.ig.TooltipPinLocation.prototype.bottom:
				tooltipLeft = adornmentSnapshot._touchPoint._x - this.__tooltipSize._width / 2;
				tooltipTop = tooltipAreaBounds._y + tooltipAreaBounds._height - this.__tooltipSize._height;
				break;
			case $.ig.TooltipPinLocation.prototype.left:
				tooltipLeft = tooltipAreaBounds._x;
				tooltipTop = adornmentSnapshot._touchPoint._y - this.__tooltipSize._width / 2;
				break;
			case $.ig.TooltipPinLocation.prototype.right:
				tooltipLeft = tooltipAreaBounds._x + tooltipAreaBounds._width - this.__tooltipSize._width;
				tooltipTop = adornmentSnapshot._touchPoint._y - this.__tooltipSize._width / 2;
				break;
		}
		tooltipLeft = Math.max(tooltipLeft, tooltipAreaBounds._x);
		tooltipLeft = Math.min(tooltipLeft, tooltipAreaBounds._x + tooltipAreaBounds._width - this.__tooltipSize._width);
		tooltipTop = Math.max(tooltipTop, tooltipAreaBounds._y);
		tooltipTop = Math.min(tooltipTop, tooltipAreaBounds._y + tooltipAreaBounds._height - this.__tooltipSize._height);
		canvas.drawRect(ctx, tooltipLeft, tooltipTop, this.__tooltipSize._width, this.__tooltipSize._height, adornmentSnapshot._tooltipBackground, adornmentSnapshot._tooltipBorderColor, adornmentSnapshot._tooltipBorderThickness);
		var top = this.__tooltipMargin + tooltipTop;
		for (var i1 = 0; i1 < adornmentSnapshot._tooltipItems.length; i1++) {
			var left = this.__tooltipMargin + tooltipLeft;
			var item1 = adornmentSnapshot._tooltipItems[i1];
			var label = labels[i1];
			canvas.drawRect(ctx, left, top, this.__badgeSize, this.__badgeSize, item1._color, 0, 0);
			left += this.__badgeSize + this.__tooltipSpacing;
			canvas.drawText(ctx, left, top, 0, label, adornmentSnapshot._tooltipLabelColor, adornmentSnapshot._tooltipFontSize, adornmentSnapshot._tooltipFontName, textHeight);
			top += tooltipRowHeight + this.__tooltipSpacing;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TooltipAdornment::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('TooltipAdornment', $.ig.AdornmentBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TooltipAdornment" />*/

/*<BeginType Name="Infragistics.ISecondaryAxisFormatting" />*/

$.ig.util.defType('ISecondaryAxisFormatting', 'Object', {
	$type: new $.ig.Type('ISecondaryAxisFormatting', null)
}, true);

/*<EndType Name="Infragistics.ISecondaryAxisFormatting" />*/

/*<BeginType Name="Infragistics.ScrollableSnapshotView" />*/

$.ig.util.defType('ScrollableSnapshotView', 'AnimatedSnapshotView', {
	__scrollView: null,
	__dummyZoomView: null,
	__zoomType: 0,
	__scrollCalled: false,
	__active: false,
	__prevZoom: 0,
	__prevOffsetX: 0,
	__prevOffsetY: 0,
	init: function () {
		$.ig.AnimatedSnapshotView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::Setup()" />*/
	setup: function () {
		this.__zoomType = $.ig.ZoomType.prototype.both;
		this.__scrollView = new $.ig.CPScrollView();
		this.__scrollView.pinchGestureEnabled(true);
		this.__scrollView.scrollDelegate(this);
		this.__scrollView.maximumZoomScale(200);
		this.addSubview(this.__scrollView);
		this.__dummyZoomView = new $.ig.CPView();
		this.__dummyZoomView.isHidden(true);
		this.__scrollView.addSubview(this.__dummyZoomView);
		$.ig.AnimatedSnapshotView.prototype.setup.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAllowScrolling(System.Boolean)" />*/
	setAllowScrolling: function (canScroll) {
		this.__scrollView.setCanScroll(canScroll);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAllowScrolling(System.Boolean)" />*/
	,
	/*<BeginProperty Name="Infragistics.ZoomType Infragistics.ScrollableSnapshotView::ZoomType()" />*/
	zoomType: function () {
		return this.__zoomType;
	}
	/*<EndProperty Name="Infragistics.ZoomType Infragistics.ScrollableSnapshotView::ZoomType()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollableSnapshotView::IsActive()" />*/
	isActive: function () {
		return this.__active;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollableSnapshotView::IsActive()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetZoomType(Infragistics.ZoomType)" />*/
	setZoomType: function (zoomType) {
		this.__zoomType = zoomType;
		if (zoomType == $.ig.ZoomType.prototype.both) {
			this.__scrollView.setScrollBarVisiblitity(true, true);
		} else if (zoomType == $.ig.ZoomType.prototype.none) {
			this.__scrollView.setScrollBarVisiblitity(false, false);
		} else if (zoomType == $.ig.ZoomType.prototype.horizontalOnly) {
			this.__scrollView.setScrollBarVisiblitity(true, false);
		} else if (zoomType == $.ig.ZoomType.prototype.verticalOnly) {
			this.__scrollView.setScrollBarVisiblitity(false, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetZoomType(Infragistics.ZoomType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetScrollViewMaximum(System.Single)" />*/
	setScrollViewMaximum: function (max) {
		if (max < 1 || $.ig.util.isNaN(max)) {
			max = 1;
		}
		if (this.__scrollView.maximumZoomScale() != max) {
			this.__scrollView.maximumZoomScale(max);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetScrollViewMaximum(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	attachCanvas: function (canvas) {
		this.__scrollView.addSubview(canvas);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::MeasureCanvas(Infragistics.ChartCanvasView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureCanvas: function (canvas, x, y, w, h) {
		this.measureView(canvas, this.__scrollView.getContentOffsetX(), this.__scrollView.getContentOffsetY(), w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::MeasureCanvas(Infragistics.ChartCanvasView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::DelayUpdateCanvas()" />*/
	delayUpdateCanvas: function () {
		if (!this.__scrollCalled) {
			this.updateCanvasScale(true, false, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::DelayUpdateCanvas()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandlesUIInteraction()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollableSnapshotView::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollableSnapshotView::HandlesTouchEvents()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandleTouchesStart(, , System.Boolean)" />*/
	handleTouchesStart: function (x, y, quietly) {
		return this.__scrollView.beginTouchStart(x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandleTouchesStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		return this.__scrollView.beginTouchMove(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollableSnapshotView::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::HandleTouchesEnd(System.Int32)" />*/
	handleTouchesEnd: function (count) {
		this.__scrollView.beginTouchEnd(count);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::HandleTouchesEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::UpdateCanvasScale(System.Boolean, System.Boolean, System.Boolean)" />*/
	updateCanvasScale: function (active, resetScroll, validateCall) {
		if (this.__zoomType == $.ig.ZoomType.prototype.none) {
			return;
		}
		var w = $.ig.truncate(this.__scrollView.viewportWidth());
		var h = $.ig.truncate(this.__scrollView.viewportHeight());
		if (w == 0 || h == 0) {
			return;
		}
		if (validateCall && this.__scrollView.getContentOffsetX() == this.__prevOffsetX && this.__scrollView.getContentOffsetY() == this.__prevOffsetY && this.__prevZoom == this.__scrollView.zoomScale()) {
			return;
		}
		var x = 0;
		var y = 0;
		var width = 1;
		var height = 1;
		if (this.__zoomType == $.ig.ZoomType.prototype.both || this.__zoomType == $.ig.ZoomType.prototype.horizontalOnly) {
			x = this.__scrollView.getContentOffsetX() / this.__scrollView.getContentWidth();
			width = this.__scrollView.zoomScale();
		}
		if (this.__zoomType == $.ig.ZoomType.prototype.both || this.__zoomType == $.ig.ZoomType.prototype.verticalOnly) {
			y = this.__scrollView.getContentOffsetY() / this.__scrollView.getContentHeight();
			height = this.__scrollView.zoomScale();
		}
		this.scaleUpdated(new $.ig.CPRect(1, x, y, width, height));
		this.__prevOffsetX = this.__scrollView.getContentOffsetX();
		this.__prevOffsetY = this.__scrollView.getContentOffsetY();
		this.__prevZoom = this.__scrollView.zoomScale();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::UpdateCanvasScale(System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScaleUpdated(Infragistics.NativeRect)" />*/
	scaleUpdated: function (scale) {
		this._canvas._scale = scale;
		this.update(true);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScaleUpdated(Infragistics.NativeRect)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.AnimatedSnapshotView.prototype.sizeChanged.call(this, w, h);
		this.measureView(this.__scrollView, this.currentX(), this.currentY(), w, h);
		this.measureView(this.__dummyZoomView, this.currentX(), this.currentY(), w, h);
		this.__scrollView.setContentSize(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAlwaysBounceVertical(System.Boolean)" />*/
	setAlwaysBounceVertical: function (canBounce) {
		this.__scrollView.alwaysBounceVertical(canBounce);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAlwaysBounceVertical(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAlwaysBounceHorizontal(System.Boolean)" />*/
	setAlwaysBounceHorizontal: function (canBounce) {
		this.__scrollView.alwaysBounceHorizontal(canBounce);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::SetAlwaysBounceHorizontal(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.ScrollableSnapshotView::ViewForZoomingInScrollView(Infragistics.CPScrollViewBase)" />*/
	viewForZoomingInScrollView: function (scrollView) {
		return this.__dummyZoomView;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.ScrollableSnapshotView::ViewForZoomingInScrollView(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidZoom(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidZoom: function (scrollView) {
		this.__active = true;
		this.__scrollCalled = false;
		this.delayUpdateCanvas();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidZoom(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidScroll(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidScroll: function (scrollView) {
		this.__active = true;
		this.__scrollCalled = true;
		var x = 0;
		var y = 0;
		this.__scrollView.measureView(this._canvas, x, y, this.__scrollView.currentWidth(), this.__scrollView.currentHeight());
		this.updateCanvasScale(true, false, true);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidScroll(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndDragging(Infragistics.CPScrollViewBase, System.Boolean)" />*/
	scrollViewDidEndDragging: function (scrollView, decelerate) {
		if (!decelerate) {
			this.__active = false;
			this.updateCanvasScale(true, false, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndDragging(Infragistics.CPScrollViewBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewWillBeginDecelerating(Infragistics.CPScrollViewBase)" />*/
	scrollViewWillBeginDecelerating: function (scrollView) {
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewWillBeginDecelerating(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndDecelerating(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidEndDecelerating: function (scrollView) {
		this.__active = false;
		this.updateCanvasScale(true, false, false);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndDecelerating(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndZooming(Infragistics.CPScrollViewBase, Infragistics.CPViewBase, System.Single)" />*/
	scrollViewDidEndZooming: function (scrollView, view, scale) {
		this.__active = false;
		this.updateCanvasScale(true, false, false);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollableSnapshotView::ScrollViewDidEndZooming(Infragistics.CPScrollViewBase, Infragistics.CPViewBase, System.Single)" />*/
	,
	$type: new $.ig.Type('ScrollableSnapshotView', $.ig.AnimatedSnapshotView.prototype.$type, [$.ig.CPScrollViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ScrollableSnapshotView" />*/

/*<BeginType Name="Infragistics.ChartBase" />*/

$.ig.util.defType('ChartBase', 'ScrollableSnapshotView', {
	init: function () {
		$.ig.ScrollableSnapshotView.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.LegendLocation Infragistics.ChartBase::LegendLocation()" />*/
	legendLocation: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendLocation = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendLocation;
		}
	}
	/*<EndProperty Name="Infragistics.LegendLocation Infragistics.ChartBase::LegendLocation()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ChartBase::LegendFontSize()" />*/
	legendFontSize: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendFontSize = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ChartBase::LegendFontSize()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartBase::CombineClusteredValues()" />*/
	combineClusteredValues: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._combineClusteredValues = value;
			return value;
		} else {
			return (this.__lastSnapshot)._combineClusteredValues;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartBase::CombineClusteredValues()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ChartBase::AxisLineThickness()" />*/
	axisLineThickness: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._axisLineThickness = value;
			return value;
		} else {
			return (this.__lastSnapshot)._axisLineThickness;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ChartBase::AxisLineThickness()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ChartBase::PrimaryAxisLineColor()" />*/
	primaryAxisLineColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisLineColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._primaryAxisLineColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.ChartBase::PrimaryAxisLineColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ChartBase::MarkerStrokeColor()" />*/
	markerStrokeColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._markerStrokeColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._markerStrokeColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.ChartBase::MarkerStrokeColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ChartBase::MajorAxisLineColor()" />*/
	majorAxisLineColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._majorAxisLineColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._majorAxisLineColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.ChartBase::MajorAxisLineColor()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ChartBase::MajorAxisLineThickness()" />*/
	majorAxisLineThickness: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._majorAxisLineThickness = value;
			return value;
		} else {
			return (this.__lastSnapshot)._majorAxisLineThickness;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ChartBase::MajorAxisLineThickness()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.ChartBase::PrimaryAxisValueFormatType()" />*/
	primaryAxisValueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.ChartBase::PrimaryAxisValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ChartBase::PrimaryAxisValueFormatFractionDigits()" />*/
	primaryAxisValueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ChartBase::PrimaryAxisValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.ChartBase::PrimaryAxisValueFormatNegativeMode()" />*/
	primaryAxisValueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.ChartBase::PrimaryAxisValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartBase::PrimaryAxisValueFormatUseMKFormatting()" />*/
	primaryAxisValueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartBase::PrimaryAxisValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ChartBase::PrimaryAxisValueFormatCurrencySymbol()" />*/
	primaryAxisValueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ChartBase::PrimaryAxisValueFormatCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartBase::PrimaryAxisValueFormatShowGroupingSeparator()" />*/
	primaryAxisValueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._primaryAxisValueFormatShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._primaryAxisValueFormatShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartBase::PrimaryAxisValueFormatShowGroupingSeparator()" />*/
	,
	/*<BeginProperty Name="Infragistics.CrosshairsVisibility Infragistics.ChartBase::CrosshairsVisibility()" />*/
	crosshairsVisibility: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._crosshairsVisibility = value;
			return value;
		} else {
			return (this.__lastSnapshot)._crosshairsVisibility;
		}
	}
	/*<EndProperty Name="Infragistics.CrosshairsVisibility Infragistics.ChartBase::CrosshairsVisibility()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ChartBase::CrosshairsThickness()" />*/
	crosshairsThickness: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._crosshairsThickness = value;
			return value;
		} else {
			return (this.__lastSnapshot)._crosshairsThickness;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ChartBase::CrosshairsThickness()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.ChartBase::CrosshairsAnnotationBackColor()" />*/
	crosshairsAnnotationBackColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._crosshairsAnnotationBackColor = value;
			return value;
		} else {
			return (this.__lastSnapshot)._crosshairsAnnotationBackColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.ChartBase::CrosshairsAnnotationBackColor()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.ChartBase::CrosshairsAnnotationForeColor()" />*/
	crosshairsAnnotationForeColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._crosshairsAnnotationForeColor = value;
			return value;
		} else {
			return (this.__lastSnapshot)._crosshairsAnnotationForeColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.ChartBase::CrosshairsAnnotationForeColor()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPreviousTouchPoint()" />*/
	getPreviousTouchPoint: function () {
		return (this.__lastSnapshot)._touchPoint;
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPreviousTouchPoint()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ChartBase::HighlightIndex()" />*/
	highlightIndex: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._highlightFadeInDataIndex = value;
			return value;
		} else {
			return (this.__lastSnapshot)._highlightFadeInDataIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ChartBase::HighlightIndex()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ChartBase::HighlightSeriesIndex()" />*/
	highlightSeriesIndex: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._highlightFadeInSeriesIndex = value;
			return value;
		} else {
			return (this.__lastSnapshot)._highlightFadeInSeriesIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ChartBase::HighlightSeriesIndex()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPDictionary Infragistics.ChartBase::CrosshairsPoints()" />*/
	crosshairsPoints: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._crosshairsPoints = value;
			return value;
		} else {
			return (this.__lastSnapshot)._crosshairsPoints;
		}
	}
	/*<EndProperty Name="Infragistics.CPDictionary Infragistics.ChartBase::CrosshairsPoints()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartBase::DisplayTooltips()" />*/
	displayTooltips: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._displayTooltips = value;
			return value;
		} else {
			return (this.__lastSnapshot)._displayTooltips;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartBase::DisplayTooltips()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ChartBase::CanvasCenterX()" />*/
	canvasCenterX: function () {
		return this.__lastSnapshot._canvasFrameX + this.__lastSnapshot._canvasFrameWidth / 2;
	}
	/*<EndProperty Name="System.Single Infragistics.ChartBase::CanvasCenterX()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ChartBase::CanvasCenterY()" />*/
	canvasCenterY: function () {
		return this.__lastSnapshot._canvasFrameY + this.__lastSnapshot._canvasFrameHeight / 2;
	}
	/*<EndProperty Name="System.Single Infragistics.ChartBase::CanvasCenterY()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartBase::UsingClickAdorners()" />*/
	usingClickAdorners: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._usingClickAdorners = value;
			return value;
		} else {
			return (this.__lastSnapshot)._usingClickAdorners;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartBase::UsingClickAdorners()" />*/
	,
	/*<BeginMethod Name="Infragistics.SeriesObject Infragistics.ChartBase::AddSeriesHelper(Infragistics.CPReadOnlyList, Infragistics.CPList, System.String, System.String, Infragistics.CombinedDataItemType, System.String, System.String, System.String, System.String)" />*/
	addSeriesHelper: function (data, numberProperties, labelProperty, dateProperty, type, color, negativeColor, title, key) {
		var allProps = new $.ig.Array();
		for (var i = 0; i < 5; i++) {
			allProps.add("");
		}
		var numPropCount = numberProperties.length;
		for (var i1 = 0; i1 < numPropCount; i1++) {
			allProps[i1] = numberProperties[i1];
		}
		var info = $.ig.NativeUtility.prototype.utility().setData(data, $.ig.ChartsUtility.prototype.stringIsNullOrEmpty(allProps[0]) ? null : allProps[0], $.ig.ChartsUtility.prototype.stringIsNullOrEmpty(allProps[1]) ? null : allProps[1], $.ig.ChartsUtility.prototype.stringIsNullOrEmpty(allProps[2]) ? null : allProps[2], $.ig.ChartsUtility.prototype.stringIsNullOrEmpty(allProps[3]) ? null : allProps[3], $.ig.ChartsUtility.prototype.stringIsNullOrEmpty(allProps[4]) ? null : allProps[4], labelProperty, dateProperty, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		var series = this.addSeriesHelper1(info, numberProperties, type, color, negativeColor, title, key);
		if (dateProperty != null) {
			series._dateData = info._dates._values;
			series._minDate = info._dates._min;
			series._maxDate = info._dates._max;
		}
		return series;
	}
	/*<EndMethod Name="Infragistics.SeriesObject Infragistics.ChartBase::AddSeriesHelper(Infragistics.CPReadOnlyList, Infragistics.CPList, System.String, System.String, Infragistics.CombinedDataItemType, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.SeriesObject Infragistics.ChartBase::AddSeriesHelper(Infragistics.DataInfo, Infragistics.CPList, Infragistics.CombinedDataItemType, System.String, System.String, System.String, System.String)" />*/
	addSeriesHelper1: function (info, numberProperties, type, color, negativeColor, title, key) {
		var snapshot = this.__lastSnapshot;
		var series = null;
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(snapshot._seriesKeyLookup, key)) {
			series = snapshot._seriesKeyLookup.item(key);
		}
		if (title == null) {
			title = "";
		}
		var isRange = type == $.ig.CombinedDataItemType.prototype.rangeArea || type == $.ig.CombinedDataItemType.prototype.rangeColumn;
		var numPropCount = numberProperties.length;
		var minMaxArrayCount = numPropCount;
		if (isRange) {
			minMaxArrayCount = 1;
		}
		if (series == null) {
			series = new $.ig.SeriesObject();
			series._colors = new Array(1);
			series._strokeColors = new Array(1);
			snapshot._seriesList.add(series);
			snapshot._seriesKeyLookup.item(key, series);
			series._stackKeys = new $.ig.Array();
			series._stackKeys.add(key);
			series._stackTitles = new $.ig.Array();
			series._stackTitles.add(title);
			series._trendlineColor = -1;
			series._trendlinePeriod = -1;
			series._data = new $.ig.Array();
			series._propertyNames = new $.ig.Array();
			for (var i = 0; i < numPropCount; i++) {
				series._data.add("");
				series._propertyNames.add(numberProperties[i]);
			}
			series._minValues = new Array(minMaxArrayCount);
			series._maxValues = new Array(minMaxArrayCount);
		}
		series._key = key;
		series._type = type;
		series._title = title;
		series._colors[0] = $.ig.ColorUtility.prototype.convertToInt(color);
		series._strokeColors[0] = series._colors[0];
		series._negativeColor = $.ig.ColorUtility.prototype.convertToInt(negativeColor);
		snapshot._hasNanData = info._hasNans;
		series._labels = info._labels;
		series._longestLabel = info._longestLabel;
		if (info._labels != null) {
			snapshot._labels = info._labels;
			snapshot._longestLabel = info._longestLabel;
		}
		var valueInfo = new $.ig.Array();
		if (info._value1 != null) {
			valueInfo.add(info._value1);
		}
		if (info._value2 != null) {
			valueInfo.add(info._value2);
		}
		if (info._value3 != null) {
			valueInfo.add(info._value3);
		}
		if (info._value4 != null) {
			valueInfo.add(info._value4);
		}
		if (info._value5 != null) {
			valueInfo.add(info._value5);
		}
		if (valueInfo.length == numPropCount) {
			for (var i1 = 0; i1 < numPropCount; i1++) {
				series._data[i1] = (valueInfo[i1])._values;
				if (!isRange) {
					series._minValues[i1] = (valueInfo[i1])._min;
					series._maxValues[i1] = (valueInfo[i1])._max;
				}
			}
			if (isRange) {
				series._minValues[0] = Math.min(info._value2._min, info._value1._min);
				series._maxValues[0] = Math.max(info._value2._max, info._value1._max);
			}
		}
		return series;
	}
	/*<EndMethod Name="Infragistics.SeriesObject Infragistics.ChartBase::AddSeriesHelper(Infragistics.DataInfo, Infragistics.CPList, Infragistics.CombinedDataItemType, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::AddStackHelper(System.String, Infragistics.DataInfo, System.String, System.String, System.String, System.String, System.String, System.Single)" />*/
	addStackHelper: function (seriesKey, info, numberProperty, color, title, stackKey, strokeColor, strokeWidth) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		if (title == null) {
			title = "";
		}
		var stackable = s._type == $.ig.CombinedDataItemType.prototype.column || s._type == $.ig.CombinedDataItemType.prototype.line || s._type == $.ig.CombinedDataItemType.prototype.area || s._type == $.ig.CombinedDataItemType.prototype.point || s._type == $.ig.CombinedDataItemType.prototype.spline || s._type == $.ig.CombinedDataItemType.prototype.splineArea || s._type == $.ig.CombinedDataItemType.prototype.stepLine || s._type == $.ig.CombinedDataItemType.prototype.stepArea;
		if (s != null && stackable) {
			var nativeColor = $.ig.ColorUtility.prototype.convertToInt(color);
			var nativeStrokeColor = $.ig.ColorUtility.prototype.convertToInt(strokeColor);
			var keyChain = s._stackKeys;
			snapshot._hasNanData = info._hasNans;
			var stackIndex = keyChain.indexOf(stackKey);
			if (stackIndex >= 0 && stackIndex < keyChain.length) {
				s._data[stackIndex] = info._value1._values;
				s._colors[stackIndex] = nativeColor;
				s._strokeColors[stackIndex] = nativeStrokeColor;
				s._minValues[stackIndex] = info._value1._min;
				s._maxValues[stackIndex] = info._value1._max;
				s._propertyNames[stackIndex] = numberProperty;
				s._stackTitles[stackIndex] = title;
			} else {
				keyChain.add(stackKey);
				s._data.add(info._value1._values);
				s._stackTitles.add(title);
				s._colors = $.ig.ArrayUtility.prototype.addToColorArray(nativeColor, s._colors);
				s._strokeColors = $.ig.ArrayUtility.prototype.addToColorArray(nativeStrokeColor, s._strokeColors);
				s._minValues = $.ig.ArrayUtility.prototype.addToArray(info._value1._min, s._minValues);
				s._maxValues = $.ig.ArrayUtility.prototype.addToArray(info._value1._max, s._maxValues);
				s._propertyNames.add(numberProperty);
			}
			s._strokeWidth = strokeWidth;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::AddStackHelper(System.String, Infragistics.DataInfo, System.String, System.String, System.String, System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::RemoveStackHelper(System.String, System.String)" />*/
	removeStackHelper: function (seriesKey, stackKey) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		if (s != null) {
			var keyChain = s._stackKeys;
			if (keyChain.length > 1) {
				var stackIndex = keyChain.indexOf(stackKey);
				if (stackIndex > 0 && stackIndex < keyChain.length) {
					keyChain.removeAt(stackIndex);
					s._data.removeAt(stackIndex);
					s._stackTitles.removeAt(stackIndex);
					s._colors = $.ig.ArrayUtility.prototype.removeColorIntAtIndex(stackIndex, s._colors);
					s._strokeColors = $.ig.ArrayUtility.prototype.removeColorIntAtIndex(stackIndex, s._strokeColors);
					s._minValues = $.ig.ArrayUtility.prototype.removeAtIndex1(stackIndex, s._minValues);
					s._maxValues = $.ig.ArrayUtility.prototype.removeAtIndex1(stackIndex, s._maxValues);
					s._propertyNames.removeAt(stackIndex);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::RemoveStackHelper(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::ClearStacksHelper(System.String)" />*/
	clearStacksHelper: function (seriesKey) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		if (s != null) {
			var keyChain = s._stackKeys;
			if (keyChain.length > 1) {
				var key = keyChain[0];
				keyChain.clear();
				keyChain.add(key);
				var title = s._stackTitles[0];
				s._stackTitles.clear();
				s._stackTitles.add(title);
				var valueColumnName = s._propertyNames[0];
				s._propertyNames.clear();
				s._propertyNames.add(valueColumnName);
				var data = s._data[0];
				s._data.clear();
				s._data.add(data);
				var color = s._colors[0];
				s._colors = new Array(1);
				s._colors[0] = color;
				var strokeColor = s._strokeColors[0];
				s._strokeColors = new Array(1);
				s._strokeColors[0] = strokeColor;
				var min = s._minValues[0];
				s._minValues = new Array(1);
				s._minValues[0] = min;
				var max = s._maxValues[0];
				s._maxValues = new Array(1);
				s._maxValues[0] = max;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::ClearStacksHelper(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateData(Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	updateData: function (data, numberProperty, labelProperty, key) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(key);
		if (s != null) {
			var info = $.ig.NativeUtility.prototype.utility().setData(data, numberProperty, null, null, null, null, labelProperty, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
			snapshot._hasNanData = info._hasNans;
			s._data[0] = info._value1._values;
			s._minValues[0] = info._value1._min;
			s._maxValues[0] = info._value1._max;
			s._labels = info._labels;
			s._longestLabel = info._longestLabel;
			if (info._labels != null) {
				snapshot._labels = info._labels;
				snapshot._longestLabel = info._longestLabel;
			}
			if (s != null && s._trendlinePeriod != -1) {
				s._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(s._data[0], s._trendlineType, s._trendlinePeriod);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateData(Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateSeries(System.String, System.String)" />*/
	updateSeries: function (key, color) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(key);
		if (s != null) {
			s._colors[0] = $.ig.ColorUtility.prototype.convertToInt(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateSeries(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateCategorySeries(System.String, Infragistics.CategoryDataItemType)" />*/
	updateCategorySeries: function (key, type) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(key);
		if (s != null) {
			s._type = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateCategorySeries(System.String, Infragistics.CategoryDataItemType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateRangeCategorySeries(System.String, Infragistics.RangeCategoryDataItemType)" />*/
	updateRangeCategorySeries: function (key, type) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(key);
		if (s != null) {
			s._type = $.ig.ChartsUtility.prototype.convertRangeCategoryType(type);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateRangeCategorySeries(System.String, Infragistics.RangeCategoryDataItemType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartBase::GetLabelAt(System.Int32)" />*/
	getLabelAt: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index >= 0) {
			if (snapshot._labels != null && index < snapshot._labels.length) {
				return snapshot._labels[index];
			} else {
				for (var i = 0; i < snapshot._seriesList.length; i++) {
					var s = snapshot._seriesList[i];
					if (s._labels != null && index < s._labels.length) {
						return s._labels[index];
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ChartBase::GetLabelAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::RemoveSeries(System.String)" />*/
	removeSeries: function (key) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(key);
		if (s != null) {
			snapshot._seriesKeyLookup.remove(key);
			snapshot._seriesList.removeItem(s);
			snapshot._crosshairsPoints.clear();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::RemoveSeries(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::RemoveAllSeries()" />*/
	removeAllSeries: function () {
		var snapshot = this.__lastSnapshot;
		snapshot._seriesCount = 0;
		snapshot._seriesList.clear();
		snapshot._seriesKeyLookup.clear();
		snapshot._crosshairsPoints.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::RemoveAllSeries()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ChartBase::GetValueAt(System.Int32, System.String, System.Int32)" />*/
	getValueAt1: function (index, seriesKey, stackIndex) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		if (s != null) {
			return snapshot.valueForItem1(index, snapshot._seriesList.indexOf(s), stackIndex);
		}
		return NaN;
	}
	/*<EndMethod Name="System.Double Infragistics.ChartBase::GetValueAt(System.Int32, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ChartBase::GetValueAt(System.Int32, System.String)" />*/
	getValueAt: function (index, seriesKey) {
		return this.getValueAt1(index, seriesKey, 0);
	}
	/*<EndMethod Name="System.Double Infragistics.ChartBase::GetValueAt(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ChartBase::GetValueInterval()" />*/
	getValueInterval: function () {
		var last = this.__lastSnapshot;
		if (last != null) {
			return last._valueInterval;
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ChartBase::GetValueInterval()" />*/
	,
	/*<BeginMethod Name="Infragistics.ItemPath Infragistics.ChartBase::GetItemPath(System.Int32, System.String)" />*/
	getItemPath: function (index, seriesKey) {
		var snapshot = this.__lastSnapshot;
		var path = new $.ig.ItemPath();
		path._itemIndex = index;
		var sideBySide = -1;
		var seriesIndex = 0;
		for (var i = 0; i < snapshot._seriesList.length; i++) {
			var series = snapshot._seriesList[i];
			if (series.isSideBySideSeries()) {
				sideBySide++;
			}
			if (series._key == seriesKey) {
				if (!series.isSideBySideSeries()) {
					sideBySide = -1;
				}
				break;
			}
			seriesIndex++;
		}
		path._seriesIndex = seriesIndex;
		path._sideBySideIndex = sideBySide;
		return path;
	}
	/*<EndMethod Name="Infragistics.ItemPath Infragistics.ChartBase::GetItemPath(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ChartBase::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	resolveCategoryIndex: function (point) {
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ChartBase::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPointAt(System.Int32, System.Int32, System.String)" />*/
	getPointAt: function (index, stackIndex, seriesKey) {
		var snapshot = this.__lastSnapshot;
		if (snapshot != null) {
			var path = this.getItemPath(index, seriesKey);
			if (path._seriesIndex < snapshot._seriesList.length) {
				var info = new $.ig.ItemLayoutInfo();
				var adjustedIndex = snapshot.adjustIndexForInterval(index);
				var useBucketing = snapshot._valueInterval > 1 && snapshot._combineClusteredValues;
				var s = snapshot._seriesList[path._seriesIndex];
				snapshot.calculateCategoryValueBounds(info, adjustedIndex, path._seriesIndex, stackIndex, path._sideBySideIndex, s, useBucketing ? 1 : 0);
				if (snapshot.isPolar()) {
					return new $.ig.CPPoint(info._valueLocationX, info._valueLocationY);
				}
				return new $.ig.CPPoint(snapshot._canvasFrameX + info._valueLocationX, info._valueLocationY);
			}
		}
		return new $.ig.CPPoint(0, 0);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPointAt(System.Int32, System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPointAt(System.Int32, System.String)" />*/
	getPointAt1: function (index, seriesKey) {
		return this.getPointAt(index, 0, seriesKey);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.ChartBase::GetPointAt(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.ChartBase::GetItemBounds(System.Int32, System.String)" />*/
	getItemBounds: function (index, seriesKey) {
		return this.getItemBounds1(index, seriesKey, 0);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.ChartBase::GetItemBounds(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.ChartBase::GetItemBounds(System.Int32, System.String, System.Int32)" />*/
	getItemBounds1: function (index, seriesKey, stackIndex) {
		var snapshot = this.__lastSnapshot;
		if (snapshot != null) {
			var path = this.getItemPath(index, seriesKey);
			if (path._seriesIndex < snapshot._seriesList.length) {
				var info = new $.ig.ItemLayoutInfo();
				var adjustedIndex = snapshot.adjustIndexForInterval(index);
				var useBucketing = snapshot._valueInterval > 1 && snapshot._combineClusteredValues;
				var s = snapshot._seriesList[path._seriesIndex];
				snapshot.calculateCategoryValueBounds(info, adjustedIndex, path._seriesIndex, stackIndex, path._sideBySideIndex, s, useBucketing ? 1 : 0);
				if (snapshot.isPolar()) {
					return new $.ig.CPRect(1, info._boundsX, info._boundsY, info._boundsWidth, info._boundsHeight);
				}
				return new $.ig.CPRect(1, snapshot._canvasFrameX + info._boundsX, info._boundsY, info._boundsWidth, info._boundsHeight);
			}
		}
		return new $.ig.CPRect(1, 0, 0, 0, 0);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.ChartBase::GetItemBounds(System.Int32, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::SetLabels(Infragistics.CPReadOnlyList, System.String)" />*/
	setLabels: function (data, labelKey) {
		var info = $.ig.NativeUtility.prototype.utility().setData(data, null, null, null, null, null, labelKey, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		var snapshot = (this.__lastSnapshot);
		snapshot._labels = info._labels;
		snapshot._longestLabel = info._longestLabel;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::SetLabels(Infragistics.CPReadOnlyList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::ClearLabels()" />*/
	clearLabels: function () {
		var snapshot = (this.__lastSnapshot);
		snapshot._labels = null;
		snapshot._longestLabel = null;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::ClearLabels()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ChartBase::GetSeriesCount()" />*/
	getSeriesCount: function () {
		return this.__lastSnapshot.getSeriesCount();
	}
	/*<EndMethod Name="System.Int32 Infragistics.ChartBase::GetSeriesCount()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ChartBase::GetStackSeriesCount()" />*/
	getStackSeriesCount: function () {
		var stackCount = 0;
		var seriesCount = this.__lastSnapshot.getSeriesCount();
		var snapshot = this.__lastSnapshot;
		for (var i = 0; i < seriesCount; i++) {
			var s = snapshot._seriesList[i];
			if (s.isStackSeries()) {
				stackCount++;
			}
		}
		return stackCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ChartBase::GetStackSeriesCount()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ChartBase::GetItemCount()" />*/
	getItemCount: function () {
		var snapshot = (this.__lastSnapshot);
		return snapshot._itemCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ChartBase::GetItemCount()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartBase::GetSeriesKeyAt(System.Int32)" />*/
	getSeriesKeyAt: function (index) {
		var snapshot = (this.__lastSnapshot);
		var s = snapshot._seriesList[index];
		return s._key;
	}
	/*<EndMethod Name="System.String Infragistics.ChartBase::GetSeriesKeyAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartBase::GetSeriesTitleAt(System.Int32)" />*/
	getSeriesTitleAt: function (index) {
		var snapshot = (this.__lastSnapshot);
		var s = snapshot._seriesList[index];
		return s._title;
	}
	/*<EndMethod Name="System.String Infragistics.ChartBase::GetSeriesTitleAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	initializeTransitionFromEmptySeriesList: function (fromSnapshot, toSnapshot) {
		this.__lastSnapshot.copyTo(fromSnapshot);
		fromSnapshot._seriesCount = 0;
		fromSnapshot._seriesList.clear();
		fromSnapshot._seriesKeyLookup.clear();
		fromSnapshot._crosshairsPoints.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateScroll()" />*/
	updateScroll: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateScroll()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartBase::ConvertNanData()" />*/
	convertNanData: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartBase::ConvertNanData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.ScrollableSnapshotView.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		this.updateScroll();
		if (from._seriesList.length == 0 && to._seriesList.length > 0) {
			this.initializeTransitionFromEmptySeriesList(from, to);
		}
		from._seriesList = $.ig.ChartsUtility.prototype.calculateOrder(from._seriesList, from._seriesKeyLookup, to._seriesList);
		if (from._hasNanData && this.convertNanData()) {
			var count = to._seriesList.length;
			for (var seriesIndex = 0; seriesIndex < count; seriesIndex++) {
				var fromSeries = from._seriesList[seriesIndex];
				var toSeries = to._seriesList[seriesIndex];
				$.ig.ArrayUtility.prototype.convertNansToZeroInListsOfDouble(fromSeries._data, toSeries._data);
				$.ig.ArrayUtility.prototype.convertNansToZeroInListsOfDouble(fromSeries._minSubsetData, toSeries._minSubsetData);
				$.ig.ArrayUtility.prototype.convertNansToZeroInListsOfDouble(fromSeries._maxSubsetData, toSeries._maxSubsetData);
				$.ig.ArrayUtility.prototype.convertNansToZeroInListsOfDouble(fromSeries._splineYControlPoints, toSeries._splineYControlPoints);
				$.ig.ArrayUtility.prototype.convertNansToZeroInListsOfDouble(fromSeries._splineMinYControlPoints, toSeries._splineMinYControlPoints);
				$.ig.ArrayUtility.prototype.convertNansToZeroInDoubleArrays(fromSeries._trendlineData, toSeries._trendlineData);
			}
		}
		if (to._actualStack100ModeEnabled) {
			var count1 = to._seriesList.length;
			for (var seriesIndex1 = 0; seriesIndex1 < count1; seriesIndex1++) {
				var fromSeries1 = from._seriesList[seriesIndex1];
				var toSeries1 = to._seriesList[seriesIndex1];
				if (toSeries1.isStackSeries()) {
					var stackIndex = toSeries1._stackKeys.length - 1;
					if (fromSeries1._data != null) {
						fromSeries1._data[stackIndex] = $.ig.ArrayUtility.prototype.copyDoubleArray(toSeries1._data[stackIndex]);
					}
					if (fromSeries1._minSubsetData != null) {
						fromSeries1._minSubsetData[stackIndex] = $.ig.ArrayUtility.prototype.copyDoubleArray(toSeries1._minSubsetData[stackIndex]);
					}
					if (fromSeries1._maxSubsetData != null) {
						fromSeries1._maxSubsetData[stackIndex] = $.ig.ArrayUtility.prototype.copyDoubleArray(toSeries1._maxSubsetData[stackIndex]);
					}
					if (fromSeries1._splineYControlPoints != null) {
						fromSeries1._splineYControlPoints[stackIndex] = $.ig.ArrayUtility.prototype.copyDoubleArray(toSeries1._splineYControlPoints[stackIndex]);
					}
					if (fromSeries1._splineMinYControlPoints != null) {
						fromSeries1._splineMinYControlPoints[stackIndex] = $.ig.ArrayUtility.prototype.copyDoubleArray(toSeries1._splineMinYControlPoints[stackIndex]);
					}
				}
			}
		}
		for (var i = 0; i < to._seriesCount; i++) {
			var fromSeries2 = from._seriesList[i];
			var toSeries2 = to._seriesList[i];
			this.normalizeDataArrays(fromSeries2, toSeries2);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::NormalizeDataArrays(Infragistics.SeriesObject, Infragistics.SeriesObject)" />*/
	normalizeDataArrays: function (from, to) {
		from._data = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._data, to._data);
		from._minSubsetData = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._minSubsetData, to._minSubsetData);
		from._maxSubsetData = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._maxSubsetData, to._maxSubsetData);
		from._splineXControlPoints = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._splineXControlPoints, to._splineXControlPoints);
		from._splineYControlPoints = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._splineYControlPoints, to._splineYControlPoints);
		from._splineMinYControlPoints = $.ig.ChartsUtility.prototype.equalizeMutableListOfDoubleArrays(from._splineMinYControlPoints, to._splineMinYControlPoints);
		from._maxValues = $.ig.ChartsUtility.prototype.equalizeDoubleArrays(from._maxValues, to._maxValues);
		from._minValues = $.ig.ChartsUtility.prototype.equalizeDoubleArrays(from._minValues, to._minValues);
		from._colors = $.ig.ChartsUtility.prototype.equalizeColorIntArrays(from._colors, to._colors);
		from._strokeColors = $.ig.ChartsUtility.prototype.equalizeColorIntArrays(from._strokeColors, to._strokeColors);
		from._dateData = $.ig.ChartsUtility.prototype.equalizeLongArrays(from._dateData, to._dateData);
		from._trendlineData = $.ig.ChartsUtility.prototype.equalizeDoubleArrays(from._trendlineData, to._trendlineData);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::NormalizeDataArrays(Infragistics.SeriesObject, Infragistics.SeriesObject)" />*/
	,
	__updateAdornments: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::AddUpdateAdornmentsHandler(Infragistics.PointBoolExecutionBlock)" />*/
	addUpdateAdornmentsHandler: function (action) {
		this.__updateAdornments = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::AddUpdateAdornmentsHandler(Infragistics.PointBoolExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateAdornments(System.Int32, System.Int32, System.Boolean)" />*/
	updateAdornments: function (x, y, isTouch) {
		if (this.__updateAdornments != null) {
			this.__updateAdornments(x, y, isTouch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateAdornments(System.Int32, System.Int32, System.Boolean)" />*/
	,
	__updateAdornmentsOnTouchUp: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::AddUpdateAdornmentsOnTouchUpHandler(Infragistics.PointExecutionBlock)" />*/
	addUpdateAdornmentsOnTouchUpHandler: function (action) {
		this.__updateAdornmentsOnTouchUp = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::AddUpdateAdornmentsOnTouchUpHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::UpdateAdornmentsOnTouchUp(System.Int32, System.Int32)" />*/
	updateAdornmentsOnTouchUp: function (x, y) {
		if (this.__updateAdornmentsOnTouchUp != null) {
			this.__updateAdornmentsOnTouchUp(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::UpdateAdornmentsOnTouchUp(System.Int32, System.Int32)" />*/
	,
	__canvasMouseLeave: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::AddCanvasMouseLeaveHandler(Infragistics.PointBoolExecutionBlock)" />*/
	addCanvasMouseLeaveHandler: function (action) {
		this.__canvasMouseLeave = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::AddCanvasMouseLeaveHandler(Infragistics.PointBoolExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::OnCanvasMouseLeave(System.Int32, System.Int32, System.Boolean)" />*/
	onCanvasMouseLeave: function (x, y, isTouch) {
		if (this.__canvasMouseLeave != null) {
			this.__canvasMouseLeave(x, y, isTouch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::OnCanvasMouseLeave(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	attachCanvas: function (canvas) {
		var $self = this;
		canvas.addPointerActionHandler(function (x, y, isTouch) {
			$self.updateAdornments(x, y, isTouch);
		});
		canvas.addTouchUpActionHandler(function (x, y) {
			$self.updateAdornmentsOnTouchUp(x, y);
		});
		canvas.addMouseLeaveActionHandler(function (x, y, isTouch) {
			$self.onCanvasMouseLeave(x, y, isTouch);
		});
		$.ig.ScrollableSnapshotView.prototype.attachCanvas.call(this, canvas);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::InvalidateCrosshairs(Infragistics.NativePoint, Infragistics.CPDictionary)" />*/
	invalidateCrosshairs: function (crosshairsPoint, points) {
		var snapshot = this.__lastSnapshot;
		snapshot._touchPoint = crosshairsPoint;
		snapshot._crosshairsPoints = points;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::InvalidateCrosshairs(Infragistics.NativePoint, Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::InvalidateHighlighting(System.Int32, System.Int32)" />*/
	invalidateHighlighting: function (dataIndex, seriesIndex) {
		var snapshot = this.__lastSnapshot;
		if (dataIndex >= 0) {
			snapshot._highlightFadeInDataIndex = dataIndex;
			snapshot._highlightFadeInSeriesIndex = seriesIndex;
			snapshot._nonHighlightedAlpha = this.minimumFadeAlphaResolved();
			snapshot._highlightFadeInAlpha = 255;
			snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
		} else {
			snapshot._nonHighlightedAlpha = 255;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::InvalidateHighlighting(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::SetupAdornmentAnimation(System.Int32, System.Int32)" />*/
	setupAdornmentAnimation: function (newDataIndex, newSeriesIndex) {
		var snapshot = this.__lastSnapshot;
		if (snapshot._highlightFadeInDataIndex != newDataIndex || snapshot._highlightFadeInSeriesIndex != newSeriesIndex) {
			if (newDataIndex == -1 || newSeriesIndex == -1) {
				snapshot._highlightFadeOutDataIndex = -1;
				snapshot._highlightFadeOutSeriesIndex = -1;
				snapshot._highlightFadeOutAlpha = 255;
			} else if (snapshot._highlightFadeOutDataIndex == newDataIndex && snapshot._highlightFadeOutSeriesIndex == newSeriesIndex) {
				var tempAlpha = snapshot._highlightFadeOutAlpha;
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutSeriesIndex = snapshot._highlightFadeInSeriesIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = tempAlpha;
				snapshot._highlightFadeInDataIndex = newDataIndex;
				snapshot._highlightFadeInSeriesIndex = newSeriesIndex;
			} else if (snapshot._highlightFadeInDataIndex == -1 || snapshot._highlightFadeInSeriesIndex == -1) {
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutSeriesIndex = snapshot._highlightFadeInSeriesIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = snapshot._nonHighlightedAlpha;
				snapshot._highlightFadeInDataIndex = newDataIndex;
				snapshot._highlightFadeInSeriesIndex = newSeriesIndex;
			} else {
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutSeriesIndex = snapshot._highlightFadeInSeriesIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = this.minimumFadeAlphaResolved();
				snapshot._highlightFadeInDataIndex = newDataIndex;
				snapshot._highlightFadeInSeriesIndex = newSeriesIndex;
			}
		}
		if (newDataIndex >= 0) {
			snapshot._categoryLabel = this.getLabelAt(newDataIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::SetupAdornmentAnimation(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::EndHighlightAnimation(System.Boolean)" />*/
	endHighlightAnimation: function (reset) {
		var snapshot = this.__lastSnapshot;
		if (reset) {
			snapshot._highlightFadeInDataIndex = -1;
			snapshot._highlightFadeInSeriesIndex = -1;
			snapshot._highlightFadeOutDataIndex = -1;
			snapshot._highlightFadeOutSeriesIndex = -1;
			snapshot._highlightFadeInAlpha = 255;
			snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
			snapshot._nonHighlightedAlpha = 255;
		} else {
			snapshot._highlightFadeOutDataIndex = -1;
			snapshot._highlightFadeOutSeriesIndex = -1;
			snapshot._highlightFadeOutAlpha = snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
			;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::EndHighlightAnimation(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ChartBase::MinimumFadeAlphaResolved()" />*/
	minimumFadeAlphaResolved: function () {
		if (this.usingClickAdorners()) {
			return $.ig.SnapshotBase.prototype.cLICK_FADED_ALPHA;
		}
		return $.ig.SnapshotBase.prototype.hOVER_FADED_ALPHA;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ChartBase::MinimumFadeAlphaResolved()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartBase::ResetHighlighting()" />*/
	resetHighlighting: function () {
		(this.__lastSnapshot).resetHighlighting();
	}
	/*<EndMethod Name="System.Void Infragistics.ChartBase::ResetHighlighting()" />*/
	,
	$type: new $.ig.Type('ChartBase', $.ig.ScrollableSnapshotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ChartBase" />*/

/*<BeginType Name="Infragistics.CartesianChartBase" />*/

$.ig.util.defType('CartesianChartBase', 'ChartBase', {
	init: function () {
		$.ig.ChartBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.CartesianChartBase::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.SeriesSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.CartesianChartBase::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CartesianChartBase::XAxisTopTitle()" />*/
	xAxisTopTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisTopTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisTopTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CartesianChartBase::XAxisTopTitle()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CartesianChartBase::XAxisBottomTitle()" />*/
	xAxisBottomTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisBottomTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CartesianChartBase::XAxisBottomTitle()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::XAxisTopLabelsHidden()" />*/
	xAxisTopLabelsHidden: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisTopLabelsHidden = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisTopLabelsHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::XAxisTopLabelsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::XAxisBottomLabelsHidden()" />*/
	xAxisBottomLabelsHidden: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisBottomLabelsHidden = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomLabelsHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::XAxisBottomLabelsHidden()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CartesianChartBase::YAxisLeftTitle()" />*/
	yAxisLeftTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisLeftTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CartesianChartBase::YAxisLeftTitle()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::YAxisLeftLabelsHidden()" />*/
	yAxisLeftLabelsHidden: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisLeftLabelsHidden = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftLabelsHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::YAxisLeftLabelsHidden()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CartesianChartBase::InnerAxisPadding()" />*/
	innerAxisPadding: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._innerAxisPadding = value;
			return value;
		} else {
			return (this.__lastSnapshot)._innerAxisPadding;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CartesianChartBase::InnerAxisPadding()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CartesianChartBase::OuterAxisPadding()" />*/
	outerAxisPadding: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._outerAxisPadding = value;
			return value;
		} else {
			return (this.__lastSnapshot)._outerAxisPadding;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CartesianChartBase::OuterAxisPadding()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CartesianChartBase::OuterPadding()" />*/
	outerPadding: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._outerPadding = value;
			return value;
		} else {
			return (this.__lastSnapshot)._outerPadding;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CartesianChartBase::OuterPadding()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::UseSecondaryFormatForSecondaryAxis()" />*/
	useSecondaryFormatForSecondaryAxis: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._useSecondaryAxisValueFormat = value;
			return value;
		} else {
			return (this.__lastSnapshot)._useSecondaryAxisValueFormat;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::UseSecondaryFormatForSecondaryAxis()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.CartesianChartBase::SecondaryAxisValueFormatType()" />*/
	secondaryAxisValueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.CartesianChartBase::SecondaryAxisValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CartesianChartBase::SecondaryAxisValueFormatFractionDigits()" />*/
	secondaryAxisValueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CartesianChartBase::SecondaryAxisValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.CartesianChartBase::SecondaryAxisValueFormatNegativeMode()" />*/
	secondaryAxisValueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.CartesianChartBase::SecondaryAxisValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::SecondaryAxisValueFormatUseMKFormatting()" />*/
	secondaryAxisValueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::SecondaryAxisValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CartesianChartBase::SecondaryAxisValueFormatCurrencySymbol()" />*/
	secondaryAxisValueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CartesianChartBase::SecondaryAxisValueFormatCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CartesianChartBase::SecondaryAxisValueFormatShowGroupingSeparator()" />*/
	secondaryAxisValueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CartesianChartBase::SecondaryAxisValueFormatShowGroupingSeparator()" />*/
	,
	$type: new $.ig.Type('CartesianChartBase', $.ig.ChartBase.prototype.$type, [$.ig.ISecondaryAxisFormatting.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CartesianChartBase" />*/

/*<BeginType Name="Infragistics.CategoryChartBase" />*/

$.ig.util.defType('CategoryChartBase', 'CartesianChartBase', {
	init: function () {
		$.ig.CartesianChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CategoryChartBase::Stack100ModeEnabled()" />*/
	stack100ModeEnabled: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._stack100ModeEnabled = value;
			return value;
		} else {
			return (this.__lastSnapshot)._stack100ModeEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CategoryChartBase::Stack100ModeEnabled()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CategoryChartBase::AlignNumericAxesByZero()" />*/
	alignNumericAxesByZero: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._alignNumericAxesByZero = value;
			return value;
		} else {
			return (this.__lastSnapshot)._alignNumericAxesByZero;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CategoryChartBase::AlignNumericAxesByZero()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::Update(System.Boolean)" />*/
	update: function (async) {
		$.ig.CartesianChartBase.prototype.update.call(this, async);
		this.updateScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::Update(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CartesianChartBase.prototype.sizeChanged.call(this, w, h);
		this.updateScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::UpdateScroll()" />*/
	updateScroll: function () {
		var snapshot = this.__lastSnapshot;
		var maxItemPercent = (0.25 * Math.max(1, snapshot._sideBySideSeriesCount));
		var viewportSize = snapshot._canvasFrameWidth;
		var maxItemSize = viewportSize * maxItemPercent;
		var maxScale = (snapshot._itemCount * maxItemSize) / viewportSize;
		this.setScrollViewMaximum(maxScale);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::UpdateScroll()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.CategoryChartBase::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.SeriesSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.CategoryChartBase::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CategoryChartBase::ConvertNanData()" />*/
	convertNanData: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CategoryChartBase::ConvertNanData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	initializeTransitionFromEmptySeriesList: function (fromSnapshot, toSnapshot) {
		$.ig.CartesianChartBase.prototype.initializeTransitionFromEmptySeriesList.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		from._maxLeft = to._maxLeft;
		from._minLeft = to._minLeft;
		from._maxRight = to._maxRight;
		from._minRight = to._minRight;
		from._minTop = to._minTop;
		from._maxTop = to._maxTop;
		from._minBottom = to._minBottom;
		from._maxBottom = to._maxBottom;
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CategoryChartBase::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		var rightItems = new $.ig.Array();
		var pt = new $.ig.CPPoint(x, y);
		var index = this.resolveCategoryIndex(pt);
		if (index < 0) {
			return items;
		}
		if (snapshot._valueInterval > 1 && snapshot._combineClusteredValues) {
			index = snapshot._subsetIndices[$.ig.intDivide(index, snapshot._valueInterval)];
		}
		var useMK = snapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = snapshot._primaryAxisValueFormatNegativeMode;
		var numType = snapshot._primaryAxisValueFormatType;
		var digits = snapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = snapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = snapshot._primaryAxisValueFormatShowGroupingSeparator;
		var seriesCount = snapshot._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
			var s = snapshot._seriesList[seriesIndex];
			if (s.isRangeSeries()) {
				continue;
			}
			for (var stackIndex = 0; stackIndex < s._data.length; stackIndex++) {
				var itemValue = snapshot.valueForItem1(index, seriesIndex, stackIndex);
				if ($.ig.util.isNaN(itemValue)) {
					continue;
				}
				var item = new $.ig.TooltipItem();
				item._color = stackIndex < s._colors.length ? s._colors[stackIndex] : s._colors[0];
				item._value = itemValue;
				item._valueLabel = $.ig.ChartsUtility.prototype.labelForValue(item._value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
				item._point = this.getPointAt(index, stackIndex, s._key);
				item._bounds = this.getItemBounds1(index, s._key, stackIndex);
				item._seriesKey = s._key;
				item._seriesIndex = seriesIndex;
				item._propertyNames = $.ig.ArrayUtility.prototype.copyCPList(s._propertyNames);
				item._seriesType = s._type;
				item._index = index;
				item._numberOfStacks = 0;
				item._title = s._title;
				item._valueFormatted = $.ig.ChartsUtility.prototype.labelForValue(item._value, snapshot._primaryAxisValueFormatUseMKFormatting, snapshot._primaryAxisValueFormatNegativeMode, snapshot._primaryAxisValueFormatType, snapshot._primaryAxisValueFormatFractionDigits, snapshot._primaryAxisValueFormatShowGroupingSeparator, snapshot._primaryAxisValueFormatCurrencySymbol);
				if (s.isStackSeries()) {
					item._numberOfStacks = s._stackKeys.length;
					item._seriesKey = s._stackKeys[stackIndex];
					if (snapshot._stack100ModeEnabled) {
						var total = 0;
						for (var i = 0; i < s._stackKeys.length; i++) {
							var currentValue = snapshot.valueForItem1(index, seriesIndex, i);
							if (!$.ig.util.isNaN(currentValue)) {
								total += Math.abs(currentValue);
							}
						}
						var stackPercentage = (item._value / total) * 100;
						item._percentage = $.ig.NativeUtility.prototype.utility().convertNumberToString(stackPercentage, 0, false) + "%";
					}
				} else if (s.isFinancialSeries() || s.isRangeSeries()) {
					item._seriesKey = s._propertyNames[stackIndex];
				}
				if (s._yLocation == $.ig.YAxisLocation.prototype.left) {
					items.add(item);
				} else {
					rightItems.add(item);
				}
			}
		}
		if (rightItems.length > 0) {
			var item1 = new $.ig.TooltipItem();
			item1._isSpacer = true;
			items.add(item1);
			for (var i1 = 0; i1 < rightItems.length; i1++) {
				items.add(rightItems[i1]);
			}
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CategoryChartBase::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CategoryChartBase::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	resolveCategoryIndex: function (point) {
		var index = -1;
		var last = this.__lastSnapshot;
		if (last != null) {
			var startX = last._canvasFrameX;
			var endX = startX + last._canvasFrameWidth;
			var startY = last._canvasFrameY;
			var endY = startY + last._canvasFrameHeight;
			if (point._x >= startX && point._x < endX && point._y >= startY && point._y < endY) {
				index = last.calculateIndexForPosition(point._x - startX);
			}
		}
		return index;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CategoryChartBase::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String)" />*/
	addCategorySeries: function (data, numberProperty, labelProperty, type, color, negativeColor, xLocation, yLocation, key) {
		this.addCategorySeries1(data, numberProperty, labelProperty, type, color, negativeColor, xLocation, yLocation, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addCategorySeries1: function (data, numberProperty, labelProperty, type, color, negativeColor, xLocation, yLocation, title, key) {
		var numberProperties = new $.ig.Array();
		numberProperties.add(numberProperty);
		var combinedType = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		var series = this.addSeriesHelper(data, numberProperties, labelProperty, null, combinedType, color, negativeColor, title, key);
		series._xLocation = xLocation;
		series._yLocation = yLocation;
		if (series._trendlinePeriod != -1) {
			series._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(series._data[0], series._trendlineType, series._trendlinePeriod);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddRangeCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, Infragistics.RangeCategoryDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String)" />*/
	addRangeSeries: function (data, minValueProperty, maxValueProperty, labelProperty, type, color, negativeColor, location, key) {
		this.addRangeSeriesWithTitle(data, minValueProperty, maxValueProperty, labelProperty, type, color, negativeColor, location, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddRangeCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, Infragistics.RangeCategoryDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddRangeCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, Infragistics.RangeCategoryDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addRangeSeriesWithTitle: function (data, minValueProperty, maxValueProperty, labelProperty, type, color, negativeColor, location, title, key) {
		var numberProperties = new $.ig.Array();
		numberProperties.add(minValueProperty);
		numberProperties.add(maxValueProperty);
		var combinedType = $.ig.ChartsUtility.prototype.convertRangeCategoryType(type);
		var series = this.addSeriesHelper(data, numberProperties, labelProperty, null, combinedType, color, negativeColor, title, key);
		series._yLocation = location;
		series._xLocation = $.ig.XAxisLocation.prototype.bottom;
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddRangeCategorySeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, Infragistics.RangeCategoryDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddTrendline(System.String, Infragistics.TrendlineType, System.Int32, System.String)" />*/
	addTrendline: function (seriesKey, type, period, color) {
		var snapshot = this.__lastSnapshot;
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(snapshot._seriesKeyLookup, seriesKey)) {
			var s = snapshot._seriesKeyLookup.item(seriesKey);
			s._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(s._data[0], type, period);
			s._trendlineType = type;
			s._trendlinePeriod = period;
			s._trendlineColor = $.ig.ColorUtility.prototype.convertToInt(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddTrendline(System.String, Infragistics.TrendlineType, System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddTrendline(System.String, Infragistics.TrendlineType, System.String)" />*/
	addTrendline1: function (seriesKey, type, color) {
		this.addTrendline(seriesKey, type, 7, color);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddTrendline(System.String, Infragistics.TrendlineType, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::RemoveTrendline(System.String)" />*/
	removeTrendline: function (seriesKey) {
		var snapshot = this.__lastSnapshot;
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(snapshot._seriesKeyLookup, seriesKey)) {
			var s = snapshot._seriesKeyLookup.item(seriesKey);
			this.removeTrendlineFromSeries(s);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::RemoveTrendline(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::RemoveAllTrendlines()" />*/
	removeAllTrendlines: function () {
		var snapshot = this.__lastSnapshot;
		var seriesCount = snapshot._seriesList.length;
		for (var i = 0; i < seriesCount; i++) {
			var s = snapshot._seriesList[i];
			this.removeTrendlineFromSeries(s);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::RemoveAllTrendlines()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::RemoveTrendlineFromSeries(Infragistics.SeriesObject)" />*/
	removeTrendlineFromSeries: function (series) {
		if (series != null) {
			series._trendlineColor = -1;
			series._trendlineData = new Array(0);
			series._trendlinePeriod = -1;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::RemoveTrendlineFromSeries(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddStackWithValuesTo(System.String, , System.String, System.String, System.String, System.String, System.Single)" />*/
	addStackWithValuesTo: function (seriesKey, data, color, title, stackKey, strokeColor, strokeWidth) {
		this.addStackHelper(seriesKey, $.ig.DataInfo.prototype.createDataInfo6(data, null, this.__lastSnapshot._treatNullValuesAsZeroes), "Values", color, title, stackKey, strokeColor, strokeWidth);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddStackWithValuesTo(System.String, , System.String, System.String, System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	addStackTo: function (seriesKey, data, numberProperty, color, stackKey) {
		this.addStackTo1(seriesKey, data, numberProperty, color, null, stackKey);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String)" />*/
	addStackTo1: function (seriesKey, data, numberProperty, color, title, stackKey) {
		var info = $.ig.NativeUtility.prototype.utility().setData(data, numberProperty, null, null, null, null, null, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		this.addStackHelper(seriesKey, info, numberProperty, color, title, stackKey, color, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::RemoveStack(System.String, System.String)" />*/
	removeStack: function (seriesKey, stackKey) {
		this.removeStackHelper(seriesKey, stackKey);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::RemoveStack(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::ClearStacks(System.String)" />*/
	clearStacks: function (seriesKey) {
		this.clearStacksHelper(seriesKey);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::ClearStacks(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartBase::ItemProcessed(System.Int32, System.Double, System.Double, System.Double, System.Double, System.Double, System.String, System.Int64, Infragistics.CPList)" />*/
	itemProcessed: function (index, value1, value2, value3, value4, value5, label, date, children) {
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartBase::ItemProcessed(System.Int32, System.Double, System.Double, System.Double, System.Double, System.Double, System.String, System.Int64, Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('CategoryChartBase', $.ig.CartesianChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryChartBase" />*/

/*<BeginType Name="Infragistics.BarChart" />*/

$.ig.util.defType('BarChart', 'CategoryChartBase', {
	init: function () {
		$.ig.CategoryChartBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.BarChart::Setup()" />*/
	setup: function () {
		$.ig.CategoryChartBase.prototype.setup.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._mode = $.ig.ChartAxisMode.prototype.categoryYNumericX;
		this.setZoomType($.ig.ZoomType.prototype.verticalOnly);
		this._canvas._layers.add(new $.ig.XMajorAxisLinesLayer());
		this._canvas._layers.add(new $.ig.AxisLineLayer());
		this._canvas._layers.add(new $.ig.CategoryYAxisLayer());
		this._canvas._layers.add(new $.ig.NumericXAxisLayer($.ig.XAxisLocation.prototype.top));
		this._canvas._layers.add(new $.ig.NumericXAxisLayer($.ig.XAxisLocation.prototype.bottom));
		this._canvas._layers.add(new $.ig.BarChartLayer());
		this._canvas._layers.add(new $.ig.TrendlineLayer());
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.top));
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.bottom));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.left));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.right));
		this._canvas._layers.add(new $.ig.BarTextMarkerLayer());
		this._canvas._layers.add(new $.ig.LegendLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.BarChart::Setup()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.BarChart::TopAxisMin()" />*/
	topAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userTopMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userTopMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.BarChart::TopAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.BarChart::TopAxisMax()" />*/
	topAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userTopMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userTopMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.BarChart::TopAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.BarChart::BottomAxisMin()" />*/
	bottomAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userBottomMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userBottomMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.BarChart::BottomAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.BarChart::BottomAxisMax()" />*/
	bottomAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userBottomMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userBottomMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.BarChart::BottomAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.BarChart::TopXAxisIsLogarithmic()" />*/
	topXAxisIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisTopIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisTopIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.BarChart::TopXAxisIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.BarChart::TopXAxisLogBase()" />*/
	topXAxisLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._xAxisTopLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisTopLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.BarChart::TopXAxisLogBase()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.BarChart::BottomXAxisIsLogarithmic()" />*/
	bottomXAxisIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisBottomIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.BarChart::BottomXAxisIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.BarChart::BottomXAxisLogBase()" />*/
	bottomXAxisLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._xAxisBottomLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.BarChart::BottomXAxisLogBase()" />*/
	,
	/*<BeginProperty Name="Infragistics.TextHorizontalAlignment Infragistics.BarChart::YAxisLabelHorizontalAlignment()" />*/
	yAxisLabelHorizontalAlignment: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisLabelHorizontalAlignment = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLabelHorizontalAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.TextHorizontalAlignment Infragistics.BarChart::YAxisLabelHorizontalAlignment()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.BarChart::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	resolveCategoryIndex: function (point) {
		var index = -1;
		var last = this.__lastSnapshot;
		if (last != null) {
			var startX = last._canvasFrameX;
			var endX = startX + last._canvasFrameWidth;
			var startY = last._canvasFrameY;
			var endY = startY + last._canvasFrameHeight;
			if (point._x >= startX && point._x < endX && point._y >= startY && point._y < endY) {
				index = last.calculateIndexForPosition(endY - point._y);
			}
		}
		return index;
	}
	/*<EndMethod Name="System.Int32 Infragistics.BarChart::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.BarChart::GetItemBounds(System.Int32, System.String, System.Int32)" />*/
	getItemBounds1: function (index, seriesKey, stackIndex) {
		var snapshot = this.__lastSnapshot;
		if (snapshot != null) {
			var path = this.getItemPath(index, seriesKey);
			if (path._seriesIndex < snapshot._seriesList.length) {
				var info = new $.ig.ItemLayoutInfo();
				var adjustedIndex = snapshot.adjustIndexForInterval(index);
				var useBucketing = snapshot._valueInterval > 1 && snapshot._combineClusteredValues;
				var s = snapshot._seriesList[path._seriesIndex];
				snapshot.calculateCategoryValueBounds(info, adjustedIndex, path._seriesIndex, stackIndex, path._sideBySideIndex, s, useBucketing ? 1 : 0);
				return new $.ig.CPRect(1, info._boundsX, snapshot._canvasFrameY + info._boundsY, info._boundsWidth, info._boundsHeight);
			}
		}
		return new $.ig.CPRect(1, 0, 0, 0, 0);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.BarChart::GetItemBounds(System.Int32, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.XAxisLocation, System.String)" />*/
	addSeries: function (data, numberProperty, labelProperty, type, color, xLocation, key) {
		this.addCategorySeries1(data, numberProperty, labelProperty, type, color, color, xLocation, $.ig.YAxisLocation.prototype.left, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.BarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.XAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.XAxisLocation, System.String, System.String)" />*/
	addSeriesWithTitle: function (data, numberProperty, labelProperty, type, color, xLocation, title, key) {
		this.addCategorySeries1(data, numberProperty, labelProperty, type, color, color, xLocation, $.ig.YAxisLocation.prototype.left, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.BarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.XAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BarChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addSeriesFromValues: function (data, labels, type, color, yLocation, title, key) {
		this.addSeriesFromValuesWithMarkers(data, labels, type, color, yLocation, false, title, key, color, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.BarChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.BarChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.Boolean, System.String, System.String, System.String, System.Single)" />*/
	addSeriesFromValuesWithMarkers: function (data, labels, type, color, yLocation, hideMarkers, title, key, strokeColor, strokeWidth) {
		var combinedType = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		var numberProperties = new $.ig.Array();
		numberProperties.add("Values");
		if (labels != null && labels.length == 0) {
			labels = null;
		}
		var series = this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo6(data, labels, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, color, title, key);
		series._xLocation = $.ig.XAxisLocation.prototype.bottom;
		series._yLocation = yLocation;
		if (series._trendlinePeriod != -1) {
			series._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(series._data[0], series._trendlineType, series._trendlinePeriod);
		}
		series._hideMarkers = hideMarkers;
		series._strokeColors[0] = $.ig.ColorUtility.prototype.convertToInt(strokeColor);
		series._strokeWidth = strokeWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.BarChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.Boolean, System.String, System.String, System.String, System.Single)" />*/
	,
	$type: new $.ig.Type('BarChart', $.ig.CategoryChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.BarChart" />*/

/*<BeginType Name="Infragistics.CategoryChart" />*/

$.ig.util.defType('CategoryChart', 'CategoryChartBase', {
	init: function () {
		$.ig.CategoryChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Double Infragistics.CategoryChart::LeftAxisMax()" />*/
	leftAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userLeftMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userLeftMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CategoryChart::LeftAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CategoryChart::LeftAxisMin()" />*/
	leftAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userLeftMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userLeftMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CategoryChart::LeftAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CategoryChart::RightAxisMax()" />*/
	rightAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRightMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRightMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CategoryChart::RightAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CategoryChart::RightAxisMin()" />*/
	rightAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRightMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRightMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CategoryChart::RightAxisMin()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CategoryChart::YAxisRightTitle()" />*/
	yAxisRightTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisRightTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisRightTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CategoryChart::YAxisRightTitle()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CategoryChart::YAxisRightLabelsHidden()" />*/
	yAxisRightLabelsHidden: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisRightLabelsHidden = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisRightLabelsHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CategoryChart::YAxisRightLabelsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CategoryChart::YAxisLeftIsLogarithmic()" />*/
	yAxisLeftIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisLeftIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CategoryChart::YAxisLeftIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CategoryChart::YAxisRightIsLogarithmic()" />*/
	yAxisRightIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisRightIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisRightIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CategoryChart::YAxisRightIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CategoryChart::YAxisLeftLogBase()" />*/
	yAxisLeftLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._yAxisLeftLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CategoryChart::YAxisLeftLogBase()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CategoryChart::YAxisRightLogBase()" />*/
	yAxisRightLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._yAxisRightLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisRightLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CategoryChart::YAxisRightLogBase()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.CategoryChart::MarkerSize()" />*/
	markerSize: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._markerRadius = value;
			return value;
		} else {
			return (this.__lastSnapshot)._markerRadius;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CategoryChart::MarkerSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::Setup()" />*/
	setup: function () {
		$.ig.CategoryChartBase.prototype.setup.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._mode = $.ig.ChartAxisMode.prototype.numericYCategoryX;
		this.setZoomType($.ig.ZoomType.prototype.horizontalOnly);
		this._canvas._layers.add(new $.ig.YMajorAxisLinesLayer());
		this._canvas._layers.add(new $.ig.AxisLineLayer());
		this._canvas._layers.add(new $.ig.CategoryXAxisLayer());
		this._canvas._layers.add(new $.ig.NumericYAxisLayer($.ig.YAxisLocation.prototype.left));
		this._canvas._layers.add(new $.ig.NumericYAxisLayer($.ig.YAxisLocation.prototype.right));
		this._canvas._layers.add(new $.ig.CategoryChartLayer());
		this._canvas._layers.add(new $.ig.TrendlineLayer());
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.top));
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.bottom));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.left));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.right));
		this._canvas._layers.add(new $.ig.MarkerLayer());
		this._canvas._layers.add(new $.ig.TextMarkerLayer());
		this._canvas._layers.add(new $.ig.LegendLayer());
		this._canvas._layers.add(new $.ig.CrosshairsAdornment());
		this._canvas._layers.add(new $.ig.AxisAnnotationsLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String)" />*/
	addSeries: function (data, numberProperty, labelProperty, type, color, yLocation, key) {
		this.addCategorySeries(data, numberProperty, labelProperty, type, color, color, $.ig.XAxisLocation.prototype.bottom, yLocation, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addSeriesWithTitle: function (data, numberProperty, labelProperty, type, color, yLocation, title, key) {
		this.addCategorySeries1(data, numberProperty, labelProperty, type, color, color, $.ig.XAxisLocation.prototype.bottom, yLocation, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addSeriesFromValues: function (data, labels, type, color, yLocation, title, key) {
		this.addSeriesFromValuesWithMarkers(data, labels, type, color, yLocation, false, title, key, color, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.Boolean, System.String, System.String, System.String, System.Single)" />*/
	addSeriesFromValuesWithMarkers: function (data, labels, type, color, yLocation, hideMarkers, title, key, strokeColor, strokeWidth) {
		var combinedType = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		var numberProperties = new $.ig.Array();
		numberProperties.add("Values");
		if (labels != null && labels.length == 0) {
			labels = null;
		}
		var series = this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo6(data, labels, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, color, title, key);
		series._xLocation = $.ig.XAxisLocation.prototype.bottom;
		series._yLocation = yLocation;
		if (series._trendlinePeriod != -1) {
			series._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(series._data[0], series._trendlineType, series._trendlinePeriod);
		}
		series._hideMarkers = hideMarkers;
		series._strokeColors[0] = $.ig.ColorUtility.prototype.convertToInt(strokeColor);
		series._strokeWidth = strokeWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, Infragistics.YAxisLocation, System.Boolean, System.String, System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String)" />*/
	addFinancialSeries1: function (data, dateProperty, openProperty, highProperty, lowProperty, closeProperty, labelProperty, type, color, negativeColor, yLocation, key) {
		this.addFinancialSeries2(data, dateProperty, openProperty, highProperty, lowProperty, closeProperty, labelProperty, type, color, negativeColor, yLocation, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addFinancialSeries2: function (data, dateProperty, openProperty, highProperty, lowProperty, closeProperty, labelProperty, type, color, negativeColor, yLocation, title, key) {
		var numberProperties = new $.ig.Array();
		numberProperties.add(openProperty);
		numberProperties.add(highProperty);
		numberProperties.add(lowProperty);
		numberProperties.add(closeProperty);
		var combinedType = $.ig.ChartsUtility.prototype.convertFinancialType(type);
		var series = this.addSeriesHelper(data, numberProperties, labelProperty, dateProperty, combinedType, color, negativeColor, title, key);
		series._xLocation = $.ig.XAxisLocation.prototype.bottom;
		series._yLocation = yLocation;
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String, Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(, , , , , , Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addFinancialSeries: function (open, high, low, close, dates, labels, type, color, negativeColor, yLocation, title, key) {
		var combinedType = $.ig.ChartsUtility.prototype.convertFinancialType(type);
		var numberProperties = new $.ig.Array();
		numberProperties.add("Open");
		numberProperties.add("High");
		numberProperties.add("Low");
		numberProperties.add("Close");
		var volume = new Array(0);
		var series = this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo1(open, high, low, close, volume, labels, dates, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, negativeColor, title, key);
		series._xLocation = $.ig.XAxisLocation.prototype.bottom;
		series._yLocation = yLocation;
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChart::AddFinancialSeries(, , , , , , Infragistics.FinancialDataItemType, System.String, System.String, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	$type: new $.ig.Type('CategoryChart', $.ig.CategoryChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryChart" />*/

/*<BeginType Name="Infragistics.ChartCanvasView" />*/

$.ig.util.defType('ChartCanvasView', 'DrawingViewBase', {
	_scale: null,
	_layers: null,
	init: function () {
		this._scale = new $.ig.CPRect();
		$.ig.DrawingViewBase.prototype.init.call(this);
		this._scale = new $.ig.CPRect(1, 0, 0, 1, 1);
		this._layers = new $.ig.Array();
	},
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartCanvasView::UsesMouseDownDelayed()" />*/
	usesMouseDownDelayed: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartCanvasView::UsesMouseDownDelayed()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartCanvasView::Scalable()" />*/
	scalable: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartCanvasView::Scalable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ChartCanvasView::SupportsGlyphs()" />*/
	supportsGlyphs: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ChartCanvasView::SupportsGlyphs()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.DrawingViewBase.prototype.handleClick.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::HandleClick(System.Int32, System.Int32)" />*/
	,
	__snapshot: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::RenderSnapshot(System.Boolean, Infragistics.SnapshotBase)" />*/
	renderSnapshot: function (async, snapshot) {
		this.__snapshot = snapshot;
		this.render1(async);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::RenderSnapshot(System.Boolean, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::UpdateSnapshot(Infragistics.SnapshotBase)" />*/
	updateSnapshot: function (snapshot) {
		this.__snapshot = snapshot;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::UpdateSnapshot(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ChartCanvasView::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		return this.__snapshot;
	}
	/*<EndMethod Name="System.Object Infragistics.ChartCanvasView::ResolveDrawingInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		var count = this._layers.length;
		for (var i = 0; i < count; i++) {
			var layer = this._layers[i];
			if (!layer._hidden) {
				this.saveCanvas(canvas);
				layer.render(this, canvas, 0, 0, w, h, info);
				this.restoreCanvas(canvas);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	__isInTouchDownDelayedMode: false,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	handleTouchDownDelayed: function (x, y) {
		this.__isInTouchDownDelayedMode = true;
		this.firePointerAction(x, y, true);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchMove(System.Int32, System.Int32)" />*/
	handleTouchMove: function (x, y) {
		if (this.__isInTouchDownDelayedMode) {
			this.firePointerAction(x, y, true);
			return true;
		}
		return $.ig.DrawingViewBase.prototype.handleTouchMove.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchUp(System.Int32, System.Int32)" />*/
	handleTouchUp: function (x, y) {
		if (this.__isInTouchDownDelayedMode) {
			this.fireTouchUpAction(x, y);
		}
		this.__isInTouchDownDelayedMode = false;
		return $.ig.DrawingViewBase.prototype.handleTouchUp.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartCanvasView::HandleTouchUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		this.firePointerAction(x, y, false);
		$.ig.DrawingViewBase.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	__pointerActionHandler: null,
	__touchUpActionHandler: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::AddPointerActionHandler(Infragistics.PointBoolExecutionBlock)" />*/
	addPointerActionHandler: function (action) {
		this.__pointerActionHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::AddPointerActionHandler(Infragistics.PointBoolExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::AddTouchUpActionHandler(Infragistics.PointExecutionBlock)" />*/
	addTouchUpActionHandler: function (action) {
		this.__touchUpActionHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::AddTouchUpActionHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::FirePointerAction(System.Int32, System.Int32, System.Boolean)" />*/
	firePointerAction: function (x, y, isTouch) {
		if (this.__pointerActionHandler != null) {
			this.__pointerActionHandler(x, y, isTouch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::FirePointerAction(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::FireTouchUpAction(System.Int32, System.Int32)" />*/
	fireTouchUpAction: function (x, y) {
		if (this.__touchUpActionHandler != null) {
			this.__touchUpActionHandler(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::FireTouchUpAction(System.Int32, System.Int32)" />*/
	,
	__mouseLeaveActionHandler: null,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::AddMouseLeaveActionHandler(Infragistics.PointBoolExecutionBlock)" />*/
	addMouseLeaveActionHandler: function (action) {
		this.__mouseLeaveActionHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::AddMouseLeaveActionHandler(Infragistics.PointBoolExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::FireMouseLeaveAction(System.Int32, System.Int32, System.Boolean)" />*/
	fireMouseLeaveAction: function (x, y, isTouch) {
		if (this.__mouseLeaveActionHandler != null) {
			this.__mouseLeaveActionHandler(x, y, isTouch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::FireMouseLeaveAction(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartCanvasView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	handleMouseLeave: function (x, y) {
		$.ig.DrawingViewBase.prototype.handleMouseLeave.call(this, x, y);
		this.fireMouseLeaveAction(x, y, false);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartCanvasView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('ChartCanvasView', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ChartCanvasView" />*/

/*<BeginType Name="Infragistics.ChartsUtility" />*/

$.ig.util.defType('ChartsUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ChartsUtility::CalculateBoundsOfRect(Infragistics.RectRotationBounds, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	calculateBoundsOfRect: function (bounds, x, y, width, height, radians) {
		var centerX = x + width / 2;
		var centerY = y + height / 2;
		var pt1X = $.ig.CPMathUtility.prototype.rotateX(x, y, radians, centerX, centerY);
		var pt1Y = $.ig.CPMathUtility.prototype.rotateY(x, y, radians, centerX, centerY);
		var pt2X = $.ig.CPMathUtility.prototype.rotateX(x + width, y, radians, centerX, centerY);
		var pt2Y = $.ig.CPMathUtility.prototype.rotateY(x + width, y, radians, centerX, centerY);
		var pt3X = $.ig.CPMathUtility.prototype.rotateX(x, y + height, radians, centerX, centerY);
		var pt3Y = $.ig.CPMathUtility.prototype.rotateY(x, y + height, radians, centerX, centerY);
		var pt4X = $.ig.CPMathUtility.prototype.rotateX(x + width, y + height, radians, centerX, centerY);
		var pt4Y = $.ig.CPMathUtility.prototype.rotateY(x + width, y + height, radians, centerX, centerY);
		bounds._minX = Math.min(Math.min(Math.min(pt1X, pt2X), pt3X), pt4X);
		bounds._maxX = Math.max(Math.max(Math.max(pt1X, pt2X), pt3X), pt4X);
		bounds._minY = Math.min(Math.min(Math.min(pt1Y, pt2Y), pt3Y), pt4Y);
		bounds._maxY = Math.max(Math.max(Math.max(pt1Y, pt2Y), pt3Y), pt4Y);
		bounds._width = Math.abs(bounds._maxX - bounds._minX);
		bounds._height = Math.abs(bounds._maxY - bounds._minY);
	}
	/*<EndMethod Name="System.Void Infragistics.ChartsUtility::CalculateBoundsOfRect(Infragistics.RectRotationBounds, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterStartPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterStartPointX: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var startRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(startDegrees);
		var centerX = x + (w / 2);
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var outerStartX = $.ig.CPMathUtility.prototype.translateX(centerX, outerExtent, startRadians);
		return outerStartX;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterStartPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterEndPointY(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterEndPointY: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var endRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(endDegrees);
		var centerY = y + h / 2;
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var outerEndY = $.ig.CPMathUtility.prototype.translateY(centerY, outerExtent, endRadians);
		return outerEndY;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterEndPointY(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterEndPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterEndPointX: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var endRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(endDegrees);
		var centerX = x + (w / 2);
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var outerEndX = $.ig.CPMathUtility.prototype.translateX(centerX, outerExtent, endRadians);
		return outerEndX;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterEndPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.ChartsUtility::SliceOuterMidPoint(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterMidPoint: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var xPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPointX(startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius);
		var yPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPointY(startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius);
		return new $.ig.CPPoint(xPoint, yPoint);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.ChartsUtility::SliceOuterMidPoint(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterMidPointY(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterMidPointY: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var startRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(startDegrees);
		var endRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(endDegrees);
		var centerY = y + h / 2;
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var midRadians = startRadians + (endRadians - startRadians) / 2;
		var outerMidY = $.ig.CPMathUtility.prototype.translateY(centerY, outerExtent, midRadians);
		return outerMidY;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterMidPointY(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterMidPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceOuterMidPointX: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var startRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(startDegrees);
		var endRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(endDegrees);
		var centerX = x + (w / 2);
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var midRadians = startRadians + (endRadians - startRadians) / 2;
		var outerMidX = $.ig.CPMathUtility.prototype.translateX(centerX, outerExtent, midRadians);
		return outerMidX;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceOuterMidPointX(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::SliceWidth(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	sliceWidth: function (startDegrees, endDegrees, x, y, w, h, innerRadius, outerRadius) {
		var startRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(startDegrees);
		var endRadians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(endDegrees);
		var centerX = x + (w / 2);
		var centerY = y + h / 2;
		var radius = Math.min(w / 2, h / 2);
		var outerExtent = radius * outerRadius;
		var outerStartX = $.ig.CPMathUtility.prototype.translateX(centerX, outerExtent, startRadians);
		var outerStartY = $.ig.CPMathUtility.prototype.translateY(centerY, outerExtent, startRadians);
		var outerEndX = $.ig.CPMathUtility.prototype.translateX(centerX, outerExtent, endRadians);
		var outerEndY = $.ig.CPMathUtility.prototype.translateY(centerY, outerExtent, endRadians);
		return Math.sqrt(Math.pow(outerEndX - outerStartX, 2) + Math.pow(outerEndY - outerStartY, 2));
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::SliceWidth(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::DistanceBetweenPoints(System.Single, System.Single, System.Single, System.Single)" />*/
	distanceBetweenPoints: function (x1, y1, x2, y2) {
		var dx = (x2 - x1);
		var dy = (y2 - y1);
		return Math.sqrt(dx * dx + dy * dy);
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::DistanceBetweenPoints(System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::GetAngleFromCenter(System.Single, System.Single, System.Single, System.Single)" />*/
	getAngleFromCenter: function (centerX, centerY, toPointX, toPointY) {
		var radius = Math.sqrt(Math.pow(toPointX - centerX, 2) + Math.pow(toPointY - centerY, 2));
		var angle = Math.acos((toPointX - centerX) / radius);
		if ((toPointY - centerY) < 0) {
			angle = (2 * Math.PI) - angle;
		}
		return $.ig.CPMathUtility.prototype.convertRadiansToDegrees(angle);
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::GetAngleFromCenter(System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::NormalizeAngle(System.Single)" />*/
	normalizeAngle: function (angle) {
		while (angle > 360) {
			angle -= 360;
		}
		while (angle < 0) {
			angle += 360;
		}
		return angle;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::NormalizeAngle(System.Single)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.String)" />*/
	labelForValue1: function (value, useMKFormatting, negativeFormatting, valueFormatType, fractionDigits, currencySymbol) {
		return $.ig.ChartsUtility.prototype.labelForValue(value, useMKFormatting, negativeFormatting, valueFormatType, fractionDigits, true, currencySymbol);
	}
	/*<EndMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.Boolean, System.String)" />*/
	labelForValue: function (value, useMKFormatting, negativeFormatting, valueFormatType, fractionDigits, showGroupingSeparator, currencySymbol) {
		return $.ig.ChartsUtility.prototype.labelForValue2(value, useMKFormatting, negativeFormatting, $.ig.FormatSettingsPositiveNumberMode.prototype.noSign, valueFormatType, fractionDigits, showGroupingSeparator, currencySymbol);
	}
	/*<EndMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.Boolean, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsPositiveNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.Boolean, System.String)" />*/
	labelForValue2: function (value, useMKFormatting, negativeFormatting, positiveFormatting, valueFormatType, fractionDigits, showGroupingSeparator, currencySymbol) {
		var isNeg = value < 0;
		var MKString = "";
		if (useMKFormatting) {
			var lessThanZero = value < 0;
			var absValue = Math.abs(value);
			if (absValue >= 1000000000) {
				absValue /= 1000000000;
				MKString = "B";
			} else if (absValue >= 1000000) {
				absValue /= 1000000;
				MKString = "M";
			} else if (absValue >= 1000) {
				absValue /= 1000;
				MKString = "K";
			}
			if (lessThanZero) {
				absValue *= -1;
			}
			value = absValue;
		}
		if (negativeFormatting == $.ig.FormatSettingsNegativeNumberMode.prototype.parens && isNeg) {
			value = Math.abs(value);
		}
		if (valueFormatType == $.ig.FormatSettingsNumberType.prototype.percent) {
			value *= 100;
		}
		var formatString = $.ig.NativeUtility.prototype.utility().convertNumberToString(value, fractionDigits, showGroupingSeparator);
		if (formatString.equals("NaN")) {
			return formatString;
		}
		if (useMKFormatting) {
			formatString = formatString + MKString;
		}
		if (negativeFormatting == $.ig.FormatSettingsNegativeNumberMode.prototype.parens && isNeg) {
			formatString = "(" + formatString;
			formatString = formatString + ")";
		}
		if (positiveFormatting == $.ig.FormatSettingsPositiveNumberMode.prototype.plus && !isNeg) {
			formatString = "+" + formatString;
		}
		if (valueFormatType == $.ig.FormatSettingsNumberType.prototype.percent) {
			formatString = formatString + "%";
		} else if (valueFormatType == $.ig.FormatSettingsNumberType.prototype.currency && currencySymbol != null) {
			formatString = currencySymbol + formatString;
		}
		return formatString;
	}
	/*<EndMethod Name="System.String Infragistics.ChartsUtility::LabelForValue(System.Double, System.Boolean, Infragistics.FormatSettingsNegativeNumberMode, Infragistics.FormatSettingsPositiveNumberMode, Infragistics.FormatSettingsNumberType, System.Int32, System.Boolean, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ChartsUtility::CalculateOrder(Infragistics.CPList, Infragistics.CPDictionary, Infragistics.CPList)" />*/
	calculateOrder: function (fromList, keyLookup, toList) {
		var fromCount = fromList.length;
		var toCount = toList.length;
		var sortOrder = new Array(toCount + fromCount);
		for (var fromIndex = 0; fromIndex < fromCount; fromIndex++) {
			var newIndex = -1;
			var fromKey = fromList[fromIndex];
			for (var toIndex = 0; toIndex < toCount; toIndex++) {
				var toKey = toList[toIndex];
				if (fromKey._key == toKey._key) {
					newIndex = toIndex;
					break;
				}
			}
			sortOrder[fromIndex] = newIndex;
		}
		var sortListSize = fromCount;
		for (var toIndex1 = 0; toIndex1 < toCount; toIndex1++) {
			var toKey1 = toList[toIndex1];
			if (keyLookup.item(toKey1._key) == null) {
				sortOrder[sortListSize] = toIndex1;
				sortListSize++;
			}
		}
		var returnArray = new $.ig.Array();
		for (var i = 0; i < toCount; i++) {
			returnArray.add("");
		}
		for (var i1 = 0; i1 < sortListSize; i1++) {
			var newIndex1 = sortOrder[i1];
			if (i1 >= fromCount) {
				var obj = toList[newIndex1];
				var newObj = obj.createNew();
				returnArray[newIndex1] = newObj;
			} else if (newIndex1 != -1) {
				returnArray[newIndex1] = fromList[i1];
			}
		}
		return returnArray;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ChartsUtility::CalculateOrder(Infragistics.CPList, Infragistics.CPDictionary, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertCategoryType(Infragistics.CategoryDataItemType)" />*/
	convertCategoryType: function (type) {
		switch (type) {
			case $.ig.CategoryDataItemType.prototype.area:
				{
					return $.ig.CombinedDataItemType.prototype.area;
				}
			case $.ig.CategoryDataItemType.prototype.column:
				{
					return $.ig.CombinedDataItemType.prototype.column;
				}
			case $.ig.CategoryDataItemType.prototype.line:
				{
					return $.ig.CombinedDataItemType.prototype.line;
				}
			case $.ig.CategoryDataItemType.prototype.point:
				{
					return $.ig.CombinedDataItemType.prototype.point;
				}
			case $.ig.CategoryDataItemType.prototype.outlierPoint:
				{
					return $.ig.CombinedDataItemType.prototype.outlierPoint;
				}
			case $.ig.CategoryDataItemType.prototype.spline:
				{
					return $.ig.CombinedDataItemType.prototype.spline;
				}
			case $.ig.CategoryDataItemType.prototype.splineArea:
				{
					return $.ig.CombinedDataItemType.prototype.splineArea;
				}
			case $.ig.CategoryDataItemType.prototype.stepArea:
				{
					return $.ig.CombinedDataItemType.prototype.stepArea;
				}
			case $.ig.CategoryDataItemType.prototype.stepLine:
				{
					return $.ig.CombinedDataItemType.prototype.stepLine;
				}
			case $.ig.CategoryDataItemType.prototype.waterfall:
				{
					return $.ig.CombinedDataItemType.prototype.waterfall;
				}
		}
		return $.ig.CombinedDataItemType.prototype.column;
	}
	/*<EndMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertCategoryType(Infragistics.CategoryDataItemType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertRangeCategoryType(Infragistics.RangeCategoryDataItemType)" />*/
	convertRangeCategoryType: function (type) {
		switch (type) {
			case $.ig.RangeCategoryDataItemType.prototype.rangeArea:
				{
					return $.ig.CombinedDataItemType.prototype.rangeArea;
				}
			case $.ig.RangeCategoryDataItemType.prototype.rangeColumn:
				{
					return $.ig.CombinedDataItemType.prototype.rangeColumn;
				}
		}
		return $.ig.CombinedDataItemType.prototype.column;
	}
	/*<EndMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertRangeCategoryType(Infragistics.RangeCategoryDataItemType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertScatterType(Infragistics.ScatterDataItemType)" />*/
	convertScatterType: function (type) {
		switch (type) {
			case $.ig.ScatterDataItemType.prototype.bubble:
				{
					return $.ig.CombinedDataItemType.prototype.bubble;
				}
			case $.ig.ScatterDataItemType.prototype.scatter:
				{
					return $.ig.CombinedDataItemType.prototype.scatter;
				}
			case $.ig.ScatterDataItemType.prototype.scatterLine:
				{
					return $.ig.CombinedDataItemType.prototype.scatterLine;
				}
			case $.ig.ScatterDataItemType.prototype.scatterOutlier:
				{
					return $.ig.CombinedDataItemType.prototype.scatterOutlier;
				}
		}
		return $.ig.CombinedDataItemType.prototype.column;
	}
	/*<EndMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertScatterType(Infragistics.ScatterDataItemType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertFinancialType(Infragistics.FinancialDataItemType)" />*/
	convertFinancialType: function (type) {
		switch (type) {
			case $.ig.FinancialDataItemType.prototype.candlestick:
				{
					return $.ig.CombinedDataItemType.prototype.candlestick;
				}
			case $.ig.FinancialDataItemType.prototype.ohlc:
				{
					return $.ig.CombinedDataItemType.prototype.ohlc;
				}
		}
		return $.ig.CombinedDataItemType.prototype.column;
	}
	/*<EndMethod Name="Infragistics.CombinedDataItemType Infragistics.ChartsUtility::ConvertFinancialType(Infragistics.FinancialDataItemType)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::CalculateSplineControlPoints()" />*/
	calculateSplineControlPoints: function (values) {
		var count = values.length;
		if (count <= 2) {
			return values;
		}
		var controlPointCount = (count - 1) * 2;
		var d = new Array(count);
		var A = new Array(count);
		var B = new Array(count);
		var C = new Array(controlPointCount);
		d[0] = (values[1] - values[0]) / 3;
		d[count - 1] = (values[count - 1] - values[count - 2]) / 3;
		A[1] = (values[2] - values[0] - d[0]) / 4;
		B[1] = -0.25;
		for (var i = 2; i < count - 1; i++) {
			B[i] = -1 / (4 + B[i - 1]);
			A[i] = -(values[i + 1] - values[i - 1] - A[i - 1]) * B[i];
		}
		for (var i1 = count - 2; i1 > 0; i1--) {
			d[i1] = A[i1] + d[i1 + 1] * B[i1];
		}
		for (var segmentIndex = 0; segmentIndex < count - 1; segmentIndex++) {
			var i2 = segmentIndex * 2;
			C[i2] = values[segmentIndex] + d[segmentIndex];
			C[i2 + 1] = values[segmentIndex + 1] - d[segmentIndex + 1];
		}
		return C;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::CalculateSplineControlPoints()" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::CalculateSplineTangents(, )" />*/
	calculateSplineTangents: function (values, controlPoints) {
		var numValues = controlPoints.length;
		var tangents = new Array(numValues);
		for (var i = 0; i < values.length - 1; i++) {
			var p0 = values[i];
			var p1 = controlPoints[2 * i];
			var p2 = controlPoints[2 * i + 1];
			var p3 = values[i + 1];
			var a = 3 * (p1 - p0);
			var b = 6 * (p2 - p1);
			var c = 3 * (p3 - p2);
			var A = a - b + c;
			var B = b - 2 * a;
			var C = a;
			var y1 = NaN;
			var y2 = NaN;
			var x1 = (-B + Math.sqrt(B * B - 4 * A * C)) / (2 * A);
			var x2 = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
			if (0 <= x1 && x1 <= 1) {
				y1 = Math.pow(1 - x1, 3) * p0 + 3 * Math.pow(1 - x1, 2) * x1 * p1 + 3 * (1 - x1) * Math.pow(x1, 2) * p2 + Math.pow(x1, 3) * p3;
			}
			if (0 <= x2 && x2 <= 1) {
				y2 = Math.pow(1 - x2, 3) * p0 + 3 * Math.pow(1 - x2, 2) * x2 * p1 + 3 * (1 - x2) * Math.pow(x2, 2) * p2 + Math.pow(x2, 3) * p3;
			}
			tangents[2 * i] = y1;
			tangents[2 * i + 1] = y2;
		}
		return tangents;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::CalculateSplineTangents(, )" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.ChartsUtility::GetIntersectionPointOfTwoLines(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	getIntersectionPointOfTwoLines: function (line1x1, line1y1, line1x2, line1y2, line2x1, line2y1, line2x2, line2y2) {
		var x = ((line1x1 * line1y2 - line1y1 * line1x2) * (line2x1 - line2x2) - (line1x1 - line1x2) * (line2x1 * line2y2 - line2y1 * line2x2)) / ((line1x1 - line1x2) * (line2y1 - line2y2) - (line1y1 - line1y2) * (line2x1 - line2x2));
		var y = ((line1x1 * line1y2 - line1y1 * line1x2) * (line2y1 - line2y2) - (line1y1 - line1y2) * (line2x1 * line2y2 - line2y1 * line2x2)) / ((line1x1 - line1x2) * (line2y1 - line2y2) - (line1y1 - line1y2) * (line2x1 - line2x2));
		return new $.ig.CPPoint(x, y);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.ChartsUtility::GetIntersectionPointOfTwoLines(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ChartsUtility::QuickSort(, System.Int32, System.Int32)" />*/
	quickSort: function (array, left, right) {
		var l = left, r = right;
		var temp;
		var pivot = array[$.ig.intDivide((left + right), 2)];
		while (l <= r) {
			while (array[l] < pivot) {
				l++;
			}
			while (array[r] > pivot) {
				r--;
			}
			if (l <= r) {
				temp = array[l];
				array[l] = array[r];
				array[r] = temp;
				l++;
				r--;
			}
		}
		if (left < r) {
			$.ig.ChartsUtility.prototype.quickSort(array, left, r);
		}
		if (l < right) {
			$.ig.ChartsUtility.prototype.quickSort(array, l, right);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ChartsUtility::QuickSort(, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::AreaOfTriangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	areaOfTriangle: function (x1, y1, x2, y2, x3, y3) {
		return Math.abs(x1 * y2 + x2 * y3 + x3 * y1 - x2 * y1 - x3 * y2 - x1 * y3) / 2;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::AreaOfTriangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::AreaOfQuadrilateral(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	areaOfQuadrilateral: function (x1, y1, x2, y2, x3, y3, x4, y4) {
		return Math.abs(x1 * y2 + x2 * y3 + x3 * y4 + x4 * y1 - x2 * y1 - x3 * y2 - x4 * y3 - x1 * y4) / 2;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::AreaOfQuadrilateral(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::Max(System.Single, System.Single, System.Single)" />*/
	max1: function (value1, value2, value3) {
		return Math.max(value1, (Math.max(value2, value3)));
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::Max(System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ChartsUtility::Max(System.Double, System.Double, System.Double)" />*/
	max: function (value1, value2, value3) {
		return Math.max(value1, (Math.max(value2, value3)));
	}
	/*<EndMethod Name="System.Double Infragistics.ChartsUtility::Max(System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ChartsUtility::StringIsNullOrEmpty(System.String)" />*/
	stringIsNullOrEmpty: function (value) {
		if (value == null || value == "") {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ChartsUtility::StringIsNullOrEmpty(System.String)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ChartsUtility::NextRoundNumber(System.Double)" />*/
	nextRoundNumber: function (number) {
		var negative = number < 0;
		var val = $.ig.CPMathUtility.prototype.niceNumber(Math.abs(number), true);
		return negative ? val * -1 : val;
	}
	/*<EndMethod Name="System.Double Infragistics.ChartsUtility::NextRoundNumber(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::EaseOutCubic(System.Double)" />*/
	easeOutCubic: function (t) {
		t -= 1;
		var result = t * t * t + 1;
		return (result);
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::EaseOutCubic(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ChartsUtility::CalculateDecelerationTime(System.Single, System.Single, System.Single, System.Single)" />*/
	calculateDecelerationTime: function (a, b, c, d) {
		var p1_1 = $.ig.intDivide(-1, 27) - d / 2;
		var p1_2 = $.ig.intDivide(-1, 9);
		var p1 = p1_1 + Math.sqrt(p1_1 * p1_1 + Math.pow(p1_2, 3));
		var p2 = p1_1 - Math.sqrt(p1_1 * p1_1 + Math.pow(p1_2, 3));
		var p1Sign = p1 > 0 ? 1 : -1;
		var p2Sign = p2 > 0 ? 1 : -1;
		var result = p1Sign * Math.pow(Math.abs(p1), $.ig.intDivide(1, 3)) + p2Sign * Math.pow(Math.abs(p2), $.ig.intDivide(1, 3)) - $.ig.intDivide(1, 3);
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.ChartsUtility::CalculateDecelerationTime(System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::EqualizeDoubleArrays(, )" />*/
	equalizeDoubleArrays: function (from, to) {
		if (from != null && to != null) {
			var fCount = from.length;
			var tCount = to.length;
			if (fCount != tCount) {
				var temp = new Array(tCount);
				for (var i = 0; i < tCount; i++) {
					temp[i] = (i < fCount) ? from[i] : to[i];
				}
				from = temp;
			}
		}
		return from;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::EqualizeDoubleArrays(, )" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::EqualizeLongArrays(, )" />*/
	equalizeLongArrays: function (from, to) {
		if (from != null && to != null) {
			var fCount = from.length;
			var tCount = to.length;
			if (fCount != tCount) {
				var temp = new Array(tCount);
				for (var i = 0; i < tCount; i++) {
					temp[i] = (i < fCount) ? from[i] : to[i];
				}
				from = temp;
			}
		}
		return from;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::EqualizeLongArrays(, )" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::EqualizeIntArrays(, )" />*/
	equalizeIntArrays: function (from, to) {
		if (from != null && to != null) {
			var fCount = from.length;
			var tCount = to.length;
			if (fCount != tCount) {
				var temp = new Array(tCount);
				for (var i = 0; i < tCount; i++) {
					temp[i] = (i < fCount) ? from[i] : to[i];
				}
				from = temp;
			}
		}
		return from;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::EqualizeIntArrays(, )" />*/
	,
	/*<BeginMethod Name=" Infragistics.ChartsUtility::EqualizeColorIntArrays(, )" />*/
	equalizeColorIntArrays: function (from, to) {
		if (from != null && to != null) {
			var fCount = from.length;
			var tCount = to.length;
			if (fCount != tCount) {
				var temp = new Array(tCount);
				for (var i = 0; i < tCount; i++) {
					temp[i] = (i < fCount) ? from[i] : to[i];
				}
				from = temp;
			}
		}
		return from;
	}
	/*<EndMethod Name=" Infragistics.ChartsUtility::EqualizeColorIntArrays(, )" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ChartsUtility::EqualizeMutableListOfDoubleArrays(Infragistics.CPList, Infragistics.CPList)" />*/
	equalizeMutableListOfDoubleArrays: function (from, to) {
		if (from != null && to != null) {
			var fCount = from.length;
			var tCount = to.length;
			if (fCount != tCount) {
				var temp = new $.ig.Array();
				for (var i = 0; i < tCount; i++) {
					var toArray = to[i];
					if (i < fCount) {
						var fromArray = from[i];
						temp.add($.ig.ChartsUtility.prototype.equalizeDoubleArrays(fromArray, toArray));
					} else {
						temp.add(toArray);
					}
				}
				from = temp;
			}
		}
		return from;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ChartsUtility::EqualizeMutableListOfDoubleArrays(Infragistics.CPList, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.LegendIconShape Infragistics.ChartsUtility::GetIconShape(Infragistics.CombinedDataItemType)" />*/
	getIconShape: function (seriesType) {
		switch (seriesType) {
			case $.ig.CombinedDataItemType.prototype.area:
			case $.ig.CombinedDataItemType.prototype.line:
			case $.ig.CombinedDataItemType.prototype.ohlc:
			case $.ig.CombinedDataItemType.prototype.rangeArea:
			case $.ig.CombinedDataItemType.prototype.scatterLine:
			case $.ig.CombinedDataItemType.prototype.spline:
			case $.ig.CombinedDataItemType.prototype.splineArea:
			case $.ig.CombinedDataItemType.prototype.stepArea:
			case $.ig.CombinedDataItemType.prototype.stepLine:
				return $.ig.LegendIconShape.prototype.line;
			case $.ig.CombinedDataItemType.prototype.bubble:
			case $.ig.CombinedDataItemType.prototype.funnel:
			case $.ig.CombinedDataItemType.prototype.pie:
			case $.ig.CombinedDataItemType.prototype.point:
			case $.ig.CombinedDataItemType.prototype.scatter:
			case $.ig.CombinedDataItemType.prototype.outlierPoint:
			case $.ig.CombinedDataItemType.prototype.scatterOutlier:
				return $.ig.LegendIconShape.prototype.circle;
			case $.ig.CombinedDataItemType.prototype.candlestick:
			case $.ig.CombinedDataItemType.prototype.column:
			case $.ig.CombinedDataItemType.prototype.rangeColumn:
			case $.ig.CombinedDataItemType.prototype.waterfall:
				return $.ig.LegendIconShape.prototype.square;
		}
		return $.ig.LegendIconShape.prototype.circle;
	}
	/*<EndMethod Name="Infragistics.LegendIconShape Infragistics.ChartsUtility::GetIconShape(Infragistics.CombinedDataItemType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CrosshairsVisibility Infragistics.ChartsUtility::GetSupportedCrosshairsVisibility(Infragistics.CombinedDataItemType)" />*/
	getSupportedCrosshairsVisibility: function (seriesType) {
		switch (seriesType) {
			case $.ig.CombinedDataItemType.prototype.ohlc:
			case $.ig.CombinedDataItemType.prototype.candlestick:
				return $.ig.CrosshairsVisibility.prototype.horizontal;
			case $.ig.CombinedDataItemType.prototype.funnel:
			case $.ig.CombinedDataItemType.prototype.pie:
			case $.ig.CombinedDataItemType.prototype.column:
			case $.ig.CombinedDataItemType.prototype.rangeColumn:
			case $.ig.CombinedDataItemType.prototype.waterfall:
				return $.ig.CrosshairsVisibility.prototype.none;
		}
		return $.ig.CrosshairsVisibility.prototype.both;
	}
	/*<EndMethod Name="Infragistics.CrosshairsVisibility Infragistics.ChartsUtility::GetSupportedCrosshairsVisibility(Infragistics.CombinedDataItemType)" />*/
	,
	$type: new $.ig.Type('ChartsUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ChartsUtility" />*/

/*<BeginType Name="Infragistics.DataInfo" />*/

$.ig.util.defType('DataInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_count: 0,
	_longestLabel: null,
	_labels: null,
	_dates: null,
	_value1: null,
	_value2: null,
	_value3: null,
	_value4: null,
	_value5: null,
	_children: null,
	_depth: 0,
	_hasNans: false,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , System.Boolean)" />*/
	createDataInfo6: function (value1Array, labelArray, nansAsZero) {
		var value2Array = new Array(0);
		var value3Array = new Array(0);
		var value4Array = new Array(0);
		var value5Array = new Array(0);
		var dateArray = new Array(0);
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , System.Boolean)" />*/
	createDataInfo5: function (value1Array, value2Array, labelArray, nansAsZero) {
		var value3Array = new Array(0);
		var value4Array = new Array(0);
		var value5Array = new Array(0);
		var dateArray = new Array(0);
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , System.Boolean)" />*/
	createDataInfo4: function (value1Array, value2Array, value3Array, labelArray, nansAsZero) {
		var value4Array = new Array(0);
		var value5Array = new Array(0);
		var dateArray = new Array(0);
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , System.Boolean)" />*/
	createDataInfo3: function (value1Array, value2Array, value3Array, value4Array, labelArray, nansAsZero) {
		var value5Array = new Array(0);
		var dateArray = new Array(0);
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , System.Boolean)" />*/
	createDataInfo2: function (value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, nansAsZero) {
		var dateArray = new Array(0);
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , , System.Boolean)" />*/
	createDataInfo1: function (value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, nansAsZero) {
		var childrenArray = new Array(0);
		return $.ig.DataInfo.prototype.createDataInfo(value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero);
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , , System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , , , System.Boolean)" />*/
	createDataInfo: function (value1Array, value2Array, value3Array, value4Array, value5Array, labelArray, dateArray, childrenArray, nansAsZero) {
		var info = new $.ig.DataInfo();
		var dataCount = value1Array.length;
		info._count = dataCount;
		if (dataCount != 0) {
			info._value1 = new $.ig.DataValueInfo();
			info._value1._values = value1Array;
			info._value1._min = 1.7976931348623157E+308;
			info._value1._max = -1.7976931348623157E+308;
			info._value1._total = 0;
			var hasLabels = labelArray != null;
			var labelList = new $.ig.Array();
			info._labels = labelList;
			var labelCount = (labelArray == null) ? 0 : labelArray.length;
			var longestLabelLength = 0;
			for (var i = 0; i < dataCount; i++) {
				var val = value1Array[i];
				if (!$.ig.util.isNaN(val)) {
					info._value1._max = Math.max(val, info._value1._max);
					info._value1._min = Math.min(val, info._value1._min);
					info._value1._total += val;
				} else if (nansAsZero) {
					info._value1._values[i] = 0;
				} else {
					info._hasNans = true;
				}
				if (hasLabels) {
					var labelVal = i >= labelCount ? null : labelArray[i];
					if (labelVal != null && !$.ig.NativeJSONUtility.prototype.isJSONNullValue(labelVal)) {
						var label = labelVal;
						labelList.add(label);
						var length = label.length;
						if (length > longestLabelLength) {
							longestLabelLength = length;
							info._longestLabel = label;
						}
					} else {
						labelList.add("");
					}
				} else {
					var label1 = $.ig.NativeUtility.prototype.utility().convertNumberToString(i, 0, false);
					labelList.add(label1);
					info._longestLabel = label1;
				}
			}
		}
		dataCount = value2Array.length;
		if (dataCount != 0) {
			info._value2 = new $.ig.DataValueInfo();
			info._value2._values = value2Array;
			info._value2._min = 1.7976931348623157E+308;
			info._value2._max = -1.7976931348623157E+308;
			info._value2._total = 0;
			for (var i1 = 0; i1 < dataCount; i1++) {
				var val1 = value2Array[i1];
				if (!$.ig.util.isNaN(val1)) {
					info._value2._max = Math.max(val1, info._value2._max);
					info._value2._min = Math.min(val1, info._value2._min);
					info._value2._total += val1;
				} else if (nansAsZero) {
					info._value2._values[i1] = 0;
				} else {
					info._hasNans = true;
				}
			}
		}
		dataCount = value3Array.length;
		if (dataCount != 0) {
			info._value3 = new $.ig.DataValueInfo();
			info._value3._values = value3Array;
			info._value3._min = 1.7976931348623157E+308;
			info._value3._max = -1.7976931348623157E+308;
			info._value3._total = 0;
			for (var i2 = 0; i2 < dataCount; i2++) {
				var val2 = value3Array[i2];
				if (!$.ig.util.isNaN(val2)) {
					info._value3._max = Math.max(val2, info._value3._max);
					info._value3._min = Math.min(val2, info._value3._min);
					info._value3._total += val2;
				} else if (nansAsZero) {
					info._value3._values[i2] = 0;
				} else {
					info._hasNans = true;
				}
			}
		}
		dataCount = value4Array.length;
		if (dataCount != 0) {
			info._value4 = new $.ig.DataValueInfo();
			info._value4._values = value4Array;
			info._value4._min = 1.7976931348623157E+308;
			info._value4._max = -1.7976931348623157E+308;
			info._value4._total = 0;
			for (var i3 = 0; i3 < dataCount; i3++) {
				var val3 = value4Array[i3];
				if (!$.ig.util.isNaN(val3)) {
					info._value4._max = Math.max(val3, info._value4._max);
					info._value4._min = Math.min(val3, info._value4._min);
					info._value4._total += val3;
				} else if (nansAsZero) {
					info._value4._values[i3] = 0;
				} else {
					info._hasNans = true;
				}
			}
		}
		dataCount = value5Array.length;
		if (dataCount != 0) {
			info._value5 = new $.ig.DataValueInfo();
			info._value5._values = value5Array;
			info._value5._min = 1.7976931348623157E+308;
			info._value5._max = -1.7976931348623157E+308;
			info._value5._total = 0;
			for (var i4 = 0; i4 < dataCount; i4++) {
				var val4 = value5Array[i4];
				if (!$.ig.util.isNaN(val4)) {
					info._value5._max = Math.max(val4, info._value5._max);
					info._value5._min = Math.min(val4, info._value5._min);
					info._value5._total += val4;
				} else if (nansAsZero) {
					info._value5._values[i4] = 0;
				} else {
					info._hasNans = true;
				}
			}
		}
		dataCount = dateArray.length;
		if (dataCount != 0) {
			info._dates = new $.ig.DateValueInfo();
			info._dates._values = dateArray;
			info._dates._min = 0x7FFFFFFFFFFFFFFF;
			info._dates._max = -9.2233720368547758E+18;
			for (var i5 = 0; i5 < dataCount; i5++) {
				var val5 = dateArray[i5];
				if (!$.ig.util.isNaN(val5)) {
					info._dates._max = Math.max(val5, info._dates._max);
					info._dates._min = Math.min(val5, info._dates._min);
				} else if (nansAsZero) {
					info._dates._values[i5] = 0;
				} else {
					info._hasNans = true;
				}
			}
		}
		return info;
	}
	/*<EndMethod Name="Infragistics.DataInfo Infragistics.DataInfo::CreateDataInfo(, , , , , , , , System.Boolean)" />*/
	,
	$type: new $.ig.Type('DataInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.DataInfo" />*/

/*<BeginType Name="Infragistics.DataValueInfo" />*/

$.ig.util.defType('DataValueInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_total: 0,
	_max: 0,
	_min: 0,
	_values: null,
	$type: new $.ig.Type('DataValueInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.DataValueInfo" />*/

/*<BeginType Name="Infragistics.DateValueInfo" />*/

$.ig.util.defType('DateValueInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_min: 0,
	_max: 0,
	_values: null,
	$type: new $.ig.Type('DateValueInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.DateValueInfo" />*/

/*<BeginType Name="Infragistics.SliceChartBase" />*/

$.ig.util.defType('SliceChartBase', 'AnimatedSnapshotView', {
	init: function () {
		$.ig.AnimatedSnapshotView.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::IncludeZeroValuesInLegend()" />*/
	includeZeroValuesInLegend: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._includeZeroValuesInLegend = value;
			return value;
		} else {
			return (this.__lastSnapshot)._includeZeroValuesInLegend;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::IncludeZeroValuesInLegend()" />*/
	,
	/*<BeginProperty Name="Infragistics.LegendLocation Infragistics.SliceChartBase::LegendLocation()" />*/
	legendLocation: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendLocation = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendLocation;
		}
	}
	/*<EndProperty Name="Infragistics.LegendLocation Infragistics.SliceChartBase::LegendLocation()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SliceChartBase::LegendFontSize()" />*/
	legendFontSize: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendFontSize = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SliceChartBase::LegendFontSize()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SliceChartBase::OutlineStrokeWidth()" />*/
	outlineStrokeWidth: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._outlineStrokeWidth = value;
			return value;
		} else {
			return (this.__lastSnapshot)._outlineStrokeWidth;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SliceChartBase::OutlineStrokeWidth()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::SelectedSliceOutlineColor()" />*/
	selectedSliceOutlineColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._selectedSliceOutlineColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._selectedSliceOutlineColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::SelectedSliceOutlineColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::SelectedSliceFillColor()" />*/
	selectedSliceFillColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._selectedSliceColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._selectedSliceColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::SelectedSliceFillColor()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SliceChartBase::SelectedSliceOutlineWidth()" />*/
	selectedSliceOutlineWidth: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._selectedSliceOutlineStrokeWidth = value;
			return value;
		} else {
			return (this.__lastSnapshot)._selectedSliceOutlineStrokeWidth;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SliceChartBase::SelectedSliceOutlineWidth()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::OthersSliceText()" />*/
	othersSliceText: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceText = value;
			return value;
		} else {
			return (this.__lastSnapshot)._othersSliceText;
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::OthersSliceText()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::OthersSliceColor()" />*/
	othersSliceColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceFillColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._othersSliceFillColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::OthersSliceColor()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.SliceChartBase::OthersSliceIndex()" />*/
	othersSliceIndex: function () {
		return $.ig.SliceChartSnapshot.prototype.othersSliceIndex;
	}
	/*<EndProperty Name="System.Int32 Infragistics.SliceChartBase::OthersSliceIndex()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::OthersSliceOutlineColor()" />*/
	othersSliceOutlineColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceOutlineColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._othersSliceOutlineColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::OthersSliceOutlineColor()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SliceChartBase::OthersSliceOutlineStrokeWidth()" />*/
	othersSliceOutlineStrokeWidth: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceOutlineStrokeWidth = value;
			return value;
		} else {
			return (this.__lastSnapshot)._othersSliceOutlineStrokeWidth;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SliceChartBase::OthersSliceOutlineStrokeWidth()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.SliceChartBase::OthersSliceThreshold()" />*/
	othersSliceThreshold: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceThreshold = value;
			return value;
		} else {
			return (this.__lastSnapshot)._othersSliceThreshold;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.SliceChartBase::OthersSliceThreshold()" />*/
	,
	/*<BeginProperty Name="Infragistics.OthersThresholdType Infragistics.SliceChartBase::OthersSliceThresholdType()" />*/
	othersSliceThresholdType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._othersSliceThresholdType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._othersSliceThresholdType;
		}
	}
	/*<EndProperty Name="Infragistics.OthersThresholdType Infragistics.SliceChartBase::OthersSliceThresholdType()" />*/
	,
	/*<BeginProperty Name="Infragistics.SliceLabelType Infragistics.SliceChartBase::LabelType()" />*/
	labelType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._labelType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._labelType;
		}
	}
	/*<EndProperty Name="Infragistics.SliceLabelType Infragistics.SliceChartBase::LabelType()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.SliceChartBase::ValueFormatType()" />*/
	valueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.SliceChartBase::ValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.SliceChartBase::ValueFormatFractionDigits()" />*/
	valueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.SliceChartBase::ValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.SliceChartBase::ValueFormatNegativeMode()" />*/
	valueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.SliceChartBase::ValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::ValueFormatUseMKFormatting()" />*/
	valueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::ValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::ValueFormatShowGroupingSeparator()" />*/
	valueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormattingShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormattingShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::ValueFormatShowGroupingSeparator()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.SliceChartBase::ValueFormatCurrencySymbol()" />*/
	valueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.SliceChartBase::ValueFormatCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::ApplyColorsToNonVisibleSlices()" />*/
	applyColorsToNonVisibleSlices: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._applyColorsToNonVisibleSlices = value;
			return value;
		} else {
			return (this.__lastSnapshot)._applyColorsToNonVisibleSlices;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::ApplyColorsToNonVisibleSlices()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.SliceChartBase::HighlightIndex()" />*/
	highlightIndex: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._highlightFadeInDataIndex = value;
			return value;
		} else {
			return (this.__lastSnapshot)._highlightFadeInDataIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.SliceChartBase::HighlightIndex()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::DisplayTooltips()" />*/
	displayTooltips: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._displayTooltips = value;
			return value;
		} else {
			return (this.__lastSnapshot)._displayTooltips;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::DisplayTooltips()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.SliceChartBase::UsingClickAdorners()" />*/
	usingClickAdorners: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._usingClickAdorners = value;
			return value;
		} else {
			return (this.__lastSnapshot)._usingClickAdorners;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.SliceChartBase::UsingClickAdorners()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::Setup()" />*/
	setup: function () {
		$.ig.AnimatedSnapshotView.prototype.setup.call(this);
		this.setZoomType($.ig.ZoomType.prototype.none);
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::SetColors(Infragistics.CPReadOnlyList)" />*/
	setColors: function (colors) {
		var snapshot = this.__lastSnapshot;
		snapshot._fillColors = new Array(colors.length);
		for (var i = 0; i < colors.length; i++) {
			var color = colors[i];
			snapshot._fillColors[i] = $.ig.ColorUtility.prototype.convertToInt(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::SetColors(Infragistics.CPReadOnlyList)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SliceChartBase::GetVisibleSliceCount()" />*/
	getVisibleSliceCount: function () {
		var snapshot = this.__lastSnapshot;
		return snapshot._visibleSliceCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SliceChartBase::GetVisibleSliceCount()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SliceChartBase::IsSliceSelected(System.Int32)" />*/
	isSliceSelected: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex && snapshot._othersSlice == null) {
			return false;
		}
		var slice = index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex ? snapshot._othersSlice : snapshot._slices[index];
		return slice._isSelected;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SliceChartBase::IsSliceSelected(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::SelectSliceAt(System.Int32)" />*/
	selectSliceAt: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex && snapshot._othersSlice == null) {
			return;
		}
		var slice = index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex ? snapshot._othersSlice : snapshot._slices[index];
		if (slice._isSelected) {
			var selectedIndex = $.ig.ArrayUtility.prototype.arrayContains1(index, snapshot._selectedSlices);
			if (selectedIndex != -1) {
				snapshot._selectedSlices = $.ig.ArrayUtility.prototype.removeAtIndex(selectedIndex, snapshot._selectedSlices);
			}
		} else {
			var selectedIndex1 = $.ig.ArrayUtility.prototype.arrayContains1(index, snapshot._selectedSlices);
			if (selectedIndex1 == -1) {
				snapshot._selectedSlices = $.ig.ArrayUtility.prototype.addToArray1(index, snapshot._selectedSlices);
			}
		}
		slice._isSelected = !slice._isSelected;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::SelectSliceAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::ClearSelectedSlices()" />*/
	clearSelectedSlices: function () {
		var snapshot = this.__lastSnapshot;
		snapshot._selectedSlices = new Array(0);
		for (var index = 0; index < snapshot._slices.length; index++) {
			var slice = snapshot._slices[index];
			slice._isSelected = false;
		}
		if (snapshot._othersSlice != null) {
			snapshot._othersSlice._isSelected = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::ClearSelectedSlices()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SliceChartBase::IsSliceExploded(System.Int32)" />*/
	isSliceExploded: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex && snapshot._othersSlice == null) {
			return false;
		}
		var slice = index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex ? snapshot._othersSlice : snapshot._slices[index];
		return slice._isExploded;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SliceChartBase::IsSliceExploded(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::ExplodeSliceAt(System.Int32)" />*/
	explodeSliceAt: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex && snapshot._othersSlice == null) {
			return;
		}
		var slice = index == $.ig.SliceChartSnapshot.prototype.othersSliceIndex ? snapshot._othersSlice : snapshot._slices[index];
		if (slice._isExploded) {
			var explodedIndex = $.ig.ArrayUtility.prototype.arrayContains1(index, snapshot._explodedSlices);
			if (explodedIndex != -1) {
				snapshot._explodedSlices = $.ig.ArrayUtility.prototype.removeAtIndex(explodedIndex, snapshot._explodedSlices);
			}
		} else {
			var explodedIndex1 = $.ig.ArrayUtility.prototype.arrayContains1(index, snapshot._explodedSlices);
			if (explodedIndex1 == -1) {
				snapshot._explodedSlices = $.ig.ArrayUtility.prototype.addToArray1(index, snapshot._explodedSlices);
			}
		}
		slice._isExploded = !slice._isExploded;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::ExplodeSliceAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::ClearExplodedSlices()" />*/
	clearExplodedSlices: function () {
		var snapshot = this.__lastSnapshot;
		snapshot._explodedSlices = new Array(0);
		for (var index = 0; index < snapshot._slices.length; index++) {
			var slice = snapshot._slices[index];
			slice._isExploded = false;
		}
		if (snapshot._othersSlice != null) {
			snapshot._othersSlice._isExploded = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::ClearExplodedSlices()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::SetData(Infragistics.CPReadOnlyList, System.String, System.String)" />*/
	setData: function (data, numberProperty, labelProperty) {
		var snapshot = this.__lastSnapshot;
		var info = $.ig.NativeUtility.prototype.utility().setData(data, numberProperty, null, null, null, null, labelProperty, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		if (data != null && data.length > 0) {
			snapshot._values = info._value1._values;
			snapshot._labels = info._labels;
		} else {
			snapshot._values = new Array(0);
			snapshot._labels = new $.ig.Array();
		}
		snapshot._longestLabel = info._longestLabel;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::SetData(Infragistics.CPReadOnlyList, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::SetRawData(, )" />*/
	setRawData: function (data, labels) {
		var snapshot = this.__lastSnapshot;
		if (labels != null && labels.length == 0) {
			labels = null;
		}
		var info = $.ig.DataInfo.prototype.createDataInfo6(data, labels, this.__lastSnapshot._treatNullValuesAsZeroes);
		snapshot._values = info._value1._values;
		snapshot._labels = info._labels;
		snapshot._longestLabel = info._longestLabel;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::SetRawData(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::ClearData()" />*/
	clearData: function () {
		var snapshot = this.__lastSnapshot;
		this.clearExplodedSlices();
		this.clearSelectedSlices();
		snapshot._values = new Array(0);
		snapshot._visibleSliceCount = 0;
		snapshot._visibleSlices = new Array(0);
		snapshot._othersSlices = new Array(0);
		snapshot._slices = new $.ig.Array();
		snapshot._othersSlice = new $.ig.SliceBase();
		snapshot._labels = new $.ig.Array();
		snapshot._formattedLongestLabel = "";
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::ClearData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.AnimatedSnapshotView.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		var fCount = from._values.length;
		var tCount = to._values.length;
		if (fCount != tCount) {
			var tempValues = new Array(tCount);
			var tempLabels = new $.ig.Array();
			for (var i = 0; i < tCount; i++) {
				tempValues[i] = (i < fCount) ? from._values[i] : to._values[i];
				tempLabels.add((i < fCount) ? from._labels[i] : to._labels[i]);
				if (i >= fCount) {
					var fromSlice = from.createSlice();
					var toSlice = to._slices[i];
					toSlice.copyTo(fromSlice);
					from._slices.add(fromSlice);
					this.initializeSliceTransition(fromSlice, toSlice);
				}
			}
			from._values = tempValues;
			from._labels = tempLabels;
		}
		if (from._othersSlice == null && to._othersSlice != null) {
			from._othersSlice = from.createSlice();
			to._othersSlice.copyTo(from._othersSlice);
			this.initializeSliceTransition(from._othersSlice, to._othersSlice);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::InitializeSliceTransition(Infragistics.SliceBase, Infragistics.SliceBase)" />*/
	initializeSliceTransition: function (fromSlice, toSlice) {
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::InitializeSliceTransition(Infragistics.SliceBase, Infragistics.SliceBase)" />*/
	,
	__updateAdornments: null,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::AddUpdateAdornmentsHandler(Infragistics.PointBoolExecutionBlock)" />*/
	addUpdateAdornmentsHandler: function (action) {
		this.__updateAdornments = action;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::AddUpdateAdornmentsHandler(Infragistics.PointBoolExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::UpdateAdornments(System.Int32, System.Int32, System.Boolean)" />*/
	updateAdornments: function (x, y, isTouch) {
		if (this.__updateAdornments != null) {
			this.__updateAdornments(x, y, isTouch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::UpdateAdornments(System.Int32, System.Int32, System.Boolean)" />*/
	,
	__updateAdornmentsOnTouchUp: null,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::AddUpdateAdornmentsOnTouchUpHandler(Infragistics.PointExecutionBlock)" />*/
	addUpdateAdornmentsOnTouchUpHandler: function (action) {
		this.__updateAdornmentsOnTouchUp = action;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::AddUpdateAdornmentsOnTouchUpHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::UpdateAdornmentsOnTouchUp(System.Int32, System.Int32)" />*/
	updateAdornmentsOnTouchUp: function (x, y) {
		if (this.__updateAdornmentsOnTouchUp != null) {
			this.__updateAdornmentsOnTouchUp(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::UpdateAdornmentsOnTouchUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	attachCanvas: function (canvas) {
		var $self = this;
		canvas.addPointerActionHandler(function (x, y, isTouch) {
			$self.updateAdornments(x, y, isTouch);
		});
		canvas.addTouchUpActionHandler(function (x, y) {
			$self.updateAdornmentsOnTouchUp(x, y);
		});
		$.ig.AnimatedSnapshotView.prototype.attachCanvas.call(this, canvas);
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::AttachCanvas(Infragistics.ChartCanvasView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::InvalidateAdornments(System.Int32)" />*/
	invalidateAdornments: function (dataIndex) {
		var snapshot = this.__lastSnapshot;
		if (dataIndex != -1) {
			snapshot._highlightFadeInDataIndex = dataIndex;
			snapshot._nonHighlightedAlpha = this.minimumFadeAlphaResolved();
			snapshot._highlightFadeInAlpha = 255;
			snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
		} else {
			snapshot._nonHighlightedAlpha = 255;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::InvalidateAdornments(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::SetupAdornmentAnimation(System.Int32)" />*/
	setupAdornmentAnimation: function (newDataIndex) {
		var snapshot = this.__lastSnapshot;
		if (snapshot._highlightFadeInDataIndex != newDataIndex) {
			if (newDataIndex == -1) {
				snapshot._highlightFadeOutDataIndex = -1;
				snapshot._highlightFadeOutAlpha = 255;
			} else if (snapshot._highlightFadeOutDataIndex == newDataIndex) {
				var tempAlpha = snapshot._highlightFadeOutAlpha;
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = tempAlpha;
				snapshot._highlightFadeInDataIndex = newDataIndex;
			} else if (snapshot._highlightFadeInDataIndex == -1) {
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = snapshot._nonHighlightedAlpha;
				snapshot._highlightFadeInDataIndex = newDataIndex;
			} else {
				snapshot._highlightFadeOutDataIndex = snapshot._highlightFadeInDataIndex;
				snapshot._highlightFadeOutAlpha = snapshot._highlightFadeInAlpha;
				snapshot._highlightFadeInAlpha = this.minimumFadeAlphaResolved();
				snapshot._highlightFadeInDataIndex = newDataIndex;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::SetupAdornmentAnimation(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartBase::EndHighlightAnimation(System.Boolean)" />*/
	endHighlightAnimation: function (reset) {
		var snapshot = this.__lastSnapshot;
		if (reset) {
			snapshot._highlightFadeInDataIndex = -1;
			snapshot._highlightFadeOutDataIndex = -1;
			snapshot._highlightFadeInAlpha = 255;
			snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
			snapshot._nonHighlightedAlpha = 255;
		} else {
			snapshot._highlightFadeOutDataIndex = -1;
			snapshot._highlightFadeOutAlpha = snapshot._highlightFadeOutAlpha = this.minimumFadeAlphaResolved();
			;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartBase::EndHighlightAnimation(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.SliceChartBase::GetCenterOfSliceAtIndex(System.Int32)" />*/
	getCenterOfSliceAtIndex: function (index) {
		return new $.ig.CPPoint(-1, -1);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.SliceChartBase::GetCenterOfSliceAtIndex(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.SliceChartBase::MinimumFadeAlphaResolved()" />*/
	minimumFadeAlphaResolved: function () {
		if (this.usingClickAdorners()) {
			return $.ig.SnapshotBase.prototype.cLICK_FADED_ALPHA;
		}
		return $.ig.SnapshotBase.prototype.hOVER_FADED_ALPHA;
	}
	/*<EndProperty Name="System.Int32 Infragistics.SliceChartBase::MinimumFadeAlphaResolved()" />*/
	,
	$type: new $.ig.Type('SliceChartBase', $.ig.AnimatedSnapshotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SliceChartBase" />*/

/*<BeginType Name="Infragistics.FunnelChart" />*/

$.ig.util.defType('FunnelChart', 'SliceChartBase', {
	init: function () {
		$.ig.SliceChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.FunnelChartLabelLocation Infragistics.FunnelChart::LabelLocation()" />*/
	labelLocation: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._labelLocation = value;
			return value;
		} else {
			return (this.__lastSnapshot)._labelLocation;
		}
	}
	/*<EndProperty Name="Infragistics.FunnelChartLabelLocation Infragistics.FunnelChart::LabelLocation()" />*/
	,
	/*<BeginProperty Name="Infragistics.FunnelChartDisplayMode Infragistics.FunnelChart::DisplayMode()" />*/
	displayMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._displayMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._displayMode;
		}
	}
	/*<EndProperty Name="Infragistics.FunnelChartDisplayMode Infragistics.FunnelChart::DisplayMode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChart::Setup()" />*/
	setup: function () {
		$.ig.SliceChartBase.prototype.setup.call(this);
		this._canvas._layers.add(new $.ig.FunnelChartLayer());
		this._canvas._layers.add(new $.ig.FunnelChartLabelLayer());
		this._canvas._layers.add(new $.ig.SliceLegendLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChart::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.FunnelChart::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.FunnelChartSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.FunnelChart::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChart::SetData(Infragistics.CPReadOnlyList, System.String, System.String)" />*/
	setData: function (data, numberProperty, labelProperty) {
		var snapshot = this.__lastSnapshot;
		var info = $.ig.NativeUtility.prototype.utility().setData(data, numberProperty, null, null, null, null, labelProperty, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		snapshot._values = info._value1._values;
		snapshot._labels = info._labels;
		snapshot._longestLabel = info._longestLabel;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChart::SetData(Infragistics.CPReadOnlyList, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChart::ClearData()" />*/
	clearData: function () {
		$.ig.SliceChartBase.prototype.clearData.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._centerX = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChart::ClearData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.SliceChartBase.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		from._visibleSlices = $.ig.ArrayUtility.prototype.copyIntArray(to._visibleSlices);
		from._visibleSliceCount = to._visibleSliceCount;
		for (var i = 0; i < from._visibleSlices.length; i++) {
			var fromSlice = from._slices[from._visibleSlices[i]];
			var toSlice = to._slices[to._visibleSlices[i]];
			fromSlice._visibleIndex = toSlice._visibleIndex;
		}
		if (to._othersSlice != null) {
			(from._othersSlice)._visibleIndex = (to._othersSlice)._visibleIndex;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChart::InitializeSliceTransition(Infragistics.SliceBase, Infragistics.SliceBase)" />*/
	initializeSliceTransition: function (fromSlice, toSlice) {
		$.ig.SliceChartBase.prototype.initializeSliceTransition.call(this, fromSlice, toSlice);
		(fromSlice)._topWidth = 0;
		(fromSlice)._bottomWidth = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChart::InitializeSliceTransition(Infragistics.SliceBase, Infragistics.SliceBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.FunnelChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		for (var i = 0; i < snapshot._visibleSliceCount; i++) {
			var slice = snapshot.resolveVisibleSliceAtIndex(i);
			if (slice.containsPoint(snapshot, x, y)) {
				var item = new $.ig.TooltipItem();
				item._color = slice._fillColor;
				item._index = slice._index;
				item._value = slice._value;
				item._valueLabel = slice._label;
				item._valueFormatted = $.ig.ChartsUtility.prototype.labelForValue(slice._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
				item._legendText = snapshot.getLabelForLegend(0, i);
				item._seriesKey = "";
				item._seriesType = $.ig.CombinedDataItemType.prototype.funnel;
				item._percentage = slice._percentageFormatted;
				items.add(item);
			}
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.FunnelChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.FunnelChart::GetCenterOfSliceAtIndex(System.Int32)" />*/
	getCenterOfSliceAtIndex: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == -2 && snapshot._othersSlice != null) {
			var slice = snapshot._othersSlice;
			return new $.ig.CPPoint(slice._xTopLeft + slice._topWidth / 2, slice._yTop + slice._height / 2);
		}
		for (var i = 0; i < snapshot._slices.length; i++) {
			var slice1 = snapshot._slices[i];
			if (index == slice1._index) {
				return new $.ig.CPPoint(slice1._xTopLeft + slice1._topWidth / 2, slice1._yTop + slice1._height / 2);
			}
		}
		return new $.ig.CPPoint(0, 0);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.FunnelChart::GetCenterOfSliceAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.FunnelChart::GetSliceBounds(System.Int32)" />*/
	getSliceBounds: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == -2 && snapshot._othersSlice != null) {
			var slice = snapshot._othersSlice;
			return new $.ig.CPRect(1, slice._xTopLeft, slice._yTop, slice._topWidth, slice._height);
		}
		for (var i = 0; i < snapshot._slices.length; i++) {
			var slice1 = snapshot._slices[i];
			if (index == slice1._index) {
				return new $.ig.CPRect(1, slice1._xTopLeft, slice1._yTop, slice1._topWidth, slice1._height);
			}
		}
		return new $.ig.CPRect(1, 0, 0, 0, 0);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.FunnelChart::GetSliceBounds(System.Int32)" />*/
	,
	$type: new $.ig.Type('FunnelChart', $.ig.SliceChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChart" />*/

/*<BeginType Name="Infragistics.SliceBase" />*/

$.ig.util.defType('SliceBase', 'Object', {
	_value: 0,
	_label: null,
	_legend: null,
	_labelPositionX: 0,
	_labelPositionY: 0,
	_labelSize: null,
	_index: 0,
	_fillColor: null,
	_strokeColor: null,
	_strokeWidth: 0,
	_percentage: 0,
	_percentageFormatted: null,
	_isValid: false,
	_isVisible: false,
	_isSelected: false,
	_isOthersSlice: false,
	_isExploded: false,
	_isLabelVisible: false,
	init: function () {
		this._labelSize = new $.ig.CPSize();
		this._fillColor = new $.ig.Number();
		this._strokeColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._isValid = false;
		this._isVisible = false;
		this._isSelected = false;
		this._isLabelVisible = false;
		this._isOthersSlice = false;
		this._isExploded = false;
		this._labelPositionX = 0;
		this._labelPositionY = 0;
		this._labelSize = new $.ig.CPSize(1, 0, 0);
	},
	/*<BeginMethod Name="System.Void Infragistics.SliceBase::CopyTo(Infragistics.SliceBase)" />*/
	copyTo: function (next) {
		next._value = this._value;
		next._label = this._label;
		next._legend = this._legend;
		next._labelSize = this._labelSize;
		next._labelPositionX = this._labelPositionX;
		next._labelPositionY = this._labelPositionY;
		next._index = this._index;
		next._fillColor = this._fillColor;
		next._strokeColor = this._strokeColor;
		next._strokeWidth = this._strokeWidth;
		next._percentage = this._percentage;
		next._percentageFormatted = this._percentageFormatted;
		next._isValid = this._isValid;
		next._isVisible = this._isVisible;
		next._isSelected = this._isSelected;
		next._isLabelVisible = this._isLabelVisible;
		next._isOthersSlice = this._isOthersSlice;
		next._isExploded = this._isExploded;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceBase::CopyTo(Infragistics.SliceBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceBase::Transition(Infragistics.SliceBase, System.Double)" />*/
	transition: function (next, percent) {
		next._value = $.ig.CPMathUtility.prototype.transitionDouble(this._value, next._value, percent);
		next._fillColor = $.ig.ColorUtility.prototype.transitionColor(this._fillColor, next._fillColor, percent);
		next._strokeColor = $.ig.ColorUtility.prototype.transitionColor(this._strokeColor, next._strokeColor, percent);
		next._strokeWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._strokeWidth, next._strokeWidth, percent);
		next._percentage = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._percentage, next._percentage, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.SliceBase::Transition(Infragistics.SliceBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SliceBase::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	containsPoint: function (snapshot, x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SliceBase::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('SliceBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SliceBase" />*/

/*<BeginType Name="Infragistics.FunnelChartSlice" />*/

$.ig.util.defType('FunnelChartSlice', 'SliceBase', {
	_height: 0,
	_topWidth: 0,
	_bottomWidth: 0,
	_xTopLeft: 0,
	_xBottomLeft: 0,
	_yTop: 0,
	_visibleIndex: 0,
	init: function () {
		$.ig.SliceBase.prototype.init.call(this);
		this._height = this._topWidth = this._bottomWidth = 0;
		this._visibleIndex = -1;
	},
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSlice::CopyTo(Infragistics.SliceBase)" />*/
	copyTo: function (next) {
		$.ig.SliceBase.prototype.copyTo.call(this, next);
		var nextSlice = next;
		nextSlice._height = this._height;
		nextSlice._topWidth = this._topWidth;
		nextSlice._bottomWidth = this._bottomWidth;
		nextSlice._visibleIndex = this._visibleIndex;
		nextSlice._xTopLeft = this._xTopLeft;
		nextSlice._xBottomLeft = this._xBottomLeft;
		nextSlice._yTop = this._yTop;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSlice::CopyTo(Infragistics.SliceBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSlice::Transition(Infragistics.SliceBase, System.Double)" />*/
	transition: function (next, percent) {
		$.ig.SliceBase.prototype.transition.call(this, next, percent);
		var nextSlice = next;
		nextSlice._topWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._topWidth, nextSlice._topWidth, percent);
		nextSlice._bottomWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._bottomWidth, nextSlice._bottomWidth, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSlice::Transition(Infragistics.SliceBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FunnelChartSlice::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	containsPoint: function (snapshot, x, y) {
		if (this._value == 0) {
			return false;
		}
		var xBottomRight = this._xBottomLeft + this._bottomWidth;
		var xTopRight = this._xTopLeft + this._topWidth;
		var yBottom = this._yTop + this._height;
		var quadArea = $.ig.ChartsUtility.prototype.areaOfQuadrilateral(this._xTopLeft, this._yTop, xTopRight, this._yTop, xBottomRight, yBottom, this._xBottomLeft, yBottom);
		var triangle1 = $.ig.ChartsUtility.prototype.areaOfTriangle(this._xTopLeft, this._yTop, xTopRight, this._yTop, x, y);
		var triangle2 = $.ig.ChartsUtility.prototype.areaOfTriangle(xTopRight, this._yTop, xBottomRight, yBottom, x, y);
		var triangle3 = $.ig.ChartsUtility.prototype.areaOfTriangle(xBottomRight, yBottom, this._xBottomLeft, yBottom, x, y);
		var triangle4 = $.ig.ChartsUtility.prototype.areaOfTriangle(this._xBottomLeft, yBottom, this._xTopLeft, this._yTop, x, y);
		if ($.ig.truncate((triangle1 + triangle2 + triangle3 + triangle4)) == $.ig.truncate(quadArea)) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FunnelChartSlice::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('FunnelChartSlice', $.ig.SliceBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartSlice" />*/

/*<BeginType Name="Infragistics.SliceChartSnapshot" />*/

$.ig.util.defType('SliceChartSnapshot', 'LegendSnapshotBase', {
	_values: null,
	_valueTotal: 0,
	_labels: null,
	_slices: null,
	_visibleSlices: null,
	_selectedSlices: null,
	_explodedSlices: null,
	_explosionAnimationDuration: 0,
	_visibleSliceCount: 0,
	_othersSliceText: null,
	_othersSliceFillColor: null,
	_othersSliceOutlineColor: null,
	_othersSliceOutlineStrokeWidth: 0,
	_othersSliceThreshold: 0,
	_othersSliceThresholdType: 0,
	_othersTotal: 0,
	_othersSlice: null,
	_othersSlices: null,
	_includeZeroValuesInLegend: false,
	_longestLabel: null,
	_formattedLongestLabel: null,
	_longestLabelSize: null,
	_fillColors: null,
	_outlineColors: null,
	_outlineStrokeWidth: 0,
	_selectedSliceOutlineColor: null,
	_selectedSliceColor: null,
	_selectedSliceOutlineStrokeWidth: 0,
	_fontSizeToUse: 0,
	_labelType: 0,
	_legendPositions: null,
	_valueFormatType: 0,
	_valueFormatFractionDigits: 0,
	_valueFormatNegativeMode: 0,
	_valueFormatUseMKFormatting: false,
	_valueFormattingShowGroupingSeparator: false,
	_valueFormatCurrencySymbol: null,
	_applyColorsToNonVisibleSlices: false,
	init: function (setDefaults) {
		this._othersSliceFillColor = new $.ig.Number();
		this._othersSliceOutlineColor = new $.ig.Number();
		this._longestLabelSize = new $.ig.CPSize();
		this._selectedSliceOutlineColor = new $.ig.Number();
		this._selectedSliceColor = new $.ig.Number();
		$.ig.LegendSnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._slices = new $.ig.Array();
			this._values = new Array(0);
			this._labels = new $.ig.Array();
			this._includeZeroValuesInLegend = false;
			this._applyColorsToNonVisibleSlices = true;
			this._visibleSlices = new Array(0);
			this._selectedSlices = new Array(0);
			this._explodedSlices = new Array(0);
			this._othersSlices = new Array(0);
			this._explosionAnimationDuration = 0.25;
			this._selectedSliceOutlineColor = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._selectedSliceColor = $.ig.ColorUtility.prototype.createColor1(255, 200, 100, 200);
			this._fillColors = new Array(5);
			this._outlineColors = new Array(1);
			this._fillColors[0] = $.ig.ColorUtility.prototype.createColor1(255, 10, 130, 150);
			this._fillColors[1] = $.ig.ColorUtility.prototype.createColor1(255, 100, 60, 160);
			this._fillColors[2] = $.ig.ColorUtility.prototype.createColor1(255, 250, 200, 50);
			this._fillColors[3] = $.ig.ColorUtility.prototype.createColor1(255, 130, 230, 150);
			this._fillColors[4] = $.ig.ColorUtility.prototype.createColor1(255, 90, 50, 220);
			this._outlineColors[0] = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._othersSliceText = "Others";
			this._othersSliceThreshold = 3;
			this._othersSliceThresholdType = $.ig.OthersThresholdType.prototype.percent;
			this._labelType = $.ig.SliceLabelType.prototype.labelAndPercentage;
			this._valueFormatFractionDigits = 2;
			this._valueFormatNegativeMode = $.ig.FormatSettingsNegativeNumberMode.prototype.parens;
			this._valueFormatUseMKFormatting = true;
			this._valueFormatType = $.ig.FormatSettingsNumberType.prototype.number;
			this._valueFormattingShowGroupingSeparator = true;
			this._valueFormatCurrencySymbol = "$";
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateTotal()" />*/
	calculateTotal: function () {
		this._valueTotal = 0;
		this._visibleSliceCount = 0;
		var numValues = this._values.length;
		for (var i = 0; i < numValues; i++) {
			var value = this._values[i];
			if (value > 0) {
				this._valueTotal += value;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateTotal()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		this._canvasFrameX = this._legendLeftOffset;
		this._canvasFrameY = this._legendTopOffset;
		this._canvasFrameWidth = this._width - this._legendLeftOffset;
		this._canvasFrameHeight = this._height - this._legendTopOffset;
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SliceChartSnapshot::IsValid()" />*/
	isValid: function () {
		return this._visibleSliceCount > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SliceChartSnapshot::IsValid()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.SliceChartSnapshot::GetAdornmentBounds()" />*/
	getAdornmentBounds: function () {
		return new $.ig.CPRect(1, 0, 0, this._width, this._height);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.SliceChartSnapshot::GetAdornmentBounds()" />*/
	,
	/*<BeginMethod Name="Infragistics.SliceBase Infragistics.SliceChartSnapshot::CreateSlice()" />*/
	createSlice: function () {
	}
	/*<EndMethod Name="Infragistics.SliceBase Infragistics.SliceChartSnapshot::CreateSlice()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateSlices()" />*/
	calculateSlices: function () {
		this._slices.clear();
		var numSlices = this._values.length;
		var numVisibleSlices = 0;
		var numOthersSlices = 0;
		this._othersTotal = 0;
		this._othersSlice = null;
		this._formattedLongestLabel = this._othersSliceText;
		var tempOthersSlice = null;
		for (var i = 0; i < numSlices; i++) {
			var value = this._values[i];
			var slice = this.createSlice();
			slice._value = value;
			slice._label = slice._legend = this._labels[i];
			slice._index = i;
			slice._strokeWidth = this._outlineStrokeWidth;
			slice._isValid = value > 0 || (this._includeZeroValuesInLegend && value == 0);
			slice._isSelected = $.ig.ArrayUtility.prototype.arrayContains1(i, this._selectedSlices) != -1;
			slice._isExploded = $.ig.ArrayUtility.prototype.arrayContains1(i, this._explodedSlices) != -1;
			if (this._applyColorsToNonVisibleSlices) {
				slice._fillColor = this._fillColors[i % this._fillColors.length];
				slice._strokeColor = this._outlineColors[i % this._outlineColors.length];
			}
			this._slices.add(slice);
			if (slice._isValid) {
				slice._percentage = value / this._valueTotal * 100;
				var remainder = Math.abs(slice._percentage % 1);
				var hasDecimal = remainder <= 0.049 || remainder >= 0.95 ? false : true;
				slice._percentageFormatted = $.ig.NativeUtility.prototype.utility().convertNumberToString(slice._percentage, hasDecimal ? 1 : 0, false) + "%";
				if (value != 0 && ((this._othersSliceThresholdType == $.ig.OthersThresholdType.prototype.value && value < this._othersSliceThreshold) || (this._othersSliceThresholdType == $.ig.OthersThresholdType.prototype.percent && slice._percentage < this._othersSliceThreshold))) {
					numOthersSlices++;
					slice._isOthersSlice = true;
					tempOthersSlice = slice;
					this._othersTotal += value;
				} else {
					numVisibleSlices++;
					slice._isVisible = true;
				}
			}
		}
		if (numOthersSlices == 1) {
			numOthersSlices = 0;
			numVisibleSlices++;
			tempOthersSlice._isOthersSlice = false;
			tempOthersSlice._isVisible = true;
			this._othersTotal = 0;
		}
		this._visibleSlices = new Array(numVisibleSlices);
		this._othersSlices = new Array(numOthersSlices);
		var othersSliceCounter = 0;
		var visibleSliceCounter = 0;
		for (var i1 = 0; i1 < numSlices; i1++) {
			var slice1 = this._slices[i1];
			if (slice1._isOthersSlice) {
				this._othersSlices[othersSliceCounter] = i1;
				othersSliceCounter++;
			}
			if (slice1._isVisible) {
				this._visibleSlices[visibleSliceCounter] = i1;
				var percentAppend = " (" + slice1._percentageFormatted;
				percentAppend = percentAppend + ")";
				var valueLabel = $.ig.ChartsUtility.prototype.labelForValue(slice1._value, this._valueFormatUseMKFormatting, this._valueFormatNegativeMode, this._valueFormatType, this._valueFormatFractionDigits, this._valueFormattingShowGroupingSeparator, this._valueFormatCurrencySymbol);
				if (!this._applyColorsToNonVisibleSlices) {
					slice1._fillColor = this._fillColors[visibleSliceCounter % this._fillColors.length];
					slice1._strokeColor = this._outlineColors[visibleSliceCounter % this._outlineColors.length];
				}
				if (this._labelType == $.ig.SliceLabelType.prototype.percentage) {
					slice1._label = slice1._percentageFormatted;
				} else if (this._labelType == $.ig.SliceLabelType.prototype.value) {
					slice1._label = valueLabel;
				} else if (this._labelType == $.ig.SliceLabelType.prototype.labelAndPercentage) {
					slice1._label = slice1._label + percentAppend;
				} else if (this._labelType == $.ig.SliceLabelType.prototype.valueAndPercentage) {
					slice1._label = valueLabel + percentAppend;
				}
				if (slice1._label.length > this._formattedLongestLabel.length) {
					this._formattedLongestLabel = slice1._label;
				}
				visibleSliceCounter++;
			}
		}
		this._visibleSliceCount = visibleSliceCounter + (othersSliceCounter > 0 ? 1 : 0);
		if (numOthersSlices > 0) {
			var paletteCount = this._applyColorsToNonVisibleSlices ? numSlices : this._visibleSliceCount;
			var temp = this.createSlice();
			temp._label = temp._legend = this._othersSliceText;
			temp._value = this._othersTotal;
			temp._percentage = this._othersTotal / this._valueTotal * 100;
			var remainder1 = Math.abs(temp._percentage % 1);
			var hasDecimal1 = remainder1 <= 0.049 || remainder1 >= 0.95 ? false : true;
			temp._percentageFormatted = $.ig.NativeUtility.prototype.utility().convertNumberToString(temp._percentage, hasDecimal1 ? 1 : 0, false) + "%";
			temp._index = $.ig.SliceChartSnapshot.prototype.othersSliceIndex;
			temp._fillColor = this._othersSliceFillColor == 0 ? this._fillColors[paletteCount % this._fillColors.length] : this._othersSliceFillColor;
			temp._strokeColor = this._othersSliceOutlineColor == 0 ? this._outlineColors[paletteCount % this._outlineColors.length] : this._othersSliceOutlineColor;
			temp._strokeWidth = this._othersSliceOutlineStrokeWidth;
			temp._isValid = true;
			temp._isVisible = true;
			temp._isOthersSlice = true;
			temp._isSelected = $.ig.ArrayUtility.prototype.arrayContains1(-2, this._selectedSlices) != -1;
			temp._isExploded = $.ig.ArrayUtility.prototype.arrayContains1(-2, this._explodedSlices) != -1;
			this._othersSlice = temp;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartSnapshot::CalculateSlices()" />*/
	,
	/*<BeginMethod Name="Infragistics.SliceBase Infragistics.SliceChartSnapshot::ResolveVisibleSliceAtIndex(System.Int32)" />*/
	resolveVisibleSliceAtIndex: function (index) {
		if (index < this._visibleSliceCount) {
			return index < this._visibleSlices.length ? this._slices[this._visibleSlices[index]] : this._othersSlice;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.SliceBase Infragistics.SliceChartSnapshot::ResolveVisibleSliceAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SliceChartSnapshot::GetSeriesCount()" />*/
	getSeriesCount: function () {
		return this._visibleSliceCount > 0 ? 1 : 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SliceChartSnapshot::GetSeriesCount()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.SliceChartSnapshot::GetLabelForLegend(System.Int32, System.Int32)" />*/
	getLabelForLegend: function (seriesIndex, itemIndex) {
		if (itemIndex < this._visibleSliceCount) {
			return itemIndex < this._visibleSlices.length ? this._labels[this._visibleSlices[itemIndex]] : this._othersSliceText;
		}
		return "";
	}
	/*<EndMethod Name="System.String Infragistics.SliceChartSnapshot::GetLabelForLegend(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.SliceChartSnapshot::GetLegendPositions(System.Int32)" />*/
	getLegendPositions: function (seriesIndex) {
		this._legendPositions = new Array(this._visibleSliceCount * 4);
		return this._legendPositions;
	}
	/*<EndMethod Name=" Infragistics.SliceChartSnapshot::GetLegendPositions(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SliceChartSnapshot::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	getNumberOfLegendItemsInSeries: function (seriesIndex) {
		return this._visibleSliceCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SliceChartSnapshot::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.LegendSnapshotBase.prototype.copyTo.call(this, snapshot);
		var currentSnapshot = snapshot;
		currentSnapshot._slices = $.ig.ArrayUtility.prototype.copyCPList(this._slices);
		currentSnapshot._explosionAnimationDuration = this._explosionAnimationDuration;
		currentSnapshot._othersSliceThresholdType = this._othersSliceThresholdType;
		currentSnapshot._othersSlice = this._othersSlice;
		currentSnapshot._othersTotal = this._othersTotal;
		currentSnapshot._includeZeroValuesInLegend = this._includeZeroValuesInLegend;
		currentSnapshot._values = $.ig.ArrayUtility.prototype.copyDoubleArray(this._values);
		currentSnapshot._labels = $.ig.ArrayUtility.prototype.copyCPList(this._labels);
		currentSnapshot._fillColors = $.ig.ArrayUtility.prototype.copyColorArray(this._fillColors);
		currentSnapshot._outlineColors = $.ig.ArrayUtility.prototype.copyColorArray(this._outlineColors);
		currentSnapshot._visibleSlices = $.ig.ArrayUtility.prototype.copyIntArray(this._visibleSlices);
		currentSnapshot._selectedSlices = $.ig.ArrayUtility.prototype.copyIntArray(this._selectedSlices);
		currentSnapshot._explodedSlices = $.ig.ArrayUtility.prototype.copyIntArray(this._explodedSlices);
		currentSnapshot._othersSlices = $.ig.ArrayUtility.prototype.copyIntArray(this._othersSlices);
		currentSnapshot._legendPositions = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._legendPositions);
		currentSnapshot._longestLabel = this._longestLabel;
		currentSnapshot._formattedLongestLabel = this._formattedLongestLabel;
		currentSnapshot._longestLabelSize = this._longestLabelSize;
		currentSnapshot._fontName = this._fontName;
		currentSnapshot._fontSizeToUse = this._fontSizeToUse;
		currentSnapshot._outlineStrokeWidth = this._outlineStrokeWidth;
		currentSnapshot._selectedSliceOutlineColor = this._selectedSliceOutlineColor;
		currentSnapshot._selectedSliceColor = this._selectedSliceColor;
		currentSnapshot._selectedSliceOutlineStrokeWidth = this._selectedSliceOutlineStrokeWidth;
		currentSnapshot._valueTotal = this._valueTotal;
		currentSnapshot._visibleSliceCount = this._visibleSliceCount;
		currentSnapshot._othersSliceFillColor = this._othersSliceFillColor;
		currentSnapshot._othersSliceOutlineColor = this._othersSliceOutlineColor;
		currentSnapshot._othersSliceOutlineStrokeWidth = this._othersSliceOutlineStrokeWidth;
		currentSnapshot._othersSliceText = this._othersSliceText;
		currentSnapshot._othersSliceThreshold = this._othersSliceThreshold;
		currentSnapshot._labelType = this._labelType;
		currentSnapshot._valueFormatType = this._valueFormatType;
		currentSnapshot._valueFormatFractionDigits = this._valueFormatFractionDigits;
		currentSnapshot._valueFormatNegativeMode = this._valueFormatNegativeMode;
		currentSnapshot._valueFormatUseMKFormatting = this._valueFormatUseMKFormatting;
		currentSnapshot._valueFormatCurrencySymbol = this._valueFormatCurrencySymbol;
		currentSnapshot._valueFormattingShowGroupingSeparator = this._valueFormattingShowGroupingSeparator;
		var newSlices = new $.ig.Array();
		for (var i = 0; i < this._slices.length; i++) {
			var currentSlice = this._slices[i];
			var newSlice = this.createSlice();
			currentSlice.copyTo(newSlice);
			newSlices.add(newSlice);
		}
		currentSnapshot._slices = newSlices;
		if (this._othersSlice != null) {
			currentSnapshot._othersSlice = this.createSlice();
			this._othersSlice.copyTo(currentSnapshot._othersSlice);
		} else {
			currentSnapshot._othersSlice = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SliceChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.LegendSnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var snapshot = newSnapshot;
		$.ig.ArrayUtility.prototype.transitionDoubleArray(this._values, snapshot._values, percent);
		snapshot._outlineStrokeWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outlineStrokeWidth, snapshot._outlineStrokeWidth, percent);
		snapshot._selectedSliceOutlineColor = $.ig.ColorUtility.prototype.transitionColor(this._selectedSliceOutlineColor, snapshot._selectedSliceOutlineColor, percent);
		snapshot._selectedSliceColor = $.ig.ColorUtility.prototype.transitionColor(this._selectedSliceColor, snapshot._selectedSliceColor, percent);
		snapshot._selectedSliceOutlineStrokeWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._selectedSliceOutlineStrokeWidth, snapshot._selectedSliceOutlineStrokeWidth, percent);
		snapshot._othersSliceFillColor = $.ig.ColorUtility.prototype.transitionColor(this._othersSliceFillColor, snapshot._othersSliceFillColor, percent);
		snapshot._othersSliceOutlineColor = $.ig.ColorUtility.prototype.transitionColor(this._othersSliceOutlineColor, snapshot._othersSliceOutlineColor, percent);
		snapshot._othersSliceOutlineStrokeWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._othersSliceOutlineStrokeWidth, snapshot._othersSliceOutlineStrokeWidth, percent);
		snapshot._othersSliceThreshold = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._othersSliceThreshold, snapshot._othersSliceThreshold, percent);
		for (var i = 0; i < snapshot._visibleSliceCount; i++) {
			var fromSlice = this.resolveVisibleSliceAtIndex(i);
			var toSlice = snapshot.resolveVisibleSliceAtIndex(i);
			fromSlice.transition(toSlice, percent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	$type: new $.ig.Type('SliceChartSnapshot', $.ig.LegendSnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SliceChartSnapshot" />*/

/*<BeginType Name="Infragistics.FunnelChartSnapshot" />*/

$.ig.util.defType('FunnelChartSnapshot', 'SliceChartSnapshot', {
	_labelLocation: 0,
	_displayMode: 0,
	_availableWidth: 0,
	_centerX: 0,
	init: function (setDefaults) {
		$.ig.SliceChartSnapshot.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._labelLocation = $.ig.FunnelChartLabelLocation.prototype.inside;
			this._displayMode = $.ig.FunnelChartDisplayMode.prototype.dynamicHeightAndSlope;
			this._availableWidth = 0;
			this._flipIndexOrder = true;
		}
	},
	/*<BeginMethod Name="Infragistics.SliceBase Infragistics.FunnelChartSnapshot::CreateSlice()" />*/
	createSlice: function () {
		return new $.ig.FunnelChartSlice();
	}
	/*<EndMethod Name="Infragistics.SliceBase Infragistics.FunnelChartSnapshot::CreateSlice()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::QuickSort(System.Int32, System.Int32)" />*/
	quickSort: function (left, right) {
		var l = left, r = right;
		var temp;
		var pivot = this._slices[this._visibleSlices[$.ig.intDivide((left + right), 2)]];
		while (l <= r) {
			while ((this._slices[this._visibleSlices[l]])._value < pivot._value) {
				l++;
			}
			while ((this._slices[this._visibleSlices[r]])._value > pivot._value) {
				r--;
			}
			if (l <= r) {
				temp = this._visibleSlices[l];
				this._visibleSlices[l] = this._visibleSlices[r];
				this._visibleSlices[r] = temp;
				l++;
				r--;
			}
		}
		if (left < r) {
			this.quickSort(left, r);
		}
		if (l < right) {
			this.quickSort(l, right);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::QuickSort(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::SortVisibleSlices()" />*/
	sortVisibleSlices: function () {
		if (this._visibleSlices.length > 0) {
			this.quickSort(0, this._visibleSlices.length - 1);
		}
		var others = this._othersSlice;
		if (others != null) {
			others._visibleIndex = -1;
		}
		var cur = 0;
		for (var i = 0; i < this._visibleSlices.length; i++) {
			var slice = this._slices[this._visibleSlices[i]];
			if (others != null && others._visibleIndex == -1 && others._value <= slice._value) {
				others._visibleIndex = cur;
				cur++;
			}
			slice._visibleIndex = cur;
			cur++;
		}
		if (others != null && others._visibleIndex == -1) {
			others._visibleIndex = cur;
		}
		var sortedSlices = new $.ig.Array();
		var sortedVisibleSlices = new Array(this._visibleSlices.length);
		var sortedOthersSlices = new Array(this._othersSlices.length);
		for (var x = 0; x < this._othersSlices.length; x++) {
			var oSlice = this._slices[this._othersSlices[x]];
			if (this._applyColorsToNonVisibleSlices) {
				oSlice._fillColor = this._fillColors[x % this._fillColors.length];
				oSlice._strokeColor = this._outlineColors[x % this._outlineColors.length];
			}
			sortedSlices.add(oSlice);
			sortedOthersSlices[x] = x;
		}
		for (var i1 = 0; i1 < this._visibleSlices.length; i1++) {
			var visSlice = this._slices[this._visibleSlices[i1]];
			var colorFactor = this._applyColorsToNonVisibleSlices ? this._othersSlices.length + i1 : i1;
			visSlice._fillColor = this._fillColors[colorFactor % this._fillColors.length];
			visSlice._strokeColor = this._outlineColors[colorFactor % this._outlineColors.length];
			sortedSlices.add(visSlice);
			sortedVisibleSlices[i1] = this._othersSlices.length + i1;
		}
		var diff = this._slices.length - sortedSlices.length;
		if (diff > 0) {
			for (var i2 = 0; i2 < diff; i2++) {
				sortedSlices.add(this.createSlice());
			}
		}
		this._slices = sortedSlices;
		this._visibleSlices = sortedVisibleSlices;
		this._othersSlices = sortedOthersSlices;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::SortVisibleSlices()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::CalculateSliceDimensions()" />*/
	calculateSliceDimensions: function () {
		if (this._visibleSliceCount == 0) {
			return;
		}
		this._fontSizeToUse = this._maxFontSize;
		if (this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.inside || this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.noLabels) {
			this._availableWidth = this._canvasFrameWidth;
		} else {
			this._longestLabelSize = $.ig.NativeUtility.prototype.utility().measureText(this._formattedLongestLabel, this._fontName, this._fontSizeToUse);
			while (this._longestLabelSize._height * 2 * this._visibleSliceCount >= this._canvasFrameHeight && this._fontSizeToUse > this._minFontSize) {
				this._fontSizeToUse -= 1;
				this._longestLabelSize = $.ig.NativeUtility.prototype.utility().measureText(this._formattedLongestLabel, this._fontName, this._fontSizeToUse);
			}
			this._availableWidth = this._canvasFrameWidth - this._longestLabelSize._width;
		}
		this._centerX = this._availableWidth / 2;
		if (this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.outsideLeft) {
			this._centerX += this._longestLabelSize._width;
		}
		var currentSlice = this.resolveVisibleSliceAtIndex(0);
		var currentSliceWidth = this._availableWidth * currentSlice._percentage / 100;
		var currentPercentTotal = currentSlice._percentage;
		var heightTotal = 0;
		var bottomWidth = currentSliceWidth;
		for (var i = 1; i < this._visibleSliceCount; i++) {
			var nextSlice = this.resolveVisibleSliceAtIndex(i);
			var nextSliceWidth = this._availableWidth * nextSlice._percentage / 100;
			currentSlice._bottomWidth = currentSliceWidth;
			currentPercentTotal += nextSlice._percentage;
			switch (this._displayMode) {
				case $.ig.FunnelChartDisplayMode.prototype.dynamicHeightAndSlope:
					currentSlice._height = this._canvasFrameHeight * currentSlice._percentage / 100;
					heightTotal += currentSlice._height;
					currentSlice._topWidth = nextSliceWidth;
					break;
				case $.ig.FunnelChartDisplayMode.prototype.uniformHeight:
					currentSlice._height = this._canvasFrameHeight / this._visibleSliceCount;
					heightTotal += currentSlice._height;
					currentSlice._topWidth = nextSliceWidth;
					break;
				case $.ig.FunnelChartDisplayMode.prototype.uniformHeightAndSlope:
					currentSlice._height = this._canvasFrameHeight / this._visibleSliceCount;
					heightTotal += currentSlice._height;
					currentSlice._topWidth = nextSliceWidth = bottomWidth + (this._availableWidth - bottomWidth) * heightTotal / this._canvasFrameHeight;
					break;
				case $.ig.FunnelChartDisplayMode.prototype.uniformSlope:
					currentSlice._height = this._canvasFrameHeight * currentSlice._percentage / 100;
					heightTotal += currentSlice._height;
					currentSlice._topWidth = nextSliceWidth = bottomWidth + (this._availableWidth - bottomWidth) * heightTotal / this._canvasFrameHeight;
					break;
			}
			currentSlice._xBottomLeft = this._centerX - currentSlice._bottomWidth / 2;
			currentSlice._xTopLeft = this._centerX - currentSlice._topWidth / 2;
			currentSlice._yTop = this._canvasFrameY + this._canvasFrameHeight - heightTotal;
			currentSliceWidth = nextSliceWidth;
			currentSlice = nextSlice;
		}
		currentSlice._height = this._canvasFrameHeight - heightTotal;
		currentSlice._bottomWidth = currentSliceWidth;
		currentSlice._topWidth = this._availableWidth;
		currentSlice._xBottomLeft = this._centerX - currentSlice._bottomWidth / 2;
		currentSlice._xTopLeft = this._centerX - currentSlice._topWidth / 2;
		currentSlice._yTop = this._canvasFrameY;
		var sliceCounter = 0;
		if (this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.inside) {
			while (sliceCounter < this._visibleSliceCount) {
				var slice = this.resolveVisibleSliceAtIndex(sliceCounter);
				var sliceSize = $.ig.NativeUtility.prototype.utility().measureText(slice._label, this._fontName, this._minFontSize);
				if (sliceSize._height >= slice._height || sliceSize._width >= (slice._bottomWidth + slice._topWidth) / 2) {
					sliceCounter++;
					continue;
				}
				while (this._fontSizeToUse >= this._minFontSize) {
					sliceSize = $.ig.NativeUtility.prototype.utility().measureText(slice._label, this._fontName, this._fontSizeToUse);
					if (sliceSize._height >= slice._height || sliceSize._width >= (slice._bottomWidth + slice._topWidth) / 2) {
						this._fontSizeToUse -= 1;
					}
					break;
				}
				break;
			}
		}
		this._fontSizeToUse *= this._density;
		this._fontSize = $.ig.truncate(this._fontSizeToUse);
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::CalculateSliceDimensions()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::CalculateLabels()" />*/
	calculateLabels: function () {
		if (this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.noLabels || this._visibleSliceCount == 0) {
			return;
		}
		var currentY = this._canvasFrameY + this._canvasFrameHeight;
		var currentLabelTop = currentY;
		for (var i = 0; i < this._visibleSliceCount; i++) {
			var slice = this.resolveVisibleSliceAtIndex(i);
			var labelSize = $.ig.NativeUtility.prototype.utility().measureText(slice._label, this._fontName, this._fontSizeToUse);
			slice._labelSize = labelSize;
			slice._isLabelVisible = false;
			switch (this._labelLocation) {
				case $.ig.FunnelChartLabelLocation.prototype.inside:
					if (labelSize._height < slice._height && labelSize._width < (slice._bottomWidth + slice._topWidth) / 2) {
						slice._isLabelVisible = true;
						slice._labelPositionX = this._centerX - labelSize._width / 2;
						slice._labelPositionY = currentY - slice._height / 2 - labelSize._height / 2;
					}
					break;
				case $.ig.FunnelChartLabelLocation.prototype.outsideLeft:
				case $.ig.FunnelChartLabelLocation.prototype.outsideRight:
					slice._isLabelVisible = true;
					slice._labelPositionX = this._labelLocation == $.ig.FunnelChartLabelLocation.prototype.outsideLeft ? 0 : this._width - labelSize._width;
					slice._labelPositionY = currentY - slice._height / 2 - labelSize._height / 2;
					if (slice._labelPositionY + labelSize._height > currentLabelTop) {
						slice._labelPositionY = currentLabelTop - labelSize._height;
					}
					currentLabelTop = slice._labelPositionY;
					break;
				case $.ig.FunnelChartLabelLocation.prototype.noLabels: break;
			}
			currentY -= slice._height;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::CalculateLabels()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::Invalidate()" />*/
	invalidate: function () {
		if (this._width == 0 || this._height == 0) {
			return;
		}
		this.calculateTotal();
		this.calculateSlices();
		this.sortVisibleSlices();
		this.calculateFontInfo();
		this.calculateLegendSizeInfo();
		this.calculateSizeInfo();
		this.calculateSliceDimensions();
		this.calculateLabels();
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.FunnelChartSnapshot::GetLabelForLegend(System.Int32, System.Int32)" />*/
	getLabelForLegend: function (seriesIndex, itemIndex) {
		if (this._othersSlice != null && (this._othersSlice)._visibleIndex == itemIndex) {
			return this._othersSliceText;
		}
		for (var i = 0; i < this._visibleSlices.length; i++) {
			var slice = this._slices[this._visibleSlices[i]];
			if (slice._visibleIndex == itemIndex) {
				return slice._legend;
			}
		}
		return "";
	}
	/*<EndMethod Name="System.String Infragistics.FunnelChartSnapshot::GetLabelForLegend(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.SliceBase Infragistics.FunnelChartSnapshot::ResolveVisibleSliceAtIndex(System.Int32)" />*/
	resolveVisibleSliceAtIndex: function (index) {
		if (this._othersSlice != null && (this._othersSlice)._visibleIndex == index) {
			return this._othersSlice;
		}
		for (var i = 0; i < this._visibleSlices.length; i++) {
			var slice = this._slices[this._visibleSlices[i]];
			if (slice._visibleIndex == index) {
				return slice;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.SliceBase Infragistics.FunnelChartSnapshot::ResolveVisibleSliceAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SliceChartSnapshot.prototype.copyTo.call(this, snapshot);
		var funnelSnapshot = snapshot;
		funnelSnapshot._labelLocation = this._labelLocation;
		funnelSnapshot._displayMode = this._displayMode;
		funnelSnapshot._availableWidth = this._availableWidth;
		funnelSnapshot._canvasFrameHeight = this._canvasFrameHeight;
		funnelSnapshot._centerX = this._centerX;
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SliceChartSnapshot.prototype.transition.call(this, newSnapshot, percent);
		var funnelSnapshot = newSnapshot;
		funnelSnapshot._availableWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._availableWidth, funnelSnapshot._availableWidth, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	$type: new $.ig.Type('FunnelChartSnapshot', $.ig.SliceChartSnapshot.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartSnapshot" />*/

/*<BeginType Name="Infragistics.IDataProcessorCallback" />*/

$.ig.util.defType('IDataProcessorCallback', 'Object', {
	$type: new $.ig.Type('IDataProcessorCallback', null)
}, true);

/*<EndType Name="Infragistics.IDataProcessorCallback" />*/

/*<BeginType Name="Infragistics.TextInstructions" />*/

$.ig.util.defType('TextInstructions', 'Object', {
	_textColor: null,
	_strokeColor: null,
	_font: null,
	_fontResourceStream: null,
	_degrees: 0,
	_x: 0,
	_y: 0,
	_fontSize: 0,
	_renderX: 0,
	_renderY: 0,
	_textHeight: 0,
	_maxX: 0,
	_text: null,
	_alignment: 0,
	_hAlignment: 0,
	_strokeWidth: 0,
	_textBaseline: 0,
	__bounds: null,
	init: function () {
		this._textColor = new $.ig.Number();
		this._strokeColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.__bounds = new $.ig.RectRotationBounds();
		this._hAlignment = $.ig.TextHorizontalAlignment.prototype.center;
		this._strokeWidth = 0;
	},
	/*<BeginMethod Name="System.Void Infragistics.TextInstructions::Draw(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	draw: function (canvas, context) {
		this.draw1(canvas, context, -1, -1);
	}
	/*<EndMethod Name="System.Void Infragistics.TextInstructions::Draw(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TextInstructions::Draw(Infragistics.DrawingViewBase, System.CanvasContext, System.Single, System.Single)" />*/
	draw1: function (canvas, context, restrictedWidth, restrictedHeight) {
		var textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(this._text, this._font, this._fontSize);
		var textWidth = textSize._width;
		this._textHeight = textSize._height;
		this._textBaseline = $.ig.NativeUtility.prototype.utility().getTextBaseline(this._text, this._font, this._fontSize);
		if (restrictedWidth != -1 && textWidth > restrictedWidth) {
			return;
		}
		if (restrictedHeight != -1 && this._textHeight > restrictedHeight) {
			return;
		}
		this._renderX = (this._hAlignment == $.ig.TextHorizontalAlignment.prototype.right) ? (this._maxX - textWidth) : ((this._hAlignment == $.ig.TextHorizontalAlignment.prototype.center) ? this._x - textWidth / 2 : this._x);
		this._renderY = (this._alignment == $.ig.TextVerticalAlignment.prototype.top) ? this._y : this._y - this._textHeight / 2;
		canvas.saveCanvas(context);
		if (this._degrees != 0) {
			var radians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(this._degrees);
			$.ig.ChartsUtility.prototype.calculateBoundsOfRect(this.__bounds, this._renderX, this._renderY, textWidth, this._textHeight, radians);
			if (this._alignment == $.ig.TextVerticalAlignment.prototype.top) {
				this._renderY += (this._renderY - this.__bounds._minY);
			}
			var pivotX = this._renderX + textWidth / 2;
			var pivotY = this._renderY + this._textHeight / 2;
			canvas.translateCanvas(context, pivotX, pivotY);
			canvas.rotateCanvas(context, radians);
			canvas.translateCanvas(context, -pivotX, -pivotY);
		}
		this.renderBackground(canvas, context);
		canvas.drawText3(context, this._text, this._renderX, this._renderY, this._textBaseline, this._textHeight, this._textColor, $.ig.truncate(this._strokeWidth), this._strokeColor, this._font, this._fontSize);
		canvas.restoreCanvas(context);
	}
	/*<EndMethod Name="System.Void Infragistics.TextInstructions::Draw(Infragistics.DrawingViewBase, System.CanvasContext, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TextInstructions::RenderBackground(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	renderBackground: function (canvas, context) {
	}
	/*<EndMethod Name="System.Void Infragistics.TextInstructions::RenderBackground(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	,
	$type: new $.ig.Type('TextInstructions', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TextInstructions" />*/

/*<BeginType Name="Infragistics.TextInstructionsWithBackground" />*/

$.ig.util.defType('TextInstructionsWithBackground', 'TextInstructions', {
	_backgroundColor: null,
	_backgroundPaddingVertical: 0,
	_backgroundPaddingHorizontal: 0,
	_roundedCornerRadius: 0,
	init: function () {
		this._backgroundColor = new $.ig.Number();
		$.ig.TextInstructions.prototype.init.call(this);
		this._backgroundColor = 0;
		this._backgroundPaddingVertical = 3;
		this._backgroundPaddingHorizontal = 3;
		this._roundedCornerRadius = 3;
	},
	/*<BeginMethod Name="System.Void Infragistics.TextInstructionsWithBackground::RenderBackground(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	renderBackground: function (canvas, context) {
		if (this._backgroundColor != 0) {
			var textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(this._text, this._font, this._fontSize);
			if (this._roundedCornerRadius != 0) {
				canvas.drawRoundedRect(context, this._renderX - this._backgroundPaddingHorizontal, this._renderY - this._backgroundPaddingVertical, textSize._width + (2 * this._backgroundPaddingHorizontal), textSize._height + (2 * this._backgroundPaddingVertical), this._roundedCornerRadius, this._backgroundColor, 0, 0);
			} else {
				canvas.drawRect(context, this._renderX - this._backgroundPaddingHorizontal, this._renderY - this._backgroundPaddingVertical, textSize._width + (2 * this._backgroundPaddingHorizontal), textSize._height + (2 * this._backgroundPaddingVertical), this._backgroundColor, 0, 0);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TextInstructionsWithBackground::RenderBackground(Infragistics.DrawingViewBase, System.CanvasContext)" />*/
	,
	$type: new $.ig.Type('TextInstructionsWithBackground', $.ig.TextInstructions.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TextInstructionsWithBackground" />*/

/*<BeginType Name="Infragistics.ItemLayoutInfo" />*/

$.ig.util.defType('ItemLayoutInfo', 'Object', {
	_isValid: false,
	_boundsX: 0,
	_boundsY: 0,
	_boundsWidth: 0,
	_boundsHeight: 0,
	_valueLocationX: 0,
	_valueLocationY: 0,
	_value: 0,
	_valueIsNegative: false,
	_startAngle: 0,
	_endAngle: 0,
	_startExtent: 0,
	_endExtent: 0,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._isValid = true;
	},
	$type: new $.ig.Type('ItemLayoutInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ItemLayoutInfo" />*/

/*<BeginType Name="Infragistics.ItemPath" />*/

$.ig.util.defType('ItemPath', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_itemIndex: 0,
	_seriesIndex: 0,
	_sideBySideIndex: 0,
	$type: new $.ig.Type('ItemPath', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ItemPath" />*/

/*<BeginType Name="Infragistics.KeyedObject" />*/

$.ig.util.defType('KeyedObject', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_key: null,
	/*<BeginMethod Name="Infragistics.KeyedObject Infragistics.KeyedObject::CreateNew()" />*/
	createNew: function () {
		return new $.ig.KeyedObject();
	}
	/*<EndMethod Name="Infragistics.KeyedObject Infragistics.KeyedObject::CreateNew()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.KeyedObject::Reset()" />*/
	reset: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.KeyedObject::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.KeyedObject::CopyTo(Infragistics.KeyedObject)" />*/
	copyTo: function (to) {
		to._key = this._key;
	}
	/*<EndMethod Name="System.Void Infragistics.KeyedObject::CopyTo(Infragistics.KeyedObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.KeyedObject::Transition(Infragistics.KeyedObject, System.Double)" />*/
	transition: function (next, percent) {
	}
	/*<EndMethod Name="System.Void Infragistics.KeyedObject::Transition(Infragistics.KeyedObject, System.Double)" />*/
	,
	$type: new $.ig.Type('KeyedObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.KeyedObject" />*/

/*<BeginType Name="Infragistics.AngleAxisLabelLayer" />*/

$.ig.util.defType('AngleAxisLabelLayer', 'CalculatedLayer', {
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
	},
	/*<BeginMethod Name="System.Void Infragistics.AngleAxisLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._angleAxisLabelOrientation == $.ig.AngleAxisLabelOrientation.prototype.noLabels) {
			return;
		}
		if (seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue && (seriesSnapshot._labels == null || seriesSnapshot._labels.length == 0)) {
			return;
		}
		this.__textInstructions._textColor = seriesSnapshot._fontColor;
		this.__textInstructions._font = seriesSnapshot._fontName;
		this.__textInstructions._fontSize = seriesSnapshot._fontSize;
		this.__textInstructions._degrees = 0;
		var numberOfLabels = 0;
		var stepSize = 1;
		var actualMin = 0;
		var logBase = -1;
		var labelDistanceFromCenter = seriesSnapshot._radiusAxisMax + (seriesSnapshot._radiusAxisMax - seriesSnapshot._radiusAxisMin) * (seriesSnapshot._labelExtent + seriesSnapshot._labelTextHeight / 2) / seriesSnapshot._radius;
		var categoryOffset = 0.5;
		var min = 0;
		var numberOfVisibleLabels = 0;
		var useSecondary = seriesSnapshot._useSecondaryAxisValueFormat;
		var useMK = useSecondary ? seriesSnapshot._secondaryAxisValueFormatUseMKFormatting : seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = useSecondary ? seriesSnapshot._secondaryAxisValueFormatNegativeMode : seriesSnapshot._primaryAxisValueFormatNegativeMode;
		var numType = useSecondary ? seriesSnapshot._secondaryAxisValueFormatType : seriesSnapshot._primaryAxisValueFormatType;
		var digits = useSecondary ? seriesSnapshot._secondaryAxisValueFormatFractionDigits : seriesSnapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = useSecondary ? seriesSnapshot._secondaryAxisValueFormatCurrencySymbol : seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = useSecondary ? seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator : seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
		if (seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
			numberOfLabels = seriesSnapshot._endIndex - seriesSnapshot._startIndex + 1;
			numberOfVisibleLabels = $.ig.intDivide(numberOfLabels, seriesSnapshot._valueInterval);
		} else {
			stepSize = seriesSnapshot._angleAxisStepSize;
			numberOfLabels = $.ig.truncate(((seriesSnapshot._angleAxisMax - seriesSnapshot._angleAxisMin) / stepSize));
			categoryOffset = 0;
			numberOfVisibleLabels = numberOfLabels;
			min = seriesSnapshot._angleAxisMin;
			if (seriesSnapshot._angleAxisIsLogarithmic) {
				logBase = seriesSnapshot._angleAxisLogBase;
			}
		}
		actualMin = $.ig.truncate((min / stepSize)) * stepSize;
		if (actualMin < 0 && logBase != -1) {
			actualMin = 0;
		}
		var value;
		var label;
		for (var i = 0; i < numberOfVisibleLabels; i++) {
			value = (actualMin + (i * stepSize));
			if (logBase != -1) {
				value = (actualMin + Math.pow(logBase, i));
			}
			if (seriesSnapshot._mode != $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
				label = $.ig.ChartsUtility.prototype.labelForValue(value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			} else {
				value += categoryOffset;
				label = seriesSnapshot.labelForItem(i * seriesSnapshot._valueInterval);
			}
			var stringSize = $.ig.NativeUtility.prototype.utility().measureText(label, this.__textInstructions._font, this.__textInstructions._fontSize);
			if (seriesSnapshot._angleAxisLabelOrientation == $.ig.AngleAxisLabelOrientation.prototype.spoke) {
				labelDistanceFromCenter = seriesSnapshot._radiusAxisMax + (seriesSnapshot._radiusAxisMax - seriesSnapshot._radiusAxisMin) * (seriesSnapshot._labelExtent + seriesSnapshot._labelTextHeight / 2 + stringSize._width / 2) / seriesSnapshot._radius;
			}
			var labelAnchor = seriesSnapshot.calculateXYPosition(labelDistanceFromCenter, value);
			this.__textInstructions._text = label;
			switch (seriesSnapshot._angleAxisLabelOrientation) {
				case $.ig.AngleAxisLabelOrientation.prototype.horizontal:
					this.__textInstructions._x = labelAnchor._x > seriesSnapshot._centerX ? labelAnchor._x + stringSize._width / 2 : labelAnchor._x - stringSize._width / 2;
					this.__textInstructions._y = labelAnchor._y;
					this.__textInstructions.draw(canvas, ctx);
					break;
				case $.ig.AngleAxisLabelOrientation.prototype.spoke:
					this.__textInstructions._x = labelAnchor._x;
					this.__textInstructions._y = labelAnchor._y;
					var degrees = (i + categoryOffset) * 360 / numberOfVisibleLabels;
					this.__textInstructions._degrees = degrees > 90 && degrees < 270 ? degrees + 180 : degrees;
					this.__textInstructions.draw(canvas, ctx);
					break;
				case $.ig.AngleAxisLabelOrientation.prototype.arc:
					canvas.drawCenteredArcText(ctx, seriesSnapshot._centerX, seriesSnapshot._centerY, label, seriesSnapshot.distanceFromCenter(labelDistanceFromCenter), $.ig.CPMathUtility.prototype.convertDegreesToRadians(360 - (i + categoryOffset) * 360 / numberOfVisibleLabels), this.__textInstructions._textColor, this.__textInstructions._font, this.__textInstructions._fontSize, labelAnchor._y < seriesSnapshot._centerY);
					break;
				case $.ig.AngleAxisLabelOrientation.prototype.noLabels: break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AngleAxisLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('AngleAxisLabelLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AngleAxisLabelLayer" />*/

/*<BeginType Name="Infragistics.AxisLineLayer" />*/

$.ig.util.defType('AxisLineLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Single Infragistics.AxisLineLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return (snapshot)._axisLinesFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisLineLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisLineLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._axisLinesFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisLineLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisLineLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return (snapshot)._axisLinesFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisLineLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.AxisLineLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._axisLinesFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.AxisLineLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AxisLineLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._axisLineThickness > 0) {
			var color = seriesSnapshot._primaryAxisLineColor;
			var thickness = seriesSnapshot._axisLineThickness;
			if (seriesSnapshot._hasLeftAxis) {
				canvas.drawLine(ctx, x, y, x, y + h, color, thickness);
			}
			if (seriesSnapshot._hasRightAxis) {
				var actualX = x + w - seriesSnapshot._axisLineThickness;
				canvas.drawLine(ctx, actualX, y, actualX, y + h, color, thickness);
			}
			if (seriesSnapshot._hasTopAxis) {
				canvas.drawLine(ctx, x, y, x + w, y, color, thickness);
			}
			if (seriesSnapshot._hasBottomAxis) {
				var actualY = y + h - seriesSnapshot._axisLineThickness;
				canvas.drawLine(ctx, x, actualY, x + w, actualY, color, thickness);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.AxisLineLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('AxisLineLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.AxisLineLayer" />*/

/*<BeginType Name="Infragistics.BarChartLayer" />*/

$.ig.util.defType('BarChartLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.BarChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var info = new $.ig.ItemLayoutInfo();
		var sideBySideIndex = 0;
		for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
			var s = seriesSnapshot._seriesList[seriesIndex];
			var keyChain = s._stackKeys;
			var useBucketing = seriesSnapshot._valueInterval > 1 && seriesSnapshot._combineClusteredValues;
			var dataSubsetType = useBucketing ? 1 : 0;
			for (var stackIndex = 0; stackIndex < keyChain.length; stackIndex++) {
				var stackColor = s._colors[stackIndex];
				var stackStrokeColor = s._strokeColors[stackIndex];
				var fadedStackColor = seriesSnapshot.resolveFadedColor(stackColor);
				for (var i = seriesSnapshot._startIndex; i <= seriesSnapshot._endIndex; i += seriesSnapshot._valueInterval) {
					if (i % seriesSnapshot._valueInterval == 0) {
						var index = seriesSnapshot.adjustIndexForInterval(i);
						seriesSnapshot.calculateCategoryValueBounds(info, index, seriesIndex, stackIndex, sideBySideIndex, s, dataSubsetType);
						if (info._isValid) {
							var color = seriesSnapshot.resolveHighlightColor(stackColor, fadedStackColor, index);
							canvas.drawRect(ctx, info._boundsX, info._boundsY + y, info._boundsWidth, info._boundsHeight, color, stackStrokeColor, s._strokeWidth);
						}
					}
				}
			}
			sideBySideIndex++;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.BarChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('BarChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.BarChartLayer" />*/

/*<BeginType Name="Infragistics.BarTextMarkerLayer" />*/

$.ig.util.defType('BarTextMarkerLayer', 'CalculatedLayer', {
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.BarTextMarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._textMarkersVisible && seriesSnapshot._valueInterval == 1 && seriesSnapshot._labelTextHeight < seriesSnapshot._itemSizeSideBySide) {
			var supported = true;
			for (var i = 0; i < seriesSnapshot._seriesCount; i++) {
				var s = seriesSnapshot._seriesList[i];
				if (s.isScatterSeries() || s.isFinancialSeries() || s.isRangeSeries() || s.isStackSeries()) {
					supported = false;
					break;
				}
			}
			if (!supported) {
				return;
			}
			var info = new $.ig.ItemLayoutInfo();
			this.__textInstructions._font = seriesSnapshot._fontName;
			this.__textInstructions._fontSize = seriesSnapshot._fontSize;
			this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
			var backgroundColor = seriesSnapshot._markerStrokeColor;
			var sideBySide = 0;
			for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
				var s1 = seriesSnapshot._seriesList[seriesIndex];
				var stackIndex = 0;
				for (var i1 = seriesSnapshot._startIndex; i1 <= seriesSnapshot._endIndex; i1 += seriesSnapshot._valueInterval) {
					var seriesColor = s1._colors[0];
					if (i1 % seriesSnapshot._valueInterval == 0) {
						var index = seriesSnapshot.adjustIndexForInterval(i1);
						var value = seriesSnapshot.valueForItem(i1, seriesIndex);
						seriesSnapshot.calculateValueBounds(info, index, seriesIndex, stackIndex, sideBySide, s1);
						var startY = info._boundsY;
						var availWidth = info._boundsWidth;
						var strokeColor = backgroundColor;
						var useMK = seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
						var negMode = seriesSnapshot._primaryAxisValueFormatNegativeMode;
						var numType = seriesSnapshot._primaryAxisValueFormatType;
						var digits = seriesSnapshot._primaryAxisValueFormatFractionDigits;
						var currencySymbol = seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
						var showGroupingSeparator = seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
						var text = $.ig.ChartsUtility.prototype.labelForValue(value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
						var labelX = 0;
						var labelY = startY + (info._boundsHeight / 2 - seriesSnapshot._labelTextHeight / 2) + y;
						var textMarkerSize = $.ig.NativeUtility.prototype.utility().measureText(text, seriesSnapshot._fontName, seriesSnapshot._fontSize)._width;
						var padding = textMarkerSize * 0.15;
						var labelFitsInsideBar = availWidth > (textMarkerSize + padding * 2);
						if (labelFitsInsideBar) {
							strokeColor = seriesColor;
							seriesColor = backgroundColor;
						}
						if (value < 0) {
							if (labelFitsInsideBar) {
								labelX += info._valueLocationX + padding;
							} else {
								labelX += info._valueLocationX - textMarkerSize - padding;
								if (labelX < x && info._valueLocationX + info._boundsWidth > x) {
									labelX = info._valueLocationX + info._boundsWidth + padding;
								}
							}
						} else if (value > 0) {
							if (labelFitsInsideBar) {
								labelX += info._valueLocationX - textMarkerSize - padding;
							} else {
								labelX += info._valueLocationX + padding;
							}
						}
						labelX += textMarkerSize / 2;
						this.__textInstructions._text = text;
						this.__textInstructions._textColor = seriesColor;
						this.__textInstructions._strokeColor = strokeColor;
						this.__textInstructions._x = labelX;
						this.__textInstructions._y = labelY;
						this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
						this.__textInstructions._strokeWidth = $.ig.BarTextMarkerLayer.prototype._tEXT_STROKE_THICKNESS;
						this.__textInstructions.draw(canvas, ctx);
					}
				}
				sideBySide++;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.BarTextMarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('BarTextMarkerLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.BarTextMarkerLayer" />*/

/*<BeginType Name="Infragistics.CategoryChartLayer" />*/

$.ig.util.defType('CategoryChartLayer', 'CalculatedLayer', {
	__infoCurrent: null,
	__infoNext: null,
	__x0: 0,
	__x1: 0,
	__x2: 0,
	__x3: 0,
	__x4: 0,
	__x5: 0,
	__y0: 0,
	__y1: 0,
	__y2: 0,
	__y3: 0,
	__y4: 0,
	__y5: 0,
	__cx0: 0,
	__cx1: 0,
	__cx2: 0,
	__cx3: 0,
	__cy0: 0,
	__cy1: 0,
	__cy2: 0,
	__cy3: 0,
	__controlPointsX: null,
	__controlPointsY: null,
	__controlPointsMinY: null,
	__isArea: false,
	__isStack: false,
	__isSpline: false,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__infoCurrent = new $.ig.ItemLayoutInfo();
		this.__infoNext = new $.ig.ItemLayoutInfo();
	},
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var sideBySideIndex = 0;
		var useBucketing = seriesSnapshot._valueInterval > 1 && seriesSnapshot._combineClusteredValues;
		var dataSubsetType = useBucketing ? 1 : 0;
		for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
			var s = seriesSnapshot._seriesList[seriesIndex];
			if (seriesSnapshot._actualStack100ModeEnabled && !s.isStackSeries()) {
				continue;
			}
			var type = s._type;
			var keyChain = s._stackKeys;
			var stackCount = keyChain.length;
			this.__isSpline = type == $.ig.CombinedDataItemType.prototype.spline || type == $.ig.CombinedDataItemType.prototype.splineArea;
			this.__isArea = type == $.ig.CombinedDataItemType.prototype.area || type == $.ig.CombinedDataItemType.prototype.rangeArea || type == $.ig.CombinedDataItemType.prototype.splineArea || type == $.ig.CombinedDataItemType.prototype.stepArea;
			if (this.__isSpline && seriesSnapshot._itemCount < 2) {
				continue;
			}
			for (var stackIndex = 0; stackIndex < stackCount; stackIndex++) {
				this.__isStack = stackIndex > 0;
				if (this.__isSpline) {
					this.__controlPointsX = s._splineXControlPoints[stackIndex];
					this.__controlPointsY = s._splineYControlPoints[stackIndex];
					this.__controlPointsMinY = s._splineMinYControlPoints[stackIndex];
				}
				var color = s._colors[stackIndex];
				var strokeColor = s._strokeColors[stackIndex];
				var start = Math.max(seriesSnapshot._startIndex - seriesSnapshot._valueInterval, 0);
				for (var i = start; i <= seriesSnapshot._endIndex; i += seriesSnapshot._valueInterval) {
					if (i % seriesSnapshot._valueInterval == 0) {
						var index = seriesSnapshot.adjustIndexForInterval(i);
						switch (type) {
							case $.ig.CombinedDataItemType.prototype.column:
							case $.ig.CombinedDataItemType.prototype.rangeColumn:
							case $.ig.CombinedDataItemType.prototype.waterfall:
								{
									this.renderColumn(canvas, ctx, seriesSnapshot, x, y, w, h, index, seriesIndex, stackIndex, sideBySideIndex, s, color, s._negativeColor, strokeColor, s._strokeWidth, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.point:
								{
									this.renderPoint(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, stackIndex, s, color, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.outlierPoint:
								{
									this.renderOutlierPoint(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, stackIndex, s, color, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.rangeArea:
								{
									this.renderRangeArea(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, s, color, s._negativeColor, useBucketing);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.area:
							case $.ig.CombinedDataItemType.prototype.line:
								{
									this.renderLine(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.stepLine:
							case $.ig.CombinedDataItemType.prototype.stepArea:
								{
									this.renderStepLine(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.spline:
							case $.ig.CombinedDataItemType.prototype.splineArea:
								{
									this.renderSpline(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.ohlc:
							case $.ig.CombinedDataItemType.prototype.candlestick:
								{
									this.renderFinancialPoint(canvas, ctx, seriesSnapshot, x, y, index, seriesIndex, sideBySideIndex, s, color, type, s._negativeColor, dataSubsetType);
									break;
								}
							default: break;
						}
					}
				}
			}
			if (s.isSideBySideSeries()) {
				sideBySideIndex++;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderColumn(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.ColorInt, System.Single, System.Int32)" />*/
	renderColumn: function (canvas, ctx, snapshot, x, y, w, h, index, seriesIndex, stackIndex, sideBySideIndex, series, color, negativeColor, strokeColor, strokeWidth, dataSubsetType) {
		if (seriesIndex > 0) {
			var firstSeries = snapshot._seriesList[0];
			if (firstSeries._type != $.ig.CombinedDataItemType.prototype.column) {
				color = $.ig.ColorUtility.prototype.applyAlphaToColor(190, color);
				strokeWidth = 1;
			}
		}
		color = snapshot.resolveHighlightColor1(color, index);
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, sideBySideIndex, series, dataSubsetType);
		if (this.__infoCurrent._isValid) {
			if (this.__infoCurrent._valueIsNegative && !this.__isStack) {
				color = negativeColor;
			}
			canvas.drawRect(ctx, this.__infoCurrent._boundsX + x, this.__infoCurrent._boundsY, this.__infoCurrent._boundsWidth, this.__infoCurrent._boundsHeight, color, strokeColor, strokeWidth);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderColumn(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.ColorInt, System.Single, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	renderPoint: function (canvas, ctx, snapshot, x, y, index, seriesIndex, stackIndex, series, color, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		color = snapshot.resolveHighlightColor1(color, index);
		if (this.__infoCurrent._isValid) {
			var radius = snapshot._markerRadius;
			canvas.drawCircle(ctx, this.__infoCurrent._valueLocationX + x, this.__infoCurrent._valueLocationY, radius, color, color, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderOutlierPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	renderOutlierPoint: function (canvas, ctx, snapshot, x, y, index, seriesIndex, stackIndex, series, color, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (this.__infoCurrent._isValid) {
			var radius = snapshot._markerRadius * 2;
			canvas.drawCircle(ctx, this.__infoCurrent._valueLocationX + x, this.__infoCurrent._valueLocationY, radius, color, color, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderOutlierPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderLine: function (canvas, ctx, snapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		if (index >= lastIndex) {
			return;
		}
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack) {
			if (this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative) {
				return;
			}
		}
		if (snapshot._highlightFadeInDataIndex >= 0) {
			color = $.ig.ColorUtility.prototype.transitionAlpha(color, snapshot._nonHighlightedAlpha / 255);
		}
		this.__x0 = (index == 0 ? this.__infoCurrent._boundsX : this.__infoCurrent._valueLocationX) + x;
		this.__x1 = this.__infoCurrent._valueLocationX + x;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__y1 = this.__infoCurrent._valueLocationY;
		this.__x2 = this.__infoNext._valueLocationX + x;
		this.__y2 = this.__infoNext._valueLocationY;
		canvas.drawComplexLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		if (index == lastIndex - 1) {
			canvas.drawLine(ctx, this.__x2, this.__y2, this.__infoNext._boundsX + this.__infoNext._boundsWidth + x, this.__y2, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		}
		if (!this.__isArea && !useBucketing) {
			return;
		}
		this.__x3 = this.__x0;
		this.__x4 = this.__x1;
		this.__x5 = this.__x2;
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, -1);
			this.__y3 = this.__y4 = this.__infoCurrent._valueLocationY;
			this.__y5 = this.__infoNext._valueLocationY;
		} else {
			var lowerStackIndex = 0;
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var zero = snapshot.calculateValuePosition(0, series);
				this.__y3 = this.__y4 = this.__y5 = zero;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__y3 = this.__y4 = this.__infoCurrent._valueLocationY;
				this.__y5 = this.__infoNext._valueLocationY;
			}
		}
		if (!this.__isArea) {
			canvas.drawComplexLine(ctx, this.__x3, this.__y3, this.__x4, this.__y4, this.__x5, this.__y5, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
			if (index == lastIndex - 1) {
				canvas.drawLine(ctx, this.__x2, this.__y5, this.__infoNext._boundsX + this.__infoNext._boundsWidth + x, this.__y5, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
			}
		}
		canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		if (index == lastIndex - 1) {
			canvas.drawRect(ctx, this.__x2, this.__y2, this.__infoNext._boundsX + this.__infoNext._boundsWidth + x - this.__x2, this.__y5 - this.__y2, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderStepLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderStepLine: function (canvas, ctx, snapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, index < lastIndex ? index + 1 : index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack && this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative && index != lastIndex) {
			return;
		}
		if (snapshot._highlightFadeInDataIndex >= 0) {
			color = $.ig.ColorUtility.prototype.transitionAlpha(color, snapshot._nonHighlightedAlpha / 255);
		}
		this.__x0 = this.__infoCurrent._boundsX - snapshot._itemSpacing / 2 + x;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__y1 = this.__y0;
		if (index == 0) {
			this.__x0 = this.__infoCurrent._boundsX + x;
		}
		if (index == lastIndex) {
			this.__x1 = this.__x0;
			this.__x2 = this.__infoCurrent._boundsX + this.__infoCurrent._boundsWidth + x;
			this.__y2 = this.__y0;
		} else {
			this.__x1 = this.__infoNext._boundsX - snapshot._itemSpacing / 2 + x;
			this.__x2 = this.__x1;
			this.__y2 = this.__infoNext._valueLocationY;
		}
		canvas.drawComplexLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		if (!this.__isArea && !useBucketing) {
			return;
		}
		this.__x3 = this.__x0;
		this.__x4 = this.__x1;
		this.__x5 = this.__x2;
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, index < lastIndex ? index + 1 : index, seriesIndex, stackIndex, -1, series, -1);
			this.__y3 = this.__y4 = this.__y5 = this.__infoCurrent._valueLocationY;
			if (index < lastIndex) {
				this.__y5 = this.__infoNext._valueLocationY;
			}
		} else {
			var lowerStackIndex = 0;
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var zero = snapshot.calculateValuePosition(0, series);
				this.__y3 = this.__y4 = this.__y5 = zero;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, index < lastIndex ? index + 1 : index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__y3 = this.__y4 = this.__y5 = this.__infoCurrent._valueLocationY;
				if (index < lastIndex) {
					this.__y5 = this.__infoNext._valueLocationY;
				}
			}
		}
		if (!this.__isArea) {
			canvas.drawComplexLine(ctx, this.__x3, this.__y3, this.__x4, this.__y4, this.__x5, this.__y5, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		}
		canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderStepLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderSpline(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderSpline: function (canvas, ctx, snapshot, x, y, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		if (index >= lastIndex) {
			return;
		}
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack) {
			if (this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative) {
				return;
			}
		}
		if (snapshot._highlightFadeInDataIndex >= 0) {
			color = $.ig.ColorUtility.prototype.transitionAlpha(color, snapshot._nonHighlightedAlpha / 255);
		}
		this.__x0 = this.__infoCurrent._valueLocationX + x;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__x1 = this.__infoNext._valueLocationX + x;
		this.__y1 = this.__infoNext._valueLocationY;
		this.__cx0 = snapshot.calculateCategoryPosition(this.__controlPointsX[index * 2]) + x;
		this.__cy0 = snapshot.calculateValuePosition(this.__controlPointsY[index * 2], series);
		this.__cx1 = snapshot.calculateCategoryPosition(this.__controlPointsX[index * 2 + 1]) + x;
		this.__cy1 = snapshot.calculateValuePosition(this.__controlPointsY[index * 2 + 1], series);
		canvas.drawCurve(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__cx0, this.__cy0, this.__cx1, this.__cy1, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		if (!this.__isArea && !useBucketing) {
			return;
		}
		this.__x2 = this.__x0;
		this.__x3 = this.__x1;
		this.__cx2 = this.__cx0;
		this.__cx3 = this.__cx1;
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, -1);
			this.__y2 = this.__infoCurrent._valueLocationY;
			this.__y3 = this.__infoNext._valueLocationY;
			this.__cy2 = snapshot.calculateValuePosition(this.__controlPointsMinY[index * 2], series);
			this.__cy3 = snapshot.calculateValuePosition(this.__controlPointsMinY[index * 2 + 1], series);
		} else {
			var lowerStackIndex = 0;
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var zero = snapshot.calculateValuePosition(0, series);
				this.__y2 = this.__y3 = this.__cy2 = this.__cy3 = zero;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__y2 = this.__infoCurrent._valueLocationY;
				this.__y3 = this.__infoNext._valueLocationY;
				var s = snapshot._seriesList[seriesIndex];
				var controlPoints = s._splineYControlPoints[stackIndex];
				this.__cy2 = snapshot.calculateValuePosition(controlPoints[index * 2], series);
				this.__cy3 = snapshot.calculateValuePosition(controlPoints[index * 2 + 1], series);
			}
		}
		if (!this.__isArea) {
			canvas.drawCurve(ctx, this.__x2, this.__y2, this.__x3, this.__y3, this.__cx2, this.__cy2, this.__cx3, this.__cy3, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		}
		canvas.drawCustomCurvedShape(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__cx0, this.__cy0, this.__cx1, this.__cy1, this.__x3, this.__y3, this.__x2, this.__y2, this.__cx3, this.__cy3, this.__cx2, this.__cy2, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderSpline(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderRangeArea(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Boolean)" />*/
	renderRangeArea: function (canvas, ctx, snapshot, x, y, index, seriesIndex, series, color, negativeColor, useBucketing) {
		if (index >= $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval)) {
			return;
		}
		var currentColor = color;
		var dataSubsetType = useBucketing ? 1 : 0;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 0, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, 0, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		var bottomLeft = (this.__infoCurrent._valueIsNegative ? this.__infoCurrent._valueLocationY - this.__infoCurrent._boundsHeight : this.__infoCurrent._valueLocationY + this.__infoCurrent._boundsHeight);
		var bottomRight = (this.__infoNext._valueIsNegative ? this.__infoNext._valueLocationY - this.__infoNext._boundsHeight : this.__infoNext._valueLocationY + this.__infoNext._boundsHeight);
		this.__x0 = (index == 0 ? this.__infoCurrent._boundsX : this.__infoCurrent._valueLocationX) + x;
		this.__x1 = this.__infoCurrent._valueLocationX + x;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__y1 = this.__infoCurrent._valueLocationY;
		this.__x2 = this.__infoNext._valueLocationX + x;
		this.__y2 = this.__infoNext._valueLocationY;
		if (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
			this.__x1 = this.__x2;
			this.__x2 = this.__infoNext._boundsX + this.__infoNext._boundsWidth + x;
			this.__y1 = this.__y2;
		}
		this.__x3 = this.__x0;
		this.__x4 = this.__x1;
		this.__x5 = this.__x2;
		this.__y3 = this.__y4 = bottomLeft;
		this.__y5 = bottomRight;
		if (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
			this.__y4 = this.__y5;
		}
		canvas.drawComplexLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		canvas.drawComplexLine(ctx, this.__x3, this.__y3, this.__x4, this.__y4, this.__x5, this.__y5, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		if (this.__y3 <= this.__y0 && this.__y5 <= this.__y2) {
			currentColor = negativeColor;
		}
		if ((this.__y3 < this.__y0 && this.__y5 > this.__y2) || (this.__y3 > this.__y0 && this.__y5 < this.__y2)) {
			var x1 = index == 0 ? this.__x1 : this.__x0;
			var x2 = (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) ? this.__x4 : this.__x5;
			var intersectionPoint = $.ig.ChartsUtility.prototype.getIntersectionPointOfTwoLines(x1, this.__y0, x2, this.__y2, x1, this.__y3, x2, this.__y5);
			var xi = intersectionPoint._x;
			var yi = intersectionPoint._y;
			canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, xi, yi, xi, yi, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, this.__y0 > this.__y3 ? negativeColor : color), 0, 0);
			if (index < $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
				this.__x1 = xi;
				this.__y1 = yi;
			}
			canvas.drawCustomShape2(ctx, xi, yi, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, xi, yi, $.ig.ColorUtility.prototype.applyAlphaToColor(100, this.__y0 > this.__y3 ? color : negativeColor), 0, 0);
		} else {
			canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, currentColor), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderRangeArea(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CategoryChartLayer::RenderFinancialPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.ColorInt, System.Int32)" />*/
	renderFinancialPoint: function (canvas, ctx, snapshot, x, y, index, seriesIndex, sideBySideIndex, series, color, type, negativeColor, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 0, sideBySideIndex, series, dataSubsetType);
		var open = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 1, sideBySideIndex, series, dataSubsetType);
		var high = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 2, sideBySideIndex, series, dataSubsetType);
		var low = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 3, sideBySideIndex, series, dataSubsetType);
		var close = this.__infoCurrent._valueLocationY;
		if ($.ig.util.isNaN(open) || $.ig.util.isNaN(high) || $.ig.util.isNaN(low) || $.ig.util.isNaN(close)) {
			return;
		}
		var columnHeight = Math.abs(open - close);
		var top = Math.min(open, close);
		if (columnHeight == 0) {
			columnHeight = 1;
		}
		if (open < close) {
			color = negativeColor;
		}
		color = snapshot.resolveHighlightColor1(color, index);
		if (type == $.ig.CombinedDataItemType.prototype.candlestick) {
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, low, this.__infoCurrent._valueLocationX + x, top + columnHeight, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
			canvas.drawRect(ctx, this.__infoCurrent._boundsX + x, top, this.__infoCurrent._boundsWidth, columnHeight, color, color, 0);
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, top, this.__infoCurrent._valueLocationX + x, high, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		} else {
			canvas.drawLine(ctx, this.__infoCurrent._boundsX + x, open, this.__infoCurrent._valueLocationX + x, open, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, low, this.__infoCurrent._valueLocationX + x, high, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, close, this.__infoCurrent._valueLocationX + this.__infoCurrent._boundsWidth / 2 + x, close, color, $.ig.CategoryChartLayer.prototype.lINE_THICKNESS);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryChartLayer::RenderFinancialPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.ColorInt, System.Int32)" />*/
	,
	$type: new $.ig.Type('CategoryChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryChartLayer" />*/

/*<BeginType Name="Infragistics.CategoryXAxisLayer" />*/

$.ig.util.defType('CategoryXAxisLayer', 'CalculatedLayer', {
	/*<BeginMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return (snapshot)._xAxisBottomFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._xAxisBottomFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return (snapshot)._xAxisBottomFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._xAxisBottomFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryXAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
	},
	/*<BeginMethod Name="System.Void Infragistics.CategoryXAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (!seriesSnapshot._resolvedXAxisBottomLabelsHidden && seriesSnapshot._labels != null && seriesSnapshot._labelInterval > 0) {
			this.__textInstructions._textColor = seriesSnapshot._fontColor;
			this.__textInstructions._degrees = seriesSnapshot._labelAngle;
			this.__textInstructions._font = seriesSnapshot._fontName;
			this.__textInstructions._fontSize = seriesSnapshot._fontSize;
			for (var i = seriesSnapshot._startIndex; i <= seriesSnapshot._endIndex; i += seriesSnapshot._valueInterval) {
				if ((i % seriesSnapshot._labelInterval) == 0) {
					var adjustedIndex = seriesSnapshot.adjustIndexForInterval(i);
					var label = seriesSnapshot._subsetIndices.length > 0 ? seriesSnapshot.labelForItem(seriesSnapshot._subsetIndices[adjustedIndex]) : seriesSnapshot.labelForItem(i);
					this.__textInstructions._text = label;
					this.__textInstructions._x = seriesSnapshot.calcItemCenter(adjustedIndex) + x;
					this.__textInstructions._y = y;
					this.__textInstructions.draw(canvas, ctx);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryXAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('CategoryXAxisLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryXAxisLayer" />*/

/*<BeginType Name="Infragistics.CategoryYAxisLayer" />*/

$.ig.util.defType('CategoryYAxisLayer', 'CalculatedLayer', {
	/*<BeginMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return (snapshot)._yAxisLeftFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._yAxisLeftFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return (snapshot)._yAxisLeftFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._yAxisLeftFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.CategoryYAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
	},
	/*<BeginMethod Name="System.Void Infragistics.CategoryYAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (!seriesSnapshot._resolvedYAxisLeftLabelsHidden && seriesSnapshot._labels != null && seriesSnapshot._labelInterval > 0) {
			this.__textInstructions._textColor = seriesSnapshot._fontColor;
			this.__textInstructions._degrees = seriesSnapshot._labelAngle;
			this.__textInstructions._font = seriesSnapshot._fontName;
			this.__textInstructions._fontSize = seriesSnapshot._fontSize;
			this.__textInstructions._hAlignment = seriesSnapshot._yAxisLabelHorizontalAlignment;
			for (var i = seriesSnapshot._startIndex; i <= seriesSnapshot._endIndex; i += seriesSnapshot._valueInterval) {
				if ((i % seriesSnapshot._labelInterval) == 0) {
					var adjustedIndex = seriesSnapshot.adjustIndexForInterval(i);
					var label = seriesSnapshot._subsetIndices.length > 0 ? seriesSnapshot.labelForItem(seriesSnapshot._subsetIndices[adjustedIndex]) : seriesSnapshot.labelForItem(i);
					this.__textInstructions._text = label;
					if (this.__textInstructions._hAlignment == $.ig.TextHorizontalAlignment.prototype.left) {
						this.__textInstructions._x = x;
					} else {
						this.__textInstructions._x = x + w / 2;
					}
					this.__textInstructions._maxX = x + w;
					this.__textInstructions._y = seriesSnapshot.calcItemCenter(adjustedIndex) + y;
					this.__textInstructions.draw(canvas, ctx);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CategoryYAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('CategoryYAxisLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CategoryYAxisLayer" />*/

/*<BeginType Name="Infragistics.FunnelChartLabelLayer" />*/

$.ig.util.defType('FunnelChartLabelLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var funnelSnapshot = snapshot;
		if (funnelSnapshot._labelLocation == $.ig.FunnelChartLabelLocation.prototype.noLabels) {
			return;
		}
		var x1, x2, x3, y1, y2, y3;
		var currentY = y + h;
		var leaderLineOffset = 0;
		var leaderLinePadding = 5;
		for (var i = 0; i < funnelSnapshot._visibleSliceCount; i++) {
			var slice = funnelSnapshot.resolveVisibleSliceAtIndex(i);
			if (slice._value == 0) {
				continue;
			}
			var fontColor = funnelSnapshot._fontColor;
			if (slice._isLabelVisible) {
				funnelSnapshot.resolveHighlightColor1(fontColor, slice._index);
				canvas.drawText(ctx, slice._labelPositionX, slice._labelPositionY, 0, slice._label, fontColor, funnelSnapshot._fontSizeToUse, funnelSnapshot._fontName, slice._labelSize._height);
				if (funnelSnapshot._labelLocation != $.ig.FunnelChartLabelLocation.prototype.inside) {
					x1 = funnelSnapshot._centerX;
					x2 = slice._labelPositionX;
					x3 = x2;
					y1 = currentY - slice._height / 2;
					y2 = y1;
					y3 = slice._labelPositionY + slice._labelSize._height / 2;
					if (funnelSnapshot._labelLocation == $.ig.FunnelChartLabelLocation.prototype.outsideLeft) {
						x1 -= (slice._bottomWidth + slice._topWidth) / 4 + leaderLinePadding;
						x2 += slice._labelSize._width + leaderLinePadding + leaderLineOffset;
						x3 += slice._labelSize._width + leaderLinePadding;
					}
					if (funnelSnapshot._labelLocation == $.ig.FunnelChartLabelLocation.prototype.outsideRight) {
						x1 += (slice._bottomWidth + slice._topWidth) / 4 + leaderLinePadding;
						x2 -= leaderLineOffset + leaderLinePadding;
						x3 -= leaderLinePadding;
					}
					canvas.drawLine(ctx, x1, y1, x2, y2, fontColor, 1);
					canvas.drawLine(ctx, x2, y2, x3, y3, fontColor, 1);
				}
			}
			currentY -= slice._height;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('FunnelChartLabelLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartLabelLayer" />*/

/*<BeginType Name="Infragistics.FunnelChartLayer" />*/

$.ig.util.defType('FunnelChartLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.FunnelChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var funnelSnapshot = snapshot;
		if (funnelSnapshot._visibleSliceCount == 0) {
			return;
		}
		var currentY = y + h;
		var centerX = x + funnelSnapshot._centerX;
		var px = new Array(4);
		var py = new Array(4);
		for (var i = 0; i < funnelSnapshot._visibleSliceCount; i++) {
			var currentSlice = funnelSnapshot.resolveVisibleSliceAtIndex(i);
			var fill = currentSlice._isSelected ? funnelSnapshot._selectedSliceColor : currentSlice._fillColor;
			var stroke = currentSlice._isSelected ? funnelSnapshot._selectedSliceOutlineColor : currentSlice._strokeColor;
			var thickness = currentSlice._isSelected ? funnelSnapshot._selectedSliceOutlineStrokeWidth : currentSlice._strokeWidth;
			px[1] = centerX - currentSlice._bottomWidth / 2;
			px[0] = centerX + currentSlice._bottomWidth / 2;
			px[2] = centerX - currentSlice._topWidth / 2;
			px[3] = centerX + currentSlice._topWidth / 2;
			py[0] = py[1] = currentY;
			py[2] = py[3] = currentY = currentY - currentSlice._height;
			fill = funnelSnapshot.resolveHighlightColor1(fill, currentSlice._index);
			stroke = funnelSnapshot.resolveHighlightColor1(stroke, currentSlice._index);
			canvas.drawCustomShape(ctx, px, py, true, fill, stroke, thickness);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FunnelChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('FunnelChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FunnelChartLayer" />*/

/*<BeginType Name="Infragistics.LegendLayer" />*/

$.ig.util.defType('LegendLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Single Infragistics.LegendLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return (snapshot)._legendLocationFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.LegendLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.LegendLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._legendLocationFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.LegendLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.LegendLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return (snapshot)._legendLocationFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.LegendLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.LegendLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._legendLocationFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.LegendLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.LegendLayer::MarkerTop()" />*/
	markerTop: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(3);
	}
	/*<EndProperty Name="System.Single Infragistics.LegendLayer::MarkerTop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.LegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var legendSnapshot = snapshot;
		var reservedHalfMarkerSize = legendSnapshot._legendMarkerSize / 2;
		if (legendSnapshot._legendLocation != $.ig.LegendLocation.prototype.none && w > 0 && h > 0) {
			for (var i = 0; i < legendSnapshot._seriesCount; i++) {
				var s = legendSnapshot._seriesList[i];
				var shape = legendSnapshot.getLegendIconShape(i);
				var iconSize = legendSnapshot.getLegendIconSize(shape);
				for (var j = 0; j < s._stackKeys.length; j++) {
					var offset = j * 4;
					var lx = x + s._legendPositions[offset];
					var ly = y + s._legendPositions[offset + 1];
					var lh = s._legendPositions[offset + 3];
					if ($.ig.util.isNaN(lx) || $.ig.util.isNaN(ly)) {
						continue;
					}
					var color = s._colors[j];
					var markerRadius = iconSize._width / 2;
					var cX = lx + reservedHalfMarkerSize;
					var cY = ly + reservedHalfMarkerSize + this.markerTop();
					var label = legendSnapshot.getLabelForLegend(i, j);
					switch (shape) {
						case $.ig.LegendIconShape.prototype.circle:
							canvas.drawCircle(ctx, cX, cY, markerRadius, color, 0, 0);
							break;
						case $.ig.LegendIconShape.prototype.line:
						case $.ig.LegendIconShape.prototype.square:
							canvas.drawRect(ctx, Math.round((cX - iconSize._width / 2)), Math.round((cY - iconSize._height / 2)), iconSize._width, iconSize._height, color, 0, 0);
							break;
					}
					canvas.drawText(ctx, lx + iconSize._width + legendSnapshot._legendSmallPadding, ly, 0, label, legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, legendSnapshot._legendFontName, lh);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.LegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('LegendLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.LegendLayer" />*/

/*<BeginType Name="Infragistics.LineSegment" />*/

$.ig.util.defType('LineSegment', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_prevX: 0,
	_prevY: 0,
	_valueX: 0,
	_valueY: 0,
	_nextX: 0,
	_nextY: 0,
	$type: new $.ig.Type('LineSegment', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.LineSegment" />*/

/*<BeginType Name="Infragistics.MarkerLayer" />*/

$.ig.util.defType('MarkerLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Single Infragistics.MarkerLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._canvasFrameY - (snapshot)._innerAxisPadding;
	}
	/*<EndMethod Name="System.Single Infragistics.MarkerLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.MarkerLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._canvasFrameHeight + (snapshot)._innerAxisPadding * 2;
	}
	/*<EndMethod Name="System.Single Infragistics.MarkerLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var info = new $.ig.ItemLayoutInfo();
		var markerRadius = seriesSnapshot._markerRadius;
		var fadePercentage = (255 - seriesSnapshot._nonHighlightedAlpha) / (255 - (seriesSnapshot._usingClickAdorners ? $.ig.SnapshotBase.prototype.cLICK_FADED_ALPHA : $.ig.SnapshotBase.prototype.hOVER_FADED_ALPHA));
		if (seriesSnapshot._valueInterval != 1 && seriesSnapshot._combineClusteredValues) {
			return;
		}
		if (seriesSnapshot.isPolar()) {
			x = y = 0;
		}
		for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
			var s = seriesSnapshot._seriesList[seriesIndex];
			if (s._hideMarkers) {
				continue;
			}
			var type = s._type;
			var colors = s._colors;
			var keyChain = s._stackKeys;
			for (var stackIndex = 0; stackIndex < keyChain.length; stackIndex++) {
				var color = colors[stackIndex];
				for (var i = seriesSnapshot._startIndex; i <= seriesSnapshot._endIndex; i += seriesSnapshot._valueInterval) {
					if (i % seriesSnapshot._valueInterval == 0) {
						var index = seriesSnapshot.adjustIndexForInterval(i);
						switch (type) {
							case $.ig.CombinedDataItemType.prototype.line:
							case $.ig.CombinedDataItemType.prototype.spline:
							case $.ig.CombinedDataItemType.prototype.area:
							case $.ig.CombinedDataItemType.prototype.splineArea:
								{
									if ($.ig.util.isNaN(seriesSnapshot.valueForItem(i, seriesIndex))) {
										break;
									}
									seriesSnapshot.calculateValueBounds(info, index, seriesIndex, stackIndex, -1, s);
									var actualMarkerRadius = Math.min($.ig.truncate((info._boundsWidth * 0.75)), markerRadius);
									var renderColor = color;
									var strokeColor = seriesSnapshot._markerStrokeColor;
									if (seriesSnapshot._highlightFadeInDataIndex >= 0) {
										if ($.ig.intDivide(seriesSnapshot._highlightFadeInDataIndex, seriesSnapshot._valueInterval) == index) {
											renderColor = $.ig.ColorUtility.prototype.transitionAlpha(renderColor, seriesSnapshot._highlightFadeInAlpha / 255);
											actualMarkerRadius = (actualMarkerRadius * (1 + (fadePercentage * 0.15000000596046448)));
										} else if (seriesSnapshot._highlightFadeOutDataIndex != -1 && $.ig.intDivide(seriesSnapshot._highlightFadeOutDataIndex, seriesSnapshot._valueInterval) == index) {
											renderColor = $.ig.ColorUtility.prototype.transitionAlpha(renderColor, seriesSnapshot._highlightFadeOutAlpha / 255);
											actualMarkerRadius = (actualMarkerRadius * (1.15 - (fadePercentage * 0.40000000596046448)));
										} else if ($.ig.intDivide(seriesSnapshot._highlightFadeInDataIndex, seriesSnapshot._valueInterval) != index) {
											renderColor = $.ig.ColorUtility.prototype.transitionAlpha(renderColor, seriesSnapshot._nonHighlightedAlpha / 255);
											actualMarkerRadius = (actualMarkerRadius * (1 - (fadePercentage * 0.25)));
										}
									}
									canvas.drawCircle(ctx, info._valueLocationX + x, info._valueLocationY, actualMarkerRadius, renderColor, strokeColor, 1);
									break;
								}
							default: break;
						}
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.MarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('MarkerLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.MarkerLayer" />*/

/*<BeginType Name="Infragistics.NumericXAxisLayer" />*/

$.ig.util.defType('NumericXAxisLayer', 'CalculatedLayer', {
	__location: 0,
	init: function (location) {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__location = location;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.NumericXAxisLayer::shouldClip()" />*/
	shouldClip: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NumericXAxisLayer::shouldClip()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericXAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xAxisBottomFrameX : s._xAxisTopFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericXAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericXAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xAxisBottomFrameY : s._xAxisTopFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericXAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericXAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xAxisBottomFrameWidth : s._xAxisTopFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericXAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericXAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xAxisBottomFrameHeight : s._xAxisTopFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericXAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NumericXAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (this.__location == $.ig.XAxisLocation.prototype.top && (!seriesSnapshot._hasTopAxis || seriesSnapshot._resolvedXAxisTopLabelsHidden)) {
			return;
		}
		if (this.__location == $.ig.XAxisLocation.prototype.bottom && (!seriesSnapshot._hasBottomAxis || seriesSnapshot._resolvedXAxisBottomLabelsHidden)) {
			return;
		}
		var textInstructions = new $.ig.TextInstructions();
		textInstructions._textColor = seriesSnapshot._fontColor;
		textInstructions._font = seriesSnapshot._fontName;
		textInstructions._fontSize = seriesSnapshot._fontSize;
		textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
		textInstructions._degrees = 0;
		var numberOfLabels = seriesSnapshot._numberOfMaxHorizontalNumericLabels;
		var stepSize = this.__location == $.ig.XAxisLocation.prototype.top ? seriesSnapshot._numericTopAxisStepSize : seriesSnapshot._numericBottomAxisStepSize;
		textInstructions._y = y;
		var min = (this.__location == $.ig.XAxisLocation.prototype.top) ? seriesSnapshot._visibleTopMin : seriesSnapshot._visibleBottomMin;
		var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
		var logBase = -1;
		if (seriesSnapshot._resolvedXAxisTopIsLogarithmic && this.__location == $.ig.XAxisLocation.prototype.top && !seriesSnapshot._actualStack100ModeEnabled) {
			logBase = seriesSnapshot._xAxisTopLogBase;
		} else if (seriesSnapshot._resolvedXAxisBottomIsLogarithmic && this.__location == $.ig.XAxisLocation.prototype.bottom && !seriesSnapshot._actualStack100ModeEnabled) {
			logBase = seriesSnapshot._xAxisBottomLogBase;
		}
		var useSecondary = seriesSnapshot._useSecondaryAxisValueFormat;
		var useMK = useSecondary ? seriesSnapshot._secondaryAxisValueFormatUseMKFormatting : seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = useSecondary ? seriesSnapshot._secondaryAxisValueFormatNegativeMode : seriesSnapshot._primaryAxisValueFormatNegativeMode;
		var numType = useSecondary ? seriesSnapshot._secondaryAxisValueFormatType : seriesSnapshot._primaryAxisValueFormatType;
		var digits = useSecondary ? seriesSnapshot._secondaryAxisValueFormatFractionDigits : seriesSnapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = useSecondary ? seriesSnapshot._secondaryAxisValueFormatCurrencySymbol : seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = useSecondary ? seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator : seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
		if (seriesSnapshot._actualStack100ModeEnabled) {
			digits = 0;
			useMK = false;
			showGroupingSeparator = false;
			numType = $.ig.FormatSettingsNumberType.prototype.percent;
		}
		var value = 0;
		for (var i = 0; i <= numberOfLabels; i++) {
			if (logBase != -1) {
				value = (Math.pow(logBase, i * Math.max(1, stepSize)));
			} else {
				value = (actualMin + (i * stepSize));
			}
			var xPos = seriesSnapshot.calculateHorizontalValuePosition(value, this.__location);
			if (Math.round((xPos * 1000)) > Math.round((seriesSnapshot._canvasFrameX + seriesSnapshot._canvasFrameWidth * 1000))) {
				break;
			}
			if (Math.round((xPos * 1000)) < Math.round((seriesSnapshot._canvasFrameX * 1000))) {
				continue;
			}
			textInstructions._text = $.ig.ChartsUtility.prototype.labelForValue(value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			textInstructions._x = xPos;
			textInstructions.draw(canvas, ctx);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NumericXAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('NumericXAxisLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NumericXAxisLayer" />*/

/*<BeginType Name="Infragistics.NumericYAxisLayer" />*/

$.ig.util.defType('NumericYAxisLayer', 'CalculatedLayer', {
	__location: 0,
	init: function (location) {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__location = location;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.NumericYAxisLayer::shouldClip()" />*/
	shouldClip: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NumericYAxisLayer::shouldClip()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericYAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yAxisLeftFrameX : s._yAxisRightFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericYAxisLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericYAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yAxisLeftFrameY : s._yAxisRightFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericYAxisLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericYAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yAxisLeftFrameWidth : s._yAxisRightFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericYAxisLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.NumericYAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yAxisLeftFrameHeight : s._yAxisRightFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.NumericYAxisLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NumericYAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (this.__location == $.ig.YAxisLocation.prototype.left && (!seriesSnapshot._hasLeftAxis || seriesSnapshot._resolvedYAxisLeftLabelsHidden)) {
			return;
		}
		if (this.__location == $.ig.YAxisLocation.prototype.right && (!seriesSnapshot._hasRightAxis || seriesSnapshot._resolvedYAxisRightLabelsHidden)) {
			return;
		}
		var textInstructions = new $.ig.TextInstructions();
		textInstructions._textColor = seriesSnapshot._fontColor;
		textInstructions._font = seriesSnapshot._fontName;
		textInstructions._fontSize = seriesSnapshot._fontSize;
		textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
		textInstructions._degrees = 0;
		var numberOfLabels = seriesSnapshot._numberOfMaxVerticalNumericLabels;
		var stepSize = (this.__location == $.ig.YAxisLocation.prototype.left) ? seriesSnapshot._numericLeftAxisStepSize : seriesSnapshot._numericRightAxisStepSize;
		textInstructions._x = x + (w / 2);
		var min = (this.__location == $.ig.YAxisLocation.prototype.left) ? seriesSnapshot._visibleLeftMin : seriesSnapshot._visibleRightMin;
		var logBase = -1;
		if (seriesSnapshot._resolvedYAxisLeftIsLogarithmic && this.__location == $.ig.YAxisLocation.prototype.left && !seriesSnapshot._actualStack100ModeEnabled) {
			logBase = seriesSnapshot._yAxisLeftLogBase;
		} else if (seriesSnapshot._resolvedYAxisRightIsLogarithmic && this.__location == $.ig.YAxisLocation.prototype.right && !seriesSnapshot._actualStack100ModeEnabled) {
			logBase = seriesSnapshot._yAxisRightLogBase;
		}
		var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
		if (actualMin < 0 && logBase != -1) {
			actualMin = 0;
		}
		var useSecondary = this.__location == $.ig.YAxisLocation.prototype.right && seriesSnapshot._useSecondaryAxisValueFormat;
		var useMK = useSecondary ? seriesSnapshot._secondaryAxisValueFormatUseMKFormatting : seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = useSecondary ? seriesSnapshot._secondaryAxisValueFormatNegativeMode : seriesSnapshot._primaryAxisValueFormatNegativeMode;
		var numType = useSecondary ? seriesSnapshot._secondaryAxisValueFormatType : seriesSnapshot._primaryAxisValueFormatType;
		var digits = useSecondary ? seriesSnapshot._secondaryAxisValueFormatFractionDigits : seriesSnapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = useSecondary ? seriesSnapshot._secondaryAxisValueFormatCurrencySymbol : seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = useSecondary ? seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator : seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
		if (seriesSnapshot._actualStack100ModeEnabled) {
			digits = 0;
			useMK = false;
			showGroupingSeparator = false;
			numType = $.ig.FormatSettingsNumberType.prototype.percent;
		}
		var value = 0;
		for (var i = 0; i <= numberOfLabels; i++) {
			if (logBase != -1) {
				value = (Math.pow(logBase, i * Math.max(1, stepSize)));
			} else {
				value = (actualMin + (i * stepSize));
			}
			var yPos = seriesSnapshot.calculateVerticalValuePosition(value, this.__location);
			if (yPos < y) {
				break;
			}
			if (yPos >= seriesSnapshot._canvasFrameY && yPos <= seriesSnapshot._canvasFrameY + seriesSnapshot._canvasFrameHeight) {
				textInstructions._y = yPos - seriesSnapshot._labelTextHeight / 2;
				textInstructions._text = $.ig.ChartsUtility.prototype.labelForValue(value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
				textInstructions.draw(canvas, ctx);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NumericYAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('NumericYAxisLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NumericYAxisLayer" />*/

/*<BeginType Name="Infragistics.PieChartLabelLayer" />*/

$.ig.util.defType('PieChartLabelLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.PieChartLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var pieSnapshot = snapshot;
		if (pieSnapshot._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.noLabels) {
			return;
		}
		var totalSlices = pieSnapshot._visibleSliceCount;
		var fontName = pieSnapshot._fontName;
		var fontSize = pieSnapshot._fontSizeToUse;
		var innerExtent = pieSnapshot._innerExtent;
		var actualRadiusFactor = pieSnapshot._actualRadiusFactor;
		var centerX = pieSnapshot._centerX;
		var centerY = pieSnapshot._centerY;
		for (var i = 0; i < totalSlices; i++) {
			var slice = pieSnapshot.resolveVisibleSliceAtIndex(i);
			if (!slice._isLabelVisible) {
				continue;
			}
			var fontColor = pieSnapshot.resolveHighlightColor1(pieSnapshot._fontColor, slice._index);
			var startDegree = slice._startAngle;
			var endDegree = slice._endAngle;
			var sliceLabel = slice._label;
			var stringSize = $.ig.NativeUtility.prototype.utility().measureText(sliceLabel, fontName, fontSize);
			switch (pieSnapshot._resolvedLabelLocation) {
				case $.ig.PieChartLabelLocation.prototype.inside:
				case $.ig.PieChartLabelLocation.prototype.insideEdge:
				case $.ig.PieChartLabelLocation.prototype.outsideEdge:
					var outerMidPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(startDegree, endDegree, x, y, w, h, innerExtent, actualRadiusFactor);
					var outerMidAngle = $.ig.ChartsUtility.prototype.getAngleFromCenter(centerX, centerY, outerMidPoint._x, outerMidPoint._y);
					canvas.drawCenteredArcText(ctx, centerX, centerY, slice._label, slice._labelExtent, $.ig.CPMathUtility.prototype.convertDegreesToRadians(360 - outerMidAngle), fontColor, fontName, fontSize, slice._isClockwise);
					break;
				case $.ig.PieChartLabelLocation.prototype.noLabels:
				case $.ig.PieChartLabelLocation.prototype.outsideCenter:
				case $.ig.PieChartLabelLocation.prototype.outsideCorner:
				case $.ig.PieChartLabelLocation.prototype.outsideColumn:
					break;
			}
			if (pieSnapshot._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideCenter) {
				canvas.drawCenteredCharacter(ctx, centerX, centerY, sliceLabel, slice._labelExtent, $.ig.CPMathUtility.prototype.convertDegreesToRadians(360 - slice._outerMidAngle), fontColor, fontName, fontSize, 0);
				var midAngleRadians = (slice._startAngle + slice._endAngle) / 2 * (Math.PI / 180);
				var offset = Math.abs(Math.cos(midAngleRadians) * stringSize._width) + Math.abs(Math.sin(midAngleRadians) * stringSize._height);
				var outerMidLabelRadius = slice._outerMidLabelRadius - (offset / pieSnapshot._availableSize);
				var outerMidLabelPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(startDegree, endDegree, x, y, w, h, innerExtent, outerMidLabelRadius);
				canvas.drawLine(ctx, slice._outerMidPointX, slice._outerMidPointY, outerMidLabelPoint._x, outerMidLabelPoint._y, fontColor, 1);
			} else if (pieSnapshot._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideCorner) {
				canvas.drawText(ctx, slice._labelPositionX - stringSize._width / 2, slice._labelPositionY - stringSize._height / 2, 0, sliceLabel, fontColor, fontSize, fontName, stringSize._height);
				var outerMidLabelPoint1 = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(startDegree, endDegree, x, y, w, h, innerExtent, slice._outerMidLabelRadius);
				canvas.drawLine(ctx, slice._outerMidPointX, slice._outerMidPointY, outerMidLabelPoint1._x, outerMidLabelPoint1._y, fontColor, 1);
			} else if (pieSnapshot._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideColumn) {
				canvas.drawText(ctx, slice._labelPositionX - stringSize._width / 2, slice._labelPositionY - stringSize._height / 2, 0, sliceLabel, fontColor, fontSize, fontName, stringSize._height);
				canvas.drawLine(ctx, slice._labelTerminusPointX, slice._labelTerminusPointY, slice._outerMidPointBranchX, slice._outerMidPointBranchY, fontColor, 1);
				canvas.drawLine(ctx, slice._outerMidPointBranchX, slice._outerMidPointBranchY, slice._outerMidPointX, slice._outerMidPointY, fontColor, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('PieChartLabelLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartLabelLayer" />*/

/*<BeginType Name="Infragistics.PieChartLayer" />*/

$.ig.util.defType('PieChartLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.PieChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var pieSnapshot = snapshot;
		var totalSlices = pieSnapshot._visibleSliceCount;
		var labelRects = new $.ig.Array();
		if (totalSlices == 0) {
			return;
		}
		var sliceX = pieSnapshot._centerX - pieSnapshot._canvasFrameWidth / 2;
		var sliceY = pieSnapshot._centerY - pieSnapshot._canvasFrameHeight / 2;
		var maxPieRadius = pieSnapshot._availableSize / 2;
		for (var i = 0; i < totalSlices; i++) {
			var slice = pieSnapshot.resolveVisibleSliceAtIndex(i);
			if (slice._value == 0) {
				continue;
			}
			var fill = slice._isSelected ? pieSnapshot._selectedSliceColor : slice._fillColor;
			var stroke = slice._isSelected ? pieSnapshot._selectedSliceOutlineColor : slice._strokeColor;
			var thickness = slice._isSelected ? pieSnapshot._selectedSliceOutlineStrokeWidth : slice._strokeWidth;
			pieSnapshot.calculateSlice(slice, sliceX, sliceY, maxPieRadius, labelRects);
			if (totalSlices == 1) {
				if (slice._isOthersSlice) {
					fill = pieSnapshot.resolveHighlightColor1(fill, -2);
					stroke = pieSnapshot.resolveHighlightColor1(stroke, -2);
				} else {
					fill = pieSnapshot.resolveHighlightColor1(fill, slice._index);
					stroke = pieSnapshot.resolveHighlightColor1(stroke, slice._index);
				}
				if (slice._innerExtent > 0) {
					canvas.drawHollowCircle(ctx, pieSnapshot._centerX, pieSnapshot._centerY, maxPieRadius, slice._innerExtent * slice._outerExtent, slice._outerExtent, fill, stroke, thickness);
				} else {
					canvas.drawCircle(ctx, pieSnapshot._centerX, pieSnapshot._centerY, pieSnapshot._radius, fill, stroke, thickness);
				}
				return;
			}
			if (!slice._isSelected) {
				var fillFactor = (pieSnapshot._fillColors.length == 1) ? i + 1 : $.ig.intDivide(i, (pieSnapshot._fillColors.length - 1));
				for (var k = 0; k < fillFactor; k++) {
					if (fillFactor == 0) {
						break;
					}
					fill = $.ig.ColorUtility.prototype.lightenColor(fill, 0.1);
				}
			}
			if (slice._isOthersSlice) {
				fill = pieSnapshot.resolveHighlightColor1(fill, -2);
				stroke = pieSnapshot.resolveHighlightColor1(stroke, -2);
			} else {
				fill = pieSnapshot.resolveHighlightColor1(fill, slice._index);
				stroke = pieSnapshot.resolveHighlightColor1(stroke, slice._index);
			}
			canvas.drawSlice(ctx, x + (slice._explodedOriginX - pieSnapshot._centerX), y + (slice._explodedOriginY - pieSnapshot._centerY), w, h, slice._startAngle, slice._endAngle, slice._innerExtent * slice._outerExtent, slice._outerExtent, fill, stroke, thickness);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('PieChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartLayer" />*/

/*<BeginType Name="Infragistics.PolarAxisLayer" />*/

$.ig.util.defType('PolarAxisLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.PolarAxisLayer::shouldClip()" />*/
	shouldClip: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.PolarAxisLayer::shouldClip()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var polarSnapshot = snapshot;
		var color = polarSnapshot._primaryAxisLineColor;
		var thickness = polarSnapshot._axisLineThickness;
		var centerX = polarSnapshot._centerX;
		var centerY = polarSnapshot._centerY;
		var startPos = polarSnapshot._radius * polarSnapshot._innerExtent;
		if (polarSnapshot._majorAxisLineThickness > 0) {
			var numberOfLabels = polarSnapshot._numberOfMaxRadiusAxisLabels;
			var stepSize = polarSnapshot._radiusAxisStepSize;
			var min = polarSnapshot._radiusAxisMin;
			var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
			var logBase = -1;
			if (polarSnapshot._radiusAxisIsLogarithmic) {
				logBase = polarSnapshot._radiusAxisLogBase;
			}
			var value = 0;
			if (actualMin < 0 && logBase != -1) {
				actualMin = 0;
			}
			for (var i = 0; i <= numberOfLabels; i++) {
				if (logBase != -1) {
					value = (actualMin + Math.pow(logBase, i));
				} else {
					value = (actualMin + (i * stepSize));
				}
				var pos = polarSnapshot.distanceFromCenter(value);
				if (pos > polarSnapshot._radius) {
					break;
				}
				if (pos >= startPos && pos <= polarSnapshot._radius) {
					canvas.drawCircle(ctx, centerX, centerY, pos, 0, polarSnapshot._majorAxisLineColor, polarSnapshot._majorAxisLineThickness);
				}
			}
		}
		if (polarSnapshot._axisLineThickness > 0) {
			canvas.drawCircle(ctx, centerX, centerY, polarSnapshot._radius, 0, color, thickness);
			if (polarSnapshot._angleAxisLabelOrientation != $.ig.AngleAxisLabelOrientation.prototype.noLabels) {
				var numberOfLabels1 = polarSnapshot._numberOfMaxAngleAxisLabels;
				var stepSize1 = polarSnapshot._angleAxisStepSize;
				var min1 = polarSnapshot._angleAxisMin;
				var max = polarSnapshot._angleAxisMax;
				var numberOfVisibleLabels = 0;
				if (polarSnapshot._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
					stepSize1 = 1;
					min1 = polarSnapshot._startIndex;
					max = polarSnapshot._endIndex;
					numberOfLabels1 = polarSnapshot._endIndex - polarSnapshot._startIndex + 1;
					numberOfVisibleLabels = $.ig.intDivide(numberOfLabels1, polarSnapshot._valueInterval);
				} else {
					numberOfVisibleLabels = $.ig.truncate(((polarSnapshot._angleAxisMax - polarSnapshot._angleAxisMin) / stepSize1));
				}
				var actualMin1 = $.ig.truncate((min1 / stepSize1)) * stepSize1;
				var logBase1 = -1;
				if (polarSnapshot._angleAxisIsLogarithmic) {
					logBase1 = polarSnapshot._angleAxisLogBase;
				}
				var value1 = 0;
				if (actualMin1 < 0 && logBase1 != -1) {
					actualMin1 = 0;
				}
				for (var i1 = 0; i1 < numberOfVisibleLabels; i1++) {
					if (logBase1 != -1) {
						value1 = (actualMin1 + Math.pow(logBase1, i1));
					} else {
						value1 = (actualMin1 + (i1 * stepSize1));
					}
					if (value1 > max) {
						break;
					}
					var lineStart = polarSnapshot.calculateXYPosition(polarSnapshot._radiusAxisMin, value1);
					var lineEnd = polarSnapshot.calculateXYPosition(polarSnapshot._radiusAxisMax, value1);
					canvas.drawLine(ctx, lineStart._x, lineStart._y, lineEnd._x, lineEnd._y, color, thickness);
				}
			}
			if (polarSnapshot._resolvedFreeStandingRadiusAxisVisible) {
				var startX = polarSnapshot._radiusAxisFrameX;
				var startY = polarSnapshot._radiusAxisFrameY;
				var endX = polarSnapshot._freeStandingRadiusAxisOrientation == $.ig.Orientation.prototype.vertical ? startX : startX + polarSnapshot._radiusAxisFrameWidth;
				var endY = polarSnapshot._freeStandingRadiusAxisOrientation == $.ig.Orientation.prototype.vertical ? startY + polarSnapshot._radiusAxisFrameHeight : startY;
				canvas.drawLine(ctx, startX, startY, endX, endY, color, thickness);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarAxisLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('PolarAxisLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PolarAxisLayer" />*/

/*<BeginType Name="Infragistics.PolarScatterChartLayer" />*/

$.ig.util.defType('PolarScatterChartLayer', 'CalculatedLayer', {
	__info: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__info = new $.ig.ItemLayoutInfo();
	},
	/*<BeginMethod Name="System.Void Infragistics.PolarScatterChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var scatterSnapshot = snapshot;
		var markerSize = scatterSnapshot._markerRadius;
		for (var seriesIndex = 0; seriesIndex < scatterSnapshot._seriesCount; seriesIndex++) {
			var s = scatterSnapshot._seriesList[seriesIndex];
			var type = s._type;
			var color = s._colors[0];
			var prevRadiusAxisValue = 0;
			var prevAngleAxisValue = 0;
			for (var i = 0; i < scatterSnapshot._itemCount; i++) {
				var valueRadius = scatterSnapshot.valueForItem1(i, seriesIndex, 0);
				var valueAngle = scatterSnapshot.valueForItem1(i, seriesIndex, 1);
				if ($.ig.util.isNaN(valueRadius) || $.ig.util.isNaN(valueAngle)) {
					continue;
				}
				var actualMarkerSize = markerSize;
				if (type == $.ig.CombinedDataItemType.prototype.bubble) {
					var radius = scatterSnapshot.valueForItem1(i, seriesIndex, 2);
					if ($.ig.util.isNaN(radius)) {
						continue;
					}
					if (scatterSnapshot._useRadiusScale) {
						radius = $.ig.CPMathUtility.prototype.getLinearSize(scatterSnapshot._minMarkerRadiusValue, scatterSnapshot._maxMarkerRadiusValue, scatterSnapshot._minBubbleRadius, scatterSnapshot._maxBubbleRadius, radius);
					}
					actualMarkerSize = radius;
				}
				var currentPt = scatterSnapshot.calculateXYPosition(valueRadius, valueAngle);
				if (type == $.ig.CombinedDataItemType.prototype.scatterLine) {
					if (i > 0) {
						canvas.drawLine(ctx, prevRadiusAxisValue, prevAngleAxisValue, currentPt._x, currentPt._y, color, $.ig.PolarScatterChartLayer.prototype.lINE_THICKNESS);
					}
					prevRadiusAxisValue = currentPt._x;
					prevAngleAxisValue = currentPt._y;
				}
				canvas.drawCircle(ctx, currentPt._x, currentPt._y, actualMarkerSize, color, scatterSnapshot._markerStrokeColor, $.ig.PolarScatterChartLayer.prototype.mARKER_STROKE_THICKNESS);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarScatterChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('PolarScatterChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PolarScatterChartLayer" />*/

/*<BeginType Name="Infragistics.RadialChartLayer" />*/

$.ig.util.defType('RadialChartLayer', 'CalculatedLayer', {
	_seriesSnapshot: null,
	__infoCurrent: null,
	__infoNext: null,
	__x0: 0,
	__x1: 0,
	__x2: 0,
	__x3: 0,
	__x4: 0,
	__x5: 0,
	__y0: 0,
	__y1: 0,
	__y2: 0,
	__y3: 0,
	__y4: 0,
	__y5: 0,
	__cx0: 0,
	__cx1: 0,
	__cx2: 0,
	__cx3: 0,
	__cy0: 0,
	__cy1: 0,
	__cy2: 0,
	__cy3: 0,
	__controlPointsX: null,
	__controlPointsY: null,
	__controlPointsMinY: null,
	__isArea: false,
	__isStack: false,
	__isSpline: false,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__infoCurrent = new $.ig.ItemLayoutInfo();
		this.__infoNext = new $.ig.ItemLayoutInfo();
	},
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		this._seriesSnapshot = snapshot;
		x = y = 0;
		var sideBySideIndex = 0;
		var useBucketing = this._seriesSnapshot._valueInterval > 1 && this._seriesSnapshot._combineClusteredValues;
		var dataSubsetType = useBucketing ? 1 : 0;
		for (var seriesIndex = 0; seriesIndex < this._seriesSnapshot._seriesCount; seriesIndex++) {
			var s = this._seriesSnapshot._seriesList[seriesIndex];
			if (this._seriesSnapshot._actualStack100ModeEnabled && !s.isStackSeries()) {
				continue;
			}
			var type = s._type;
			var keyChain = s._stackKeys;
			var stackCount = keyChain.length;
			this.__isSpline = type == $.ig.CombinedDataItemType.prototype.spline || type == $.ig.CombinedDataItemType.prototype.splineArea;
			this.__isArea = type == $.ig.CombinedDataItemType.prototype.area || type == $.ig.CombinedDataItemType.prototype.rangeArea || type == $.ig.CombinedDataItemType.prototype.splineArea || type == $.ig.CombinedDataItemType.prototype.stepArea;
			if (this.__isSpline && this._seriesSnapshot._itemCount < 2) {
				continue;
			}
			for (var stackIndex = 0; stackIndex < stackCount; stackIndex++) {
				this.__isStack = stackIndex > 0;
				if (this.__isSpline) {
					this.__controlPointsX = s._splineXControlPoints[stackIndex];
					this.__controlPointsY = s._splineYControlPoints[stackIndex];
					this.__controlPointsMinY = s._splineMinYControlPoints[stackIndex];
				}
				var color = s._colors[stackIndex];
				var start = Math.max(this._seriesSnapshot._startIndex - this._seriesSnapshot._valueInterval, 0);
				for (var i = start; i <= this._seriesSnapshot._endIndex; i += this._seriesSnapshot._valueInterval) {
					if (i % this._seriesSnapshot._valueInterval == 0) {
						var index = this._seriesSnapshot.adjustIndexForInterval(i);
						switch (type) {
							case $.ig.CombinedDataItemType.prototype.column:
							case $.ig.CombinedDataItemType.prototype.rangeColumn:
							case $.ig.CombinedDataItemType.prototype.waterfall:
								{
									this.renderColumn(canvas, ctx, this._seriesSnapshot, w, h, index, seriesIndex, stackIndex, sideBySideIndex, s, color, s._negativeColor, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.point:
								{
									this.renderPoint(canvas, ctx, this._seriesSnapshot, index, seriesIndex, stackIndex, s, color, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.rangeArea:
								{
									this.renderRangeArea(canvas, ctx, this._seriesSnapshot, x, y, index, seriesIndex, s, color, s._negativeColor, useBucketing);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.area:
							case $.ig.CombinedDataItemType.prototype.line:
								{
									this.renderLine(canvas, ctx, this._seriesSnapshot, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.stepLine:
							case $.ig.CombinedDataItemType.prototype.stepArea:
								{
									this.renderStepLine(canvas, ctx, this._seriesSnapshot, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.spline:
							case $.ig.CombinedDataItemType.prototype.splineArea:
								{
									this.renderSpline(canvas, ctx, this._seriesSnapshot, index, seriesIndex, stackIndex, sideBySideIndex, s, color, type, useBucketing, dataSubsetType);
									break;
								}
							case $.ig.CombinedDataItemType.prototype.ohlc:
							case $.ig.CombinedDataItemType.prototype.candlestick:
								{
									this.renderFinancialPoint(canvas, ctx, this._seriesSnapshot, x, y, index, seriesIndex, sideBySideIndex, s, color, type, s._negativeColor, dataSubsetType);
									break;
								}
							default: break;
						}
					}
				}
			}
			if (s.isSideBySideSeries()) {
				sideBySideIndex++;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderColumn(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Int32)" />*/
	renderColumn: function (canvas, ctx, snapshot, w, h, index, seriesIndex, stackIndex, sideBySideIndex, series, color, negativeColor, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, sideBySideIndex, series, dataSubsetType);
		if (this.__infoCurrent._isValid) {
			if (this.__infoCurrent._valueIsNegative && !this.__isStack) {
				color = negativeColor;
			}
			canvas.drawSlice(ctx, this._seriesSnapshot._centerX - this._seriesSnapshot._radius, this._seriesSnapshot._centerY - this._seriesSnapshot._radius, this._seriesSnapshot._radius * 2, this._seriesSnapshot._radius * 2, this.__infoCurrent._startAngle, this.__infoCurrent._endAngle, this.__infoCurrent._startExtent, this.__infoCurrent._endExtent, color, 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderColumn(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	renderPoint: function (canvas, ctx, snapshot, index, seriesIndex, stackIndex, series, color, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (this.__infoCurrent._isValid) {
			var radius = snapshot._markerRadius;
			canvas.drawCircle(ctx, this.__infoCurrent._valueLocationX, this.__infoCurrent._valueLocationY, radius, color, color, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderLine: function (canvas, ctx, snapshot, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		var nextIndex = index < lastIndex ? index + 1 : 0;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack) {
			if (this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative) {
				return;
			}
		}
		var lowerStackIndex = 0;
		this.__x0 = this.__infoCurrent._valueLocationX;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__x1 = this.__infoNext._valueLocationX;
		this.__y1 = this.__infoNext._valueLocationY;
		canvas.drawLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		if (!this.__isArea && !useBucketing) {
			return;
		}
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, -1);
			this.__x2 = this.__infoCurrent._valueLocationX;
			this.__y2 = this.__infoCurrent._valueLocationY;
			this.__x3 = this.__infoNext._valueLocationX;
			this.__y3 = this.__infoNext._valueLocationY;
		} else {
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var ptCurrent = this._seriesSnapshot.calculateXYPosition(0, index + 0.5);
				var ptNext = this._seriesSnapshot.calculateXYPosition(0, nextIndex + 0.5);
				this.__x2 = ptCurrent._x;
				this.__y2 = ptCurrent._y;
				this.__x3 = ptNext._x;
				this.__y3 = ptNext._y;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__x2 = this.__infoCurrent._valueLocationX;
				this.__y2 = this.__infoCurrent._valueLocationY;
				this.__x3 = this.__infoNext._valueLocationX;
				this.__y3 = this.__infoNext._valueLocationY;
			}
		}
		if (!this.__isArea) {
			canvas.drawLine(ctx, this.__x2, this.__y2, this.__x3, this.__y3, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		}
		if ((!this.__isStack || lowerStackIndex == -1) && this.__isArea) {
			var radius = Math.sqrt(Math.pow(this._seriesSnapshot._centerX - this.__x2, 2) + Math.pow(this._seriesSnapshot._centerY - this.__y2, 2));
			canvas.drawCustomPolarShape(ctx, this._seriesSnapshot._centerX, this._seriesSnapshot._centerY, this.__x0, this.__y0, this.__x1, this.__y1, this.__x3, this.__y3, this.__x2, this.__y2, radius, this.__infoCurrent._startAngle, this.__infoCurrent._endAngle, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		} else {
			canvas.drawCustomShape1(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x3, this.__y3, this.__x2, this.__y2, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderStepLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderStepLine: function (canvas, ctx, snapshot, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		var nextIndex = index < lastIndex ? index + 1 : 0;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack && this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative && index != lastIndex) {
			return;
		}
		var lowerStackIndex = 0;
		this.__x0 = this.__infoCurrent._valueLocationX;
		this.__y0 = this.__infoCurrent._valueLocationY;
		var pt = this._seriesSnapshot.calculateXYPosition(this.__infoCurrent._value, nextIndex + 0.5);
		this.__x1 = pt._x;
		this.__y1 = pt._y;
		this.__x2 = this.__infoNext._valueLocationX;
		this.__y2 = this.__infoNext._valueLocationY;
		canvas.drawComplexLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		if (!this.__isArea && !useBucketing) {
			return;
		}
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, -1);
			this.__x3 = this.__infoCurrent._valueLocationX;
			this.__y3 = this.__infoCurrent._valueLocationY;
			pt = this._seriesSnapshot.calculateXYPosition(this.__infoCurrent._value, nextIndex + 0.5);
			this.__x4 = pt._x;
			this.__y4 = pt._y;
			this.__x5 = this.__infoNext._valueLocationX;
			this.__y5 = this.__infoNext._valueLocationY;
		} else {
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var ptCurrent = this._seriesSnapshot.calculateXYPosition(0, index + 0.5);
				var ptNext = this._seriesSnapshot.calculateXYPosition(0, nextIndex + 0.5);
				this.__x3 = ptCurrent._x;
				this.__y3 = ptCurrent._y;
				this.__x4 = this.__x3;
				this.__y4 = this.__y3;
				this.__x5 = ptNext._x;
				this.__y5 = ptNext._y;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__x3 = this.__infoCurrent._valueLocationX;
				this.__y3 = this.__infoCurrent._valueLocationY;
				pt = this._seriesSnapshot.calculateXYPosition(this.__infoCurrent._value, nextIndex + 0.5);
				this.__x4 = pt._x;
				this.__y4 = pt._y;
				this.__x5 = this.__infoNext._valueLocationX;
				this.__y5 = this.__infoNext._valueLocationY;
			}
		}
		if (!this.__isArea) {
			canvas.drawComplexLine(ctx, this.__x3, this.__y3, this.__x4, this.__y4, this.__x5, this.__y5, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		}
		if (!this.__isStack || lowerStackIndex == -1) {
			var radius = Math.sqrt(Math.pow(this._seriesSnapshot._centerX - this.__x5, 2) + Math.pow(this._seriesSnapshot._centerY - this.__y5, 2));
			canvas.drawCustomPolarShape(ctx, this._seriesSnapshot._centerX, this._seriesSnapshot._centerY, this.__x0, this.__y0, this.__x1, this.__y1, this.__x5, this.__y5, this.__x3, this.__y3, radius, this.__infoCurrent._startAngle, this.__infoCurrent._endAngle, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		} else {
			canvas.drawCustomShape1(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x3, this.__y3, this.__x2, this.__y2, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderStepLine(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderSpline(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	renderSpline: function (canvas, ctx, snapshot, index, seriesIndex, stackIndex, sideBySideIndex, series, color, type, useBucketing, dataSubsetType) {
		var lastIndex = $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval);
		var nextIndex = index < lastIndex ? index + 1 : 0;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		if (this.__isStack) {
			if (this.__infoCurrent._valueIsNegative != this.__infoNext._valueIsNegative) {
				return;
			}
		}
		var lowerStackIndex = 0;
		this.__x0 = this.__infoCurrent._valueLocationX;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__x1 = this.__infoNext._valueLocationX;
		this.__y1 = this.__infoNext._valueLocationY;
		var c0 = this._seriesSnapshot.calculateXYPosition(this.__controlPointsY[index * 2], this.__controlPointsX[index * 2] + 0.5);
		var c1 = this._seriesSnapshot.calculateXYPosition(this.__controlPointsY[index * 2 + 1], this.__controlPointsX[index * 2 + 1] + 0.5);
		this.__cx0 = c0._x;
		this.__cy0 = c0._y;
		this.__cx1 = c1._x;
		this.__cy1 = c1._y;
		canvas.drawCurve(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__cx0, this.__cy0, this.__cx1, this.__cy1, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		if (!this.__isArea && !useBucketing) {
			return;
		}
		if (!this.__isArea) {
			snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, -1);
			snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, -1);
			this.__x2 = this.__infoCurrent._valueLocationX;
			this.__y2 = this.__infoCurrent._valueLocationY;
			this.__x3 = this.__infoNext._valueLocationX;
			this.__y3 = this.__infoNext._valueLocationY;
			c0 = this._seriesSnapshot.calculateXYPosition(this.__controlPointsY[index * 2], this.__controlPointsX[index * 2]);
			c1 = this._seriesSnapshot.calculateXYPosition(this.__controlPointsY[index * 2 + 1], this.__controlPointsX[index * 2 + 1]);
			this.__cx2 = c0._x;
			this.__cy2 = c0._y;
			this.__cx3 = c1._x;
			this.__cy3 = c1._y;
		} else {
			if (this.__isStack) {
				lowerStackIndex = snapshot.getLowerStackIndex(index, seriesIndex, stackIndex, dataSubsetType);
			}
			if (this.__isStack && lowerStackIndex == -1) {
				dataSubsetType = dataSubsetType * -1;
			} else {
				stackIndex = lowerStackIndex;
			}
			if (!this.__isStack || lowerStackIndex == -1) {
				var ptCurrent = this._seriesSnapshot.calculateXYPosition(0, index + 0.5);
				var ptNext = this._seriesSnapshot.calculateXYPosition(0, nextIndex + 0.5);
				this.__x2 = ptCurrent._x;
				this.__y2 = ptCurrent._y;
				this.__x3 = ptNext._x;
				this.__y3 = ptNext._y;
			} else {
				snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, stackIndex, -1, series, dataSubsetType);
				snapshot.calculateCategoryValueBounds(this.__infoNext, nextIndex, seriesIndex, stackIndex, -1, series, dataSubsetType);
				this.__x2 = this.__infoCurrent._valueLocationX;
				this.__y2 = this.__infoCurrent._valueLocationY;
				this.__x3 = this.__infoNext._valueLocationX;
				this.__y3 = this.__infoNext._valueLocationY;
				var s = snapshot._seriesList[seriesIndex];
				var controlPointsY = s._splineYControlPoints[stackIndex];
				var controlPointsX = s._splineXControlPoints[stackIndex];
				c0 = this._seriesSnapshot.calculateXYPosition(controlPointsY[index * 2], controlPointsX[index * 2] + 0.5);
				c1 = this._seriesSnapshot.calculateXYPosition(controlPointsY[index * 2 + 1], controlPointsX[index * 2 + 1] + 0.5);
				this.__cx2 = c0._x;
				this.__cy2 = c0._y;
				this.__cx3 = c1._x;
				this.__cy3 = c1._y;
			}
		}
		if (!this.__isArea) {
			canvas.drawCurve(ctx, this.__x2, this.__y2, this.__x3, this.__y3, this.__cx2, this.__cy2, this.__cx3, this.__cy3, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		}
		if (!this.__isStack || lowerStackIndex == -1) {
			var radius = Math.sqrt(Math.pow(this._seriesSnapshot._centerX - this.__x3, 2) + Math.pow(this._seriesSnapshot._centerY - this.__y3, 2));
			canvas.drawSplineAreaWithCurvedBase(ctx, this._seriesSnapshot._centerX, this._seriesSnapshot._centerY, this.__x0, this.__y0, this.__x1, this.__y1, this.__cx0, this.__cy0, this.__cx1, this.__cy1, this.__x3, this.__y3, this.__x2, this.__y2, radius, this.__infoCurrent._startAngle, this.__infoCurrent._endAngle, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		} else {
			canvas.drawCustomCurvedShape(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__cx0, this.__cy0, this.__cx1, this.__cy1, this.__x3, this.__y3, this.__x2, this.__y2, this.__cx3, this.__cy3, this.__cx2, this.__cy2, $.ig.ColorUtility.prototype.applyAlphaToColor(100, color), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderSpline(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderRangeArea(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Boolean)" />*/
	renderRangeArea: function (canvas, ctx, snapshot, x, y, index, seriesIndex, series, color, negativeColor, useBucketing) {
		if (index >= $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval)) {
			return;
		}
		var currentColor = color;
		var dataSubsetType = useBucketing ? 1 : 0;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 0, -1, series, dataSubsetType);
		snapshot.calculateCategoryValueBounds(this.__infoNext, index + 1, seriesIndex, 0, -1, series, dataSubsetType);
		if (!this.__infoCurrent._isValid || !this.__infoNext._isValid) {
			return;
		}
		var bottomLeft = (this.__infoCurrent._valueIsNegative ? this.__infoCurrent._valueLocationY - this.__infoCurrent._boundsHeight : this.__infoCurrent._valueLocationY + this.__infoCurrent._boundsHeight);
		var bottomRight = (this.__infoNext._valueIsNegative ? this.__infoNext._valueLocationY - this.__infoNext._boundsHeight : this.__infoNext._valueLocationY + this.__infoNext._boundsHeight);
		this.__x0 = (index == 0 ? this.__infoCurrent._boundsX : this.__infoCurrent._valueLocationX) + x;
		this.__x1 = this.__infoCurrent._valueLocationX + x;
		this.__y0 = this.__infoCurrent._valueLocationY;
		this.__y1 = this.__infoCurrent._valueLocationY;
		this.__x2 = this.__infoNext._valueLocationX + x;
		this.__y2 = this.__infoNext._valueLocationY;
		if (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
			this.__x1 = this.__x2;
			this.__x2 = this.__infoNext._boundsX + this.__infoNext._boundsWidth + x;
			this.__y1 = this.__y2;
		}
		this.__x3 = this.__x0;
		this.__x4 = this.__x1;
		this.__x5 = this.__x2;
		this.__y3 = this.__y4 = bottomLeft;
		this.__y5 = bottomRight;
		if (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
			this.__y4 = this.__y5;
		}
		canvas.drawComplexLine(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		canvas.drawComplexLine(ctx, this.__x3, this.__y3, this.__x4, this.__y4, this.__x5, this.__y5, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		if (this.__y3 <= this.__y0 && this.__y5 <= this.__y2) {
			currentColor = negativeColor;
		}
		if ((this.__y3 < this.__y0 && this.__y5 > this.__y2) || (this.__y3 > this.__y0 && this.__y5 < this.__y2)) {
			var x1 = index == 0 ? this.__x1 : this.__x0;
			var x2 = (index == $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) ? this.__x4 : this.__x5;
			var intersectionPoint = $.ig.ChartsUtility.prototype.getIntersectionPointOfTwoLines(x1, this.__y0, x2, this.__y2, x1, this.__y3, x2, this.__y5);
			var xi = intersectionPoint._x;
			var yi = intersectionPoint._y;
			canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, xi, yi, xi, yi, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, this.__y0 > this.__y3 ? negativeColor : color), 0, 0);
			if (index < $.ig.intDivide(snapshot._endIndex, snapshot._valueInterval) - 1) {
				this.__x1 = xi;
				this.__y1 = yi;
			}
			canvas.drawCustomShape2(ctx, xi, yi, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, xi, yi, $.ig.ColorUtility.prototype.applyAlphaToColor(100, this.__y0 > this.__y3 ? color : negativeColor), 0, 0);
		} else {
			canvas.drawCustomShape2(ctx, this.__x0, this.__y0, this.__x1, this.__y1, this.__x2, this.__y2, this.__x5, this.__y5, this.__x4, this.__y4, this.__x3, this.__y3, $.ig.ColorUtility.prototype.applyAlphaToColor(100, currentColor), 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderRangeArea(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChartLayer::RenderFinancialPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.ColorInt, System.Int32)" />*/
	renderFinancialPoint: function (canvas, ctx, snapshot, x, y, index, seriesIndex, sideBySideIndex, series, color, type, negativeColor, dataSubsetType) {
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 0, sideBySideIndex, series, dataSubsetType);
		var open = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 1, sideBySideIndex, series, dataSubsetType);
		var high = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 2, sideBySideIndex, series, dataSubsetType);
		var low = this.__infoCurrent._valueLocationY;
		snapshot.calculateCategoryValueBounds(this.__infoCurrent, index, seriesIndex, 3, sideBySideIndex, series, dataSubsetType);
		var close = this.__infoCurrent._valueLocationY;
		if ($.ig.util.isNaN(open) || $.ig.util.isNaN(high) || $.ig.util.isNaN(low) || $.ig.util.isNaN(close)) {
			return;
		}
		var columnHeight = Math.abs(open - close);
		var top = Math.min(open, close);
		if (columnHeight == 0) {
			columnHeight = 1;
		}
		if (open < close) {
			color = negativeColor;
		}
		if (type == $.ig.CombinedDataItemType.prototype.candlestick) {
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, low, this.__infoCurrent._valueLocationX + x, high, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
			canvas.drawRect(ctx, this.__infoCurrent._boundsX + x, top, this.__infoCurrent._boundsWidth, columnHeight, color, color, 0);
		} else {
			canvas.drawLine(ctx, this.__infoCurrent._boundsX + x, open, this.__infoCurrent._valueLocationX + x, open, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, low, this.__infoCurrent._valueLocationX + x, high, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
			canvas.drawLine(ctx, this.__infoCurrent._valueLocationX + x, close, this.__infoCurrent._valueLocationX + this.__infoCurrent._boundsWidth / 2 + x, close, color, $.ig.RadialChartLayer.prototype.lINE_THICKNESS);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChartLayer::RenderFinancialPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SeriesSnapshotBase, System.Single, System.Single, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.ColorInt, Infragistics.CombinedDataItemType, System.ColorInt, System.Int32)" />*/
	,
	$type: new $.ig.Type('RadialChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RadialChartLayer" />*/

/*<BeginType Name="Infragistics.RadiusAxisLabelLayer" />*/

$.ig.util.defType('RadiusAxisLabelLayer', 'CalculatedLayer', {
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
	},
	/*<BeginMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		return (snapshot)._radiusAxisFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		return (snapshot)._radiusAxisFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		return (snapshot)._radiusAxisFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		return (snapshot)._radiusAxisFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.RadiusAxisLabelLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.RadiusAxisLabelLayer::shouldClip()" />*/
	shouldClip: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.RadiusAxisLabelLayer::shouldClip()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadiusAxisLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		this.__textInstructions._textColor = seriesSnapshot._fontColor;
		this.__textInstructions._font = seriesSnapshot._fontName;
		this.__textInstructions._fontSize = seriesSnapshot._fontSize;
		this.__textInstructions._degrees = 0;
		var numberOfLabels = seriesSnapshot._numberOfMaxRadiusAxisLabels;
		var stepSize = seriesSnapshot._radiusAxisStepSize;
		var freeStandingAxis = seriesSnapshot._resolvedFreeStandingRadiusAxisVisible;
		var vertical = seriesSnapshot._freeStandingRadiusAxisOrientation == $.ig.Orientation.prototype.vertical;
		var location = seriesSnapshot._freeStandingRadiusAxisLocation;
		var top = location == $.ig.RadiusAxisLocation.prototype.topLeft || location == $.ig.RadiusAxisLocation.prototype.topRight;
		var right = location == $.ig.RadiusAxisLocation.prototype.bottomRight || location == $.ig.RadiusAxisLocation.prototype.topRight;
		var degrees = vertical ? 0 : 90;
		var useMK = seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = seriesSnapshot._primaryAxisValueFormatNegativeMode;
		var numType = seriesSnapshot._primaryAxisValueFormatType;
		var digits = seriesSnapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
		if (seriesSnapshot._actualStack100ModeEnabled) {
			digits = 0;
			useMK = false;
			showGroupingSeparator = false;
			numType = $.ig.FormatSettingsNumberType.prototype.percent;
		}
		var min = seriesSnapshot._radiusAxisMin;
		var logBase = -1;
		if (seriesSnapshot._radiusAxisIsLogarithmic) {
			logBase = seriesSnapshot._radiusAxisLogBase;
		}
		var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
		if (actualMin < 0 && logBase != -1) {
			actualMin = 0;
		}
		var yPos = 0;
		var xPos = 0;
		var label;
		for (var i = 0; i <= numberOfLabels; i++) {
			var value = (actualMin + (i * stepSize));
			if (logBase != -1) {
				value = (actualMin + Math.pow(logBase, i));
			}
			label = $.ig.ChartsUtility.prototype.labelForValue1(value, useMK, negMode, numType, digits, currencySymbol);
			if (freeStandingAxis) {
				if (vertical) {
					xPos = seriesSnapshot._radiusAxisFrameX + $.ig.PolarSeriesSnapshot.prototype.freeStandingAxisPadding;
					yPos = seriesSnapshot._centerY - seriesSnapshot._labelTextHeight / 2 + (top ? -seriesSnapshot.distanceFromCenter(value) : seriesSnapshot.distanceFromCenter(value));
				} else {
					xPos = seriesSnapshot._centerX + seriesSnapshot._labelTextHeight / 2 + (right ? seriesSnapshot.distanceFromCenter(value) : -seriesSnapshot.distanceFromCenter(value));
					yPos = seriesSnapshot._radiusAxisFrameY + $.ig.PolarSeriesSnapshot.prototype.freeStandingAxisPadding;
				}
				canvas.drawText(ctx, xPos, yPos, degrees, label, seriesSnapshot._fontColor, seriesSnapshot._fontSize, seriesSnapshot._fontName, seriesSnapshot._labelTextHeight);
			} else {
				xPos = x + (w / 2);
				yPos = seriesSnapshot._centerY - seriesSnapshot.distanceFromCenter(value);
				if (yPos < seriesSnapshot._centerY - seriesSnapshot._radius - seriesSnapshot._labelTextHeight / 2) {
					break;
				}
				if (yPos >= seriesSnapshot._canvasFrameY && yPos <= seriesSnapshot._canvasFrameY + seriesSnapshot._canvasFrameHeight) {
					this.__textInstructions._x = xPos;
					this.__textInstructions._y = yPos - seriesSnapshot._labelTextHeight / 2;
					this.__textInstructions._text = label;
					this.__textInstructions.draw(canvas, ctx);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadiusAxisLabelLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('RadiusAxisLabelLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RadiusAxisLabelLayer" />*/

/*<BeginType Name="Infragistics.RPBulletGaugeLayer" />*/

$.ig.util.defType('RPBulletGaugeLayer', 'CalculatedLayer', {
	__textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.RPBulletGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, info, x, y, w, h) {
		var snapshot = info;
		var padding = $.ig.truncate((h * 0.1));
		canvas.drawRect(ctx, x, y, w, h, snapshot._nonValueColor, -1, 0);
		var valueWidth = snapshot.getValueX();
		canvas.drawRect(ctx, x, y, valueWidth, h, snapshot._valueColor, -1, 0);
		var firstBandPercentage = (snapshot._firstBandValue - snapshot._min) / (snapshot._max - snapshot._min);
		var bandX = $.ig.truncate((w * firstBandPercentage));
		canvas.drawRect(ctx, bandX - ($.ig.intDivide(snapshot._bandWidth, 2)), y, snapshot._bandWidth, h, snapshot._bandColor, -1, 0);
		var secondBandPercentage = (snapshot._secondBandValue - snapshot._min) / (snapshot._max - snapshot._min);
		bandX = $.ig.truncate((w * secondBandPercentage));
		canvas.drawRect(ctx, bandX - ($.ig.intDivide(snapshot._bandWidth, 2)), y, snapshot._bandWidth, h, snapshot._bandColor, -1, 0);
		if (snapshot._targetValue != -1) {
			var targetPercentage = (snapshot._targetValue - snapshot._min) / (snapshot._max - snapshot._min);
			bandX = $.ig.truncate((w * targetPercentage));
			this.drawTargetIndicator(canvas, ctx, bandX - snapshot._bandWidth, y + padding, snapshot._bandWidth * 2, h - padding, snapshot._bandColor);
		}
		this.__textInstructions._fontSize = Math.max($.ig.truncate((h * 0.45)), 8);
		this.__textInstructions._textColor = snapshot._bandColor;
		this.__textInstructions._font = snapshot._fontName;
		this.__textInstructions._text = $.ig.ChartsUtility.prototype.labelForValue(snapshot._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
		this.__textInstructions._hAlignment = $.ig.TextHorizontalAlignment.prototype.left;
		this.__textInstructions._y = $.ig.truncate((y + (h / 2)));
		var measureLabel = $.ig.NativeUtility.prototype.utility().measureText(this.__textInstructions._text, this.__textInstructions._font, this.__textInstructions._fontSize);
		if (measureLabel._width + padding > valueWidth) {
			this.__textInstructions._x = x + (valueWidth + padding);
			this.__textInstructions._textColor = snapshot._valueColor;
		} else {
			this.__textInstructions._x = x + (valueWidth - measureLabel._width - padding);
			canvas.drawRect(ctx, this.__textInstructions._x, y, measureLabel._width, h, $.ig.ColorUtility.prototype.applyAlphaToColor(150, snapshot._valueColor), -1, 0);
		}
		this.__textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.RPBulletGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPBulletGaugeLayer::DrawTargetIndicator(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Int32)" />*/
	drawTargetIndicator: function (canvas, ctx, x, y, w, h, color) {
		var xValues = new Array(5);
		var yValues = new Array(5);
		var beginPoint = $.ig.truncate((h * 0.75));
		var pointPeak = $.ig.truncate((w * 0.5));
		xValues[0] = x;
		yValues[0] = y;
		xValues[1] = x;
		yValues[1] = beginPoint;
		xValues[2] = x + pointPeak;
		yValues[2] = h;
		xValues[3] = x + w;
		yValues[3] = beginPoint;
		xValues[4] = x + w;
		yValues[4] = y;
		canvas.drawCustomShape(ctx, xValues, yValues, true, color, -1, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.RPBulletGaugeLayer::DrawTargetIndicator(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Int32)" />*/
	,
	$type: new $.ig.Type('RPBulletGaugeLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPBulletGaugeLayer" />*/

/*<BeginType Name="Infragistics.RPGaugeLayer" />*/

$.ig.util.defType('RPGaugeLayer', 'CalculatedLayer', {
	__textInstructions: null,
	__actualHeight: 0,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, info, x, y, w, h) {
		var snapshot = info;
		var min = Math.min(w, h * 1.4);
		this.__actualHeight = h;
		this.renderGauge(canvas, ctx, x + ((w - min) / 2), y + ((h - min) / 2), min, min, snapshot);
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RPGaugeLayer::CalcFontSize(System.String, System.Single, System.Single)" />*/
	calcFontSize: function (text, w, h) {
		var fontSizeAt1Pt = $.ig.NativeUtility.prototype.utility().measureText(text, this.__textInstructions._font, 1 * $.ig.NativeUtility.prototype.utility().getScreenDensity());
		var fontSizeByWidth = $.ig.truncate(Math.floor(w / fontSizeAt1Pt._width));
		var fontSizeByHeight = $.ig.truncate(((h == -1) ? fontSizeByWidth : Math.floor(h / fontSizeAt1Pt._height)));
		var fontSize = Math.min(fontSizeByWidth, fontSizeByHeight) * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		while (fontSize > 0) {
			var measureWithFontSize = $.ig.NativeUtility.prototype.utility().measureText(text, this.__textInstructions._font, fontSize);
			if (measureWithFontSize._width > w || (h != -1 && measureWithFontSize._height > h)) {
				fontSize--;
			} else {
				break;
			}
		}
		;
		return fontSize;
	}
	/*<EndMethod Name="System.Single Infragistics.RPGaugeLayer::CalcFontSize(System.String, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	drawText: function (canvas, ctx, text, x, y, w, h, fontSize) {
		this.__textInstructions._text = text;
		this.__textInstructions._fontSize = fontSize;
		this.__textInstructions._x = $.ig.truncate((x + w / 2));
		this.__textInstructions._y = $.ig.truncate((y + h / 2));
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
		this.__textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeLayer::RenderGauge(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPGaugeSnapshot)" />*/
	renderGauge: function (canvas, ctx, x, y, w, h, snapshot) {
		var percent = ((snapshot._value - snapshot._min) / (snapshot._max - snapshot._min));
		var value = 180 * percent;
		var valueDegree = 180 + value;
		var offsetY = y + h / 4;
		canvas.drawSlice(ctx, x, offsetY, w, h, 180, 360, 0.75, 0.9, snapshot._nonValueColor, 0, 0);
		if (snapshot._value >= snapshot._min && snapshot._value <= snapshot._max) {
			canvas.drawSlice(ctx, x, offsetY, w, h, 180, valueDegree, 0.75, 0.9, snapshot._valueColor, 0, 0);
			canvas.drawSlice(ctx, x, offsetY, w, h, valueDegree - 1, valueDegree + 1, 0.6, 0.7, snapshot._valueColor, 0, 0);
		}
		var top = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterEndPointY(315, 315, x, offsetY, w, h, 0.6, 0.6));
		var bottom = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterEndPointY(180, 360, x, offsetY, w, h, 0.9, 0.9));
		var left = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterStartPointX(225, 315, x, offsetY, w, h, 0.6, 0.6));
		var right = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterEndPointX(225, 315, x, offsetY, w, h, 0.6, 0.6));
		var availableWidth = right - left;
		var availableHeight = bottom - top;
		this.__textInstructions._textColor = snapshot._textColor;
		this.__textInstructions._font = snapshot._fontName;
		var text = $.ig.ChartsUtility.prototype.labelForValue(snapshot._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		var fontSize = this.calcFontSize(text, availableWidth, availableHeight);
		if (fontSize > 0) {
			this.drawText(canvas, ctx, text, left, top, availableWidth, availableHeight, fontSize);
		}
		left = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterStartPointX(180, 360, x, offsetY, w, h, 0.75, 1));
		right = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterStartPointX(180, 360, x, offsetY, w, h, 0.6, 0.65));
		availableWidth = right - left;
		var padding = 2 * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		availableHeight = this.__actualHeight - bottom - padding;
		var minText = $.ig.ChartsUtility.prototype.labelForValue(snapshot._min, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		var maxText = $.ig.ChartsUtility.prototype.labelForValue(snapshot._max, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		var fontSizeMin = this.calcFontSize(minText, availableWidth, availableHeight);
		var fontSizeMax = this.calcFontSize(maxText, availableWidth, availableHeight);
		var minMaxfontSize = Math.min(fontSizeMin, fontSizeMax);
		minMaxfontSize = Math.min(fontSize * 0.6, minMaxfontSize);
		if (minMaxfontSize >= snapshot._minFontSize) {
			availableHeight = Math.min(availableHeight, minMaxfontSize * 1.5);
			this.drawText(canvas, ctx, minText, (left + ((right - left) / 2)) - (availableWidth / 2), bottom, availableWidth, availableHeight, minMaxfontSize);
			left = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterEndPointX(180, 360, x, offsetY, w, h, 0.6, 0.65));
			right = $.ig.truncate($.ig.ChartsUtility.prototype.sliceOuterEndPointX(180, 360, x, offsetY, w, h, 0.6, 1));
			this.drawText(canvas, ctx, maxText, (left + ((right - left) / 2)) - (availableWidth / 2), bottom, availableWidth, availableHeight, minMaxfontSize);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeLayer::RenderGauge(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPGaugeSnapshot)" />*/
	,
	$type: new $.ig.Type('RPGaugeLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPGaugeLayer" />*/

/*<BeginType Name="Infragistics.RPIndicatorLayer" />*/

$.ig.util.defType('RPIndicatorLayer', 'CalculatedLayer', {
	__hasValue: false,
	__hasVariation: false,
	__hasNoticeLine: false,
	__hasShape: false,
	__textInstructionValue: null,
	__textInstructionVariation: null,
	__textInstructionNoticeLine: null,
	__shapeInstruction: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructionValue = new $.ig.TextInstructions();
		this.__textInstructionVariation = new $.ig.TextInstructions();
		this.__textInstructionNoticeLine = new $.ig.TextInstructions();
		this.__shapeInstruction = new $.ig.RPIndicatorShapeInstruction();
	},
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, info, x, y, w, h) {
		var snapshot = info;
		this.renderIndicator(canvas, ctx, x, y, w, h, snapshot);
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RPIndicatorLayer::CalcFontSize(System.String, System.String, System.Single, System.Single)" />*/
	calcFontSize: function (font, text, w, h) {
		var fontSizeAt1Pt = $.ig.NativeUtility.prototype.utility().measureText(text, font, 1 * $.ig.NativeUtility.prototype.utility().getScreenDensity());
		var fontSizeByWidth = $.ig.truncate(Math.floor(w / fontSizeAt1Pt._width));
		var fontSizeByHeight = $.ig.truncate(((h == -1) ? fontSizeByWidth : Math.floor(h / fontSizeAt1Pt._height)));
		var fontSize = Math.min(fontSizeByWidth, fontSizeByHeight) * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		while (fontSize > 0) {
			var measureWithFontSize = $.ig.NativeUtility.prototype.utility().measureText(text, font, fontSize);
			if (measureWithFontSize._width > w || measureWithFontSize._height > h) {
				fontSize--;
			} else {
				break;
			}
		}
		;
		return fontSize;
	}
	/*<EndMethod Name="System.Single Infragistics.RPIndicatorLayer::CalcFontSize(System.String, System.String, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorLayer::PrepareDrawText(Infragistics.TextInstructions, System.String, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.String)" />*/
	prepareDrawText: function (instruction, text, x, y, w, h, fontSize, color, font) {
		instruction._text = text;
		instruction._fontSize = fontSize;
		instruction._textColor = color;
		instruction._font = font;
		instruction._x = x;
		instruction._y = y;
		instruction._alignment = $.ig.TextVerticalAlignment.prototype.top;
		instruction._hAlignment = $.ig.TextHorizontalAlignment.prototype.left;
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorLayer::PrepareDrawText(Infragistics.TextInstructions, System.String, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorLayer::PrepareDrawShape(Infragistics.RPIndicatorShapeInstruction, Infragistics.GaugeShape, System.Single, System.Single, System.Single, System.ColorInt)" />*/
	prepareDrawShape: function (instruction, shape, x, y, shapeSize, fillColor) {
		instruction._shape = shape;
		instruction._x = x;
		instruction._y = y;
		instruction._shapeSize = shapeSize;
		instruction._fillColor = fillColor;
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorLayer::PrepareDrawShape(Infragistics.RPIndicatorShapeInstruction, Infragistics.GaugeShape, System.Single, System.Single, System.Single, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderIndicator(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPIndicatorSnapshot)" />*/
	renderIndicator: function (canvas, ctx, x, y, w, h, snapshot) {
		this.__hasValue = false;
		this.__hasShape = false;
		this.__hasVariation = false;
		this.__hasNoticeLine = false;
		var font = snapshot._fontName;
		var density = $.ig.NativeUtility.prototype.utility().getScreenDensity();
		var noDataFontSize = snapshot._minFontSize * density;
		var acummY = y;
		var valueText = $.ig.util.isNaN(snapshot._value) ? "NaN" : $.ig.ChartsUtility.prototype.labelForValue(snapshot._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		var variationText = $.ig.util.isNaN(snapshot._variation) ? "NaN" : this.formatVariationValue(snapshot._variation, snapshot._value - snapshot._prevValue, snapshot._differenceMode, snapshot._valueFormatUseMKFormatting, snapshot._valueFormattingShowGroupingSeparator);
		var noticeText = snapshot._noticeTextFirstLine;
		if (noticeText != null && snapshot._noticeTextSecondLine != null) {
			noticeText = noticeText + " / " + snapshot._noticeTextSecondLine;
		}
		var maxValueHeight = (h * 0.5);
		var maxValueFontSize = snapshot._maxFontSize * density;
		var valueFontSize = Math.min(this.calcFontSize(font, valueText, w, maxValueHeight), maxValueFontSize);
		if (valueFontSize >= 24 * density) {
			var valueX, valueY, valueWidth, valueHeight;
			var variationX, variationY, variationWidth, variationHeight;
			var noticeX, noticeY, noticeWidth, noticeHeight;
			var shapeX, shapeY, shapeSize, shapePadding;
			var valueTextSize = $.ig.NativeUtility.prototype.utility().measureText(valueText, font, valueFontSize);
			valueWidth = valueTextSize._width;
			valueHeight = valueTextSize._height;
			valueX = (x + w - valueTextSize._width) / 2;
			valueY = acummY;
			acummY = acummY + valueHeight;
			var maxVariationHeight = ((h - acummY) * 0.6);
			var maxVariationFontSize = (valueFontSize * 0.5);
			var variationFontSize = Math.min(this.calcFontSize(font, variationText, w, maxVariationHeight), maxVariationFontSize);
			variationFontSize = Math.min(variationFontSize, 40 * density);
			if (variationFontSize > 0) {
				var variationTextSize = $.ig.NativeUtility.prototype.utility().measureText(variationText, font, variationFontSize);
				variationWidth = variationTextSize._width;
				variationHeight = variationTextSize._height;
				variationX = (x + w - variationWidth) / 2;
				variationY = acummY;
				shapeSize = Math.max(variationHeight * 0.5, 8 * density);
				shapePadding = (variationHeight * 0.3);
				shapeX = x + variationWidth + shapePadding / 3;
				shapeY = acummY + shapePadding;
				if (snapshot._shape != $.ig.GaugeShape.prototype.dash) {
					this.__hasShape = true;
					variationFontSize = Math.min(this.calcFontSize(font, variationText, w - (shapeSize + shapePadding / 3), maxVariationHeight), maxVariationFontSize);
					variationFontSize = Math.min(variationFontSize, 40 * density);
					variationTextSize = $.ig.NativeUtility.prototype.utility().measureText(variationText, font, variationFontSize);
					variationWidth = variationTextSize._width;
					variationHeight = variationTextSize._height;
					variationX = variationX - (shapePadding + shapeSize) / 2;
					shapeX = x + variationWidth + shapePadding / 3;
					shapeY = acummY + shapePadding;
				}
				acummY = variationY + variationHeight;
				var noticeFontSize = 0;
				noticeX = noticeY = noticeWidth = noticeHeight = 0;
				if (noticeText != null) {
					var maxNoticeHeight = h - acummY;
					var maxNoticeFontSize = Math.max(variationFontSize * 0.5, 12 * density);
					noticeFontSize = Math.min(this.calcFontSize(font, noticeText, w, maxNoticeHeight), maxNoticeFontSize);
					noticeFontSize = Math.min(noticeFontSize, 20 * density);
					if (noticeFontSize > 0) {
						var noticeTextSize = $.ig.NativeUtility.prototype.utility().measureText(noticeText, font, noticeFontSize);
						noticeWidth = noticeTextSize._width;
						noticeHeight = noticeTextSize._height;
						noticeX = (x + w - noticeWidth) / 2;
						noticeY = acummY;
						this.__hasNoticeLine = true;
						acummY = noticeY + noticeHeight;
						noDataFontSize = noticeFontSize;
					}
				}
				var leftMostX = Math.max(Math.min(Math.min(valueX, variationX), noticeX), 0);
				if (!$.ig.util.isNaN(snapshot._value)) {
					this.prepareDrawText(this.__textInstructionValue, valueText, leftMostX, valueY, w, valueHeight, valueFontSize, snapshot._textColor, font);
					this.__hasValue = true;
				}
				if (!$.ig.util.isNaN(snapshot._variation)) {
					this.prepareDrawText(this.__textInstructionVariation, variationText, leftMostX, variationY, variationWidth, variationHeight, variationFontSize, snapshot._valueColor, font);
					this.__hasVariation = true;
				}
				if (this.__hasShape) {
					shapeX = leftMostX + variationWidth + shapePadding / 3;
					this.prepareDrawShape(this.__shapeInstruction, snapshot._shape, shapeX, shapeY, shapeSize, snapshot._valueColor);
				}
				if (this.__hasNoticeLine) {
					this.prepareDrawText(this.__textInstructionNoticeLine, noticeText, leftMostX, noticeY, noticeWidth, noticeHeight, noticeFontSize, snapshot._noticeColor, font);
				}
			}
			if ($.ig.util.isNaN(snapshot._value) || $.ig.util.isNaN(snapshot._variation)) {
				var noDataText = snapshot._noDataText;
				var maxFontSize = noDataFontSize;
				noDataFontSize = Math.min(this.calcFontSize(font, noDataText, w, h), maxFontSize);
				if (noDataFontSize > 0) {
					var textSize = $.ig.NativeUtility.prototype.utility().measureText(noDataText, font, noDataFontSize);
					var noDataHeight = textSize._height;
					var noDataY = ((h - noDataHeight) / 2);
					this.prepareDrawText(this.__textInstructionNoticeLine, noDataText, x, noDataY, w, noDataHeight, noDataFontSize, snapshot._noticeColor, font);
					this.__textInstructionNoticeLine.draw(canvas, ctx);
				}
			} else {
				var gapY = ((h - acummY) / 2);
				this.renderInstructions(canvas, ctx, gapY);
			}
		} else if (valueFontSize > 0) {
			var valueVariationPadding = $.ig.ThemeManager.prototype.theme().padding10();
			valueFontSize = Math.min(this.calcFontSize(font, valueText + variationText, w - valueVariationPadding, maxValueHeight), maxValueFontSize);
			valueFontSize = Math.max(valueFontSize, 14 * density);
			var valueTextSize1 = $.ig.NativeUtility.prototype.utility().measureText(valueText, font, valueFontSize);
			var valueWidth1 = valueTextSize1._width;
			var valueHeight1 = valueTextSize1._height;
			if (!$.ig.util.isNaN(snapshot._value)) {
				this.prepareDrawText(this.__textInstructionValue, valueText, x, acummY, w, valueHeight1, valueFontSize, snapshot._textColor, font);
				this.__hasValue = true;
			}
			var maxVariationHeight1 = valueHeight1;
			var maxVariationFontSize1 = (valueFontSize * 0.7);
			var variationFontSize1 = Math.min(this.calcFontSize(font, variationText, w, maxVariationHeight1), maxVariationFontSize1);
			variationFontSize1 = Math.max(Math.min(variationFontSize1, 16 * density), 14 * density);
			if (variationFontSize1 > 0) {
				var variationTextSize1 = $.ig.NativeUtility.prototype.utility().measureText(variationText, font, variationFontSize1);
				var variationWidth1 = variationTextSize1._width;
				var variationHeight1 = variationTextSize1._height;
				var variationX1 = x + valueVariationPadding + valueWidth1;
				var variationY1 = acummY + (valueHeight1 - variationHeight1) / 2;
				var shapeSize1 = Math.max(variationHeight1 * 0.5, 8);
				var shapePadding1 = (variationHeight1 * 0.3);
				if (snapshot._shape != $.ig.GaugeShape.prototype.dash) {
					this.__hasShape = true;
					variationFontSize1 = Math.min(this.calcFontSize(font, variationText, w - (shapeSize1 + shapePadding1 / 3), maxVariationHeight1), maxVariationFontSize1);
					variationFontSize1 = Math.max(Math.min(variationFontSize1, 16 * density), 14 * density);
					variationTextSize1 = $.ig.NativeUtility.prototype.utility().measureText(variationText, font, variationFontSize1);
					variationWidth1 = variationTextSize1._width;
					variationHeight1 = variationTextSize1._height;
				}
				acummY = acummY + valueHeight1;
				if (!$.ig.util.isNaN(snapshot._variation)) {
					if (variationX1 + variationWidth1 + shapePadding1 / 3 + shapeSize1 > w) {
						variationX1 = x;
						variationY1 = acummY;
						acummY = acummY + variationHeight1;
					}
					this.prepareDrawText(this.__textInstructionVariation, variationText, variationX1, variationY1, variationWidth1, variationHeight1, variationFontSize1, snapshot._valueColor, font);
					this.__hasVariation = true;
				}
				if (this.__hasShape) {
					var shapeX1 = variationX1 + variationWidth1 + shapePadding1 / 3;
					var shapeY1 = variationY1 + (variationHeight1 - shapeSize1) / 2;
					this.prepareDrawShape(this.__shapeInstruction, snapshot._shape, shapeX1, shapeY1, shapeSize1, snapshot._valueColor);
				}
				if (noticeText != null) {
					var maxNoticeHeight1 = h - acummY;
					var maxNoticeFontSize1 = (variationFontSize1 * 0.75);
					var noticeFontSize1 = Math.min(this.calcFontSize(font, noticeText, w, maxNoticeHeight1), maxNoticeFontSize1);
					if (noticeFontSize1 > 0) {
						var noticeTextSize1 = $.ig.NativeUtility.prototype.utility().measureText(noticeText, font, noticeFontSize1);
						var noticeWidth1 = noticeTextSize1._width;
						var noticeHeight1 = noticeTextSize1._height;
						var noticeX1 = x;
						var noticeY1 = acummY;
						this.prepareDrawText(this.__textInstructionNoticeLine, noticeText, noticeX1, noticeY1, noticeWidth1, noticeHeight1, noticeFontSize1, snapshot._noticeColor, font);
						this.__hasNoticeLine = true;
						acummY = noticeY1 + noticeHeight1;
						noDataFontSize = noticeFontSize1;
					}
				}
			}
			if ($.ig.util.isNaN(snapshot._value) || $.ig.util.isNaN(snapshot._variation)) {
				var noDataText1 = snapshot._noDataText;
				var maxFontSize1 = noDataFontSize;
				noDataFontSize = Math.min(this.calcFontSize(font, noDataText1, w, h), maxFontSize1);
				if (noDataFontSize > 0) {
					var textSize1 = $.ig.NativeUtility.prototype.utility().measureText(noDataText1, font, noDataFontSize);
					var noDataHeight1 = textSize1._height;
					var noDataY1 = ((h - noDataHeight1) / 2);
					this.prepareDrawText(this.__textInstructionNoticeLine, noDataText1, x, noDataY1, w, noDataHeight1, noDataFontSize, snapshot._noticeColor, font);
					this.__textInstructionNoticeLine.draw(canvas, ctx);
				}
			} else {
				var gapY1 = ((h - acummY) / 2);
				this.renderInstructions(canvas, ctx, gapY1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderIndicator(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPIndicatorSnapshot)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderInstructions(Infragistics.ChartCanvasView, System.CanvasContext, System.Single)" />*/
	renderInstructions: function (canvas, ctx, gapY) {
		if (this.__hasNoticeLine) {
			this.__textInstructionNoticeLine._y = this.__textInstructionNoticeLine._y + gapY;
			this.__textInstructionNoticeLine.draw(canvas, ctx);
		}
		if (this.__hasValue) {
			this.__textInstructionValue._y = this.__textInstructionValue._y + gapY;
			this.__textInstructionValue.draw(canvas, ctx);
		}
		if (this.__hasShape) {
			this.__shapeInstruction._y = this.__shapeInstruction._y + gapY;
			this.__shapeInstruction.draw(canvas, ctx);
		}
		if (this.__hasVariation) {
			this.__textInstructionVariation._y = this.__textInstructionVariation._y + gapY;
			this.__textInstructionVariation.draw(canvas, ctx);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorLayer::RenderInstructions(Infragistics.ChartCanvasView, System.CanvasContext, System.Single)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.RPIndicatorLayer::FormatVariationValue(System.Double, System.Double, Infragistics.IndicatorDifferenceMode, System.Boolean, System.Boolean)" />*/
	formatVariationValue: function (variation, valueDifference, displayMode, useMKFormatting, showGroupingSeparator) {
		var variationDecimalPlaces = Math.abs(variation) > 1 || variation == 0 ? 0 : 2;
		switch (displayMode) {
			case $.ig.IndicatorDifferenceMode.prototype.value: return $.ig.ChartsUtility.prototype.labelForValue2(valueDifference, useMKFormatting, $.ig.FormatSettingsNegativeNumberMode.prototype.minus, $.ig.FormatSettingsPositiveNumberMode.prototype.plus, $.ig.FormatSettingsNumberType.prototype.number, 0, showGroupingSeparator, null);
			case $.ig.IndicatorDifferenceMode.prototype.valueAndPercentage: return $.ig.ChartsUtility.prototype.labelForValue2(valueDifference, useMKFormatting, $.ig.FormatSettingsNegativeNumberMode.prototype.minus, $.ig.FormatSettingsPositiveNumberMode.prototype.plus, $.ig.FormatSettingsNumberType.prototype.number, 0, showGroupingSeparator, null) + " (" + $.ig.ChartsUtility.prototype.labelForValue(Math.abs(variation), false, $.ig.FormatSettingsNegativeNumberMode.prototype.minus, $.ig.FormatSettingsNumberType.prototype.percent, variationDecimalPlaces, showGroupingSeparator, null) + ")";
			case $.ig.IndicatorDifferenceMode.prototype.percentage:
			default:
				return $.ig.ChartsUtility.prototype.labelForValue2(variation, false, $.ig.FormatSettingsNegativeNumberMode.prototype.minus, $.ig.FormatSettingsPositiveNumberMode.prototype.plus, $.ig.FormatSettingsNumberType.prototype.percent, variationDecimalPlaces, showGroupingSeparator, null);
		}
	}
	/*<EndMethod Name="System.String Infragistics.RPIndicatorLayer::FormatVariationValue(System.Double, System.Double, Infragistics.IndicatorDifferenceMode, System.Boolean, System.Boolean)" />*/
	,
	$type: new $.ig.Type('RPIndicatorLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPIndicatorLayer" />*/

/*<BeginType Name="Infragistics.RPIndicatorShapeInstruction" />*/

$.ig.util.defType('RPIndicatorShapeInstruction', 'Object', {
	init: function () {
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
	},
	_shape: 0,
	_x: 0,
	_y: 0,
	_shapeSize: 0,
	_fillColor: null,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorShapeInstruction::Draw(Infragistics.ChartCanvasView, System.CanvasContext)" />*/
	draw: function (canvas, ctx) {
		if (this._shape == $.ig.GaugeShape.prototype.circle) {
			var radius = this._shapeSize / 2;
			canvas.drawCircle(ctx, this._x + radius, this._y + radius, radius, this._fillColor, 0, 0);
		} else if (this._shape == $.ig.GaugeShape.prototype.arrowUp || this._shape == $.ig.GaugeShape.prototype.arrowDown || this._shape == $.ig.GaugeShape.prototype.arrowLeft || this._shape == $.ig.GaugeShape.prototype.arrowRight) {
			this.drawArrow(canvas, ctx);
		} else if (this._shape == $.ig.GaugeShape.prototype.dash) {
			var xPoints = new Array(4);
			var yPoints = new Array(4);
			var dashHeight = $.ig.truncate((this._shapeSize * 0.3));
			var top = this._y;
			xPoints[0] = this._x;
			yPoints[0] = top;
			xPoints[1] = this._x + this._shapeSize;
			yPoints[1] = top;
			xPoints[2] = this._x + this._shapeSize;
			yPoints[2] = top + dashHeight;
			xPoints[3] = this._x;
			yPoints[3] = top + dashHeight;
			canvas.drawCustomShape(ctx, xPoints, yPoints, true, this._fillColor, 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorShapeInstruction::Draw(Infragistics.ChartCanvasView, System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorShapeInstruction::DrawArrow(Infragistics.ChartCanvasView, System.CanvasContext)" />*/
	drawArrow: function (canvas, ctx) {
		var xPoints = new Array(3);
		var yPoints = new Array(3);
		var triangleHeight = (Math.sqrt(3) * this._shapeSize / 2);
		if (this._shape == $.ig.GaugeShape.prototype.arrowUp) {
			xPoints[0] = this._x + this._shapeSize / 2;
			yPoints[0] = this._y;
			xPoints[1] = this._x;
			yPoints[1] = this._y + triangleHeight;
			xPoints[2] = this._x + this._shapeSize;
			yPoints[2] = this._y + triangleHeight;
		} else if (this._shape == $.ig.GaugeShape.prototype.arrowDown) {
			xPoints[0] = this._x;
			yPoints[0] = this._y;
			xPoints[1] = this._x + this._shapeSize;
			yPoints[1] = this._y;
			xPoints[2] = this._x + this._shapeSize / 2;
			yPoints[2] = this._y + triangleHeight;
		} else if (this._shape == $.ig.GaugeShape.prototype.arrowLeft) {
			xPoints[0] = this._x;
			yPoints[0] = this._y + this._shapeSize / 2;
			xPoints[1] = this._x + triangleHeight;
			yPoints[1] = this._y;
			xPoints[2] = this._x + triangleHeight;
			yPoints[2] = this._y + this._shapeSize;
		} else if (this._shape == $.ig.GaugeShape.prototype.arrowRight) {
			xPoints[0] = this._x;
			yPoints[0] = this._y;
			xPoints[1] = this._x;
			yPoints[1] = this._y + this._shapeSize;
			xPoints[2] = this._x + triangleHeight;
			yPoints[2] = this._y + this._shapeSize / 2;
		}
		canvas.drawCustomShape(ctx, xPoints, yPoints, true, this._fillColor, 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorShapeInstruction::DrawArrow(Infragistics.ChartCanvasView, System.CanvasContext)" />*/
	,
	$type: new $.ig.Type('RPIndicatorShapeInstruction', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPIndicatorShapeInstruction" />*/

/*<BeginType Name="Infragistics.RPLabelGaugeLayer" />*/

$.ig.util.defType('RPLabelGaugeLayer', 'CalculatedLayer', {
	__textInstructions: null,
	__fontSize: 0,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.RPLabelGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, info, x, y, w, h) {
		var snapshot = info;
		var min = Math.min(w, h);
		this.renderGauge(canvas, ctx, (w / 2 - min / 2), (h / 2 - min / 2), w, h, snapshot);
		var shapeSize = Math.max($.ig.truncate(((snapshot._minFontSize * $.ig.NativeUtility.prototype.utility().getScreenDensity()) * 0.5)), $.ig.truncate((min * 0.05)));
		var padding = shapeSize;
		if (snapshot._shape == $.ig.GaugeShape.prototype.circle) {
			canvas.drawCircle(ctx, w - (shapeSize / 2 + padding), 0 + shapeSize / 2 + padding, shapeSize / 2, snapshot._valueColor, 0, 0);
		} else if (snapshot._shape == $.ig.GaugeShape.prototype.arrowUp || snapshot._shape == $.ig.GaugeShape.prototype.arrowDown || snapshot._shape == $.ig.GaugeShape.prototype.arrowLeft || snapshot._shape == $.ig.GaugeShape.prototype.arrowRight) {
			this.drawArrow(canvas, ctx, snapshot._shape, w, shapeSize, padding, snapshot._valueColor);
		} else if (snapshot._shape == $.ig.GaugeShape.prototype.dash) {
			var xPoints = new Array(4);
			var yPoints = new Array(4);
			var xStarting = w - (shapeSize + padding);
			var dashHeight = $.ig.truncate((shapeSize * 0.3));
			var topPadding = (dashHeight / 2) + padding;
			xPoints[0] = xStarting;
			yPoints[0] = topPadding;
			xPoints[1] = w - padding;
			yPoints[1] = topPadding;
			xPoints[2] = w - padding;
			yPoints[2] = topPadding + dashHeight;
			xPoints[3] = xStarting;
			yPoints[3] = topPadding + dashHeight;
			canvas.drawCustomShape(ctx, xPoints, yPoints, true, snapshot._valueColor, 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPLabelGaugeLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPLabelGaugeLayer::DrawArrow(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.GaugeShape, System.Single, System.Single, System.Single, System.ColorInt)" />*/
	drawArrow: function (canvas, ctx, shape, vizWidth, shapeSize, padding, fillColor) {
		var xPoints = new Array(3);
		var yPoints = new Array(3);
		var xStarting;
		if (shape == $.ig.GaugeShape.prototype.arrowUp) {
			xStarting = vizWidth - (shapeSize + padding);
			xPoints[0] = xStarting + (shapeSize / 2);
			yPoints[0] = padding;
			xPoints[1] = xStarting;
			yPoints[1] = padding + $.ig.truncate((shapeSize * 0.75));
			xPoints[2] = vizWidth - padding;
			yPoints[2] = padding + $.ig.truncate((shapeSize * 0.75));
		} else if (shape == $.ig.GaugeShape.prototype.arrowDown) {
			xStarting = vizWidth - (shapeSize + padding);
			xPoints[0] = xStarting;
			yPoints[0] = padding;
			xPoints[1] = vizWidth - padding;
			yPoints[1] = padding;
			xPoints[2] = xStarting + (shapeSize / 2);
			yPoints[2] = padding + $.ig.truncate((shapeSize * 0.75));
		} else if (shape == $.ig.GaugeShape.prototype.arrowLeft) {
			xStarting = vizWidth - ($.ig.truncate((shapeSize * 0.75)) + padding);
			xPoints[0] = xStarting;
			yPoints[0] = padding + (shapeSize / 2);
			xPoints[1] = vizWidth - padding;
			yPoints[1] = padding;
			xPoints[2] = vizWidth - padding;
			yPoints[2] = padding + shapeSize;
		} else if (shape == $.ig.GaugeShape.prototype.arrowRight) {
			xStarting = vizWidth - ($.ig.truncate((shapeSize * 0.75)) + padding);
			xPoints[0] = xStarting;
			yPoints[0] = padding;
			xPoints[1] = xStarting;
			yPoints[1] = padding + shapeSize;
			xPoints[2] = vizWidth - padding;
			yPoints[2] = padding + (shapeSize / 2);
		}
		canvas.drawCustomShape(ctx, xPoints, yPoints, true, fillColor, 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.RPLabelGaugeLayer::DrawArrow(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.GaugeShape, System.Single, System.Single, System.Single, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.RPLabelGaugeLayer::CalcFontSize(System.String, System.Single, System.Single, System.Single)" />*/
	calcFontSize: function (text, w, h, fontSizePercent) {
		var fontSizeAt1Pt = $.ig.NativeUtility.prototype.utility().measureText(text, this.__textInstructions._font, 1 * $.ig.NativeUtility.prototype.utility().getScreenDensity());
		var fontSizeByWidth = $.ig.truncate(Math.floor(w / fontSizeAt1Pt._width));
		var fontSizeByHeight = $.ig.truncate(((h == -1) ? fontSizeByWidth : Math.floor(h / fontSizeAt1Pt._height)));
		var fontSize = Math.min(fontSizeByWidth, fontSizeByHeight) * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		if (fontSizePercent != 0) {
			fontSize = Math.min(w, h) * fontSizePercent;
		}
		while (fontSize > 0) {
			var measureWithFontSize = $.ig.NativeUtility.prototype.utility().measureText(text, this.__textInstructions._font, fontSize);
			if (measureWithFontSize._width > w || measureWithFontSize._height > h) {
				fontSize--;
			} else {
				break;
			}
		}
		;
		return fontSize;
	}
	/*<EndMethod Name="System.Single Infragistics.RPLabelGaugeLayer::CalcFontSize(System.String, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPLabelGaugeLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	drawText: function (canvas, ctx, text, x, y, w, h, fontSize) {
		this.__textInstructions._text = text;
		this.__textInstructions._fontSize = fontSize;
		this.__textInstructions._x = $.ig.truncate((x + w / 2));
		this.__textInstructions._y = $.ig.truncate((y + h / 2));
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
		this.__textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.RPLabelGaugeLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPLabelGaugeLayer::RenderGauge(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPGaugeSnapshot)" />*/
	renderGauge: function (canvas, ctx, x, y, w, h, snapshot) {
		var size = Math.min(w, h);
		this.__textInstructions._textColor = snapshot._textColor;
		this.__textInstructions._font = snapshot._fontName;
		var text = $.ig.ChartsUtility.prototype.labelForValue(snapshot._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
		this.__fontSize = Math.min(this.calcFontSize(text, w, h, snapshot._fontSizePercent), snapshot._maxFontSize * $.ig.NativeUtility.prototype.utility().getScreenDensity());
		if (this.__fontSize > 0) {
			this.drawText(canvas, ctx, text, x, y, size, size, this.__fontSize);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPLabelGaugeLayer::RenderGauge(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, Infragistics.RPGaugeSnapshot)" />*/
	,
	$type: new $.ig.Type('RPLabelGaugeLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPLabelGaugeLayer" />*/

/*<BeginType Name="Infragistics.ScatterChartLayer" />*/

$.ig.util.defType('ScatterChartLayer', 'CalculatedLayer', {
	__info: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__info = new $.ig.ItemLayoutInfo();
	},
	/*<BeginMethod Name="System.Void Infragistics.ScatterChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		var scatterSnapshot = seriesSnapshot;
		var markerSize = seriesSnapshot._markerRadius;
		for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
			var s = seriesSnapshot._seriesList[seriesIndex];
			var yLocation = s._yLocation;
			var xLocation = s._xLocation;
			var type = s._type;
			var prevX = NaN;
			var prevY = NaN;
			var color = s._colors[0];
			var fadedColor = $.ig.ColorUtility.prototype.applyAlphaToColor($.ig.ScatterChartLayer.prototype.fILL_OPACITY, color);
			var fill = seriesSnapshot._highlightFadeInDataIndex != -1 ? $.ig.ColorUtility.prototype.transitionAlpha(fadedColor, seriesSnapshot._nonHighlightedAlpha / 255) : fadedColor;
			var stroke = seriesSnapshot._highlightFadeInDataIndex != -1 ? $.ig.ColorUtility.prototype.transitionAlpha(color, seriesSnapshot._nonHighlightedAlpha / 255) : color;
			for (var i = 0; i < seriesSnapshot._itemCount; i++) {
				var valueX = seriesSnapshot.valueForItem1(i, seriesIndex, 0);
				var valueY = seriesSnapshot.valueForItem1(i, seriesIndex, 1);
				if ($.ig.util.isNaN(valueX) || $.ig.util.isNaN(valueY)) {
					continue;
				}
				var actualMarkerSize = markerSize;
				if (type == $.ig.CombinedDataItemType.prototype.bubble) {
					var radius = seriesSnapshot.valueForItem1(i, seriesIndex, 2);
					if ($.ig.util.isNaN(radius)) {
						continue;
					}
					if (scatterSnapshot._useRadiusScale) {
						radius = $.ig.CPMathUtility.prototype.getLinearSize(scatterSnapshot._minRadiusValue, scatterSnapshot._maxRadiusValue, scatterSnapshot._minBubbleRadius, scatterSnapshot._maxBubbleRadius, radius);
					}
					actualMarkerSize = radius;
				} else if (type == $.ig.CombinedDataItemType.prototype.scatterOutlier) {
					actualMarkerSize = actualMarkerSize * 2;
				}
				var curX = seriesSnapshot.calculateHorizontalValuePosition(valueX, xLocation);
				var curY = seriesSnapshot.calculateVerticalValuePosition(valueY, yLocation);
				if (type == $.ig.CombinedDataItemType.prototype.scatterLine) {
					if (i > 0 && !$.ig.util.isNaN(prevX)) {
						canvas.drawLine(ctx, prevX, prevY, curX, curY, color, $.ig.ScatterChartLayer.prototype.lINE_THICKNESS);
					}
					prevX = curX;
					prevY = curY;
				}
				var strokeThickness = $.ig.ScatterChartLayer.prototype.mARKER_STROKE_THICKNESS;
				if (seriesSnapshot._highlightFadeInDataIndex != -1) {
					if (seriesSnapshot._highlightFadeInSeriesIndex == seriesIndex && seriesSnapshot._highlightFadeInDataIndex == i) {
						continue;
					}
				}
				if (seriesSnapshot._highlightFadeOutDataIndex != -1) {
					if (seriesSnapshot._highlightFadeOutSeriesIndex == seriesIndex && seriesSnapshot._highlightFadeOutDataIndex == i) {
						continue;
					}
				}
				if (!s._hideMarkers) {
					canvas.drawCircle(ctx, curX, curY, actualMarkerSize, fill, stroke, strokeThickness);
				}
			}
		}
		if (seriesSnapshot._highlightFadeOutDataIndex != -1) {
			var valueX1 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeOutDataIndex, seriesSnapshot._highlightFadeOutSeriesIndex, 0);
			var valueY1 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeOutDataIndex, seriesSnapshot._highlightFadeOutSeriesIndex, 1);
			if (!$.ig.util.isNaN(valueX1) && !$.ig.util.isNaN(valueY1)) {
				var s1 = seriesSnapshot._seriesList[seriesSnapshot._highlightFadeOutSeriesIndex];
				var actualMarkerSize1 = markerSize;
				if (s1._type == $.ig.CombinedDataItemType.prototype.bubble) {
					var radius1 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeOutDataIndex, seriesSnapshot._highlightFadeOutSeriesIndex, 2);
					if ($.ig.util.isNaN(radius1)) {
						return;
					}
					if (scatterSnapshot._useRadiusScale) {
						radius1 = $.ig.CPMathUtility.prototype.getLinearSize(scatterSnapshot._minRadiusValue, scatterSnapshot._maxRadiusValue, scatterSnapshot._minBubbleRadius, scatterSnapshot._maxBubbleRadius, radius1);
					}
					actualMarkerSize1 = radius1;
				}
				var curX1 = seriesSnapshot.calculateHorizontalValuePosition(valueX1, s1._xLocation);
				var curY1 = seriesSnapshot.calculateVerticalValuePosition(valueY1, s1._yLocation);
				var color1 = s1._colors[0];
				var fill1 = $.ig.ColorUtility.prototype.transitionAlpha($.ig.ColorUtility.prototype.applyAlphaToColor($.ig.ScatterChartLayer.prototype.fILL_OPACITY, color1), seriesSnapshot._highlightFadeOutAlpha / 255);
				var stroke1 = $.ig.ColorUtility.prototype.transitionAlpha(color1, seriesSnapshot._highlightFadeOutAlpha / 255);
				var strokeThickness1 = $.ig.ScatterChartLayer.prototype.mARKER_STROKE_THICKNESS;
				canvas.drawCircle(ctx, curX1, curY1, actualMarkerSize1, fill1, stroke1, strokeThickness1);
			}
		}
		if (seriesSnapshot._highlightFadeInDataIndex != -1) {
			var valueX2 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeInDataIndex, seriesSnapshot._highlightFadeInSeriesIndex, 0);
			var valueY2 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeInDataIndex, seriesSnapshot._highlightFadeInSeriesIndex, 1);
			if (!$.ig.util.isNaN(valueX2) && !$.ig.util.isNaN(valueY2)) {
				var s2 = seriesSnapshot._seriesList[seriesSnapshot._highlightFadeInSeriesIndex];
				var actualMarkerSize2 = markerSize;
				if (s2._type == $.ig.CombinedDataItemType.prototype.bubble) {
					var radius2 = seriesSnapshot.valueForItem1(seriesSnapshot._highlightFadeInDataIndex, seriesSnapshot._highlightFadeInSeriesIndex, 2);
					if ($.ig.util.isNaN(radius2)) {
						return;
					}
					if (scatterSnapshot._useRadiusScale) {
						radius2 = $.ig.CPMathUtility.prototype.getLinearSize(scatterSnapshot._minRadiusValue, scatterSnapshot._maxRadiusValue, scatterSnapshot._minBubbleRadius, scatterSnapshot._maxBubbleRadius, radius2);
					}
					actualMarkerSize2 = radius2;
				}
				var curX2 = seriesSnapshot.calculateHorizontalValuePosition(valueX2, s2._xLocation);
				var curY2 = seriesSnapshot.calculateVerticalValuePosition(valueY2, s2._yLocation);
				var color2 = s2._colors[0];
				var fill2 = $.ig.ColorUtility.prototype.transitionAlpha($.ig.ColorUtility.prototype.applyAlphaToColor($.ig.ScatterChartLayer.prototype.fILL_OPACITY, color2), seriesSnapshot._highlightFadeInAlpha / 255);
				var stroke2 = $.ig.ColorUtility.prototype.transitionAlpha(color2, seriesSnapshot._highlightFadeInAlpha / 255);
				var strokeThickness2 = $.ig.ScatterChartLayer.prototype.mARKER_STROKE_THICKNESS;
				canvas.drawCircle(ctx, curX2, curY2, actualMarkerSize2, fill2, stroke2, strokeThickness2);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChartLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('ScatterChartLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScatterChartLayer" />*/

/*<BeginType Name="Infragistics.ScatterLegendLayer" />*/

$.ig.util.defType('ScatterLegendLayer', 'LegendLayer', {
	init: function () {
		$.ig.LegendLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ScatterLegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var legendSnapshot = snapshot;
		var reservedHalfMarkerSize = legendSnapshot._legendMarkerSize / 2;
		if (legendSnapshot._legendLocation != $.ig.LegendLocation.prototype.none && w > 0 && h > 0) {
			if (!$.ig.ChartsUtility.prototype.stringIsNullOrEmpty(legendSnapshot._legendItemsTitle)) {
				canvas.drawText(ctx, legendSnapshot._legendItemsTitlePositions[0], legendSnapshot._legendItemsTitlePositions[1], 0, legendSnapshot._legendItemsTitle + ":", legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, $.ig.ThemeManager.prototype.theme().drawingBoldFont(), legendSnapshot._legendItemsTitlePositions[3]);
				var iconCenterOffset = legendSnapshot._legendItemBaseLine / 2;
				for (var i = 0; i < legendSnapshot._seriesCount; i++) {
					var s = legendSnapshot._seriesList[i];
					var iconSize = legendSnapshot.getLegendIconSize($.ig.LegendIconShape.prototype.circle);
					for (var j = 0; j < s._stackKeys.length; j++) {
						var offset = j * 4;
						var lx = x + s._legendPositions[offset];
						var ly = y + s._legendPositions[offset + 1];
						var lh = s._legendPositions[offset + 3];
						if ($.ig.util.isNaN(lx) || $.ig.util.isNaN(ly)) {
							continue;
						}
						var color = s._colors[j];
						var markerRadius = iconSize._width / 2;
						var cX = lx + reservedHalfMarkerSize;
						var cY = ly + iconCenterOffset + this.markerTop();
						var label = legendSnapshot.getLabelForLegend(i, j);
						canvas.drawCircle(ctx, cX, cY, markerRadius, color, 0, 0);
						canvas.drawText(ctx, lx + iconSize._width + legendSnapshot._legendSmallPadding, ly, 0, label, legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, legendSnapshot._legendFontName, lh);
					}
				}
			}
			if (!$.ig.ChartsUtility.prototype.stringIsNullOrEmpty(legendSnapshot._legendSizeScaleTitle)) {
				var sizeScaleX = legendSnapshot._legendSizeScaleTitlePositions[0];
				canvas.drawText(ctx, sizeScaleX, legendSnapshot._legendSizeScaleTitlePositions[1], 0, legendSnapshot._legendSizeScaleTitle + ":", legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, $.ig.ThemeManager.prototype.theme().drawingBoldFont(), legendSnapshot._legendSizeScaleTitlePositions[3]);
				sizeScaleX += legendSnapshot._legendSizeScaleTitlePositions[2] + legendSnapshot._legendItemSpacing;
				canvas.drawText(ctx, sizeScaleX, legendSnapshot._legendSizeScaleTitlePositions[1], 0, legendSnapshot._minRadiusText, legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, legendSnapshot._legendFontName, legendSnapshot._legendSizeScaleTitlePositions[3]);
				sizeScaleX += legendSnapshot._minRadiusValueTextWidth + legendSnapshot._legendSmallPadding;
				var cy = (legendSnapshot._legendSizeScaleTitlePositions[1] + legendSnapshot._legendSizeScaleTitlePositions[3] / 2 - 0.5);
				var circleColor = $.ig.ColorUtility.prototype.applyAlphaToColor(160, legendSnapshot._legendLabelColor);
				var innerCircleColor = $.ig.ColorUtility.prototype.applyAlphaToColor(50, legendSnapshot._legendLabelColor);
				var circleSpacing = 4 * $.ig.NativeUtility.prototype.utility().getScreenDensity();
				var radius = 2.5;
				var circleCount = 5;
				var radiusIncrement = 0.75;
				if (this.calculateSizeScaleSize(legendSnapshot, radius, radiusIncrement, circleCount) > w) {
					circleCount = 3;
					radiusIncrement = 1.5;
					if (this.calculateSizeScaleSize(legendSnapshot, radius, radiusIncrement, circleCount) > w) {
						circleCount = 2;
						radiusIncrement = 3;
						if (this.calculateSizeScaleSize(legendSnapshot, radius, radiusIncrement, circleCount) > w) {
							circleCount = 1;
						}
					}
				}
				for (var i1 = 0; i1 < circleCount; i1++) {
					if (circleCount == 1) {
						sizeScaleX += radius + radiusIncrement;
						canvas.drawCircle(ctx, sizeScaleX, cy, radius, circleColor, 0, 0);
						radius += radiusIncrement;
						canvas.drawCircle(ctx, sizeScaleX, cy, radius, 0, innerCircleColor, 2);
						sizeScaleX += radiusIncrement + circleSpacing * 1.5;
					} else {
						sizeScaleX += radius;
						if (i1 == 0 || i1 == circleCount - 1) {
							canvas.drawCircle(ctx, sizeScaleX, cy, radius + 1, circleColor, 0, 0);
						} else {
							canvas.drawCircle(ctx, sizeScaleX, cy, radius, 0, innerCircleColor, 2);
						}
						sizeScaleX += radius + circleSpacing;
						radius += radiusIncrement;
					}
				}
				sizeScaleX += legendSnapshot._legendSmallPadding - circleSpacing;
				canvas.drawText(ctx, sizeScaleX, legendSnapshot._legendSizeScaleTitlePositions[1], 0, legendSnapshot._maxRadiusText, legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, legendSnapshot._legendFontName, legendSnapshot._legendSizeScaleTitlePositions[3]);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterLegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.ScatterLegendLayer::CalculateSizeScaleSize(Infragistics.ScatterSeriesSnapshot, System.Single, System.Single, System.Int32)" />*/
	calculateSizeScaleSize: function (legendSnapshot, startingRadius, radiusIncrement, circleCount) {
		var density = $.ig.NativeUtility.prototype.utility().getScreenDensity();
		var radius = startingRadius;
		var spacing = 4 * density;
		var calculatedSizeScaleWidth = legendSnapshot._legendSizeScaleTitlePositions[0] + legendSnapshot._legendSizeScaleTitlePositions[2] + legendSnapshot._minRadiusValueTextWidth + legendSnapshot._legendItemSpacing + legendSnapshot._legendSmallPadding;
		for (var i = 0; i < circleCount; i++) {
			calculatedSizeScaleWidth += (radius * 2) + spacing;
			radius += radiusIncrement;
		}
		calculatedSizeScaleWidth += legendSnapshot._legendSmallPadding - spacing + legendSnapshot._maxRadiusValueTextWidth;
		return calculatedSizeScaleWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.ScatterLegendLayer::CalculateSizeScaleSize(Infragistics.ScatterSeriesSnapshot, System.Single, System.Single, System.Int32)" />*/
	,
	$type: new $.ig.Type('ScatterLegendLayer', $.ig.LegendLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScatterLegendLayer" />*/

/*<BeginType Name="Infragistics.SliceLegendLayer" />*/

$.ig.util.defType('SliceLegendLayer', 'LegendLayer', {
	init: function () {
		$.ig.LegendLayer.prototype.init.call(this);
	},
	__slice: null,
	/*<BeginMethod Name="System.Void Infragistics.SliceLegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var legendSnapshot = snapshot;
		if (legendSnapshot._legendLocation != $.ig.LegendLocation.prototype.none && w > 0 && h > 0) {
			var markerRadius = legendSnapshot._legendMarkerSize / 2;
			for (var i = 0; i < legendSnapshot._visibleSliceCount; i++) {
				var sliceIndex = legendSnapshot._flipIndexOrder ? legendSnapshot._visibleSliceCount - (i + 1) : i;
				this.__slice = legendSnapshot.resolveVisibleSliceAtIndex(sliceIndex);
				var offset = i * 4;
				var lx = x + legendSnapshot._legendPositions[offset];
				var ly = y + legendSnapshot._legendPositions[offset + 1];
				var lh = legendSnapshot._legendPositions[offset + 3];
				var color = this.__slice._fillColor;
				var fillFactor = (legendSnapshot._fillColors.length == 1) ? i + 1 : $.ig.intDivide(i, (legendSnapshot._fillColors.length - 1));
				for (var k = 0; k < fillFactor; k++) {
					if (fillFactor == 0) {
						break;
					}
					color = $.ig.ColorUtility.prototype.lightenColor(color, 0.1);
				}
				var cX = lx + markerRadius;
				var cY = ly + markerRadius + this.markerTop();
				canvas.drawCircle(ctx, cX, cY, markerRadius, color, 0, 0);
				var label = legendSnapshot.getLabelForLegend(0, sliceIndex);
				canvas.drawText(ctx, cX + legendSnapshot._legendItemSpacing, cY - lh / 2, 0, label, legendSnapshot._legendLabelColor, legendSnapshot._densifiedLegendFontSize, legendSnapshot._legendFontName, lh);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SliceLegendLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('SliceLegendLayer', $.ig.LegendLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SliceLegendLayer" />*/

/*<BeginType Name="Infragistics.TextMarkerLayer" />*/

$.ig.util.defType('TextMarkerLayer', 'CalculatedLayer', {
	_textInstructions: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this._textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.TextMarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._textMarkersVisible && seriesSnapshot._valueInterval == 1) {
			var supported = true;
			for (var i = 0; i < seriesSnapshot._seriesCount; i++) {
				var s = seriesSnapshot._seriesList[i];
				if (s.isScatterSeries() || s.isFinancialSeries() || s.isRangeSeries() || s.isStackSeries()) {
					supported = false;
					break;
				}
			}
			if (supported) {
				var fontMultiplier = 1.4;
				this._textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
				this._textInstructions._degrees = 0;
				this._textInstructions._font = seriesSnapshot._fontName;
				this._textInstructions._fontSize = $.ig.truncate((seriesSnapshot._fontSize * fontMultiplier));
				this._textInstructions._strokeWidth = $.ig.TextMarkerLayer.prototype._tEXT_STROKE_THICKNESS;
				var info = new $.ig.ItemLayoutInfo();
				var backgroundColor = seriesSnapshot._markerStrokeColor;
				var textMarkerHeight = seriesSnapshot._labelTextHeight * fontMultiplier;
				var verticalPadding = textMarkerHeight / 4;
				var sideBySide = 0;
				var currentSideBySide = -1;
				var stackIndex = 0;
				for (var seriesIndex = 0; seriesIndex < seriesSnapshot._seriesCount; seriesIndex++) {
					var s1 = seriesSnapshot._seriesList[seriesIndex];
					var type = s1._type;
					if (s1.isSideBySideSeries()) {
						currentSideBySide = sideBySide;
					} else if (seriesSnapshot._seriesCount > 1) {
						continue;
					} else {
						currentSideBySide = -1;
					}
					for (var i1 = seriesSnapshot._startIndex; i1 <= seriesSnapshot._endIndex; i1 += seriesSnapshot._valueInterval) {
						var seriesColor = s1._colors[0];
						if (i1 % seriesSnapshot._valueInterval == 0) {
							var index = seriesSnapshot.adjustIndexForInterval(i1);
							var value = seriesSnapshot.valueForItem(i1, seriesIndex);
							if ($.ig.util.isNaN(value)) {
								continue;
							}
							seriesSnapshot.calculateValueBounds(info, index, seriesIndex, stackIndex, sideBySide, s1);
							var labelX = 0;
							var startY = info._boundsY;
							var availHeight = info._boundsHeight;
							var top = startY;
							var bottom = startY + availHeight;
							var strokeColor = backgroundColor;
							var useRestrictedWidth = false;
							var labelY = 0;
							switch (type) {
								case $.ig.CombinedDataItemType.prototype.waterfall:
								case $.ig.CombinedDataItemType.prototype.column:
								case $.ig.CombinedDataItemType.prototype.stepArea:
								case $.ig.CombinedDataItemType.prototype.stepLine:
									{
										useRestrictedWidth = true;
										this._textInstructions._strokeWidth = 0;
										labelX = info._boundsX + x + info._boundsWidth / 2;
										if (value < 0) {
											if (availHeight > (textMarkerHeight + verticalPadding)) {
												if (type != $.ig.CombinedDataItemType.prototype.stepLine) {
													strokeColor = seriesColor;
													seriesColor = backgroundColor;
												}
												labelY = bottom - (textMarkerHeight + verticalPadding);
											} else {
												labelY = bottom + verticalPadding;
											}
										} else {
											if (availHeight > (textMarkerHeight + verticalPadding)) {
												if (type != $.ig.CombinedDataItemType.prototype.stepLine) {
													strokeColor = seriesColor;
													seriesColor = backgroundColor;
												}
												labelY = top + verticalPadding;
											} else {
												labelY = top - (textMarkerHeight + verticalPadding);
											}
										}
										break;
									}
								case $.ig.CombinedDataItemType.prototype.line:
								case $.ig.CombinedDataItemType.prototype.area:
								case $.ig.CombinedDataItemType.prototype.point:
								case $.ig.CombinedDataItemType.prototype.spline:
								case $.ig.CombinedDataItemType.prototype.splineArea:
									{
										strokeColor = seriesSnapshot._markerStrokeColor;
										labelX = info._valueLocationX + x;
										if (value < 0) {
											if (h - bottom < textMarkerHeight + verticalPadding) {
												labelY = bottom - (textMarkerHeight + verticalPadding);
											} else {
												labelY = bottom + verticalPadding;
											}
										} else {
											if (top - y < textMarkerHeight + verticalPadding) {
												labelY = top + verticalPadding;
											} else {
												labelY = top - (textMarkerHeight + verticalPadding);
											}
										}
										break;
									}
								default: break;
							}
							var useMK = seriesSnapshot._primaryAxisValueFormatUseMKFormatting;
							var negMode = seriesSnapshot._primaryAxisValueFormatNegativeMode;
							var numType = seriesSnapshot._primaryAxisValueFormatType;
							var digits = seriesSnapshot._primaryAxisValueFormatFractionDigits;
							var currencySymbol = seriesSnapshot._primaryAxisValueFormatCurrencySymbol;
							var showGroupingSeparator = seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator;
							this._textInstructions._x = labelX;
							this._textInstructions._y = labelY;
							this._textInstructions._text = $.ig.ChartsUtility.prototype.labelForValue(value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
							this._textInstructions._textColor = seriesColor;
							this._textInstructions._strokeColor = strokeColor;
							var restrictedWidth = useRestrictedWidth ? info._boundsWidth - 4 * $.ig.NativeUtility.prototype.utility().getScreenDensity() : -1;
							this._textInstructions.draw1(canvas, ctx, restrictedWidth, -1);
						}
					}
					if (s1.isSideBySideSeries()) {
						sideBySide++;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TextMarkerLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('TextMarkerLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TextMarkerLayer" />*/

/*<BeginType Name="Infragistics.TreemapLayer" />*/

$.ig.util.defType('TreemapLayer', 'Layer', {
	__textInstructions: null,
	init: function () {
		$.ig.Layer.prototype.init.call(this);
		this.__textInstructions = new $.ig.TextInstructions();
	},
	/*<BeginMethod Name="System.Void Infragistics.TreemapLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	render: function (canvas, context, x, y, w, h, info) {
		$.ig.Layer.prototype.render.call(this, canvas, context, x, y, w, h, info);
		if (info == null) {
			return;
		}
		var snapshot = info;
		if (snapshot._rootData != null) {
			this.initText(snapshot);
			this.drawData(canvas, context, snapshot._rootData, snapshot, 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapLayer::InitText(Infragistics.TreemapSnapshot)" />*/
	initText: function (snapshot) {
		this.__textInstructions._textColor = snapshot._textColor;
		this.__textInstructions._hAlignment = $.ig.TextHorizontalAlignment.prototype.left;
		this.__textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapLayer::InitText(Infragistics.TreemapSnapshot)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single, System.String, System.Int32)" />*/
	drawText: function (canvas, context, text, x, y, w, h, spaceForLabel, font, depth) {
		var padding = spaceForLabel * 0.15;
		this.__textInstructions._font = font;
		this.__textInstructions._text = text;
		this.__textInstructions._fontSize = $.ig.truncate((spaceForLabel * 0.8 - padding * 2));
		this.__textInstructions._x = x + padding;
		this.__textInstructions._y = (depth == 0) ? y + spaceForLabel / 2 : (y + h - padding * 2);
		this.__textInstructions.draw1(canvas, context, w - padding * 2, h - padding * 2);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapLayer::DrawText(Infragistics.ChartCanvasView, System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Single, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapLayer::DrawData(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Int32, System.ColorInt)" />*/
	drawData: function (canvas, context, data, snapshot, currentDepth, color) {
		if (data._x != null) {
			var inset = currentDepth == 0 ? 2 : 4;
			var count = data._x.length;
			var prevX = 0, prevY = 0, prevW = 0, prevH = 0;
			var currentLayoutDirection = -1;
			var currentTotal = 0;
			for (var i = 0; i < count; i++) {
				if (currentDepth == 0) {
					color = snapshot.getColor(i);
					canvas.drawRect(context, data._x[i] + inset, data._y[i] + inset, data._w[i] - inset * 2, data._h[i] - inset * 2, color, 0, 0);
					canvas.drawRect(context, data._x[i] + inset, data._y[i] + inset, data._w[i] - inset * 2, snapshot._labelHeightByDepth[currentDepth], $.ig.ColorUtility.prototype.lightenOrDarkenColor(color, 0.2), 0, 0);
				} else {
					var x = data._x[i];
					var y = data._y[i];
					var w = data._w[i];
					var h = data._h[i];
					if (i != 0) {
						if ($.ig.truncate(prevX) == $.ig.truncate(x)) {
							if ($.ig.truncate(prevW) != $.ig.truncate(w)) {
								canvas.drawLine(context, x + inset, y, x + (prevW - inset), y, snapshot._strokeColor, 1);
							} else {
								if (currentLayoutDirection != 0) {
									currentTotal += prevH;
								}
								canvas.drawLine(context, x + inset, y, x + (w - inset), y, snapshot._strokeColor, 1);
								currentTotal += h;
								currentLayoutDirection = 0;
							}
						} else if ($.ig.truncate(prevY) == $.ig.truncate(y)) {
							if ($.ig.truncate(prevH) != $.ig.truncate(h)) {
								canvas.drawLine(context, x, y + inset, x, y + (prevH - inset), snapshot._strokeColor, 1);
							} else {
								if (currentLayoutDirection != 1) {
									currentTotal += prevW;
								}
								canvas.drawLine(context, x, y + inset, x, y + (h - inset), snapshot._strokeColor, 1);
								currentTotal += w;
								currentLayoutDirection = 1;
							}
						} else if (currentTotal != 0) {
							if (currentLayoutDirection == 0) {
								canvas.drawLine(context, x, y + inset, x, y + (currentTotal - inset), snapshot._strokeColor, 1);
							} else {
								canvas.drawLine(context, x + inset, y, x + (currentTotal - inset), y, snapshot._strokeColor, 1);
							}
							currentTotal = 0;
							currentLayoutDirection = -1;
						}
					}
					prevX = x;
					prevY = y;
					prevW = w;
					prevH = h;
				}
				this.drawText(canvas, context, data._labels[i], data._x[i] + inset, data._y[i] + inset, data._w[i] - inset * 2, data._h[i] - inset * 2, snapshot._labelHeightByDepth[currentDepth], (currentDepth == 0) ? snapshot._headerFont : snapshot._fontName, currentDepth);
				if (data._children != null) {
					var childData = data._children[i];
					this.drawData(canvas, context, childData, snapshot, currentDepth + 1, color);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapLayer::DrawData(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Int32, System.ColorInt)" />*/
	,
	$type: new $.ig.Type('TreemapLayer', $.ig.Layer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapLayer" />*/

/*<BeginType Name="Infragistics.TreemapTooltipLayer" />*/

$.ig.util.defType('TreemapTooltipLayer', 'TreemapLayer', {
	init: function () {
		$.ig.TreemapLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.TreemapTooltipLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	render: function (canvas, ctx, x, y, w, h, info) {
		var snapshot = info;
		this.initText(snapshot);
		canvas.drawRect(ctx, 0, 0, snapshot._width, snapshot._height, $.ig.ColorUtility.prototype.createColor1(125, 0, 0, 0), 0, 0);
		this.highlightItemAtPoint(canvas, ctx, snapshot._rootData, snapshot._tooltipX, snapshot._tooltipY, snapshot._width, snapshot._height);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapTooltipLayer::Render(Infragistics.ChartCanvasView, System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.TreemapTooltipLayer::HighlightItemAtPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.TreemapData, System.Single, System.Single, System.Single, System.Single)" />*/
	highlightItemAtPoint: function (canvas, ctx, data, px, py, containerWidth, containerHeight) {
		if (data != null) {
			var count = data._x.length;
			if (count > 0) {
				for (var i = 0; i < count; i++) {
					if ($.ig.CPMathUtility.prototype.rectContainsPoint(data._x[i], data._y[i], data._w[i], data._h[i], px, py)) {
						canvas.drawRect(ctx, data._x[i], data._y[i], data._w[i], data._h[i], 0, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), 1);
						var handled = false;
						if (data._children != null) {
							var child = data._children[i];
							handled = this.highlightItemAtPoint(canvas, ctx, child, px, py, containerWidth, containerHeight);
						}
						if (!handled) {
							var size = Math.min(containerWidth, containerHeight);
							var itemSize = (size * 0.25);
							var x = px;
							var y = py - itemSize;
							var w = itemSize;
							var h = itemSize;
							if (x + w > containerWidth) {
								x = px - w;
							}
							if (x < 0) {
								x = 0;
							}
							if (y < 0) {
								y = py;
							}
							if (y + h > containerHeight) {
								y = py - h;
							}
						}
						return true;
					}
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.TreemapTooltipLayer::HighlightItemAtPoint(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.TreemapData, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('TreemapTooltipLayer', $.ig.TreemapLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapTooltipLayer" />*/

/*<BeginType Name="Infragistics.TrendlineLayer" />*/

$.ig.util.defType('TrendlineLayer', 'CalculatedLayer', {
	__info: null,
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__info = new $.ig.ItemLayoutInfo();
	},
	/*<BeginMethod Name="System.Void Infragistics.TrendlineLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot.isPolar()) {
			x = y = 0;
		}
		for (var trendlineIndex = 0; trendlineIndex < seriesSnapshot._seriesCount; trendlineIndex++) {
			var s = seriesSnapshot._seriesList[trendlineIndex];
			var numberOfPoints = seriesSnapshot.calculateNumberOfTrendlinePoints(trendlineIndex);
			if (numberOfPoints > 0) {
				var xPoints = new Array(numberOfPoints);
				var yPoints = new Array(numberOfPoints);
				seriesSnapshot.calculateTrendlineData(trendlineIndex, xPoints, yPoints);
				var color = s._trendlineColor;
				for (var i = 0; i < xPoints.length; i++) {
					xPoints[i] = seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX ? xPoints[i] : xPoints[i] + x;
					yPoints[i] = seriesSnapshot._mode == $.ig.ChartAxisMode.prototype.numericYCategoryX ? yPoints[i] : yPoints[i] + y;
				}
				canvas.drawCustomShape(ctx, xPoints, yPoints, false, 0, color, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TrendlineLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('TrendlineLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TrendlineLayer" />*/

/*<BeginType Name="Infragistics.XAxisTitleLayer" />*/

$.ig.util.defType('XAxisTitleLayer', 'CalculatedLayer', {
	__location: 0,
	init: function (location) {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__location = location;
	},
	/*<BeginMethod Name="System.Single Infragistics.XAxisTitleLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xTitleBottomFrameX : s._xTitleTopFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.XAxisTitleLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.XAxisTitleLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xTitleBottomFrameY : s._xTitleTopFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.XAxisTitleLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.XAxisTitleLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xTitleBottomFrameWidth : s._xTitleTopFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.XAxisTitleLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.XAxisTitleLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		var s = snapshot;
		return this.__location == $.ig.XAxisLocation.prototype.bottom ? s._xTitleBottomFrameHeight : s._xTitleTopFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.XAxisTitleLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.XAxisTitleLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._xAxisTopTitle == null && this.__location == $.ig.XAxisLocation.prototype.top) {
			return;
		}
		if (seriesSnapshot._xAxisBottomTitle == null && this.__location == $.ig.XAxisLocation.prototype.bottom) {
			return;
		}
		var textInstructions = new $.ig.TextInstructions();
		textInstructions._degrees = 0;
		textInstructions._x = x + w / 2;
		var padding = -5 * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		textInstructions._y = y + padding + (h / 2);
		textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.top;
		textInstructions._font = seriesSnapshot._fontName;
		textInstructions._fontSize = seriesSnapshot._fontSize;
		textInstructions._text = this.__location == $.ig.XAxisLocation.prototype.top ? seriesSnapshot._xAxisTopTitle : seriesSnapshot._xAxisBottomTitle;
		textInstructions._textColor = seriesSnapshot._fontColor;
		textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.XAxisTitleLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('XAxisTitleLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.XAxisTitleLayer" />*/

/*<BeginType Name="Infragistics.XMajorAxisLinesLayer" />*/

$.ig.util.defType('XMajorAxisLinesLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.XMajorAxisLinesLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._majorAxisLineThickness > 0) {
			var location = seriesSnapshot._hasBottomAxis ? $.ig.XAxisLocation.prototype.bottom : $.ig.XAxisLocation.prototype.top;
			var numberOfLabels = seriesSnapshot._numberOfMaxHorizontalNumericLabels;
			var stepSize = location == $.ig.XAxisLocation.prototype.bottom ? seriesSnapshot._numericBottomAxisStepSize : seriesSnapshot._numericTopAxisStepSize;
			var min = location == $.ig.XAxisLocation.prototype.bottom ? seriesSnapshot._visibleBottomMin : seriesSnapshot._visibleTopMin;
			var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
			var logBase = -1;
			if (seriesSnapshot._resolvedXAxisTopIsLogarithmic && seriesSnapshot._hasTopAxis) {
				logBase = seriesSnapshot._xAxisTopLogBase;
			}
			if (seriesSnapshot._resolvedXAxisBottomIsLogarithmic && !seriesSnapshot._hasBottomAxis) {
				logBase = seriesSnapshot._xAxisBottomLogBase;
			}
			var value = 0;
			if (actualMin < 0 && logBase != -1) {
				actualMin = 0;
			}
			for (var i = 0; i <= numberOfLabels; i++) {
				if (logBase != -1) {
					value = (actualMin + Math.pow(logBase, i));
				} else {
					value = (actualMin + (i * stepSize));
				}
				var lineX = seriesSnapshot.calculateHorizontalValuePosition(value, location);
				if (lineX > seriesSnapshot._canvasFrameX + seriesSnapshot._canvasFrameWidth) {
					break;
				}
				if (lineX >= seriesSnapshot._canvasFrameX && lineX <= seriesSnapshot._canvasFrameX + seriesSnapshot._canvasFrameWidth) {
					canvas.drawLine(ctx, lineX, y, lineX, y + h, seriesSnapshot._majorAxisLineColor, seriesSnapshot._majorAxisLineThickness);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.XMajorAxisLinesLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('XMajorAxisLinesLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.XMajorAxisLinesLayer" />*/

/*<BeginType Name="Infragistics.YAxisTitleLayer" />*/

$.ig.util.defType('YAxisTitleLayer', 'CalculatedLayer', {
	__location: 0,
	init: function (location) {
		$.ig.CalculatedLayer.prototype.init.call(this);
		this.__location = location;
	},
	/*<BeginMethod Name="System.Single Infragistics.YAxisTitleLayer::frameX(Infragistics.SnapshotBase)" />*/
	frameX: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yTitleLeftFrameX : s._yTitleRightFrameX;
	}
	/*<EndMethod Name="System.Single Infragistics.YAxisTitleLayer::frameX(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.YAxisTitleLayer::frameY(Infragistics.SnapshotBase)" />*/
	frameY: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yTitleLeftFrameY : s._yTitleRightFrameY;
	}
	/*<EndMethod Name="System.Single Infragistics.YAxisTitleLayer::frameY(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.YAxisTitleLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	frameWidth: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yTitleLeftFrameWidth : s._yTitleRightFrameWidth;
	}
	/*<EndMethod Name="System.Single Infragistics.YAxisTitleLayer::frameWidth(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.YAxisTitleLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	frameHeight: function (snapshot) {
		var s = snapshot;
		return (this.__location == $.ig.YAxisLocation.prototype.left) ? s._yTitleLeftFrameHeight : s._yTitleRightFrameHeight;
	}
	/*<EndMethod Name="System.Single Infragistics.YAxisTitleLayer::frameHeight(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.YAxisTitleLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (this.__location == $.ig.YAxisLocation.prototype.left && (!seriesSnapshot._hasLeftAxis || seriesSnapshot._yAxisLeftTitle == null || seriesSnapshot._yAxisLeftTitle.length == 0)) {
			return;
		}
		if (this.__location == $.ig.YAxisLocation.prototype.right && (!seriesSnapshot._hasRightAxis || seriesSnapshot._yAxisRightTitle == null || seriesSnapshot._yAxisRightTitle.length == 0)) {
			return;
		}
		var textInstructions = new $.ig.TextInstructions();
		textInstructions._degrees = (this.__location == $.ig.YAxisLocation.prototype.left) ? 270 : 90;
		var padding = 5 * $.ig.NativeUtility.prototype.utility().getScreenDensity();
		var paddingDirection = this.__location == $.ig.YAxisLocation.prototype.left ? -1 : 1;
		textInstructions._x = x + (padding * paddingDirection) + (w / 2);
		textInstructions._y = y + h / 2;
		textInstructions._alignment = $.ig.TextVerticalAlignment.prototype.center;
		textInstructions._font = seriesSnapshot._fontName;
		textInstructions._fontSize = seriesSnapshot._fontSize;
		textInstructions._text = (this.__location == $.ig.YAxisLocation.prototype.left) ? seriesSnapshot._yAxisLeftTitle : seriesSnapshot._yAxisRightTitle;
		textInstructions._textColor = seriesSnapshot._fontColor;
		textInstructions.draw(canvas, ctx);
	}
	/*<EndMethod Name="System.Void Infragistics.YAxisTitleLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('YAxisTitleLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.YAxisTitleLayer" />*/

/*<BeginType Name="Infragistics.YMajorAxisLinesLayer" />*/

$.ig.util.defType('YMajorAxisLinesLayer', 'CalculatedLayer', {
	init: function () {
		$.ig.CalculatedLayer.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.YMajorAxisLinesLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	renderLayer: function (canvas, ctx, snapshot, x, y, w, h) {
		var seriesSnapshot = snapshot;
		if (seriesSnapshot._majorAxisLineThickness > 0) {
			var yLocation = seriesSnapshot._hasLeftAxis ? $.ig.YAxisLocation.prototype.left : $.ig.YAxisLocation.prototype.right;
			var numberOfLabels = seriesSnapshot._numberOfMaxVerticalNumericLabels;
			var stepSize = seriesSnapshot._numericLeftAxisStepSize;
			var min = seriesSnapshot._hasLeftAxis ? seriesSnapshot._visibleLeftMin : seriesSnapshot._visibleRightMin;
			var actualMin = $.ig.truncate((min / stepSize)) * stepSize;
			var logBase = -1;
			if (seriesSnapshot._resolvedYAxisLeftIsLogarithmic && seriesSnapshot._hasLeftAxis) {
				logBase = seriesSnapshot._yAxisLeftLogBase;
			}
			if (seriesSnapshot._resolvedYAxisRightIsLogarithmic && !seriesSnapshot._hasLeftAxis) {
				logBase = seriesSnapshot._yAxisRightLogBase;
			}
			var value = 0;
			if (actualMin < 0 && logBase != -1) {
				actualMin = 0;
			}
			for (var i = 0; i <= numberOfLabels; i++) {
				if (logBase != -1) {
					value = (actualMin + Math.pow(logBase, i));
				} else {
					value = (actualMin + (i * stepSize));
				}
				var lineY = seriesSnapshot.calculateVerticalValuePosition(value, yLocation);
				if (lineY < y) {
					break;
				}
				if (lineY >= seriesSnapshot._canvasFrameY && lineY <= seriesSnapshot._canvasFrameY + seriesSnapshot._canvasFrameHeight) {
					canvas.drawLine(ctx, x, lineY, x + w, lineY, seriesSnapshot._majorAxisLineColor, seriesSnapshot._majorAxisLineThickness);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.YMajorAxisLinesLayer::RenderLayer(Infragistics.ChartCanvasView, System.CanvasContext, Infragistics.SnapshotBase, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('YMajorAxisLinesLayer', $.ig.CalculatedLayer.prototype.$type)
}, true);

/*<EndType Name="Infragistics.YMajorAxisLinesLayer" />*/

/*<BeginType Name="Infragistics.PieChart" />*/

$.ig.util.defType('PieChart', 'SliceChartBase', {
	init: function () {
		$.ig.SliceChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.PieChartLabelLocation Infragistics.PieChart::LabelLocation()" />*/
	labelLocation: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._labelLocation = value;
			return value;
		} else {
			return (this.__lastSnapshot)._labelLocation;
		}
	}
	/*<EndProperty Name="Infragistics.PieChartLabelLocation Infragistics.PieChart::LabelLocation()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PieChart::AngleOffset()" />*/
	angleOffset: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._angleOffset = value;
			return value;
		} else {
			return (this.__lastSnapshot)._angleOffset;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PieChart::AngleOffset()" />*/
	,
	/*<BeginProperty Name="Infragistics.ExplodedDisplayStyle Infragistics.PieChart::ExplodedSliceDisplayStyle()" />*/
	explodedSliceDisplayStyle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._explodedDisplayStyle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._explodedDisplayStyle;
		}
	}
	/*<EndProperty Name="Infragistics.ExplodedDisplayStyle Infragistics.PieChart::ExplodedSliceDisplayStyle()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PieChart::ExplosionExtent()" />*/
	explosionExtent: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._explosionExtent = value;
			return value;
		} else {
			return (this.__lastSnapshot)._explosionExtent;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PieChart::ExplosionExtent()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PieChart::ExplosionAnimationDuartion()" />*/
	explosionAnimationDuartion: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._explosionAnimationDuration = value;
			return value;
		} else {
			return (this.__lastSnapshot)._explosionAnimationDuration;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PieChart::ExplosionAnimationDuartion()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PieChart::InnerExtent()" />*/
	innerExtent: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._innerExtent = value;
			return value;
		} else {
			return (this.__lastSnapshot)._innerExtent;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PieChart::InnerExtent()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PieChart::RadiusFactor()" />*/
	radiusFactor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._radiusFactor = value;
			return value;
		} else {
			return (this.__lastSnapshot)._radiusFactor;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PieChart::RadiusFactor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChart::Setup()" />*/
	setup: function () {
		$.ig.SliceChartBase.prototype.setup.call(this);
		this._canvas._layers.add(new $.ig.PieChartLayer());
		this._canvas._layers.add(new $.ig.PieChartLabelLayer());
		this._canvas._layers.add(new $.ig.SliceLegendLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.PieChart::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.PieChart::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.PieChartSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.PieChart::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.PieChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		for (var i = 0; i < snapshot._visibleSliceCount; i++) {
			var slice = snapshot.resolveVisibleSliceAtIndex(i);
			if (slice.containsPoint(snapshot, x, y)) {
				var item = new $.ig.TooltipItem();
				item._color = slice._fillColor;
				item._index = slice._index;
				item._innerExtent = slice._innerExtent;
				item._outerExtent = slice._outerExtent;
				item._startAngle = slice._startAngle;
				item._endAngle = slice._endAngle;
				item._value = slice._value;
				item._valueLabel = slice._label;
				item._valueFormatted = $.ig.ChartsUtility.prototype.labelForValue(slice._value, snapshot._valueFormatUseMKFormatting, snapshot._valueFormatNegativeMode, snapshot._valueFormatType, snapshot._valueFormatFractionDigits, snapshot._valueFormattingShowGroupingSeparator, snapshot._valueFormatCurrencySymbol);
				item._legendText = snapshot.getLabelForLegend(0, i);
				item._seriesKey = "";
				item._seriesType = $.ig.CombinedDataItemType.prototype.pie;
				item._percentage = slice._percentageFormatted;
				items.add(item);
			}
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.PieChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.SliceChartBase.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var to = toSnapshot;
		var from = fromSnapshot;
		var fCount = from._visibleSliceCount;
		var tCount = to._visibleSliceCount;
		if (fCount == 0 && tCount > 0) {
			this.__lastSnapshot.copyTo(from);
			for (var visibleSliceIndex = 0; visibleSliceIndex < tCount; visibleSliceIndex++) {
				var slice = from.resolveVisibleSliceAtIndex(visibleSliceIndex);
				slice._outerExtent = slice._innerExtent;
			}
		}
		fCount = from._visibleSlices.length;
		tCount = to._visibleSlices.length;
		if (fCount != tCount) {
			var temp = new Array(tCount);
			for (var i = 0; i < tCount; i++) {
				temp[i] = (i < fCount) ? from._visibleSlices[i] : to._visibleSlices[i];
			}
			from._visibleSlices = temp;
		}
		if (to._othersSlice != null && from._othersSlice == null) {
			var slice1 = from.createSlice();
			to._othersSlice.copyTo(slice1);
			slice1._outerExtent = slice1._innerExtent;
			from._othersSlice = slice1;
		}
		if (to._othersSlice == null && from._othersSlice != null) {
			var slice2 = to.createSlice();
			from._othersSlice.copyTo(slice2);
			slice2._outerExtent = slice2._innerExtent;
			to._othersSlice = slice2;
		}
		from._visibleSliceCount = to._visibleSliceCount;
	}
	/*<EndMethod Name="System.Void Infragistics.PieChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChart::OnTap(Infragistics.NativePoint)" />*/
	onTap: function (location) {
		var $self = this;
		if (!this.__lastSnapshot._userInteractionEnabled) {
			return;
		}
		var items = this.getItemsAtPoint(location._x, location._y);
		var snapshot = this.__lastSnapshot;
		this.animate2(function () {
			for (var i = 0; i < items.length; i++) {
				var item = items[i];
				$self.explodeSliceAt(item._index);
			}
		}, snapshot._explosionAnimationDuration);
	}
	/*<EndMethod Name="System.Void Infragistics.PieChart::OnTap(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetCenterOfSliceAtIndex(System.Int32)" />*/
	getCenterOfSliceAtIndex: function (index) {
		var snapshot = this.__lastSnapshot;
		if (index == -2 && snapshot._othersSlice != null) {
			var slice = snapshot._othersSlice;
			var degrees = slice._startAngle + (slice._endAngle - slice._startAngle) / 2;
			var radians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(degrees);
			var sliceRadius = snapshot._availableSize / 2 * slice._outerExtent;
			var innerRadius = snapshot._innerExtent * sliceRadius;
			var distance = innerRadius + (sliceRadius - innerRadius) / 2;
			return new $.ig.CPPoint($.ig.CPMathUtility.prototype.translateX(snapshot._centerX, distance, radians), $.ig.CPMathUtility.prototype.translateY(snapshot._centerY, distance, radians));
		}
		for (var i = 0; i < snapshot._slices.length; i++) {
			var slice1 = snapshot._slices[i];
			if (index == slice1._index) {
				var degrees1 = slice1._startAngle + (slice1._endAngle - slice1._startAngle) / 2;
				var radians1 = $.ig.CPMathUtility.prototype.convertDegreesToRadians(degrees1);
				var sliceRadius1 = snapshot._availableSize / 2 * slice1._outerExtent;
				var innerRadius1 = snapshot._innerExtent * sliceRadius1;
				var distance1 = innerRadius1 + (sliceRadius1 - innerRadius1) / 2;
				return new $.ig.CPPoint($.ig.CPMathUtility.prototype.translateX(snapshot._centerX, distance1, radians1), $.ig.CPMathUtility.prototype.translateY(snapshot._centerY, distance1, radians1));
			}
		}
		return new $.ig.CPPoint(0, 0);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetCenterOfSliceAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetTooltipPointForLocation(Infragistics.CPPopupPosition)" />*/
	getTooltipPointForLocation: function (location) {
		var snapshot = this.__lastSnapshot;
		var radians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(location == $.ig.CPPopupPosition.prototype.right ? 180 : 0);
		var extent = snapshot._innerExtent != 0 ? snapshot._innerExtent : 0.30000001192092896;
		var sliceRadius = ((snapshot._availableSize / 2 * snapshot._actualRadiusFactor) * extent);
		return new $.ig.CPPoint($.ig.CPMathUtility.prototype.translateX(snapshot._centerX, sliceRadius, radians), snapshot._centerY);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetTooltipPointForLocation(Infragistics.CPPopupPosition)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetCenterPoint()" />*/
	getCenterPoint: function () {
		return new $.ig.CPPoint((this.__lastSnapshot)._centerX, (this.__lastSnapshot)._centerY);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.PieChart::GetCenterPoint()" />*/
	,
	$type: new $.ig.Type('PieChart', $.ig.SliceChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChart" />*/

/*<BeginType Name="Infragistics.PieChartSlice" />*/

$.ig.util.defType('PieChartSlice', 'SliceBase', {
	_labelExtent: 0,
	_startAngle: 0,
	_endAngle: 0,
	_innerExtent: 0,
	_outerExtent: 0,
	_explosionExtent: 0,
	_outerMidAngle: 0,
	_explodedOriginX: 0,
	_explodedOriginY: 0,
	_outerMidPointX: 0,
	_outerMidPointY: 0,
	_outerMidLabelRadius: 0,
	_labelTerminusPointX: 0,
	_labelTerminusPointY: 0,
	_outerMidPointBranchX: 0,
	_outerMidPointBranchY: 0,
	_isClockwise: false,
	init: function () {
		$.ig.SliceBase.prototype.init.call(this);
		this._startAngle = 0;
		this._endAngle = 0;
		this._labelExtent = 0;
		this._innerExtent = this._outerExtent = 0;
	},
	/*<BeginMethod Name="System.Void Infragistics.PieChartSlice::CopyTo(Infragistics.SliceBase)" />*/
	copyTo: function (next) {
		$.ig.SliceBase.prototype.copyTo.call(this, next);
		var nextSlice = next;
		nextSlice._labelExtent = this._labelExtent;
		nextSlice._startAngle = this._startAngle;
		nextSlice._endAngle = this._endAngle;
		nextSlice._explosionExtent = this._explosionExtent;
		nextSlice._outerMidAngle = this._outerMidAngle;
		nextSlice._isClockwise = this._isClockwise;
		nextSlice._innerExtent = this._innerExtent;
		nextSlice._outerExtent = this._outerExtent;
		nextSlice._explodedOriginX = this._explodedOriginX;
		nextSlice._explodedOriginY = this._explodedOriginY;
		nextSlice._outerMidPointX = this._outerMidPointX;
		nextSlice._outerMidPointY = this._outerMidPointY;
		nextSlice._outerMidLabelRadius = this._outerMidLabelRadius;
		nextSlice._labelTerminusPointX = this._labelTerminusPointX;
		nextSlice._labelTerminusPointY = this._labelTerminusPointY;
		nextSlice._outerMidPointBranchX = this._outerMidPointBranchX;
		nextSlice._outerMidPointBranchY = this._outerMidPointBranchY;
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSlice::CopyTo(Infragistics.SliceBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSlice::Transition(Infragistics.SliceBase, System.Double)" />*/
	transition: function (next, percent) {
		$.ig.SliceBase.prototype.transition.call(this, next, percent);
		var nextSlice = next;
		nextSlice._startAngle = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._startAngle, nextSlice._startAngle, percent);
		nextSlice._endAngle = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._endAngle, nextSlice._endAngle, percent);
		nextSlice._explosionExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._explosionExtent, nextSlice._explosionExtent, percent);
		nextSlice._outerMidAngle = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerMidAngle, nextSlice._outerMidAngle, percent);
		nextSlice._innerExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._innerExtent, nextSlice._innerExtent, percent);
		nextSlice._outerExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerExtent, nextSlice._outerExtent, percent);
		nextSlice._labelTerminusPointX = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._labelTerminusPointX, nextSlice._labelTerminusPointX, percent);
		nextSlice._labelTerminusPointY = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._labelTerminusPointY, nextSlice._labelTerminusPointY, percent);
		nextSlice._outerMidPointBranchX = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerMidPointBranchX, nextSlice._outerMidPointBranchX, percent);
		nextSlice._outerMidPointBranchY = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerMidPointBranchY, nextSlice._outerMidPointBranchY, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSlice::Transition(Infragistics.SliceBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.PieChartSlice::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	containsPoint: function (snapshot, x, y) {
		var pieSnapshot = snapshot;
		var distX = x - pieSnapshot._centerX;
		var distY = y - pieSnapshot._centerY;
		var endExtent = this._outerExtent;
		if (this._isExploded && pieSnapshot._explodedDisplayStyle == $.ig.ExplodedDisplayStyle.prototype.awayFromCenter) {
			endExtent += pieSnapshot._explosionExtent;
		}
		var sliceRadius = pieSnapshot._availableSize / 2 * endExtent;
		var distanceFromCenter = Math.sqrt(distX * distX + distY * distY);
		var explodedDistanceFromCenter = Math.sqrt(Math.pow(this._explodedOriginX - pieSnapshot._centerX, 2) + Math.pow(this._explodedOriginY - pieSnapshot._centerY, 2));
		var angleForPoint = (Math.asin(Math.abs(distY) / distanceFromCenter) * 180 / Math.PI);
		if (distX < 0 && distY >= 0) {
			angleForPoint = 180 - angleForPoint;
		} else if (distX < 0 && distY < 0) {
			angleForPoint = 180 + angleForPoint;
		} else if (distX >= 0 && distY < 0) {
			angleForPoint = 360 - angleForPoint;
		}
		if (angleForPoint < pieSnapshot._angleOffset) {
			angleForPoint += 360;
		}
		if (angleForPoint >= this._startAngle && angleForPoint <= this._endAngle && distanceFromCenter >= this._innerExtent * sliceRadius + explodedDistanceFromCenter && distanceFromCenter <= sliceRadius) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.PieChartSlice::ContainsPoint(Infragistics.SliceChartSnapshot, System.Single, System.Single)" />*/
	,
	$type: new $.ig.Type('PieChartSlice', $.ig.SliceBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartSlice" />*/

/*<BeginType Name="Infragistics.PieChartSnapshot" />*/

$.ig.util.defType('PieChartSnapshot', 'SliceChartSnapshot', {
	_labelLocation: 0,
	_resolvedLabelLocation: 0,
	_angleOffset: 0,
	_explodedDisplayStyle: 0,
	_centerX: 0,
	_centerY: 0,
	_availableSize: 0,
	_explosionExtent: 0,
	_innerExtent: 0,
	_radiusFactor: 0,
	_actualRadiusFactor: 0,
	_radius: 0,
	init: function (setDefaults) {
		$.ig.SliceChartSnapshot.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._labelLocation = $.ig.PieChartLabelLocation.prototype.inside;
			this._angleOffset = 0;
			this._explodedDisplayStyle = $.ig.ExplodedDisplayStyle.prototype.awayFromCenter;
			this._explosionExtent = 0.1;
			this._innerExtent = 0;
			this._radiusFactor = 1;
		}
	},
	/*<BeginMethod Name="Infragistics.SliceBase Infragistics.PieChartSnapshot::CreateSlice()" />*/
	createSlice: function () {
		return new $.ig.PieChartSlice();
	}
	/*<EndMethod Name="Infragistics.SliceBase Infragistics.PieChartSnapshot::CreateSlice()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		$.ig.SliceChartSnapshot.prototype.calculateSizeInfo.call(this);
		this._availableSize = Math.min(this._canvasFrameWidth, this._canvasFrameHeight);
		this._centerX = this._canvasFrameX + this._canvasFrameWidth / 2;
		this._centerY = this._canvasFrameY + this._canvasFrameHeight / 2;
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSlices()" />*/
	calculateSlices: function () {
		$.ig.SliceChartSnapshot.prototype.calculateSlices.call(this);
		var currentAngleStart = $.ig.ChartsUtility.prototype.normalizeAngle(this._angleOffset);
		for (var i = 0; i < this._visibleSlices.length; i++) {
			var slice = this.resolveVisibleSliceAtIndex(i);
			if (slice._isVisible) {
				slice._startAngle = currentAngleStart;
				slice._endAngle = currentAngleStart + slice._percentage * 360 / 100;
				currentAngleStart = slice._endAngle;
			}
		}
		if (this._othersSlices.length > 0) {
			var others = this._othersSlice;
			others._startAngle = currentAngleStart;
			others._endAngle = 360 + this._angleOffset;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSlices()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateRadiusFactor()" />*/
	calculateRadiusFactor: function () {
		var maxStringHeight = 0, maxStringWidth = 0;
		this._resolvedLabelLocation = this._labelLocation;
		this._fontSizeToUse = this._maxFontSize;
		if (this._labels != null && this._labels.length > 0) {
			var slicesPerDecrement = 10;
			var fontAdjustAmount = this._labels.length / slicesPerDecrement;
			fontAdjustAmount *= 2;
			if ((this._fontSizeToUse - fontAdjustAmount) > this._minFontSize) {
				this._fontSizeToUse -= fontAdjustAmount;
			} else {
				this._fontSizeToUse = this._minFontSize;
			}
			this._longestLabelSize = $.ig.NativeUtility.prototype.utility().measureText(this._formattedLongestLabel, this._fontName, this._fontSizeToUse);
			while (this._minFontSize < this._fontSizeToUse) {
				this._longestLabelSize = $.ig.NativeUtility.prototype.utility().measureText(this._formattedLongestLabel, this._fontName, this._fontSizeToUse);
				if ((this._longestLabelSize._width * 2) > (this._availableSize / 2)) {
					this._fontSizeToUse -= 1;
				} else {
					break;
				}
			}
			this._fontSizeToUse *= this._density;
			this._fontSize = $.ig.truncate(this._fontSizeToUse);
			if (this._othersSlices.length > 0) {
				var stringSize = $.ig.NativeUtility.prototype.utility().measureText(this._othersSliceText, this._fontName, this._fontSizeToUse);
				maxStringHeight = stringSize._height;
				maxStringWidth = stringSize._width;
			}
			for (var i = 0; i < this._visibleSlices.length; i++) {
				var slice = this.resolveVisibleSliceAtIndex(i);
				var stringSize1 = $.ig.NativeUtility.prototype.utility().measureText(slice._label, this._fontName, this._fontSizeToUse);
				if (stringSize1._height > maxStringHeight) {
					maxStringHeight = stringSize1._height;
				}
				if (stringSize1._width > maxStringWidth) {
					maxStringWidth = stringSize1._width;
				}
			}
		}
		maxStringWidth = maxStringWidth + (10 * this._density);
		this._actualRadiusFactor = this._radiusFactor;
		switch (this._resolvedLabelLocation) {
			case $.ig.PieChartLabelLocation.prototype.outsideEdge:
				this._actualRadiusFactor = this._radiusFactor - (maxStringHeight * 2) / this._availableSize;
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideCenter:
			case $.ig.PieChartLabelLocation.prototype.outsideCorner:
			case $.ig.PieChartLabelLocation.prototype.outsideColumn:
				if (this._canvasFrameWidth - 2 * maxStringWidth < this._canvasFrameHeight - 2 * maxStringHeight) {
					this._actualRadiusFactor = this._radiusFactor - (maxStringWidth * 2) / this._canvasFrameWidth;
				} else {
					this._actualRadiusFactor = this._radiusFactor - 2 * (maxStringHeight * 1.15) / this._canvasFrameHeight;
				}
				break;
			case $.ig.PieChartLabelLocation.prototype.noLabels:
			case $.ig.PieChartLabelLocation.prototype.inside:
			case $.ig.PieChartLabelLocation.prototype.insideEdge:
				break;
		}
		if (this._actualRadiusFactor <= 0 || maxStringHeight > this._actualRadiusFactor * this._availableSize / 2) {
			this._resolvedLabelLocation = $.ig.PieChartLabelLocation.prototype.noLabels;
			this._actualRadiusFactor = this._radiusFactor;
		}
		if (this._explosionExtent > 0) {
			this._actualRadiusFactor -= Math.min(this._actualRadiusFactor, this._explosionExtent);
		}
		this._radius = this._availableSize / 2 * this._actualRadiusFactor;
		var totalSliceCount = this._slices.length + (this._othersSlices.length > 0 ? 1 : 0);
		for (var i1 = 0; i1 < totalSliceCount; i1++) {
			var slice1 = i1 < this._slices.length ? this._slices[i1] : this._othersSlice;
			slice1._innerExtent = this._innerExtent;
			slice1._outerExtent = this._actualRadiusFactor;
			slice1._explodedOriginX = this._centerX;
			slice1._explodedOriginY = this._centerY;
			slice1._explosionExtent = 0;
			if (slice1._isExploded && slice1._isValid) {
				switch (this._explodedDisplayStyle) {
					case $.ig.ExplodedDisplayStyle.prototype.awayFromCenter:
						var midAngleRadians = (slice1._startAngle + slice1._endAngle) / 360 * Math.PI;
						slice1._explodedOriginX = this._centerX + this._explosionExtent * this._radius * Math.cos(midAngleRadians);
						slice1._explodedOriginY = this._centerY + this._explosionExtent * this._radius * Math.sin(midAngleRadians);
						slice1._explosionExtent = this._explosionExtent;
						break;
					case $.ig.ExplodedDisplayStyle.prototype.extendedRadius:
						slice1._outerExtent += this._explosionExtent;
						slice1._explosionExtent = this._explosionExtent;
						break;
					case $.ig.ExplodedDisplayStyle.prototype.highlightedEdge: break;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateRadiusFactor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSlice(Infragistics.PieChartSlice, System.Single, System.Single, System.Single, Infragistics.CPList)" />*/
	calculateSlice: function (slice, x, y, maxPieRadius, labelRects) {
		var startDegree = slice._startAngle;
		var endDegree = slice._endAngle;
		var sliceLabel = slice._label;
		var stringSize = $.ig.NativeUtility.prototype.utility().measureText(sliceLabel, this._fontName, this._fontSizeToUse);
		var sliceWidth = $.ig.ChartsUtility.prototype.sliceWidth(startDegree, endDegree, x, y, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, this._actualRadiusFactor);
		var minimumAvailableWidth = 0;
		var labelRadius = 0;
		slice._isLabelVisible = false;
		var midAngleRadians = (slice._startAngle + slice._endAngle) / 2 * (Math.PI / 180);
		slice._explodedOriginX = this._centerX + slice._explosionExtent * this._radius * Math.cos(midAngleRadians);
		slice._explodedOriginY = this._centerY + slice._explosionExtent * this._radius * Math.sin(midAngleRadians);
		switch (this._resolvedLabelLocation) {
			case $.ig.PieChartLabelLocation.prototype.inside:
				minimumAvailableWidth = sliceWidth / (2 - this._innerExtent);
				labelRadius = this._availableSize / 2 * (slice._outerExtent + slice._innerExtent) / 2;
				break;
			case $.ig.PieChartLabelLocation.prototype.insideEdge:
				minimumAvailableWidth = sliceWidth / 1.25;
				labelRadius = (this._radius - stringSize._height) * (slice._outerExtent / this._actualRadiusFactor);
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideEdge:
				minimumAvailableWidth = sliceWidth;
				labelRadius = (this._radius + stringSize._height) * (slice._outerExtent / this._actualRadiusFactor);
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideCenter:
				var offset = Math.abs(Math.cos(midAngleRadians) * stringSize._width) + Math.abs(Math.sin(midAngleRadians) * stringSize._height);
				labelRadius = (this._actualRadiusFactor + slice._explosionExtent) * this._availableSize / 2 + offset;
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideCorner:
				labelRadius = (this._actualRadiusFactor + slice._explosionExtent) * (this._availableSize / 2) + (stringSize._height / 2);
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideColumn: break;
			case $.ig.PieChartLabelLocation.prototype.noLabels: break;
		}
		var outerMidPoint;
		switch (this._resolvedLabelLocation) {
			case $.ig.PieChartLabelLocation.prototype.inside:
			case $.ig.PieChartLabelLocation.prototype.insideEdge:
			case $.ig.PieChartLabelLocation.prototype.outsideEdge:
				if (stringSize._width < minimumAvailableWidth) {
					if (this._explodedDisplayStyle == $.ig.ExplodedDisplayStyle.prototype.awayFromCenter) {
						labelRadius += this._availableSize / 2 * slice._explosionExtent;
					}
					outerMidPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(startDegree, endDegree, x, y, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, this._actualRadiusFactor);
					slice._isLabelVisible = true;
					slice._labelExtent = labelRadius;
					slice._isClockwise = outerMidPoint._y < this._centerY;
					slice._outerMidAngle = $.ig.ChartsUtility.prototype.getAngleFromCenter(this._centerX, this._centerY, outerMidPoint._x, outerMidPoint._y);
					slice._outerMidPointX = outerMidPoint._x;
					slice._outerMidPointY = outerMidPoint._y;
				}
				break;
			case $.ig.PieChartLabelLocation.prototype.outsideCenter:
			case $.ig.PieChartLabelLocation.prototype.outsideColumn:
			case $.ig.PieChartLabelLocation.prototype.outsideCorner:
				outerMidPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(startDegree, endDegree, x, y, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, slice._outerExtent + (slice._explosionExtent * slice._outerExtent));
				slice._outerMidAngle = $.ig.ChartsUtility.prototype.getAngleFromCenter(this._centerX, this._centerY, outerMidPoint._x, outerMidPoint._y);
				this.resolveLabelCollisions(slice, outerMidPoint, stringSize, labelRadius / (this._availableSize / 2), labelRects);
				break;
			case $.ig.PieChartLabelLocation.prototype.noLabels: break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::CalculateSlice(Infragistics.PieChartSlice, System.Single, System.Single, System.Single, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::ResolveLabelCollisions(Infragistics.PieChartSlice, Infragistics.NativePoint, Infragistics.NativeSize, System.Single, Infragistics.CPList)" />*/
	resolveLabelCollisions: function (slice, outerMidPoint, stringSize, outerMidLabelExtent, labelRects) {
		var animationPercentage = slice._outerExtent / this._actualRadiusFactor;
		if (this._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideCenter) {
			var skipDraw = false;
			var textPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(slice._startAngle, slice._endAngle, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, outerMidLabelExtent * animationPercentage);
			textPoint._x -= (stringSize._width / 2);
			textPoint._y -= (stringSize._height / 2);
			if (labelRects.length > 0) {
				var percentageToAdjust = 0.1;
				var maximumCollisions = 1000;
				var currentRect = new $.ig.CPRect(1, textPoint._x, textPoint._y, stringSize._width, stringSize._height);
				var collisions = new $.ig.Dictionary(0);
				for (var k = 0; k < labelRects.length; k++) {
					textPoint = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(slice._startAngle, slice._endAngle, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, outerMidLabelExtent * animationPercentage);
					textPoint._x -= (stringSize._width / 2);
					textPoint._y -= (stringSize._height / 2);
					currentRect._x = textPoint._x;
					currentRect._y = textPoint._y;
					var labelRect = $.ig.NativeUtility.prototype.utility().convertObjectToNativeRect(labelRects[k]);
					if (!$.ig.CPMathUtility.prototype.rectsIntersect(labelRect, currentRect)) {
						continue;
					}
					var collisionKey = $.ig.NativeUtility.prototype.utility().convertNumberToString(k, 0, false);
					var collisionTries = 0;
					if ($.ig.NativeDictionaryUtility.prototype.containsKey(collisions, collisionKey)) {
						collisionTries = $.ig.util.getValue(collisions.item(collisionKey));
						if (collisionTries > maximumCollisions) {
							skipDraw = true;
							break;
						}
					} else {
						collisions.item(collisionKey, 0);
					}
					textPoint._y += (currentRect._height * percentageToAdjust);
					outerMidLabelExtent -= ((currentRect._height * percentageToAdjust) / (this._canvasFrameHeight / 2));
					currentRect._y = textPoint._y;
					collisionTries = $.ig.util.getValue(collisions.item(collisionKey));
					collisions.item(collisionKey, collisionTries + 1);
					k = -1;
				}
				var outerMidPointDistance = $.ig.ChartsUtility.prototype.distanceBetweenPoints(outerMidPoint._x, outerMidPoint._y, this._centerX, this._centerY);
				var labelDistanceTop = $.ig.ChartsUtility.prototype.distanceBetweenPoints((currentRect._x + currentRect._width), currentRect._y, this._centerX, this._centerY);
				var labelDistanceBottom = $.ig.ChartsUtility.prototype.distanceBetweenPoints((currentRect._x + currentRect._width), (currentRect._y + currentRect._height), this._centerX, this._centerY);
				if (currentRect._x < this._centerX && (labelDistanceTop < outerMidPointDistance || labelDistanceBottom < outerMidPointDistance)) {
					skipDraw = true;
				}
				labelDistanceTop = $.ig.ChartsUtility.prototype.distanceBetweenPoints(currentRect._x, currentRect._y, this._centerX, this._centerY);
				labelDistanceBottom = $.ig.ChartsUtility.prototype.distanceBetweenPoints(currentRect._x, (currentRect._y + currentRect._height), this._centerX, this._centerY);
				if (currentRect._x > this._centerX && (labelDistanceTop < outerMidPointDistance || labelDistanceBottom < outerMidPointDistance)) {
					skipDraw = true;
				}
				if (!skipDraw) {
					labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(currentRect));
				}
			} else {
				labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(new $.ig.CPRect(1, textPoint._x, textPoint._y, stringSize._width, stringSize._height)));
			}
			if (skipDraw) {
				slice._isLabelVisible = false;
			} else {
				slice._outerMidPointX = outerMidPoint._x;
				slice._outerMidPointY = outerMidPoint._y;
				slice._isLabelVisible = true;
				slice._labelExtent = (outerMidLabelExtent * animationPercentage) * this._availableSize / 2;
				slice._outerMidLabelRadius = outerMidLabelExtent * animationPercentage;
				slice._isClockwise = outerMidPoint._y < this._centerY;
			}
		}
		if (this._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideCorner) {
			var skipDraw1 = false;
			var maxOuterMidLabelExtent = outerMidLabelExtent;
			var locationX = 0;
			var locationY = 0;
			var textPoint1 = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(slice._startAngle, slice._endAngle, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, outerMidLabelExtent * animationPercentage);
			var stringHeightAdjustment = 4;
			if (outerMidPoint._x < this._centerX) {
				locationX = textPoint1._x - (stringSize._width / 2);
				if (outerMidPoint._y < this._centerY) {
					locationY = textPoint1._y - (stringSize._height / stringHeightAdjustment);
				} else {
					locationY = textPoint1._y + (stringSize._height / stringHeightAdjustment);
				}
			} else {
				locationX = textPoint1._x + (stringSize._width / 2);
				if (outerMidPoint._y < this._centerY) {
					locationY = textPoint1._y - (stringSize._height / stringHeightAdjustment);
				} else {
					locationY = textPoint1._y + (stringSize._height / stringHeightAdjustment);
				}
			}
			if (labelRects.length > 0) {
				var percentageToAdjust1 = 0.1;
				var maximumCollisions1 = 1000;
				var currentRect1 = new $.ig.CPRect(1, textPoint1._x, textPoint1._y, stringSize._width, stringSize._height);
				var collisions1 = new $.ig.Dictionary(0);
				for (var k1 = 0; k1 < labelRects.length; k1++) {
					textPoint1 = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(slice._startAngle, slice._endAngle, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, outerMidLabelExtent * animationPercentage);
					if (outerMidPoint._x < this._centerX) {
						locationX = textPoint1._x - (stringSize._width / 2);
						if (outerMidPoint._y < this._centerY) {
							locationY = textPoint1._y - (stringSize._height / stringHeightAdjustment);
						} else {
							locationY = textPoint1._y + (stringSize._height / stringHeightAdjustment);
						}
					} else {
						locationX = textPoint1._x + (stringSize._width / 2);
						if (outerMidPoint._y < this._centerY) {
							locationY = textPoint1._y - (stringSize._height / stringHeightAdjustment);
						} else {
							locationY = textPoint1._y + (stringSize._height / stringHeightAdjustment);
						}
					}
					currentRect1._x = locationX - (stringSize._width / 2);
					currentRect1._y = locationY - (stringSize._height / 2);
					var labelRect1 = $.ig.NativeUtility.prototype.utility().convertObjectToNativeRect(labelRects[k1]);
					if (!$.ig.CPMathUtility.prototype.rectsIntersect(labelRect1, currentRect1)) {
						continue;
					}
					var collisionKey1 = $.ig.NativeUtility.prototype.utility().convertNumberToString(k1, 0, false);
					var collisionTries1 = 0;
					if ($.ig.NativeDictionaryUtility.prototype.containsKey(collisions1, collisionKey1)) {
						collisionTries1 = $.ig.util.getValue(collisions1.item(collisionKey1));
						if (collisionTries1 > maximumCollisions1) {
							skipDraw1 = true;
							break;
						}
					} else {
						collisions1.item(collisionKey1, 0);
					}
					textPoint1._y -= (currentRect1._height * percentageToAdjust1);
					outerMidLabelExtent += ((currentRect1._height * percentageToAdjust1) / (this._canvasFrameHeight / 2));
					if (outerMidLabelExtent > maxOuterMidLabelExtent) {
						outerMidLabelExtent = maxOuterMidLabelExtent;
					}
					currentRect1._y = textPoint1._y;
					collisionTries1 = $.ig.util.getValue(collisions1.item(collisionKey1));
					collisions1.item(collisionKey1, collisionTries1 + 1);
					k1 = -1;
				}
				if (outerMidLabelExtent > 1) {
					skipDraw1 = true;
				}
				if (!skipDraw1) {
					labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(currentRect1));
				}
			} else {
				labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(new $.ig.CPRect(1, locationX - (stringSize._width / 2), locationY - (stringSize._height / 2), stringSize._width, stringSize._height)));
			}
			if (skipDraw1) {
				slice._isLabelVisible = false;
			} else {
				slice._isLabelVisible = true;
				slice._labelPositionX = locationX;
				slice._labelPositionY = locationY;
				slice._outerMidPointX = outerMidPoint._x;
				slice._outerMidPointY = outerMidPoint._y;
				slice._labelExtent = (outerMidLabelExtent * animationPercentage) * this._availableSize / 2;
				slice._outerMidLabelRadius = outerMidLabelExtent * animationPercentage;
			}
		}
		if (this._resolvedLabelLocation == $.ig.PieChartLabelLocation.prototype.outsideColumn) {
			var skipDraw2 = false;
			var locationX1 = 0;
			var locationY1 = 0;
			var outerMidPointBranch = $.ig.ChartsUtility.prototype.sliceOuterMidPoint(slice._startAngle, slice._endAngle, this._canvasFrameX, this._canvasFrameY, this._canvasFrameWidth, this._canvasFrameHeight, this._innerExtent, this._actualRadiusFactor + 0.05 + (slice._explosionExtent * this._actualRadiusFactor));
			var longestLabelWidth = this._longestLabelSize._width * 1.1;
			var labelTerminusPoint = new $.ig.CPPoint(this._centerX, this._centerY);
			if (outerMidPoint._x < this._centerX) {
				labelTerminusPoint._x = longestLabelWidth;
				locationX1 = labelTerminusPoint._x - (stringSize._width / 2);
				labelTerminusPoint._x += (labelTerminusPoint._x * 0.1);
			} else {
				labelTerminusPoint._x = this._canvasFrameWidth - longestLabelWidth;
				locationX1 = labelTerminusPoint._x + (stringSize._width / 2);
				labelTerminusPoint._x -= (longestLabelWidth * 0.1);
			}
			labelTerminusPoint._y = outerMidPointBranch._y;
			locationY1 = labelTerminusPoint._y;
			var labelOrigin = new $.ig.CPPoint(locationX1, locationY1);
			if (labelRects.length > 0) {
				var currentRect2 = new $.ig.CPRect(1, labelOrigin._x, labelOrigin._y, stringSize._width, stringSize._height);
				for (var k2 = 0; k2 < labelRects.length; k2++) {
					currentRect2._x = labelOrigin._x;
					currentRect2._y = labelOrigin._y;
					var labelRect2 = $.ig.NativeUtility.prototype.utility().convertObjectToNativeRect(labelRects[k2]);
					if (!$.ig.CPMathUtility.prototype.rectsIntersect(labelRect2, currentRect2)) {
						continue;
					}
					if (currentRect2._x < this._centerX) {
						labelOrigin._y = (labelRect2._y - (stringSize._height * 1.1));
					} else {
						labelOrigin._y = (labelRect2._y + (labelRect2._height * 1.1));
					}
					if ((locationY1 < labelRect2._y && labelOrigin._y > labelRect2._y) || (locationY1 > labelRect2._y && labelOrigin._y < labelRect2._y)) {
						skipDraw2 = true;
						break;
					}
					currentRect2._y = labelOrigin._y;
					k2 = -1;
				}
				if (skipDraw2) {
					var highestY = -1, lowestY = -1;
					for (var k3 = 0; k3 < labelRects.length; ++k3) {
						var labelRect3 = $.ig.NativeUtility.prototype.utility().convertObjectToNativeRect(labelRects[k3]);
						if (currentRect2._x < this._centerX && labelRect3._x < this._centerX) {
							if (highestY == -1 || labelRect3._y < highestY) {
								highestY = labelRect3._y;
							}
							if (lowestY == -1 || labelRect3._y > lowestY) {
								lowestY = labelRect3._y;
							}
						} else if (currentRect2._x > this._centerX && labelRect3._x > this._centerX) {
							if (highestY == -1 || labelRect3._y < highestY) {
								highestY = labelRect3._y;
							}
							if (lowestY == -1 || labelRect3._y > lowestY) {
								lowestY = labelRect3._y;
							}
						}
					}
					if (currentRect2._y < highestY) {
						currentRect2._y = (highestY - (currentRect2._height * 1.1));
					} else if (currentRect2._y > lowestY) {
						currentRect2._y = (lowestY + (currentRect2._height * 1.1));
					} else {
						slice._isLabelVisible = false;
					}
				} else {
					outerMidPointBranch._y = currentRect2._y;
					labelTerminusPoint._y = outerMidPointBranch._y;
					locationY1 = labelTerminusPoint._y;
					labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(currentRect2));
				}
			} else {
				labelRects.add($.ig.NativeUtility.prototype.utility().convertNativeRectToObject(new $.ig.CPRect(1, labelOrigin._x, labelOrigin._y, stringSize._width, stringSize._height)));
			}
			if (!skipDraw2) {
				slice._isLabelVisible = true;
				slice._labelPositionX = locationX1;
				slice._labelPositionY = locationY1;
				slice._outerMidPointX = outerMidPoint._x;
				slice._outerMidPointY = outerMidPoint._y;
				slice._labelTerminusPointX = labelTerminusPoint._x;
				slice._labelTerminusPointY = labelTerminusPoint._y;
				slice._outerMidPointBranchX = outerMidPointBranch._x;
				slice._outerMidPointBranchY = outerMidPointBranch._y;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::ResolveLabelCollisions(Infragistics.PieChartSlice, Infragistics.NativePoint, Infragistics.NativeSize, System.Single, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::Invalidate()" />*/
	invalidate: function () {
		if (this._width == 0 || this._height == 0) {
			return;
		}
		this.calculateTotal();
		this.calculateSlices();
		this.calculateFontInfo();
		this.calculateLegendSizeInfo();
		this.calculateSizeInfo();
		this.calculateRadiusFactor();
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SliceChartSnapshot.prototype.transition.call(this, newSnapshot, percent);
		var snapshot = newSnapshot;
		snapshot._angleOffset = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._angleOffset, snapshot._angleOffset, percent);
		snapshot._explosionExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._explosionExtent, snapshot._explosionExtent, percent);
		snapshot._innerExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._innerExtent, snapshot._innerExtent, percent);
		snapshot._radiusFactor = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._radiusFactor, snapshot._radiusFactor, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PieChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SliceChartSnapshot.prototype.copyTo.call(this, snapshot);
		var pieSnapshot = snapshot;
		pieSnapshot._availableSize = this._availableSize;
		pieSnapshot._centerX = this._centerX;
		pieSnapshot._centerY = this._centerY;
		pieSnapshot._angleOffset = this._angleOffset;
		pieSnapshot._explodedDisplayStyle = this._explodedDisplayStyle;
		pieSnapshot._explosionExtent = this._explosionExtent;
		pieSnapshot._innerExtent = this._innerExtent;
		pieSnapshot._labelLocation = this._labelLocation;
		pieSnapshot._resolvedLabelLocation = this._resolvedLabelLocation;
		pieSnapshot._radiusFactor = this._radiusFactor;
		pieSnapshot._actualRadiusFactor = this._actualRadiusFactor;
		pieSnapshot._radius = this._radius;
	}
	/*<EndMethod Name="System.Void Infragistics.PieChartSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	$type: new $.ig.Type('PieChartSnapshot', $.ig.SliceChartSnapshot.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PieChartSnapshot" />*/

/*<BeginType Name="Infragistics.PolarChart" />*/

$.ig.util.defType('PolarChart', 'ChartBase', {
	init: function () {
		$.ig.ChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Single Infragistics.PolarChart::AngleAxisMin()" />*/
	angleAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userAngleAxisMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userAngleAxisMin;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PolarChart::AngleAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PolarChart::AngleAxisMax()" />*/
	angleAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userAngleAxisMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userAngleAxisMax;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PolarChart::AngleAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PolarChart::RadiusAxisMin()" />*/
	radiusAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRadiusAxisMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRadiusAxisMin;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PolarChart::RadiusAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.PolarChart::RadiusAxisMax()" />*/
	radiusAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRadiusAxisMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRadiusAxisMax;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.PolarChart::RadiusAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.PolarChart::UseSecondaryFormatForSecondaryAxis()" />*/
	useSecondaryFormatForSecondaryAxis: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._useSecondaryAxisValueFormat = value;
			return value;
		} else {
			return (this.__lastSnapshot)._useSecondaryAxisValueFormat;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.PolarChart::UseSecondaryFormatForSecondaryAxis()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.PolarChart::SecondaryAxisValueFormatType()" />*/
	secondaryAxisValueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.PolarChart::SecondaryAxisValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.PolarChart::SecondaryAxisValueFormatFractionDigits()" />*/
	secondaryAxisValueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.PolarChart::SecondaryAxisValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.PolarChart::SecondaryAxisValueFormatNegativeMode()" />*/
	secondaryAxisValueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.PolarChart::SecondaryAxisValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.PolarChart::SecondaryAxisValueFormatUseMKFormatting()" />*/
	secondaryAxisValueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.PolarChart::SecondaryAxisValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.PolarChart::SecondaryAxisValueFormatCurrencySymbol()" />*/
	secondaryAxisValueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.PolarChart::SecondaryAxisValueFormatCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.PolarChart::SecondaryAxisValueFormatShowGroupingSeparator()" />*/
	secondaryAxisValueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondaryAxisValueFormatShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondaryAxisValueFormatShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.PolarChart::SecondaryAxisValueFormatShowGroupingSeparator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarChart::Setup()" />*/
	setup: function () {
		$.ig.ChartBase.prototype.setup.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._mode = $.ig.ChartAxisMode.prototype.numericRadiusNumericValue;
		this.setZoomType($.ig.ZoomType.prototype.none);
		this._canvas._layers.add(new $.ig.PolarAxisLayer());
		this._canvas._layers.add(new $.ig.PolarScatterChartLayer());
		this._canvas._layers.add(new $.ig.RadiusAxisLabelLayer());
		this._canvas._layers.add(new $.ig.AngleAxisLabelLayer());
		this._canvas._layers.add(new $.ig.LegendLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.PolarChart::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.PolarChart::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.PolarSeriesSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.PolarChart::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, System.String)" />*/
	addSeries: function (data, radiusAxisProperty, angleAxisProperty, markerRadiusProperty, labelProperty, type, color, key) {
		this.addSeriesWithTitle(data, radiusAxisProperty, angleAxisProperty, markerRadiusProperty, labelProperty, type, color, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, System.String, System.String)" />*/
	addSeriesWithTitle: function (data, radiusAxisProperty, angleAxisProperty, markerRadiusProperty, labelProperty, type, color, title, key) {
		var propCount = markerRadiusProperty == null ? 2 : 3;
		var numberProperties = new $.ig.Array();
		numberProperties.add(radiusAxisProperty);
		numberProperties.add(angleAxisProperty);
		if (propCount == 3) {
			numberProperties.add(markerRadiusProperty);
		}
		var combinedType = $.ig.ChartsUtility.prototype.convertScatterType(type);
		var negativeColor = $.ig.ColorUtility.prototype.convertToNative(0);
		this.addSeriesHelper(data, numberProperties, labelProperty, null, combinedType, color, negativeColor, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, System.String, System.String)" />*/
	addSeries_1: function (radiusAxisValues, angleAxisValues, markerRadiusValues, labels, type, color, title, key) {
		var propCount = markerRadiusValues.length == 0 ? 2 : 3;
		var numberProperties = new $.ig.Array();
		numberProperties.add("RadiusValue");
		numberProperties.add("AngleValue");
		if (propCount == 3) {
			numberProperties.add("MarkerRadiusValue");
		}
		var combinedType = $.ig.ChartsUtility.prototype.convertScatterType(type);
		var negativeColor = $.ig.ColorUtility.prototype.convertToNative(0);
		this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo4(radiusAxisValues, angleAxisValues, markerRadiusValues, labels, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, negativeColor, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.PolarChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		var seriesCount = snapshot._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
			var series = snapshot._seriesList[seriesIndex];
			var radiusAxisValues = series._data[0];
			var angleAxisValues = series._data[1];
			var rValues = series._type == $.ig.CombinedDataItemType.prototype.bubble ? series._data[2] : null;
			for (var dataPointIndex = 0; dataPointIndex < radiusAxisValues.length; dataPointIndex++) {
				var pos = snapshot.calculateXYPosition(radiusAxisValues[dataPointIndex], angleAxisValues[dataPointIndex]);
				var xPos = pos._x;
				var yPos = pos._y;
				var r = 0;
				var rValue = NaN;
				if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
					r = rValue = rValues[dataPointIndex];
					if (snapshot._useRadiusScale) {
						r = $.ig.CPMathUtility.prototype.getLinearSize(snapshot._minMarkerRadiusValue, snapshot._maxMarkerRadiusValue, snapshot._minBubbleRadius, snapshot._maxBubbleRadius, r);
					}
				} else {
					r = snapshot._markerRadius;
				}
				if ((x - xPos) * (x - xPos) + (y - yPos) * (y - yPos) <= r * r) {
					var item = new $.ig.TooltipItem();
					item._index = dataPointIndex;
					item._x = radiusAxisValues[dataPointIndex];
					item._y = angleAxisValues[dataPointIndex];
					item._radius = rValue;
					item._color = series._colors[0];
					item._point = new $.ig.CPPoint(xPos, yPos);
					item._bounds = new $.ig.CPRect(1, (xPos - r), (yPos - r), r * 2, r * 2);
					item._seriesKey = series._key;
					item._propertyNames = $.ig.ArrayUtility.prototype.copyCPList(series._propertyNames);
					item._seriesType = series._type;
					items.add(item);
				}
			}
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.PolarChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.ChartBase.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		if (from._seriesList.length == 0 && to._seriesList.length > 0) {
			for (var i = 0; i < from._seriesList.length; i++) {
				var fromSeries = from._seriesList[i];
				var toSeries = to._seriesList[i];
				toSeries.copyTo(fromSeries);
				var yData = fromSeries._data[0];
				yData = $.ig.ArrayUtility.prototype.createZeroedDoubleArray(yData.length);
				fromSeries._data[0] = yData;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	$type: new $.ig.Type('PolarChart', $.ig.ChartBase.prototype.$type, [$.ig.ISecondaryAxisFormatting.prototype.$type])
}, true);

/*<EndType Name="Infragistics.PolarChart" />*/

/*<BeginType Name="Infragistics.SeriesSnapshotBase" />*/

$.ig.util.defType('SeriesSnapshotBase', 'LegendSnapshotBase', {
	_seriesList: null,
	_seriesKeyLookup: null,
	_majorAxisLineThickness: 0,
	_axisLineThickness: 0,
	_majorAxisLineColor: null,
	_primaryAxisLineColor: null,
	_markerRadius: 0,
	_combineClusteredValues: false,
	_valueInterval: 0,
	_labelTextHeight: 0,
	_maxLabelWidth: 0,
	_textMarkersVisible: false,
	_mode: 0,
	_innerAxisPadding: 0,
	_outerAxisPadding: 0,
	_itemCount: 0,
	_seriesCount: 0,
	_itemSize: 0,
	_itemSpacing: 0,
	_itemSizeSideBySide: 0,
	_itemSizeWithSpacing: 0,
	_itemSpacingSideBySide: 0,
	_sideBySideSeriesCount: 0,
	_endIndex: 0,
	_startIndex: 0,
	_labelInterval: 0,
	_longestLabel: null,
	_categorySpacingPercent: 0,
	_markerStrokeColor: null,
	_labels: null,
	_subsetIndices: null,
	_useSecondaryAxisValueFormat: false,
	_primaryAxisValueFormatType: 0,
	_primaryAxisValueFormatFractionDigits: 0,
	_primaryAxisValueFormatNegativeMode: 0,
	_primaryAxisValueFormatUseMKFormatting: false,
	_primaryAxisValueFormatCurrencySymbol: null,
	_primaryAxisValueFormatShowGroupingSeparator: false,
	_secondaryAxisValueFormatType: 0,
	_secondaryAxisValueFormatFractionDigits: 0,
	_secondaryAxisValueFormatNegativeMode: 0,
	_secondaryAxisValueFormatUseMKFormatting: false,
	_secondaryAxisValueFormatCurrencySymbol: null,
	_secondaryAxisValueFormatShowGroupingSeparator: false,
	_horizontalScaleMin: 0,
	_horizontalScaleMax: 0,
	_verticalScaleMin: 0,
	_verticalScaleMax: 0,
	_currentAxisMin: 0,
	_currentAxisMax: 0,
	_stack100ModeEnabled: false,
	_actualStack100ModeEnabled: false,
	_hasNanData: false,
	_crosshairsPoints: null,
	init: function (setDefaults) {
		this._majorAxisLineColor = new $.ig.Number();
		this._primaryAxisLineColor = new $.ig.Number();
		this._markerStrokeColor = new $.ig.Number();
		this._hasNanData = false;
		$.ig.LegendSnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._categorySpacingPercent = 0.1;
			this._markerRadius = 6 * this._density / 2;
			this._axisLineThickness = 1 * this._density;
			this._outerAxisPadding = 10 * this._density;
			this._innerAxisPadding = 5 * this._density;
			this._majorAxisLineThickness = 1 * this._density;
			this._majorAxisLineColor = $.ig.ColorUtility.prototype.createColor1(255, 230, 230, 230);
			this._combineClusteredValues = true;
			this._seriesCount = 0;
			this._seriesList = new $.ig.Array();
			this._seriesKeyLookup = new $.ig.Dictionary(0);
			this._primaryAxisLineColor = this._fontColor;
			this._markerStrokeColor = $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255);
			this._useSecondaryAxisValueFormat = false;
			this._primaryAxisValueFormatFractionDigits = 2;
			this._primaryAxisValueFormatNegativeMode = $.ig.FormatSettingsNegativeNumberMode.prototype.parens;
			this._primaryAxisValueFormatType = $.ig.FormatSettingsNumberType.prototype.number;
			this._primaryAxisValueFormatUseMKFormatting = true;
			this._primaryAxisValueFormatCurrencySymbol = "$";
			this._primaryAxisValueFormatShowGroupingSeparator = true;
			this._secondaryAxisValueFormatFractionDigits = 2;
			this._secondaryAxisValueFormatNegativeMode = $.ig.FormatSettingsNegativeNumberMode.prototype.parens;
			this._secondaryAxisValueFormatType = $.ig.FormatSettingsNumberType.prototype.number;
			this._secondaryAxisValueFormatUseMKFormatting = true;
			this._secondaryAxisValueFormatCurrencySymbol = "$";
			this._secondaryAxisValueFormatShowGroupingSeparator = true;
			this._stack100ModeEnabled = false;
			this._actualStack100ModeEnabled = false;
			this._hasNanData = false;
			this._crosshairsPoints = new $.ig.Dictionary(0);
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.LegendSnapshotBase.prototype.copyTo.call(this, snapshot);
		var seriesSnapshot = snapshot;
		seriesSnapshot._categorySpacingPercent = this._categorySpacingPercent;
		seriesSnapshot._mode = this._mode;
		seriesSnapshot._majorAxisLineThickness = this._majorAxisLineThickness;
		seriesSnapshot._majorAxisLineColor = this._majorAxisLineColor;
		seriesSnapshot._outerAxisPadding = this._outerAxisPadding;
		seriesSnapshot._innerAxisPadding = this._innerAxisPadding;
		seriesSnapshot._axisLineThickness = this._axisLineThickness;
		seriesSnapshot._primaryAxisLineColor = this._primaryAxisLineColor;
		seriesSnapshot._combineClusteredValues = this._combineClusteredValues;
		seriesSnapshot._valueInterval = this._valueInterval;
		seriesSnapshot._labelTextHeight = this._labelTextHeight;
		seriesSnapshot._maxLabelWidth = this._maxLabelWidth;
		seriesSnapshot._textMarkersVisible = this._textMarkersVisible;
		seriesSnapshot._itemCount = this._itemCount;
		seriesSnapshot._seriesCount = this._seriesCount;
		seriesSnapshot._sideBySideSeriesCount = this._sideBySideSeriesCount;
		seriesSnapshot._itemSize = this._itemSize;
		seriesSnapshot._itemSpacing = this._itemSpacing;
		seriesSnapshot._itemSizeSideBySide = this._itemSizeSideBySide;
		seriesSnapshot._itemSizeWithSpacing = this._itemSizeWithSpacing;
		seriesSnapshot._itemSpacingSideBySide = this._itemSpacingSideBySide;
		seriesSnapshot._endIndex = this._endIndex;
		seriesSnapshot._startIndex = this._startIndex;
		seriesSnapshot._labelInterval = this._labelInterval;
		seriesSnapshot._fontColor = this._fontColor;
		seriesSnapshot._markerStrokeColor = this._markerStrokeColor;
		seriesSnapshot._useSecondaryAxisValueFormat = this._useSecondaryAxisValueFormat;
		seriesSnapshot._primaryAxisValueFormatType = this._primaryAxisValueFormatType;
		seriesSnapshot._primaryAxisValueFormatFractionDigits = this._primaryAxisValueFormatFractionDigits;
		seriesSnapshot._primaryAxisValueFormatNegativeMode = this._primaryAxisValueFormatNegativeMode;
		seriesSnapshot._primaryAxisValueFormatUseMKFormatting = this._primaryAxisValueFormatUseMKFormatting;
		seriesSnapshot._primaryAxisValueFormatCurrencySymbol = this._primaryAxisValueFormatCurrencySymbol;
		seriesSnapshot._primaryAxisValueFormatShowGroupingSeparator = this._primaryAxisValueFormatShowGroupingSeparator;
		seriesSnapshot._secondaryAxisValueFormatType = this._secondaryAxisValueFormatType;
		seriesSnapshot._secondaryAxisValueFormatFractionDigits = this._secondaryAxisValueFormatFractionDigits;
		seriesSnapshot._secondaryAxisValueFormatNegativeMode = this._secondaryAxisValueFormatNegativeMode;
		seriesSnapshot._secondaryAxisValueFormatUseMKFormatting = this._secondaryAxisValueFormatUseMKFormatting;
		seriesSnapshot._secondaryAxisValueFormatCurrencySymbol = this._secondaryAxisValueFormatCurrencySymbol;
		seriesSnapshot._secondaryAxisValueFormatShowGroupingSeparator = this._secondaryAxisValueFormatShowGroupingSeparator;
		seriesSnapshot._seriesList = new $.ig.Array();
		seriesSnapshot._seriesKeyLookup = new $.ig.Dictionary(0);
		for (var i = 0; i < this._seriesList.length; i++) {
			var current = this._seriesList[i];
			var newObj = new $.ig.SeriesObject();
			current.copyTo(newObj);
			seriesSnapshot._seriesList.add(newObj);
			seriesSnapshot._seriesKeyLookup.item(newObj._key, newObj);
		}
		seriesSnapshot._labels = $.ig.ArrayUtility.prototype.copyCPList(this._labels);
		seriesSnapshot._subsetIndices = $.ig.ArrayUtility.prototype.copyIntArray(this._subsetIndices);
		seriesSnapshot._longestLabel = this._longestLabel;
		seriesSnapshot._markerRadius = this._markerRadius;
		seriesSnapshot._horizontalScaleMin = this._horizontalScaleMin;
		seriesSnapshot._horizontalScaleMax = this._horizontalScaleMax;
		seriesSnapshot._verticalScaleMin = this._verticalScaleMin;
		seriesSnapshot._verticalScaleMax = this._verticalScaleMax;
		seriesSnapshot._stack100ModeEnabled = this._stack100ModeEnabled;
		seriesSnapshot._actualStack100ModeEnabled = this._actualStack100ModeEnabled;
		seriesSnapshot._hasNanData = this._hasNanData;
		if (seriesSnapshot._crosshairsPoints == null) {
			seriesSnapshot._crosshairsPoints = new $.ig.Dictionary(0);
		} else {
			seriesSnapshot._crosshairsPoints.clear();
		}
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this._crosshairsPoints);
		for (var i1 = 0; i1 < keys.length; i1++) {
			var key = keys[i1];
			var currentItem = this._crosshairsPoints.item(key);
			seriesSnapshot._crosshairsPoints.item(key, currentItem.clone());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.LegendSnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var snapshot = newSnapshot;
		snapshot._categorySpacingPercent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._categorySpacingPercent, snapshot._categorySpacingPercent, percent);
		snapshot._markerRadius = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._markerRadius, snapshot._markerRadius, percent);
		snapshot._axisLineThickness = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._axisLineThickness, snapshot._axisLineThickness, percent);
		snapshot._majorAxisLineThickness = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._majorAxisLineThickness, snapshot._majorAxisLineThickness, percent);
		snapshot._majorAxisLineColor = $.ig.ColorUtility.prototype.transitionColor(this._majorAxisLineColor, snapshot._majorAxisLineColor, percent);
		snapshot._markerStrokeColor = $.ig.ColorUtility.prototype.transitionColor(this._markerStrokeColor, snapshot._markerStrokeColor, percent);
		snapshot._primaryAxisLineColor = $.ig.ColorUtility.prototype.transitionColor(this._primaryAxisLineColor, snapshot._primaryAxisLineColor, percent);
		snapshot._horizontalScaleMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._horizontalScaleMin, snapshot._horizontalScaleMin, percent);
		snapshot._horizontalScaleMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._horizontalScaleMax, snapshot._horizontalScaleMax, percent);
		snapshot._verticalScaleMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._verticalScaleMin, snapshot._verticalScaleMin, percent);
		snapshot._verticalScaleMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._verticalScaleMax, snapshot._verticalScaleMax, percent);
		snapshot._innerAxisPadding = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._innerAxisPadding, snapshot._innerAxisPadding, percent);
		snapshot._outerAxisPadding = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerAxisPadding, snapshot._outerAxisPadding, percent);
		for (var i = 0; i < this._seriesList.length; i++) {
			var current = this._seriesList[i];
			var next = snapshot._seriesList[i];
			current.transition(next, percent);
			var key = current._key;
			if (key == next._key && $.ig.NativeDictionaryUtility.prototype.containsKey(snapshot._crosshairsPoints, key) && $.ig.NativeDictionaryUtility.prototype.containsKey(this._crosshairsPoints, key)) {
				var currentPoint = (this._crosshairsPoints.get(key))._point;
				var nextPoint = (snapshot._crosshairsPoints.get(key))._point;
				var newPoint = new $.ig.CPPoint($.ig.CPMathUtility.prototype.transitionNativeNumber(currentPoint._x, nextPoint._x, percent), $.ig.CPMathUtility.prototype.transitionNativeNumber(currentPoint._y, nextPoint._y, percent));
				(snapshot._crosshairsPoints.item(key))._point = newPoint;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsValid()" />*/
	isValid: function () {
		return this._seriesCount > 0 && this._valueInterval > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsValid()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::ProcessFinancialSubsetDataBucket(System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	processFinancialSubsetDataBucket: function (start, end, bucketIndex, s) {
		var open = (s._data[0])[start];
		var close = (s._data[3])[end - 1];
		var lowMin = Number.POSITIVE_INFINITY;
		var highMax = Number.NEGATIVE_INFINITY;
		var highValues = s._data[1];
		var lowValues = s._data[2];
		for (var i = start; i < end; i++) {
			var high = highValues[i];
			var low = lowValues[i];
			highMax = Math.max(highMax, high);
			lowMin = Math.min(lowMin, low);
		}
		(s._maxSubsetData[0])[bucketIndex] = open;
		(s._maxSubsetData[1])[bucketIndex] = highMax;
		(s._maxSubsetData[2])[bucketIndex] = lowMin;
		(s._maxSubsetData[3])[bucketIndex] = close;
		this._subsetIndices[bucketIndex] = start;
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::ProcessFinancialSubsetDataBucket(System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateStructInfo()" />*/
	calculateStructInfo: function () {
		this._valueInterval = 1;
		this._seriesCount = this._seriesList.length;
		this._actualStack100ModeEnabled = this._stack100ModeEnabled;
		if (this._actualStack100ModeEnabled) {
			for (var seriesIndex = 0; seriesIndex < this._seriesCount; seriesIndex++) {
				var series = this._seriesList[seriesIndex];
				if (!series.isStackSeries()) {
					this._actualStack100ModeEnabled = false;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateStructInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculatePositionInfo()" />*/
	calculatePositionInfo: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculatePositionInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateDataInfo()" />*/
	calculateDataInfo: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateDataInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	calculateAxisMinMax: function (series) {
		var isStacked = series.isStackSeries();
		var isRange = series.isRangeSeries();
		var isFinancial = series.isFinancialSeries();
		if (this._actualStack100ModeEnabled && !isStacked) {
			return;
		}
		this._currentAxisMin = 0;
		this._currentAxisMax = 0;
		if (isRange || isFinancial) {
			this._currentAxisMin = Number.POSITIVE_INFINITY;
			this._currentAxisMax = Number.NEGATIVE_INFINITY;
		}
		if (isStacked) {
			series._stackTotals = new Array(this._itemCount);
			for (var valueIndex = 0; valueIndex < this._itemCount; valueIndex++) {
				var neg = 0;
				var pos = 0;
				var total = 0;
				for (var stackIndex = 0; stackIndex < series._stackKeys.length; stackIndex++) {
					var stackData = series._data[stackIndex];
					var value = valueIndex < stackData.length ? stackData[valueIndex] : 0;
					if ($.ig.util.isNaN(value)) {
						continue;
					}
					total = total + Math.abs(value);
					if (value < 0) {
						neg += value;
					} else {
						pos += value;
					}
				}
				if (total != 0) {
					if (this._actualStack100ModeEnabled) {
						pos = pos / total;
						neg = neg / total;
					}
					this._currentAxisMin = Math.min(this._currentAxisMin, neg);
					this._currentAxisMax = Math.max(this._currentAxisMax, pos);
				}
				series._stackTotals[valueIndex] = total;
			}
		} else if (isFinancial) {
			this._currentAxisMin = Math.min(this._currentAxisMin, series._minValues[2]);
			this._currentAxisMax = Math.max(this._currentAxisMax, series._maxValues[1]);
		} else {
			this._currentAxisMin = Math.min(this._currentAxisMin, series._minValues[0]);
			this._currentAxisMax = Math.max(this._currentAxisMax, series._maxValues[0]);
		}
		if (series.isSideBySideSeries()) {
			if (!this._actualStack100ModeEnabled || (this._actualStack100ModeEnabled && isStacked)) {
				this._sideBySideSeriesCount++;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSubsetData()" />*/
	calculateSubsetData: function () {
		for (var i = 0; i < this._seriesCount; i++) {
			var s = this._seriesList[i];
			s._maxSubsetData = null;
			s._minSubsetData = null;
		}
		this._subsetIndices = new Array(0);
		if (this._valueInterval > 1 && this._combineClusteredValues) {
			var arraySize = $.ig.intDivide(this._itemCount, this._valueInterval);
			if (arraySize * this._valueInterval < this._itemCount) {
				arraySize += 1;
			}
			for (var i1 = 0; i1 < this._seriesCount; i1++) {
				var s1 = this._seriesList[i1];
				s1._maxSubsetData = new $.ig.Array();
				s1._minSubsetData = new $.ig.Array();
				var groupCount = s1._data.length;
				for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
					s1._minSubsetData.add(new Array(arraySize));
					s1._maxSubsetData.add(new Array(arraySize));
				}
			}
			this._subsetIndices = new Array(arraySize);
			for (var subsetIndex = 0; subsetIndex < arraySize; subsetIndex++) {
				var start = subsetIndex * this._valueInterval;
				var end = Math.min(start + this._valueInterval, this._itemCount);
				var max = Number.NEGATIVE_INFINITY;
				var min = Number.POSITIVE_INFINITY;
				var displayedMaxDataPointIndex = 0;
				var displayedMinDataPointIndex = 0;
				var dominantIndex = 0;
				for (var seriesIndex = 0; seriesIndex < this._seriesCount; seriesIndex++) {
					var s2 = this._seriesList[seriesIndex];
					var groupCount1 = s2._data.length;
					var isStacked = s2.isStackSeries();
					var isRange = s2.isRangeSeries();
					var isFinancial = s2.isFinancialSeries();
					if (isFinancial) {
						this.processFinancialSubsetDataBucket(start, end, subsetIndex, s2);
						dominantIndex = start;
					} else {
						for (var index = start; index < end; index++) {
							var totalPositive = 0;
							var totalNegative = 0;
							var diff = 0;
							var val = 0;
							for (var groupIndex1 = 0; groupIndex1 < groupCount1; groupIndex1++) {
								var current = s2._data[groupIndex1];
								val = current[index];
								if ($.ig.util.isNaN(val)) {
									val = 0;
								}
								if (val < 0) {
									totalNegative += val;
								} else {
									totalPositive += val;
								}
								if (diff == 0) {
									diff = val;
								} else {
									diff = val - diff;
								}
							}
							if (isStacked) {
								if (totalNegative < min) {
									min = totalNegative;
									displayedMinDataPointIndex = index;
								}
								if (totalPositive > max) {
									max = totalPositive;
									displayedMaxDataPointIndex = index;
								}
							} else if (isRange) {
								if (diff < min) {
									min = diff;
									displayedMinDataPointIndex = index;
								}
								if (diff > max) {
									max = diff;
									displayedMaxDataPointIndex = index;
								}
							} else {
								if (val < min) {
									min = val;
									displayedMinDataPointIndex = index;
								}
								if (val > max) {
									max = val;
									displayedMaxDataPointIndex = index;
								}
							}
						}
						if (min > max) {
							var temp = min;
							min = max;
							max = temp;
						}
						if (Math.abs(min) > max) {
							dominantIndex = displayedMinDataPointIndex;
						} else {
							dominantIndex = displayedMaxDataPointIndex;
						}
					}
				}
				for (var seriesIndex1 = 0; seriesIndex1 < this._seriesCount; seriesIndex1++) {
					var s3 = this._seriesList[seriesIndex1];
					var groupCount2 = s3._data.length;
					var isFinancial1 = s3.isFinancialSeries();
					if (!isFinancial1) {
						for (var groupIndex2 = 0; groupIndex2 < groupCount2; groupIndex2++) {
							var current1 = s3._data[groupIndex2];
							var minGroup = s3._minSubsetData[groupIndex2];
							var maxGroup = s3._maxSubsetData[groupIndex2];
							maxGroup[subsetIndex] = current1[dominantIndex];
							minGroup[subsetIndex] = current1[displayedMinDataPointIndex];
						}
					}
				}
				this._subsetIndices[subsetIndex] = dominantIndex;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSubsetData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSubsetDataOld()" />*/
	calculateSubsetDataOld: function () {
		for (var i = 0; i < this._seriesCount; i++) {
			var s = this._seriesList[i];
			s._maxSubsetData = null;
			s._minSubsetData = null;
		}
		this._subsetIndices = new Array(0);
		if (this._valueInterval > 1 && this._combineClusteredValues) {
			var arraySize = $.ig.truncate(Math.ceil(this._itemCount / this._valueInterval));
			var totalItemCount = this._itemCount;
			for (var i1 = 0; i1 < this._seriesCount; i1++) {
				var s1 = this._seriesList[i1];
				var groupCount = s1._data.length;
				var isStacked = s1.isStackSeries();
				var isRange = s1.isRangeSeries();
				var isFinancial = s1.isFinancialSeries();
				s1._minSubsetData = new $.ig.Array();
				s1._maxSubsetData = new $.ig.Array();
				if (arraySize * this._valueInterval < totalItemCount) {
					arraySize++;
				}
				for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
					s1._minSubsetData.add(new Array(arraySize));
					s1._maxSubsetData.add(new Array(arraySize));
				}
				if (this._subsetIndices.length == 0) {
					this._subsetIndices = new Array(arraySize);
				}
				for (var j = 0; j < arraySize; j++) {
					var start = j * this._valueInterval;
					var end = start + this._valueInterval;
					end = end < totalItemCount ? end : totalItemCount;
					if (isFinancial) {
						this.processFinancialSubsetDataBucket(start, end, j, s1);
					} else {
						var min = Number.POSITIVE_INFINITY;
						var max = Number.NEGATIVE_INFINITY;
						var displayedMaxDataPointIndex = 0;
						var displayedMinDataPointIndex = 0;
						for (var index = start; index < end; index++) {
							var totalPositive = 0;
							var totalNegative = 0;
							var diff = 0;
							var val = 0;
							for (var groupIndex1 = 0; groupIndex1 < groupCount; groupIndex1++) {
								var current = s1._data[groupIndex1];
								val = current[index];
								if ($.ig.util.isNaN(val)) {
									val = 0;
								}
								if (val < 0) {
									totalNegative += val;
								} else {
									totalPositive += val;
								}
								if (diff == 0) {
									diff = val;
								} else {
									diff = val - diff;
								}
							}
							if (isStacked) {
								if (totalNegative < min) {
									min = totalNegative;
									displayedMinDataPointIndex = index;
								}
								if (totalPositive > max) {
									max = totalPositive;
									displayedMaxDataPointIndex = index;
								}
							} else if (isRange) {
								if (diff < min) {
									min = diff;
									displayedMinDataPointIndex = index;
								}
								if (diff > max) {
									max = diff;
									displayedMaxDataPointIndex = index;
								}
							} else {
								if (val < min) {
									min = val;
									displayedMinDataPointIndex = index;
								}
								if (val > max) {
									max = val;
									displayedMaxDataPointIndex = index;
								}
							}
						}
						if (min > max) {
							var temp = min;
							min = max;
							max = temp;
						}
						for (var groupIndex2 = 0; groupIndex2 < groupCount; groupIndex2++) {
							var current1 = s1._data[groupIndex2];
							var minGroup = s1._minSubsetData[groupIndex2];
							var maxGroup = s1._maxSubsetData[groupIndex2];
							if (isStacked || isRange) {
								maxGroup[j] = current1[displayedMaxDataPointIndex];
								minGroup[j] = current1[displayedMinDataPointIndex];
							} else {
								maxGroup[j] = max;
								minGroup[j] = min;
							}
						}
						this._subsetIndices[j] = displayedMaxDataPointIndex;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSubsetDataOld()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSplineData()" />*/
	calculateSplineData: function () {
		if (this._itemCount < 2) {
			return;
		}
		for (var seriesIndex = 0; seriesIndex < this._seriesCount; seriesIndex++) {
			var s = this._seriesList[seriesIndex];
			if (s._type == $.ig.CombinedDataItemType.prototype.spline || s._type == $.ig.CombinedDataItemType.prototype.splineArea) {
				var stackCount = s._stackKeys.length;
				s._splineXControlPoints = new $.ig.Array();
				s._splineYControlPoints = new $.ig.Array();
				s._splineMinYControlPoints = new $.ig.Array();
				s._splineTangents = new $.ig.Array();
				s._splineMinYTangents = new $.ig.Array();
				s._splineMaxTangentValue = 1 - 3.4028230607370965E+38;
				s._splineMinTangentValue = 3.4028230607370965E+38;
				for (var stackIndex = 0; stackIndex < stackCount; stackIndex++) {
					var splinePointCount = 0;
					var minMaxType = 0;
					var minSubsetCount = 0;
					var visibleItemCount = this._itemCount;
					if (this._valueInterval > 1) {
						visibleItemCount = (s._maxSubsetData[stackIndex]).length;
						minMaxType = 1;
						minSubsetCount = visibleItemCount;
					}
					splinePointCount = visibleItemCount;
					if (this.isPolar()) {
						splinePointCount++;
						minSubsetCount = minSubsetCount > 0 ? minSubsetCount + 1 : 0;
					}
					var x = new Array(splinePointCount);
					var y = new Array(splinePointCount);
					var minY = new Array(minSubsetCount);
					var prevValidY = 0;
					var prevValidMinY = 0;
					var val;
					var minVal;
					for (var i = 0; i < splinePointCount; i++) {
						var adjustedIndex = i < visibleItemCount ? i : 0;
						val = this.getValueForInterval(adjustedIndex, seriesIndex, stackIndex, minMaxType) + this.getLowerStackValue(adjustedIndex, seriesIndex, stackIndex, minMaxType, true);
						if (!$.ig.util.isNaN(val)) {
							prevValidY = val;
							if (this._valueInterval > 1) {
								minVal = this.getValueForInterval(adjustedIndex, seriesIndex, stackIndex, -1) + this.getLowerStackValue(adjustedIndex, seriesIndex, stackIndex, -1, true);
								prevValidMinY = $.ig.util.isNaN(minVal) ? val : minVal;
							}
							break;
						}
					}
					for (var i1 = 0; i1 < splinePointCount; i1++) {
						var adjustedIndex1 = i1 < visibleItemCount ? i1 : 0;
						x[i1] = i1;
						val = this.getValueForInterval(adjustedIndex1, seriesIndex, stackIndex, minMaxType) + this.getLowerStackValue(adjustedIndex1, seriesIndex, stackIndex, minMaxType, true);
						if ($.ig.util.isNaN(val)) {
							val = prevValidY;
						} else {
							prevValidY = val;
						}
						y[i1] = val;
						if (this._valueInterval > 1) {
							minVal = this.getValueForInterval(adjustedIndex1, seriesIndex, stackIndex, -1) + this.getLowerStackValue(adjustedIndex1, seriesIndex, stackIndex, -1, true);
							if ($.ig.util.isNaN(minVal)) {
								minVal = prevValidMinY;
							} else {
								prevValidMinY = minVal;
							}
							minY[i1] = minVal;
						}
					}
					var xcp = $.ig.ChartsUtility.prototype.calculateSplineControlPoints(x);
					var ycp = $.ig.ChartsUtility.prototype.calculateSplineControlPoints(y);
					var ycpMin = new Array(0);
					var tangents = $.ig.ChartsUtility.prototype.calculateSplineTangents(y, ycp);
					var tangentsMin = new Array(0);
					s._splineXControlPoints.add(xcp);
					s._splineYControlPoints.add(ycp);
					s._splineTangents.add(tangents);
					if (this._valueInterval > 1) {
						ycpMin = $.ig.ChartsUtility.prototype.calculateSplineControlPoints(minY);
						tangentsMin = $.ig.ChartsUtility.prototype.calculateSplineTangents(y, ycpMin);
						s._splineMinYControlPoints.add(ycpMin);
						s._splineMinYTangents.add(tangentsMin);
					} else {
						s._splineMinYControlPoints.add(new Array(0));
						s._splineMinYTangents.add(new Array(0));
					}
					if (this._actualStack100ModeEnabled) {
						for (var index = 0; index < splinePointCount - 1; index++) {
							ycp[index * 2] = ycp[index * 2] / s._stackTotals[index];
							ycp[index * 2 + 1] = ycp[index * 2 + 1] / s._stackTotals[index];
							tangents[index * 2] = tangents[index * 2] / s._stackTotals[index];
							tangents[index * 2 + 1] = tangents[index * 2 + 1] / s._stackTotals[index];
							if (this._valueInterval > 1) {
								ycpMin[index * 2] = ycpMin[index * 2] / s._stackTotals[index];
								ycpMin[index * 2 + 1] = ycpMin[index * 2 + 1] / s._stackTotals[index];
								tangentsMin[index * 2] = tangentsMin[index * 2] / s._stackTotals[index];
								tangentsMin[index * 2 + 1] = tangentsMin[index * 2 + 1] / s._stackTotals[index];
							}
						}
					}
				}
				var pointCount = (s._splineTangents[0]).length;
				for (var pointIndex = 0; pointIndex < pointCount; pointIndex++) {
					for (var stackIndex1 = 0; stackIndex1 < stackCount; stackIndex1++) {
						var val1 = (s._splineTangents[stackIndex1])[pointIndex];
						if (!$.ig.util.isNaN(val1)) {
							s._splineMaxTangentValue = Math.max(s._splineMaxTangentValue, val1);
							s._splineMinTangentValue = Math.min(s._splineMinTangentValue, val1);
						}
						if (this._valueInterval > 1) {
							var minVal1 = (s._splineMinYTangents[stackIndex1])[pointIndex];
							if (!$.ig.util.isNaN(minVal1)) {
								s._splineMinTangentValue = Math.min(s._splineMinTangentValue, minVal1);
							}
						}
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateSplineData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	calculateNumberOfTrendlinePoints: function (trendlineIndex) {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateTrendlineData(System.Int32, , )" />*/
	calculateTrendlineData: function (trendlineIndex, trendPointsX, trendPointsY) {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateTrendlineData(System.Int32, , )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::FinishCalculations()" />*/
	finishCalculations: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::FinishCalculations()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::Invalidate()" />*/
	invalidate: function () {
		if (this._seriesList.length == 0) {
			return;
		}
		this.calculateStructInfo();
		this.calculateFontInfo();
		this.calculateLegendSizeInfo();
		this.calculateSizeInfo();
		this.calculatePositionInfo();
		this.calculateDataInfo();
		this.calculateSubsetData();
		this.calculateSplineData();
		this.finishCalculations();
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsPolar()" />*/
	isPolar: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsPolar()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetSeriesCount()" />*/
	getSeriesCount: function () {
		return this._seriesList != null ? this._seriesList.length : 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetSeriesCount()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::ValueForItem(System.Int32, System.Int32, System.Int32)" />*/
	valueForItem1: function (index, seriesIndex, stackIndex) {
		var s = this._seriesList[seriesIndex];
		var array = s._data[stackIndex];
		return array[index];
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::ValueForItem(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::ValueForItem(System.Int32, System.Int32)" />*/
	valueForItem: function (index, series) {
		return this.valueForItem1(index, series, 0);
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::ValueForItem(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.SeriesSnapshotBase::LabelForItem(System.Int32)" />*/
	labelForItem: function (index) {
		if (index < this._labels.length) {
			return this._labels[index];
		}
		return "";
	}
	/*<EndMethod Name="System.String Infragistics.SeriesSnapshotBase::LabelForItem(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::MinValueForInterval(System.Int32, System.Int32)" />*/
	minValueForInterval: function (index, series) {
		return this.minValueForInterval1(index, series, 0);
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::MinValueForInterval(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::MinValueForInterval(System.Int32, System.Int32, System.Int32)" />*/
	minValueForInterval1: function (index, series, stackIndex) {
		var s = this._seriesList[series];
		var array = s._minSubsetData[stackIndex];
		return array[index];
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::MinValueForInterval(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::MaxValueForInterval(System.Int32, System.Int32)" />*/
	maxValueForInterval: function (index, series) {
		return this.maxValueForInterval1(index, series, 0);
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::MaxValueForInterval(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::MaxValueForInterval(System.Int32, System.Int32, System.Int32)" />*/
	maxValueForInterval1: function (index, series, stackIndex) {
		var s = this._seriesList[series];
		var array = s._maxSubsetData[stackIndex];
		return array[index];
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::MaxValueForInterval(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetValueForInterval(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	getValueForInterval: function (index, seriesIndex, stackIndex, minMaxType) {
		if (minMaxType == 0) {
			return this.valueForItem1((index) * this._valueInterval, seriesIndex, stackIndex);
		} else if (minMaxType == 1) {
			return this.maxValueForInterval1(index, seriesIndex, stackIndex);
		}
		return this.minValueForInterval1(index, seriesIndex, stackIndex);
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetValueForInterval(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetLowerStackIndex(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	getLowerStackIndex: function (index, seriesIndex, stackIndex, minMaxType) {
		if (stackIndex == 0) {
			return -1;
		}
		var s = this._seriesList[seriesIndex];
		var val = this.getValueForInterval(index, seriesIndex, stackIndex, minMaxType);
		var negative = val < 0;
		if (s._stackKeys.length > 1 && s._stackKeys.length == s._data.length) {
			for (var i = stackIndex - 1; i >= 0; i--) {
				var current = this.getValueForInterval(index, seriesIndex, i, minMaxType);
				if ((current < 0 && negative) || (current >= 0 && !negative)) {
					return i;
				}
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetLowerStackIndex(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshotBase::GetLowerStackValue(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	getLowerStackValue: function (index, seriesIndex, stackIndex, minMaxType, includeAllStacks) {
		if (stackIndex == 0) {
			return 0;
		}
		var s = this._seriesList[seriesIndex];
		var result = 0;
		var val = this.getValueForInterval(index, seriesIndex, stackIndex, minMaxType);
		var negative = val < 0;
		if (s.isStackSeries()) {
			for (var i = stackIndex - 1; i >= 0; i--) {
				var current = this.getValueForInterval(index, seriesIndex, i, minMaxType);
				if ((current < 0 && negative) || (current >= 0 && !negative)) {
					if (!includeAllStacks) {
						return current;
					}
					result += current;
				}
			}
		}
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshotBase::GetLowerStackValue(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetLowerBoundValue(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	getLowerBoundValue: function (index, seriesIndex, stackIndex, minMaxType) {
		var s = this._seriesList[seriesIndex];
		var val = this.getValueForInterval(index, seriesIndex, stackIndex, minMaxType);
		var negative = val < 0;
		var baseValue = 0;
		if (s._stackKeys.length > 1 && s._stackKeys.length == s._data.length) {
			for (var i = 0; i < stackIndex; i++) {
				var current = this.getValueForInterval(index, seriesIndex, i, minMaxType);
				if ((current < 0 && negative) || (current >= 0 && !negative)) {
					baseValue += current;
				}
			}
		} else if (s._stackKeys.length == 1 && s._data.length == 2) {
			baseValue = val;
		}
		return baseValue;
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetLowerBoundValue(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::TrendValueForItem(System.Int32, System.Int32)" />*/
	trendValueForItem: function (valueIndex, seriesIndex) {
		var s = this._seriesList[seriesIndex];
		return s._trendlineData[valueIndex];
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::TrendValueForItem(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::TrendlineEvaluate(Infragistics.TrendlineType, , System.Double)" />*/
	trendlineEvaluate: function (type, coefficients, x) {
		switch (type) {
			case $.ig.TrendlineType.prototype.linearFit:
			case $.ig.TrendlineType.prototype.quadraticFit:
			case $.ig.TrendlineType.prototype.cubicFit:
			case $.ig.TrendlineType.prototype.quarticFit:
				return $.ig.MCTrendCalculators.prototype.polynomialEvaluate(coefficients, x);
			case $.ig.TrendlineType.prototype.exponentialFit: return $.ig.MCTrendCalculators.prototype.exponentialEvaluate(coefficients, x);
			case $.ig.TrendlineType.prototype.logarithmicFit: return $.ig.MCTrendCalculators.prototype.logarithmicEvaluate(coefficients, x);
			case $.ig.TrendlineType.prototype.powerLawFit: return $.ig.MCTrendCalculators.prototype.powerLawEvaluate(coefficients, x);
			case $.ig.TrendlineType.prototype.quinticFit:
			case $.ig.TrendlineType.prototype.simpleMovingAverage:
			case $.ig.TrendlineType.prototype.exponentialMovingAverage:
			case $.ig.TrendlineType.prototype.cumulativeMovingAverage:
			case $.ig.TrendlineType.prototype.modifiedMovingAverage:
			case $.ig.TrendlineType.prototype.weightedMovingAverage:
				break;
		}
		return NaN;
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::TrendlineEvaluate(Infragistics.TrendlineType, , System.Double)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::AdjustIndexForInterval(System.Int32)" />*/
	adjustIndexForInterval: function (index) {
		return index = $.ig.truncate((index / this._valueInterval));
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::AdjustIndexForInterval(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	calculateValueBounds: function (info, index, seriesIndex, stackIndex, sideBySideIndex, series) {
		this.calculateValueBoundsHelper(info, index, seriesIndex, stackIndex, sideBySideIndex, series, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject)" />*/
	calculateCategoryBounds: function (info, index, sideBySideIndex, val, series) {
		this.calculateCategoryBounds1(info, index, sideBySideIndex, val, series, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateValueBoundsHelper(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.Int32)" />*/
	calculateValueBoundsHelper: function (info, index, seriesIndex, stackIndex, sideBySideIndex, series, minMaxType) {
		info._isValid = true;
		var zero = 0;
		var val = this.getValueForInterval(index, seriesIndex, stackIndex, minMaxType);
		var keyChain = series._stackKeys;
		var dataChain = series._data;
		if (keyChain.length == dataChain.length && stackIndex > 0) {
			var positive = val >= 0;
			var negative = val <= 0;
			for (var i = 0; i < stackIndex; i++) {
				var prevVal = 0;
				prevVal = this.getValueForInterval(index, seriesIndex, i, minMaxType);
				if ((positive && prevVal > 0) || (negative && prevVal < 0)) {
					val += prevVal;
					zero += prevVal;
				}
			}
		} else if (series.isRangeSeries()) {
			zero = val;
			val = this.getValueForInterval(index, seriesIndex, stackIndex + 1, minMaxType);
		} else if (series._type == $.ig.CombinedDataItemType.prototype.waterfall) {
			if (index > 0) {
				zero = this.getValueForInterval(index - 1, seriesIndex, stackIndex, minMaxType);
			}
		}
		if (this._actualStack100ModeEnabled && series.isStackSeries()) {
			var total = 0;
			for (var i1 = 0; i1 < keyChain.length; i1++) {
				var currentValue = this.getValueForInterval(index, seriesIndex, i1, minMaxType);
				if (!$.ig.util.isNaN(currentValue)) {
					total += Math.abs(currentValue);
				}
			}
			val = val / total;
			zero = zero / total;
		}
		if ($.ig.util.isNaN(val) || $.ig.util.isNaN(zero)) {
			info._isValid = false;
			return;
		}
		this.calculateCategoryBounds1(info, index, sideBySideIndex, val, series, zero);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateValueBoundsHelper(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.Int32)" />*/
	calculateCategoryValueBounds: function (info, index, seriesIndex, stackIndex, sideBySideIndex, series, dataSubsetType) {
		this.calculateValueBoundsHelper(info, index, seriesIndex, stackIndex, sideBySideIndex, series, dataSubsetType);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	calculateCategoryBounds1: function (info, index, sideBySideIndex, val, series, zero) {
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshotBase::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateValuePosition(System.Double, Infragistics.SeriesObject)" />*/
	calculateValuePosition: function (val, series) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateValuePosition(System.Double, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateScatterValuePosition(System.Double, Infragistics.SeriesObject, System.Boolean)" />*/
	calculateScatterValuePosition: function (val, series, primary) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateScatterValuePosition(System.Double, Infragistics.SeriesObject, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateCategoryPosition(System.Single)" />*/
	calculateCategoryPosition: function (index) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshotBase::CalculateCategoryPosition(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetValueInterval()" />*/
	getValueInterval: function () {
		return this._valueInterval;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetValueInterval()" />*/
	,
	/*<BeginMethod Name=" Infragistics.SeriesSnapshotBase::GetLegendPositions(System.Int32)" />*/
	getLegendPositions: function (seriesIndex) {
		var s = this._seriesList[seriesIndex];
		s._legendPositions = new Array(s._stackKeys.length * 4);
		return s._legendPositions;
	}
	/*<EndMethod Name=" Infragistics.SeriesSnapshotBase::GetLegendPositions(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.SeriesSnapshotBase::GetLabelForLegend(System.Int32, System.Int32)" />*/
	getLabelForLegend: function (seriesIndex, itemIndex) {
		var s = this._seriesList[seriesIndex];
		var title = s._stackTitles[itemIndex];
		if (title == "") {
			return s._stackKeys[itemIndex];
		}
		return title;
	}
	/*<EndMethod Name="System.String Infragistics.SeriesSnapshotBase::GetLabelForLegend(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	getNumberOfLegendItemsInSeries: function (seriesIndex) {
		var s = this._seriesList[seriesIndex];
		return s._stackKeys.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshotBase::GetNumberOfLegendItemsInSeries(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsLegendSplit()" />*/
	isLegendSplit: function () {
		var location = $.ig.YAxisLocation.prototype.left;
		var locationSet = false;
		for (var seriesIndex = 0; seriesIndex < this._seriesList.length; seriesIndex++) {
			var axisLocation = this.getSeriesYAxisLocation(seriesIndex);
			if (locationSet && location != axisLocation) {
				return true;
			}
			location = axisLocation;
			locationSet = true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesSnapshotBase::IsLegendSplit()" />*/
	,
	/*<BeginMethod Name="Infragistics.YAxisLocation Infragistics.SeriesSnapshotBase::GetSeriesYAxisLocation(System.Int32)" />*/
	getSeriesYAxisLocation: function (seriesIndex) {
		var s = this._seriesList[seriesIndex];
		return s._yLocation;
	}
	/*<EndMethod Name="Infragistics.YAxisLocation Infragistics.SeriesSnapshotBase::GetSeriesYAxisLocation(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.LegendIconShape Infragistics.SeriesSnapshotBase::GetLegendIconShape(System.Int32)" />*/
	getLegendIconShape: function (seriesIndex) {
		var s = this._seriesList[seriesIndex];
		return $.ig.ChartsUtility.prototype.getIconShape(s._type);
	}
	/*<EndMethod Name="Infragistics.LegendIconShape Infragistics.SeriesSnapshotBase::GetLegendIconShape(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetSeriesTotal(System.Int32, System.Int32)" />*/
	getSeriesTotal: function (index, seriesIndex) {
		var total = 0;
		var stackCount = (this._seriesList[seriesIndex])._stackKeys.length;
		for (var stackIndex = 0; stackIndex < stackCount; stackIndex++) {
			var val = this.valueForItem1(index, seriesIndex, stackIndex);
			if ($.ig.util.isNaN(val)) {
				continue;
			}
			total += Math.abs(val);
		}
		return total;
	}
	/*<EndMethod Name="System.Double Infragistics.SeriesSnapshotBase::GetSeriesTotal(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('SeriesSnapshotBase', $.ig.LegendSnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SeriesSnapshotBase" />*/

/*<BeginType Name="Infragistics.PolarSeriesSnapshot" />*/

$.ig.util.defType('PolarSeriesSnapshot', 'SeriesSnapshotBase', {
	_centerX: 0,
	_centerY: 0,
	_availableSize: 0,
	_radius: 0,
	_radiusFactor: 0,
	_actualRadiusFactor: 0,
	_innerExtent: 0,
	_angleAxisMin: 0,
	_angleAxisMax: 0,
	_radiusAxisMin: 0,
	_radiusAxisMax: 0,
	_userAngleAxisMin: 0,
	_userAngleAxisMax: 0,
	_userRadiusAxisMin: 0,
	_userRadiusAxisMax: 0,
	_angleAxisMinFixed: false,
	_angleAxisMaxFixed: false,
	_radiusAxisMinFixed: false,
	_radiusAxisMaxFixed: false,
	_angleAxisIsLogarithmic: false,
	_radiusAxisIsLogarithmic: false,
	_angleAxisLogBase: 0,
	_radiusAxisLogBase: 0,
	_useRadiusScale: false,
	_minBubbleRadius: 0,
	_maxBubbleRadius: 0,
	_minMarkerRadiusValue: 0,
	_maxMarkerRadiusValue: 0,
	_numberOfMaxRadiusAxisLabels: 0,
	_numberOfMaxAngleAxisLabels: 0,
	_radiusAxisStepSize: 0,
	_angleAxisStepSize: 0,
	_angleAxisLabelOrientation: 0,
	_labelExtent: 0,
	_radiusAxisTextWidth: 0,
	_radiusAxisTextHeight: 0,
	_angleAxisTextWidth: 0,
	_angleAxisTextHeight: 0,
	_resolvedFreeStandingRadiusAxisVisible: false,
	_freeStandingRadiusAxisLocation: 0,
	_freeStandingRadiusAxisOrientation: 0,
	_radiusAxisFrameX: 0,
	_radiusAxisFrameY: 0,
	_radiusAxisFrameWidth: 0,
	_radiusAxisFrameHeight: 0,
	init: function (setDefaults) {
		$.ig.SeriesSnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._radiusFactor = 1;
			this._innerExtent = 0.2;
			this._useRadiusScale = false;
			this._minBubbleRadius = this._maxBubbleRadius = NaN;
			this._userAngleAxisMin = this._userAngleAxisMax = this._userRadiusAxisMin = this._userRadiusAxisMax = NaN;
			this._radiusAxisIsLogarithmic = this._angleAxisIsLogarithmic = false;
			this._radiusAxisLogBase = this._angleAxisLogBase = 10;
			this._labelExtent = 10 * this._density;
			this._resolvedFreeStandingRadiusAxisVisible = true;
			this._freeStandingRadiusAxisLocation = $.ig.RadiusAxisLocation.prototype.topRight;
			this._freeStandingRadiusAxisOrientation = $.ig.Orientation.prototype.vertical;
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SeriesSnapshotBase.prototype.copyTo.call(this, snapshot);
		var nextSnapshot = snapshot;
		nextSnapshot._centerX = this._centerX;
		nextSnapshot._centerY = this._centerY;
		nextSnapshot._radius = this._radius;
		nextSnapshot._availableSize = this._availableSize;
		nextSnapshot._radiusFactor = this._radiusFactor;
		nextSnapshot._actualRadiusFactor = this._actualRadiusFactor;
		nextSnapshot._innerExtent = this._innerExtent;
		nextSnapshot._radiusAxisMin = this._radiusAxisMin;
		nextSnapshot._radiusAxisMax = this._radiusAxisMax;
		nextSnapshot._angleAxisMin = this._angleAxisMin;
		nextSnapshot._angleAxisMax = this._angleAxisMax;
		nextSnapshot._userRadiusAxisMin = this._userRadiusAxisMin;
		nextSnapshot._userRadiusAxisMax = this._userRadiusAxisMax;
		nextSnapshot._userAngleAxisMin = this._userAngleAxisMin;
		nextSnapshot._userAngleAxisMax = this._userAngleAxisMax;
		nextSnapshot._useRadiusScale = this._useRadiusScale;
		nextSnapshot._minBubbleRadius = this._minBubbleRadius;
		nextSnapshot._maxBubbleRadius = this._maxBubbleRadius;
		nextSnapshot._minMarkerRadiusValue = this._minMarkerRadiusValue;
		nextSnapshot._maxMarkerRadiusValue = this._maxMarkerRadiusValue;
		nextSnapshot._numberOfMaxRadiusAxisLabels = this._numberOfMaxRadiusAxisLabels;
		nextSnapshot._numberOfMaxAngleAxisLabels = this._numberOfMaxAngleAxisLabels;
		nextSnapshot._radiusAxisStepSize = this._radiusAxisStepSize;
		nextSnapshot._angleAxisStepSize = this._angleAxisStepSize;
		nextSnapshot._angleAxisIsLogarithmic = this._angleAxisIsLogarithmic;
		nextSnapshot._radiusAxisIsLogarithmic = this._radiusAxisIsLogarithmic;
		nextSnapshot._angleAxisLogBase = this._angleAxisLogBase;
		nextSnapshot._radiusAxisLogBase = this._radiusAxisLogBase;
		nextSnapshot._angleAxisLabelOrientation = this._angleAxisLabelOrientation;
		nextSnapshot._labelExtent = this._labelExtent;
		nextSnapshot._radiusAxisTextWidth = this._radiusAxisTextWidth;
		nextSnapshot._radiusAxisTextHeight = this._radiusAxisTextHeight;
		nextSnapshot._angleAxisTextWidth = this._angleAxisTextWidth;
		nextSnapshot._angleAxisTextHeight = this._angleAxisTextHeight;
		nextSnapshot._resolvedFreeStandingRadiusAxisVisible = this._resolvedFreeStandingRadiusAxisVisible;
		nextSnapshot._freeStandingRadiusAxisLocation = this._freeStandingRadiusAxisLocation;
		nextSnapshot._freeStandingRadiusAxisOrientation = this._freeStandingRadiusAxisOrientation;
		nextSnapshot._radiusAxisFrameX = this._radiusAxisFrameX;
		nextSnapshot._radiusAxisFrameY = this._radiusAxisFrameY;
		nextSnapshot._radiusAxisFrameWidth = this._radiusAxisFrameWidth;
		nextSnapshot._radiusAxisFrameHeight = this._radiusAxisFrameHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SeriesSnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var nextSnapshot = newSnapshot;
		nextSnapshot._radiusFactor = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._radiusFactor, nextSnapshot._radiusFactor, percent);
		nextSnapshot._innerExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._innerExtent, nextSnapshot._innerExtent, percent);
		nextSnapshot._radiusAxisMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._radiusAxisMin, nextSnapshot._radiusAxisMin, percent);
		nextSnapshot._radiusAxisMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._radiusAxisMax, nextSnapshot._radiusAxisMax, percent);
		nextSnapshot._angleAxisMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._angleAxisMin, nextSnapshot._angleAxisMin, percent);
		nextSnapshot._angleAxisMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._angleAxisMax, nextSnapshot._angleAxisMax, percent);
		nextSnapshot._userRadiusAxisMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._userRadiusAxisMin, nextSnapshot._userRadiusAxisMin, percent);
		nextSnapshot._userRadiusAxisMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._userRadiusAxisMax, nextSnapshot._userRadiusAxisMax, percent);
		nextSnapshot._userAngleAxisMin = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._userAngleAxisMin, nextSnapshot._userAngleAxisMin, percent);
		nextSnapshot._userAngleAxisMax = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._userAngleAxisMax, nextSnapshot._userAngleAxisMax, percent);
		nextSnapshot._minBubbleRadius = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._minBubbleRadius, nextSnapshot._minBubbleRadius, percent);
		nextSnapshot._maxBubbleRadius = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._maxBubbleRadius, nextSnapshot._maxBubbleRadius, percent);
		nextSnapshot._labelExtent = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._labelExtent, nextSnapshot._labelExtent, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateStructInfo()" />*/
	calculateStructInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateStructInfo.call(this);
		if (this._seriesCount > 0) {
			this._maxMarkerRadiusValue = 0;
			this._minMarkerRadiusValue = 3.4028230607370965E+38;
			this._radiusAxisMin = this._angleAxisMin = 3.4028230607370965E+38;
			this._radiusAxisMax = this._angleAxisMax = 1 - 3.4028230607370965E+38;
			this._itemCount = 0x7FFFFFFF;
			this._sideBySideSeriesCount = 0;
			for (var i = 0; i < this._seriesCount; i++) {
				var series = this._seriesList[i];
				if (series._labels != null) {
					this._labels = series._labels;
					this._longestLabel = series._longestLabel;
				}
				for (var stackIndex = 0; stackIndex < series._stackKeys.length; stackIndex++) {
					var data = series._data[stackIndex];
					this._itemCount = Math.min(this._itemCount, data.length);
				}
				this.calculateAxisMinMax(series);
			}
		}
		if (this._angleAxisMin == this._angleAxisMax) {
			this._angleAxisMin -= 1;
			this._angleAxisMax += 1;
		}
		if (this._radiusAxisMin == this._radiusAxisMax) {
			this._radiusAxisMin -= 1;
			this._radiusAxisMax += 1;
		}
		if (!this._actualStack100ModeEnabled) {
			if (!$.ig.util.isNaN(this._userAngleAxisMin)) {
				this._angleAxisMinFixed = true;
				this._angleAxisMin = this._userAngleAxisMin;
			}
			if (!$.ig.util.isNaN(this._userAngleAxisMax)) {
				this._angleAxisMaxFixed = true;
				this._angleAxisMax = this._userAngleAxisMax;
			}
			if (!$.ig.util.isNaN(this._userRadiusAxisMin)) {
				this._radiusAxisMinFixed = true;
				this._radiusAxisMin = this._userRadiusAxisMin;
			}
			if (!$.ig.util.isNaN(this._userRadiusAxisMax)) {
				this._radiusAxisMaxFixed = true;
				this._radiusAxisMax = this._userRadiusAxisMax;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateStructInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateFontInfo()" />*/
	calculateFontInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateFontInfo.call(this);
		var useSecondary = this._useSecondaryAxisValueFormat;
		var useMK = useSecondary ? this._secondaryAxisValueFormatUseMKFormatting : this._primaryAxisValueFormatUseMKFormatting;
		var negMode = useSecondary ? this._secondaryAxisValueFormatNegativeMode : this._primaryAxisValueFormatNegativeMode;
		var numType = useSecondary ? this._secondaryAxisValueFormatType : this._primaryAxisValueFormatType;
		var digits = useSecondary ? this._secondaryAxisValueFormatFractionDigits : this._primaryAxisValueFormatFractionDigits;
		var currencySymbol = useSecondary ? this._secondaryAxisValueFormatCurrencySymbol : this._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = useSecondary ? this._secondaryAxisValueFormatShowGroupingSeparator : this._primaryAxisValueFormatShowGroupingSeparator;
		var label = (this._longestLabel == null) ? "temp" : this._longestLabel;
		var maxSizeForFont = $.ig.NativeUtility.prototype.utility().measureText(label, this._fontName, this._fontSize);
		this._labelTextHeight = maxSizeForFont._height;
		this._maxLabelWidth = maxSizeForFont._width;
		this._radiusAxisTextWidth = this._radiusAxisTextHeight = 0;
		var maxText = $.ig.ChartsUtility.prototype.labelForValue(this._radiusAxisMax, this._primaryAxisValueFormatUseMKFormatting, this._primaryAxisValueFormatNegativeMode, this._primaryAxisValueFormatType, this._primaryAxisValueFormatFractionDigits, this._primaryAxisValueFormatShowGroupingSeparator, this._primaryAxisValueFormatCurrencySymbol);
		var minText = $.ig.ChartsUtility.prototype.labelForValue(this._radiusAxisMin, this._primaryAxisValueFormatUseMKFormatting, this._primaryAxisValueFormatNegativeMode, this._primaryAxisValueFormatType, this._primaryAxisValueFormatFractionDigits, this._primaryAxisValueFormatShowGroupingSeparator, this._primaryAxisValueFormatCurrencySymbol);
		var maxTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(maxText, this._fontName, this._fontSize);
		var minTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(minText, this._fontName, this._fontSize);
		this._radiusAxisTextWidth = Math.max(maxTextSizeBase._width, minTextSizeBase._width);
		this._radiusAxisTextHeight = this._labelTextHeight;
		this._angleAxisTextWidth = this._angleAxisTextHeight = 0;
		maxText = $.ig.ChartsUtility.prototype.labelForValue(this._angleAxisMax, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
		minText = $.ig.ChartsUtility.prototype.labelForValue(this._angleAxisMin, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
		maxTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(maxText, this._fontName, this._fontSize);
		minTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(minText, this._fontName, this._fontSize);
		this._angleAxisTextWidth = Math.max(maxTextSizeBase._width, minTextSizeBase._width);
		this._angleAxisTextHeight = this._labelTextHeight;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusNumericValue) {
			this._longestLabel = maxTextSizeBase._width > minTextSizeBase._width ? maxText : minText;
			this._maxLabelWidth = this._angleAxisTextWidth;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateFontInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateSizeInfo.call(this);
		this._centerX = this._legendLeftOffset + (this._width - this._legendLeftOffset) / 2;
		this._centerY = this._legendTopOffset + (this._height - this._legendTopOffset) / 2;
		var currentFrameX = this._legendLeftOffset;
		var currentFrameY = this._legendTopOffset;
		var currentFrameWidth = this._width - this._legendLeftOffset;
		var currentFrameHeight = this._height - this._legendTopOffset;
		var ic = this._itemCount;
		var itemSizeLimit = 0;
		var availSizeForItemSpacing = 0;
		var categoryAxisLength = 0;
		this._radiusAxisFrameX = 0;
		this._radiusAxisFrameY = 0;
		this._radiusAxisFrameWidth = 0;
		this._radiusAxisFrameHeight = 0;
		this._resolvedFreeStandingRadiusAxisVisible = true;
		if (currentFrameWidth > currentFrameHeight) {
			this._freeStandingRadiusAxisOrientation = $.ig.Orientation.prototype.vertical;
			this._radiusAxisFrameWidth = this._radiusAxisTextWidth + $.ig.PolarSeriesSnapshot.prototype.freeStandingAxisPadding;
			if (this._radiusAxisFrameWidth > currentFrameWidth / 4) {
				this._resolvedFreeStandingRadiusAxisVisible = false;
				this._radiusAxisFrameWidth = 0;
			} else {
				currentFrameWidth -= 2 * this._radiusAxisFrameWidth;
				currentFrameX += this._radiusAxisFrameWidth;
			}
		} else {
			this._freeStandingRadiusAxisOrientation = $.ig.Orientation.prototype.horizontal;
			this._radiusAxisFrameHeight = this._radiusAxisTextWidth + $.ig.PolarSeriesSnapshot.prototype.freeStandingAxisPadding;
			if (this._radiusAxisFrameHeight > currentFrameHeight / 4) {
				this._resolvedFreeStandingRadiusAxisVisible = false;
				this._radiusAxisFrameHeight = 0;
			} else {
				currentFrameHeight -= 2 * this._radiusAxisFrameHeight;
				currentFrameY += this._radiusAxisFrameHeight;
			}
		}
		var vertical = this._freeStandingRadiusAxisOrientation == $.ig.Orientation.prototype.vertical;
		var currentAvailableSize = Math.min(currentFrameWidth, currentFrameHeight);
		var spaceForChart = currentAvailableSize / 2;
		var verticalSpaceForLabels = 0;
		var horizontalSpaceForLabels = 0;
		switch (this._mode) {
			case $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue:
				categoryAxisLength = 360;
				var categoryArcLength = Math.PI * (this._radiusFactor * currentAvailableSize - 2 * this._labelTextHeight) / this._itemCount;
				var longestLabelArcWidth = this._maxLabelWidth;
				var heightDif = (currentAvailableSize / 2) * Math.sin(Math.PI / 2) - (currentAvailableSize / 2) * Math.sin(Math.PI / 2 - 360 / this._itemCount * Math.PI / 180);
				if (this._labels == null || this._labels.length == 0 || (this._maxLabelWidth + this._labelExtent) / (currentAvailableSize / 2) > 0.75) {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.noLabels;
					this._actualRadiusFactor = this._radiusFactor;
					if (this._radiusFactor == 1) {
						if (this._resolvedFreeStandingRadiusAxisVisible || this._height <= this._width) {
							this._actualRadiusFactor = 0.9;
						}
					}
					spaceForChart = currentAvailableSize / 2 * this._actualRadiusFactor;
				} else if (categoryArcLength > longestLabelArcWidth) {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.arc;
					spaceForChart = Math.min(currentFrameHeight / 2 - this._labelTextHeight, currentFrameWidth / 2 - this._labelTextHeight) - this._labelExtent;
					this._actualRadiusFactor = this._radiusFactor - (this._labelTextHeight + this._labelExtent) / (currentAvailableSize / 2);
					verticalSpaceForLabels = horizontalSpaceForLabels = this._labelTextHeight + this._labelExtent;
				} else if (heightDif > this._labelTextHeight) {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.horizontal;
					spaceForChart = Math.min(currentFrameHeight / 2 - this._labelTextHeight, currentFrameWidth / 2 - this._maxLabelWidth) - this._labelExtent;
					horizontalSpaceForLabels = this._maxLabelWidth + this._labelExtent;
					verticalSpaceForLabels = this._labelTextHeight + this._labelExtent;
					this._actualRadiusFactor = this._radiusFactor - (1 - spaceForChart / (currentAvailableSize / 2));
				} else {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.spoke;
					spaceForChart = Math.min(currentFrameHeight / 2 - this._maxLabelWidth, currentFrameWidth / 2 - this._maxLabelWidth) - this._labelExtent;
					horizontalSpaceForLabels = verticalSpaceForLabels = this._maxLabelWidth + this._labelExtent;
					this._actualRadiusFactor = this._radiusFactor - (this._maxLabelWidth + this._labelExtent) / (currentAvailableSize / 2);
				}
				itemSizeLimit = this._labelTextHeight / (Math.PI * currentAvailableSize * this._actualRadiusFactor) * 360;
				this._radius = currentAvailableSize / 2 * this._actualRadiusFactor;
				break;
			case $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue:
			case $.ig.ChartAxisMode.prototype.numericRadiusNumericValue:
				if ((this._maxLabelWidth + this._labelExtent) / (currentAvailableSize / 2) > 0.75) {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.noLabels;
					this._actualRadiusFactor = this._radiusFactor;
					if (this._radiusFactor == 1) {
						if (this._resolvedFreeStandingRadiusAxisVisible || this._height <= this._width) {
							this._actualRadiusFactor = 0.9;
						}
					}
					spaceForChart = currentAvailableSize / 2 * this._actualRadiusFactor;
				} else {
					this._angleAxisLabelOrientation = $.ig.AngleAxisLabelOrientation.prototype.horizontal;
					spaceForChart = Math.min(currentFrameHeight / 2 - this._labelTextHeight, currentFrameWidth / 2 - this._maxLabelWidth) - this._labelExtent;
					horizontalSpaceForLabels = this._angleAxisTextWidth + this._labelExtent * 1.5;
					if (spaceForChart + horizontalSpaceForLabels > currentAvailableSize / 2) {
						spaceForChart = currentAvailableSize / 2 - horizontalSpaceForLabels;
					}
					verticalSpaceForLabels = this._labelTextHeight + this._labelExtent;
					this._actualRadiusFactor = this._radiusFactor - (1 - spaceForChart / (currentAvailableSize / 2));
				}
				this._radius = currentAvailableSize / 2 * this._actualRadiusFactor;
				itemSizeLimit = this._labelTextHeight;
				categoryAxisLength = this._radius;
				break;
			case $.ig.ChartAxisMode.prototype.numericYCategoryX:
			case $.ig.ChartAxisMode.prototype.categoryYNumericX:
			case $.ig.ChartAxisMode.prototype.numericYNumericX:
				break;
		}
		this._canvasFrameX = this._centerX - spaceForChart - horizontalSpaceForLabels;
		this._canvasFrameY = this._centerY - spaceForChart - verticalSpaceForLabels;
		this._canvasFrameWidth = 2 * (spaceForChart + horizontalSpaceForLabels);
		this._canvasFrameHeight = 2 * (spaceForChart + verticalSpaceForLabels);
		this._availableSize = Math.min(this._canvasFrameWidth, this._canvasFrameHeight);
		if (this._resolvedFreeStandingRadiusAxisVisible) {
			if (vertical) {
				this._radiusAxisFrameHeight = this._radius * (1 - this._innerExtent);
			} else {
				this._radiusAxisFrameWidth = this._radius * (1 - this._innerExtent);
			}
			switch (this._freeStandingRadiusAxisLocation) {
				case $.ig.RadiusAxisLocation.prototype.topRight:
					this._radiusAxisFrameX = vertical ? this._canvasFrameX + this._canvasFrameWidth : this._centerX + this._radius * this._innerExtent;
					this._radiusAxisFrameY = vertical ? this._centerY - spaceForChart : this._canvasFrameY - this._radiusAxisFrameHeight;
					break;
				case $.ig.RadiusAxisLocation.prototype.bottomRight:
					this._radiusAxisFrameX = vertical ? this._canvasFrameX + this._canvasFrameWidth : this._centerX + this._radius * this._innerExtent;
					this._radiusAxisFrameY = vertical ? this._centerY + this._radius * this._innerExtent : this._canvasFrameY + this._canvasFrameWidth;
					break;
				case $.ig.RadiusAxisLocation.prototype.topLeft:
					this._radiusAxisFrameX = vertical ? this._canvasFrameX - this._radiusAxisFrameWidth : this._centerX - spaceForChart;
					this._radiusAxisFrameY = vertical ? this._centerY - spaceForChart : this._canvasFrameY - this._radiusAxisFrameHeight;
					break;
				case $.ig.RadiusAxisLocation.prototype.bottomLeft:
					this._radiusAxisFrameX = vertical ? this._canvasFrameX - this._radiusAxisFrameWidth : this._centerX - spaceForChart;
					this._radiusAxisFrameY = vertical ? this._centerY + this._radius * this._innerExtent : this._canvasFrameY + this._canvasFrameHeight;
					break;
			}
		}
		this._itemSize = categoryAxisLength / ic;
		if (this._itemSize < itemSizeLimit) {
			this._valueInterval = $.ig.truncate(Math.ceil(itemSizeLimit / this._itemSize));
			if (this._valueInterval < 0) {
				this._valueInterval = 0;
			}
			if (this._valueInterval > 1) {
				var newLimit = this._valueInterval * this._itemSize;
				ic = $.ig.truncate(Math.round((categoryAxisLength / newLimit)));
				this._itemSize = categoryAxisLength / ic;
			}
		}
		this._itemSpacing = this._itemSize * this._categorySpacingPercent;
		availSizeForItemSpacing = categoryAxisLength - (this._itemSpacing * (ic + 1));
		this._itemSizeWithSpacing = availSizeForItemSpacing / ic;
		if (this._sideBySideSeriesCount == 1) {
			this._itemSpacingSideBySide = 0;
			this._itemSizeSideBySide = this._itemSizeWithSpacing;
		} else {
			this._itemSpacingSideBySide = this._itemSizeWithSpacing / this._sideBySideSeriesCount * 0.1;
			var sideBySideItemSize = this._itemSizeWithSpacing - (this._itemSpacingSideBySide * (this._sideBySideSeriesCount + 1));
			this._itemSizeSideBySide = sideBySideItemSize / this._sideBySideSeriesCount;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculatePositionInfo()" />*/
	calculatePositionInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculatePositionInfo.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculatePositionInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateDataInfo()" />*/
	calculateDataInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateDataInfo.call(this);
		if (this._valueInterval == 0) {
			this._startIndex = 0;
			this._endIndex = 0;
			this._labelInterval = 0;
			return;
		}
		this._startIndex = 0;
		this._endIndex = this._itemCount - 1;
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateDataInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	calculateAxisMinMax: function (series) {
		if (this._actualStack100ModeEnabled && !series.isStackSeries()) {
			return;
		}
		$.ig.SeriesSnapshotBase.prototype.calculateAxisMinMax.call(this, series);
		this._radiusAxisMin = Math.min(this._radiusAxisMin, this._currentAxisMin);
		this._radiusAxisMax = Math.max(this._radiusAxisMax, this._currentAxisMax);
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusNumericValue) {
			this._angleAxisMin = Math.min(this._angleAxisMin, series._minValues[1]);
			this._angleAxisMax = Math.max(this._angleAxisMax, series._maxValues[1]);
			if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
				this._minMarkerRadiusValue = Math.min(this._minMarkerRadiusValue, series._minValues[2]);
				this._maxMarkerRadiusValue = Math.max(this._maxMarkerRadiusValue, series._maxValues[2]);
			}
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
			this._angleAxisMin = this._startIndex;
			this._angleAxisMax = this._itemCount;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSubsetData()" />*/
	calculateSubsetData: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateSubsetData.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSubsetData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSplineData()" />*/
	calculateSplineData: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateSplineData.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateSplineData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.PolarSeriesSnapshot::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	calculateNumberOfTrendlinePoints: function (trendlineIndex) {
		$.ig.SeriesSnapshotBase.prototype.calculateNumberOfTrendlinePoints.call(this, trendlineIndex);
		var s = this._seriesList[trendlineIndex];
		var startX = this._startIndex;
		var endX = this._endIndex;
		if ($.ig.MCTrendCalculators.prototype.isFitTrendline(s._trendlineType)) {
			var increment = 2 * (endX - startX) / (2 * Math.PI * this._radius);
			return $.ig.truncate(Math.ceil((endX - startX) / (increment * this._valueInterval)));
		} else {
			return $.ig.intDivide((endX - startX + 1), this._valueInterval);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.PolarSeriesSnapshot::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateTrendlineData(System.Int32, , )" />*/
	calculateTrendlineData: function (trendlineIndex, trendPointsX, trendPointsY) {
		$.ig.SeriesSnapshotBase.prototype.calculateTrendlineData.call(this, trendlineIndex, trendPointsX, trendPointsY);
		var info = new $.ig.ItemLayoutInfo();
		var s = this._seriesList[trendlineIndex];
		if (s._trendlinePeriod == -1) {
			return;
		}
		var isFit = $.ig.MCTrendCalculators.prototype.isFitTrendline(s._trendlineType);
		var startX = this._startIndex;
		var endX = this._endIndex;
		if (startX > 0) {
			startX = startX - 1;
		}
		if (isFit) {
			var increment = 2 * (endX - startX) / (2 * Math.PI * this._radius);
			var i = startX;
			for (var counter = 0; counter < trendPointsX.length; counter++) {
				var unscaledValue = this.trendlineEvaluate(s._trendlineType, s._trendlineData, i * this._valueInterval);
				var pt = this.calculateXYPosition(unscaledValue, i + 0.5);
				trendPointsX[counter] = pt._x;
				trendPointsY[counter] = pt._y;
				i += increment;
			}
		} else {
			var i1 = startX;
			for (var counter1 = 0; counter1 < trendPointsX.length; counter1++) {
				var index = this.adjustIndexForInterval(i1);
				var unscaledValue1 = this.trendValueForItem(i1, trendlineIndex);
				if ($.ig.util.isNaN(unscaledValue1)) {
					return;
				}
				this.calculateCategoryBounds(info, index, -1, unscaledValue1, s);
				trendPointsX[counter1] = info._valueLocationX;
				trendPointsY[counter1] = info._valueLocationY;
				i1 += this._valueInterval;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateTrendlineData(System.Int32, , )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::FinishCalculations()" />*/
	finishCalculations: function () {
		$.ig.SeriesSnapshotBase.prototype.finishCalculations.call(this);
		var minOffset, maxOffset;
		minOffset = 0;
		maxOffset = 0;
		this._numberOfMaxRadiusAxisLabels = $.ig.truncate((this._radius * (1 - this._innerExtent) / this._labelTextHeight / 3));
		this._numberOfMaxAngleAxisLabels = $.ig.truncate((Math.PI * this._availableSize / this._labelTextHeight / 3));
		if (this._numberOfMaxRadiusAxisLabels == 0) {
			this._numberOfMaxRadiusAxisLabels = 1;
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
			this._numberOfMaxAngleAxisLabels = Math.min(this._itemCount, 360);
		} else {
			this._numberOfMaxAngleAxisLabels = Math.min(this._numberOfMaxAngleAxisLabels, 10);
		}
		var sc = this._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < sc; seriesIndex++) {
			var series = this._seriesList[seriesIndex];
			var minXpx = this._centerX + this.distanceFromCenter(this._radiusAxisMin);
			var maxXpx = this._centerX + this.distanceFromCenter(this._radiusAxisMax);
			if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
				var xValues = series._data[0];
				var rValues = series._data[2];
				for (var dataPointIndex = 0; dataPointIndex < rValues.length; dataPointIndex++) {
					var x = this._centerX + this.distanceFromCenter(xValues[dataPointIndex]);
					var r = rValues[dataPointIndex];
					if (this._useRadiusScale) {
						r = $.ig.CPMathUtility.prototype.getLinearSize(this._minMarkerRadiusValue, this._maxMarkerRadiusValue, this._minBubbleRadius, this._maxBubbleRadius, r);
					}
					if (x - r < minXpx) {
						minOffset = Math.max(minOffset, r);
					}
					if (x + r > maxXpx) {
						maxOffset = Math.max(maxOffset, r);
					}
				}
			}
			if (series._type == $.ig.CombinedDataItemType.prototype.spline || series._type == $.ig.CombinedDataItemType.prototype.splineArea) {
				this._radiusAxisMin = Math.min(this._radiusAxisMin, series._splineMinTangentValue);
				this._radiusAxisMax = Math.max(this._radiusAxisMax, series._splineMaxTangentValue);
			}
			if (series._type == $.ig.CombinedDataItemType.prototype.scatter || series._type == $.ig.CombinedDataItemType.prototype.scatterLine || series._type == $.ig.CombinedDataItemType.prototype.scatterOutlier) {
				minOffset = Math.max(minOffset, this._markerRadius);
				maxOffset = Math.max(maxOffset, this._markerRadius);
			}
		}
		var range = (this._radiusAxisMax - this._radiusAxisMin) * this._radius / (this._radius - (minOffset + maxOffset));
		this._radiusAxisMin = this._radiusAxisMin - ((minOffset / this._radius) * range);
		this._radiusAxisMax = this._radiusAxisMax + ((maxOffset / this._radius) * range);
		var rangeRadius = $.ig.CPMathUtility.prototype.calculateRoundRange(this._radiusAxisMin, this._radiusAxisMax, false, false);
		this._radiusAxisMin = rangeRadius[0];
		this._radiusAxisMax = rangeRadius[1];
		var rangeValue = $.ig.CPMathUtility.prototype.calculateRoundRange(this._angleAxisMin, this._angleAxisMax, false, false);
		this._angleAxisMin = rangeValue[0];
		this._angleAxisMax = rangeValue[1];
		this._radiusAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._radiusAxisMax - this._radiusAxisMin) / this._numberOfMaxRadiusAxisLabels, false, this._primaryAxisValueFormatFractionDigits, this._actualStack100ModeEnabled);
		this._angleAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber((this._angleAxisMax - this._angleAxisMin) / this._numberOfMaxAngleAxisLabels, false);
		if (this._radiusAxisStepSize > 0) {
			var numIntervals = this._radiusAxisMin / this._radiusAxisStepSize;
			var numWholeIntervals = $.ig.truncate(numIntervals);
			if (numWholeIntervals != numIntervals) {
				numWholeIntervals -= this._radiusAxisMin < 0 ? 1 : 0;
				this._radiusAxisMin = numWholeIntervals * this._radiusAxisStepSize;
			}
			numIntervals = this._radiusAxisMax / this._radiusAxisStepSize;
			numWholeIntervals = $.ig.truncate(numIntervals);
			if (numIntervals != numWholeIntervals) {
				numWholeIntervals += this._radiusAxisMax < 0 ? 0 : 1;
				this._radiusAxisMax = numWholeIntervals * this._radiusAxisStepSize;
			}
			this._numberOfMaxRadiusAxisLabels = $.ig.truncate(((this._radiusAxisMax - this._radiusAxisMin) / this._radiusAxisStepSize));
		}
		if (this._angleAxisStepSize > 0) {
			var numIntervals1 = this._angleAxisMin / this._angleAxisStepSize;
			var numWholeIntervals1 = $.ig.truncate(numIntervals1);
			if (numWholeIntervals1 != numIntervals1) {
				numWholeIntervals1 -= this._angleAxisMin < 0 ? 1 : 0;
				this._angleAxisMin = numWholeIntervals1 * this._angleAxisStepSize;
			}
			numIntervals1 = this._angleAxisMax / this._angleAxisStepSize;
			numWholeIntervals1 = $.ig.truncate(numIntervals1);
			if (numIntervals1 != numWholeIntervals1) {
				numWholeIntervals1 += this._angleAxisMax < 0 ? 0 : 1;
				this._angleAxisMax = numWholeIntervals1 * this._angleAxisStepSize;
			}
			this._numberOfMaxAngleAxisLabels = $.ig.truncate(((this._angleAxisMax - this._angleAxisMin) / this._angleAxisStepSize));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::FinishCalculations()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::Invalidate()" />*/
	invalidate: function () {
		if (this._width == 0 || this._height == 0) {
			return;
		}
		$.ig.SeriesSnapshotBase.prototype.invalidate.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.PolarSeriesSnapshot::IsPolar()" />*/
	isPolar: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.PolarSeriesSnapshot::IsPolar()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.PolarSeriesSnapshot::DistanceFromCenter(System.Single)" />*/
	distanceFromCenter: function (value) {
		var calcMin = this._radiusAxisMin;
		var calcMax = this._radiusAxisMax;
		var calcVal = value;
		if (this._radiusAxisIsLogarithmic && this._radiusAxisLogBase > 1) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._radiusAxisMin, this._radiusAxisLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._radiusAxisMax, this._radiusAxisLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(value, this._radiusAxisLogBase);
		}
		var percent = ((calcVal - calcMin) / (calcMax - calcMin));
		var result = this._radius * this._innerExtent + this._radius * (1 - this._innerExtent) * percent;
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.PolarSeriesSnapshot::DistanceFromCenter(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.PolarSeriesSnapshot::GetExtent(System.Single)" />*/
	getExtent: function (value) {
		var calcMin = this._radiusAxisMin;
		var calcMax = this._radiusAxisMax;
		var calcVal = value;
		if (this._radiusAxisIsLogarithmic && this._radiusAxisLogBase > 1) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._radiusAxisMin, this._radiusAxisLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._radiusAxisMax, this._radiusAxisLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(value, this._radiusAxisLogBase);
		}
		var percent = ((calcVal - calcMin) / (calcMax - calcMin));
		var result = this._innerExtent + (1 - this._innerExtent) * percent;
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.PolarSeriesSnapshot::GetExtent(System.Single)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.PolarSeriesSnapshot::CalculateXYPosition(System.Single, System.Single)" />*/
	calculateXYPosition: function (radiusAxisValue, angleAxisValue) {
		var r = this.distanceFromCenter(radiusAxisValue);
		var calcMin = 0;
		var calcMax = 0;
		var calcVal = angleAxisValue;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
			calcMin = this._startIndex;
			calcMax = $.ig.intDivide(this._itemCount, this._valueInterval);
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusNumericValue) {
			calcMin = this._angleAxisMin;
			calcMax = this._angleAxisMax;
			if (this._angleAxisIsLogarithmic && this._angleAxisLogBase > 1) {
				calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._angleAxisMin, this._angleAxisLogBase);
				calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(this._angleAxisMax, this._angleAxisLogBase);
				calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(angleAxisValue, this._angleAxisLogBase);
			}
		}
		var percent = (calcVal - calcMin) / (calcMax - calcMin);
		var angleRadians = (2 * Math.PI * percent);
		var x = this._centerX + r * Math.cos(angleRadians);
		var y = this._centerY + r * Math.sin(angleRadians);
		var result = new $.ig.CPPoint(x, y);
		return result;
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.PolarSeriesSnapshot::CalculateXYPosition(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	calculateCategoryBounds1: function (info, index, sideBySideIndex, val, series, zero) {
		info._value = val;
		info._valueIsNegative = val < zero;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue) {
			var angleSweep = (sideBySideIndex < 0) ? this._itemSize - this._itemSpacing / 2 : this._itemSizeSideBySide;
			if (sideBySideIndex < 0) {
				info._startAngle = this._itemSize * index + this._itemSpacing / 2;
				info._endAngle = Math.min(360, info._startAngle + angleSweep);
			} else {
				info._startAngle = this._itemSize * index + this._itemSpacing / 2;
				info._startAngle += (this._itemSpacingSideBySide * (sideBySideIndex + 1)) + (this._itemSizeSideBySide * sideBySideIndex);
				info._endAngle = Math.min(360, info._startAngle + angleSweep);
			}
			if (val < zero) {
				info._startExtent = this.getExtent(val);
				info._endExtent = this.getExtent(zero);
			} else {
				info._startExtent = this.getExtent(zero);
				info._endExtent = this.getExtent(val);
			}
			var pt = this.calculateXYPosition(val, index + 0.5);
			info._valueLocationX = pt._x;
			info._valueLocationY = pt._y;
			info._boundsWidth = Math.PI * this._availableSize / this._itemCount;
			info._boundsHeight = info._boundsWidth;
			info._boundsX = pt._x;
			info._boundsY = pt._y;
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PolarSeriesSnapshot::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	,
	$type: new $.ig.Type('PolarSeriesSnapshot', $.ig.SeriesSnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PolarSeriesSnapshot" />*/

/*<BeginType Name="Infragistics.RadialChart" />*/

$.ig.util.defType('RadialChart', 'ChartBase', {
	init: function () {
		$.ig.ChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Single Infragistics.RadialChart::RadiusAxisMin()" />*/
	radiusAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRadiusAxisMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRadiusAxisMin;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.RadialChart::RadiusAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.RadialChart::RadiusAxisMax()" />*/
	radiusAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userRadiusAxisMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userRadiusAxisMax;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.RadialChart::RadiusAxisMax()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::Setup()" />*/
	setup: function () {
		$.ig.ChartBase.prototype.setup.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._mode = $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue;
		this.setZoomType($.ig.ZoomType.prototype.none);
		this._canvas._layers.add(new $.ig.PolarAxisLayer());
		this._canvas._layers.add(new $.ig.RadialChartLayer());
		this._canvas._layers.add(new $.ig.MarkerLayer());
		this._canvas._layers.add(new $.ig.RadiusAxisLabelLayer());
		this._canvas._layers.add(new $.ig.AngleAxisLabelLayer());
		this._canvas._layers.add(new $.ig.LegendLayer());
		this._canvas._layers.add(new $.ig.TrendlineLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.RadialChart::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.PolarSeriesSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.RadialChart::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, System.String)" />*/
	addSeries: function (data, numberProperty, labelProperty, type, color, negativeColor, key) {
		this.addSeriesWithTitle(data, numberProperty, labelProperty, type, color, negativeColor, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, System.String, System.String)" />*/
	addSeriesWithTitle: function (data, numberProperty, labelProperty, type, color, negativeColor, title, key) {
		var numberProperties = new $.ig.Array();
		numberProperties.add(numberProperty);
		var combinedType = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		var series = this.addSeriesHelper(data, numberProperties, labelProperty, null, combinedType, color, negativeColor, title, key);
		if (series._trendlinePeriod != -1) {
			series._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(series._data[0], series._trendlineType, series._trendlinePeriod);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, Infragistics.CategoryDataItemType, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, System.String, System.String, System.String)" />*/
	addSeries_1: function (values, labels, type, color, negativeColor, title, key) {
		var numberProperties = new $.ig.Array();
		numberProperties.add("Values");
		var combinedType = $.ig.ChartsUtility.prototype.convertCategoryType(type);
		if (labels != null && labels.length == 0) {
			labels = null;
		}
		var series = this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo6(values, labels, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, negativeColor, title, key);
		if (series._trendlinePeriod != -1) {
			series._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(series._data[0], series._trendlineType, series._trendlinePeriod);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddSeries(, , Infragistics.CategoryDataItemType, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddTrendline(System.String, Infragistics.TrendlineType, System.Int32, System.String)" />*/
	addTrendline: function (seriesKey, type, period, color) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		if (s != null) {
			s._trendlineData = $.ig.MCTrendCalculators.prototype.processTrendline(s._data[0], type, period);
			s._trendlineType = type;
			s._trendlinePeriod = period;
			s._trendlineColor = $.ig.ColorUtility.prototype.convertToInt(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddTrendline(System.String, Infragistics.TrendlineType, System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddTrendline(System.String, Infragistics.TrendlineType, System.String)" />*/
	addTrendline1: function (seriesKey, type, color) {
		this.addTrendline(seriesKey, type, 7, color);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddTrendline(System.String, Infragistics.TrendlineType, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::RemoveTrendline(System.String)" />*/
	removeTrendline: function (seriesKey) {
		var snapshot = this.__lastSnapshot;
		var s = snapshot._seriesKeyLookup.item(seriesKey);
		this.removeTrendlineFromSeries(s);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::RemoveTrendline(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::RemoveAllTrendlines()" />*/
	removeAllTrendlines: function () {
		var snapshot = this.__lastSnapshot;
		var seriesCount = snapshot._seriesList.length;
		for (var i = 0; i < seriesCount; i++) {
			var s = snapshot._seriesList[i];
			this.removeTrendlineFromSeries(s);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::RemoveAllTrendlines()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::RemoveTrendlineFromSeries(Infragistics.SeriesObject)" />*/
	removeTrendlineFromSeries: function (series) {
		if (series != null) {
			series._trendlineColor = -1;
			series._trendlineData = new Array(0);
			series._trendlinePeriod = -1;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::RemoveTrendlineFromSeries(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	addStackTo1: function (seriesKey, data, numberProperty, color, stackKey) {
		this.addStackTo2(seriesKey, data, numberProperty, color, null, stackKey);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String)" />*/
	addStackTo2: function (seriesKey, data, numberProperty, color, title, stackKey) {
		var info = $.ig.NativeUtility.prototype.utility().setData(data, numberProperty, null, null, null, null, null, null, null, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		this.addStackHelper(seriesKey, info, numberProperty, color, title, stackKey, color, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, , System.String, System.String, System.String)" />*/
	addStackTo: function (seriesKey, values, color, title, stackKey) {
		this.addStackHelper(seriesKey, $.ig.DataInfo.prototype.createDataInfo6(values, null, this.__lastSnapshot._treatNullValuesAsZeroes), "Values", color, title, stackKey, color, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::AddStackTo(System.String, , System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::RemoveStack(System.String, System.String)" />*/
	removeStack: function (seriesKey, stackKey) {
		this.removeStackHelper(seriesKey, stackKey);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::RemoveStack(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::ClearStacks(System.String)" />*/
	clearStacks: function (seriesKey) {
		this.clearStacksHelper(seriesKey);
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::ClearStacks(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.RadialChart::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	resolveCategoryIndex: function (point) {
		var index = -1;
		var snapshot = this.__lastSnapshot;
		if (snapshot != null) {
			var angleOfPoint = $.ig.ChartsUtility.prototype.getAngleFromCenter(snapshot._centerX, snapshot._centerY, point._x, point._y);
			var distanceFromCenter = $.ig.ChartsUtility.prototype.distanceBetweenPoints(snapshot._centerX, snapshot._centerY, point._x, point._y);
			if (distanceFromCenter >= snapshot._innerExtent * snapshot._radius && distanceFromCenter <= snapshot._radius) {
				index = $.ig.truncate((angleOfPoint / snapshot._itemSize));
			}
		}
		return index;
	}
	/*<EndMethod Name="System.Int32 Infragistics.RadialChart::ResolveCategoryIndex(Infragistics.NativePoint)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.RadialChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		var pt = new $.ig.CPPoint(x, y);
		var index = this.resolveCategoryIndex(pt);
		if (index < 0) {
			return items;
		}
		var useMK = snapshot._primaryAxisValueFormatUseMKFormatting;
		var negMode = snapshot._primaryAxisValueFormatNegativeMode;
		var numType = snapshot._primaryAxisValueFormatType;
		var digits = snapshot._primaryAxisValueFormatFractionDigits;
		var currencySymbol = snapshot._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = snapshot._primaryAxisValueFormatShowGroupingSeparator;
		var seriesCount = snapshot._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
			var s = snapshot._seriesList[seriesIndex];
			for (var stackIndex = 0; stackIndex < s._data.length; stackIndex++) {
				var item = new $.ig.TooltipItem();
				item._color = stackIndex < s._colors.length ? s._colors[stackIndex] : s._colors[0];
				item._value = snapshot.valueForItem1(index, seriesIndex, stackIndex);
				item._valueLabel = item._valueFormatted = $.ig.ChartsUtility.prototype.labelForValue(item._value, useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
				item._point = this.getPointAt(index, stackIndex, s._key);
				item._bounds = this.getItemBounds1(index, s._key, stackIndex);
				item._seriesKey = s._key;
				item._propertyNames = $.ig.ArrayUtility.prototype.copyCPList(s._propertyNames);
				item._seriesType = s._type;
				item._index = index;
				item._numberOfStacks = 0;
				item._title = s._title;
				if (s.isStackSeries()) {
					item._seriesKey = s._stackKeys[stackIndex];
					item._numberOfStacks = s._stackKeys.length;
				} else if (s.isFinancialSeries() || s.isRangeSeries()) {
					item._seriesKey = s._propertyNames[stackIndex];
				}
				items.add(item);
			}
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.RadialChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.RadialChart::ConvertNanData()" />*/
	convertNanData: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.RadialChart::ConvertNanData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RadialChart::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	initializeTransitionFromEmptySeriesList: function (fromSnapshot, toSnapshot) {
		$.ig.ChartBase.prototype.initializeTransitionFromEmptySeriesList.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		from._radiusAxisMin = to._radiusAxisMin;
		from._radiusAxisMax = to._radiusAxisMax;
		from._angleAxisMin = to._angleAxisMin;
		from._angleAxisMax = to._angleAxisMax;
	}
	/*<EndMethod Name="System.Void Infragistics.RadialChart::InitializeTransitionFromEmptySeriesList(Infragistics.SeriesSnapshotBase, Infragistics.SeriesSnapshotBase)" />*/
	,
	$type: new $.ig.Type('RadialChart', $.ig.ChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RadialChart" />*/

/*<BeginType Name="Infragistics.RectRotationBounds" />*/

$.ig.util.defType('RectRotationBounds', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_minX: 0,
	_minY: 0,
	_maxX: 0,
	_maxY: 0,
	_width: 0,
	_height: 0,
	$type: new $.ig.Type('RectRotationBounds', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RectRotationBounds" />*/

/*<BeginType Name="Infragistics.RPGaugeBase" />*/

$.ig.util.defType('RPGaugeBase', 'AnimatedSnapshotView', {
	init: function () {
		$.ig.AnimatedSnapshotView.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.RPGaugeBase::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.RPGaugeSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.RPGaugeBase::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPGaugeBase::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._value = value;
			return value;
		} else {
			return (this.__lastSnapshot)._value;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPGaugeBase::Value()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPGaugeBase::ValueColor()" />*/
	valueColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._valueColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPGaugeBase::ValueColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPGaugeBase::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._textColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._textColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPGaugeBase::TextColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPGaugeBase::FontName()" />*/
	fontName: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._fontName = value;
			return value;
		} else {
			return (this.__lastSnapshot)._fontName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPGaugeBase::FontName()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.RPGaugeBase::ValueFormatType()" />*/
	valueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.RPGaugeBase::ValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.RPGaugeBase::ValueFormatFractionDigits()" />*/
	valueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.RPGaugeBase::ValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.RPGaugeBase::ValueFormatNegativeMode()" />*/
	valueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.RPGaugeBase::ValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.RPGaugeBase::ValueFormatUseMKFormatting()" />*/
	valueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.RPGaugeBase::ValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.RPGaugeBase::ValueFormatShowGroupingSeparator()" />*/
	valueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormattingShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormattingShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.RPGaugeBase::ValueFormatShowGroupingSeparator()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPGaugeBase::ValueFormatCurrencySymbol()" />*/
	valueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPGaugeBase::ValueFormatCurrencySymbol()" />*/
	,
	$type: new $.ig.Type('RPGaugeBase', $.ig.AnimatedSnapshotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPGaugeBase" />*/

/*<BeginType Name="Infragistics.RPLabelGauge" />*/

$.ig.util.defType('RPLabelGauge', 'RPGaugeBase', {
	init: function () {
		$.ig.RPGaugeBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.RPLabelGauge::Setup()" />*/
	setup: function () {
		$.ig.RPGaugeBase.prototype.setup.call(this);
		this._canvas._layers.add(new $.ig.RPLabelGaugeLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.RPLabelGauge::Setup()" />*/
	,
	/*<BeginProperty Name="Infragistics.GaugeShape Infragistics.RPLabelGauge::Shape()" />*/
	shape: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._shape = value;
			return value;
		} else {
			return (this.__lastSnapshot)._shape;
		}
	}
	/*<EndProperty Name="Infragistics.GaugeShape Infragistics.RPLabelGauge::Shape()" />*/
	,
	$type: new $.ig.Type('RPLabelGauge', $.ig.RPGaugeBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPLabelGauge" />*/

/*<BeginType Name="Infragistics.RPGauge" />*/

$.ig.util.defType('RPGauge', 'RPGaugeBase', {
	init: function () {
		$.ig.RPGaugeBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.RPGauge::Setup()" />*/
	setup: function () {
		$.ig.RPGaugeBase.prototype.setup.call(this);
		this._canvas._layers.add(this.getLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.RPGauge::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.CalculatedLayer Infragistics.RPGauge::GetLayer()" />*/
	getLayer: function () {
		return new $.ig.RPGaugeLayer();
	}
	/*<EndMethod Name="Infragistics.CalculatedLayer Infragistics.RPGauge::GetLayer()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPGauge::Max()" />*/
	max: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._max = value;
			return value;
		} else {
			return (this.__lastSnapshot)._max;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPGauge::Max()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPGauge::Min()" />*/
	min: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._min = value;
			return value;
		} else {
			return (this.__lastSnapshot)._min;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPGauge::Min()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPGauge::NonValueColor()" />*/
	nonValueColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._nonValueColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._nonValueColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPGauge::NonValueColor()" />*/
	,
	$type: new $.ig.Type('RPGauge', $.ig.RPGaugeBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPGauge" />*/

/*<BeginType Name="Infragistics.RPBulletGauge" />*/

$.ig.util.defType('RPBulletGauge', 'RPGauge', {
	init: function () {
		$.ig.RPGauge.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.CalculatedLayer Infragistics.RPBulletGauge::GetLayer()" />*/
	getLayer: function () {
		return new $.ig.RPBulletGaugeLayer();
	}
	/*<EndMethod Name="Infragistics.CalculatedLayer Infragistics.RPBulletGauge::GetLayer()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.RPBulletGauge::GetValueX()" />*/
	getValueX: function () {
		return (this.__lastSnapshot).getValueX();
	}
	/*<EndMethod Name="System.Int32 Infragistics.RPBulletGauge::GetValueX()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPBulletGauge::TargetValue()" />*/
	targetValue: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._targetValue = value;
			return value;
		} else {
			return (this.__lastSnapshot)._targetValue;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPBulletGauge::TargetValue()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPBulletGauge::BandColor()" />*/
	bandColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._bandColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._bandColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPBulletGauge::BandColor()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.RPBulletGauge::BandWidth()" />*/
	bandWidth: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._bandWidth = value;
			return value;
		} else {
			return (this.__lastSnapshot)._bandWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.RPBulletGauge::BandWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPBulletGauge::FirstBandValue()" />*/
	firstBandValue: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._firstBandValue = value;
			return value;
		} else {
			return (this.__lastSnapshot)._firstBandValue;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPBulletGauge::FirstBandValue()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPBulletGauge::SecondBandValue()" />*/
	secondBandValue: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._secondBandValue = value;
			return value;
		} else {
			return (this.__lastSnapshot)._secondBandValue;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPBulletGauge::SecondBandValue()" />*/
	,
	$type: new $.ig.Type('RPBulletGauge', $.ig.RPGauge.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPBulletGauge" />*/

/*<BeginType Name="Infragistics.RPGaugeSnapshot" />*/

$.ig.util.defType('RPGaugeSnapshot', 'SnapshotBase', {
	_max: 0,
	_min: 0,
	_value: 0,
	_targetValue: 0,
	_firstBandValue: 0,
	_secondBandValue: 0,
	_valueColor: null,
	_nonValueColor: null,
	_textColor: null,
	_bandColor: null,
	_valueFormatType: 0,
	_valueFormatFractionDigits: 0,
	_bandWidth: 0,
	_valueFormatNegativeMode: 0,
	_valueFormatUseMKFormatting: false,
	_valueFormattingShowGroupingSeparator: false,
	_valueFormatCurrencySymbol: null,
	_shape: 0,
	init: function (setDefaults) {
		this._valueColor = new $.ig.Number();
		this._nonValueColor = new $.ig.Number();
		this._textColor = new $.ig.Number();
		this._bandColor = new $.ig.Number();
		$.ig.SnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._min = 0;
			this._max = 100;
			this._value = 0;
			this._fontSizePercent = 0;
			this._targetValue = 0;
			this._firstBandValue = 0;
			this._secondBandValue = 0;
			this._bandWidth = 2;
			this._valueColor = $.ig.ColorUtility.prototype.createColor1(255, 255, 0, 0);
			this._nonValueColor = $.ig.ColorUtility.prototype.createColor1(255, 65, 65, 65);
			this._textColor = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._bandColor = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._fontName = $.ig.ThemeManager.prototype.theme().drawingRegularFont();
			this._valueFormatFractionDigits = 2;
			this._valueFormatNegativeMode = $.ig.FormatSettingsNegativeNumberMode.prototype.parens;
			this._valueFormatUseMKFormatting = true;
			this._valueFormatType = $.ig.FormatSettingsNumberType.prototype.number;
			this._valueFormattingShowGroupingSeparator = true;
			this._valueFormatCurrencySymbol = "$";
			this._shape = $.ig.GaugeShape.prototype.none;
		}
	},
	/*<BeginMethod Name="System.Int32 Infragistics.RPGaugeSnapshot::GetValueX()" />*/
	getValueX: function () {
		var valueCalc = Math.min(this._value, this._max);
		valueCalc = Math.max(valueCalc, this._min);
		var valuePercentage = (valueCalc - this._min) / (this._max - this._min);
		return $.ig.truncate((this._canvasFrameWidth * valuePercentage));
	}
	/*<EndMethod Name="System.Int32 Infragistics.RPGaugeSnapshot::GetValueX()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.RPGaugeSnapshot::IsValid()" />*/
	isValid: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.RPGaugeSnapshot::IsValid()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeSnapshot::Invalidate()" />*/
	invalidate: function () {
		this.calculateSizeInfo();
		this.resolveRange();
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		this._canvasFrameHeight = this._height;
		this._canvasFrameWidth = this._width;
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeSnapshot::ResolveRange()" />*/
	resolveRange: function () {
		this._min = $.ig.util.isNaN(this._min) ? 0 : this._min;
		this._max = $.ig.util.isNaN(this._max) ? 100 : this._max;
		if (this._min == this._max) {
			if (this._min == 0) {
				this._min = 0;
				this._max = 100;
				return;
			}
			this._min = this._max > 0 ? 0 : this._min;
			this._max = this._min < 0 ? 0 : this._max;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeSnapshot::ResolveRange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SnapshotBase.prototype.copyTo.call(this, snapshot);
		var next = snapshot;
		next._min = this._min;
		next._max = this._max;
		next._value = this._value;
		next._targetValue = this._targetValue;
		next._valueColor = this._valueColor;
		next._firstBandValue = this._firstBandValue;
		next._secondBandValue = this._secondBandValue;
		next._nonValueColor = this._nonValueColor;
		next._textColor = this._textColor;
		next._bandColor = this._bandColor;
		next._bandWidth = this._bandWidth;
		next._fontName = this._fontName;
		next._valueFormatType = this._valueFormatType;
		next._valueFormatFractionDigits = this._valueFormatFractionDigits;
		next._valueFormatNegativeMode = this._valueFormatNegativeMode;
		next._valueFormatUseMKFormatting = this._valueFormatUseMKFormatting;
		next._valueFormatCurrencySymbol = this._valueFormatCurrencySymbol;
		next._valueFormattingShowGroupingSeparator = this._valueFormattingShowGroupingSeparator;
		next._shape = this._shape;
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPGaugeSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var next = newSnapshot;
		next._min = $.ig.CPMathUtility.prototype.transitionDouble(this._min, next._min, percent);
		next._max = $.ig.CPMathUtility.prototype.transitionDouble(this._max, next._max, percent);
		next._value = $.ig.CPMathUtility.prototype.transitionDouble(this._value, next._value, percent);
		next._targetValue = $.ig.CPMathUtility.prototype.transitionDouble(this._targetValue, next._targetValue, percent);
		next._firstBandValue = $.ig.CPMathUtility.prototype.transitionDouble(this._firstBandValue, next._firstBandValue, percent);
		next._secondBandValue = $.ig.CPMathUtility.prototype.transitionDouble(this._secondBandValue, next._secondBandValue, percent);
		next._valueColor = $.ig.ColorUtility.prototype.transitionColor(this._valueColor, next._valueColor, percent);
		next._nonValueColor = $.ig.ColorUtility.prototype.transitionColor(this._nonValueColor, next._nonValueColor, percent);
		next._textColor = $.ig.ColorUtility.prototype.transitionColor(this._textColor, next._textColor, percent);
		next._bandColor = $.ig.ColorUtility.prototype.transitionColor(this._bandColor, next._bandColor, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.RPGaugeSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	$type: new $.ig.Type('RPGaugeSnapshot', $.ig.SnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPGaugeSnapshot" />*/

/*<BeginType Name="Infragistics.RPIndicator" />*/

$.ig.util.defType('RPIndicator', 'AnimatedSnapshotView', {
	init: function () {
		$.ig.AnimatedSnapshotView.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.RPIndicator::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.RPIndicatorSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.RPIndicator::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicator::Setup()" />*/
	setup: function () {
		$.ig.AnimatedSnapshotView.prototype.setup.call(this);
		this._canvas._layers.add(new $.ig.RPIndicatorLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicator::Setup()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPIndicator::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._value = value;
			return value;
		} else {
			return (this.__lastSnapshot)._value;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPIndicator::Value()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPIndicator::PrevValue()" />*/
	prevValue: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._prevValue = value;
			return value;
		} else {
			return (this.__lastSnapshot)._prevValue;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPIndicator::PrevValue()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.RPIndicator::Variation()" />*/
	variation: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._variation = value;
			return value;
		} else {
			return (this.__lastSnapshot)._variation;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.RPIndicator::Variation()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::ValueColor()" />*/
	valueColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._valueColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::ValueColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::NoticeColor()" />*/
	noticeColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._noticeColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._noticeColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::NoticeColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._textColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._textColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::TextColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::FontName()" />*/
	fontName: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._fontName = value;
			return value;
		} else {
			return (this.__lastSnapshot)._fontName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::FontName()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.RPIndicator::ValueFormatType()" />*/
	valueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.RPIndicator::ValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.RPIndicator::ValueFormatFractionDigits()" />*/
	valueFormatFractionDigits: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatFractionDigits = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatFractionDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.RPIndicator::ValueFormatFractionDigits()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.RPIndicator::ValueFormatNegativeMode()" />*/
	valueFormatNegativeMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatNegativeMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatNegativeMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.RPIndicator::ValueFormatNegativeMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.RPIndicator::ValueFormatUseMKFormatting()" />*/
	valueFormatUseMKFormatting: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatUseMKFormatting = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatUseMKFormatting;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.RPIndicator::ValueFormatUseMKFormatting()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.RPIndicator::ValueFormatShowGroupingSeparator()" />*/
	valueFormatShowGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormattingShowGroupingSeparator = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormattingShowGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.RPIndicator::ValueFormatShowGroupingSeparator()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::ValueFormatCurrencySymbol()" />*/
	valueFormatCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._valueFormatCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._valueFormatCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::ValueFormatCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="Infragistics.GaugeShape Infragistics.RPIndicator::Shape()" />*/
	shape: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._shape = value;
			return value;
		} else {
			return (this.__lastSnapshot)._shape;
		}
	}
	/*<EndProperty Name="Infragistics.GaugeShape Infragistics.RPIndicator::Shape()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::NoticeTextFirstLine()" />*/
	noticeTextFirstLine: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._noticeTextFirstLine = value;
			return value;
		} else {
			return (this.__lastSnapshot)._noticeTextFirstLine;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::NoticeTextFirstLine()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::NoticeTextSecondLine()" />*/
	noticeTextSecondLine: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._noticeTextSecondLine = value;
			return value;
		} else {
			return (this.__lastSnapshot)._noticeTextSecondLine;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::NoticeTextSecondLine()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.RPIndicator::NoDataText()" />*/
	noDataText: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._noDataText = value;
			return value;
		} else {
			return (this.__lastSnapshot)._noDataText;
		}
	}
	/*<EndProperty Name="System.String Infragistics.RPIndicator::NoDataText()" />*/
	,
	/*<BeginProperty Name="Infragistics.IndicatorDifferenceMode Infragistics.RPIndicator::DifferenceMode()" />*/
	differenceMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._differenceMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._differenceMode;
		}
	}
	/*<EndProperty Name="Infragistics.IndicatorDifferenceMode Infragistics.RPIndicator::DifferenceMode()" />*/
	,
	$type: new $.ig.Type('RPIndicator', $.ig.AnimatedSnapshotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPIndicator" />*/

/*<BeginType Name="Infragistics.RPIndicatorSnapshot" />*/

$.ig.util.defType('RPIndicatorSnapshot', 'SnapshotBase', {
	_value: 0,
	_prevValue: 0,
	_variation: 0,
	_valueColor: null,
	_textColor: null,
	_noticeColor: null,
	_valueFormatType: 0,
	_valueFormatFractionDigits: 0,
	_valueFormatNegativeMode: 0,
	_valueFormatUseMKFormatting: false,
	_valueFormattingShowGroupingSeparator: false,
	_valueFormatCurrencySymbol: null,
	_shape: 0,
	_noticeTextFirstLine: null,
	_noticeTextSecondLine: null,
	_noDataText: null,
	_differenceMode: 0,
	init: function (setDefaults) {
		this._valueColor = new $.ig.Number();
		this._textColor = new $.ig.Number();
		this._noticeColor = new $.ig.Number();
		$.ig.SnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._value = 0;
			this._prevValue = 0;
			this._variation = 0;
			this._valueColor = $.ig.ColorUtility.prototype.createColor1(255, 255, 0, 0);
			this._noticeColor = $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 0);
			this._textColor = $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
			this._fontName = $.ig.ThemeManager.prototype.theme().drawingRegularFont();
			this._valueFormatFractionDigits = 2;
			this._valueFormatNegativeMode = $.ig.FormatSettingsNegativeNumberMode.prototype.parens;
			this._valueFormatUseMKFormatting = true;
			this._valueFormatType = $.ig.FormatSettingsNumberType.prototype.number;
			this._valueFormattingShowGroupingSeparator = true;
			this._valueFormatCurrencySymbol = "$";
			this._shape = $.ig.GaugeShape.prototype.none;
			this._differenceMode = $.ig.IndicatorDifferenceMode.prototype.percentage;
		}
	},
	/*<BeginMethod Name="System.Boolean Infragistics.RPIndicatorSnapshot::IsValid()" />*/
	isValid: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.RPIndicatorSnapshot::IsValid()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorSnapshot::Invalidate()" />*/
	invalidate: function () {
		this.calculateSizeInfo();
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		this._canvasFrameHeight = this._height;
		this._canvasFrameWidth = this._width;
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SnapshotBase.prototype.copyTo.call(this, snapshot);
		var next = snapshot;
		next._value = this._value;
		next._variation = this._variation;
		next._prevValue = this._prevValue;
		next._valueColor = this._valueColor;
		next._noticeColor = this._noticeColor;
		next._textColor = this._textColor;
		next._fontName = this._fontName;
		next._valueFormatType = this._valueFormatType;
		next._valueFormatFractionDigits = this._valueFormatFractionDigits;
		next._valueFormatNegativeMode = this._valueFormatNegativeMode;
		next._valueFormatUseMKFormatting = this._valueFormatUseMKFormatting;
		next._valueFormatCurrencySymbol = this._valueFormatCurrencySymbol;
		next._valueFormattingShowGroupingSeparator = this._valueFormattingShowGroupingSeparator;
		next._shape = this._shape;
		next._noticeTextFirstLine = this._noticeTextFirstLine;
		next._noticeTextSecondLine = this._noticeTextSecondLine;
		next._noDataText = this._noDataText;
		next._differenceMode = this._differenceMode;
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.RPIndicatorSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var next = newSnapshot;
		next._value = $.ig.CPMathUtility.prototype.transitionDouble(this._value, next._value, percent);
		next._prevValue = $.ig.CPMathUtility.prototype.transitionDouble(this._prevValue, next._prevValue, percent);
		var fromVariation = $.ig.util.isNaN(this._variation) ? 0 : this._variation;
		next._variation = $.ig.CPMathUtility.prototype.transitionDouble(fromVariation, next._variation, percent);
		next._valueColor = $.ig.ColorUtility.prototype.transitionColor(this._valueColor, next._valueColor, percent);
		next._noticeColor = $.ig.ColorUtility.prototype.transitionColor(this._noticeColor, next._noticeColor, percent);
		next._textColor = $.ig.ColorUtility.prototype.transitionColor(this._textColor, next._textColor, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.RPIndicatorSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	$type: new $.ig.Type('RPIndicatorSnapshot', $.ig.SnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.RPIndicatorSnapshot" />*/

/*<BeginType Name="Infragistics.ScatterChart" />*/

$.ig.util.defType('ScatterChart', 'CartesianChartBase', {
	init: function () {
		$.ig.CartesianChartBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.ScatterChart::UseRadiusScale()" />*/
	useRadiusScale: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._useRadiusScale = value;
			return value;
		} else {
			return (this.__lastSnapshot)._useRadiusScale;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScatterChart::UseRadiusScale()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ScatterChart::MinBubbleRadius()" />*/
	minBubbleRadius: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._minBubbleRadius = value;
			return value;
		} else {
			return (this.__lastSnapshot)._minBubbleRadius;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ScatterChart::MinBubbleRadius()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ScatterChart::MaxBubbleRadius()" />*/
	maxBubbleRadius: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._maxBubbleRadius = value;
			return value;
		} else {
			return (this.__lastSnapshot)._maxBubbleRadius;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ScatterChart::MaxBubbleRadius()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ScatterChart::XAxisIsLogarithmic()" />*/
	xAxisIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._xAxisBottomIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScatterChart::XAxisIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ScatterChart::XAxisLogBase()" />*/
	xAxisLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._xAxisBottomLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._xAxisBottomLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ScatterChart::XAxisLogBase()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ScatterChart::YAxisIsLogarithmic()" />*/
	yAxisIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._yAxisLeftIsLogarithmic = value;
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftIsLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScatterChart::YAxisIsLogarithmic()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.ScatterChart::YAxisLogBase()" />*/
	yAxisLogBase: function (value) {
		if (arguments.length === 1) {
			if (value > 1) {
				(this.__lastSnapshot)._yAxisLeftLogBase = value;
			}
			return value;
		} else {
			return (this.__lastSnapshot)._yAxisLeftLogBase;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.ScatterChart::YAxisLogBase()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScatterChart::XAxisMax()" />*/
	xAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userBottomMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userBottomMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScatterChart::XAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScatterChart::XAxisMin()" />*/
	xAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userBottomMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userBottomMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScatterChart::XAxisMin()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScatterChart::YAxisMax()" />*/
	yAxisMax: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userLeftMax = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userLeftMax;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScatterChart::YAxisMax()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScatterChart::YAxisMin()" />*/
	yAxisMin: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._userLeftMin = value;
			return value;
		} else {
			return (this.__lastSnapshot)._userLeftMin;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScatterChart::YAxisMin()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNumberType Infragistics.ScatterChart::RadiusValueFormatType()" />*/
	radiusValueFormatType: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._radiusValueFormatType = value;
			return value;
		} else {
			return (this.__lastSnapshot)._radiusValueFormatType;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNumberType Infragistics.ScatterChart::RadiusValueFormatType()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ScatterChart::RadiusValueCurrencySymbol()" />*/
	radiusValueCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._radiusValueCurrencySymbol = value;
			return value;
		} else {
			return (this.__lastSnapshot)._radiusValueCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ScatterChart::RadiusValueCurrencySymbol()" />*/
	,
	/*<BeginProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.ScatterChart::RadiusValueNegativeNumberMode()" />*/
	radiusValueNegativeNumberMode: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._radiusValueNegativeNumberMode = value;
			return value;
		} else {
			return (this.__lastSnapshot)._radiusValueNegativeNumberMode;
		}
	}
	/*<EndProperty Name="Infragistics.FormatSettingsNegativeNumberMode Infragistics.ScatterChart::RadiusValueNegativeNumberMode()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ScatterChart::LegendItemsTitle()" />*/
	legendItemsTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendItemsTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendItemsTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ScatterChart::LegendItemsTitle()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ScatterChart::LegendSizeScaleTitle()" />*/
	legendSizeScaleTitle: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._legendSizeScaleTitle = value;
			return value;
		} else {
			return (this.__lastSnapshot)._legendSizeScaleTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ScatterChart::LegendSizeScaleTitle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::Setup()" />*/
	setup: function () {
		$.ig.CartesianChartBase.prototype.setup.call(this);
		var snapshot = this.__lastSnapshot;
		snapshot._mode = $.ig.ChartAxisMode.prototype.numericYNumericX;
		this.setZoomType($.ig.ZoomType.prototype.both);
		this._canvas._layers.add(new $.ig.YMajorAxisLinesLayer());
		this._canvas._layers.add(new $.ig.XMajorAxisLinesLayer());
		this._canvas._layers.add(new $.ig.AxisLineLayer());
		this._canvas._layers.add(new $.ig.NumericXAxisLayer($.ig.XAxisLocation.prototype.top));
		this._canvas._layers.add(new $.ig.NumericXAxisLayer($.ig.XAxisLocation.prototype.bottom));
		this._canvas._layers.add(new $.ig.NumericYAxisLayer($.ig.YAxisLocation.prototype.left));
		this._canvas._layers.add(new $.ig.NumericYAxisLayer($.ig.YAxisLocation.prototype.right));
		this._canvas._layers.add(new $.ig.ScatterChartLayer());
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.top));
		this._canvas._layers.add(new $.ig.XAxisTitleLayer($.ig.XAxisLocation.prototype.bottom));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.left));
		this._canvas._layers.add(new $.ig.YAxisTitleLayer($.ig.YAxisLocation.prototype.right));
		this._canvas._layers.add(new $.ig.ScatterLegendLayer());
		this._canvas._layers.add(new $.ig.CrosshairsAdornment());
		this._canvas._layers.add(new $.ig.AxisAnnotationsLayer());
		this.setScrollViewMaximum(25);
		this.setAlwaysBounceVertical(false);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.ScatterChart::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.ScatterSeriesSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.ScatterChart::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.Boolean, System.String, System.String)" />*/
	addSeries: function (data, xValueProperty, yValueProperty, connectWithLines, color, key) {
		var type = connectWithLines ? $.ig.ScatterDataItemType.prototype.scatterLine : $.ig.ScatterDataItemType.prototype.scatter;
		this.addSeriesWithTypeAndTitle(data, xValueProperty, yValueProperty, null, null, type, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.Boolean, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.Boolean, System.String, System.String, System.String)" />*/
	addSeriesWithTitle: function (data, xValueProperty, yValueProperty, connectWithLines, color, title, key) {
		var type = connectWithLines ? $.ig.ScatterDataItemType.prototype.scatterLine : $.ig.ScatterDataItemType.prototype.scatter;
		this.addSeriesWithTypeAndTitle(data, xValueProperty, yValueProperty, null, null, type, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.Boolean, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String)" />*/
	addBubbleSeries: function (data, xValueProperty, yValueProperty, radiusValueProperty, color, key) {
		this.addSeriesWithTypeAndTitle(data, xValueProperty, yValueProperty, radiusValueProperty, null, $.ig.ScatterDataItemType.prototype.bubble, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String)" />*/
	addBubbleSeriesWithTitle: function (data, xValueProperty, yValueProperty, radiusValueProperty, color, title, key) {
		this.addSeriesWithTypeAndTitle(data, xValueProperty, yValueProperty, radiusValueProperty, null, $.ig.ScatterDataItemType.prototype.bubble, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String)" />*/
	addSeriesWithType: function (data, xValueProperty, yValueProperty, radiusValueProperty, labelProperty, type, color, xLocation, yLocation, key) {
		this.addSeriesWithTypeAndTitle(data, xValueProperty, yValueProperty, radiusValueProperty, labelProperty, type, color, xLocation, yLocation, null, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addSeriesWithTypeAndTitle: function (data, xValueProperty, yValueProperty, radiusValueProperty, labelProperty, type, color, xLocation, yLocation, title, key) {
		var propCount = radiusValueProperty == null ? 2 : 3;
		var numberProperties = new $.ig.Array();
		numberProperties.add(xValueProperty);
		numberProperties.add(yValueProperty);
		if (propCount == 3) {
			numberProperties.add(radiusValueProperty);
		}
		var combinedType = $.ig.ChartsUtility.prototype.convertScatterType(type);
		var negativeColor = $.ig.ColorUtility.prototype.convertToNative(0);
		var series = this.addSeriesHelper(data, numberProperties, labelProperty, null, combinedType, color, negativeColor, title, key);
		series._yLocation = yLocation;
		series._xLocation = xLocation;
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(Infragistics.CPReadOnlyList, System.String, System.String, System.String, System.String, Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , System.Boolean, System.String, System.String, System.String)" />*/
	addSeries3: function (xValues, yValues, connectWithLines, color, title, key) {
		var radiusValues = new Array(0);
		var labels = new Array(0);
		var type = connectWithLines ? $.ig.ScatterDataItemType.prototype.scatterLine : $.ig.ScatterDataItemType.prototype.scatter;
		this.addSeries1(xValues, yValues, radiusValues, labels, type, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , System.Boolean, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , System.String, System.String, System.String)" />*/
	addSeries2: function (xValues, yValues, radiusValues, color, title, key) {
		var labels = new Array(0);
		this.addSeries1(xValues, yValues, radiusValues, labels, $.ig.ScatterDataItemType.prototype.bubble, color, $.ig.XAxisLocation.prototype.bottom, $.ig.YAxisLocation.prototype.left, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	addSeries1: function (xValues, yValues, radiusValues, labels, type, color, xLocation, yLocation, title, key) {
		this.addSeries_1(xValues, yValues, radiusValues, labels, type, color, xLocation, yLocation, false, title, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.Boolean, System.String, System.String)" />*/
	addSeries_1: function (xValues, yValues, radiusValues, labels, type, color, xLocation, yLocation, hideMarkers, title, key) {
		var propCount = radiusValues.length == 0 ? 2 : 3;
		var numberProperties = new $.ig.Array();
		numberProperties.add("X");
		numberProperties.add("Y");
		if (propCount == 3) {
			numberProperties.add("Radius");
		}
		var combinedType = $.ig.ChartsUtility.prototype.convertScatterType(type);
		var negativeColor = $.ig.ColorUtility.prototype.convertToNative(0);
		var series = this.addSeriesHelper1($.ig.DataInfo.prototype.createDataInfo4(xValues, yValues, radiusValues, labels, this.__lastSnapshot._treatNullValuesAsZeroes), numberProperties, combinedType, color, negativeColor, title, key);
		series._yLocation = yLocation;
		series._xLocation = xLocation;
		series._hideMarkers = hideMarkers;
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::AddSeries(, , , , Infragistics.ScatterDataItemType, System.String, Infragistics.XAxisLocation, Infragistics.YAxisLocation, System.Boolean, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ScatterChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var items = new $.ig.Array();
		var item = this.findClosestItem(x, y, $.ig.ScatterChart.prototype.hIT_TEST_MIN_RADIUS);
		if (item != null) {
			items.add(item);
		}
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ScatterChart::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="Infragistics.TooltipItem Infragistics.ScatterChart::FindClosestItem(System.Single, System.Single, System.Single)" />*/
	findClosestItem: function (x, y, minRadius) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		var seriesCount = snapshot._seriesList.length;
		var distanceOfClosestPoint = Number.POSITIVE_INFINITY;
		var withinRadius = false;
		var item = null;
		for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
			var series = snapshot._seriesList[seriesIndex];
			var minX, maxX, minY, maxY;
			if (series._xLocation == $.ig.XAxisLocation.prototype.bottom) {
				minX = snapshot._minBottom;
				maxX = snapshot._maxBottom;
			} else {
				minX = snapshot._minTop;
				maxX = snapshot._maxTop;
			}
			if (series._yLocation == $.ig.YAxisLocation.prototype.left) {
				minY = snapshot._minLeft;
				maxY = snapshot._maxLeft;
			} else {
				minY = snapshot._minRight;
				maxY = snapshot._maxRight;
			}
			var xValues = series._data[0];
			var yValues = series._data[1];
			var rValues = series._type == $.ig.CombinedDataItemType.prototype.bubble ? series._data[2] : null;
			for (var dataPointIndex = 0; dataPointIndex < xValues.length; dataPointIndex++) {
				var xPos = snapshot.calculateHorizontalValuePosition(xValues[dataPointIndex], series._xLocation);
				var yPos = snapshot.calculateVerticalValuePosition(yValues[dataPointIndex], series._yLocation);
				var r = 0;
				var rValue = NaN;
				if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
					r = rValue = rValues[dataPointIndex];
					if (snapshot._useRadiusScale) {
						r = $.ig.CPMathUtility.prototype.getLinearSize(snapshot._minRadiusValue, snapshot._maxRadiusValue, snapshot._minBubbleRadius, snapshot._maxBubbleRadius, r);
					}
				} else {
					r = snapshot._markerRadius;
				}
				var distance = (x - xPos) * (x - xPos) + (y - yPos) * (y - yPos);
				var expandedHitZoneRadius = Math.max(r, minRadius);
				if (distance <= expandedHitZoneRadius * expandedHitZoneRadius) {
					var isTapPointOnMarker = distance <= (r * r);
					if (withinRadius && !isTapPointOnMarker) {
						continue;
					}
					if ((!withinRadius && isTapPointOnMarker) || (distance < distanceOfClosestPoint) || (distance == distanceOfClosestPoint && (item == null || r < item._radius))) {
						item = new $.ig.TooltipItem();
						item._index = dataPointIndex;
						item._x = xValues[dataPointIndex];
						item._y = yValues[dataPointIndex];
						item._radius = rValue;
						item._color = series._colors[0];
						item._point = new $.ig.CPPoint(xPos, yPos);
						item._bounds = new $.ig.CPRect(1, (xPos - r), (yPos - r), r * 2, r * 2);
						item._seriesKey = series._key;
						item._propertyNames = $.ig.ArrayUtility.prototype.copyCPList(series._propertyNames);
						item._seriesType = series._type;
						item._seriesIndex = seriesIndex;
						withinRadius = isTapPointOnMarker;
						distanceOfClosestPoint = distance;
					}
				}
			}
		}
		return item;
	}
	/*<EndMethod Name="Infragistics.TooltipItem Infragistics.ScatterChart::FindClosestItem(System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.CartesianChartBase.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		if (from._seriesList.length == 0 && to._seriesList.length > 0) {
			for (var i = 0; i < from._seriesList.length; i++) {
				var fromSeries = from._seriesList[i];
				var toSeries = to._seriesList[i];
				if (fromSeries._type == $.ig.CombinedDataItemType.prototype.bubble) {
					toSeries.copyTo(fromSeries);
					var radiusData = fromSeries._data[2];
					radiusData = $.ig.ArrayUtility.prototype.createZeroedDoubleArray(radiusData.length);
					fromSeries._data[2] = radiusData;
				}
				if (fromSeries._type == $.ig.CombinedDataItemType.prototype.scatter || fromSeries._type == $.ig.CombinedDataItemType.prototype.scatterLine || fromSeries._type == $.ig.CombinedDataItemType.prototype.scatterOutlier) {
					toSeries.copyTo(fromSeries);
					var yData = fromSeries._data[1];
					yData = $.ig.ArrayUtility.prototype.createZeroedDoubleArray(yData.length);
					fromSeries._data[1] = yData;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterChart::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	$type: new $.ig.Type('ScatterChart', $.ig.CartesianChartBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScatterChart" />*/

/*<BeginType Name="Infragistics.SeriesSnapshot" />*/

$.ig.util.defType('SeriesSnapshot', 'SeriesSnapshotBase', {
	_xAxisTopLabelsHidden: false,
	_xAxisBottomLabelsHidden: false,
	_yAxisLeftLabelsHidden: false,
	_yAxisRightLabelsHidden: false,
	_resolvedXAxisTopLabelsHidden: false,
	_resolvedXAxisBottomLabelsHidden: false,
	_resolvedYAxisLeftLabelsHidden: false,
	_resolvedYAxisRightLabelsHidden: false,
	_yAxisLeftIsLogarithmic: false,
	_yAxisRightIsLogarithmic: false,
	_xAxisTopIsLogarithmic: false,
	_xAxisBottomIsLogarithmic: false,
	_yAxisLeftLogBase: 0,
	_yAxisRightLogBase: 0,
	_xAxisTopLogBase: 0,
	_xAxisBottomLogBase: 0,
	_resolvedYAxisLeftIsLogarithmic: false,
	_resolvedYAxisRightIsLogarithmic: false,
	_resolvedXAxisTopIsLogarithmic: false,
	_resolvedXAxisBottomIsLogarithmic: false,
	_outerPadding: 0,
	_minValueBottomAxisTextWidth: 0,
	_minValueTopAxisTextWidth: 0,
	_maxValueLeftAxisTextWidth: 0,
	_maxValueRightAxisTextWidth: 0,
	_maxValueTopAxisTextWidth: 0,
	_maxValueBottomAxisTextWidth: 0,
	_xAxisTopFrameX: 0,
	_xAxisTopFrameY: 0,
	_xAxisTopFrameWidth: 0,
	_xAxisTopFrameHeight: 0,
	_xAxisBottomFrameX: 0,
	_xAxisBottomFrameY: 0,
	_xAxisBottomFrameWidth: 0,
	_xAxisBottomFrameHeight: 0,
	_yAxisLeftFrameX: 0,
	_yAxisLeftFrameY: 0,
	_yAxisLeftFrameWidth: 0,
	_yAxisLeftFrameHeight: 0,
	_yAxisRightFrameX: 0,
	_yAxisRightFrameY: 0,
	_yAxisRightFrameWidth: 0,
	_yAxisRightFrameHeight: 0,
	_axisLinesFrameX: 0,
	_axisLinesFrameY: 0,
	_axisLinesFrameWidth: 0,
	_axisLinesFrameHeight: 0,
	_xTitleTopFrameX: 0,
	_xTitleTopFrameY: 0,
	_xTitleTopFrameWidth: 0,
	_xTitleTopFrameHeight: 0,
	_xTitleBottomFrameX: 0,
	_xTitleBottomFrameY: 0,
	_xTitleBottomFrameWidth: 0,
	_xTitleBottomFrameHeight: 0,
	_yTitleLeftFrameX: 0,
	_yTitleLeftFrameY: 0,
	_yTitleLeftFrameWidth: 0,
	_yTitleLeftFrameHeight: 0,
	_yTitleRightFrameX: 0,
	_yTitleRightFrameY: 0,
	_yTitleRightFrameWidth: 0,
	_yTitleRightFrameHeight: 0,
	_labelAngle: 0,
	_rotatedLabelWidth: 0,
	_availableSize: 0,
	_xAxisTopHeight: 0,
	_xAxisBottomHeight: 0,
	_yAxisLeftWidth: 0,
	_yAxisRightWidth: 0,
	_xAxisTopTitleHeight: 0,
	_xAxisBottomTitleHeight: 0,
	_yAxisLeftTitleWidth: 0,
	_yAxisRightTitleWidth: 0,
	_minLeft: 0,
	_maxLeft: 0,
	_minRight: 0,
	_maxRight: 0,
	_minBottom: 0,
	_maxBottom: 0,
	_minTop: 0,
	_maxTop: 0,
	_userLeftMin: 0,
	_userLeftMax: 0,
	_userRightMin: 0,
	_userRightMax: 0,
	_userTopMin: 0,
	_userTopMax: 0,
	_userBottomMin: 0,
	_userBottomMax: 0,
	_visibleLeftMin: 0,
	_visibleLeftMax: 0,
	_visibleRightMin: 0,
	_visibleRightMax: 0,
	_visibleTopMin: 0,
	_visibleTopMax: 0,
	_visibleBottomMin: 0,
	_visibleBottomMax: 0,
	_numberOfMaxHorizontalNumericLabels: 0,
	_numberOfMaxVerticalNumericLabels: 0,
	_numericLeftAxisStepSize: 0,
	_numericRightAxisStepSize: 0,
	_numericTopAxisStepSize: 0,
	_numericBottomAxisStepSize: 0,
	_xAxisTopTitle: null,
	_xAxisBottomTitle: null,
	_yAxisLeftTitle: null,
	_yAxisRightTitle: null,
	_hasLeftAxis: false,
	_hasRightAxis: false,
	_hasTopAxis: false,
	_hasBottomAxis: false,
	_categoryAxisLocation: 0,
	_minLeftFixed: false,
	_maxLeftFixed: false,
	_minRightFixed: false,
	_maxRightFixed: false,
	_minTopFixed: false,
	_maxTopFixed: false,
	_minBottomFixed: false,
	_maxBottomFixed: false,
	_alignNumericAxesByZero: false,
	_minLabelWidth: 0,
	_yAxisLabelHorizontalAlignment: 0,
	init: function (setDefaults) {
		$.ig.SeriesSnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._outerPadding = 4 * this._density;
			this._yAxisLeftLogBase = 10;
			this._yAxisRightLogBase = 10;
			this._xAxisTopLogBase = 10;
			this._xAxisBottomLogBase = 10;
			this._userBottomMax = NaN;
			this._userBottomMin = NaN;
			this._userLeftMax = NaN;
			this._userLeftMin = NaN;
			this._userRightMax = NaN;
			this._userRightMin = NaN;
			this._userTopMax = NaN;
			this._userTopMin = NaN;
			this._alignNumericAxesByZero = true;
			this._yAxisLabelHorizontalAlignment = $.ig.TextHorizontalAlignment.prototype.right;
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SeriesSnapshotBase.prototype.copyTo.call(this, snapshot);
		var seriesSnapshot = snapshot;
		seriesSnapshot._xAxisTopLabelsHidden = this._xAxisTopLabelsHidden;
		seriesSnapshot._xAxisBottomLabelsHidden = this._xAxisBottomLabelsHidden;
		seriesSnapshot._yAxisLeftLabelsHidden = this._yAxisLeftLabelsHidden;
		seriesSnapshot._yAxisRightLabelsHidden = this._yAxisRightLabelsHidden;
		seriesSnapshot._resolvedXAxisBottomLabelsHidden = this._resolvedXAxisBottomLabelsHidden;
		seriesSnapshot._resolvedXAxisTopLabelsHidden = this._resolvedXAxisTopLabelsHidden;
		seriesSnapshot._resolvedYAxisLeftLabelsHidden = this._resolvedYAxisLeftLabelsHidden;
		seriesSnapshot._resolvedYAxisRightLabelsHidden = this._resolvedYAxisRightLabelsHidden;
		seriesSnapshot._xAxisTopIsLogarithmic = this._xAxisTopIsLogarithmic;
		seriesSnapshot._xAxisBottomIsLogarithmic = this._xAxisBottomIsLogarithmic;
		seriesSnapshot._yAxisLeftIsLogarithmic = this._yAxisLeftIsLogarithmic;
		seriesSnapshot._yAxisRightIsLogarithmic = this._yAxisRightIsLogarithmic;
		seriesSnapshot._xAxisTopLogBase = this._xAxisTopLogBase;
		seriesSnapshot._xAxisBottomLogBase = this._xAxisBottomLogBase;
		seriesSnapshot._yAxisLeftLogBase = this._yAxisLeftLogBase;
		seriesSnapshot._yAxisRightLogBase = this._yAxisRightLogBase;
		seriesSnapshot._resolvedXAxisTopIsLogarithmic = this._resolvedXAxisTopIsLogarithmic;
		seriesSnapshot._resolvedXAxisBottomIsLogarithmic = this._resolvedXAxisBottomIsLogarithmic;
		seriesSnapshot._resolvedYAxisLeftIsLogarithmic = this._resolvedYAxisLeftIsLogarithmic;
		seriesSnapshot._resolvedYAxisRightIsLogarithmic = this._resolvedYAxisRightIsLogarithmic;
		seriesSnapshot._xAxisTopTitle = this._xAxisTopTitle;
		seriesSnapshot._xAxisBottomTitle = this._xAxisBottomTitle;
		seriesSnapshot._yAxisLeftTitle = this._yAxisLeftTitle;
		seriesSnapshot._yAxisRightTitle = this._yAxisRightTitle;
		seriesSnapshot._hasTopAxis = this._hasTopAxis;
		seriesSnapshot._hasBottomAxis = this._hasBottomAxis;
		seriesSnapshot._hasLeftAxis = this._hasLeftAxis;
		seriesSnapshot._hasRightAxis = this._hasRightAxis;
		seriesSnapshot._outerPadding = this._outerPadding;
		seriesSnapshot._categoryAxisLocation = this._categoryAxisLocation;
		seriesSnapshot._minValueBottomAxisTextWidth = this._minValueBottomAxisTextWidth;
		seriesSnapshot._minValueTopAxisTextWidth = this._minValueTopAxisTextWidth;
		seriesSnapshot._maxValueLeftAxisTextWidth = this._maxValueLeftAxisTextWidth;
		seriesSnapshot._maxValueRightAxisTextWidth = this._maxValueRightAxisTextWidth;
		seriesSnapshot._maxValueTopAxisTextWidth = this._maxValueTopAxisTextWidth;
		seriesSnapshot._maxValueBottomAxisTextWidth = this._maxValueBottomAxisTextWidth;
		seriesSnapshot._xAxisTopFrameX = this._xAxisTopFrameX;
		seriesSnapshot._xAxisTopFrameY = this._xAxisTopFrameY;
		seriesSnapshot._xAxisTopFrameWidth = this._xAxisTopFrameWidth;
		seriesSnapshot._xAxisTopFrameHeight = this._xAxisTopFrameHeight;
		seriesSnapshot._xAxisBottomFrameX = this._xAxisBottomFrameX;
		seriesSnapshot._xAxisBottomFrameY = this._xAxisBottomFrameY;
		seriesSnapshot._xAxisBottomFrameWidth = this._xAxisBottomFrameWidth;
		seriesSnapshot._xAxisBottomFrameHeight = this._xAxisBottomFrameHeight;
		seriesSnapshot._yAxisLeftFrameX = this._yAxisLeftFrameX;
		seriesSnapshot._yAxisLeftFrameY = this._yAxisLeftFrameY;
		seriesSnapshot._yAxisLeftFrameWidth = this._yAxisLeftFrameWidth;
		seriesSnapshot._yAxisLeftFrameHeight = this._yAxisLeftFrameHeight;
		seriesSnapshot._yAxisRightFrameX = this._yAxisRightFrameX;
		seriesSnapshot._yAxisRightFrameY = this._yAxisRightFrameY;
		seriesSnapshot._yAxisRightFrameWidth = this._yAxisRightFrameWidth;
		seriesSnapshot._yAxisRightFrameHeight = this._yAxisRightFrameHeight;
		seriesSnapshot._axisLinesFrameX = this._axisLinesFrameX;
		seriesSnapshot._axisLinesFrameY = this._axisLinesFrameY;
		seriesSnapshot._axisLinesFrameWidth = this._axisLinesFrameWidth;
		seriesSnapshot._axisLinesFrameHeight = this._axisLinesFrameHeight;
		seriesSnapshot._xTitleTopFrameX = this._xTitleTopFrameX;
		seriesSnapshot._xTitleTopFrameY = this._xTitleTopFrameY;
		seriesSnapshot._xTitleTopFrameWidth = this._xTitleTopFrameWidth;
		seriesSnapshot._xTitleTopFrameHeight = this._xTitleTopFrameHeight;
		seriesSnapshot._xTitleBottomFrameX = this._xTitleBottomFrameX;
		seriesSnapshot._xTitleBottomFrameY = this._xTitleBottomFrameY;
		seriesSnapshot._xTitleBottomFrameWidth = this._xTitleBottomFrameWidth;
		seriesSnapshot._xTitleBottomFrameHeight = this._xTitleBottomFrameHeight;
		seriesSnapshot._yTitleLeftFrameX = this._yTitleLeftFrameX;
		seriesSnapshot._yTitleLeftFrameY = this._yTitleLeftFrameY;
		seriesSnapshot._yTitleLeftFrameWidth = this._yTitleLeftFrameWidth;
		seriesSnapshot._yTitleLeftFrameHeight = this._yTitleLeftFrameHeight;
		seriesSnapshot._yTitleRightFrameX = this._yTitleRightFrameX;
		seriesSnapshot._yTitleRightFrameY = this._yTitleRightFrameY;
		seriesSnapshot._yTitleRightFrameWidth = this._yTitleRightFrameWidth;
		seriesSnapshot._yTitleRightFrameHeight = this._yTitleRightFrameHeight;
		seriesSnapshot._labelAngle = this._labelAngle;
		seriesSnapshot._rotatedLabelWidth = this._rotatedLabelWidth;
		seriesSnapshot._availableSize = this._availableSize;
		seriesSnapshot._yAxisLeftWidth = this._yAxisLeftWidth;
		seriesSnapshot._yAxisRightWidth = this._yAxisRightWidth;
		seriesSnapshot._xAxisTopTitleHeight = this._xAxisTopTitleHeight;
		seriesSnapshot._xAxisBottomTitleHeight = this._xAxisBottomTitleHeight;
		seriesSnapshot._yAxisLeftTitleWidth = this._yAxisLeftTitleWidth;
		seriesSnapshot._yAxisRightTitleWidth = this._yAxisRightTitleWidth;
		seriesSnapshot._yAxisLabelHorizontalAlignment = this._yAxisLabelHorizontalAlignment;
		seriesSnapshot._minLeft = this._minLeft;
		seriesSnapshot._maxLeft = this._maxLeft;
		seriesSnapshot._minRight = this._minRight;
		seriesSnapshot._maxRight = this._maxRight;
		seriesSnapshot._minTop = this._minTop;
		seriesSnapshot._maxTop = this._maxTop;
		seriesSnapshot._minBottom = this._minBottom;
		seriesSnapshot._maxBottom = this._maxBottom;
		seriesSnapshot._userLeftMin = this._userLeftMin;
		seriesSnapshot._userLeftMax = this._userLeftMax;
		seriesSnapshot._userRightMin = this._userRightMin;
		seriesSnapshot._userRightMax = this._userRightMax;
		seriesSnapshot._userTopMin = this._userTopMin;
		seriesSnapshot._userTopMax = this._userTopMax;
		seriesSnapshot._userBottomMin = this._userBottomMin;
		seriesSnapshot._userBottomMax = this._userBottomMax;
		seriesSnapshot._visibleLeftMin = this._visibleLeftMin;
		seriesSnapshot._visibleLeftMax = this._visibleLeftMax;
		seriesSnapshot._visibleRightMin = this._visibleRightMin;
		seriesSnapshot._visibleRightMax = this._visibleRightMax;
		seriesSnapshot._visibleTopMin = this._visibleTopMin;
		seriesSnapshot._visibleTopMax = this._visibleTopMax;
		seriesSnapshot._visibleBottomMin = this._visibleBottomMin;
		seriesSnapshot._visibleBottomMax = this._visibleBottomMax;
		seriesSnapshot._numberOfMaxHorizontalNumericLabels = this._numberOfMaxHorizontalNumericLabels;
		seriesSnapshot._numberOfMaxVerticalNumericLabels = this._numberOfMaxVerticalNumericLabels;
		seriesSnapshot._numericTopAxisStepSize = this._numericTopAxisStepSize;
		seriesSnapshot._numericBottomAxisStepSize = this._numericBottomAxisStepSize;
		seriesSnapshot._numericLeftAxisStepSize = this._numericLeftAxisStepSize;
		seriesSnapshot._numericRightAxisStepSize = this._numericRightAxisStepSize;
		seriesSnapshot._alignNumericAxesByZero = this._alignNumericAxesByZero;
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SeriesSnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var snapshot = newSnapshot;
		snapshot._maxLeft = $.ig.CPMathUtility.prototype.transitionDouble(this._maxLeft, snapshot._maxLeft, percent);
		snapshot._minLeft = $.ig.CPMathUtility.prototype.transitionDouble(this._minLeft, snapshot._minLeft, percent);
		snapshot._maxRight = $.ig.CPMathUtility.prototype.transitionDouble(this._maxRight, snapshot._maxRight, percent);
		snapshot._minRight = $.ig.CPMathUtility.prototype.transitionDouble(this._minRight, snapshot._minRight, percent);
		snapshot._maxTop = $.ig.CPMathUtility.prototype.transitionDouble(this._maxTop, snapshot._maxTop, percent);
		snapshot._minTop = $.ig.CPMathUtility.prototype.transitionDouble(this._minTop, snapshot._minTop, percent);
		snapshot._maxBottom = $.ig.CPMathUtility.prototype.transitionDouble(this._maxBottom, snapshot._maxBottom, percent);
		snapshot._minBottom = $.ig.CPMathUtility.prototype.transitionDouble(this._minBottom, snapshot._minBottom, percent);
		snapshot._userLeftMin = $.ig.CPMathUtility.prototype.transitionDouble(this._userLeftMin, snapshot._userLeftMin, percent);
		snapshot._userLeftMax = $.ig.CPMathUtility.prototype.transitionDouble(this._userLeftMax, snapshot._userLeftMax, percent);
		snapshot._userRightMin = $.ig.CPMathUtility.prototype.transitionDouble(this._userRightMin, snapshot._userRightMin, percent);
		snapshot._userRightMax = $.ig.CPMathUtility.prototype.transitionDouble(this._userRightMax, snapshot._userRightMax, percent);
		snapshot._userTopMin = $.ig.CPMathUtility.prototype.transitionDouble(this._userTopMin, snapshot._userTopMin, percent);
		snapshot._userTopMax = $.ig.CPMathUtility.prototype.transitionDouble(this._userTopMax, snapshot._userTopMax, percent);
		snapshot._userBottomMin = $.ig.CPMathUtility.prototype.transitionDouble(this._userBottomMin, snapshot._userBottomMin, percent);
		snapshot._userBottomMax = $.ig.CPMathUtility.prototype.transitionDouble(this._userBottomMax, snapshot._userBottomMax, percent);
		snapshot._outerPadding = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._outerPadding, snapshot._outerPadding, percent);
		snapshot._yAxisLeftLogBase = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yAxisLeftLogBase, snapshot._yAxisLeftLogBase, percent);
		snapshot._yAxisRightLogBase = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yAxisRightLogBase, snapshot._yAxisRightLogBase, percent);
		snapshot._xAxisTopLogBase = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._xAxisTopLogBase, snapshot._xAxisTopLogBase, percent);
		snapshot._xAxisBottomLogBase = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._xAxisBottomLogBase, snapshot._xAxisBottomLogBase, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateStructInfo()" />*/
	calculateStructInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateStructInfo.call(this);
		this._resolvedYAxisLeftIsLogarithmic = this._yAxisLeftIsLogarithmic;
		this._resolvedYAxisRightIsLogarithmic = this._yAxisRightIsLogarithmic;
		this._resolvedXAxisTopIsLogarithmic = this._xAxisTopIsLogarithmic;
		this._resolvedXAxisBottomIsLogarithmic = this._xAxisBottomIsLogarithmic;
		if (this._actualStack100ModeEnabled) {
			this._resolvedYAxisLeftIsLogarithmic = false;
			this._resolvedYAxisRightIsLogarithmic = false;
			this._resolvedXAxisTopIsLogarithmic = false;
			this._resolvedXAxisBottomIsLogarithmic = false;
		}
		this._hasLeftAxis = this._hasRightAxis = this._hasTopAxis = this._hasBottomAxis = false;
		if (this._seriesCount > 0) {
			this._minLeft = this._minRight = this._minTop = this._minBottom = 3.4028230607370965E+38;
			this._maxLeft = this._maxRight = this._maxTop = this._maxBottom = 1 - 3.4028230607370965E+38;
			this._itemCount = 0x7FFFFFFF;
			this._sideBySideSeriesCount = 0;
			for (var i = 0; i < this._seriesCount; i++) {
				var series = this._seriesList[i];
				if (series._labels != null && series._labels.length != 0) {
					this._labels = series._labels;
					this._longestLabel = series._longestLabel;
				}
				for (var stackIndex = 0; stackIndex < series._stackKeys.length; stackIndex++) {
					var data = series._data[stackIndex];
					this._itemCount = Math.min(this._itemCount, data.length);
				}
				this._hasLeftAxis = this._hasLeftAxis || series._yLocation == $.ig.YAxisLocation.prototype.left;
				this._hasRightAxis = this._hasRightAxis || series._yLocation == $.ig.YAxisLocation.prototype.right;
				this._hasTopAxis = this._hasTopAxis || series._xLocation == $.ig.XAxisLocation.prototype.top;
				this._hasBottomAxis = this._hasBottomAxis || series._xLocation == $.ig.XAxisLocation.prototype.bottom;
				this.calculateAxisMinMax(series);
			}
		}
		if (this._minLeft == this._maxLeft) {
			this._minLeft -= 0.5;
			this._maxLeft += 0.5;
		}
		if (this._minRight == this._maxRight) {
			this._minRight -= 0.5;
			this._maxRight += 0.5;
		}
		if (this._minTop == this._maxTop) {
			this._minTop -= 0.5;
			this._maxTop += 0.5;
		}
		if (this._minBottom == this._maxBottom) {
			this._minBottom -= 0.5;
			this._maxBottom += 0.5;
		}
		if (!this._actualStack100ModeEnabled) {
			if (!$.ig.util.isNaN(this._userLeftMin)) {
				this._minLeftFixed = true;
				this._minLeft = this._userLeftMin;
			}
			if (!$.ig.util.isNaN(this._userLeftMax)) {
				this._maxLeftFixed = true;
				this._maxLeft = this._userLeftMax;
			}
			if (!$.ig.util.isNaN(this._userRightMin)) {
				this._minRightFixed = true;
				this._minRight = this._userRightMin;
			}
			if (!$.ig.util.isNaN(this._userRightMax)) {
				this._maxRightFixed = true;
				this._maxRight = this._userRightMax;
			}
			if (!$.ig.util.isNaN(this._userTopMin)) {
				this._minTopFixed = true;
				this._minTop = this._userTopMin;
			}
			if (!$.ig.util.isNaN(this._userTopMax)) {
				this._maxTopFixed = true;
				this._maxTop = this._userTopMax;
			}
			if (!$.ig.util.isNaN(this._userBottomMin)) {
				this._minBottomFixed = true;
				this._minBottom = this._userBottomMin;
			}
			if (!$.ig.util.isNaN(this._userBottomMax)) {
				this._maxBottomFixed = true;
				this._maxBottom = this._userBottomMax;
			}
		}
		if (this._hasLeftAxis && this._hasRightAxis && this._alignNumericAxesByZero) {
			if (this._minLeft == 0 && this._maxRight == 0 && !this._minLeftFixed && !this._maxRightFixed) {
				this._minLeft = this._maxLeft * -1;
				this._maxRight = this._minRight * -1;
			} else if (this._maxLeft == 0 && this._minRight == 0 && !this._maxLeftFixed && !this._minRightFixed) {
				this._maxLeft = this._minLeft * -1;
				this._minRight = this._maxRight * -1;
			} else if (this._minLeft == 0 && this._minRight < 0 && this._maxRight > 0 && !this._minLeftFixed) {
				this._minLeft = -1 * this._maxLeft * (1 - (this._maxRight / (this._maxRight - this._minRight)));
			} else if (this._maxLeft == 0 && this._minRight < 0 && this._maxRight > 0 && !this._maxLeftFixed) {
				this._maxLeft = -1 * this._minLeft * (this._maxRight / (this._maxRight - this._minRight));
			}
		}
		if (this._hasTopAxis && this._hasBottomAxis && this._alignNumericAxesByZero) {
			if (this._minTop == 0 && this._maxBottom == 0 && !this._minTopFixed && !this._maxBottomFixed) {
				this._minTop = this._maxTop * -1;
				this._maxBottom = this._minBottom * -1;
			} else if (this._maxTop == 0 && this._minBottom == 0 && !this._maxTopFixed && !this._minBottomFixed) {
				this._maxTop = this._minTop * -1;
				this._minBottom = this._maxBottom * -1;
			} else if (this._minTop == 0 && this._minBottom < 0 && this._maxBottom > 0 && !this._minTopFixed) {
				this._minTop = -1 * this._maxTop * (1 - (this._maxBottom / (this._maxBottom - this._minBottom)));
			} else if (this._maxTop == 0 && this._minBottom < 0 && this._maxBottom > 0 && !this._maxTopFixed) {
				this._maxTop = -1 * this._minTop * (this._maxBottom / (this._maxBottom - this._minBottom));
			}
		}
		switch (this._mode) {
			case $.ig.ChartAxisMode.prototype.categoryYNumericX:
				this._categoryAxisLocation = $.ig.AxisLocation.prototype.y;
				break;
			case $.ig.ChartAxisMode.prototype.numericYCategoryX:
				this._categoryAxisLocation = $.ig.AxisLocation.prototype.x;
				break;
			case $.ig.ChartAxisMode.prototype.numericYNumericX:
				this._categoryAxisLocation = $.ig.AxisLocation.prototype.none;
				break;
			case $.ig.ChartAxisMode.prototype.numericRadiusNumericValue:
			case $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue:
			case $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue:
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateStructInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateFontInfo()" />*/
	calculateFontInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateFontInfo.call(this);
		var label = (this._longestLabel == null) ? "temp" : this._longestLabel;
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX) {
			while (this._fontSize >= this._minFontSize) {
				var labelWidth = $.ig.NativeUtility.prototype.utility().measureText(label, this._fontName, this._fontSize)._width;
				if (labelWidth * 1.1 < this._width / 2) {
					break;
				}
				this._fontSize -= 1;
			}
		}
		var maxSizeForFont = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(label, this._fontName, this._fontSize);
		this._labelTextHeight = maxSizeForFont._height;
		this._maxLabelWidth = (maxSizeForFont._width * 1.1);
		this._minLabelWidth = $.ig.NativeUtility.prototype.utility().measureText("W", this._fontName, this._fontSize)._width;
		var useMK = this._primaryAxisValueFormatUseMKFormatting;
		var negMode = this._primaryAxisValueFormatNegativeMode;
		var numType = this._primaryAxisValueFormatType;
		var digits = this._primaryAxisValueFormatFractionDigits;
		var currencySymbol = this._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator = this._primaryAxisValueFormatShowGroupingSeparator;
		var useMK2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatUseMKFormatting : this._primaryAxisValueFormatUseMKFormatting;
		var negMode2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatNegativeMode : this._primaryAxisValueFormatNegativeMode;
		var numType2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatType : this._primaryAxisValueFormatType;
		var digits2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatFractionDigits : this._primaryAxisValueFormatFractionDigits;
		var currencySymbol2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatCurrencySymbol : this._primaryAxisValueFormatCurrencySymbol;
		var showGroupingSeparator2 = this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatShowGroupingSeparator : this._primaryAxisValueFormatShowGroupingSeparator;
		if (this._actualStack100ModeEnabled) {
			useMK = useMK2 = false;
			numType = numType2 = $.ig.FormatSettingsNumberType.prototype.percent;
			digits = digits2 = 0;
			showGroupingSeparator = showGroupingSeparator2 = false;
		}
		this._maxValueLeftAxisTextWidth = 0;
		if (this._hasLeftAxis) {
			var maxText = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._maxLeft), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var minText = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._minLeft), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var stepText = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber((this._maxLeft - this._minLeft) / 10), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var maxTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(maxText, this._fontName, this._fontSize);
			var minTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(minText, this._fontName, this._fontSize);
			var stepTextSizeBase = $.ig.NativeUtility.prototype.utility().measureText(stepText, this._fontName, this._fontSize);
			this._maxValueLeftAxisTextWidth = $.ig.ChartsUtility.prototype.max1(maxTextSizeBase._width, minTextSizeBase._width, stepTextSizeBase._width);
		}
		this._minValueBottomAxisTextWidth = 0;
		this._maxValueBottomAxisTextWidth = 0;
		if (this._hasBottomAxis) {
			var maxText1 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._maxBottom), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var minText1 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._minBottom), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var stepText1 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber((this._maxBottom - this._minBottom) / 10), useMK, negMode, numType, digits, showGroupingSeparator, currencySymbol);
			var maxTextSizeBase1 = $.ig.NativeUtility.prototype.utility().measureText(maxText1, this._fontName, this._fontSize);
			var minTextSizeBase1 = $.ig.NativeUtility.prototype.utility().measureText(minText1, this._fontName, this._fontSize);
			var stepTextSizeBase1 = $.ig.NativeUtility.prototype.utility().measureText(stepText1, this._fontName, this._fontSize);
			this._minValueBottomAxisTextWidth = minTextSizeBase1._width;
			this._maxValueBottomAxisTextWidth = $.ig.ChartsUtility.prototype.max1(maxTextSizeBase1._width, minTextSizeBase1._width, stepTextSizeBase1._width);
		}
		this._maxValueRightAxisTextWidth = 0;
		if (this._hasRightAxis) {
			var maxText2 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._maxRight), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var minText2 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._minRight), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var stepText2 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber((this._maxRight - this._minRight) / 10), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var maxTextSizeBase2 = $.ig.NativeUtility.prototype.utility().measureText(maxText2, this._fontName, this._fontSize);
			var minTextSizeBase2 = $.ig.NativeUtility.prototype.utility().measureText(minText2, this._fontName, this._fontSize);
			var stepTextSizeBase2 = $.ig.NativeUtility.prototype.utility().measureText(stepText2, this._fontName, this._fontSize);
			this._maxValueRightAxisTextWidth = $.ig.ChartsUtility.prototype.max1(maxTextSizeBase2._width, minTextSizeBase2._width, stepTextSizeBase2._width);
		}
		this._minValueTopAxisTextWidth = 0;
		this._maxValueTopAxisTextWidth = 0;
		if (this._hasTopAxis) {
			var maxText3 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._maxTop), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var minText3 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber(this._minTop), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var stepText3 = $.ig.ChartsUtility.prototype.labelForValue($.ig.ChartsUtility.prototype.nextRoundNumber((this._maxTop - this._minTop) / 10), useMK2, negMode2, numType2, digits2, showGroupingSeparator2, currencySymbol2);
			var maxTextSizeBase3 = $.ig.NativeUtility.prototype.utility().measureText(maxText3, this._fontName, this._fontSize);
			var minTextSizeBase3 = $.ig.NativeUtility.prototype.utility().measureText(minText3, this._fontName, this._fontSize);
			var stepTextSizeBase3 = $.ig.NativeUtility.prototype.utility().measureText(stepText3, this._fontName, this._fontSize);
			this._minValueTopAxisTextWidth = minTextSizeBase3._width;
			this._maxValueTopAxisTextWidth = $.ig.ChartsUtility.prototype.max1(maxTextSizeBase3._width, minTextSizeBase3._width, stepTextSizeBase3._width);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateFontInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateSizeInfo()" />*/
	calculateSizeInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateSizeInfo.call(this);
		this._resolvedXAxisBottomLabelsHidden = this._xAxisBottomLabelsHidden;
		this._resolvedXAxisTopLabelsHidden = this._xAxisTopLabelsHidden;
		this._resolvedYAxisLeftLabelsHidden = this._yAxisLeftLabelsHidden;
		this._resolvedYAxisRightLabelsHidden = this._yAxisRightLabelsHidden;
		this._yAxisLeftWidth = 0;
		switch (this._mode) {
			case $.ig.ChartAxisMode.prototype.categoryYNumericX:
				if (!this._resolvedYAxisLeftLabelsHidden) {
					this._yAxisLeftWidth = this._maxLabelWidth;
				}
				break;
			case $.ig.ChartAxisMode.prototype.numericYCategoryX:
			case $.ig.ChartAxisMode.prototype.numericYNumericX:
				if (this._hasLeftAxis && !this._resolvedYAxisLeftLabelsHidden) {
					this._yAxisLeftWidth = this._maxValueLeftAxisTextWidth;
				}
				break;
			case $.ig.ChartAxisMode.prototype.numericRadiusNumericValue:
			case $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue:
			case $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue:
				break;
		}
		this._yAxisRightWidth = 0;
		if (this._hasRightAxis && !this._resolvedYAxisRightLabelsHidden) {
			this._yAxisRightWidth = this._maxValueRightAxisTextWidth;
		}
		var yAxisLeftWidthOffset = 0;
		var yAxisRightWidthOffset = 0;
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX || this._mode == $.ig.ChartAxisMode.prototype.numericYNumericX) {
			if (Math.ceil(this._maxLabelWidth) < (this._width * 0.5)) {
				var topOffset = this._hasTopAxis && !this._resolvedXAxisTopLabelsHidden ? this._minValueTopAxisTextWidth / 2 : 0;
				var bottomOffset = this._hasBottomAxis && !this._resolvedXAxisBottomLabelsHidden ? this._minValueBottomAxisTextWidth / 2 : 0;
				yAxisLeftWidthOffset = Math.max(topOffset, bottomOffset);
				this._yAxisLeftWidth = Math.max(this._yAxisLeftWidth, yAxisLeftWidthOffset);
				topOffset = this._hasTopAxis && !this._resolvedXAxisTopLabelsHidden ? this._maxValueTopAxisTextWidth / 2 : 0;
				bottomOffset = this._hasBottomAxis && !this._resolvedXAxisBottomLabelsHidden ? this._maxValueBottomAxisTextWidth / 2 : 0;
				yAxisRightWidthOffset = Math.max(topOffset, bottomOffset);
				this._yAxisRightWidth = Math.max(this._yAxisRightWidth, yAxisRightWidthOffset);
			} else {
				this._resolvedXAxisBottomLabelsHidden = true;
				this._resolvedXAxisTopLabelsHidden = true;
			}
		}
		if (this._yAxisLeftWidth + this._yAxisRightWidth > (this._width * 0.6)) {
			this._resolvedYAxisLeftLabelsHidden = true;
			this._resolvedYAxisRightLabelsHidden = true;
			this._yAxisLeftWidth = yAxisLeftWidthOffset;
			this._yAxisRightWidth = yAxisRightWidthOffset;
		}
		var axisTitleWidth = this._labelTextHeight * 2;
		var canHaveAxisTitle = this.canHaveAxisTitle();
		this._yAxisLeftTitleWidth = 0;
		if (canHaveAxisTitle && this._hasLeftAxis && this._yAxisLeftTitle != null && this._yAxisLeftTitle.length > 0) {
			var titleSize = $.ig.NativeUtility.prototype.utility().measureText(this._yAxisLeftTitle, this._fontName, this._fontSize)._width;
			if (titleSize < this._height) {
				this._yAxisLeftTitleWidth = axisTitleWidth;
			}
		}
		this._yAxisRightTitleWidth = 0;
		if (canHaveAxisTitle && this._hasRightAxis && this._yAxisRightTitle != null && this._yAxisRightTitle.length > 0) {
			var titleSize1 = $.ig.NativeUtility.prototype.utility().measureText(this._yAxisRightTitle, this._fontName, this._fontSize)._width;
			if (titleSize1 < this._height) {
				this._yAxisRightTitleWidth = axisTitleWidth;
			}
		}
		this._canvasFrameWidth = this._width - ((this._outerPadding * 2) + (this._hasLeftAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + (this._hasRightAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + (this._innerAxisPadding * 2) + this._yAxisLeftWidth + this._yAxisRightWidth + this._yAxisLeftTitleWidth + this._yAxisRightTitleWidth) - this._legendWidthToRemove;
		var offsetH = this._width - this._canvasFrameWidth;
		var availableWidth = this._width * this._scale._width;
		var availableHeight = this._height * this._scale._height;
		this._horizontalScaleMin = availableWidth * this._scale._x;
		this._horizontalScaleMax = this._horizontalScaleMin + this._canvasFrameWidth;
		availableWidth -= offsetH;
		this._xAxisTopHeight = 0;
		this._xAxisBottomHeight = 0;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericYCategoryX) {
			var ic = this._itemCount;
			this._itemSize = availableWidth / ic;
			var itemSizeLimit = this._labelTextHeight;
			if (this._itemSize < itemSizeLimit) {
				this._valueInterval = $.ig.truncate(Math.ceil(itemSizeLimit / this._itemSize));
				if (this._valueInterval < 0) {
					this._valueInterval = 0;
				}
				if (this._valueInterval > 1) {
					var newLimit = this._valueInterval * this._itemSize;
					ic = $.ig.truncate(Math.ceil(availableWidth / newLimit));
					this._itemSize = availableWidth / ic;
				}
			}
			this._itemSpacing = this._itemSize * this._categorySpacingPercent;
			var availSizeForItemSpacing = availableWidth - (this._itemSpacing * (ic + 1));
			this._itemSizeWithSpacing = availSizeForItemSpacing / ic;
			if (this._sideBySideSeriesCount == 1 || this._sideBySideSeriesCount == 0) {
				this._itemSpacingSideBySide = 0;
				this._itemSizeSideBySide = this._itemSizeWithSpacing;
			} else {
				this._itemSpacingSideBySide = this._itemSizeWithSpacing / this._sideBySideSeriesCount * 0.1;
				var sideBySideItemSize = this._itemSizeWithSpacing - (this._itemSpacingSideBySide * (this._sideBySideSeriesCount + 1));
				this._itemSizeSideBySide = sideBySideItemSize / this._sideBySideSeriesCount;
			}
			if (!this._resolvedXAxisBottomLabelsHidden && this._labels != null) {
				var labelWidth = $.ig.truncate(Math.ceil(this._maxLabelWidth));
				var labelHeight = $.ig.truncate(Math.ceil(this._labelTextHeight));
				var originalLabelWidth = labelWidth;
				var originalLabelHeight = labelHeight;
				var rotatedBounds = new $.ig.RectRotationBounds();
				this._labelAngle = 0;
				if (this._valueInterval > 1) {
					this._labelAngle = 90;
					var radians = $.ig.CPMathUtility.prototype.convertDegreesToRadians(this._labelAngle);
					$.ig.ChartsUtility.prototype.calculateBoundsOfRect(rotatedBounds, 0, 0, originalLabelWidth, originalLabelHeight, radians);
					labelWidth = rotatedBounds._width;
					labelHeight = rotatedBounds._height;
				} else {
					while ($.ig.truncate(labelWidth) > this._itemSizeWithSpacing && this._labelAngle <= 89) {
						this._labelAngle += 1;
						var radians1 = $.ig.CPMathUtility.prototype.convertDegreesToRadians(this._labelAngle);
						$.ig.ChartsUtility.prototype.calculateBoundsOfRect(rotatedBounds, 0, 0, originalLabelWidth, originalLabelHeight, radians1);
						labelWidth = rotatedBounds._width;
						labelHeight = rotatedBounds._height;
					}
				}
				this._xAxisBottomHeight = Math.max(labelHeight, this._minLabelWidth);
			}
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX) {
			if (this._hasBottomAxis && !this._resolvedXAxisBottomLabelsHidden) {
				this._xAxisBottomHeight = this._labelTextHeight;
			}
			this._labelAngle = 0;
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.numericYNumericX) {
			if (this._hasBottomAxis && !this._resolvedXAxisBottomLabelsHidden) {
				this._xAxisBottomHeight = this._labelTextHeight;
			}
			this._labelAngle = 0;
		}
		if (this._hasTopAxis && !this._resolvedXAxisTopLabelsHidden) {
			this._xAxisTopHeight = this._labelTextHeight;
		}
		if (this._xAxisBottomHeight + this._xAxisTopHeight > (this._height * 0.5)) {
			this._xAxisTopHeight = 0;
			this._xAxisBottomHeight = 0;
		}
		this._xAxisTopTitleHeight = 0;
		if (canHaveAxisTitle && this._xAxisTopTitle != null && this._xAxisTopTitle.length > 0) {
			var titleSize2 = $.ig.NativeUtility.prototype.utility().measureText(this._xAxisTopTitle, this._fontName, this._fontSize)._width;
			if (titleSize2 < this._width) {
				this._xAxisTopTitleHeight = axisTitleWidth;
			}
		}
		this._xAxisBottomTitleHeight = 0;
		if (canHaveAxisTitle && this._xAxisBottomTitle != null && this._xAxisBottomTitle.length > 0) {
			var titleSize3 = $.ig.NativeUtility.prototype.utility().measureText(this._xAxisBottomTitle, this._fontName, this._fontSize)._width;
			if (titleSize3 < this._width) {
				this._xAxisBottomTitleHeight = axisTitleWidth;
			}
		}
		this._canvasFrameHeight = this._height - ((this._outerPadding * 2) + (this._hasTopAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + (this._hasBottomAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + (this._innerAxisPadding * 2) + this._xAxisTopHeight + this._xAxisBottomHeight + this._xAxisTopTitleHeight + this._xAxisBottomTitleHeight) - this._legendHeighToRemove;
		var offsetY = this._height - this._canvasFrameHeight;
		this._verticalScaleMin = availableHeight * this._scale._y;
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX) {
			this._verticalScaleMin = availableHeight * (1 - this._scale._y) - this._height;
		}
		this._verticalScaleMax = this._verticalScaleMin + this._canvasFrameHeight;
		availableHeight -= offsetY;
		this._availableSize = this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX ? (availableHeight) : availableWidth;
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX) {
			var ic1 = this._itemCount;
			this._itemSize = availableHeight / ic1;
			var itemSizeLimit1 = this._labelTextHeight;
			if (this._itemSize < itemSizeLimit1) {
				this._valueInterval = $.ig.truncate(Math.ceil(itemSizeLimit1 / this._itemSize));
				if (this._valueInterval < 0) {
					this._valueInterval = 0;
				}
				if (this._valueInterval > 1) {
					var newLimit1 = this._valueInterval * this._itemSize;
					ic1 = $.ig.truncate(Math.round((availableHeight / newLimit1)));
					this._itemSize = availableHeight / ic1;
				}
			}
			this._itemSpacing = this._itemSize * this._categorySpacingPercent;
			var availSizeForItemSpacing1 = availableHeight - (this._itemSpacing * (ic1 + 1));
			this._itemSizeWithSpacing = availSizeForItemSpacing1 / ic1;
			if (this._sideBySideSeriesCount == 1) {
				this._itemSpacingSideBySide = 0;
				this._itemSizeSideBySide = this._itemSizeWithSpacing;
			} else {
				this._itemSpacingSideBySide = this._itemSizeWithSpacing / this._sideBySideSeriesCount * 0.1;
				var sideBySideItemSize1 = this._itemSizeWithSpacing - (this._itemSpacingSideBySide * (this._sideBySideSeriesCount + 1));
				this._itemSizeSideBySide = sideBySideItemSize1 / this._sideBySideSeriesCount;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculatePositionInfo()" />*/
	calculatePositionInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculatePositionInfo.call(this);
		this._canvasFrameX = this._outerPadding + this._legendLeftOffset + this._yAxisLeftTitleWidth + this._yAxisLeftWidth + (this._hasLeftAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + this._innerAxisPadding;
		this._canvasFrameY = this._outerPadding + this._legendTopOffset + this._xAxisTopTitleHeight + this._xAxisTopHeight + (this._hasTopAxis ? this._outerAxisPadding + this._axisLineThickness : 0) + this._innerAxisPadding;
		this._axisLinesFrameX = this._outerPadding + this._legendLeftOffset + this._yAxisLeftTitleWidth + (this._hasLeftAxis ? this._yAxisLeftWidth + this._outerAxisPadding : 0);
		this._axisLinesFrameY = this._outerPadding + this._legendTopOffset + this._xAxisTopTitleHeight + (this._hasTopAxis ? this._xAxisTopHeight + this._outerAxisPadding : 0);
		this._axisLinesFrameWidth = this._canvasFrameWidth + this._innerAxisPadding * 2;
		this._axisLinesFrameHeight = this._canvasFrameHeight + this._innerAxisPadding * 2;
		this._xAxisTopFrameX = this._canvasFrameX;
		this._xAxisTopFrameY = this._outerPadding + this._legendTopOffset + this._xAxisTopTitleHeight;
		this._xAxisTopFrameWidth = this._canvasFrameWidth;
		this._xAxisTopFrameHeight = this._xAxisTopHeight;
		this._xAxisBottomFrameX = this._canvasFrameX;
		this._xAxisBottomFrameY = this._axisLinesFrameY + this._axisLinesFrameHeight + (this._hasBottomAxis ? this._axisLineThickness + this._outerAxisPadding : 0);
		this._xAxisBottomFrameWidth = this._canvasFrameWidth;
		this._xAxisBottomFrameHeight = this._xAxisBottomHeight;
		this._yAxisLeftFrameX = this._outerPadding + this._legendLeftOffset + this._yAxisLeftTitleWidth;
		this._yAxisLeftFrameY = this._canvasFrameY;
		this._yAxisLeftFrameWidth = this._yAxisLeftWidth;
		this._yAxisLeftFrameHeight = this._canvasFrameHeight;
		this._yAxisRightFrameX = this._axisLinesFrameX + this._axisLinesFrameWidth + (this._hasRightAxis ? this._axisLineThickness + this._outerAxisPadding : 0);
		this._yAxisRightFrameY = this._canvasFrameY;
		this._yAxisRightFrameWidth = this._yAxisRightWidth;
		this._yAxisRightFrameHeight = this._canvasFrameHeight;
		this._yTitleLeftFrameX = this._outerPadding;
		this._yTitleLeftFrameY = this._canvasFrameY;
		this._yTitleLeftFrameWidth = this._yAxisLeftTitleWidth + this._legendLeftOffset;
		this._yTitleLeftFrameHeight = this._canvasFrameHeight;
		this._yTitleRightFrameX = this._yAxisRightFrameX + this._yAxisRightFrameWidth;
		this._yTitleRightFrameY = this._canvasFrameY;
		this._yTitleRightFrameWidth = this._yAxisRightTitleWidth;
		this._yTitleRightFrameHeight = this._canvasFrameHeight;
		this._xTitleTopFrameX = this._canvasFrameX;
		this._xTitleTopFrameY = this._outerPadding;
		this._xTitleTopFrameWidth = this._canvasFrameWidth;
		this._xTitleTopFrameHeight = this._xAxisTopTitleHeight + this._legendTopOffset;
		this._xTitleBottomFrameX = this._canvasFrameX;
		this._xTitleBottomFrameY = this._xAxisBottomFrameY + this._xAxisBottomFrameHeight;
		this._xTitleBottomFrameWidth = this._canvasFrameWidth;
		this._xTitleBottomFrameHeight = this._xAxisBottomTitleHeight;
		switch (this._mode) {
			case $.ig.ChartAxisMode.prototype.categoryYNumericX:
				this._textMarkersVisible = true;
				break;
			case $.ig.ChartAxisMode.prototype.numericYCategoryX:
			case $.ig.ChartAxisMode.prototype.numericYNumericX:
				this._textMarkersVisible = (this._maxValueLeftAxisTextWidth * 1.25 <= this._itemSizeSideBySide && this._maxValueRightAxisTextWidth <= this._itemSizeSideBySide * 1.25);
				break;
			case $.ig.ChartAxisMode.prototype.numericRadiusNumericValue:
			case $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue:
			case $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue:
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculatePositionInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateDataInfo()" />*/
	calculateDataInfo: function () {
		$.ig.SeriesSnapshotBase.prototype.calculateDataInfo.call(this);
		if (this._valueInterval == 0) {
			this._startIndex = 0;
			this._endIndex = 0;
			this._labelInterval = 0;
			return;
		}
		var originalItemSize = this._availableSize / this._itemCount;
		switch (this._mode) {
			case $.ig.ChartAxisMode.prototype.categoryYNumericX:
				{
					this._startIndex = $.ig.truncate(Math.floor(this._verticalScaleMin / originalItemSize));
					if (this._startIndex < 0) {
						this._startIndex = 0;
					}
					this._startIndex -= this._startIndex % this._valueInterval;
					this._endIndex = $.ig.truncate(Math.ceil((this._verticalScaleMin + this._canvasFrameHeight) / originalItemSize));
					this._endIndex += this._endIndex % this._valueInterval;
					if (this._endIndex >= this._itemCount) {
						this._endIndex = this._itemCount - 1;
					}
					this._labelInterval = $.ig.truncate(Math.ceil((this._labelTextHeight / this._itemSizeWithSpacing))) * this._valueInterval;
					break;
				}
			case $.ig.ChartAxisMode.prototype.numericYCategoryX:
				{
					this._startIndex = $.ig.truncate(Math.floor(this._horizontalScaleMin / originalItemSize));
					if (this._startIndex < 0) {
						this._startIndex = 0;
					}
					this._startIndex -= this._startIndex % this._valueInterval;
					this._endIndex = $.ig.truncate(Math.ceil((this._horizontalScaleMin + this._canvasFrameWidth) / originalItemSize));
					this._endIndex += this._endIndex % this._valueInterval;
					if (this._endIndex >= this._itemCount) {
						this._endIndex = this._itemCount - 1;
					}
					if (!this._resolvedXAxisBottomLabelsHidden && this._labels != null) {
						if ($.ig.truncate(this._rotatedLabelWidth) > this._itemSizeWithSpacing) {
							this._labelInterval = $.ig.truncate(Math.ceil((this._rotatedLabelWidth / this._itemSizeWithSpacing))) * this._valueInterval;
						} else {
							this._labelInterval = 1 * this._valueInterval;
						}
					}
					break;
				}
			case $.ig.ChartAxisMode.prototype.numericYNumericX:
				{
					break;
				}
			case $.ig.ChartAxisMode.prototype.numericRadiusNumericValue:
			case $.ig.ChartAxisMode.prototype.numericRadiusCategoryValue:
			case $.ig.ChartAxisMode.prototype.categoryRadiusNumericValue:
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateDataInfo()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshot::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	calculateNumberOfTrendlinePoints: function (trendlineIndex) {
		$.ig.SeriesSnapshotBase.prototype.calculateNumberOfTrendlinePoints.call(this, trendlineIndex);
		var startX = this._startIndex;
		var endX = this._endIndex;
		return $.ig.truncate(Math.ceil((endX - startX + 1) / this._valueInterval));
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshot::CalculateNumberOfTrendlinePoints(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateTrendlineData(System.Int32, , )" />*/
	calculateTrendlineData: function (trendlineIndex, trendPointsX, trendPointsY) {
		$.ig.SeriesSnapshotBase.prototype.calculateTrendlineData.call(this, trendlineIndex, trendPointsX, trendPointsY);
		var info = new $.ig.ItemLayoutInfo();
		var s = this._seriesList[trendlineIndex];
		if (s._trendlineColor == -1 || s._trendlineColor == 0 || s._trendlineData == null || s._trendlineData.length == 0) {
			return;
		}
		var isFit = $.ig.MCTrendCalculators.prototype.isFitTrendline(s._trendlineType);
		var startX = this._startIndex;
		if (this._valueInterval == 0) {
			return;
		}
		var i = startX;
		if (isFit) {
			if (this._categoryAxisLocation == $.ig.AxisLocation.prototype.x) {
				for (var counter = 0; counter < trendPointsX.length; counter++) {
					var adjusted = this.adjustIndexForInterval(i);
					this.calculateCategoryBounds(info, adjusted, -1, 0, s);
					trendPointsX[counter] = info._valueLocationX;
					var unscaledValue = this.trendlineEvaluate(s._trendlineType, s._trendlineData, i + 1);
					this.calculateCategoryBounds(info, i, -1, unscaledValue, s);
					trendPointsY[counter] = info._valueLocationY;
					i += this._valueInterval;
				}
			} else {
				for (var counter1 = 0; counter1 < trendPointsX.length; counter1++) {
					var adjusted1 = this.adjustIndexForInterval(i);
					this.calculateCategoryBounds(info, adjusted1, -1, 0, s);
					trendPointsY[counter1] = info._valueLocationY;
					var unscaledValue1 = this.trendlineEvaluate(s._trendlineType, s._trendlineData, i + 1);
					this.calculateCategoryBounds(info, i, -1, unscaledValue1, s);
					trendPointsX[counter1] = info._valueLocationX;
					i += this._valueInterval;
				}
			}
		} else {
			for (var counter2 = 0; counter2 < trendPointsX.length; counter2++) {
				var adjusted2 = this.adjustIndexForInterval(i);
				var index = adjusted2 * this._valueInterval;
				var unscaledValue2 = this.trendValueForItem(index, trendlineIndex);
				if ($.ig.util.isNaN(unscaledValue2)) {
					return;
				}
				if (this._categoryAxisLocation == $.ig.AxisLocation.prototype.x) {
					this.calculateCategoryBounds(info, adjusted2, -1, unscaledValue2, s);
					trendPointsX[counter2] = info._valueLocationX;
					this.calculateCategoryBounds(info, 0, -1, unscaledValue2, s);
					trendPointsY[counter2] = info._valueLocationY;
				} else {
					this.calculateCategoryBounds(info, 0, -1, unscaledValue2, s);
					trendPointsX[counter2] = info._valueLocationX;
					this.calculateCategoryBounds(info, adjusted2, -1, unscaledValue2, s);
					trendPointsY[counter2] = info._valueLocationY;
				}
				i += this._valueInterval;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateTrendlineData(System.Int32, , )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::FinishCalculations()" />*/
	finishCalculations: function () {
		$.ig.SeriesSnapshotBase.prototype.finishCalculations.call(this);
		var leftHasZero = this._minLeft <= 0 && this._maxLeft >= 0;
		var rightHasZero = this._minRight <= 0 && this._maxRight >= 0;
		var topHasZero = this._minTop <= 0 && this._maxTop >= 0;
		var bottomHasZero = this._minBottom <= 0 && this._maxBottom >= 0;
		this._numberOfMaxHorizontalNumericLabels = $.ig.truncate((this._canvasFrameWidth / this._maxValueLeftAxisTextWidth / 3));
		this._numberOfMaxVerticalNumericLabels = $.ig.truncate((this._canvasFrameHeight / this._labelTextHeight / 3));
		if (this._numberOfMaxHorizontalNumericLabels == 0) {
			this._numberOfMaxHorizontalNumericLabels = 1;
		}
		if (this._numberOfMaxVerticalNumericLabels == 0) {
			this._numberOfMaxVerticalNumericLabels = 1;
		}
		var sCount = this._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < sCount; seriesIndex++) {
			var series = this._seriesList[seriesIndex];
			if (series._type == $.ig.CombinedDataItemType.prototype.spline || series._type == $.ig.CombinedDataItemType.prototype.splineArea) {
				var minTangent = series._splineMinTangentValue;
				var maxTangent = series._splineMaxTangentValue;
				this._minLeft = this._minLeftFixed ? this._minLeft : Math.min(this._minLeft, minTangent);
				this._maxLeft = this._maxLeftFixed ? this._maxLeft : Math.max(this._maxLeft, maxTangent);
				this._minRight = this._minRightFixed ? this._minRight : Math.min(this._minRight, minTangent);
				this._maxRight = this._maxRightFixed ? this._maxRight : Math.max(this._maxRight, maxTangent);
			}
		}
		var rangeLeft = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minLeft, this._maxLeft, this._minLeftFixed, this._maxLeftFixed, this._resolvedYAxisLeftIsLogarithmic, this._yAxisLeftLogBase);
		this._minLeft = rangeLeft[0];
		this._maxLeft = rangeLeft[1];
		var rangeRight = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minRight, this._maxRight, this._minRightFixed, this._maxRightFixed, this._resolvedYAxisRightIsLogarithmic, this._yAxisRightLogBase);
		this._minRight = rangeRight[0];
		this._maxRight = rangeRight[1];
		var rangeTop = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minTop, this._maxTop, this._minTopFixed, this._maxTopFixed, this._resolvedXAxisTopIsLogarithmic, this._xAxisTopLogBase);
		this._minTop = rangeTop[0];
		this._maxTop = rangeTop[1];
		var rangeBottom = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minBottom, this._maxBottom, this._minBottomFixed, this._maxBottomFixed, this._resolvedXAxisBottomIsLogarithmic, this._xAxisBottomLogBase);
		this._minBottom = rangeBottom[0];
		this._maxBottom = rangeBottom[1];
		var primaryFractionDigits = this._primaryAxisValueFormatType == $.ig.FormatSettingsNumberType.prototype.percent ? Math.max(1, this._primaryAxisValueFormatFractionDigits) : this._primaryAxisValueFormatFractionDigits;
		var secondaryFractionDigits = primaryFractionDigits;
		if (this._useSecondaryAxisValueFormat) {
			secondaryFractionDigits = this._secondaryAxisValueFormatType == $.ig.FormatSettingsNumberType.prototype.percent ? Math.max(1, this._secondaryAxisValueFormatFractionDigits) : this._secondaryAxisValueFormatFractionDigits;
		}
		this._numericLeftAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._maxLeft - this._minLeft) / this._numberOfMaxVerticalNumericLabels, false, primaryFractionDigits, this._actualStack100ModeEnabled);
		this._numericRightAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._maxRight - this._minRight) / this._numberOfMaxVerticalNumericLabels, false, secondaryFractionDigits, this._actualStack100ModeEnabled);
		this._numericBottomAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._maxBottom - this._minBottom) / this._numberOfMaxHorizontalNumericLabels, false, primaryFractionDigits, this._actualStack100ModeEnabled);
		this._numericTopAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._maxTop - this._minTop) / this._numberOfMaxHorizontalNumericLabels, false, secondaryFractionDigits, this._actualStack100ModeEnabled);
		if (this._numericLeftAxisStepSize != 0) {
			var numIntervals = this._minLeft / this._numericLeftAxisStepSize;
			var minNumWholeIntervals = $.ig.truncate(numIntervals);
			if (minNumWholeIntervals != numIntervals) {
				minNumWholeIntervals -= this._minLeft < 0 ? 1 : 0;
				this._minLeft = minNumWholeIntervals * this._numericLeftAxisStepSize;
			}
			numIntervals = this._maxLeft / this._numericLeftAxisStepSize;
			var maxNumWholeIntervals = $.ig.truncate(numIntervals);
			if (numIntervals != maxNumWholeIntervals) {
				maxNumWholeIntervals += this._maxLeft < 0 ? 0 : 1;
				this._maxLeft = maxNumWholeIntervals * this._numericLeftAxisStepSize;
			}
			if (this._resolvedYAxisLeftIsLogarithmic) {
				this._minLeft = Math.pow(this._yAxisLeftLogBase, minNumWholeIntervals * this._numericLeftAxisStepSize);
				this._maxLeft = Math.pow(this._yAxisLeftLogBase, maxNumWholeIntervals * this._numericLeftAxisStepSize);
			}
		}
		if (this._numericRightAxisStepSize != 0) {
			if (this._numericLeftAxisStepSize != 0 && leftHasZero && rightHasZero && this._alignNumericAxesByZero) {
				var rightZero = this._maxLeft / (this._maxLeft - this._minLeft);
				var rightZeroOld = this._maxRight / (this._maxRight - this._minRight);
				if (rightZero > rightZeroOld) {
					this._maxRight = rightZero * this._minRight / (rightZero - 1);
				} else {
					this._minRight = this._maxRight - this._maxRight / rightZero;
				}
				if (this._resolvedYAxisRightIsLogarithmic) {
					this._minRight = Math.pow(this._yAxisRightLogBase, this._minRight);
					this._maxRight = Math.pow(this._yAxisRightLogBase, this._maxRight);
				}
			} else {
				var numIntervals1 = this._minRight / this._numericRightAxisStepSize;
				var minNumWholeIntervals1 = $.ig.truncate(numIntervals1);
				if (numIntervals1 != minNumWholeIntervals1) {
					minNumWholeIntervals1 -= this._minRight < 0 ? 1 : 0;
					this._minRight = minNumWholeIntervals1 * this._numericRightAxisStepSize;
				}
				numIntervals1 = this._maxRight / this._numericRightAxisStepSize;
				var maxNumWholeIntervals1 = $.ig.truncate(numIntervals1);
				if (numIntervals1 != maxNumWholeIntervals1) {
					maxNumWholeIntervals1 += this._maxRight < 0 ? 0 : 1;
					this._maxRight = maxNumWholeIntervals1 * this._numericRightAxisStepSize;
				}
				if (this._resolvedYAxisRightIsLogarithmic) {
					this._minRight = Math.pow(this._yAxisRightLogBase, minNumWholeIntervals1 * this._numericRightAxisStepSize);
					this._maxRight = Math.pow(this._yAxisRightLogBase, maxNumWholeIntervals1 * this._numericRightAxisStepSize);
				}
			}
		}
		if (this._numericBottomAxisStepSize != 0) {
			var numIntervals2 = this._minBottom / this._numericBottomAxisStepSize;
			var minNumWholeIntervals2 = $.ig.truncate(numIntervals2);
			if (numIntervals2 != minNumWholeIntervals2) {
				minNumWholeIntervals2 -= this._minBottom < 0 ? 1 : 0;
				this._minBottom = minNumWholeIntervals2 * this._numericBottomAxisStepSize;
			}
			numIntervals2 = this._maxBottom / this._numericBottomAxisStepSize;
			var maxNumWholeIntervals2 = $.ig.truncate(numIntervals2);
			if (numIntervals2 != maxNumWholeIntervals2) {
				maxNumWholeIntervals2 += this._maxBottom < 0 ? 0 : 1;
				this._maxBottom = maxNumWholeIntervals2 * this._numericBottomAxisStepSize;
			}
			if (this._resolvedXAxisBottomIsLogarithmic) {
				this._minBottom = Math.pow(this._xAxisBottomLogBase, minNumWholeIntervals2 * this._numericBottomAxisStepSize);
				this._maxBottom = Math.pow(this._xAxisBottomLogBase, maxNumWholeIntervals2 * this._numericBottomAxisStepSize);
			}
			this._numberOfMaxHorizontalNumericLabels = $.ig.truncate(((this._maxBottom - this._minBottom) / this._numericBottomAxisStepSize));
		}
		if (this._numericTopAxisStepSize != 0) {
			if (this._numericBottomAxisStepSize != 0 && bottomHasZero && topHasZero && this._alignNumericAxesByZero) {
				var topZero = this._maxBottom / (this._maxBottom - this._minBottom);
				var topZeroOld = this._maxTop / (this._maxTop - this._minTop);
				if (topZero > topZeroOld) {
					this._maxTop = topZero * this._minTop / (topZero - 1);
				} else {
					this._minTop = this._maxTop - this._maxTop / topZero;
				}
				if (this._resolvedXAxisTopIsLogarithmic) {
					this._minTop = Math.pow(this._xAxisTopLogBase, this._minTop);
					this._maxTop = Math.pow(this._xAxisTopLogBase, this._maxTop);
				}
			} else {
				var numIntervals3 = this._minTop / this._numericTopAxisStepSize;
				var minNumWholeIntervals3 = $.ig.truncate(numIntervals3);
				if (numIntervals3 != minNumWholeIntervals3) {
					minNumWholeIntervals3 -= this._minTop < 0 ? 1 : 0;
					this._minTop = minNumWholeIntervals3 * this._numericTopAxisStepSize;
				}
				numIntervals3 = this._maxTop / this._numericTopAxisStepSize;
				var maxNumWholeIntervals3 = $.ig.truncate(numIntervals3);
				if (numIntervals3 != maxNumWholeIntervals3) {
					maxNumWholeIntervals3 += this._maxTop < 0 ? 0 : 1;
					this._maxTop = maxNumWholeIntervals3 * this._numericTopAxisStepSize;
				}
				if (this._resolvedXAxisTopIsLogarithmic) {
					this._minTop = Math.pow(this._xAxisTopLogBase, minNumWholeIntervals3 * this._numericTopAxisStepSize);
					this._maxTop = Math.pow(this._xAxisTopLogBase, maxNumWholeIntervals3 * this._numericTopAxisStepSize);
				}
			}
		}
		this._visibleLeftMax = this._minLeft + (this._maxLeft - this._minLeft) * (1 - this._scale._y);
		this._visibleLeftMin = this._visibleLeftMax - (this._maxLeft - this._minLeft) / this._scale._height;
		this._visibleRightMax = this._minRight + (this._maxRight - this._minRight) * (1 - this._scale._y);
		this._visibleRightMin = this._visibleRightMax - (this._maxRight - this._minRight) / this._scale._height;
		this._visibleTopMin = this._minTop + (this._maxTop - this._minTop) * this._scale._x;
		this._visibleTopMax = this._visibleTopMin + (this._maxTop - this._minTop) / this._scale._width;
		this._visibleBottomMin = this._minBottom + (this._maxBottom - this._minBottom) * this._scale._x;
		this._visibleBottomMax = this._visibleBottomMin + (this._maxBottom - this._minBottom) / this._scale._width;
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::FinishCalculations()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	calculateAxisMinMax: function (series) {
		if (this._actualStack100ModeEnabled && !series.isStackSeries()) {
			return;
		}
		$.ig.SeriesSnapshotBase.prototype.calculateAxisMinMax.call(this, series);
		if (series._xLocation == $.ig.XAxisLocation.prototype.top) {
			this._minTop = Math.min(this._minTop, this._currentAxisMin);
			this._maxTop = Math.max(this._maxTop, this._currentAxisMax);
		} else {
			this._minBottom = Math.min(this._minBottom, this._currentAxisMin);
			this._maxBottom = Math.max(this._maxBottom, this._currentAxisMax);
		}
		if (series._yLocation == $.ig.YAxisLocation.prototype.left) {
			this._minLeft = Math.min(this._minLeft, this._currentAxisMin);
			this._maxLeft = Math.max(this._maxLeft, this._currentAxisMax);
		} else {
			this._minRight = Math.min(this._minRight, this._currentAxisMin);
			this._maxRight = Math.max(this._maxRight, this._currentAxisMax);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::Invalidate()" />*/
	invalidate: function () {
		if (this._width == 0 || this._height == 0) {
			return;
		}
		$.ig.SeriesSnapshotBase.prototype.invalidate.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPositionWithSpacing(System.Int32)" />*/
	calcItemStartPositionWithSpacing: function (index) {
		return this.calcItemStartPosition(index) + this._itemSpacing / 2;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPositionWithSpacing(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemCenter(System.Int32)" />*/
	calcItemCenter: function (index) {
		return this.calcItemStartPosition(index) + this._itemSize / 2;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemCenter(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPosition(System.Int32)" />*/
	calcItemStartPosition: function (index) {
		if (this._categoryAxisLocation == $.ig.AxisLocation.prototype.x) {
			return (this._itemSize * index) - this._horizontalScaleMin;
		} else {
			var y = ((this._itemSize * index) + this._itemSize) - this._verticalScaleMin;
			y = (this._canvasFrameHeight - y);
			return y;
		}
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPosition(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPosition(System.Int32, System.Int32)" />*/
	calcItemStartPosition1: function (index, series) {
		var left = this.calcItemStartPositionWithSpacing(index);
		left += (this._itemSpacingSideBySide * (series + 1)) + (this._itemSizeSideBySide * series);
		return left;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalcItemStartPosition(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateValuePosition(System.Double, Infragistics.SeriesObject)" />*/
	calculateValuePosition: function (val, series) {
		if (this._mode == $.ig.ChartAxisMode.prototype.numericYCategoryX) {
			return this.calculateVerticalValuePosition(val, series._yLocation);
		}
		if (this._mode == $.ig.ChartAxisMode.prototype.categoryYNumericX) {
			return this.calculateHorizontalValuePosition(val, series._xLocation);
		}
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateValuePosition(System.Double, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateVerticalValuePosition(System.Double, Infragistics.YAxisLocation)" />*/
	calculateVerticalValuePosition: function (val, location) {
		var max = (location == $.ig.YAxisLocation.prototype.left) ? this._maxLeft : this._maxRight;
		var min = (location == $.ig.YAxisLocation.prototype.left) ? this._minLeft : this._minRight;
		var calcMin = min;
		var calcMax = max;
		var calcVal = val;
		if (!this._actualStack100ModeEnabled && this._resolvedYAxisLeftIsLogarithmic && location == $.ig.YAxisLocation.prototype.left) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(min, this._yAxisLeftLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(max, this._yAxisLeftLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(val, this._yAxisLeftLogBase);
		} else if (!this._actualStack100ModeEnabled && this._resolvedYAxisRightIsLogarithmic && location == $.ig.YAxisLocation.prototype.right) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(min, this._yAxisRightLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(max, this._yAxisRightLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(val, this._yAxisRightLogBase);
		}
		var percent = (1 - (calcVal - calcMin) / (calcMax - calcMin));
		var scaleOffset = this._verticalScaleMin;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericYNumericX) {
			scaleOffset = (this._canvasFrameHeight * this._scale._height) * this._scale._y;
		}
		var result = this._canvasFrameY + (this._canvasFrameHeight * this._scale._height * percent) - scaleOffset;
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateVerticalValuePosition(System.Double, Infragistics.YAxisLocation)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateHorizontalValuePosition(System.Double, Infragistics.XAxisLocation)" />*/
	calculateHorizontalValuePosition: function (val, location) {
		var max = (location == $.ig.XAxisLocation.prototype.top) ? this._maxTop : this._maxBottom;
		var min = (location == $.ig.XAxisLocation.prototype.top) ? this._minTop : this._minBottom;
		var calcMin = min;
		var calcMax = max;
		var calcVal = val;
		if (!this._actualStack100ModeEnabled && this._resolvedXAxisTopIsLogarithmic && location == $.ig.XAxisLocation.prototype.top) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(min, this._xAxisTopLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(max, this._xAxisTopLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(val, this._xAxisTopLogBase);
		} else if (!this._actualStack100ModeEnabled && this._resolvedXAxisBottomIsLogarithmic && location == $.ig.XAxisLocation.prototype.bottom) {
			calcMin = $.ig.CPMathUtility.prototype.convertToLogarithmic(min, this._xAxisBottomLogBase);
			calcMax = $.ig.CPMathUtility.prototype.convertToLogarithmic(max, this._xAxisBottomLogBase);
			calcVal = $.ig.CPMathUtility.prototype.convertToLogarithmic(val, this._xAxisBottomLogBase);
		}
		var percent = ((calcVal - calcMin) / (calcMax - calcMin));
		var scaleOffset = this._horizontalScaleMin;
		if (this._mode == $.ig.ChartAxisMode.prototype.numericYNumericX) {
			scaleOffset = (this._canvasFrameWidth * this._scale._width) * this._scale._x;
		}
		var result = this._canvasFrameX + (this._canvasFrameWidth * this._scale._width * percent) - scaleOffset;
		return result;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateHorizontalValuePosition(System.Double, Infragistics.XAxisLocation)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateCategoryPosition(System.Single)" />*/
	calculateCategoryPosition: function (index) {
		return this._itemSize / 2 + this._itemSize * index - this._horizontalScaleMin;
	}
	/*<EndMethod Name="System.Single Infragistics.SeriesSnapshot::CalculateCategoryPosition(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.SeriesSnapshot::CalculateIndexForPosition(System.Single)" />*/
	calculateIndexForPosition: function (position) {
		var offset = (this._categoryAxisLocation == $.ig.AxisLocation.prototype.x) ? this._horizontalScaleMin : this._verticalScaleMin;
		var index = $.ig.truncate(((position + offset) / this._itemSize));
		index *= this._valueInterval;
		if (index >= this._itemCount) {
			return -1;
		}
		return index;
	}
	/*<EndMethod Name="System.Int32 Infragistics.SeriesSnapshot::CalculateIndexForPosition(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	calculateCategoryBounds1: function (info, index, sideBySideIndex, val, series, zero) {
		var xLocation = series._xLocation;
		var yLocation = series._yLocation;
		info._value = val;
		info._valueIsNegative = val < zero;
		if (this._categoryAxisLocation == $.ig.AxisLocation.prototype.x) {
			var columnWidth = (sideBySideIndex < 0) ? this._itemSizeWithSpacing : this._itemSizeSideBySide;
			var x = (sideBySideIndex < 0) ? this.calcItemStartPositionWithSpacing(index) : this.calcItemStartPosition1(index, sideBySideIndex);
			var w = columnWidth;
			var zeroPoint = this.calculateVerticalValuePosition(zero, yLocation);
			var h;
			var y;
			var valY;
			if (val < zero) {
				valY = this.calculateVerticalValuePosition(val, yLocation);
				h = valY - zeroPoint;
				y = zeroPoint;
			} else {
				y = this.calculateVerticalValuePosition(val, yLocation);
				h = zeroPoint - y;
				valY = y;
			}
			info._boundsX = x;
			info._boundsY = y;
			info._boundsWidth = w;
			info._boundsHeight = h;
			info._valueLocationX = x + w / 2;
			info._valueLocationY = valY;
		} else if (this._categoryAxisLocation == $.ig.AxisLocation.prototype.y) {
			var columnHeight = (sideBySideIndex < 0) ? this._itemSizeWithSpacing : this._itemSizeSideBySide;
			var y1 = (sideBySideIndex < 0) ? this.calcItemStartPositionWithSpacing(index) : this.calcItemStartPosition1(index, sideBySideIndex);
			var h1 = columnHeight;
			var zeroPoint1 = this.calculateHorizontalValuePosition(zero, xLocation);
			var w1;
			var x1;
			var valX = this.calculateHorizontalValuePosition(val, xLocation);
			if (val < zero) {
				x1 = valX;
				w1 = zeroPoint1 - x1;
			} else {
				w1 = valX - zeroPoint1;
				x1 = zeroPoint1;
			}
			info._boundsX = x1;
			info._boundsY = y1;
			info._boundsWidth = w1;
			info._boundsHeight = h1;
			info._valueLocationX = valX;
			info._valueLocationY = y1 + h1 / 2;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateCategoryBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Double, Infragistics.SeriesObject, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateTrendValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	calculateTrendValueBounds: function (info, valueIndex, trendlineIndex, sideBySideIndex, series) {
		var val = this.trendValueForItem(valueIndex * this._valueInterval, trendlineIndex);
		this.calculateCategoryBounds(info, valueIndex, sideBySideIndex, val, series);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesSnapshot::CalculateTrendValueBounds(Infragistics.ItemLayoutInfo, System.Int32, System.Int32, System.Int32, Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesSnapshot::CanHaveAxisTitle()" />*/
	canHaveAxisTitle: function () {
		return this._seriesCount == 1 && this._legendLocation == $.ig.LegendLocation.prototype.none;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesSnapshot::CanHaveAxisTitle()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativeRect Infragistics.SeriesSnapshot::GetAdornmentBounds()" />*/
	getAdornmentBounds: function () {
		if (this._labelAngle != 0) {
			return new $.ig.CPRect(1, this._axisLinesFrameX - this._yAxisLeftFrameWidth / 2, this._axisLinesFrameY - this._axisLineThickness, this._axisLinesFrameWidth + (this._yAxisLeftFrameWidth + this._yAxisRightFrameWidth) / 2, this._axisLinesFrameHeight + (this._axisLineThickness * 2));
		}
		return new $.ig.CPRect(1, this._axisLinesFrameX - this._yAxisLeftFrameWidth / 2, this._axisLinesFrameY - this._xAxisTopFrameHeight / 2, this._axisLinesFrameWidth + (this._yAxisLeftFrameWidth + this._yAxisRightFrameWidth) / 2, this._axisLinesFrameHeight + (this._xAxisTopFrameHeight + this._xAxisBottomFrameHeight) / 2);
	}
	/*<EndMethod Name="Infragistics.NativeRect Infragistics.SeriesSnapshot::GetAdornmentBounds()" />*/
	,
	$type: new $.ig.Type('SeriesSnapshot', $.ig.SeriesSnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SeriesSnapshot" />*/

/*<BeginType Name="Infragistics.ScatterSeriesSnapshot" />*/

$.ig.util.defType('ScatterSeriesSnapshot', 'SeriesSnapshot', {
	_useRadiusScale: false,
	_minBubbleRadius: 0,
	_maxBubbleRadius: 0,
	_minRadiusValue: 0,
	_maxRadiusValue: 0,
	_legendItemsTitlePositions: null,
	_legendSizeScaleTitlePositions: null,
	_legendItemsTitle: null,
	_legendSizeScaleTitle: null,
	_minRadiusValueTextWidth: 0,
	_maxRadiusValueTextWidth: 0,
	_minRadiusText: null,
	_maxRadiusText: null,
	_radiusValueFormatType: 0,
	_radiusValueCurrencySymbol: null,
	_radiusValueNegativeNumberMode: 0,
	_legendItemBaseLine: 0,
	init: function (setDefaults) {
		$.ig.SeriesSnapshot.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._useRadiusScale = false;
			this._minBubbleRadius = this._maxBubbleRadius = NaN;
		}
		this._legendItemsTitlePositions = new Array(4);
		this._legendSizeScaleTitlePositions = new Array(4);
	},
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateStructInfo()" />*/
	calculateStructInfo: function () {
		this._maxRadiusValue = 0;
		this._minRadiusValue = 3.4028230607370965E+38;
		$.ig.SeriesSnapshot.prototype.calculateStructInfo.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateStructInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	calculateAxisMinMax: function (series) {
		var minX = series._minValues[0];
		var minY = series._minValues[1];
		var maxX = series._maxValues[0];
		var maxY = series._maxValues[1];
		if (series._xLocation == $.ig.XAxisLocation.prototype.top) {
			this._minTop = Math.min(this._minTop, minX);
			this._maxTop = Math.max(this._maxTop, maxX);
		}
		if (series._xLocation == $.ig.XAxisLocation.prototype.bottom) {
			this._minBottom = Math.min(this._minBottom, minX);
			this._maxBottom = Math.max(this._maxBottom, maxX);
		}
		if (series._yLocation == $.ig.YAxisLocation.prototype.left) {
			this._minLeft = Math.min(this._minLeft, minY);
			this._maxLeft = Math.max(this._maxLeft, maxY);
		}
		if (series._yLocation == $.ig.YAxisLocation.prototype.right) {
			this._minRight = Math.min(this._minRight, minY);
			this._maxRight = Math.max(this._maxRight, maxY);
		}
		if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
			this._minRadiusValue = Math.min(this._minRadiusValue, series._minValues[2]);
			this._maxRadiusValue = Math.max(this._maxRadiusValue, series._maxValues[2]);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateAxisMinMax(Infragistics.SeriesObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateSubsetData()" />*/
	calculateSubsetData: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateSubsetData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::FinishCalculations()" />*/
	finishCalculations: function () {
		if (this._hasBottomAxis && this._minBottom == this._maxBottom) {
			this._minBottom -= 1;
			this._maxBottom += 1;
		}
		if (this._hasTopAxis && this._minTop == this._maxTop) {
			this._minTop -= 1;
			this._maxTop += 1;
		}
		if (this._hasLeftAxis && this._minLeft == this._maxLeft) {
			this._minLeft -= 1;
			this._maxLeft += 1;
		}
		if (this._hasRightAxis && this._minRight == this._maxRight) {
			this._minRight -= 1;
			this._maxRight += 1;
		}
		var leftOffset, topOffset, rightOffset, bottomOffset;
		leftOffset = topOffset = rightOffset = bottomOffset = 0;
		this._numberOfMaxHorizontalNumericLabels = $.ig.truncate(Math.min(20, (this._canvasFrameWidth / this._maxValueLeftAxisTextWidth / 3)));
		this._numberOfMaxVerticalNumericLabels = $.ig.truncate(Math.min(20, (this._canvasFrameHeight / this._labelTextHeight / 3)));
		var sc = this._seriesList.length;
		for (var seriesIndex = 0; seriesIndex < sc; seriesIndex++) {
			var series = this._seriesList[seriesIndex];
			var minXpx = this.calculateHorizontalValuePosition(series._xLocation == $.ig.XAxisLocation.prototype.bottom ? this._minBottom : this._minTop, series._xLocation);
			var maxXpx = this.calculateHorizontalValuePosition(series._xLocation == $.ig.XAxisLocation.prototype.bottom ? this._maxBottom : this._maxTop, series._xLocation);
			var minYpx = this.calculateVerticalValuePosition(series._yLocation == $.ig.YAxisLocation.prototype.left ? this._minLeft : this._minRight, series._yLocation);
			var maxYpx = this.calculateVerticalValuePosition(series._yLocation == $.ig.YAxisLocation.prototype.left ? this._maxLeft : this._maxRight, series._yLocation);
			if (series._type == $.ig.CombinedDataItemType.prototype.bubble) {
				var xValues = series._data[0];
				var yValues = series._data[1];
				var rValues = series._data[2];
				for (var dataPointIndex = 0; dataPointIndex < rValues.length; dataPointIndex++) {
					var x = this.calculateHorizontalValuePosition(xValues[dataPointIndex], series._xLocation);
					var y = this.calculateVerticalValuePosition(yValues[dataPointIndex], series._yLocation);
					var r = rValues[dataPointIndex];
					if (this._useRadiusScale) {
						r = $.ig.CPMathUtility.prototype.getLinearSize(this._minRadiusValue, this._maxRadiusValue, this._minBubbleRadius, this._maxBubbleRadius, r);
					}
					if (x - r < minXpx) {
						leftOffset = Math.max(leftOffset, r);
					}
					if (x + r > maxXpx) {
						rightOffset = Math.max(rightOffset, r);
					}
					if (y - r < maxYpx) {
						topOffset = Math.max(topOffset, r);
					}
					if (y + r > minYpx) {
						bottomOffset = Math.max(bottomOffset, r);
					}
				}
			} else {
				var radius = series._type == $.ig.CombinedDataItemType.prototype.scatterOutlier ? this._markerRadius * 2 : this._markerRadius;
				if (this._canvasFrameX - radius < minXpx) {
					leftOffset = Math.max(leftOffset, radius);
				}
				if (this._canvasFrameX + this._canvasFrameWidth + radius > maxXpx) {
					rightOffset = Math.max(rightOffset, radius);
				}
				if (this._canvasFrameY - radius < maxYpx) {
					topOffset = Math.max(topOffset, radius);
				}
				if (this._canvasFrameY + this._canvasFrameHeight + radius > minYpx) {
					bottomOffset = Math.max(bottomOffset, radius);
				}
			}
		}
		var width = this._canvasFrameWidth * this._scale._width;
		var height = this._canvasFrameHeight * this._scale._height;
		if (this._hasTopAxis) {
			if (this._resolvedXAxisTopIsLogarithmic) {
				var rangeTop = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minTop, this._maxTop, this._minTopFixed, this._maxTopFixed, this._resolvedXAxisTopIsLogarithmic, this._xAxisTopLogBase);
				this._minTop = rangeTop[0];
				this._maxTop = rangeTop[1];
			} else {
				var topRange = (this._maxTop - this._minTop) * width / (width - (leftOffset + rightOffset));
				var topMinOffset = (leftOffset / width) * topRange;
				var topMaxOffset = (rightOffset / width) * topRange;
				this._minTop = this._minTop - topMinOffset;
				this._maxTop = this._maxTop + topMaxOffset;
			}
		}
		if (this._hasBottomAxis) {
			if (this._resolvedXAxisBottomIsLogarithmic) {
				var rangeBottom = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minBottom, this._maxBottom, this._minBottomFixed, this._maxBottomFixed, this._resolvedXAxisBottomIsLogarithmic, this._xAxisBottomLogBase);
				this._minBottom = rangeBottom[0];
				this._maxBottom = rangeBottom[1];
			} else {
				var bottomRange = (this._maxBottom - this._minBottom) * width / (width - (leftOffset + rightOffset));
				var bottomMinOffset = (leftOffset / width) * bottomRange;
				var bottomMaxOffset = (rightOffset / width) * bottomRange;
				this._minBottom = this._minBottom - bottomMinOffset;
				this._maxBottom = this._maxBottom + bottomMaxOffset;
			}
		}
		if (this._hasLeftAxis) {
			if (this._resolvedYAxisLeftIsLogarithmic) {
				var rangeLeft = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minLeft, this._maxLeft, this._minLeftFixed, this._maxLeftFixed, this._resolvedYAxisLeftIsLogarithmic, this._yAxisLeftLogBase);
				this._minLeft = rangeLeft[0];
				this._maxLeft = rangeLeft[1];
			} else {
				var leftRange = (this._maxLeft - this._minLeft) * height / (height - (bottomOffset + topOffset));
				var leftMinOffset = (bottomOffset / height) * leftRange;
				var leftMaxOffset = (topOffset / height) * leftRange;
				this._minLeft = this._minLeft - leftMinOffset;
				this._maxLeft = this._maxLeft + leftMaxOffset;
			}
		}
		if (this._hasRightAxis) {
			if (this._resolvedYAxisRightIsLogarithmic) {
				var rangeRight = $.ig.CPMathUtility.prototype.calculateRoundRange1(this._minRight, this._maxRight, this._minRightFixed, this._maxRightFixed, this._resolvedYAxisRightIsLogarithmic, this._yAxisRightLogBase);
				this._minRight = rangeRight[0];
				this._maxRight = rangeRight[1];
			} else {
				var rightRange = (this._maxRight - this._minRight) * height / (height - (bottomOffset + topOffset));
				var rightMinOffset = (bottomOffset / height) * rightRange;
				var rightMaxOffset = (topOffset / height) * rightRange;
				this._minRight = this._minRight - rightMinOffset;
				this._maxRight = this._maxRight + rightMaxOffset;
			}
		}
		if (this._resolvedYAxisLeftIsLogarithmic) {
			if (this._numericLeftAxisStepSize == 0) {
				this._numericLeftAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._visibleLeftMax - this._visibleLeftMin) / this._numberOfMaxVerticalNumericLabels, false, this._primaryAxisValueFormatFractionDigits, this._actualStack100ModeEnabled);
			}
			if (this._numericLeftAxisStepSize != 0) {
				var numIntervals = this._minLeft / this._numericLeftAxisStepSize;
				var minNumWholeIntervals = $.ig.truncate(numIntervals);
				if (minNumWholeIntervals != numIntervals) {
					minNumWholeIntervals -= this._minLeft < 0 ? 1 : 0;
					this._minLeft = minNumWholeIntervals * this._numericLeftAxisStepSize;
				}
				numIntervals = this._maxLeft / this._numericLeftAxisStepSize;
				var maxNumWholeIntervals = $.ig.truncate(numIntervals);
				if (numIntervals != maxNumWholeIntervals) {
					maxNumWholeIntervals += this._maxLeft < 0 ? 0 : 1;
					this._maxLeft = maxNumWholeIntervals * this._numericLeftAxisStepSize;
				}
				this._minLeft = Math.pow(this._yAxisLeftLogBase, minNumWholeIntervals * this._numericLeftAxisStepSize);
				this._maxLeft = Math.pow(this._yAxisLeftLogBase, maxNumWholeIntervals * this._numericLeftAxisStepSize);
				this._numberOfMaxVerticalNumericLabels = $.ig.truncate(((this._maxLeft - this._minLeft) / this._numericLeftAxisStepSize));
			}
		}
		if (this._resolvedYAxisRightIsLogarithmic) {
			if (this._numericRightAxisStepSize == 0) {
				this._numericRightAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber((this._visibleRightMax - this._visibleRightMin) / this._numberOfMaxVerticalNumericLabels, false);
			}
			if (this._numericRightAxisStepSize != 0) {
				var numIntervals1 = this._minRight / this._numericRightAxisStepSize;
				var minNumWholeIntervals1 = $.ig.truncate(numIntervals1);
				if (numIntervals1 != minNumWholeIntervals1) {
					minNumWholeIntervals1 -= this._minRight < 0 ? 1 : 0;
					this._minRight = minNumWholeIntervals1 * this._numericRightAxisStepSize;
				}
				numIntervals1 = this._maxRight / this._numericRightAxisStepSize;
				var maxNumWholeIntervals1 = $.ig.truncate(numIntervals1);
				if (numIntervals1 != maxNumWholeIntervals1) {
					maxNumWholeIntervals1 += this._maxRight < 0 ? 0 : 1;
					this._maxRight = maxNumWholeIntervals1 * this._numericRightAxisStepSize;
				}
				this._minRight = Math.pow(this._yAxisRightLogBase, minNumWholeIntervals1 * this._numericRightAxisStepSize);
				this._maxRight = Math.pow(this._yAxisRightLogBase, maxNumWholeIntervals1 * this._numericRightAxisStepSize);
				this._numberOfMaxVerticalNumericLabels = $.ig.truncate(((this._maxRight - this._minRight) / this._numericRightAxisStepSize));
			}
		}
		if (this._resolvedXAxisBottomIsLogarithmic) {
			if (this._numericBottomAxisStepSize == 0) {
				this._numericBottomAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._visibleBottomMax - this._visibleBottomMin) / this._numberOfMaxHorizontalNumericLabels, false, this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatFractionDigits : this._primaryAxisValueFormatFractionDigits, this._actualStack100ModeEnabled);
			}
			if (this._numericBottomAxisStepSize != 0) {
				var numIntervals2 = this._minBottom / this._numericBottomAxisStepSize;
				var minNumWholeIntervals2 = $.ig.truncate(numIntervals2);
				if (numIntervals2 != minNumWholeIntervals2) {
					minNumWholeIntervals2 -= this._minBottom < 0 ? 1 : 0;
					this._minBottom = minNumWholeIntervals2 * this._numericBottomAxisStepSize;
				}
				numIntervals2 = this._maxBottom / this._numericBottomAxisStepSize;
				var maxNumWholeIntervals2 = $.ig.truncate(numIntervals2);
				if (numIntervals2 != maxNumWholeIntervals2) {
					maxNumWholeIntervals2 += this._maxBottom < 0 ? 0 : 1;
					this._maxBottom = maxNumWholeIntervals2 * this._numericBottomAxisStepSize;
				}
				this._minBottom = Math.pow(this._xAxisBottomLogBase, minNumWholeIntervals2 * this._numericBottomAxisStepSize);
				this._maxBottom = Math.pow(this._xAxisBottomLogBase, maxNumWholeIntervals2 * this._numericBottomAxisStepSize);
				this._numberOfMaxHorizontalNumericLabels = $.ig.truncate(((this._maxBottom - this._minBottom) / this._numericBottomAxisStepSize));
			}
		}
		if (this._resolvedXAxisTopIsLogarithmic) {
			if (this._numericTopAxisStepSize == 0) {
				this._numericTopAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber((this._visibleTopMax - this._visibleTopMin) / this._numberOfMaxHorizontalNumericLabels, false);
			}
			if (this._numericTopAxisStepSize != 0) {
				var numIntervals3 = this._minTop / this._numericTopAxisStepSize;
				var minNumWholeIntervals3 = $.ig.truncate(numIntervals3);
				if (numIntervals3 != minNumWholeIntervals3) {
					minNumWholeIntervals3 -= this._minTop < 0 ? 1 : 0;
					this._minTop = minNumWholeIntervals3 * this._numericTopAxisStepSize;
				}
				numIntervals3 = this._maxTop / this._numericTopAxisStepSize;
				var maxNumWholeIntervals3 = $.ig.truncate(numIntervals3);
				if (numIntervals3 != maxNumWholeIntervals3) {
					maxNumWholeIntervals3 += this._maxTop < 0 ? 0 : 1;
					this._maxTop = maxNumWholeIntervals3 * this._numericTopAxisStepSize;
				}
				this._minTop = Math.pow(this._xAxisTopLogBase, minNumWholeIntervals3 * this._numericTopAxisStepSize);
				this._maxTop = Math.pow(this._xAxisTopLogBase, maxNumWholeIntervals3 * this._numericTopAxisStepSize);
				this._numberOfMaxHorizontalNumericLabels = $.ig.truncate(((this._maxTop - this._minTop) / this._numericTopAxisStepSize));
			}
		}
		this._visibleLeftMax = this._minLeft + (this._maxLeft - this._minLeft) * (1 - this._scale._y);
		this._visibleLeftMin = this._visibleLeftMax - (this._maxLeft - this._minLeft) / this._scale._height;
		this._visibleRightMax = this._minRight + (this._maxRight - this._minRight) * (1 - this._scale._y);
		this._visibleRightMin = this._visibleRightMax - (this._maxRight - this._minRight) / this._scale._height;
		this._visibleTopMin = this._minTop + (this._maxTop - this._minTop) * this._scale._x;
		this._visibleTopMax = this._visibleTopMin + (this._maxTop - this._minTop) / this._scale._width;
		this._visibleBottomMin = this._minBottom + (this._maxBottom - this._minBottom) * this._scale._x;
		this._visibleBottomMax = this._visibleBottomMin + (this._maxBottom - this._minBottom) / this._scale._width;
		if (!this._resolvedYAxisLeftIsLogarithmic) {
			this._numericLeftAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._visibleLeftMax - this._visibleLeftMin) / this._numberOfMaxVerticalNumericLabels, false, this._primaryAxisValueFormatFractionDigits, this._actualStack100ModeEnabled);
		}
		if (!this._resolvedYAxisRightIsLogarithmic) {
			this._numericRightAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber((this._visibleRightMax - this._visibleRightMin) / this._numberOfMaxVerticalNumericLabels, false);
		}
		if (!this._resolvedXAxisBottomIsLogarithmic) {
			this._numericBottomAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber1((this._visibleBottomMax - this._visibleBottomMin) / this._numberOfMaxHorizontalNumericLabels, false, this._useSecondaryAxisValueFormat ? this._secondaryAxisValueFormatFractionDigits : this._primaryAxisValueFormatFractionDigits, this._actualStack100ModeEnabled);
		}
		if (!this._resolvedXAxisTopIsLogarithmic) {
			this._numericTopAxisStepSize = $.ig.CPMathUtility.prototype.niceNumber((this._visibleTopMax - this._visibleTopMin) / this._numberOfMaxHorizontalNumericLabels, false);
		}
		this.calculateMinMaxRadiusStrings();
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::FinishCalculations()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SeriesSnapshot.prototype.copyTo.call(this, snapshot);
		var scatterSnapshot = snapshot;
		scatterSnapshot._useRadiusScale = this._useRadiusScale;
		scatterSnapshot._minBubbleRadius = this._minBubbleRadius;
		scatterSnapshot._maxBubbleRadius = this._maxBubbleRadius;
		scatterSnapshot._minRadiusValue = this._minRadiusValue;
		scatterSnapshot._maxRadiusValue = this._maxRadiusValue;
		scatterSnapshot._legendItemsTitle = this._legendItemsTitle;
		scatterSnapshot._legendItemsTitlePositions = this._legendItemsTitlePositions;
		scatterSnapshot._legendSizeScaleTitle = this._legendSizeScaleTitle;
		scatterSnapshot._legendSizeScaleTitlePositions = this._legendSizeScaleTitlePositions;
		scatterSnapshot._minRadiusValueTextWidth = this._minRadiusValueTextWidth;
		scatterSnapshot._maxRadiusValueTextWidth = this._maxRadiusValueTextWidth;
		scatterSnapshot._minRadiusText = this._minRadiusText;
		scatterSnapshot._maxRadiusText = this._maxRadiusText;
		scatterSnapshot._radiusValueFormatType = this._radiusValueFormatType;
		scatterSnapshot._radiusValueCurrencySymbol = this._radiusValueCurrencySymbol;
		scatterSnapshot._radiusValueNegativeNumberMode = this._radiusValueNegativeNumberMode;
		scatterSnapshot._legendItemBaseLine = this._legendItemBaseLine;
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SeriesSnapshot.prototype.transition.call(this, newSnapshot, percent);
		var scatterSnapshot = newSnapshot;
		scatterSnapshot._minBubbleRadius = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._minBubbleRadius, scatterSnapshot._minBubbleRadius, percent);
		scatterSnapshot._maxBubbleRadius = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._maxBubbleRadius, scatterSnapshot._maxBubbleRadius, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScatterSeriesSnapshot::CanHaveAxisTitle()" />*/
	canHaveAxisTitle: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScatterSeriesSnapshot::CanHaveAxisTitle()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScatterSeriesSnapshot::IsSizeScaleVisible()" />*/
	isSizeScaleVisible: function () {
		if (this._seriesList.length > 0) {
			return (this._seriesList[0])._type == $.ig.CombinedDataItemType.prototype.bubble;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScatterSeriesSnapshot::IsSizeScaleVisible()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateLegendSizeInfo()" />*/
	calculateLegendSizeInfo: function () {
		this._legendWidthToRemove = 0;
		this._legendHeighToRemove = 0;
		var numberOfLegendItems = 0;
		if (this._legendLocation != $.ig.LegendLocation.prototype.none) {
			if (this._legendFontSize < 0) {
				this._densifiedLegendFontSize = this._fontSize;
			} else {
				this._densifiedLegendFontSize = this._legendFontSize * this._density;
			}
			var largestText = 0;
			this._legendLabelColor = this._fontColor;
			this._legendFontName = this._fontName;
			this._legendItemSpacing = $.ig.ThemeManager.prototype.theme().padding15();
			this._legendMarkerSize = 9 * this._density;
			this._legendSmallPadding = $.ig.ThemeManager.prototype.theme().padding5();
			var legendMargin = 2 * this._density;
			var x = legendMargin;
			var y = 0;
			var numberOfSeries = this.getSeriesCount();
			this._legendItemsTitlePositions[0] = NaN;
			this._legendItemsTitlePositions[1] = NaN;
			this._legendItemsTitlePositions[2] = NaN;
			this._legendItemsTitlePositions[3] = NaN;
			if (!$.ig.ChartsUtility.prototype.stringIsNullOrEmpty(this._legendItemsTitle)) {
				var title = this._legendItemsTitle + ":";
				var textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(title, this._fontName, this._densifiedLegendFontSize);
				this._legendItemsTitlePositions[0] = x;
				this._legendItemsTitlePositions[1] = y;
				this._legendItemsTitlePositions[2] = textSize._width;
				this._legendItemsTitlePositions[3] = textSize._height;
				x += textSize._width + this._legendItemSpacing;
				var iconSize = this.getLegendIconSize($.ig.LegendIconShape.prototype.circle);
				for (var seriesIndex = 0; seriesIndex < numberOfSeries; seriesIndex++) {
					var legendPositions = this.getLegendPositions(seriesIndex);
					var itemCount = this.getNumberOfLegendItemsInSeries(seriesIndex);
					numberOfLegendItems += itemCount;
					for (var itemIndex = 0; itemIndex < itemCount; itemIndex++) {
						var offset = itemIndex * 4;
						var labelIndex = this._flipIndexOrder ? itemCount - (itemIndex + 1) : itemIndex;
						var label = this.getLabelForLegend(seriesIndex, labelIndex);
						if ($.ig.ChartsUtility.prototype.stringIsNullOrEmpty(label)) {
							legendPositions[offset] = NaN;
							legendPositions[offset + 1] = NaN;
							legendPositions[offset + 2] = NaN;
							legendPositions[offset + 3] = NaN;
							continue;
						}
						textSize = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(label, this._fontName, this._densifiedLegendFontSize);
						var w = Math.ceil(iconSize._width + this._legendSmallPadding + textSize._width);
						legendPositions[offset] = x;
						legendPositions[offset + 1] = y;
						legendPositions[offset + 2] = w;
						legendPositions[offset + 3] = textSize._height;
						largestText = Math.max(largestText, Math.max(this._legendMarkerSize, textSize._height));
						x += w + this._legendItemSpacing;
						if (x > this._width) {
							x = legendMargin;
							y += largestText + this._legendSmallPadding;
							legendPositions[offset] = x;
							legendPositions[offset + 1] = y;
							x += w + this._legendItemSpacing;
						}
						this._legendItemBaseLine = Math.max(this._legendItemBaseLine, $.ig.NativeUtility.prototype.utility().getTextBaseline(label, this._fontName, this._densifiedLegendFontSize));
					}
				}
				if (this._legendItemBaseLine == 0) {
					this._legendItemBaseLine = this._densifiedLegendFontSize;
				}
			}
			var isSizeScaleVisible = this.isSizeScaleVisible();
			if (isSizeScaleVisible) {
				if (!$.ig.ChartsUtility.prototype.stringIsNullOrEmpty(this._legendSizeScaleTitle)) {
					if (numberOfLegendItems > 0) {
						y += largestText + (this._legendSmallPadding * 2);
					}
					var title1 = this._legendSizeScaleTitle + ":";
					var textSize1 = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(title1, this._fontName, this._densifiedLegendFontSize);
					this._legendSizeScaleTitlePositions[0] = !$.ig.ChartsUtility.prototype.stringIsNullOrEmpty(this._legendItemsTitle) ? this._legendItemsTitlePositions[0] : x;
					this._legendSizeScaleTitlePositions[1] = y;
					this._legendSizeScaleTitlePositions[2] = textSize1._width;
					this._legendSizeScaleTitlePositions[3] = textSize1._height;
					this.calculateMinMaxRadiusStrings();
					textSize1 = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(this._minRadiusText, this._fontName, this._densifiedLegendFontSize);
					this._minRadiusValueTextWidth = textSize1._width;
					textSize1 = $.ig.NativeUtility.prototype.utility().measureTextIgnoreBaseline(this._maxRadiusText, this._fontName, this._densifiedLegendFontSize);
					this._maxRadiusValueTextWidth = textSize1._width;
				}
			}
			switch (this._legendLocation) {
				case $.ig.LegendLocation.prototype.top:
				case $.ig.LegendLocation.prototype.bottom:
					{
						this._legendLocationFrameWidth = this._width;
						this._legendLocationFrameHeight = largestText + this._legendItemSpacing + y;
						if (this._legendLocationFrameHeight > (this._height * 0.25) || (numberOfLegendItems < 1 && !isSizeScaleVisible)) {
							this._legendLocationFrameHeight = 0;
						} else {
							this._legendHeighToRemove = this._legendLocationFrameHeight;
						}
						break;
					}
				case $.ig.LegendLocation.prototype.none: break;
			}
		}
		this._legendTopOffset = (this._legendLocation == $.ig.LegendLocation.prototype.top) ? this._legendLocationFrameHeight : 0;
		this._legendLocationFrameY = (this._legendLocation == $.ig.LegendLocation.prototype.bottom) ? this._height - this._legendLocationFrameHeight : 0;
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateLegendSizeInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateMinMaxRadiusStrings()" />*/
	calculateMinMaxRadiusStrings: function () {
		this._minRadiusText = !$.ig.util.isNaN(this._minRadiusValue) ? $.ig.ChartsUtility.prototype.labelForValue1(this._minRadiusValue, true, this._radiusValueNegativeNumberMode, this._radiusValueFormatType, 0, this._radiusValueCurrencySymbol) : null;
		this._maxRadiusText = !$.ig.util.isNaN(this._maxRadiusValue) ? $.ig.ChartsUtility.prototype.labelForValue1(this._maxRadiusValue, true, this._radiusValueNegativeNumberMode, this._radiusValueFormatType, 0, this._radiusValueCurrencySymbol) : null;
	}
	/*<EndMethod Name="System.Void Infragistics.ScatterSeriesSnapshot::CalculateMinMaxRadiusStrings()" />*/
	,
	$type: new $.ig.Type('ScatterSeriesSnapshot', $.ig.SeriesSnapshot.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScatterSeriesSnapshot" />*/

/*<BeginType Name="Infragistics.SeriesObject" />*/

$.ig.util.defType('SeriesObject', 'KeyedObject', {
	init: function () {
		this._negativeColor = new $.ig.Number();
		this._trendlineColor = new $.ig.Number();
		$.ig.KeyedObject.prototype.init.call(this);
	},
	_data: null,
	_propertyNames: null,
	_title: null,
	_maxSubsetData: null,
	_minSubsetData: null,
	_dateData: null,
	_minDate: 0,
	_maxDate: 0,
	_splineXControlPoints: null,
	_splineYControlPoints: null,
	_splineMinYControlPoints: null,
	_splineMinTangentValue: 0,
	_splineMaxTangentValue: 0,
	_splineTangents: null,
	_splineMinYTangents: null,
	_stackKeys: null,
	_stackTitles: null,
	_labels: null,
	_stackTotals: null,
	_colors: null,
	_negativeColor: null,
	_type: 0,
	_yLocation: 0,
	_xLocation: 0,
	_strokeColors: null,
	_strokeWidth: 0,
	_longestLabel: null,
	_minValues: null,
	_maxValues: null,
	_trendlineData: null,
	_trendlineColor: null,
	_trendlineType: 0,
	_trendlinePeriod: 0,
	_legendPositions: null,
	_hideMarkers: false,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesObject::IsSideBySideSeries()" />*/
	isSideBySideSeries: function () {
		return this._type == $.ig.CombinedDataItemType.prototype.column || this._type == $.ig.CombinedDataItemType.prototype.candlestick || this._type == $.ig.CombinedDataItemType.prototype.ohlc || this._type == $.ig.CombinedDataItemType.prototype.rangeColumn || this._type == $.ig.CombinedDataItemType.prototype.waterfall;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesObject::IsSideBySideSeries()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesObject::IsFinancialSeries()" />*/
	isFinancialSeries: function () {
		return this._type == $.ig.CombinedDataItemType.prototype.ohlc || this._type == $.ig.CombinedDataItemType.prototype.candlestick;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesObject::IsFinancialSeries()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesObject::IsRangeSeries()" />*/
	isRangeSeries: function () {
		return this._type == $.ig.CombinedDataItemType.prototype.rangeArea || this._type == $.ig.CombinedDataItemType.prototype.rangeColumn;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesObject::IsRangeSeries()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesObject::IsStackSeries()" />*/
	isStackSeries: function () {
		return this._stackKeys.length > 1 && this._data.length == this._stackKeys.length;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesObject::IsStackSeries()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SeriesObject::IsScatterSeries()" />*/
	isScatterSeries: function () {
		return this._type == $.ig.CombinedDataItemType.prototype.scatter || this._type == $.ig.CombinedDataItemType.prototype.scatterLine || this._type == $.ig.CombinedDataItemType.prototype.bubble || this._type == $.ig.CombinedDataItemType.prototype.scatterOutlier;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SeriesObject::IsScatterSeries()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesObject::CopyTo(Infragistics.KeyedObject)" />*/
	copyTo: function (to) {
		$.ig.KeyedObject.prototype.copyTo.call(this, to);
		var series = to;
		series._trendlineColor = this._trendlineColor;
		series._trendlineType = this._trendlineType;
		series._trendlinePeriod = this._trendlinePeriod;
		series._type = this._type;
		series._title = this._title;
		series._xLocation = this._xLocation;
		series._yLocation = this._yLocation;
		series._longestLabel = this._longestLabel;
		series._negativeColor = this._negativeColor;
		series._data = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._data);
		series._maxSubsetData = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._maxSubsetData);
		series._minSubsetData = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._minSubsetData);
		series._splineXControlPoints = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._splineXControlPoints);
		series._splineYControlPoints = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._splineYControlPoints);
		series._splineMinYControlPoints = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._splineMinYControlPoints);
		series._splineTangents = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._splineTangents);
		series._splineMinYTangents = $.ig.ArrayUtility.prototype.copyMutableListOfDoubleArrays(this._splineMinYTangents);
		series._splineMinTangentValue = this._splineMinTangentValue;
		series._splineMaxTangentValue = this._splineMaxTangentValue;
		series._minValues = $.ig.ArrayUtility.prototype.copyDoubleArray(this._minValues);
		series._maxValues = $.ig.ArrayUtility.prototype.copyDoubleArray(this._maxValues);
		series._trendlineData = $.ig.ArrayUtility.prototype.copyDoubleArray(this._trendlineData);
		series._colors = $.ig.ArrayUtility.prototype.copyColorArray(this._colors);
		series._stackKeys = $.ig.ArrayUtility.prototype.copyCPList(this._stackKeys);
		series._stackTitles = $.ig.ArrayUtility.prototype.copyCPList(this._stackTitles);
		series._labels = $.ig.ArrayUtility.prototype.copyCPList(this._labels);
		series._propertyNames = $.ig.ArrayUtility.prototype.copyCPList(this._propertyNames);
		series._dateData = $.ig.ArrayUtility.prototype.copyLongArray(this._dateData);
		series._minDate = this._minDate;
		series._maxDate = this._maxDate;
		series._stackTotals = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._stackTotals);
		series._legendPositions = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._legendPositions);
		series._hideMarkers = this._hideMarkers;
		series._strokeColors = $.ig.ArrayUtility.prototype.copyColorArray(this._strokeColors);
		series._strokeWidth = this._strokeWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesObject::CopyTo(Infragistics.KeyedObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesObject::Transition(Infragistics.KeyedObject, System.Double)" />*/
	transition: function (next, percent) {
		$.ig.KeyedObject.prototype.transition.call(this, next, percent);
		var series = next;
		$.ig.ArrayUtility.prototype.transitionDoubleArray(this._minValues, series._minValues, percent);
		$.ig.ArrayUtility.prototype.transitionDoubleArray(this._maxValues, series._maxValues, percent);
		$.ig.ColorUtility.prototype.transitionColorArray(this._colors, series._colors, percent);
		$.ig.ColorUtility.prototype.transitionColorArray(this._strokeColors, series._strokeColors, percent);
		$.ig.ArrayUtility.prototype.transitionDoubleArray(this._trendlineData, series._trendlineData, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._data, series._data, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._maxSubsetData, series._maxSubsetData, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._minSubsetData, series._minSubsetData, percent);
		$.ig.ArrayUtility.prototype.transitionLongArray(this._dateData, series._dateData, percent);
		series._minDate = $.ig.CPMathUtility.prototype.transitionLong(this._minDate, series._minDate, percent);
		series._maxDate = $.ig.CPMathUtility.prototype.transitionLong(this._maxDate, series._maxDate, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._splineXControlPoints, series._splineXControlPoints, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._splineYControlPoints, series._splineYControlPoints, percent);
		$.ig.ArrayUtility.prototype.transitionMutableListOfDoubleArrays(this._splineMinYControlPoints, series._splineMinYControlPoints, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesObject::Transition(Infragistics.KeyedObject, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SeriesObject::Reset()" />*/
	reset: function () {
		this._data = this.resetData(this._data);
		this._maxSubsetData = this.resetData(this._maxSubsetData);
		this._minSubsetData = this.resetData(this._minSubsetData);
		this._splineYControlPoints = this.resetData(this._splineYControlPoints);
		this._splineMinYControlPoints = this.resetData(this._splineMinYControlPoints);
		if (this._dateData != null) {
			this._dateData = $.ig.ArrayUtility.prototype.createZeroedLongArray(this._dateData.length);
		}
		if (this._trendlineData != null) {
			this._trendlineData = $.ig.ArrayUtility.prototype.createZeroedDoubleArray(this._trendlineData.length);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SeriesObject::Reset()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.SeriesObject::ResetData(Infragistics.CPList)" />*/
	resetData: function (array) {
		if (array == null) {
			return null;
		}
		var count = array.length;
		var result = new $.ig.Array();
		for (var i = 0; i < count; i++) {
			var old = array[i];
			result.add($.ig.ArrayUtility.prototype.createZeroedDoubleArray(old.length));
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.SeriesObject::ResetData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.KeyedObject Infragistics.SeriesObject::CreateNew()" />*/
	createNew: function () {
		var obj = new $.ig.SeriesObject();
		this.copyTo(obj);
		obj.reset();
		return obj;
	}
	/*<EndMethod Name="Infragistics.KeyedObject Infragistics.SeriesObject::CreateNew()" />*/
	,
	$type: new $.ig.Type('SeriesObject', $.ig.KeyedObject.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SeriesObject" />*/

/*<BeginType Name="Infragistics.TooltipItem" />*/

$.ig.util.defType('TooltipItem', 'Object', {
	_color: null,
	_value: 0,
	_x: 0,
	_y: 0,
	_radius: 0,
	_date: 0,
	_valueLabel: null,
	_point: null,
	_bounds: null,
	_seriesKey: null,
	_seriesType: 0,
	_index: 0,
	_innerExtent: 0,
	_outerExtent: 0,
	_startAngle: 0,
	_endAngle: 0,
	_numberOfStacks: 0,
	_propertyNames: null,
	_legendText: null,
	_valueFormatted: null,
	_percentage: null,
	_title: null,
	_isSpacer: false,
	_seriesIndex: 0,
	_distanceFromTouchPoint: 0,
	_adjustedYPosition: 0,
	init: function () {
		this._color = new $.ig.Number();
		this._bounds = new $.ig.CPRect();
		$.ig.Object.prototype.init.call(this);
		this._color = this._index = this._seriesIndex = -1;
		this._value = this._x = this._y = this._radius = 0;
		this._date = 0;
		this._innerExtent = this._outerExtent = 0;
		this._startAngle = this._endAngle = 0;
		this._numberOfStacks = 0;
		this._bounds = new $.ig.CPRect(1, 0, 0, 0, 0);
	},
	/*<BeginProperty Name="System.Double Infragistics.TooltipItem::pointX()" />*/
	pointX: function () {
		return this._point._x;
	}
	/*<EndProperty Name="System.Double Infragistics.TooltipItem::pointX()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.TooltipItem::pointY()" />*/
	pointY: function () {
		return this._point._y;
	}
	/*<EndProperty Name="System.Double Infragistics.TooltipItem::pointY()" />*/
	,
	/*<BeginMethod Name="Infragistics.TooltipItem Infragistics.TooltipItem::Clone()" />*/
	clone: function () {
		var $self = this;
		var newItem = (function () {
			var $ret = new $.ig.TooltipItem();
			$ret._color = $self._color;
			$ret._value = $self._value;
			$ret._x = $self._x;
			$ret._y = $self._y;
			$ret._radius = $self._radius;
			$ret._date = $self._date;
			$ret._valueLabel = $self._valueLabel;
			$ret._point = $self._point;
			$ret._bounds = $self._bounds;
			$ret._seriesKey = $self._seriesKey;
			$ret._seriesType = $self._seriesType;
			$ret._index = $self._index;
			$ret._innerExtent = $self._innerExtent;
			$ret._outerExtent = $self._outerExtent;
			$ret._startAngle = $self._startAngle;
			$ret._endAngle = $self._endAngle;
			$ret._numberOfStacks = $self._numberOfStacks;
			$ret._propertyNames = $self._propertyNames;
			$ret._legendText = $self._legendText;
			$ret._valueFormatted = $self._valueFormatted;
			$ret._percentage = $self._percentage;
			$ret._title = $self._title;
			$ret._isSpacer = $self._isSpacer;
			$ret._seriesIndex = $self._seriesIndex;
			$ret._distanceFromTouchPoint = $self._distanceFromTouchPoint;
			return $ret;
		}());
		return newItem;
	}
	/*<EndMethod Name="Infragistics.TooltipItem Infragistics.TooltipItem::Clone()" />*/
	,
	$type: new $.ig.Type('TooltipItem', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TooltipItem" />*/

/*<BeginType Name="Infragistics.Treemap" />*/

$.ig.util.defType('Treemap', 'ScrollableBaseView', {
	init: function () {
		$.ig.ScrollableBaseView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Treemap::Setup()" />*/
	setup: function () {
		$.ig.ScrollableBaseView.prototype.setup.call(this);
		this._canvas._layers.add(new $.ig.TreemapLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.SnapshotBase Infragistics.Treemap::CreateNewSnapshot(System.Boolean)" />*/
	createNewSnapshot: function (setDefaults) {
		return new $.ig.TreemapSnapshot(setDefaults);
	}
	/*<EndMethod Name="Infragistics.SnapshotBase Infragistics.Treemap::CreateNewSnapshot(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Treemap::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		$.ig.ScrollableBaseView.prototype.handleTouchesMove.call(this, x, y);
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Treemap::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Treemap::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		$.ig.ScrollableBaseView.prototype.handlePointerMove.call(this, x, y);
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Treemap::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Treemap::StrokeColor()" />*/
	strokeColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._strokeColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._strokeColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.Treemap::StrokeColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Treemap::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._textColor = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative((this.__lastSnapshot)._textColor);
		}
	}
	/*<EndProperty Name="System.String Infragistics.Treemap::TextColor()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.Treemap::LabelHeightPercent()" />*/
	labelHeightPercent: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._labelHeightPercent = value;
			return value;
		} else {
			return (this.__lastSnapshot)._labelHeightPercent;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.Treemap::LabelHeightPercent()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.Treemap::ParentChildFontRatio()" />*/
	parentChildFontRatio: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._parentChildFontRatio = value;
			return value;
		} else {
			return (this.__lastSnapshot)._parentChildFontRatio;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.Treemap::ParentChildFontRatio()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Treemap::HeaderFont()" />*/
	headerFont: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._headerFont = value;
			return value;
		} else {
			return (this.__lastSnapshot)._headerFont;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Treemap::HeaderFont()" />*/
	,
	/*<BeginProperty Name="Infragistics.TreemapLayout Infragistics.Treemap::Layout()" />*/
	layout: function (value) {
		if (arguments.length === 1) {
			(this.__lastSnapshot)._layout = value;
			return value;
		} else {
			return (this.__lastSnapshot)._layout;
		}
	}
	/*<EndProperty Name="Infragistics.TreemapLayout Infragistics.Treemap::Layout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::SetColors(Infragistics.CPReadOnlyList)" />*/
	setColors: function (colors) {
		var snapshot = this.__lastSnapshot;
		snapshot._colors = new Array(colors.length);
		for (var i = 0; i < colors.length; i++) {
			var color = colors[i];
			snapshot._colors[i] = $.ig.ColorUtility.prototype.convertToInt(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::SetColors(Infragistics.CPReadOnlyList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::SetData(Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	setData: function (data, valueKey, labelKey, childrenKey) {
		var info = $.ig.NativeUtility.prototype.utility().setData(data, valueKey, null, null, null, null, labelKey, null, childrenKey, this.__lastSnapshot._treatNullValuesAsZeroes, null);
		var snapshot = this.__lastSnapshot;
		snapshot._rootData = this.getData(info);
		snapshot._depth = info._depth;
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::SetData(Infragistics.CPReadOnlyList, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.TreemapData Infragistics.Treemap::GetData(Infragistics.DataInfo)" />*/
	getData: function (info) {
		if (info._count == 0 || info._value1 == null) {
			return null;
		}
		var tmd = new $.ig.TreemapData();
		tmd._labels = info._labels;
		tmd._total = info._value1._total;
		tmd._values = info._value1._values;
		tmd._min = info._value1._min;
		tmd._max = info._value1._max;
		if (info._children != null) {
			tmd._children = new $.ig.Array();
			var count = info._children.length;
			for (var i = 0; i < count; i++) {
				var child = this.getData(info._children[i]);
				if (child == null) {
					tmd._children = null;
					break;
				}
				tmd._children.add(child);
			}
		}
		return tmd;
	}
	/*<EndMethod Name="Infragistics.TreemapData Infragistics.Treemap::GetData(Infragistics.DataInfo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::Update(System.Boolean)" />*/
	update: function (async) {
		$.ig.ScrollableBaseView.prototype.update.call(this, async);
		this.updateScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::Update(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.ScrollableBaseView.prototype.sizeChanged.call(this, w, h);
		this.updateScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::UpdateScroll()" />*/
	updateScroll: function () {
		this.setScrollViewMaximum(25);
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::UpdateScroll()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	initializeSnapshotTransition: function (fromSnapshot, toSnapshot) {
		$.ig.ScrollableBaseView.prototype.initializeSnapshotTransition.call(this, fromSnapshot, toSnapshot);
		var from = fromSnapshot;
		var to = toSnapshot;
		if (from._rootData == null) {
			from._rootData = new $.ig.TreemapData();
		}
		this.fixData(from._rootData, to._rootData);
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::InitializeSnapshotTransition(Infragistics.SnapshotBase, Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::FixData(Infragistics.TreemapData, Infragistics.TreemapData)" />*/
	fixData: function (from, to) {
		var fromCount = from._values == null ? 0 : from._values.length;
		var toCount = to._values == null ? 0 : to._values.length;
		if (fromCount > toCount) {
			this.fix(from, to, toCount, toCount);
		} else if (fromCount < toCount) {
			this.fix(from, to, toCount, fromCount);
		}
		if (to._children == null) {
			from._children = null;
		} else {
			if (from._children == null) {
				from._children = new $.ig.Array();
			}
			fromCount = from._children.length;
			toCount = to._children.length;
			if (fromCount > toCount) {
				var c = new $.ig.Array();
				for (var i = 0; i < toCount; i++) {
					c.add(from._children[i]);
				}
				from._children = c;
			} else if (fromCount < toCount) {
				var c1 = new $.ig.Array();
				for (var i1 = 0; i1 < fromCount; i1++) {
					c1.add(from._children[i1]);
				}
				for (var i2 = fromCount; i2 < toCount; i2++) {
					c1.add(new $.ig.TreemapData());
				}
				from._children = c1;
			}
			for (var i3 = 0; i3 < toCount; i3++) {
				var t = to._children[i3];
				var f = from._children[i3];
				this.fixData(f, t);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::FixData(Infragistics.TreemapData, Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::Fix(Infragistics.TreemapData, Infragistics.TreemapData, System.Int32, System.Int32)" />*/
	fix: function (from, to, newCount, loopCount) {
		var v = new Array(newCount);
		var x = $.ig.ArrayUtility.prototype.createZeroedNativeNumberArray(newCount);
		var y = $.ig.ArrayUtility.prototype.createZeroedNativeNumberArray(newCount);
		var w = $.ig.ArrayUtility.prototype.createZeroedNativeNumberArray(newCount);
		var h = $.ig.ArrayUtility.prototype.createZeroedNativeNumberArray(newCount);
		var labels = new $.ig.Array();
		for (var i = 0; i < loopCount; i++) {
			v[i] = from._values[i];
			x[i] = from._x[i];
			y[i] = from._y[i];
			w[i] = from._w[i];
			h[i] = from._h[i];
			labels.add(from._labels[i]);
		}
		for (var i1 = loopCount; i1 < newCount; i1++) {
			x[i1] = to._x[i1] + to._w[i1] / 2;
			y[i1] = to._y[i1] + to._h[i1] / 2;
			labels.add("");
		}
		from._values = v;
		from._x = x;
		from._y = y;
		from._w = w;
		from._h = h;
		from._labels = labels;
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::Fix(Infragistics.TreemapData, Infragistics.TreemapData, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.Treemap::GetItemsAtPoint(System.Single, System.Single)" />*/
	getItemsAtPoint: function (x, y) {
		var snapshot = this.__lastSnapshot;
		var items = new $.ig.Array();
		this.findItemAtPoint(snapshot._rootData, x, y, 0, items);
		return items;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.Treemap::GetItemsAtPoint(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Treemap::FindItemAtPoint(Infragistics.TreemapData, System.Single, System.Single, System.Int32, Infragistics.CPList)" />*/
	findItemAtPoint: function (data, px, py, depth, list) {
		if (data != null) {
			var count = data._x.length;
			if (count > 0) {
				var snapshot = this.__lastSnapshot;
				for (var i = 0; i < count; i++) {
					if ($.ig.CPMathUtility.prototype.rectContainsPoint(data._x[i], data._y[i], data._w[i], data._h[i], px, py)) {
						var item = new $.ig.TreemapItem();
						item._index = i;
						item._value = data._values[i];
						item._label = data._labels[i];
						item._x = data._x[i];
						item._y = data._y[i];
						item._w = data._w[i];
						item._h = data._h[i];
						item._color = $.ig.ColorUtility.prototype.convertToNative(snapshot.getColor(i));
						item._depth = depth;
						list.add(item);
						if (data._children != null) {
							var child = data._children[i];
							this.findItemAtPoint(child, px, py, depth + 1, list);
						}
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Treemap::FindItemAtPoint(Infragistics.TreemapData, System.Single, System.Single, System.Int32, Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('Treemap', $.ig.ScrollableBaseView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Treemap" />*/

/*<BeginType Name="Infragistics.TreemapItem" />*/

$.ig.util.defType('TreemapItem', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_value: 0,
	_label: null,
	_x: 0,
	_y: 0,
	_w: 0,
	_h: 0,
	_index: 0,
	_depth: 0,
	_color: null,
	$type: new $.ig.Type('TreemapItem', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapItem" />*/

/*<BeginType Name="Infragistics.TreemapCalculatorContext" />*/

$.ig.util.defType('TreemapCalculatorContext', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_itemCount: 0,
	_startIndex: 0,
	_area: 0,
	_remainingArea: 0,
	_x: 0,
	_y: 0,
	_w: 0,
	_h: 0,
	/*<BeginMethod Name="System.Void Infragistics.TreemapCalculatorContext::CopyTo(Infragistics.TreemapCalculatorContext)" />*/
	copyTo: function (to) {
		to._remainingArea = this._remainingArea;
		to._x = this._x;
		to._y = this._y;
		to._w = this._w;
		to._h = this._h;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapCalculatorContext::CopyTo(Infragistics.TreemapCalculatorContext)" />*/
	,
	$type: new $.ig.Type('TreemapCalculatorContext', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapCalculatorContext" />*/

/*<BeginType Name="Infragistics.TreemapData" />*/

$.ig.util.defType('TreemapData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_values: null,
	_labels: null,
	_total: 0,
	_min: 0,
	_max: 0,
	_children: null,
	_x: null,
	_y: null,
	_w: null,
	_h: null,
	/*<BeginMethod Name="System.Void Infragistics.TreemapData::CopyTo(Infragistics.TreemapData)" />*/
	copyTo: function (next) {
		next._values = $.ig.ArrayUtility.prototype.copyDoubleArray(this._values);
		next._labels = $.ig.ArrayUtility.prototype.copyCPList(this._labels);
		next._total = this._total;
		next._min = this._min;
		next._max = this._max;
		next._x = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._x);
		next._y = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._y);
		next._w = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._w);
		next._h = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._h);
		next._children = $.ig.TreemapData.prototype.copyTreemapData(this._children);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapData::CopyTo(Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.TreemapData::CopyTreemapData(Infragistics.CPList)" />*/
	copyTreemapData: function (array) {
		if (array == null) {
			return null;
		}
		var count = array.length;
		var result = new $.ig.Array();
		for (var i = 0; i < count; i++) {
			var to = new $.ig.TreemapData();
			var from = array[i];
			from.copyTo(to);
			result.add(to);
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.TreemapData::CopyTreemapData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapData::Transition(Infragistics.TreemapData, System.Double)" />*/
	transition: function (next, percent) {
		next._total = $.ig.CPMathUtility.prototype.transitionDouble(this._total, next._total, percent);
		next._min = $.ig.CPMathUtility.prototype.transitionDouble(this._min, next._min, percent);
		next._max = $.ig.CPMathUtility.prototype.transitionDouble(this._max, next._max, percent);
		$.ig.ArrayUtility.prototype.transitionDoubleArray(this._values, next._values, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._x, next._x, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._y, next._y, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._w, next._w, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._h, next._h, percent);
		$.ig.TreemapData.prototype.transitionTreemapData(this._children, next._children, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapData::Transition(Infragistics.TreemapData, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapData::TransitionTreemapData(Infragistics.CPList, Infragistics.CPList, System.Double)" />*/
	transitionTreemapData: function (from, to, percent) {
		if (from == null || to == null) {
			return;
		}
		var count = from.length;
		for (var i = 0; i < count; i++) {
			var f = from[i];
			var t = to[i];
			f.transition(t, percent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapData::TransitionTreemapData(Infragistics.CPList, Infragistics.CPList, System.Double)" />*/
	,
	$type: new $.ig.Type('TreemapData', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapData" />*/

/*<BeginType Name="Infragistics.TreemapSnapshot" />*/

$.ig.util.defType('TreemapSnapshot', 'SnapshotBase', {
	_rootData: null,
	_textColor: null,
	_strokeColor: null,
	_depth: 0,
	_colors: null,
	_headerFont: null,
	_labelHeightPercent: 0,
	_parentChildFontRatio: 0,
	_layout: 0,
	_labelHeightByDepth: null,
	_tooltipX: 0,
	_tooltipY: 0,
	init: function (setDefaults) {
		this._textColor = new $.ig.Number();
		this._strokeColor = new $.ig.Number();
		$.ig.SnapshotBase.prototype.init.call(this, setDefaults);
		if (setDefaults) {
			this._colors = new Array(4);
			this._colors[0] = $.ig.ColorUtility.prototype.createColor1(255, 220, 151, 54);
			this._colors[1] = $.ig.ColorUtility.prototype.createColor1(255, 10, 94, 123);
			this._colors[2] = $.ig.ColorUtility.prototype.createColor1(255, 117, 134, 63);
			this._colors[3] = $.ig.ColorUtility.prototype.createColor1(255, 148, 34, 92);
			this._textColor = $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255);
			this._strokeColor = $.ig.ColorUtility.prototype.createColor1(255, 100, 100, 100);
			this._headerFont = $.ig.ThemeManager.prototype.theme().drawingRegularFont();
			this._labelHeightPercent = 0.4;
			this._parentChildFontRatio = 0.2;
			this._layout = $.ig.TreemapLayout.prototype.sliceAndDice;
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	copyTo: function (snapshot) {
		$.ig.SnapshotBase.prototype.copyTo.call(this, snapshot);
		var next = snapshot;
		if (this._rootData != null) {
			next._rootData = new $.ig.TreemapData();
			this._rootData.copyTo(next._rootData);
		}
		next._colors = $.ig.ArrayUtility.prototype.copyColorArray(this._colors);
		next._headerFont = this._headerFont;
		next._textColor = this._textColor;
		next._strokeColor = this._strokeColor;
		next._labelHeightPercent = this._labelHeightPercent;
		next._parentChildFontRatio = this._parentChildFontRatio;
		next._layout = this._layout;
		next._depth = this._depth;
		next._labelHeightByDepth = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._labelHeightByDepth);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::CopyTo(Infragistics.SnapshotBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	transition: function (newSnapshot, percent) {
		$.ig.SnapshotBase.prototype.transition.call(this, newSnapshot, percent);
		var next = newSnapshot;
		this._rootData.transition(next._rootData, percent);
		$.ig.ColorUtility.prototype.transitionColorArray(this._colors, next._colors, percent);
		next._strokeColor = $.ig.ColorUtility.prototype.transitionColor(this._strokeColor, next._strokeColor, percent);
		next._textColor = $.ig.ColorUtility.prototype.transitionColor(this._textColor, next._textColor, percent);
		next._parentChildFontRatio = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._parentChildFontRatio, next._parentChildFontRatio, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._labelHeightByDepth, next._labelHeightByDepth, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::Transition(Infragistics.SnapshotBase, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.TreemapSnapshot::GetColor(System.Int32)" />*/
	getColor: function (index) {
		var colorCount = this._colors.length;
		var colorIndex = index;
		var alphaOffset = 0;
		while (colorIndex >= colorCount) {
			colorIndex -= colorCount;
			alphaOffset++;
		}
		var color = this._colors[colorIndex];
		if (alphaOffset > 0) {
			color = $.ig.ColorUtility.prototype.lightenColor(color, (0.1 * alphaOffset));
		}
		return color;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.TreemapSnapshot::GetColor(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::Invalidate()" />*/
	invalidate: function () {
		$.ig.SnapshotBase.prototype.invalidate.call(this);
		if (this._width > 0 && this._height > 0 && this._rootData != null) {
			var context = new $.ig.TreemapCalculatorContext();
			context._w = this._width * this._scale._width;
			context._h = this._height * this._scale._height;
			context._x = -context._w * this._scale._x;
			context._y = -context._h * this._scale._y;
			this._labelHeightByDepth = new Array(this._depth + 1);
			var minLabelHeight = 15 * this._density;
			for (var i = 0; i <= this._depth; i++) {
				this._labelHeightByDepth[i] = (Math.max(Math.min(this._width, this._height) * (this._labelHeightPercent / 10), minLabelHeight) / (1 + (i * this._parentChildFontRatio)));
			}
			var count = this._rootData._values.length;
			if (count > 0) {
				switch (this._layout) {
					case $.ig.TreemapLayout.prototype.squarified:
						{
							$.ig.TreemapSnapshot.prototype.squarify(context, this._rootData, this, 0);
							break;
						}
					case $.ig.TreemapLayout.prototype.strip:
						{
							$.ig.TreemapSnapshot.prototype.strip(context, this._rootData, this, context._w > context._h, 0);
							break;
						}
					case $.ig.TreemapLayout.prototype.sliceAndDice:
						{
							$.ig.TreemapSnapshot.prototype.sliceAndDice(context, this._rootData, this, context._w > context._h, 0);
							break;
						}
					default: break;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.TreemapSnapshot::Worst(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Single)" />*/
	worst: function (context, data, layoutSize, sizeCoef) {
		if (context._itemCount == 0) {
			return 3.4028230607370965E+38;
		}
		var sumArea = 0;
		var minArea = 3.4028230607370965E+38;
		var maxArea = 1 - 3.4028230607370965E+38;
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			var area = (data._values[i] * sizeCoef);
			if (minArea > area) {
				minArea = area;
			}
			if (maxArea < area) {
				maxArea = area;
			}
			sumArea += area;
		}
		var ratio1 = (layoutSize * layoutSize * maxArea) / (sumArea * sumArea);
		var ratio2 = (sumArea * sumArea) / (layoutSize * layoutSize * minArea);
		return Math.max(ratio1, ratio2);
	}
	/*<EndMethod Name="System.Single Infragistics.TreemapSnapshot::Worst(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddColumn(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	addColumn: function (context, data) {
		var width = Math.round((context._area / context._remainingArea) * context._w);
		var posY = context._y;
		var bottom = posY + context._h;
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			if (bottom < posY) {
				continue;
			}
			var value = data._values[i];
			var height = Math.floor((value / context._area) * context._h);
			data._x[i] = context._x;
			data._y[i] = posY;
			data._w[i] = width;
			data._h[i] = height;
			posY += height;
		}
		$.ig.TreemapSnapshot.prototype.distributeRemainingHeight(context, data, bottom - posY);
		context._x += width;
		context._w = (context._w < width) ? 0 : context._w - width;
		context._remainingArea -= context._area;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddColumn(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::DistributeRemainingWidth(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	distributeRemainingWidth: function (context, data, remainingWidth) {
		while (remainingWidth > 0) {
			var offset = 0;
			for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
				if (remainingWidth > 0) {
					var additionalWidth = (remainingWidth > 1) ? 1 : remainingWidth;
					data._x[i] += offset;
					data._w[i] += additionalWidth;
					remainingWidth -= additionalWidth;
					offset += additionalWidth;
				} else {
					data._x[i] += offset;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::DistributeRemainingWidth(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::DistributeRemainingHeight(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	distributeRemainingHeight: function (context, data, remainingHeight) {
		while (remainingHeight > 0) {
			var offset = 0;
			for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
				if (remainingHeight > 0) {
					var additionalHeight = (remainingHeight > 1) ? 1 : remainingHeight;
					data._y[i] += offset;
					data._h[i] += additionalHeight;
					remainingHeight -= additionalHeight;
					offset += additionalHeight;
				} else {
					data._y[i] += offset;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::DistributeRemainingHeight(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddRow(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	addRow: function (context, data) {
		var height = Math.round((context._area / context._remainingArea) * context._h);
		var posX = context._x;
		var right = posX + context._w;
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			if (right < posX) {
				continue;
			}
			var value = data._values[i];
			var width = Math.floor((value / context._area) * context._w);
			data._x[i] = posX;
			data._y[i] = context._y;
			data._w[i] = width;
			data._h[i] = height;
			posX += width;
		}
		$.ig.TreemapSnapshot.prototype.distributeRemainingWidth(context, data, right - posX);
		context._y += height;
		context._h = (context._h < height) ? 0 : context._h - height;
		context._remainingArea -= context._area;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddRow(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddItems(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	addItems: function (context, data) {
		if (context._itemCount < 1) {
			return;
		}
		if (context._w > context._h) {
			$.ig.TreemapSnapshot.prototype.addColumn(context, data);
		} else {
			$.ig.TreemapSnapshot.prototype.addRow(context, data);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddItems(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::InitData(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	initData: function (context, data) {
		var count = data._values.length;
		data._x = new Array(count);
		data._y = new Array(count);
		data._w = new Array(count);
		data._h = new Array(count);
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::InitData(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::Squarify(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Int32)" />*/
	squarify: function (context, data, snapshot, currentDepth) {
		$.ig.TreemapSnapshot.prototype.initData(context, data);
		context._remainingArea = data._total;
		var sizeCoef = ((context._w * context._h) / context._remainingArea);
		var count = data._values.length;
		for (var i = 0; i < count; i++) {
			var value = data._values[i];
			var layoutSize = Math.min(context._w, context._h);
			var ratio1 = $.ig.TreemapSnapshot.prototype.worst(context, data, layoutSize, sizeCoef);
			context._itemCount++;
			context._area += value;
			var ratio2 = $.ig.TreemapSnapshot.prototype.worst(context, data, layoutSize, sizeCoef);
			var percent = 1;
			if (data._min != data._max) {
				percent = 1 - ((value - data._min) / (data._max - data._min));
			}
			if (ratio1 <= ratio2) {
				context._itemCount--;
				context._area -= value;
				$.ig.TreemapSnapshot.prototype.addItems(context, data);
				context._startIndex = i;
				context._itemCount = 1;
				context._area = value;
			}
		}
		$.ig.TreemapSnapshot.prototype.addItems(context, data);
		if (data._children != null && data._children.length > 0) {
			for (var i1 = 0; i1 < count; i1++) {
				var child = data._children[i1];
				$.ig.TreemapSnapshot.prototype.setupChildContext(context, data, i1, snapshot, currentDepth);
				$.ig.TreemapSnapshot.prototype.squarify(context, child, snapshot, currentDepth + 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::Squarify(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::Strip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Boolean, System.Int32)" />*/
	strip: function (context, data, snapshot, isLandscape, currentDepth) {
		$.ig.TreemapSnapshot.prototype.initData(context, data);
		context._remainingArea = data._total;
		var sizeCoef = ((context._w * context._h) / context._remainingArea);
		var stripLength = (isLandscape) ? context._w : context._h;
		var prevContext = new $.ig.TreemapCalculatorContext();
		context.copyTo(prevContext);
		var count = data._values.length;
		for (var i = 0; i < count; i++) {
			var value = data._values[i];
			var percent = 1;
			if (data._min != data._max) {
				percent = 1 - ((value - data._min) / (data._max - data._min));
			}
			var avgRatio1 = $.ig.TreemapSnapshot.prototype.calculateAverageStripRatio(context, data, stripLength, sizeCoef);
			context._itemCount++;
			context._area += value;
			var avgRatio2 = $.ig.TreemapSnapshot.prototype.calculateAverageStripRatio(context, data, stripLength, sizeCoef);
			if (avgRatio1 < avgRatio2) {
				if (prevContext._itemCount > 0) {
					$.ig.TreemapSnapshot.prototype.addStrip(prevContext, data, sizeCoef, isLandscape);
					prevContext.copyTo(context);
				}
				prevContext._startIndex = context._startIndex;
				prevContext._area = context._area - value;
				prevContext._itemCount = context._itemCount - 1;
				context._startIndex = i;
				context._itemCount = 1;
				context._area = value;
			}
		}
		var previousRatio = $.ig.TreemapSnapshot.prototype.calculateAverageStripRatio(prevContext, data, stripLength, sizeCoef);
		var currentRatio = $.ig.TreemapSnapshot.prototype.calculateAverageStripRatio(context, data, stripLength, sizeCoef);
		var mergedContext = new $.ig.TreemapCalculatorContext();
		prevContext.copyTo(mergedContext);
		mergedContext._startIndex = prevContext._startIndex;
		mergedContext._area = prevContext._area + context._area;
		mergedContext._itemCount = prevContext._itemCount + context._itemCount;
		var mergedRatio = $.ig.TreemapSnapshot.prototype.calculateAverageStripRatio(mergedContext, data, stripLength, sizeCoef);
		if (mergedRatio < (previousRatio + currentRatio) / 2) {
			$.ig.TreemapSnapshot.prototype.addStrip(mergedContext, data, sizeCoef, isLandscape);
		} else {
			$.ig.TreemapSnapshot.prototype.addStrip(prevContext, data, sizeCoef, isLandscape);
			prevContext.copyTo(context);
			$.ig.TreemapSnapshot.prototype.addStrip(context, data, sizeCoef, isLandscape);
		}
		if (data._children != null && data._children.length > 0) {
			for (var i1 = 0; i1 < count; i1++) {
				var child = data._children[i1];
				$.ig.TreemapSnapshot.prototype.setupChildContext(context, data, i1, snapshot, currentDepth);
				$.ig.TreemapSnapshot.prototype.strip(context, child, snapshot, !isLandscape, currentDepth + 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::Strip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Boolean)" />*/
	addStrip: function (context, data, sizeCoef, isLandscape) {
		if (context._itemCount == 0) {
			return;
		}
		if (isLandscape) {
			$.ig.TreemapSnapshot.prototype.addHorizontalStrip(context, data, sizeCoef);
		} else {
			$.ig.TreemapSnapshot.prototype.addVerticalStrip(context, data, sizeCoef);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddHorizontalStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	addHorizontalStrip: function (context, data, sizeCoef) {
		if (context._area <= 0) {
			return;
		}
		var currentX = context._x;
		var stripThickness = (context._area * sizeCoef / context._w);
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			var nodeLength = (data._values[i] / context._area * context._w);
			data._x[i] = currentX;
			data._y[i] = context._y;
			data._w[i] = nodeLength;
			data._h[i] = stripThickness;
			currentX += nodeLength;
		}
		$.ig.TreemapSnapshot.prototype.distributeRemainingWidth(context, data, (context._x + context._w) - currentX);
		context._y += stripThickness;
		context._h = (context._h < stripThickness) ? 0 : (context._h - stripThickness);
		context._remainingArea -= context._area;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddHorizontalStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::AddVerticalStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	addVerticalStrip: function (context, data, sizeCoef) {
		if (context._area <= 0) {
			return;
		}
		var currentY = context._y;
		var stripThickness = (context._area * sizeCoef / context._h);
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			var nodeLength = (data._values[i] / context._area * context._h);
			data._x[i] = context._x;
			data._y[i] = currentY;
			data._w[i] = stripThickness;
			data._h[i] = nodeLength;
			currentY += nodeLength;
		}
		$.ig.TreemapSnapshot.prototype.distributeRemainingHeight(context, data, (context._y + context._h) - currentY);
		context._x += stripThickness;
		context._w = (context._w < stripThickness) ? 0 : (context._w - stripThickness);
		context._remainingArea -= context._area;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::AddVerticalStrip(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.TreemapSnapshot::CalculateAverageStripRatio(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Single)" />*/
	calculateAverageStripRatio: function (context, data, stripLength, sizeCoef) {
		if (context._itemCount == 0) {
			return 3.4028230607370965E+38;
		}
		var stripArea = context._area;
		var stripThickness = ((stripArea * sizeCoef) / stripLength);
		var averageCoef = 0;
		for (var i = context._startIndex; i < (context._startIndex + context._itemCount); i++) {
			var childLength = ((data._values[i] / stripArea) * stripLength);
			averageCoef += Math.max(childLength / stripThickness, stripThickness / childLength);
		}
		averageCoef /= context._itemCount;
		return averageCoef;
	}
	/*<EndMethod Name="System.Single Infragistics.TreemapSnapshot::CalculateAverageStripRatio(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::SliceAndDice(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Boolean, System.Int32)" />*/
	sliceAndDice: function (context, data, snapshot, isLandscape, currentDepth) {
		$.ig.TreemapSnapshot.prototype.initData(context, data);
		context._remainingArea = data._total;
		var remainingSpace = (isLandscape) ? context._h : context._w;
		var count = data._values.length;
		for (var i = 0; i < count; i++) {
			var value = data._values[i];
			context._itemCount++;
			context._area += value;
			var percent = 1;
			if (data._min != data._max) {
				percent = 1 - ((value - data._min) / (data._max - data._min));
			}
			var sizeCoef = (value / context._remainingArea);
			data._x[i] = context._x;
			data._y[i] = context._y;
			if (isLandscape) {
				data._w[i] = context._w;
				data._h[i] = remainingSpace * sizeCoef;
			} else {
				data._w[i] = remainingSpace * sizeCoef;
				data._h[i] = context._h;
			}
			if (isLandscape) {
				context._y += data._h[i];
				remainingSpace -= data._h[i];
			} else {
				context._x += data._w[i];
				remainingSpace -= data._w[i];
			}
			context._remainingArea -= value;
		}
		if (data._children != null && data._children.length > 0) {
			for (var i1 = 0; i1 < count; i1++) {
				var child = data._children[i1];
				$.ig.TreemapSnapshot.prototype.setupChildContext(context, data, i1, snapshot, currentDepth);
				$.ig.TreemapSnapshot.prototype.sliceAndDice(context, child, snapshot, !isLandscape, currentDepth + 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::SliceAndDice(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, Infragistics.TreemapSnapshot, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.TreemapSnapshot::SetupChildContext(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Int32, Infragistics.TreemapSnapshot, System.Int32)" />*/
	setupChildContext: function (context, parentData, parentIndex, snapshot, currentDepth) {
		var h = parentData._h[parentIndex];
		var w = parentData._w[parentIndex];
		var spaceForLabel = snapshot._labelHeightByDepth[currentDepth];
		var sideSpacing = 0;
		if (spaceForLabel > h * 0.3) {
			spaceForLabel = sideSpacing;
		}
		context._x = parentData._x[parentIndex] + sideSpacing;
		context._y = parentData._y[parentIndex] + spaceForLabel;
		context._w = w - sideSpacing * 2;
		context._h = h - spaceForLabel - sideSpacing;
		context._startIndex = 0;
		context._itemCount = 0;
		context._remainingArea = 0;
		context._area = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.TreemapSnapshot::SetupChildContext(Infragistics.TreemapCalculatorContext, Infragistics.TreemapData, System.Int32, Infragistics.TreemapSnapshot, System.Int32)" />*/
	,
	$type: new $.ig.Type('TreemapSnapshot', $.ig.SnapshotBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TreemapSnapshot" />*/

/*<BeginType Name="Infragistics.TrendCalculators" />*/

$.ig.util.defType('MCTrendCalculators', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.TrendCalculators::IsFitTrendline(Infragistics.TrendlineType)" />*/
	isFitTrendline: function (type) {
		return type == $.ig.TrendlineType.prototype.cubicFit || type == $.ig.TrendlineType.prototype.exponentialFit || type == $.ig.TrendlineType.prototype.linearFit || type == $.ig.TrendlineType.prototype.logarithmicFit || type == $.ig.TrendlineType.prototype.powerLawFit || type == $.ig.TrendlineType.prototype.quadraticFit || type == $.ig.TrendlineType.prototype.quarticFit || type == $.ig.TrendlineType.prototype.quinticFit;
	}
	/*<EndMethod Name="System.Boolean Infragistics.TrendCalculators::IsFitTrendline(Infragistics.TrendlineType)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::ProcessTrendline(, Infragistics.TrendlineType, System.Int32)" />*/
	processTrendline: function (seriesValues, type, period) {
		switch (type) {
			case $.ig.TrendlineType.prototype.cubicFit: return $.ig.MCTrendCalculators.prototype.calculatePolynomialFitCoefficients(seriesValues, 3);
			case $.ig.TrendlineType.prototype.exponentialFit: return $.ig.MCTrendCalculators.prototype.calculateExponentialFitCoefficients(seriesValues);
			case $.ig.TrendlineType.prototype.linearFit: return $.ig.MCTrendCalculators.prototype.calculatePolynomialFitCoefficients(seriesValues, 1);
			case $.ig.TrendlineType.prototype.logarithmicFit: return $.ig.MCTrendCalculators.prototype.calculateLogarithmicFitCoefficients(seriesValues);
			case $.ig.TrendlineType.prototype.powerLawFit: return $.ig.MCTrendCalculators.prototype.calculatePowerLawFitCoefficients(seriesValues);
			case $.ig.TrendlineType.prototype.quadraticFit: return $.ig.MCTrendCalculators.prototype.calculatePolynomialFitCoefficients(seriesValues, 2);
			case $.ig.TrendlineType.prototype.quarticFit: return $.ig.MCTrendCalculators.prototype.calculatePolynomialFitCoefficients(seriesValues, 4);
			case $.ig.TrendlineType.prototype.quinticFit: return $.ig.MCTrendCalculators.prototype.calculatePolynomialFitCoefficients(seriesValues, 5);
			case $.ig.TrendlineType.prototype.cumulativeMovingAverage: return $.ig.MCTrendCalculators.prototype.cMA(seriesValues);
			case $.ig.TrendlineType.prototype.exponentialMovingAverage: return $.ig.MCTrendCalculators.prototype.eMA(seriesValues, period);
			case $.ig.TrendlineType.prototype.modifiedMovingAverage: return $.ig.MCTrendCalculators.prototype.mMA(seriesValues, period);
			case $.ig.TrendlineType.prototype.simpleMovingAverage: return $.ig.MCTrendCalculators.prototype.sMA(seriesValues, period);
			case $.ig.TrendlineType.prototype.weightedMovingAverage: return $.ig.MCTrendCalculators.prototype.wMA(seriesValues, period);
		}
		return null;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::ProcessTrendline(, Infragistics.TrendlineType, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::WMA(, System.Int32)" />*/
	wMA: function (sequence, period) {
		var buffer = new Array(period);
		var trendValues = new Array(sequence.length);
		var i = 0;
		for (i = 0; i < period; i++) {
			buffer[i] = 0;
		}
		var total = NaN;
		var numerator = NaN;
		var weightsum = NaN;
		var wma = NaN;
		i = 0;
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				var cursor = i % period;
				if (i == 0) {
					weightsum = 1;
					wma = numerator = total = value;
				} else if (i < period) {
					weightsum += (i + 1);
					total += value;
					numerator += (i + 1) * value;
					wma = numerator / weightsum;
				} else {
					numerator = numerator + (period * value) - total;
					wma = numerator / weightsum;
					total = total + value - buffer[cursor];
				}
				buffer[cursor] = value;
			}
			trendValues[i] = wma;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::WMA(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::EMA(, System.Int32)" />*/
	eMA: function (sequence, period) {
		var i = 0;
		var ema = NaN;
		var alpha = 2 / (1 + period);
		var trendValues = new Array(sequence.length);
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				if (i < period) {
					ema = $.ig.util.isNaN(ema) ? value : (ema * i + value) / (i + 1);
				} else {
					ema = (value - ema) * alpha + ema;
				}
			}
			trendValues[i] = ema;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::EMA(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::MMA(, System.Int32)" />*/
	mMA: function (sequence, period) {
		var i = 0;
		var mma = NaN;
		var alpha = 1 / period;
		var trendValues = new Array(sequence.length);
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				if (i < period) {
					mma = $.ig.util.isNaN(mma) ? value : (mma * i + value) / (i + 1);
				} else {
					mma = (value - mma) * alpha + mma;
				}
			}
			trendValues[i] = mma;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::MMA(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::CMA()" />*/
	cMA: function (sequence) {
		var trendValues = new Array(sequence.length);
		var cma = NaN;
		var i = 0;
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				cma = $.ig.util.isNaN(cma) ? value : (cma * i + value) / (i + 1);
			}
			trendValues[i] = cma;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::CMA()" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::SMA(, System.Int32)" />*/
	sMA: function (sequence, period) {
		var trendValues = new Array(sequence.length);
		var buffer = new Array(period);
		var i = 0;
		for (i = 0; i < period; i++) {
			buffer[i] = 0;
		}
		i = 0;
		var sma = NaN;
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				var next = value / period;
				var cursor = i % period;
				if (i < period) {
					sma = $.ig.util.isNaN(sma) ? value : (sma * i + value) / (i + 1);
				} else {
					sma = sma + next - buffer[cursor];
				}
				buffer[cursor] = next;
			}
			trendValues[i] = sma;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::SMA(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::MovingSum(, System.Int32)" />*/
	movingSum: function (sequence, period) {
		var trendValues = new Array(sequence.length);
		var buffer = new Array(period);
		var i = 0;
		for (i = 0; i < period; i++) {
			buffer[i] = 0;
		}
		i = 0;
		var ms = NaN;
		for (var i1 = 0; i1 < sequence.length; i1++) {
			var value = sequence[i1];
			if (!$.ig.util.isNaN(value)) {
				var next = value;
				var cursor = i % period;
				if (i < period) {
					ms = $.ig.util.isNaN(ms) ? next : ms + next;
				} else {
					ms = ms + next - buffer[cursor];
				}
				buffer[cursor] = next;
			}
			trendValues[i] = ms;
			i++;
		}
		return trendValues;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::MovingSum(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::CalculateLogarithmicFitCoefficients()" />*/
	calculateLogarithmicFitCoefficients: function (sequence) {
		var itemCount = sequence.length;
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var N = 0;
		for (var i = 0; i < itemCount; ++i) {
			var xi = i + 1;
			var yi = sequence[i];
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && xi > 0) {
				var lnxi = Math.log(xi);
				s0 += yi * lnxi;
				s1 += yi;
				s2 += lnxi;
				s3 += lnxi * lnxi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var B = (N * s0 - s1 * s2) / (N * s3 - s2 * s2);
		var A = (s1 - B * s2) / N;
		return [ A, B ];
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::CalculateLogarithmicFitCoefficients()" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::CalculateExponentialFitCoefficients()" />*/
	calculateExponentialFitCoefficients: function (sequence) {
		var itemCount = sequence.length;
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var s4 = 0;
		var N = 0;
		for (var i = 0; i < itemCount; ++i) {
			var xi = i + 1;
			var yi = sequence[i];
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && yi > 0) {
				var lnyi = Math.log(yi);
				s0 += xi * xi * yi;
				s1 += yi * lnyi;
				s2 += xi * yi;
				s3 += xi * yi * lnyi;
				s4 += yi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var a = (s0 * s1 - s2 * s3) / (s4 * s0 - s2 * s2);
		var B = (s4 * s3 - s2 * s1) / (s4 * s0 - s2 * s2);
		return [ Math.exp(a), B ];
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::CalculateExponentialFitCoefficients()" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::CalculatePowerLawFitCoefficients()" />*/
	calculatePowerLawFitCoefficients: function (sequence) {
		var itemCount = sequence.length;
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var N = 0;
		for (var i = 0; i < itemCount; ++i) {
			var xi = i + 1;
			var yi = sequence[i];
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && xi > 0 && yi > 0) {
				var lnxi = Math.log(xi);
				var lnyi = Math.log(yi);
				s0 += lnxi * lnyi;
				s1 += lnxi;
				s2 += lnyi;
				s3 += lnxi * lnxi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var B = (N * s0 - s1 * s2) / (N * s3 - s1 * s1);
		var A = Math.exp((s2 - B * s1) / N);
		return [ A, B ];
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::CalculatePowerLawFitCoefficients()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.TrendCalculators::Solve(, )" />*/
	solve: function (a, b) {
		var n = a[0].length;
		var indxc = new Array(n);
		var indxr = new Array(n);
		var ipiv = new Array(n);
		for (var i = 0; i < n; i++) {
			ipiv[i] = 0;
		}
		for (var i1 = 0; i1 < n; i1++) {
			var big = 0;
			var irow = 0;
			var icol = 0;
			for (var j = 0; j < n; j++) {
				if (ipiv[j] != 1) {
					for (var k = 0; k < n; k++) {
						if (ipiv[k] == 0) {
							if (Math.abs(a[j][k]) >= big) {
								big = Math.abs(a[j][k]);
								irow = j;
								icol = k;
							}
						}
					}
				}
			}
			++(ipiv[icol]);
			if (irow != icol) {
				for (var j1 = 0; j1 < n; j1++) {
					var t = a[irow][j1];
					a[irow][j1] = a[icol][j1];
					a[icol][j1] = t;
				}
				{
					var t1 = b[irow];
					b[irow] = b[icol];
					b[icol] = t1;
				}
			}
			indxr[i1] = irow;
			indxc[i1] = icol;
			if (a[icol][icol] == 0) {
				return false;
			}
			var pivinv = 1 / a[icol][icol];
			a[icol][icol] = 1;
			for (var j2 = 0; j2 < n; j2++) {
				a[icol][j2] *= pivinv;
			}
			b[icol] *= pivinv;
			for (var j3 = 0; j3 < n; j3++) {
				if (j3 != icol) {
					var dum = a[j3][icol];
					a[j3][icol] = 0;
					for (var l = 0; l < n; l++) {
						a[j3][l] -= a[icol][l] * dum;
					}
					b[j3] -= b[icol] * dum;
				}
			}
		}
		for (var i2 = n - 1; i2 >= 0; i2--) {
			if (indxr[i2] != indxc[i2]) {
				for (var j4 = 0; j4 < n; j4++) {
					var t2 = a[j4][indxr[i2]];
					a[j4][indxr[i2]] = a[j4][indxc[i2]];
					a[j4][indxc[i2]] = t2;
				}
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.TrendCalculators::Solve(, )" />*/
	,
	/*<BeginMethod Name=" Infragistics.TrendCalculators::CalculatePolynomialFitCoefficients(, System.Int32)" />*/
	calculatePolynomialFitCoefficients: function (sequence, polynomialOrder) {
		var itemCount = sequence.length;
		var ps = new Array(1 + 2 * polynomialOrder);
		for (var i = 0; i < ps.length; i++) {
			ps[i] = 0;
		}
		var A = new Array(polynomialOrder + 1);
		var B = new Array(polynomialOrder + 1);
		for (var i1 = 0; i1 < polynomialOrder + 1; i1++) {
			A[i1] = new Array(polynomialOrder + 1);
		}
		for (var i2 = 0; i2 < B.length; i2++) {
			B[i2] = 0;
		}
		var N = 0;
		for (var i3 = 0; i3 < itemCount; ++i3) {
			var s = 1;
			var xi = i3 + 1;
			var yi = sequence[i3];
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi)) {
				for (var p = 0; p < ps.length; ++p) {
					ps[p] += s;
					s *= xi;
					N++;
				}
			}
		}
		if (N < polynomialOrder) {
			return null;
		}
		for (var i4 = 0; i4 <= polynomialOrder; ++i4) {
			for (var j = 0; j <= polynomialOrder; ++j) {
				A[i4][j] = ps[i4 + j];
			}
		}
		for (var i5 = 0; i5 < itemCount; ++i5) {
			var xi1 = i5 + 1;
			var yi1 = sequence[i5];
			if (!$.ig.util.isNaN(xi1) && !$.ig.util.isNaN(yi1)) {
				for (var j1 = 0; j1 <= polynomialOrder; ++j1) {
					B[j1] += (Math.pow(xi1, j1) * yi1);
				}
			}
		}
		return $.ig.MCTrendCalculators.prototype.solve(A, B) ? B : null;
	}
	/*<EndMethod Name=" Infragistics.TrendCalculators::CalculatePolynomialFitCoefficients(, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.TrendCalculators::PolynomialEvaluate(, System.Double)" />*/
	polynomialEvaluate: function (a, x) {
		if (a.length < 1 || !$.ig.NativeUtility.prototype.utility().numberIsFinite(x)) {
			return NaN;
		}
		var y = 0;
		for (var i = 0; i < a.length; ++i) {
			y += a[i] * Math.pow(x, i);
		}
		return y;
	}
	/*<EndMethod Name="System.Double Infragistics.TrendCalculators::PolynomialEvaluate(, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.TrendCalculators::LogarithmicEvaluate(, System.Double)" />*/
	logarithmicEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || !$.ig.NativeUtility.prototype.utility().numberIsFinite(x)) {
			return NaN;
		}
		return a[0] + a[1] * Math.log(x);
	}
	/*<EndMethod Name="System.Double Infragistics.TrendCalculators::LogarithmicEvaluate(, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.TrendCalculators::ExponentialEvaluate(, System.Double)" />*/
	exponentialEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || !$.ig.NativeUtility.prototype.utility().numberIsFinite(x)) {
			return NaN;
		}
		return a[0] * Math.exp(a[1] * x);
	}
	/*<EndMethod Name="System.Double Infragistics.TrendCalculators::ExponentialEvaluate(, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.TrendCalculators::PowerLawEvaluate(, System.Double)" />*/
	powerLawEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || !$.ig.NativeUtility.prototype.utility().numberIsFinite(x)) {
			return NaN;
		}
		return a[0] * Math.pow(x, a[1]);
	}
	/*<EndMethod Name="System.Double Infragistics.TrendCalculators::PowerLawEvaluate(, System.Double)" />*/
	,
	$type: new $.ig.Type('MCTrendCalculators', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.TrendCalculators" />*/

/*<BeginStatics Name="Infragistics.TextHorizontalAlignment" />*/

$.ig.TextHorizontalAlignment.prototype.left = 0;
$.ig.TextHorizontalAlignment.prototype.center = 1;
$.ig.TextHorizontalAlignment.prototype.right = 2;
/*<EndStatics Name="Infragistics.TextHorizontalAlignment" />*/

/*<BeginStatics Name="Infragistics.TextVerticalAlignment" />*/

$.ig.TextVerticalAlignment.prototype.top = 0;
$.ig.TextVerticalAlignment.prototype.center = 1;
/*<EndStatics Name="Infragistics.TextVerticalAlignment" />*/

/*<BeginStatics Name="Infragistics.LegendIconShape" />*/

$.ig.LegendIconShape.prototype.circle = 0;
$.ig.LegendIconShape.prototype.line = 1;
$.ig.LegendIconShape.prototype.square = 2;
$.ig.LegendIconShape.prototype.triangle = 3;
$.ig.LegendIconShape.prototype.diamond = 4;
$.ig.LegendIconShape.prototype.pyramid = 5;
$.ig.LegendIconShape.prototype.pentagon = 6;
$.ig.LegendIconShape.prototype.hexagon = 7;
$.ig.LegendIconShape.prototype.tetragram = 8;
$.ig.LegendIconShape.prototype.pentagram = 9;
$.ig.LegendIconShape.prototype.hexagram = 10;
/*<EndStatics Name="Infragistics.LegendIconShape" />*/

/*<BeginStatics Name="Infragistics.IndicatorDifferenceMode" />*/

$.ig.IndicatorDifferenceMode.prototype.percentage = 0;
$.ig.IndicatorDifferenceMode.prototype.value = 1;
$.ig.IndicatorDifferenceMode.prototype.valueAndPercentage = 2;
/*<EndStatics Name="Infragistics.IndicatorDifferenceMode" />*/

/*<BeginStatics Name="Infragistics.SliceLabelType" />*/

$.ig.SliceLabelType.prototype.percentage = 0;
$.ig.SliceLabelType.prototype.value = 1;
$.ig.SliceLabelType.prototype.valueAndPercentage = 2;
$.ig.SliceLabelType.prototype.labelAndPercentage = 3;
/*<EndStatics Name="Infragistics.SliceLabelType" />*/

/*<BeginStatics Name="Infragistics.RadiusAxisLocation" />*/

$.ig.RadiusAxisLocation.prototype.topRight = 0;
$.ig.RadiusAxisLocation.prototype.bottomRight = 1;
$.ig.RadiusAxisLocation.prototype.topLeft = 2;
$.ig.RadiusAxisLocation.prototype.bottomLeft = 3;
/*<EndStatics Name="Infragistics.RadiusAxisLocation" />*/

/*<BeginStatics Name="Infragistics.GaugeShape" />*/

$.ig.GaugeShape.prototype.none = 0;
$.ig.GaugeShape.prototype.circle = 1;
$.ig.GaugeShape.prototype.dash = 2;
$.ig.GaugeShape.prototype.arrowUp = 3;
$.ig.GaugeShape.prototype.arrowRight = 4;
$.ig.GaugeShape.prototype.arrowDown = 5;
$.ig.GaugeShape.prototype.arrowLeft = 6;
/*<EndStatics Name="Infragistics.GaugeShape" />*/

/*<BeginStatics Name="Infragistics.FunnelChartDisplayMode" />*/

$.ig.FunnelChartDisplayMode.prototype.dynamicHeightAndSlope = 0;
$.ig.FunnelChartDisplayMode.prototype.uniformHeight = 1;
$.ig.FunnelChartDisplayMode.prototype.uniformSlope = 2;
$.ig.FunnelChartDisplayMode.prototype.uniformHeightAndSlope = 3;
/*<EndStatics Name="Infragistics.FunnelChartDisplayMode" />*/

/*<BeginStatics Name="Infragistics.TreemapLayout" />*/

$.ig.TreemapLayout.prototype.squarified = 0;
$.ig.TreemapLayout.prototype.sliceAndDice = 1;
$.ig.TreemapLayout.prototype.strip = 2;
/*<EndStatics Name="Infragistics.TreemapLayout" />*/

/*<BeginStatics Name="Infragistics.LegendLocation" />*/

$.ig.LegendLocation.prototype.none = 0;
$.ig.LegendLocation.prototype.top = 1;
$.ig.LegendLocation.prototype.left = 2;
$.ig.LegendLocation.prototype.bottom = 3;
$.ig.LegendLocation.prototype.right = 4;
/*<EndStatics Name="Infragistics.LegendLocation" />*/

/*<BeginStatics Name="Infragistics.AngleAxisLabelOrientation" />*/

$.ig.AngleAxisLabelOrientation.prototype.noLabels = 0;
$.ig.AngleAxisLabelOrientation.prototype.arc = 1;
$.ig.AngleAxisLabelOrientation.prototype.spoke = 2;
$.ig.AngleAxisLabelOrientation.prototype.horizontal = 3;
/*<EndStatics Name="Infragistics.AngleAxisLabelOrientation" />*/

/*<BeginStatics Name="Infragistics.FunnelChartLabelLocation" />*/

$.ig.FunnelChartLabelLocation.prototype.noLabels = 0;
$.ig.FunnelChartLabelLocation.prototype.inside = 1;
$.ig.FunnelChartLabelLocation.prototype.outsideLeft = 2;
$.ig.FunnelChartLabelLocation.prototype.outsideRight = 3;
/*<EndStatics Name="Infragistics.FunnelChartLabelLocation" />*/

/*<BeginStatics Name="Infragistics.PieChartLabelLocation" />*/

$.ig.PieChartLabelLocation.prototype.noLabels = 0;
$.ig.PieChartLabelLocation.prototype.inside = 1;
$.ig.PieChartLabelLocation.prototype.insideEdge = 2;
$.ig.PieChartLabelLocation.prototype.outsideCenter = 3;
$.ig.PieChartLabelLocation.prototype.outsideCorner = 4;
$.ig.PieChartLabelLocation.prototype.outsideColumn = 5;
$.ig.PieChartLabelLocation.prototype.outsideEdge = 6;
/*<EndStatics Name="Infragistics.PieChartLabelLocation" />*/

/*<BeginStatics Name="Infragistics.OthersThresholdType" />*/

$.ig.OthersThresholdType.prototype.value = 0;
$.ig.OthersThresholdType.prototype.percent = 1;
/*<EndStatics Name="Infragistics.OthersThresholdType" />*/

/*<BeginStatics Name="Infragistics.ExplodedDisplayStyle" />*/

$.ig.ExplodedDisplayStyle.prototype.awayFromCenter = 0;
$.ig.ExplodedDisplayStyle.prototype.extendedRadius = 1;
$.ig.ExplodedDisplayStyle.prototype.highlightedEdge = 2;
/*<EndStatics Name="Infragistics.ExplodedDisplayStyle" />*/

/*<BeginStatics Name="Infragistics.HighlightMode" />*/

$.ig.HighlightMode.prototype.light = 0;
$.ig.HighlightMode.prototype.dark = 1;
$.ig.HighlightMode.prototype.custom = 2;
/*<EndStatics Name="Infragistics.HighlightMode" />*/

/*<BeginStatics Name="Infragistics.AdornmentType" />*/

$.ig.AdornmentType.prototype.none = 0;
$.ig.AdornmentType.prototype.tooltip = 1;
$.ig.AdornmentType.prototype.crosshairs = 2;
$.ig.AdornmentType.prototype.highlight = 4;
/*<EndStatics Name="Infragistics.AdornmentType" />*/

/*<BeginStatics Name="Infragistics.CrosshairsVisibility" />*/

$.ig.CrosshairsVisibility.prototype.both = 0;
$.ig.CrosshairsVisibility.prototype.none = 1;
$.ig.CrosshairsVisibility.prototype.horizontal = 2;
$.ig.CrosshairsVisibility.prototype.vertical = 3;
/*<EndStatics Name="Infragistics.CrosshairsVisibility" />*/

/*<BeginStatics Name="Infragistics.TooltipPinLocation" />*/

$.ig.TooltipPinLocation.prototype.floating = 0;
$.ig.TooltipPinLocation.prototype.top = 1;
$.ig.TooltipPinLocation.prototype.left = 2;
$.ig.TooltipPinLocation.prototype.bottom = 3;
$.ig.TooltipPinLocation.prototype.right = 4;
/*<EndStatics Name="Infragistics.TooltipPinLocation" />*/

/*<BeginStatics Name="Infragistics.TrendlineType" />*/

$.ig.TrendlineType.prototype.linearFit = 0;
$.ig.TrendlineType.prototype.quadraticFit = 1;
$.ig.TrendlineType.prototype.cubicFit = 2;
$.ig.TrendlineType.prototype.quarticFit = 3;
$.ig.TrendlineType.prototype.quinticFit = 4;
$.ig.TrendlineType.prototype.logarithmicFit = 5;
$.ig.TrendlineType.prototype.exponentialFit = 6;
$.ig.TrendlineType.prototype.powerLawFit = 7;
$.ig.TrendlineType.prototype.simpleMovingAverage = 8;
$.ig.TrendlineType.prototype.exponentialMovingAverage = 9;
$.ig.TrendlineType.prototype.modifiedMovingAverage = 10;
$.ig.TrendlineType.prototype.cumulativeMovingAverage = 11;
$.ig.TrendlineType.prototype.weightedMovingAverage = 12;
/*<EndStatics Name="Infragistics.TrendlineType" />*/

/*<BeginStatics Name="Infragistics.FormatSettingsPositiveNumberMode" />*/

$.ig.FormatSettingsPositiveNumberMode.prototype.noSign = 0;
$.ig.FormatSettingsPositiveNumberMode.prototype.plus = 1;
/*<EndStatics Name="Infragistics.FormatSettingsPositiveNumberMode" />*/

/*<BeginStatics Name="Infragistics.FormatSettingsNegativeNumberMode" />*/

$.ig.FormatSettingsNegativeNumberMode.prototype.minus = 0;
$.ig.FormatSettingsNegativeNumberMode.prototype.parens = 1;
/*<EndStatics Name="Infragistics.FormatSettingsNegativeNumberMode" />*/

/*<BeginStatics Name="Infragistics.FormatSettingsNumberType" />*/

$.ig.FormatSettingsNumberType.prototype.number = 0;
$.ig.FormatSettingsNumberType.prototype.percent = 1;
$.ig.FormatSettingsNumberType.prototype.currency = 2;
/*<EndStatics Name="Infragistics.FormatSettingsNumberType" />*/

/*<BeginStatics Name="Infragistics.ChartAxisMode" />*/

$.ig.ChartAxisMode.prototype.numericYCategoryX = 0;
$.ig.ChartAxisMode.prototype.categoryYNumericX = 1;
$.ig.ChartAxisMode.prototype.numericYNumericX = 2;
$.ig.ChartAxisMode.prototype.numericRadiusNumericValue = 3;
$.ig.ChartAxisMode.prototype.numericRadiusCategoryValue = 4;
$.ig.ChartAxisMode.prototype.categoryRadiusNumericValue = 5;
/*<EndStatics Name="Infragistics.ChartAxisMode" />*/

/*<BeginStatics Name="Infragistics.XAxisLocation" />*/

$.ig.XAxisLocation.prototype.top = 0;
$.ig.XAxisLocation.prototype.bottom = 1;
/*<EndStatics Name="Infragistics.XAxisLocation" />*/

/*<BeginStatics Name="Infragistics.YAxisLocation" />*/

$.ig.YAxisLocation.prototype.left = 0;
$.ig.YAxisLocation.prototype.right = 1;
/*<EndStatics Name="Infragistics.YAxisLocation" />*/

/*<BeginStatics Name="Infragistics.FinancialDataItemType" />*/

$.ig.FinancialDataItemType.prototype.ohlc = 0;
$.ig.FinancialDataItemType.prototype.candlestick = 1;
/*<EndStatics Name="Infragistics.FinancialDataItemType" />*/

/*<BeginStatics Name="Infragistics.ScatterDataItemType" />*/

$.ig.ScatterDataItemType.prototype.scatter = 0;
$.ig.ScatterDataItemType.prototype.bubble = 1;
$.ig.ScatterDataItemType.prototype.scatterLine = 2;
$.ig.ScatterDataItemType.prototype.scatterOutlier = 3;
/*<EndStatics Name="Infragistics.ScatterDataItemType" />*/

/*<BeginStatics Name="Infragistics.RangeCategoryDataItemType" />*/

$.ig.RangeCategoryDataItemType.prototype.rangeColumn = 0;
$.ig.RangeCategoryDataItemType.prototype.rangeArea = 1;
/*<EndStatics Name="Infragistics.RangeCategoryDataItemType" />*/

/*<BeginStatics Name="Infragistics.CategoryDataItemType" />*/

$.ig.CategoryDataItemType.prototype.column = 0;
$.ig.CategoryDataItemType.prototype.line = 1;
$.ig.CategoryDataItemType.prototype.area = 2;
$.ig.CategoryDataItemType.prototype.point = 3;
$.ig.CategoryDataItemType.prototype.waterfall = 4;
$.ig.CategoryDataItemType.prototype.spline = 5;
$.ig.CategoryDataItemType.prototype.splineArea = 6;
$.ig.CategoryDataItemType.prototype.stepLine = 7;
$.ig.CategoryDataItemType.prototype.stepArea = 8;
$.ig.CategoryDataItemType.prototype.outlierPoint = 9;
/*<EndStatics Name="Infragistics.CategoryDataItemType" />*/

/*<BeginStatics Name="Infragistics.CombinedDataItemType" />*/

$.ig.CombinedDataItemType.prototype.column = 0;
$.ig.CombinedDataItemType.prototype.line = 1;
$.ig.CombinedDataItemType.prototype.area = 2;
$.ig.CombinedDataItemType.prototype.point = 3;
$.ig.CombinedDataItemType.prototype.waterfall = 4;
$.ig.CombinedDataItemType.prototype.spline = 5;
$.ig.CombinedDataItemType.prototype.splineArea = 6;
$.ig.CombinedDataItemType.prototype.stepLine = 7;
$.ig.CombinedDataItemType.prototype.stepArea = 8;
$.ig.CombinedDataItemType.prototype.rangeColumn = 9;
$.ig.CombinedDataItemType.prototype.rangeArea = 10;
$.ig.CombinedDataItemType.prototype.scatter = 11;
$.ig.CombinedDataItemType.prototype.bubble = 12;
$.ig.CombinedDataItemType.prototype.scatterLine = 13;
$.ig.CombinedDataItemType.prototype.ohlc = 14;
$.ig.CombinedDataItemType.prototype.candlestick = 15;
$.ig.CombinedDataItemType.prototype.pie = 16;
$.ig.CombinedDataItemType.prototype.funnel = 17;
$.ig.CombinedDataItemType.prototype.outlierPoint = 18;
$.ig.CombinedDataItemType.prototype.scatterOutlier = 19;
/*<EndStatics Name="Infragistics.CombinedDataItemType" />*/

/*<BeginStatics Name="Infragistics.AxisLocation" />*/

$.ig.AxisLocation.prototype.y = 0;
$.ig.AxisLocation.prototype.x = 1;
$.ig.AxisLocation.prototype.none = 2;
$.ig.AxisLocation.prototype.both = 3;
/*<EndStatics Name="Infragistics.AxisLocation" />*/

/*<BeginStatics Name="Infragistics.CustomScrollHelper" />*/

$.ig.CustomScrollHelper.prototype.tIMER_THRESHOLD = 0.1;
$.ig.CustomScrollHelper.prototype.bOUNCE_DURATION = 1;
$.ig.CustomScrollHelper.prototype.tO_MILLISECONDS = 1000;
$.ig.CustomScrollHelper.prototype.mUlTIPLIER = 1;
$.ig.CustomScrollHelper.prototype.dECELERATION = -0.0020020026706730793;
/*<EndStatics Name="Infragistics.CustomScrollHelper" />*/

/*<BeginStatics Name="Infragistics.NativeUtility" />*/

$.ig.NativeUtility.prototype.__utility = null;
/*<EndStatics Name="Infragistics.NativeUtility" />*/

/*<BeginStatics Name="Infragistics.SnapshotBase" />*/

$.ig.SnapshotBase.prototype.hOVER_FADED_ALPHA = 128;
$.ig.SnapshotBase.prototype.cLICK_FADED_ALPHA = 51;
/*<EndStatics Name="Infragistics.SnapshotBase" />*/

/*<BeginStatics Name="Infragistics.SliceChartSnapshot" />*/

$.ig.SliceChartSnapshot.prototype.othersSliceIndex = -2;
/*<EndStatics Name="Infragistics.SliceChartSnapshot" />*/

/*<BeginStatics Name="Infragistics.BarTextMarkerLayer" />*/

$.ig.BarTextMarkerLayer.prototype._tEXT_STROKE_THICKNESS = 1;
/*<EndStatics Name="Infragistics.BarTextMarkerLayer" />*/

/*<BeginStatics Name="Infragistics.CategoryChartLayer" />*/

$.ig.CategoryChartLayer.prototype.lINE_THICKNESS = 2;
/*<EndStatics Name="Infragistics.CategoryChartLayer" />*/

/*<BeginStatics Name="Infragistics.PolarScatterChartLayer" />*/

$.ig.PolarScatterChartLayer.prototype.lINE_THICKNESS = 2;
$.ig.PolarScatterChartLayer.prototype.mARKER_STROKE_THICKNESS = 0.3;
/*<EndStatics Name="Infragistics.PolarScatterChartLayer" />*/

/*<BeginStatics Name="Infragistics.RadialChartLayer" />*/

$.ig.RadialChartLayer.prototype.lINE_THICKNESS = 2;
/*<EndStatics Name="Infragistics.RadialChartLayer" />*/

/*<BeginStatics Name="Infragistics.ScatterChartLayer" />*/

$.ig.ScatterChartLayer.prototype.lINE_THICKNESS = 2;
$.ig.ScatterChartLayer.prototype.mARKER_STROKE_THICKNESS = 2;
$.ig.ScatterChartLayer.prototype.fILL_OPACITY = 190;
/*<EndStatics Name="Infragistics.ScatterChartLayer" />*/

/*<BeginStatics Name="Infragistics.TextMarkerLayer" />*/

$.ig.TextMarkerLayer.prototype._tEXT_STROKE_THICKNESS = 4;
/*<EndStatics Name="Infragistics.TextMarkerLayer" />*/

/*<BeginStatics Name="Infragistics.PolarSeriesSnapshot" />*/

$.ig.PolarSeriesSnapshot.prototype.freeStandingAxisPadding = 5;
/*<EndStatics Name="Infragistics.PolarSeriesSnapshot" />*/

/*<BeginStatics Name="Infragistics.ScatterChart" />*/

$.ig.ScatterChart.prototype.hIT_TEST_MIN_RADIUS = 44;
/*<EndStatics Name="Infragistics.ScatterChart" />*/


} (jQuery));

