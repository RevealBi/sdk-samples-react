/*!@license
* Infragistics.Web.ClientUI ..\..\..\JSNative\infragistics.datalayer.js <build_number>
*
* Copyright (c) 2011-<year> Infragistics Inc.
*
* http://www.infragistics.com/
*
* Depends:
*     jquery-1.4.4.js
*     jquery.ui.core.js
*     jquery.ui.widget.js
*     infragistics.util.js
*/
(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine([
"Dictionary:a",
"Object:b",
"Type:c",
"Boolean:d",
"ValueType:e",
"Void:f",
"IConvertible:g",
"IFormatProvider:h",
"Number:i",
"String:j",
"IComparable:k",
"Number:l",
"IComparable$1:m",
"IEquatable$1:n",
"Number:o",
"Number:p",
"Number:q",
"Number:r",
"NumberStyles:s",
"Enum:t",
"Array:u",
"IList:v",
"ICollection:w",
"IEnumerable:x",
"IEnumerator:y",
"NotSupportedException:z",
"Error:aa",
"Number:ab",
"String:ac",
"StringComparison:ad",
"RegExp:ae",
"CultureInfo:af",
"DateTimeFormatInfo:ag",
"Calendar:ah",
"Date:ai",
"Number:aj",
"DayOfWeek:ak",
"DateTimeKind:al",
"CalendarWeekRule:am",
"NumberFormatInfo:an",
"CompareInfo:ao",
"CompareOptions:ap",
"IEnumerable$1:aq",
"IEnumerator$1:ar",
"IDisposable:as",
"StringSplitOptions:at",
"Number:au",
"Number:av",
"Number:aw",
"Number:ax",
"Number:ay",
"Number:az",
"Assembly:a0",
"Stream:a1",
"SeekOrigin:a2",
"RuntimeTypeHandle:a3",
"MethodInfo:a4",
"MethodBase:a5",
"MemberInfo:a6",
"ParameterInfo:a7",
"TypeCode:a8",
"ConstructorInfo:a9",
"PropertyInfo:ba",
"Array:bb",
"CompareCallback:bc",
"MulticastDelegate:bd",
"IntPtr:be",
"NativeDataLayerLocalizeUtil:bf",
"NativeStringUtility:bg",
"Script:bh",
"Dictionary:bi",
"Dictionary:bj",
"CPStringUtility:bk",
"NativeDataLayerImageUtility:bl",
"Element:bm",
"ElementAttributeCollection:bn",
"ElementCollection:bo",
"WebStyle:bp",
"ElementNodeType:bq",
"document:br",
"EventListener:bs",
"IElementEventHandler:bt",
"ElementEventHandler:bu",
"ElementAttribute:bv",
"ImageElement:bw",
"JQuery:bx",
"JQueryObject:by",
"JQueryPosition:bz",
"JQueryCallback:b0",
"JQueryEvent:b1",
"JQueryTouchEventObject:b2",
"JQueryUICallback:b3",
"JQueryDeferred:b4",
"JQueryPromise:b5",
"Action:b6",
"Action$1:b7",
"CloneListUtils:b8",
"CloneUtils:b9",
"NativeTypedDictionary:ca",
"JSDictionary:cb",
"IDashboardModelObject:cc",
"IJSONSerializable:cd",
"List$1:ce",
"IList$1:cf",
"ICollection$1:cg",
"IArray:ch",
"IArrayList:ci",
"Func$3:cj",
"Comparer$1:ck",
"IComparer:cl",
"IComparer$1:cm",
"DefaultComparer$1:cn",
"Comparison$1:co",
"ReadOnlyCollection$1:cp",
"Predicate$1:cq",
"NotImplementedException:cr",
"DashboardEnumDeserialization:cs",
"DashboardActionParameterSourceType:ct",
"DashboardActionTargetType:cu",
"DashboardActionTriggerType:cv",
"DashboardAggregationType:cw",
"DashboardBandColorType:cx",
"DashboardBandType:cy",
"DashboardBoundValueType:cz",
"DashboardChartType:c0",
"DashboardChoroplethMapColorType:c1",
"DashboardContentModeType:c2",
"DashboardDataType:c3",
"DashboardDateAggregationType:c4",
"DashboardDateRuleType:c5",
"DashboardFilterEnumType:c6",
"DashboardFontSizeType:c7",
"DashboardGaugeViewType:c8",
"DashboardGlobalFilterBindingOperatorType:c9",
"DashboardGlobalVariableValueType:da",
"DashboardHeatMapLocationType:db",
"DashboardIndicatorDifferenceMode:dc",
"DashboardIndicatorTargetDateFilterType:dd",
"DashboardIndicatorVisualizationType:de",
"DashboardLabelDisplayMode:df",
"DashboardMapLocationType:dg",
"DashboardMapVisualizationType:dh",
"DashboardNegativeFormatType:di",
"DashboardNumberFormattingType:dj",
"DashboardNumberRuleType:dk",
"DashboardScatterMapColorizationModeType:dl",
"DashboardShapeType:dm",
"DashboardSortingType:dn",
"DashboardStringRuleType:dp",
"DashboardTextAlignment:dq",
"DashboardTimeRuleType:dr",
"DashboardTreeMapBoundColorType:ds",
"DashboardTreeMapColorType:dt",
"DashboardTreeMapLayoutEnumType:du",
"DashboardTrendlineType:dv",
"DashboardXmlaDimensionEnumType:dw",
"DashboardXmlaElementType:dx",
"DashboardEnumSerialization:dy",
"IJSONDeserializable:dz",
"ActionParameter:d0",
"JsonUtility:d1",
"NativeDataLayerUtility:d2",
"Nullable$1:d3",
"DataLayerErrorBlock:d4",
"ReportPlusError:d5",
"ReportPlusErrorCode:d6",
"CPError:d7",
"StringBuilder:d8",
"Environment:d9",
"NativeDateUtility:ea",
"JSDate:eb",
"DateUtility:ec",
"NativeNullableUtility:ed",
"Array:ee",
"Array:ef",
"Math:eg",
"CPMonthInfo:eh",
"CPDateTime:ei",
"CPDateTimeFormatProvider:ej",
"DateRange:ek",
"CPJSONObject:el",
"NativeJSONUtility:em",
"JsonObjectWrapper:en",
"ActionsModel:eo",
"Action:ep",
"AdditionalTable:eq",
"DataSpec:er",
"BaseDataSourceItem:es",
"CompositeDataSourceItem:et",
"DataSourceItem:eu",
"DataSpecBindings:ev",
"UrlBinding:ew",
"Binding:ex",
"BindingSource:ey",
"FieldBindingSource:ez",
"ParameterBindingSource:e0",
"BindingTarget:e1",
"DataBasedGlobalFilterBindingTarget:e2",
"DateGlobalFilterBindingTarget:e3",
"GlobalVariableBindingTarget:e4",
"ResourceDataSpec:e5",
"TabularDataSpec:e6",
"SummarizationSpec:e7",
"SummarizationBaseField:e8",
"SummarizationDateField:e9",
"SummarizationDimensionField:fa",
"DateFormattingSpec:fb",
"FormattingSpec:fc",
"NumberFormattingSpec:fd",
"SummarizationRegularField:fe",
"SummarizationValueField:ff",
"ConditionalFormattingSpec:fg",
"Bound:fh",
"ConditionalFormattingBand:fi",
"BandBase:fj",
"GaugeBand:fk",
"Filter:fl",
"FilterValue:fm",
"DateTimeFilter:fn",
"NumberFilter:fo",
"StringFilter:fp",
"TimeFilter:fq",
"XmlaDateFilter:fr",
"XmlaRegularFilter:fs",
"XmlaFilterRule:ft",
"XmlaNumberFilterRule:fu",
"XmlaStringFilterRule:fv",
"AdHocExpandedElement:fw",
"Field:fx",
"FieldSettings:fy",
"DateTimeFieldSettings:fz",
"QuickFilter:f0",
"ServiceAdditionalTable:f1",
"DataProcessingTask:f2",
"DataProcessingInputField:f3",
"DataProcessingOutputField:f4",
"AmazonMLDataProcessingTask:f5",
"AzureMLDataProcessingTask:f6",
"BigQueryMLDataProcessingTask:f7",
"TextBoxDataSpec:f8",
"XmlaDataSpec:f9",
"XmlaDimensionElement:ga",
"XmlaFilter:gb",
"XmlaMember:gc",
"XmlaDimension:gd",
"XmlaHierarchyLevel:ge",
"XmlaHierarchy:gf",
"XmlaSet:gg",
"XmlaMeasure:gh",
"DashboardModelUtils:gi",
"DataSource:gj",
"BaseDataSource:gk",
"CompositeDataSource:gl",
"DataSetItem:gm",
"DashboardModel:gn",
"Widget:go",
"VisualizationSettings:gp",
"AssetVisualizationSettings:gq",
"ChartVisualizationSettings:gr",
"FinancialSettings:gs",
"ChoroplethMapVisualizationSettings:gt",
"GeoMapBaseVisualizationSettings:gu",
"DIYVisualizationSettings:gv",
"GaugeVisualizationSettings:gw",
"GridVisualizationSettings:gx",
"GridVisualizationStyle:gy",
"VisualizationColumnStyle:gz",
"HeatMapVisualizationSettings:g0",
"MapBaseVisualizationSettings:g1",
"HeatMapLayersSettings:g2",
"IndicatorTargetVisualizationSettings:g3",
"IndicatorVisualizationSettings:g4",
"MapVisualizationSettings:g5",
"PivotVisualizationSettings:g6",
"ScatterMapVisualizationSettings:g7",
"DashboardRectangle:g8",
"ScriptVisualizationSettings:g9",
"SingleRowVisualizationSettings:ha",
"SparklineVisualizationSettings:hb",
"TextBoxVisualizationSettings:hc",
"TreeMapVisualizationSettings:hd",
"TreeMapBound:he",
"VisualizationDataSpec:hf",
"AssetVisualizationDataSpec:hg",
"TabularColumnSpec:hh",
"BaseColumnSpec:hi",
"DimensionColumnSpec:hj",
"MeasureColumnSpec:hk",
"VisualizationEditorSectionInfo:hl",
"BubbleVisualizationDataSpec:hm",
"ScatterVisualizationDataSpec:hn",
"LabelsVisualizationDataSpec:ho",
"HierarchyVisualizationDataSpec:hp",
"CategoryVisualizationDataSpec:hq",
"ChoroplethMapVisualizationDataSpec:hr",
"SingleValueLabelsVisualizationDataSpec:hs",
"CompositeChartVisualizationDataSpec:ht",
"FinancialVisualizationDataSpec:hu",
"GridVisualizationDataSpec:hv",
"IndicatorBaseVisualizationDataSpec:hw",
"IndicatorTargetVisualizationDataSpec:hx",
"IndicatorVisualizationDataSpec:hy",
"LinearGaugeVisualizationDataSpec:hz",
"PivotVisualizationDataSpec:h0",
"ScatterMapVisualizationDataSpec:h1",
"SingleGaugeVisualizationDataSpec:h2",
"SingleValueVisualizationDataSpec:h3",
"SingleValueCategoryVisualizationDataSpec:h4",
"SparklineVisualizationDataSpec:h5",
"TimeSeriesVisualizationDataSpec:h6",
"TreeMapVisualizationDataSpec:h7",
"PostTransformation:h8",
"ForecastingTransformation:h9",
"TimeSeriesTransformation:ia",
"LinearRegressionTransformation:ib",
"MLPostTransformation:ic",
"OutliersTransformation:id",
"GlobalFilter:ie",
"AdHocHierarchyGlobalFilter:ig",
"HierarchicalGlobalFilter:ih",
"TabularGlobalFilter:ii",
"DataSourceBasedGlobalFilter:ij",
"GlobalFilterSelectedItem:ik",
"AdHocHierarchyGlobalFilterField:il",
"DateGlobalFilter:im",
"ParameterBasedHierarchyGlobalFilter:io",
"ParameterMapping:ip",
"ParentChildHierarchyGlobalFilter:iq",
"XmlaGlobalFilter:ir",
"GlobalVariable:is",
"NativeDictionaryUtility:it",
"DataLayerUtility:iu",
"ProviderKeys:iv",
"CloudProviderType:iw",
"TokenState:ix",
"OAuthTokenStateCallback:iy",
"CloudError:iz",
"CloudErrorType:i0",
"IRequestFactory:i1",
"IRequest:i2",
"OAuthProvider:i3",
"OAuthKeys:i4",
"Token:i5",
"BackingStoreObjectBase:i6",
"NativeRequestUtility:i7",
"WebRequest:i8",
"SessionResponseType:i9",
"JSAjaxBeforeSendRequestBlock:ja",
"SessionTask:jb",
"SessionDelegate:jc",
"JsonPushEventHandler:jd",
"ExecutionBlock:je",
"URLRequest:jf",
"RQHTTPUtils:jg",
"CookieStorageMode:jh",
"SessionHTTPMethod:ji",
"SessionContentType:jj",
"SessionTaskType:jk",
"SessionType:jl",
"FileReader:jm",
"ObjectBlock:jn",
"FileLoader:jo",
"JSAjaxSuccessReponseBlock:jp",
"JSAjaxErrorReponseBlock:jq",
"Request:jr",
"RequestBase:js",
"RequestSuccessBlock:jt",
"RequestErrorBlock:ju",
"SessionRequestProgressUpdateBlock:jv",
"SessionRequestFileDownloadedBlock:jw",
"ReadFileRequest:jx",
"CloudAccountUserInfo:jy",
"OAuthRequestBase:jz",
"SessionRequestBase:j0",
"NativeXmlProxy:j1",
"IOAuthRequest:j2",
"NativeThreadUtility:j3",
"CloudProviderTypeUtility:j4",
"BoxAccountUserInfo:j5",
"GoogleAccountUserInfo:j6",
"MicrosoftAccountUserInfo:j7",
"SharePointAccountUserInfo:j8",
"SharePointUser:j9",
"DropboxAccountUserInfo:ka",
"InfragisticsAccountUserInfo:kb",
"SalesForceAccountUserInfo:kc",
"DataDotWorldUserInfo:kd",
"JWTDecoder:ke",
"CloudAccountUserInfoFromJWT:kf",
"HubspotAccountUserInfo:kg",
"QuickBooksUserInfo:kh",
"CloudFile:ki",
"LinkedDocument:kj",
"ActivityTrackingBackingStore:kk",
"BackingStoreActivity:kl",
"GoogleAnalyticsActivity:km",
"ArrayUtility:kn",
"CPMathUtility:ko",
"CPRect:kp",
"CPPoint:kq",
"CPSize:kr",
"BoolForObjectBlock:ks",
"ObjectForObjectBlock:kt",
"SimpleIDItemBackingStore:ku",
"DocumentLink:kv",
"LinkedDocumentChildPagingInfo:kw",
"GenericCloudFile:kx",
"MicrosoftFile:ky",
"ContentProperties:kz",
"RequestsLocalizationKeys:k0",
"NativeRequestLocalizeUtil:k1",
"SharePointFile:k2",
"SharePointFileBase:k3",
"SharePointCloudFileBase:k4",
"GoogleFile:k5",
"DropboxFile:k6",
"BoxFile:k7",
"CloudFilePermissions:k8",
"CloudFileMemberPermissions:k9",
"SearchCapabilities:la",
"DropboxFileManager:lb",
"CloudFileManager:lc",
"ProvideCredentialsBlock:ld",
"RQCredentials:le",
"CloudFilesBlock:lf",
"CloudErrorBlock:lg",
"CloudFileBlock:lh",
"ProgressFileBlock:li",
"FileDownloadedBlock:lj",
"FileDownloadedIfModifiedBlock:lk",
"SearchQuery:ll",
"CloudAccountUserInfoBlock:lm",
"CloudFilePermissionsBlock:ln",
"DoubleStringBlock:lo",
"SimpleRequestManager:lp",
"StringBlock:lq",
"DropboxGetFilesRequest:lr",
"DropboxRequestBase:ls",
"DropboxOAuthProvider:lt",
"DropboxSearchFilesRequest:lu",
"DropboxDownloadFileRequest:lv",
"DropboxGetMetadataRequest:lw",
"DropboxGetSharedLinksRequest:lx",
"DropboxCreateSharedLinkRequest:ly",
"RequestWrapper:lz",
"DropboxCreateFolderRequest:l0",
"DropboxDeleteRequest:l1",
"DropboxGetAccountInfo:l2",
"DropboxDownloadLinkRequest:l3",
"DropboxCopyFileRequest:l4",
"DropboxFileRequest:l5",
"DropboxMoveFileRequest:l6",
"DropboxSharingGetFileMetadataRequest:l7",
"DropboxFileAction:l8",
"DropboxFileActionString:l9",
"DropboxFilePermissions:ma",
"DropboxSharingListFilePermissionsRequest:mb",
"DropboxSharingRemoveFileMemberRequest:mc",
"DropboxExplicitSharePermissions:md",
"DropboxSharingGetFolderMetadataRequest:me",
"DropboxFolderAction:mf",
"DropboxFolderActionString:mg",
"DropboxSharingAddFileMemberRequest:mh",
"DropboxAccessLevel:mi",
"DropboxAccessLevelString:mj",
"DropboxSharingShareFolderRequest:mk",
"DropboxSharingAddFolderMemberRequest:ml",
"DropboxSharingMountFolderRequest:mm",
"DropboxDownloadFileFromLinkRequest:mn",
"MicrosoftRequestBase:mo",
"MicrosoftOAuthProvider:mp",
"HttpRequestBuilder:mq",
"RequestErrorInterceptorBlock:mr",
"GenericRequest:ms",
"ProcessHeadersBlock:mt",
"RequestPreExecuteBlock:mu",
"ProcessResponseStreamBlock:mv",
"ProcessObjectBlock:mw",
"DropboxWriteMode:mx",
"NativeFileUtility:my",
"DropboxStartUploadSessionRequest:mz",
"DropboxAppendV2UploadSessionRequest:m0",
"DropboxFinishUploadSessionRequest:m1",
"GoogleFileManager:m2",
"GoogleGetFilesRequest:m3",
"GoogleRequestBase:m4",
"GoogleOAuthProvider:m5",
"GoogleGetSharedDrivesRequest:m6",
"GoogleSearchFilesRequest:m7",
"GoogleDownloadFileRequest:m8",
"GoogleGetMetadataRequest:m9",
"GoogleUploadDataChunkRequest:na",
"GoogleCreateFolderRequest:nb",
"GoogleCreateSharedLinkRequest:nc",
"GoogleTrashFileRequest:nd",
"GoogleDeleteFileRequest:ne",
"GoogleGetAccountInfo:nf",
"GoogleGetFileRequest:ng",
"GoogleDownloadLinkRequest:nh",
"GoogleFileRequest:ni",
"GoogleCopyFileRequest:nj",
"GoogleMoveFileRequest:nk",
"GoogleGetFilePermissionsRequest:nl",
"GoogleFilePermissions:nm",
"GoogleListFilePermissionsRequest:nn",
"GoogleDeleteFilePermissionsRequest:no",
"GoogleShareObjectRequest:np",
"GoogleDownloadFileFromLinkRequest:nq",
"GoogleDeleteSharedLinkRequest:nr",
"GoogleCreateOverwriteSessionRequest:ns",
"GoogleCreateUploadSessionRequest:nt",
"BoxFileManager:nu",
"BoxGetFilesRequest:nv",
"BoxRequestBase:nw",
"BoxOAuthProvider:nx",
"BoxSearchFilesRequest:ny",
"BoxDownloadFileRequest:nz",
"BoxGetMetadataRequest:n0",
"BoxCreateFolderRequest:n1",
"BoxGetSharedLinkRequest:n2",
"BoxCreateSharedLinkRequest:n3",
"BoxDeleteFolderRequest:n4",
"BoxDeleteFileRequest:n5",
"BoxGetAccountInfo:n6",
"BoxGetFolderInfoRequest:n7",
"BoxDownloadLinkRequest:n8",
"BoxFileRequest:n9",
"BoxCopyFileRequest:oa",
"BoxMoveFileRequest:ob",
"BoxFilePermissions:oc",
"BoxFileCollaborationPermissions:od",
"BoxGetUserCollaborationRequest:oe",
"BoxDeleteUserCollaborationRequest:of",
"BoxCreateCollaborationRequest:og",
"BoxDownloadFileFromLinkRequest:oh",
"SharePointFileManager:oi",
"SharePointOnPremSessionInfo:oj",
"SharePointLibrary:ok",
"SharePointListBase:ol",
"SharePointFolder:om",
"ItemsBlock:on",
"SharePointField:oo",
"SharePointView:op",
"SharePointGetPeopleRequest:oq",
"SharePointRequestBase:or",
"SharePointOAuthProvider:os",
"SharePointSite:ot",
"SharePointList:ou",
"SharePointListItem:ov",
"SharePointFileRequest:ow",
"SharePointCopyFileRequest:ox",
"SharePointMoveFileRequest:oy",
"SharePointSearchFilesRequest:oz",
"SharePointSearchQuery:o0",
"SharePointProviderUtility:o1",
"SharePointDeleteRequest:o2",
"SharePointDownloadLinkRequest:o3",
"SharePointGetFilePermissions:o4",
"SPPermissions:o5",
"PermissionKind:o6",
"SPSharingInfoPermissions:o7",
"SPCloudFileMemberPermissions:o8",
"SharePointGetSharingInformation:o9",
"SharePointRemoveShareLinkObject:pa",
"SharePointRemoveShareObject:pb",
"SharePointShareObject:pc",
"SharePointCreateSharedLinkRequest:pd",
"SharePointDownloadFileFromLinkRequest:pe",
"SharePointCreateFileRequest:pf",
"MicrosoftFileManager:pg",
"MicrosoftGetFilesRequest:ph",
"MicrosoftDownloadFileRequest:pi",
"MicrosoftCreateUploadSessionRequest:pj",
"MicrosoftUploadDataChunkRequest:pk",
"MicrosoftGetMetadataRequest:pl",
"MicrosoftSearchFilesRequest:pm",
"MicrosoftCreateFolderRequest:pn",
"MicrosoftDeleteDriveItemRequest:po",
"MicrosoftGetAccountInfo:pp",
"MicrosoftDownloadLinkRequest:pq",
"MicrosoftFileRequest:pr",
"MicrosoftCopyFileRequest:ps",
"MicrosoftMoveFileRequest:pt",
"MicrosoftItemPermissionsRequest:pu",
"MicrosoftItemPermissions:pv",
"MicrosoftDeleteItemPermissionsRequest:pw",
"MicrosoftItemAddPermissionsRequest:px",
"MicrosoftRole:py",
"MicrosoftRoleUtility:pz",
"MicrosoftGetSharedLinkRequest:p0",
"MicrosoftDownloadFileFromLinkRequest:p1",
"ProviderBase:p2",
"SharePointSubsite:p3",
"ProviderTokenState:p4",
"ProviderInfragisticsWebProxy:p5",
"InfragisticsWebCloudFileManager:p6",
"InfragisticsGetFilesInFolder:p7",
"InfragisticsAPIRequestBase:p8",
"InfragisticsRequestsConfiguration:p9",
"CloudTeamManager:qa",
"CloudTeam:qb",
"CloudTeamMember:qc",
"GoogleTeamManager:qd",
"GoogleGroupsUserBelongsToRequest:qe",
"GoogleTeam:qf",
"GoogleGroupMembersRequest:qg",
"GoogleTeamMember:qh",
"GoogleOrganizationRequest:qi",
"GoogleOrganization:qj",
"CloudOrganization:qk",
"GoogleGetPersonDetailsRequest:ql",
"MicrosoftTeamManager:qm",
"MicrosoftGroupsUserBelongsToRequest:qn",
"MicrosoftTeam:qo",
"MicrosoftGroupMembersRequest:qp",
"MicrosoftTeamMember:qq",
"MicrosoftOrganizationRequest:qr",
"MicrosoftOrganization:qs",
"DataSourceAssignment:qt",
"QuickBooksOAuthProvider:qu",
"EngineConstants:qv",
"FormattingDefaultSettings:qw",
"FormattingDefaultSettingsBase:qx",
"RevealFormattingDefaultSettings:qy",
"FilterUtility:qz",
"IDataTableResult:q0",
"IDataTable:q1",
"TableColumn:q2",
"TableCell:q3",
"DataColumn:q4",
"HierarchyCell:q5",
"RowDescriptor:q6",
"StringForObjectBlock:q7",
"CPObjectSortConverter:q8",
"CPSortConverter:q9",
"LongForObjectBlock:ra",
"DoubleForObjectBlock:rb",
"NativeSortUtility:rc",
"CustomSortComparisonBlock:rd",
"JoinCondition:re",
"EntitiesQueryField:rf",
"EntitiesQuery:rg",
"ExcelRange:rh",
"PublicWidget:ri",
"XmlaMeasureGroup:rj",
"NativeTypedDictionaryType:rk",
"DashboardItemLayoutDescription:rl",
"DashboardLayoutDescription:rm",
"DataLayerLockBlock:rn",
"DataLayerSuccessBlock:ro",
"DataLayerAsyncBlock:rp",
"DataLayerDataTableSuccessBlock:rq",
"DataLayerGetCachedDataSuccessBlock:rr",
"DataLayerWidgetSuccessBlock:rs",
"DataLayerNewWidgetSuccessBlock:rt",
"DataLayerWidgetDataResultSuccessBlock:ru",
"WidgetDataResult:rv",
"DataLayerXmlaMeasureListSuccessBlock:rw",
"DataLayerXmlaDimensionListSuccessBlock:rx",
"DataLayerXmlaDimensionElementListSuccessBlock:ry",
"DataLayerXmlaMeasureGroupListSuccessBlock:rz",
"DataLayerXmlaHierarchyListSuccessBlock:r0",
"DataLayerXmlaSetListSuccessBlock:r1",
"DataLayerXmlaLevelListSuccessBlock:r2",
"DataLayerSelectedItemPathsSuccessBlock:r3",
"DataLayerCachedTransformDatasetSuccessBlock:r4",
"DataLayerTransformDatasetSuccessBlock:r5",
"DataLayerCachedDataSuccessBlock:r6",
"DataLayerStringSuccessBlock:r7",
"DataLayerCacheKeySuccessBlock:r8",
"DataLayerCachedTabularDataSuccessBlock:r9",
"DataLayerCompareBlock:sa",
"DataLayerListSuccessBlock:sb",
"DataLayerBlock:sc",
"DataLayerScheduledAsyncBlock:sd",
"DataLayerFieldsSuccessBlock:se",
"TEUniqueOperationCompletionBlock:sf",
"TEUniqueOperationBlock:sg",
"DataLayerTaskBlock:sh",
"TaskHandle:si",
"ClientDataTable:sj",
"DataTableBase:sk",
"FieldTableColumn:sl",
"ComputedColumn:sm",
"PivotDimensionColumn:sn",
"IHierarchyColumn:so",
"PivotMeasureColumn:sp",
"PivotDateDimensionColumn:sq",
"PivotAdhocColumn:sr",
"XmlaHierarchyColumn:ss",
"XmlaMeasureColumn:st",
"XmlaAxisMember:su",
"InMemoryDataTable:sv",
"Sorter:sw",
"DataTableResult:sx",
"EditorExpressionInfo:sy",
"IInMemoryDataIterator:sz",
"RPExportChartObject:s0",
"RPExportDataObject:s1",
"RPExportDataObjectType:s2",
"RPExportDashboardObject:s3",
"SettingsConstants:s4",
"DataLayerResultFeatures:s5",
"TableSchemaColumn:s6",
"MetadataItem:s7",
"DataSourceItemMetadata:s8",
"ResourceItemMetadata:s9",
"ProviderMetadata:ta",
"PropertyDescriptor:tb",
"PropertyDescriptorType:tc",
"PropertyDescriptorScope:td",
"ValueDescriptor:te",
"DataSourceItemMetadataRoot:tf",
"BaseDataResult:tg",
"ValuesResult:th",
"HierarchicalFilterValue:ti",
"GlobalFilterValue:tj",
"GlobalFilterValuesResult:tk",
"HierarchicalGlobalFilterValue:tl",
"MetadataLayerConstants:tm",
"AzureServiceMetadata:tn",
"AzureServiceMetadataField:to",
"AdHocUtility:tp",
"AggregationChangeResult:tq",
"NativeExprUtility:tr",
"ExprFunctionDescriptor:ts",
"WebResourceUtils:tt",
"CPRegex:tu",
"CPRegexMatch:tv",
"CPRegexGroup:tw",
"CPRegexMatchEvaluator:tx",
"SqlBaseMetadataModel:ty",
"S3ProviderModel:tz",
"QuickBooksProviderModel:t0",
"JSONMappingType:t1",
"JSONMetadataEntry:t2",
"TabularDataSourceConfig:t3",
"ILogger:t4",
"LoggerFactory:t5",
"ILoggerFactory:t6",
"NOPLoggerFactory:t7",
"JSONEditorModel:t8",
"JSONPathExpression:t9",
"JSONPathBuilder:ua",
"DummyObject:ub",
"JSONTree:uc",
"JSONTreeNode:ud",
"IJSONTreeNode:ue",
"JSONDataType:uf",
"BOOLWrapper:ug",
"JSONProjectionInfo:uh",
"IJSONTreeNodeList:ui",
"JSONTreeNodeList:uj",
"GoogleAnalyticsProviderModel:uk",
"GoogleAdsProviderModel:ul",
"DataDotWorldProviderModel:um",
"BigQueryProviderModel:un",
"AthenaProviderModel:uo",
"AzureAnalysisServicesProviderModel:up",
"AzureAnalysisServicesOAuthProvider:uq",
"SnowflakeProviderModel:ur",
"AbstractEnumerable:us",
"Func$1:ut",
"AbstractEnumerator:uu",
"GenericEnumerable$1:uv",
"GenericEnumerator$1:uw"]);
/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType" />*/

$.ig.util.defType('JSONDataType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "String";
			case 1: return "Number";
			case 2: return "Boolean";
			case 3: return "Null";
			case 4: return "Array";
			case 5: return "Dictionary";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('JSONDataType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType" />*/

$.ig.util.defType('JSONMappingType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "JSONMappingTypePath";
			case 1: return "JSONMappingTypeDictionaryKey";
			case 2: return "JSONMappingTypeDictionaryValue";
			case 3: return "JSONMappingTypeExpression";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('JSONMappingType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType" />*/

$.ig.util.defType('PropertyDescriptorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "String";
			case 1: return "Bool";
			case 2: return "Int";
			case 3: return "Double";
			case 4: return "Date";
			case 5: return "DateTime";
			case 6: return "Time";
			case 7: return "Object";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('PropertyDescriptorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType" />*/

$.ig.util.defType('RPExportDataObjectType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "DataTable";
			case 1: return "Image";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('RPExportDataObjectType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode" />*/

$.ig.util.defType('ReportPlusErrorCode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "UnableToConnect";
			case 1: return "AuthenticationNotConfigured";
			case 2: return "AuthenticationFailed";
			case 3: return "NoNetworkConnection";
			case 4: return "FileNotFound";
			case 5: return "Other";
			case 6: return "DSNotReachableFromCloud";
			case 7: return "FilterError";
			case 8: return "HostUnreachable";
			case 9: return "OnPremDataLoading";
			case 10: return "CantTransposeData";
			case 11: return "SharedFileAccessFailed";
			case 12: return "DataSizeLimitReached_FileSize";
			case 13: return "DataSizeLimitReached_CellCount";
			case 14: return "DataSizeLimitReached_TotalStrings";
			case 15: return "DataSizeLimitReached_PivotCellCount";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ReportPlusErrorCode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType" />*/

$.ig.util.defType('DashboardXmlaElementType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Dimension";
			case 1: return "Level";
			case 2: return "Hierarchy";
			case 3: return "Member";
			case 4: return "Set";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardXmlaElementType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType" />*/

$.ig.util.defType('DashboardXmlaDimensionEnumType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Regular";
			case 1: return "Date";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardXmlaDimensionEnumType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType" />*/

$.ig.util.defType('DashboardTrendlineType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "LinearFit";
			case 2: return "QuadraticFit";
			case 3: return "CubicFit";
			case 4: return "QuarticFit";
			case 5: return "LogarithmicFit";
			case 6: return "ExponentialFit";
			case 7: return "PowerLawFit";
			case 8: return "SimpleAverage";
			case 9: return "ExponentialAverage";
			case 10: return "ModifiedAverage";
			case 11: return "CumulativeAverage";
			case 12: return "WeightedAverage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTrendlineType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType" />*/

$.ig.util.defType('DashboardTreeMapLayoutEnumType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Squarified";
			case 1: return "SliceAndDice";
			case 2: return "Strip";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTreeMapLayoutEnumType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType" />*/

$.ig.util.defType('DashboardTreeMapColorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "SingleColor";
			case 1: return "Gradient";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTreeMapColorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType" />*/

$.ig.util.defType('DashboardTreeMapBoundColorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Green";
			case 1: return "Red";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTreeMapBoundColorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType" />*/

$.ig.util.defType('DashboardTimeRuleType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "CustomRange";
			case 2: return "AllTime";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTimeRuleType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment" />*/

$.ig.util.defType('DashboardTextAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Inherit";
			case 1: return "Left";
			case 2: return "Center";
			case 3: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardTextAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType" />*/

$.ig.util.defType('DashboardStringRuleType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Equals";
			case 2: return "NotEquals";
			case 3: return "Contains";
			case 4: return "NotContains";
			case 5: return "StartsWith";
			case 6: return "EndsWith";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardStringRuleType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType" />*/

$.ig.util.defType('DashboardSortingType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Asc";
			case 2: return "Desc";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardSortingType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType" />*/

$.ig.util.defType('DashboardShapeType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Circle";
			case 2: return "ArrowUp";
			case 3: return "ArrowRight";
			case 4: return "ArrowDown";
			case 5: return "ArrowLeft";
			case 6: return "Dash";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardShapeType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType" />*/

$.ig.util.defType('DashboardScatterMapColorizationModeType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Single";
			case 1: return "Range";
			case 2: return "ConditionalFormatting";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardScatterMapColorizationModeType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType" />*/

$.ig.util.defType('DashboardNumberRuleType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "TopItems";
			case 2: return "TopPercent";
			case 3: return "BottomItems";
			case 4: return "BottomPercent";
			case 5: return "AboveAverage";
			case 6: return "AboveValue";
			case 7: return "BelowAverage";
			case 8: return "BelowValue";
			case 9: return "AboveEqualsValue";
			case 10: return "BelowEqualsValue";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardNumberRuleType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType" />*/

$.ig.util.defType('DashboardNumberFormattingType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Number";
			case 2: return "Percent";
			case 3: return "Currency";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardNumberFormattingType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType" />*/

$.ig.util.defType('DashboardNegativeFormatType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Empty";
			case 1: return "MinusSign";
			case 2: return "Parenthesis";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardNegativeFormatType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType" />*/

$.ig.util.defType('DashboardMapVisualizationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Standard";
			case 1: return "Satellite";
			case 2: return "Hybrid";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardMapVisualizationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType" />*/

$.ig.util.defType('DashboardMapLocationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Geocoding";
			case 1: return "LatitudeLongitudeSingleField";
			case 2: return "LatitudeLongitudeFields";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardMapLocationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode" />*/

$.ig.util.defType('DashboardLabelDisplayMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Percentage";
			case 1: return "Value";
			case 2: return "ValueAndPercentage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardLabelDisplayMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType" />*/

$.ig.util.defType('DashboardIndicatorVisualizationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "YearToDatePreviousYear";
			case 1: return "QuarterToDatePreviousQuarter";
			case 2: return "QuarterToDatePreviousYear";
			case 3: return "MonthToDatePreviousMonth";
			case 4: return "MonthToDatePreviousYear";
			case 5: return "LastYears";
			case 6: return "LastQuarters";
			case 7: return "LastMonths";
			case 8: return "LastDays";
			case 9: return "LastHours";
			case 10: return "LastMinutes";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardIndicatorVisualizationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType" />*/

$.ig.util.defType('DashboardIndicatorTargetDateFilterType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "AllTime";
			case 1: return "CustomRange";
			case 2: return "YearToDate";
			case 3: return "QuarterToDate";
			case 4: return "MonthToDate";
			case 5: return "PreviousYear";
			case 6: return "PreviousQuarter";
			case 7: return "PreviousMonth";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardIndicatorTargetDateFilterType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode" />*/

$.ig.util.defType('DashboardIndicatorDifferenceMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Percentage";
			case 1: return "Value";
			case 2: return "ValueAndPercentage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardIndicatorDifferenceMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType" />*/

$.ig.util.defType('DashboardHeatMapLocationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "LatitudeLongitudeSingleField";
			case 1: return "LatitudeLongitudeFields";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardHeatMapLocationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType" />*/

$.ig.util.defType('DashboardGlobalVariableValueType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "String";
			case 1: return "Number";
			case 2: return "DateTime";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardGlobalVariableValueType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType" />*/

$.ig.util.defType('DashboardGlobalFilterBindingOperatorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Equals";
			case 1: return "Contains";
			case 2: return "Between";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardGlobalFilterBindingOperatorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType" />*/

$.ig.util.defType('DashboardGaugeViewType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Circular";
			case 1: return "Linear";
			case 2: return "SingleValue";
			case 3: return "BulletGraph";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardGaugeViewType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType" />*/

$.ig.util.defType('DashboardFontSizeType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Small";
			case 1: return "Medium";
			case 2: return "Large";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardFontSizeType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType" />*/

$.ig.util.defType('DashboardFilterEnumType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "AllValues";
			case 1: return "FilterEmptyValues";
			case 2: return "SelectedValues";
			case 3: return "FilterByRule";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardFilterEnumType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType" />*/

$.ig.util.defType('DashboardDateRuleType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "CustomRange";
			case 2: return "LastWeek";
			case 3: return "LastMonth";
			case 4: return "LastYear";
			case 5: return "YearToDate";
			case 6: return "QuarterToDate";
			case 7: return "MonthToDate";
			case 8: return "AllTime";
			case 9: return "Yesterday";
			case 10: return "Today";
			case 11: return "ThisMonth";
			case 12: return "ThisQuarter";
			case 13: return "ThisYear";
			case 14: return "PreviousMonth";
			case 15: return "PreviousQuarter";
			case 16: return "PreviousYear";
			case 17: return "NextMonth";
			case 18: return "NextQuarter";
			case 19: return "NextYear";
			case 20: return "TrailingTwelveMonths";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardDateRuleType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType" />*/

$.ig.util.defType('DashboardDateAggregationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Year";
			case 1: return "Semester";
			case 2: return "Quarter";
			case 3: return "Month";
			case 4: return "Day";
			case 5: return "Hour";
			case 6: return "Minute";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardDateAggregationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType" />*/

$.ig.util.defType('DashboardDataType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "String";
			case 1: return "Number";
			case 2: return "Date";
			case 3: return "DateTime";
			case 4: return "Time";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardDataType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType" />*/

$.ig.util.defType('DashboardContentModeType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "AspectFit";
			case 1: return "AspectFill";
			case 2: return "FullSize";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardContentModeType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType" />*/

$.ig.util.defType('DashboardChoroplethMapColorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Highest";
			case 1: return "Lowest";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardChoroplethMapColorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType" />*/

$.ig.util.defType('DashboardChartType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Column";
			case 1: return "Line";
			case 2: return "Bar";
			case 3: return "Area";
			case 4: return "Spline";
			case 5: return "SplineArea";
			case 6: return "StepArea";
			case 7: return "StepLine";
			case 8: return "Composite";
			case 9: return "Bubble";
			case 10: return "Candlestick";
			case 11: return "OHLC";
			case 12: return "Pie";
			case 13: return "RadialLines";
			case 14: return "RadialColumns";
			case 15: return "RadialPie";
			case 16: return "Scatter";
			case 17: return "PolarArea";
			case 18: return "PolarLines";
			case 19: return "PolarScatter";
			case 20: return "StackedColumn";
			case 21: return "StackedArea";
			case 22: return "StackedBar";
			case 23: return "Doughnut";
			case 24: return "Funnel";
			case 25: return "TimeSeries";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardChartType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType" />*/

$.ig.util.defType('DashboardBoundValueType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NumberValue";
			case 1: return "LowestValue";
			case 2: return "HighestValue";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardBoundValueType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType" />*/

$.ig.util.defType('DashboardBandType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Percentage";
			case 1: return "NumberValue";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardBandType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType" />*/

$.ig.util.defType('DashboardBandColorType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Blue";
			case 1: return "Green";
			case 2: return "Red";
			case 3: return "Yellow";
			case 4: return "Gray";
			case 5: return "White";
			case 6: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardBandColorType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType" />*/

$.ig.util.defType('DashboardAggregationType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "CountRows";
			case 2: return "CountNonEmpty";
			case 3: return "CountDistinct";
			case 4: return "Min";
			case 5: return "Max";
			case 6: return "Sum";
			case 7: return "Avg";
			case 8: return "StDev";
			case 9: return "Variance";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardAggregationType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType" />*/

$.ig.util.defType('DashboardActionTriggerType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "SelectRow";
			case 1: return "Maximize";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardActionTriggerType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType" />*/

$.ig.util.defType('DashboardActionTargetType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "OpenDashboard";
			case 1: return "OpenUrl";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardActionTargetType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType" />*/

$.ig.util.defType('DashboardActionParameterSourceType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Column";
			case 1: return "Literal";
			case 2: return "GlobalFilter";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('DashboardActionParameterSourceType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.NativeTypedDictionaryType" />*/

$.ig.util.defType('NativeTypedDictionaryType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Boolean";
			case 1: return "Int";
			case 2: return "Double";
			case 3: return "Object";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('NativeTypedDictionaryType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.NativeTypedDictionaryType" />*/

/*<BeginType Name="System.Collections.Hashtable" />*/

$.ig.util.defType('Dictionary', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Collections.ArrayList System.Collections.Hashtable::KeysList()" />*/
	keysList: function () {
		return null;
	}
	/*<EndMethod Name="System.Collections.ArrayList System.Collections.Hashtable::KeysList()" />*/
	,
	/*<BeginMethod Name="System.Void System.Collections.Hashtable::Remove(System.Object)" />*/
	remove: function (key) {
	}
	/*<EndMethod Name="System.Void System.Collections.Hashtable::Remove(System.Object)" />*/
	,
	/*<BeginProperty Name="System.Int32 System.Collections.Hashtable::Count()" />*/
	length: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 System.Collections.Hashtable::Count()" />*/
	,
	/*<BeginProperty Name="System.Object System.Collections.Hashtable::Item(System.Object)" />*/
	item: function (key, value) {
		if (arguments.length === 2) {
			return value;
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.Object System.Collections.Hashtable::Item(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean System.Collections.Hashtable::ContainsKey(System.Object)" />*/
	containsKey: function (key) {
		return false;
	}
	/*<EndMethod Name="System.Boolean System.Collections.Hashtable::ContainsKey(System.Object)" />*/
	,
	$type: new $.ig.Type('Dictionary', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="System.Collections.Hashtable" />*/

/*<BeginType Name="Infragistics.NativeDataLayerLocalizeUtil" />*/

$.ig.util.defType('NativeDataLayerLocalizeUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String)" />*/
	localize: function (val) {
		return $.ig.NativeStringUtility.prototype.localize("datalayer", val);
	}
	/*<EndMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String, System.String)" />*/
	localize1: function (val, parameter) {
		var msg = $.ig.NativeStringUtility.prototype.localize("datalayer", val);
		if (parameter != null) {
			return $.ig.NativeStringUtility.prototype.replace(msg, "{0}", parameter);
		}
		return msg;
	}
	/*<EndMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String, System.String, System.String)" />*/
	localize2: function (val, firstParameter, secondParameter) {
		var msg = $.ig.NativeStringUtility.prototype.localize("datalayer", val);
		if (firstParameter != null) {
			return $.ig.NativeStringUtility.prototype.replace(msg, "{0}", firstParameter);
		}
		if (secondParameter != null) {
			return $.ig.NativeStringUtility.prototype.replace(msg, "{1}", secondParameter);
		}
		return msg;
	}
	/*<EndMethod Name="System.String Infragistics.NativeDataLayerLocalizeUtil::Localize(System.String, System.String, System.String)" />*/
	,
	$type: new $.ig.Type('NativeDataLayerLocalizeUtil', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeDataLayerLocalizeUtil" />*/

/*<BeginType Name="Infragistics.NativeDataLayerImageUtility" />*/

$.ig.util.defType('NativeDataLayerImageUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::ConvertBase64StringToImage(System.String)" />*/
	convertBase64StringToImage: function (imageData) {
		return $.ig.NativeDataLayerImageUtility.prototype.convertBase64StringToImage1(imageData, false);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::ConvertBase64StringToImage(System.String)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::ConvertBase64StringToImage(System.String, System.Boolean)" />*/
	convertBase64StringToImage1: function (imageData, cropToSquare) {
		if ($.ig.NativeDataLayerImageUtility.prototype.isPNG(imageData)) {
			return $.ig.NativeDataLayerImageUtility.prototype.getImageFromImageData("data:image/png;base64, " + imageData, cropToSquare);
		} else if ($.ig.NativeDataLayerImageUtility.prototype.isGIF(imageData)) {
			return $.ig.NativeDataLayerImageUtility.prototype.getImageFromImageData("data:image/gif;base64, " + imageData, cropToSquare);
		} else {
			return $.ig.NativeDataLayerImageUtility.prototype.getImageFromImageData("data:image/jpg;base64, " + imageData, cropToSquare);
		}
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::ConvertBase64StringToImage(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeDataLayerImageUtility::GetImageData(System.Html.Element)" />*/
	getImageData: function (image) {
		var element = image;
		var data = element.getAttribute("src");
		return data;
	}
	/*<EndMethod Name="System.String Infragistics.NativeDataLayerImageUtility::GetImageData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeDataLayerImageUtility::GetBase64ImageData(System.Html.Element)" />*/
	getBase64ImageData: function (image) {
		var result = $.ig.NativeDataLayerImageUtility.prototype.getImageData(image);
		if (result != null && $.ig.NativeStringUtility.prototype.startsWith(result, "data:image/")) {
			var startPosition = $.ig.NativeStringUtility.prototype.indexOf(result, ",");
			result = result.substr(startPosition + 1);
		}
		return result;
	}
	/*<EndMethod Name="System.String Infragistics.NativeDataLayerImageUtility::GetBase64ImageData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::GetImageFromImageData(System.String, System.Boolean)" />*/
	getImageFromImageData: function (imageData, cropToSquare) {
		var html = "<img style='height:100%;width:100%;object-fit:contain;'/>";
		if (cropToSquare) {
			html = "<img style='height:100%;width:100%;object-fit:cover;'/>";
		}
		var element = $(html)[0];
		element.setAttribute("src", imageData);
		return element;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeDataLayerImageUtility::GetImageFromImageData(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeDataLayerImageUtility::IsPNG(System.String)" />*/
	isPNG: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "iVBORw0K");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeDataLayerImageUtility::IsPNG(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeDataLayerImageUtility::IsGIF(System.String)" />*/
	isGIF: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "R0lG");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeDataLayerImageUtility::IsGIF(System.String)" />*/
	,
	$type: new $.ig.Type('NativeDataLayerImageUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeDataLayerImageUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CloneListUtils" />*/

$.ig.util.defType('CloneListUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CloneListUtils::CloneList(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	cloneList: function (original, target) {
		if (original == null) {
			return null;
		}
		var count = original.length;
		for (var i = 0; i < count; i++) {
			var value = original[i];
			target.add($.ig.CloneUtils.prototype.cloneObject(value));
		}
		return target;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CloneListUtils::CloneList(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.ReportPlus.DashboardModel.CloneListUtils::CloneList`1(System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	cloneList$1: function ($t, original, target) {
		if (original == null) {
			return null;
		}
		var count = original.count();
		for (var i = 0; i < count; i++) {
			var value = original.__inner[i];
			target.add($.ig.util.castObjTo$t($t, $.ig.CloneUtils.prototype.cloneObject(value)));
		}
		return target;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.ReportPlus.DashboardModel.CloneListUtils::CloneList`1(System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	,
	$type: new $.ig.Type('CloneListUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CloneListUtils" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization" />*/

$.ig.util.defType('DashboardEnumDeserialization', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionParameterSourceType(System.String)" />*/
	readActionParameterSourceType: function (value) {
		if (value == null) {
			return $.ig.DashboardActionParameterSourceType.prototype.column;
		} else {
			if (value == "Column") {
				return $.ig.DashboardActionParameterSourceType.prototype.column;
			} else if (value == "Literal") {
				return $.ig.DashboardActionParameterSourceType.prototype.literal;
			} else if (value == "GlobalFilter") {
				return $.ig.DashboardActionParameterSourceType.prototype.globalFilter;
			} else {
				return $.ig.DashboardActionParameterSourceType.prototype.column;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionParameterSourceType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionTargetType(System.String)" />*/
	readActionTargetType: function (value) {
		if (value == null) {
			return $.ig.DashboardActionTargetType.prototype.openDashboard;
		} else {
			if (value == "OpenDashboard") {
				return $.ig.DashboardActionTargetType.prototype.openDashboard;
			} else if (value == "OpenUrl") {
				return $.ig.DashboardActionTargetType.prototype.openUrl;
			} else {
				return $.ig.DashboardActionTargetType.prototype.openDashboard;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionTargetType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionTriggerType(System.String)" />*/
	readActionTriggerType: function (value) {
		if (value == null) {
			return $.ig.DashboardActionTriggerType.prototype.selectRow;
		} else {
			if (value == "SelectRow") {
				return $.ig.DashboardActionTriggerType.prototype.selectRow;
			} else if (value == "Maximize") {
				return $.ig.DashboardActionTriggerType.prototype.maximize;
			} else {
				return $.ig.DashboardActionTriggerType.prototype.selectRow;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadActionTriggerType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadAggregationType(System.String)" />*/
	readAggregationType: function (value) {
		if (value == null) {
			return $.ig.DashboardAggregationType.prototype.auto;
		} else {
			if (value == "Auto") {
				return $.ig.DashboardAggregationType.prototype.auto;
			} else if (value == "CountRows") {
				return $.ig.DashboardAggregationType.prototype.countRows;
			} else if (value == "CountNonEmpty") {
				return $.ig.DashboardAggregationType.prototype.countNonEmpty;
			} else if (value == "CountDistinct") {
				return $.ig.DashboardAggregationType.prototype.countDistinct;
			} else if (value == "Min") {
				return $.ig.DashboardAggregationType.prototype.min;
			} else if (value == "Max") {
				return $.ig.DashboardAggregationType.prototype.max;
			} else if (value == "Sum") {
				return $.ig.DashboardAggregationType.prototype.sum;
			} else if (value == "Avg") {
				return $.ig.DashboardAggregationType.prototype.avg;
			} else if (value == "StDev") {
				return $.ig.DashboardAggregationType.prototype.stDev;
			} else if (value == "Variance") {
				return $.ig.DashboardAggregationType.prototype.variance;
			} else {
				return $.ig.DashboardAggregationType.prototype.auto;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadAggregationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBandColorType(System.String)" />*/
	readBandColorType: function (value) {
		if (value == null) {
			return $.ig.DashboardBandColorType.prototype.blue;
		} else {
			if (value == "Blue") {
				return $.ig.DashboardBandColorType.prototype.blue;
			} else if (value == "Green") {
				return $.ig.DashboardBandColorType.prototype.green;
			} else if (value == "Red") {
				return $.ig.DashboardBandColorType.prototype.red;
			} else if (value == "Yellow") {
				return $.ig.DashboardBandColorType.prototype.yellow;
			} else if (value == "Gray") {
				return $.ig.DashboardBandColorType.prototype.gray;
			} else if (value == "White") {
				return $.ig.DashboardBandColorType.prototype.white;
			} else if (value == "None") {
				return $.ig.DashboardBandColorType.prototype.none;
			} else {
				return $.ig.DashboardBandColorType.prototype.blue;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBandColorType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBandType(System.String)" />*/
	readBandType: function (value) {
		if (value == null) {
			return $.ig.DashboardBandType.prototype.percentage;
		} else {
			if (value == "Percentage") {
				return $.ig.DashboardBandType.prototype.percentage;
			} else if (value == "NumberValue") {
				return $.ig.DashboardBandType.prototype.numberValue;
			} else {
				return $.ig.DashboardBandType.prototype.percentage;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBandType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBoundValueType(System.String)" />*/
	readBoundValueType: function (value) {
		if (value == null) {
			return $.ig.DashboardBoundValueType.prototype.numberValue;
		} else {
			if (value == "NumberValue") {
				return $.ig.DashboardBoundValueType.prototype.numberValue;
			} else if (value == "LowestValue") {
				return $.ig.DashboardBoundValueType.prototype.lowestValue;
			} else if (value == "HighestValue") {
				return $.ig.DashboardBoundValueType.prototype.highestValue;
			} else {
				return $.ig.DashboardBoundValueType.prototype.numberValue;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadBoundValueType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadChartType(System.String)" />*/
	readChartType: function (value) {
		if (value == null) {
			return $.ig.DashboardChartType.prototype.column;
		} else {
			if (value == "Column") {
				return $.ig.DashboardChartType.prototype.column;
			} else if (value == "Line") {
				return $.ig.DashboardChartType.prototype.line;
			} else if (value == "Bar") {
				return $.ig.DashboardChartType.prototype.bar;
			} else if (value == "Area") {
				return $.ig.DashboardChartType.prototype.area;
			} else if (value == "Spline") {
				return $.ig.DashboardChartType.prototype.spline;
			} else if (value == "SplineArea") {
				return $.ig.DashboardChartType.prototype.splineArea;
			} else if (value == "StepArea") {
				return $.ig.DashboardChartType.prototype.stepArea;
			} else if (value == "StepLine") {
				return $.ig.DashboardChartType.prototype.stepLine;
			} else if (value == "Composite") {
				return $.ig.DashboardChartType.prototype.composite;
			} else if (value == "Bubble") {
				return $.ig.DashboardChartType.prototype.bubble;
			} else if (value == "Candlestick") {
				return $.ig.DashboardChartType.prototype.candlestick;
			} else if (value == "OHLC") {
				return $.ig.DashboardChartType.prototype.oHLC;
			} else if (value == "Pie") {
				return $.ig.DashboardChartType.prototype.pie;
			} else if (value == "RadialLines") {
				return $.ig.DashboardChartType.prototype.radialLines;
			} else if (value == "RadialColumns") {
				return $.ig.DashboardChartType.prototype.radialColumns;
			} else if (value == "RadialPie") {
				return $.ig.DashboardChartType.prototype.radialPie;
			} else if (value == "Scatter") {
				return $.ig.DashboardChartType.prototype.scatter;
			} else if (value == "PolarArea") {
				return $.ig.DashboardChartType.prototype.polarArea;
			} else if (value == "PolarLines") {
				return $.ig.DashboardChartType.prototype.polarLines;
			} else if (value == "PolarScatter") {
				return $.ig.DashboardChartType.prototype.polarScatter;
			} else if (value == "StackedColumn") {
				return $.ig.DashboardChartType.prototype.stackedColumn;
			} else if (value == "StackedArea") {
				return $.ig.DashboardChartType.prototype.stackedArea;
			} else if (value == "StackedBar") {
				return $.ig.DashboardChartType.prototype.stackedBar;
			} else if (value == "Doughnut") {
				return $.ig.DashboardChartType.prototype.doughnut;
			} else if (value == "Funnel") {
				return $.ig.DashboardChartType.prototype.funnel;
			} else if (value == "TimeSeries") {
				return $.ig.DashboardChartType.prototype.timeSeries;
			} else {
				return $.ig.DashboardChartType.prototype.column;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadChartType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadChoroplethMapColorType(System.String)" />*/
	readChoroplethMapColorType: function (value) {
		if (value == null) {
			return $.ig.DashboardChoroplethMapColorType.prototype.highest;
		} else {
			if (value == "Highest") {
				return $.ig.DashboardChoroplethMapColorType.prototype.highest;
			} else if (value == "Lowest") {
				return $.ig.DashboardChoroplethMapColorType.prototype.lowest;
			} else {
				return $.ig.DashboardChoroplethMapColorType.prototype.highest;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadChoroplethMapColorType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadContentModeType(System.String)" />*/
	readContentModeType: function (value) {
		if (value == null) {
			return $.ig.DashboardContentModeType.prototype.aspectFit;
		} else {
			if (value == "AspectFit") {
				return $.ig.DashboardContentModeType.prototype.aspectFit;
			} else if (value == "AspectFill") {
				return $.ig.DashboardContentModeType.prototype.aspectFill;
			} else if (value == "FullSize") {
				return $.ig.DashboardContentModeType.prototype.fullSize;
			} else {
				return $.ig.DashboardContentModeType.prototype.aspectFit;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadContentModeType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDataType(System.String)" />*/
	readDataType: function (value) {
		if (value == null) {
			return $.ig.DashboardDataType.prototype.string1;
		} else {
			if (value == "String") {
				return $.ig.DashboardDataType.prototype.string1;
			} else if (value == "Number") {
				return $.ig.DashboardDataType.prototype.number;
			} else if (value == "Date") {
				return $.ig.DashboardDataType.prototype.date;
			} else if (value == "DateTime") {
				return $.ig.DashboardDataType.prototype.dateTime;
			} else if (value == "Time") {
				return $.ig.DashboardDataType.prototype.time;
			} else {
				return $.ig.DashboardDataType.prototype.string1;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDataType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDateAggregationType(System.String)" />*/
	readDateAggregationType: function (value) {
		if (value == null) {
			return $.ig.DashboardDateAggregationType.prototype.year;
		} else {
			if (value == "Year") {
				return $.ig.DashboardDateAggregationType.prototype.year;
			} else if (value == "Semester") {
				return $.ig.DashboardDateAggregationType.prototype.semester;
			} else if (value == "Quarter") {
				return $.ig.DashboardDateAggregationType.prototype.quarter;
			} else if (value == "Month") {
				return $.ig.DashboardDateAggregationType.prototype.month;
			} else if (value == "Day") {
				return $.ig.DashboardDateAggregationType.prototype.day;
			} else if (value == "Hour") {
				return $.ig.DashboardDateAggregationType.prototype.hour;
			} else if (value == "Minute") {
				return $.ig.DashboardDateAggregationType.prototype.minute;
			} else {
				return $.ig.DashboardDateAggregationType.prototype.year;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDateAggregationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDateRuleType(System.String)" />*/
	readDateRuleType: function (value) {
		if (value == null) {
			return $.ig.DashboardDateRuleType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardDateRuleType.prototype.none;
			} else if (value == "CustomRange") {
				return $.ig.DashboardDateRuleType.prototype.customRange;
			} else if (value == "LastWeek") {
				return $.ig.DashboardDateRuleType.prototype.lastWeek;
			} else if (value == "LastMonth") {
				return $.ig.DashboardDateRuleType.prototype.lastMonth;
			} else if (value == "LastYear") {
				return $.ig.DashboardDateRuleType.prototype.lastYear;
			} else if (value == "YearToDate") {
				return $.ig.DashboardDateRuleType.prototype.yearToDate;
			} else if (value == "QuarterToDate") {
				return $.ig.DashboardDateRuleType.prototype.quarterToDate;
			} else if (value == "MonthToDate") {
				return $.ig.DashboardDateRuleType.prototype.monthToDate;
			} else if (value == "AllTime") {
				return $.ig.DashboardDateRuleType.prototype.allTime;
			} else if (value == "Yesterday") {
				return $.ig.DashboardDateRuleType.prototype.yesterday;
			} else if (value == "Today") {
				return $.ig.DashboardDateRuleType.prototype.today;
			} else if (value == "ThisMonth") {
				return $.ig.DashboardDateRuleType.prototype.thisMonth;
			} else if (value == "ThisQuarter") {
				return $.ig.DashboardDateRuleType.prototype.thisQuarter;
			} else if (value == "ThisYear") {
				return $.ig.DashboardDateRuleType.prototype.thisYear;
			} else if (value == "PreviousMonth") {
				return $.ig.DashboardDateRuleType.prototype.previousMonth;
			} else if (value == "PreviousQuarter") {
				return $.ig.DashboardDateRuleType.prototype.previousQuarter;
			} else if (value == "PreviousYear") {
				return $.ig.DashboardDateRuleType.prototype.previousYear;
			} else if (value == "NextMonth") {
				return $.ig.DashboardDateRuleType.prototype.nextMonth;
			} else if (value == "NextQuarter") {
				return $.ig.DashboardDateRuleType.prototype.nextQuarter;
			} else if (value == "NextYear") {
				return $.ig.DashboardDateRuleType.prototype.nextYear;
			} else if (value == "TrailingTwelveMonths") {
				return $.ig.DashboardDateRuleType.prototype.trailingTwelveMonths;
			} else {
				return $.ig.DashboardDateRuleType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadDateRuleType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadFilterEnumType(System.String)" />*/
	readFilterEnumType: function (value) {
		if (value == null) {
			return $.ig.DashboardFilterEnumType.prototype.allValues;
		} else {
			if (value == "AllValues") {
				return $.ig.DashboardFilterEnumType.prototype.allValues;
			} else if (value == "FilterEmptyValues") {
				return $.ig.DashboardFilterEnumType.prototype.filterEmptyValues;
			} else if (value == "SelectedValues") {
				return $.ig.DashboardFilterEnumType.prototype.selectedValues;
			} else if (value == "FilterByRule") {
				return $.ig.DashboardFilterEnumType.prototype.filterByRule;
			} else {
				return $.ig.DashboardFilterEnumType.prototype.allValues;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadFilterEnumType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadFontSizeType(System.String)" />*/
	readFontSizeType: function (value) {
		if (value == null) {
			return $.ig.DashboardFontSizeType.prototype.small;
		} else {
			if (value == "Small") {
				return $.ig.DashboardFontSizeType.prototype.small;
			} else if (value == "Medium") {
				return $.ig.DashboardFontSizeType.prototype.medium;
			} else if (value == "Large") {
				return $.ig.DashboardFontSizeType.prototype.large;
			} else {
				return $.ig.DashboardFontSizeType.prototype.small;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadFontSizeType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGaugeViewType(System.String)" />*/
	readGaugeViewType: function (value) {
		if (value == null) {
			return $.ig.DashboardGaugeViewType.prototype.circular;
		} else {
			if (value == "Circular") {
				return $.ig.DashboardGaugeViewType.prototype.circular;
			} else if (value == "Linear") {
				return $.ig.DashboardGaugeViewType.prototype.linear;
			} else if (value == "SingleValue") {
				return $.ig.DashboardGaugeViewType.prototype.singleValue;
			} else if (value == "BulletGraph") {
				return $.ig.DashboardGaugeViewType.prototype.bulletGraph;
			} else {
				return $.ig.DashboardGaugeViewType.prototype.circular;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGaugeViewType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGlobalFilterBindingOperatorType(System.String)" />*/
	readGlobalFilterBindingOperatorType: function (value) {
		if (value == null) {
			return $.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals;
		} else {
			if (value == "Equals") {
				return $.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals;
			} else if (value == "Contains") {
				return $.ig.DashboardGlobalFilterBindingOperatorType.prototype.contains;
			} else if (value == "Between") {
				return $.ig.DashboardGlobalFilterBindingOperatorType.prototype.between;
			} else {
				return $.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGlobalFilterBindingOperatorType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGlobalVariableValueType(System.String)" />*/
	readGlobalVariableValueType: function (value) {
		if (value == null) {
			return $.ig.DashboardGlobalVariableValueType.prototype.string1;
		} else {
			if (value == "String") {
				return $.ig.DashboardGlobalVariableValueType.prototype.string1;
			} else if (value == "Number") {
				return $.ig.DashboardGlobalVariableValueType.prototype.number;
			} else if (value == "DateTime") {
				return $.ig.DashboardGlobalVariableValueType.prototype.dateTime;
			} else {
				return $.ig.DashboardGlobalVariableValueType.prototype.string1;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadGlobalVariableValueType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadHeatMapLocationType(System.String)" />*/
	readHeatMapLocationType: function (value) {
		if (value == null) {
			return $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField;
		} else {
			if (value == "LatitudeLongitudeSingleField") {
				return $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField;
			} else if (value == "LatitudeLongitudeFields") {
				return $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeFields;
			} else {
				return $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadHeatMapLocationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorDifferenceMode(System.String)" />*/
	readIndicatorDifferenceMode: function (value) {
		if (value == null) {
			return $.ig.DashboardIndicatorDifferenceMode.prototype.percentage;
		} else {
			if (value == "Percentage") {
				return $.ig.DashboardIndicatorDifferenceMode.prototype.percentage;
			} else if (value == "Value") {
				return $.ig.DashboardIndicatorDifferenceMode.prototype.value;
			} else if (value == "ValueAndPercentage") {
				return $.ig.DashboardIndicatorDifferenceMode.prototype.valueAndPercentage;
			} else {
				return $.ig.DashboardIndicatorDifferenceMode.prototype.percentage;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorDifferenceMode(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorTargetDateFilterType(System.String)" />*/
	readIndicatorTargetDateFilterType: function (value) {
		if (value == null) {
			return $.ig.DashboardIndicatorTargetDateFilterType.prototype.allTime;
		} else {
			if (value == "AllTime") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.allTime;
			} else if (value == "CustomRange") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.customRange;
			} else if (value == "YearToDate") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.yearToDate;
			} else if (value == "QuarterToDate") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.quarterToDate;
			} else if (value == "MonthToDate") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.monthToDate;
			} else if (value == "PreviousYear") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousYear;
			} else if (value == "PreviousQuarter") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousQuarter;
			} else if (value == "PreviousMonth") {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousMonth;
			} else {
				return $.ig.DashboardIndicatorTargetDateFilterType.prototype.allTime;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorTargetDateFilterType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorVisualizationType(System.String)" />*/
	readIndicatorVisualizationType: function (value) {
		if (value == null) {
			return $.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear;
		} else {
			if (value == "YearToDatePreviousYear") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear;
			} else if (value == "QuarterToDatePreviousQuarter") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousQuarter;
			} else if (value == "QuarterToDatePreviousYear") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousYear;
			} else if (value == "MonthToDatePreviousMonth") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousMonth;
			} else if (value == "MonthToDatePreviousYear") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousYear;
			} else if (value == "LastYears") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastYears;
			} else if (value == "LastQuarters") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastQuarters;
			} else if (value == "LastMonths") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastMonths;
			} else if (value == "LastDays") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastDays;
			} else if (value == "LastHours") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastHours;
			} else if (value == "LastMinutes") {
				return $.ig.DashboardIndicatorVisualizationType.prototype.lastMinutes;
			} else {
				return $.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadIndicatorVisualizationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadLabelDisplayMode(System.String)" />*/
	readLabelDisplayMode: function (value) {
		if (value == null) {
			return $.ig.DashboardLabelDisplayMode.prototype.percentage;
		} else {
			if (value == "Percentage") {
				return $.ig.DashboardLabelDisplayMode.prototype.percentage;
			} else if (value == "Value") {
				return $.ig.DashboardLabelDisplayMode.prototype.value;
			} else if (value == "ValueAndPercentage") {
				return $.ig.DashboardLabelDisplayMode.prototype.valueAndPercentage;
			} else {
				return $.ig.DashboardLabelDisplayMode.prototype.percentage;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadLabelDisplayMode(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadMapLocationType(System.String)" />*/
	readMapLocationType: function (value) {
		if (value == null) {
			return $.ig.DashboardMapLocationType.prototype.geocoding;
		} else {
			if (value == "Geocoding") {
				return $.ig.DashboardMapLocationType.prototype.geocoding;
			} else if (value == "LatitudeLongitudeSingleField") {
				return $.ig.DashboardMapLocationType.prototype.latitudeLongitudeSingleField;
			} else if (value == "LatitudeLongitudeFields") {
				return $.ig.DashboardMapLocationType.prototype.latitudeLongitudeFields;
			} else {
				return $.ig.DashboardMapLocationType.prototype.geocoding;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadMapLocationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadMapVisualizationType(System.String)" />*/
	readMapVisualizationType: function (value) {
		if (value == null) {
			return $.ig.DashboardMapVisualizationType.prototype.standard;
		} else {
			if (value == "Standard") {
				return $.ig.DashboardMapVisualizationType.prototype.standard;
			} else if (value == "Satellite") {
				return $.ig.DashboardMapVisualizationType.prototype.satellite;
			} else if (value == "Hybrid") {
				return $.ig.DashboardMapVisualizationType.prototype.hybrid;
			} else {
				return $.ig.DashboardMapVisualizationType.prototype.standard;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadMapVisualizationType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNegativeFormatType(System.String)" />*/
	readNegativeFormatType: function (value) {
		if (value == null) {
			return $.ig.DashboardNegativeFormatType.prototype.empty;
		} else {
			if (value == "Empty") {
				return $.ig.DashboardNegativeFormatType.prototype.empty;
			} else if (value == "MinusSign") {
				return $.ig.DashboardNegativeFormatType.prototype.minusSign;
			} else if (value == "Parenthesis") {
				return $.ig.DashboardNegativeFormatType.prototype.parenthesis;
			} else {
				return $.ig.DashboardNegativeFormatType.prototype.empty;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNegativeFormatType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNumberFormattingType(System.String)" />*/
	readNumberFormattingType: function (value) {
		if (value == null) {
			return $.ig.DashboardNumberFormattingType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardNumberFormattingType.prototype.none;
			} else if (value == "Number") {
				return $.ig.DashboardNumberFormattingType.prototype.number;
			} else if (value == "Percent") {
				return $.ig.DashboardNumberFormattingType.prototype.percent;
			} else if (value == "Currency") {
				return $.ig.DashboardNumberFormattingType.prototype.currency;
			} else {
				return $.ig.DashboardNumberFormattingType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNumberFormattingType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNumberRuleType(System.String)" />*/
	readNumberRuleType: function (value) {
		if (value == null) {
			return $.ig.DashboardNumberRuleType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardNumberRuleType.prototype.none;
			} else if (value == "TopItems") {
				return $.ig.DashboardNumberRuleType.prototype.topItems;
			} else if (value == "TopPercent") {
				return $.ig.DashboardNumberRuleType.prototype.topPercent;
			} else if (value == "BottomItems") {
				return $.ig.DashboardNumberRuleType.prototype.bottomItems;
			} else if (value == "BottomPercent") {
				return $.ig.DashboardNumberRuleType.prototype.bottomPercent;
			} else if (value == "AboveAverage") {
				return $.ig.DashboardNumberRuleType.prototype.aboveAverage;
			} else if (value == "AboveValue") {
				return $.ig.DashboardNumberRuleType.prototype.aboveValue;
			} else if (value == "BelowAverage") {
				return $.ig.DashboardNumberRuleType.prototype.belowAverage;
			} else if (value == "BelowValue") {
				return $.ig.DashboardNumberRuleType.prototype.belowValue;
			} else if (value == "AboveEqualsValue") {
				return $.ig.DashboardNumberRuleType.prototype.aboveEqualsValue;
			} else if (value == "BelowEqualsValue") {
				return $.ig.DashboardNumberRuleType.prototype.belowEqualsValue;
			} else {
				return $.ig.DashboardNumberRuleType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadNumberRuleType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadScatterMapColorizationModeType(System.String)" />*/
	readScatterMapColorizationModeType: function (value) {
		if (value == null) {
			return $.ig.DashboardScatterMapColorizationModeType.prototype.single;
		} else {
			if (value == "Single") {
				return $.ig.DashboardScatterMapColorizationModeType.prototype.single;
			} else if (value == "Range") {
				return $.ig.DashboardScatterMapColorizationModeType.prototype.range;
			} else if (value == "ConditionalFormatting") {
				return $.ig.DashboardScatterMapColorizationModeType.prototype.conditionalFormatting;
			} else {
				return $.ig.DashboardScatterMapColorizationModeType.prototype.single;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadScatterMapColorizationModeType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadShapeType(System.String)" />*/
	readShapeType: function (value) {
		if (value == null) {
			return $.ig.DashboardShapeType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardShapeType.prototype.none;
			} else if (value == "Circle") {
				return $.ig.DashboardShapeType.prototype.circle;
			} else if (value == "ArrowUp") {
				return $.ig.DashboardShapeType.prototype.arrowUp;
			} else if (value == "ArrowRight") {
				return $.ig.DashboardShapeType.prototype.arrowRight;
			} else if (value == "ArrowDown") {
				return $.ig.DashboardShapeType.prototype.arrowDown;
			} else if (value == "ArrowLeft") {
				return $.ig.DashboardShapeType.prototype.arrowLeft;
			} else if (value == "Dash") {
				return $.ig.DashboardShapeType.prototype.dash;
			} else {
				return $.ig.DashboardShapeType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadShapeType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadSortingType(System.String)" />*/
	readSortingType: function (value) {
		if (value == null) {
			return $.ig.DashboardSortingType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardSortingType.prototype.none;
			} else if (value == "Asc") {
				return $.ig.DashboardSortingType.prototype.asc;
			} else if (value == "Desc") {
				return $.ig.DashboardSortingType.prototype.desc;
			} else {
				return $.ig.DashboardSortingType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadSortingType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadStringRuleType(System.String)" />*/
	readStringRuleType: function (value) {
		if (value == null) {
			return $.ig.DashboardStringRuleType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardStringRuleType.prototype.none;
			} else if (value == "Equals") {
				return $.ig.DashboardStringRuleType.prototype.equals;
			} else if (value == "NotEquals") {
				return $.ig.DashboardStringRuleType.prototype.notEquals;
			} else if (value == "Contains") {
				return $.ig.DashboardStringRuleType.prototype.contains;
			} else if (value == "NotContains") {
				return $.ig.DashboardStringRuleType.prototype.notContains;
			} else if (value == "StartsWith") {
				return $.ig.DashboardStringRuleType.prototype.startsWith;
			} else if (value == "EndsWith") {
				return $.ig.DashboardStringRuleType.prototype.endsWith;
			} else {
				return $.ig.DashboardStringRuleType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadStringRuleType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTextAlignment(System.String)" />*/
	readTextAlignment: function (value) {
		if (value == null) {
			return $.ig.DashboardTextAlignment.prototype.inherit;
		} else {
			if (value == "Inherit") {
				return $.ig.DashboardTextAlignment.prototype.inherit;
			} else if (value == "Left") {
				return $.ig.DashboardTextAlignment.prototype.left;
			} else if (value == "Center") {
				return $.ig.DashboardTextAlignment.prototype.center;
			} else if (value == "Right") {
				return $.ig.DashboardTextAlignment.prototype.right;
			} else {
				return $.ig.DashboardTextAlignment.prototype.inherit;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTextAlignment(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTimeRuleType(System.String)" />*/
	readTimeRuleType: function (value) {
		if (value == null) {
			return $.ig.DashboardTimeRuleType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardTimeRuleType.prototype.none;
			} else if (value == "CustomRange") {
				return $.ig.DashboardTimeRuleType.prototype.customRange;
			} else if (value == "AllTime") {
				return $.ig.DashboardTimeRuleType.prototype.allTime;
			} else {
				return $.ig.DashboardTimeRuleType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTimeRuleType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapBoundColorType(System.String)" />*/
	readTreeMapBoundColorType: function (value) {
		if (value == null) {
			return $.ig.DashboardTreeMapBoundColorType.prototype.green;
		} else {
			if (value == "Green") {
				return $.ig.DashboardTreeMapBoundColorType.prototype.green;
			} else if (value == "Red") {
				return $.ig.DashboardTreeMapBoundColorType.prototype.red;
			} else {
				return $.ig.DashboardTreeMapBoundColorType.prototype.green;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapBoundColorType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapColorType(System.String)" />*/
	readTreeMapColorType: function (value) {
		if (value == null) {
			return $.ig.DashboardTreeMapColorType.prototype.singleColor;
		} else {
			if (value == "SingleColor") {
				return $.ig.DashboardTreeMapColorType.prototype.singleColor;
			} else if (value == "Gradient") {
				return $.ig.DashboardTreeMapColorType.prototype.gradient;
			} else {
				return $.ig.DashboardTreeMapColorType.prototype.singleColor;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapColorType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapLayoutEnumType(System.String)" />*/
	readTreeMapLayoutEnumType: function (value) {
		if (value == null) {
			return $.ig.DashboardTreeMapLayoutEnumType.prototype.squarified;
		} else {
			if (value == "Squarified") {
				return $.ig.DashboardTreeMapLayoutEnumType.prototype.squarified;
			} else if (value == "SliceAndDice") {
				return $.ig.DashboardTreeMapLayoutEnumType.prototype.sliceAndDice;
			} else if (value == "Strip") {
				return $.ig.DashboardTreeMapLayoutEnumType.prototype.strip;
			} else {
				return $.ig.DashboardTreeMapLayoutEnumType.prototype.squarified;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTreeMapLayoutEnumType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTrendlineType(System.String)" />*/
	readTrendlineType: function (value) {
		if (value == null) {
			return $.ig.DashboardTrendlineType.prototype.none;
		} else {
			if (value == "None") {
				return $.ig.DashboardTrendlineType.prototype.none;
			} else if (value == "LinearFit") {
				return $.ig.DashboardTrendlineType.prototype.linearFit;
			} else if (value == "QuadraticFit") {
				return $.ig.DashboardTrendlineType.prototype.quadraticFit;
			} else if (value == "CubicFit") {
				return $.ig.DashboardTrendlineType.prototype.cubicFit;
			} else if (value == "QuarticFit") {
				return $.ig.DashboardTrendlineType.prototype.quarticFit;
			} else if (value == "LogarithmicFit") {
				return $.ig.DashboardTrendlineType.prototype.logarithmicFit;
			} else if (value == "ExponentialFit") {
				return $.ig.DashboardTrendlineType.prototype.exponentialFit;
			} else if (value == "PowerLawFit") {
				return $.ig.DashboardTrendlineType.prototype.powerLawFit;
			} else if (value == "SimpleAverage") {
				return $.ig.DashboardTrendlineType.prototype.simpleAverage;
			} else if (value == "ExponentialAverage") {
				return $.ig.DashboardTrendlineType.prototype.exponentialAverage;
			} else if (value == "ModifiedAverage") {
				return $.ig.DashboardTrendlineType.prototype.modifiedAverage;
			} else if (value == "CumulativeAverage") {
				return $.ig.DashboardTrendlineType.prototype.cumulativeAverage;
			} else if (value == "WeightedAverage") {
				return $.ig.DashboardTrendlineType.prototype.weightedAverage;
			} else {
				return $.ig.DashboardTrendlineType.prototype.none;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadTrendlineType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadXmlaDimensionEnumType(System.String)" />*/
	readXmlaDimensionEnumType: function (value) {
		if (value == null) {
			return $.ig.DashboardXmlaDimensionEnumType.prototype.regular;
		} else {
			if (value == "Regular") {
				return $.ig.DashboardXmlaDimensionEnumType.prototype.regular;
			} else if (value == "Date") {
				return $.ig.DashboardXmlaDimensionEnumType.prototype.date;
			} else {
				return $.ig.DashboardXmlaDimensionEnumType.prototype.regular;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadXmlaDimensionEnumType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadXmlaElementType(System.String)" />*/
	readXmlaElementType: function (value) {
		if (value == null) {
			return $.ig.DashboardXmlaElementType.prototype.dimension;
		} else {
			if (value == "Dimension") {
				return $.ig.DashboardXmlaElementType.prototype.dimension;
			} else if (value == "Level") {
				return $.ig.DashboardXmlaElementType.prototype.level;
			} else if (value == "Hierarchy") {
				return $.ig.DashboardXmlaElementType.prototype.hierarchy;
			} else if (value == "Member") {
				return $.ig.DashboardXmlaElementType.prototype.member;
			} else if (value == "Set") {
				return $.ig.DashboardXmlaElementType.prototype.set;
			} else {
				return $.ig.DashboardXmlaElementType.prototype.dimension;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization::ReadXmlaElementType(System.String)" />*/
	,
	$type: new $.ig.Type('DashboardEnumDeserialization', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardEnumDeserialization" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization" />*/

$.ig.util.defType('DashboardEnumSerialization', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionParameterSourceType(Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType)" />*/
	writeActionParameterSourceType: function (value) {
		switch (value) {
			case $.ig.DashboardActionParameterSourceType.prototype.column: return "Column";
			case $.ig.DashboardActionParameterSourceType.prototype.literal: return "Literal";
			case $.ig.DashboardActionParameterSourceType.prototype.globalFilter: return "GlobalFilter";
			default: return "Column";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionParameterSourceType(Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionTargetType(Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType)" />*/
	writeActionTargetType: function (value) {
		switch (value) {
			case $.ig.DashboardActionTargetType.prototype.openDashboard: return "OpenDashboard";
			case $.ig.DashboardActionTargetType.prototype.openUrl: return "OpenUrl";
			default: return "OpenDashboard";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionTargetType(Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionTriggerType(Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType)" />*/
	writeActionTriggerType: function (value) {
		switch (value) {
			case $.ig.DashboardActionTriggerType.prototype.selectRow: return "SelectRow";
			case $.ig.DashboardActionTriggerType.prototype.maximize: return "Maximize";
			default: return "SelectRow";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteActionTriggerType(Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteAggregationType(Infragistics.ReportPlus.DashboardModel.DashboardAggregationType)" />*/
	writeAggregationType: function (value) {
		switch (value) {
			case $.ig.DashboardAggregationType.prototype.auto: return "Auto";
			case $.ig.DashboardAggregationType.prototype.countRows: return "CountRows";
			case $.ig.DashboardAggregationType.prototype.countNonEmpty: return "CountNonEmpty";
			case $.ig.DashboardAggregationType.prototype.countDistinct: return "CountDistinct";
			case $.ig.DashboardAggregationType.prototype.min: return "Min";
			case $.ig.DashboardAggregationType.prototype.max: return "Max";
			case $.ig.DashboardAggregationType.prototype.sum: return "Sum";
			case $.ig.DashboardAggregationType.prototype.avg: return "Avg";
			case $.ig.DashboardAggregationType.prototype.stDev: return "StDev";
			case $.ig.DashboardAggregationType.prototype.variance: return "Variance";
			default: return "Auto";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteAggregationType(Infragistics.ReportPlus.DashboardModel.DashboardAggregationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBandColorType(Infragistics.ReportPlus.DashboardModel.DashboardBandColorType)" />*/
	writeBandColorType: function (value) {
		switch (value) {
			case $.ig.DashboardBandColorType.prototype.blue: return "Blue";
			case $.ig.DashboardBandColorType.prototype.green: return "Green";
			case $.ig.DashboardBandColorType.prototype.red: return "Red";
			case $.ig.DashboardBandColorType.prototype.yellow: return "Yellow";
			case $.ig.DashboardBandColorType.prototype.gray: return "Gray";
			case $.ig.DashboardBandColorType.prototype.white: return "White";
			case $.ig.DashboardBandColorType.prototype.none: return "None";
			default: return "Blue";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBandColorType(Infragistics.ReportPlus.DashboardModel.DashboardBandColorType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBandType(Infragistics.ReportPlus.DashboardModel.DashboardBandType)" />*/
	writeBandType: function (value) {
		switch (value) {
			case $.ig.DashboardBandType.prototype.percentage: return "Percentage";
			case $.ig.DashboardBandType.prototype.numberValue: return "NumberValue";
			default: return "Percentage";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBandType(Infragistics.ReportPlus.DashboardModel.DashboardBandType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBoundValueType(Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType)" />*/
	writeBoundValueType: function (value) {
		switch (value) {
			case $.ig.DashboardBoundValueType.prototype.numberValue: return "NumberValue";
			case $.ig.DashboardBoundValueType.prototype.lowestValue: return "LowestValue";
			case $.ig.DashboardBoundValueType.prototype.highestValue: return "HighestValue";
			default: return "NumberValue";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteBoundValueType(Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteChartType(Infragistics.ReportPlus.DashboardModel.DashboardChartType)" />*/
	writeChartType: function (value) {
		switch (value) {
			case $.ig.DashboardChartType.prototype.column: return "Column";
			case $.ig.DashboardChartType.prototype.line: return "Line";
			case $.ig.DashboardChartType.prototype.bar: return "Bar";
			case $.ig.DashboardChartType.prototype.area: return "Area";
			case $.ig.DashboardChartType.prototype.spline: return "Spline";
			case $.ig.DashboardChartType.prototype.splineArea: return "SplineArea";
			case $.ig.DashboardChartType.prototype.stepArea: return "StepArea";
			case $.ig.DashboardChartType.prototype.stepLine: return "StepLine";
			case $.ig.DashboardChartType.prototype.composite: return "Composite";
			case $.ig.DashboardChartType.prototype.bubble: return "Bubble";
			case $.ig.DashboardChartType.prototype.candlestick: return "Candlestick";
			case $.ig.DashboardChartType.prototype.oHLC: return "OHLC";
			case $.ig.DashboardChartType.prototype.pie: return "Pie";
			case $.ig.DashboardChartType.prototype.radialLines: return "RadialLines";
			case $.ig.DashboardChartType.prototype.radialColumns: return "RadialColumns";
			case $.ig.DashboardChartType.prototype.radialPie: return "RadialPie";
			case $.ig.DashboardChartType.prototype.scatter: return "Scatter";
			case $.ig.DashboardChartType.prototype.polarArea: return "PolarArea";
			case $.ig.DashboardChartType.prototype.polarLines: return "PolarLines";
			case $.ig.DashboardChartType.prototype.polarScatter: return "PolarScatter";
			case $.ig.DashboardChartType.prototype.stackedColumn: return "StackedColumn";
			case $.ig.DashboardChartType.prototype.stackedArea: return "StackedArea";
			case $.ig.DashboardChartType.prototype.stackedBar: return "StackedBar";
			case $.ig.DashboardChartType.prototype.doughnut: return "Doughnut";
			case $.ig.DashboardChartType.prototype.funnel: return "Funnel";
			case $.ig.DashboardChartType.prototype.timeSeries: return "TimeSeries";
			default: return "Column";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteChartType(Infragistics.ReportPlus.DashboardModel.DashboardChartType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteChoroplethMapColorType(Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType)" />*/
	writeChoroplethMapColorType: function (value) {
		switch (value) {
			case $.ig.DashboardChoroplethMapColorType.prototype.highest: return "Highest";
			case $.ig.DashboardChoroplethMapColorType.prototype.lowest: return "Lowest";
			default: return "Highest";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteChoroplethMapColorType(Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteContentModeType(Infragistics.ReportPlus.DashboardModel.DashboardContentModeType)" />*/
	writeContentModeType: function (value) {
		switch (value) {
			case $.ig.DashboardContentModeType.prototype.aspectFit: return "AspectFit";
			case $.ig.DashboardContentModeType.prototype.aspectFill: return "AspectFill";
			case $.ig.DashboardContentModeType.prototype.fullSize: return "FullSize";
			default: return "AspectFit";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteContentModeType(Infragistics.ReportPlus.DashboardModel.DashboardContentModeType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDataType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	writeDataType: function (value) {
		switch (value) {
			case $.ig.DashboardDataType.prototype.string1: return "String";
			case $.ig.DashboardDataType.prototype.number: return "Number";
			case $.ig.DashboardDataType.prototype.date: return "Date";
			case $.ig.DashboardDataType.prototype.dateTime: return "DateTime";
			case $.ig.DashboardDataType.prototype.time: return "Time";
			default: return "String";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDataType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDateAggregationType(Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	writeDateAggregationType: function (value) {
		switch (value) {
			case $.ig.DashboardDateAggregationType.prototype.year: return "Year";
			case $.ig.DashboardDateAggregationType.prototype.semester: return "Semester";
			case $.ig.DashboardDateAggregationType.prototype.quarter: return "Quarter";
			case $.ig.DashboardDateAggregationType.prototype.month: return "Month";
			case $.ig.DashboardDateAggregationType.prototype.day: return "Day";
			case $.ig.DashboardDateAggregationType.prototype.hour: return "Hour";
			case $.ig.DashboardDateAggregationType.prototype.minute: return "Minute";
			default: return "Year";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDateAggregationType(Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDateRuleType(Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType)" />*/
	writeDateRuleType: function (value) {
		switch (value) {
			case $.ig.DashboardDateRuleType.prototype.none: return "None";
			case $.ig.DashboardDateRuleType.prototype.customRange: return "CustomRange";
			case $.ig.DashboardDateRuleType.prototype.lastWeek: return "LastWeek";
			case $.ig.DashboardDateRuleType.prototype.lastMonth: return "LastMonth";
			case $.ig.DashboardDateRuleType.prototype.lastYear: return "LastYear";
			case $.ig.DashboardDateRuleType.prototype.yearToDate: return "YearToDate";
			case $.ig.DashboardDateRuleType.prototype.quarterToDate: return "QuarterToDate";
			case $.ig.DashboardDateRuleType.prototype.monthToDate: return "MonthToDate";
			case $.ig.DashboardDateRuleType.prototype.allTime: return "AllTime";
			case $.ig.DashboardDateRuleType.prototype.yesterday: return "Yesterday";
			case $.ig.DashboardDateRuleType.prototype.today: return "Today";
			case $.ig.DashboardDateRuleType.prototype.thisMonth: return "ThisMonth";
			case $.ig.DashboardDateRuleType.prototype.thisQuarter: return "ThisQuarter";
			case $.ig.DashboardDateRuleType.prototype.thisYear: return "ThisYear";
			case $.ig.DashboardDateRuleType.prototype.previousMonth: return "PreviousMonth";
			case $.ig.DashboardDateRuleType.prototype.previousQuarter: return "PreviousQuarter";
			case $.ig.DashboardDateRuleType.prototype.previousYear: return "PreviousYear";
			case $.ig.DashboardDateRuleType.prototype.nextMonth: return "NextMonth";
			case $.ig.DashboardDateRuleType.prototype.nextQuarter: return "NextQuarter";
			case $.ig.DashboardDateRuleType.prototype.nextYear: return "NextYear";
			case $.ig.DashboardDateRuleType.prototype.trailingTwelveMonths: return "TrailingTwelveMonths";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteDateRuleType(Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteFilterEnumType(Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType)" />*/
	writeFilterEnumType: function (value) {
		switch (value) {
			case $.ig.DashboardFilterEnumType.prototype.allValues: return "AllValues";
			case $.ig.DashboardFilterEnumType.prototype.filterEmptyValues: return "FilterEmptyValues";
			case $.ig.DashboardFilterEnumType.prototype.selectedValues: return "SelectedValues";
			case $.ig.DashboardFilterEnumType.prototype.filterByRule: return "FilterByRule";
			default: return "AllValues";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteFilterEnumType(Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteFontSizeType(Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType)" />*/
	writeFontSizeType: function (value) {
		switch (value) {
			case $.ig.DashboardFontSizeType.prototype.small: return "Small";
			case $.ig.DashboardFontSizeType.prototype.medium: return "Medium";
			case $.ig.DashboardFontSizeType.prototype.large: return "Large";
			default: return "Small";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteFontSizeType(Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGaugeViewType(Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType)" />*/
	writeGaugeViewType: function (value) {
		switch (value) {
			case $.ig.DashboardGaugeViewType.prototype.circular: return "Circular";
			case $.ig.DashboardGaugeViewType.prototype.linear: return "Linear";
			case $.ig.DashboardGaugeViewType.prototype.singleValue: return "SingleValue";
			case $.ig.DashboardGaugeViewType.prototype.bulletGraph: return "BulletGraph";
			default: return "Circular";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGaugeViewType(Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGlobalFilterBindingOperatorType(Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType)" />*/
	writeGlobalFilterBindingOperatorType: function (value) {
		switch (value) {
			case $.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals: return "Equals";
			case $.ig.DashboardGlobalFilterBindingOperatorType.prototype.contains: return "Contains";
			case $.ig.DashboardGlobalFilterBindingOperatorType.prototype.between: return "Between";
			default: return "Equals";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGlobalFilterBindingOperatorType(Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGlobalVariableValueType(Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType)" />*/
	writeGlobalVariableValueType: function (value) {
		switch (value) {
			case $.ig.DashboardGlobalVariableValueType.prototype.string1: return "String";
			case $.ig.DashboardGlobalVariableValueType.prototype.number: return "Number";
			case $.ig.DashboardGlobalVariableValueType.prototype.dateTime: return "DateTime";
			default: return "String";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteGlobalVariableValueType(Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteHeatMapLocationType(Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType)" />*/
	writeHeatMapLocationType: function (value) {
		switch (value) {
			case $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField: return "LatitudeLongitudeSingleField";
			case $.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeFields: return "LatitudeLongitudeFields";
			default: return "LatitudeLongitudeSingleField";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteHeatMapLocationType(Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorDifferenceMode(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode)" />*/
	writeIndicatorDifferenceMode: function (value) {
		switch (value) {
			case $.ig.DashboardIndicatorDifferenceMode.prototype.percentage: return "Percentage";
			case $.ig.DashboardIndicatorDifferenceMode.prototype.value: return "Value";
			case $.ig.DashboardIndicatorDifferenceMode.prototype.valueAndPercentage: return "ValueAndPercentage";
			default: return "Percentage";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorDifferenceMode(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorTargetDateFilterType(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType)" />*/
	writeIndicatorTargetDateFilterType: function (value) {
		switch (value) {
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.allTime: return "AllTime";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.customRange: return "CustomRange";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.yearToDate: return "YearToDate";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.quarterToDate: return "QuarterToDate";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.monthToDate: return "MonthToDate";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousYear: return "PreviousYear";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousQuarter: return "PreviousQuarter";
			case $.ig.DashboardIndicatorTargetDateFilterType.prototype.previousMonth: return "PreviousMonth";
			default: return "AllTime";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorTargetDateFilterType(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorVisualizationType(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType)" />*/
	writeIndicatorVisualizationType: function (value) {
		switch (value) {
			case $.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear: return "YearToDatePreviousYear";
			case $.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousQuarter: return "QuarterToDatePreviousQuarter";
			case $.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousYear: return "QuarterToDatePreviousYear";
			case $.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousMonth: return "MonthToDatePreviousMonth";
			case $.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousYear: return "MonthToDatePreviousYear";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastYears: return "LastYears";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastQuarters: return "LastQuarters";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastMonths: return "LastMonths";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastDays: return "LastDays";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastHours: return "LastHours";
			case $.ig.DashboardIndicatorVisualizationType.prototype.lastMinutes: return "LastMinutes";
			default: return "YearToDatePreviousYear";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteIndicatorVisualizationType(Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteLabelDisplayMode(Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode)" />*/
	writeLabelDisplayMode: function (value) {
		switch (value) {
			case $.ig.DashboardLabelDisplayMode.prototype.percentage: return "Percentage";
			case $.ig.DashboardLabelDisplayMode.prototype.value: return "Value";
			case $.ig.DashboardLabelDisplayMode.prototype.valueAndPercentage: return "ValueAndPercentage";
			default: return "Percentage";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteLabelDisplayMode(Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteMapLocationType(Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType)" />*/
	writeMapLocationType: function (value) {
		switch (value) {
			case $.ig.DashboardMapLocationType.prototype.geocoding: return "Geocoding";
			case $.ig.DashboardMapLocationType.prototype.latitudeLongitudeSingleField: return "LatitudeLongitudeSingleField";
			case $.ig.DashboardMapLocationType.prototype.latitudeLongitudeFields: return "LatitudeLongitudeFields";
			default: return "Geocoding";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteMapLocationType(Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteMapVisualizationType(Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType)" />*/
	writeMapVisualizationType: function (value) {
		switch (value) {
			case $.ig.DashboardMapVisualizationType.prototype.standard: return "Standard";
			case $.ig.DashboardMapVisualizationType.prototype.satellite: return "Satellite";
			case $.ig.DashboardMapVisualizationType.prototype.hybrid: return "Hybrid";
			default: return "Standard";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteMapVisualizationType(Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNegativeFormatType(Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType)" />*/
	writeNegativeFormatType: function (value) {
		switch (value) {
			case $.ig.DashboardNegativeFormatType.prototype.empty: return "Empty";
			case $.ig.DashboardNegativeFormatType.prototype.minusSign: return "MinusSign";
			case $.ig.DashboardNegativeFormatType.prototype.parenthesis: return "Parenthesis";
			default: return "Empty";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNegativeFormatType(Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNumberFormattingType(Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType)" />*/
	writeNumberFormattingType: function (value) {
		switch (value) {
			case $.ig.DashboardNumberFormattingType.prototype.none: return "None";
			case $.ig.DashboardNumberFormattingType.prototype.number: return "Number";
			case $.ig.DashboardNumberFormattingType.prototype.percent: return "Percent";
			case $.ig.DashboardNumberFormattingType.prototype.currency: return "Currency";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNumberFormattingType(Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNumberRuleType(Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType)" />*/
	writeNumberRuleType: function (value) {
		switch (value) {
			case $.ig.DashboardNumberRuleType.prototype.none: return "None";
			case $.ig.DashboardNumberRuleType.prototype.topItems: return "TopItems";
			case $.ig.DashboardNumberRuleType.prototype.topPercent: return "TopPercent";
			case $.ig.DashboardNumberRuleType.prototype.bottomItems: return "BottomItems";
			case $.ig.DashboardNumberRuleType.prototype.bottomPercent: return "BottomPercent";
			case $.ig.DashboardNumberRuleType.prototype.aboveAverage: return "AboveAverage";
			case $.ig.DashboardNumberRuleType.prototype.aboveValue: return "AboveValue";
			case $.ig.DashboardNumberRuleType.prototype.belowAverage: return "BelowAverage";
			case $.ig.DashboardNumberRuleType.prototype.belowValue: return "BelowValue";
			case $.ig.DashboardNumberRuleType.prototype.aboveEqualsValue: return "AboveEqualsValue";
			case $.ig.DashboardNumberRuleType.prototype.belowEqualsValue: return "BelowEqualsValue";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteNumberRuleType(Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteScatterMapColorizationModeType(Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType)" />*/
	writeScatterMapColorizationModeType: function (value) {
		switch (value) {
			case $.ig.DashboardScatterMapColorizationModeType.prototype.single: return "Single";
			case $.ig.DashboardScatterMapColorizationModeType.prototype.range: return "Range";
			case $.ig.DashboardScatterMapColorizationModeType.prototype.conditionalFormatting: return "ConditionalFormatting";
			default: return "Single";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteScatterMapColorizationModeType(Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteShapeType(Infragistics.ReportPlus.DashboardModel.DashboardShapeType)" />*/
	writeShapeType: function (value) {
		switch (value) {
			case $.ig.DashboardShapeType.prototype.none: return "None";
			case $.ig.DashboardShapeType.prototype.circle: return "Circle";
			case $.ig.DashboardShapeType.prototype.arrowUp: return "ArrowUp";
			case $.ig.DashboardShapeType.prototype.arrowRight: return "ArrowRight";
			case $.ig.DashboardShapeType.prototype.arrowDown: return "ArrowDown";
			case $.ig.DashboardShapeType.prototype.arrowLeft: return "ArrowLeft";
			case $.ig.DashboardShapeType.prototype.dash: return "Dash";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteShapeType(Infragistics.ReportPlus.DashboardModel.DashboardShapeType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteSortingType(Infragistics.ReportPlus.DashboardModel.DashboardSortingType)" />*/
	writeSortingType: function (value) {
		switch (value) {
			case $.ig.DashboardSortingType.prototype.none: return "None";
			case $.ig.DashboardSortingType.prototype.asc: return "Asc";
			case $.ig.DashboardSortingType.prototype.desc: return "Desc";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteSortingType(Infragistics.ReportPlus.DashboardModel.DashboardSortingType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteStringRuleType(Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType)" />*/
	writeStringRuleType: function (value) {
		switch (value) {
			case $.ig.DashboardStringRuleType.prototype.none: return "None";
			case $.ig.DashboardStringRuleType.prototype.equals: return "Equals";
			case $.ig.DashboardStringRuleType.prototype.notEquals: return "NotEquals";
			case $.ig.DashboardStringRuleType.prototype.contains: return "Contains";
			case $.ig.DashboardStringRuleType.prototype.notContains: return "NotContains";
			case $.ig.DashboardStringRuleType.prototype.startsWith: return "StartsWith";
			case $.ig.DashboardStringRuleType.prototype.endsWith: return "EndsWith";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteStringRuleType(Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTextAlignment(Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment)" />*/
	writeTextAlignment: function (value) {
		switch (value) {
			case $.ig.DashboardTextAlignment.prototype.inherit: return "Inherit";
			case $.ig.DashboardTextAlignment.prototype.left: return "Left";
			case $.ig.DashboardTextAlignment.prototype.center: return "Center";
			case $.ig.DashboardTextAlignment.prototype.right: return "Right";
			default: return "Inherit";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTextAlignment(Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTimeRuleType(Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType)" />*/
	writeTimeRuleType: function (value) {
		switch (value) {
			case $.ig.DashboardTimeRuleType.prototype.none: return "None";
			case $.ig.DashboardTimeRuleType.prototype.customRange: return "CustomRange";
			case $.ig.DashboardTimeRuleType.prototype.allTime: return "AllTime";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTimeRuleType(Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapBoundColorType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType)" />*/
	writeTreeMapBoundColorType: function (value) {
		switch (value) {
			case $.ig.DashboardTreeMapBoundColorType.prototype.green: return "Green";
			case $.ig.DashboardTreeMapBoundColorType.prototype.red: return "Red";
			default: return "Green";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapBoundColorType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapColorType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType)" />*/
	writeTreeMapColorType: function (value) {
		switch (value) {
			case $.ig.DashboardTreeMapColorType.prototype.singleColor: return "SingleColor";
			case $.ig.DashboardTreeMapColorType.prototype.gradient: return "Gradient";
			default: return "SingleColor";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapColorType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapLayoutEnumType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType)" />*/
	writeTreeMapLayoutEnumType: function (value) {
		switch (value) {
			case $.ig.DashboardTreeMapLayoutEnumType.prototype.squarified: return "Squarified";
			case $.ig.DashboardTreeMapLayoutEnumType.prototype.sliceAndDice: return "SliceAndDice";
			case $.ig.DashboardTreeMapLayoutEnumType.prototype.strip: return "Strip";
			default: return "Squarified";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTreeMapLayoutEnumType(Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTrendlineType(Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType)" />*/
	writeTrendlineType: function (value) {
		switch (value) {
			case $.ig.DashboardTrendlineType.prototype.none: return "None";
			case $.ig.DashboardTrendlineType.prototype.linearFit: return "LinearFit";
			case $.ig.DashboardTrendlineType.prototype.quadraticFit: return "QuadraticFit";
			case $.ig.DashboardTrendlineType.prototype.cubicFit: return "CubicFit";
			case $.ig.DashboardTrendlineType.prototype.quarticFit: return "QuarticFit";
			case $.ig.DashboardTrendlineType.prototype.logarithmicFit: return "LogarithmicFit";
			case $.ig.DashboardTrendlineType.prototype.exponentialFit: return "ExponentialFit";
			case $.ig.DashboardTrendlineType.prototype.powerLawFit: return "PowerLawFit";
			case $.ig.DashboardTrendlineType.prototype.simpleAverage: return "SimpleAverage";
			case $.ig.DashboardTrendlineType.prototype.exponentialAverage: return "ExponentialAverage";
			case $.ig.DashboardTrendlineType.prototype.modifiedAverage: return "ModifiedAverage";
			case $.ig.DashboardTrendlineType.prototype.cumulativeAverage: return "CumulativeAverage";
			case $.ig.DashboardTrendlineType.prototype.weightedAverage: return "WeightedAverage";
			default: return "None";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteTrendlineType(Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteXmlaDimensionEnumType(Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType)" />*/
	writeXmlaDimensionEnumType: function (value) {
		switch (value) {
			case $.ig.DashboardXmlaDimensionEnumType.prototype.regular: return "Regular";
			case $.ig.DashboardXmlaDimensionEnumType.prototype.date: return "Date";
			default: return "Regular";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteXmlaDimensionEnumType(Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteXmlaElementType(Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType)" />*/
	writeXmlaElementType: function (value) {
		switch (value) {
			case $.ig.DashboardXmlaElementType.prototype.dimension: return "Dimension";
			case $.ig.DashboardXmlaElementType.prototype.level: return "Level";
			case $.ig.DashboardXmlaElementType.prototype.hierarchy: return "Hierarchy";
			case $.ig.DashboardXmlaElementType.prototype.member: return "Member";
			case $.ig.DashboardXmlaElementType.prototype.set: return "Set";
			default: return "Dimension";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization::WriteXmlaElementType(Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType)" />*/
	,
	$type: new $.ig.Type('DashboardEnumSerialization', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardEnumSerialization" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IJSONSerializable" />*/

$.ig.util.defType('IJSONSerializable', 'Object', {
	$type: new $.ig.Type('IJSONSerializable', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IJSONSerializable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IJSONDeserializable" />*/

$.ig.util.defType('IJSONDeserializable', 'Object', {
	$type: new $.ig.Type('IJSONDeserializable', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IJSONDeserializable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IDashboardModelObject" />*/

$.ig.util.defType('IDashboardModelObject', 'Object', {
	$type: new $.ig.Type('IDashboardModelObject', null, [$.ig.IJSONSerializable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IDashboardModelObject" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ActionParameter" />*/

$.ig.util.defType('ActionParameter', 'Object', {
	_namespace: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Namespace()" />*/
	namespace: function (value) {
		if (arguments.length === 1) {
			this._namespace = value;
			return value;
		} else {
			return this._namespace;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Namespace()" />*/
	,
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Name()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType Infragistics.ReportPlus.DashboardModel.ActionParameter::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType Infragistics.ReportPlus.DashboardModel.ActionParameter::Type()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ActionParameter::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.type($.ig.DashboardActionParameterSourceType.prototype.column);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.namespace(other.namespace());
		this.name(other.name());
		this.type(other.type());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.namespace($.ig.JsonUtility.prototype.loadString(json, "Namespace"));
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.type($.ig.DashboardEnumDeserialization.prototype.readActionParameterSourceType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.value($.ig.JsonUtility.prototype.loadString(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ActionParameter::Clone()" />*/
	clone: function () {
		return new $.ig.ActionParameter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ActionParameter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ActionParameter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Namespace", this.namespace());
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeActionParameterSourceType(this.type()));
		$.ig.JsonUtility.prototype.saveObject(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ActionParameter::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ActionParameter Infragistics.ReportPlus.DashboardModel.ActionParameter::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ActionParameter(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ActionParameter Infragistics.ReportPlus.DashboardModel.ActionParameter::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ActionParameter', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ActionParameter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ActionsModel" />*/

$.ig.util.defType('ActionsModel', 'Object', {
	_trigger: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType Infragistics.ReportPlus.DashboardModel.ActionsModel::Trigger()" />*/
	trigger: function (value) {
		if (arguments.length === 1) {
			this._trigger = value;
			return value;
		} else {
			return this._trigger;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType Infragistics.ReportPlus.DashboardModel.ActionsModel::Trigger()" />*/
	,
	_actions: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ActionsModel::Actions()" />*/
	actions: function (value) {
		if (arguments.length === 1) {
			this._actions = value;
			return value;
		} else {
			return this._actions;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ActionsModel::Actions()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.actions(new $.ig.Array());
		this.trigger($.ig.DashboardActionTriggerType.prototype.selectRow);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.trigger(other.trigger());
		this.actions($.ig.CloneListUtils.prototype.cloneList(other.actions(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.trigger($.ig.DashboardEnumDeserialization.prototype.readActionTriggerType($.ig.JsonUtility.prototype.loadString(json, "Trigger")));
		this.actions(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Actions")) {
			var jsonActions = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Actions");
			var jsonListSize = jsonActions.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.actions().add(new $.ig.Action(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonActions[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ActionsModel::Clone()" />*/
	clone: function () {
		return new $.ig.ActionsModel(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ActionsModel::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ActionsModel::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Trigger", $.ig.DashboardEnumSerialization.prototype.writeActionTriggerType(this.trigger()));
		$.ig.JsonUtility.prototype.saveContainer(json, "Actions", this.actions());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ActionsModel::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ActionsModel Infragistics.ReportPlus.DashboardModel.ActionsModel::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ActionsModel(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ActionsModel Infragistics.ReportPlus.DashboardModel.ActionsModel::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ActionsModel', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ActionsModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Action" />*/

$.ig.util.defType('Action', 'Object', {
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType Infragistics.ReportPlus.DashboardModel.Action::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType Infragistics.ReportPlus.DashboardModel.Action::Type()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::Title()" />*/
	,
	_url: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::Url()" />*/
	url: function (value) {
		if (arguments.length === 1) {
			this._url = value;
			return value;
		} else {
			return this._url;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::Url()" />*/
	,
	_parameters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Action::Parameters()" />*/
	parameters: function (value) {
		if (arguments.length === 1) {
			this._parameters = value;
			return value;
		} else {
			return this._parameters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Action::Parameters()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.parameters(new $.ig.Array());
		this.type($.ig.DashboardActionTargetType.prototype.openDashboard);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.type(other.type());
		this.title(other.title());
		this.url(other.url());
		this.parameters($.ig.CloneListUtils.prototype.cloneList(other.parameters(), new $.ig.Array()));
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.type($.ig.DashboardEnumDeserialization.prototype.readActionTargetType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		this.url($.ig.JsonUtility.prototype.loadString(json, "Url"));
		this.parameters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Parameters")) {
			var jsonParameters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Parameters");
			var jsonListSize = jsonParameters.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.parameters().add(new $.ig.ActionParameter(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonParameters[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Action::Clone()" />*/
	clone: function () {
		return new $.ig.Action(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Action::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Action::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeActionTargetType(this.type()));
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "Url", this.url());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Action::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Action Infragistics.ReportPlus.DashboardModel.Action::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.Action(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Action Infragistics.ReportPlus.DashboardModel.Action::FromJson(System.JSDictionary)" />*/
	,
	_processedTitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::ProcessedTitle()" />*/
	processedTitle: function (value) {
		if (arguments.length === 1) {
			this._processedTitle = value;
			return value;
		} else {
			return this._processedTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Action::ProcessedTitle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.Action::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.Action)" />*/
	copyAdditionalProperties: function (other) {
		this.processedTitle(other.processedTitle());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.Action::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.Action)" />*/
	,
	$type: new $.ig.Type('Action', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Action" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AdditionalTable" />*/

$.ig.util.defType('AdditionalTable', 'Object', {
	_alias: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AdditionalTable::Alias()" />*/
	alias: function (value) {
		if (arguments.length === 1) {
			this._alias = value;
			return value;
		} else {
			return this._alias;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AdditionalTable::Alias()" />*/
	,
	_dataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.AdditionalTable::DataSpec()" />*/
	dataSpec: function (value) {
		if (arguments.length === 1) {
			this._dataSpec = value;
			return value;
		} else {
			return this._dataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.AdditionalTable::DataSpec()" />*/
	,
	_joinConditions: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdditionalTable::JoinConditions()" />*/
	joinConditions: function (value) {
		if (arguments.length === 1) {
			this._joinConditions = value;
			return value;
		} else {
			return this._joinConditions;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdditionalTable::JoinConditions()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.joinConditions(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.alias(other.alias());
		this.dataSpec($.ig.CloneUtils.prototype.cloneObject(other.dataSpec()));
		this.joinConditions($.ig.CloneListUtils.prototype.cloneList(other.joinConditions(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.alias($.ig.JsonUtility.prototype.loadString(json, "Alias"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSpec")) {
			this.dataSpec($.ig.DataSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSpec"])));
		}
		this.joinConditions(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "JoinConditions")) {
			var jsonJoinConditions = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "JoinConditions");
			var jsonListSize = jsonJoinConditions.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.joinConditions().add(new $.ig.JoinCondition(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonJoinConditions[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdditionalTable::Clone()" />*/
	clone: function () {
		return new $.ig.AdditionalTable(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdditionalTable::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdditionalTable::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Alias", this.alias());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveContainer(json, "JoinConditions", this.joinConditions());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdditionalTable::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.AdditionalTable Infragistics.ReportPlus.DashboardModel.AdditionalTable::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.AdditionalTable(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.AdditionalTable Infragistics.ReportPlus.DashboardModel.AdditionalTable::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('AdditionalTable', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AdditionalTable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement" />*/

$.ig.util.defType('AdHocExpandedElement', 'Object', {
	_path: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::Path()" />*/
	path: function (value) {
		if (arguments.length === 1) {
			this._path = value;
			return value;
		} else {
			return this._path;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::Path()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.path(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.path($.ig.CloneListUtils.prototype.cloneList(other.path(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.path($.ig.JsonUtility.prototype.loadStringList(json, "Path"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::Clone()" />*/
	clone: function () {
		return new $.ig.AdHocExpandedElement(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveStringList(json, "Path", this.path());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.AdHocExpandedElement(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('AdHocExpandedElement', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AdHocExpandedElement" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField" />*/

$.ig.util.defType('AdHocHierarchyGlobalFilterField', 'Object', {
	_selectedFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::SelectedFieldName()" />*/
	selectedFieldName: function (value) {
		if (arguments.length === 1) {
			this._selectedFieldName = value;
			return value;
		} else {
			return this._selectedFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::SelectedFieldName()" />*/
	,
	_additionalFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::AdditionalFields()" />*/
	additionalFields: function (value) {
		if (arguments.length === 1) {
			this._additionalFields = value;
			return value;
		} else {
			return this._additionalFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::AdditionalFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.additionalFields(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.selectedFieldName(other.selectedFieldName());
		this.additionalFields($.ig.CloneListUtils.prototype.cloneList(other.additionalFields(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.selectedFieldName($.ig.JsonUtility.prototype.loadString(json, "SelectedFieldName"));
		this.additionalFields($.ig.JsonUtility.prototype.loadStringList(json, "AdditionalFields"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::Clone()" />*/
	clone: function () {
		return new $.ig.AdHocHierarchyGlobalFilterField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		$.ig.JsonUtility.prototype.saveStringList(json, "AdditionalFields", this.additionalFields());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.AdHocHierarchyGlobalFilterField(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('AdHocHierarchyGlobalFilterField', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilterField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter" />*/

$.ig.util.defType('GlobalFilter', 'Object', {
	_id: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalFilter::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			this._id = value;
			return value;
		} else {
			return this._id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalFilter::Id()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalFilter::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalFilter::Title()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.id(other.id());
		this.title(other.title());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.id($.ig.JsonUtility.prototype.loadString(json, "Id"));
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilter::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilter::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter Infragistics.ReportPlus.DashboardModel.GlobalFilter::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "AdHocHierarchyGlobalFilterType") {
			return new $.ig.AdHocHierarchyGlobalFilter(2, json);
		} else if (instanceType == "DateGlobalFilterType") {
			return new $.ig.DateGlobalFilter(2, json);
		} else if (instanceType == "HierarchicalGlobalFilterType") {
			return new $.ig.HierarchicalGlobalFilter(2, json);
		} else if (instanceType == "ParameterBasedHierarchyGlobalFilterType") {
			return new $.ig.ParameterBasedHierarchyGlobalFilter(2, json);
		} else if (instanceType == "ParentChildHierarchyGlobalFilterType") {
			return new $.ig.ParentChildHierarchyGlobalFilter(2, json);
		} else if (instanceType == "TabularGlobalFilterType") {
			return new $.ig.TabularGlobalFilter(2, json);
		} else if (instanceType == "XmlaGlobalFilterType") {
			return new $.ig.XmlaGlobalFilter(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter Infragistics.ReportPlus.DashboardModel.GlobalFilter::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('GlobalFilter', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter" />*/

$.ig.util.defType('DataSourceBasedGlobalFilter', 'GlobalFilter', {
	_isDynamic: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::IsDynamic()" />*/
	isDynamic: function (value) {
		if (arguments.length === 1) {
			this._isDynamic = value;
			return value;
		} else {
			return this._isDynamic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::IsDynamic()" />*/
	,
	_allowMultipleSelection: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::AllowMultipleSelection()" />*/
	allowMultipleSelection: function (value) {
		if (arguments.length === 1) {
			this._allowMultipleSelection = value;
			return value;
		} else {
			return this._allowMultipleSelection;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::AllowMultipleSelection()" />*/
	,
	_allowEmptySelection: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::AllowEmptySelection()" />*/
	allowEmptySelection: function (value) {
		if (arguments.length === 1) {
			this._allowEmptySelection = value;
			return value;
		} else {
			return this._allowEmptySelection;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::AllowEmptySelection()" />*/
	,
	_sortByLabel: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::SortByLabel()" />*/
	sortByLabel: function (value) {
		if (arguments.length === 1) {
			this._sortByLabel = value;
			return value;
		} else {
			return this._sortByLabel;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::SortByLabel()" />*/
	,
	_selectedItems: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::SelectedItems()" />*/
	selectedItems: function (value) {
		if (arguments.length === 1) {
			this._selectedItems = value;
			return value;
		} else {
			return this._selectedItems;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::SelectedItems()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GlobalFilter.prototype.init.call(this, 0);
		this.selectedItems(new $.ig.Array());
		this.sortByLabel(true);
	},
	init1: function (initNumber, other) {
		$.ig.GlobalFilter.prototype.init1.call(this, 1, other);
		this.isDynamic(other.isDynamic());
		this.allowMultipleSelection(other.allowMultipleSelection());
		this.allowEmptySelection(other.allowEmptySelection());
		this.sortByLabel(other.sortByLabel());
		this.selectedItems($.ig.CloneListUtils.prototype.cloneList(other.selectedItems(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.GlobalFilter.prototype.init2.call(this, 2, json);
		this.isDynamic($.ig.JsonUtility.prototype.loadBool(json, "IsDynamic"));
		this.allowMultipleSelection($.ig.JsonUtility.prototype.loadBool(json, "AllowMultipleSelection"));
		this.allowEmptySelection($.ig.JsonUtility.prototype.loadBool(json, "AllowEmptySelection"));
		this.sortByLabel($.ig.JsonUtility.prototype.loadBool1(json, "SortByLabel", true));
		this.selectedItems(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "SelectedItems")) {
			var jsonSelectedItems = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "SelectedItems");
			var jsonListSize = jsonSelectedItems.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.selectedItems().add(new $.ig.GlobalFilterSelectedItem(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonSelectedItems[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('DataSourceBasedGlobalFilter', $.ig.GlobalFilter.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSourceBasedGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter" />*/

$.ig.util.defType('TabularGlobalFilter', 'DataSourceBasedGlobalFilter', {
	_dataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.TabularDataSpec Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::DataSpec()" />*/
	dataSpec: function (value) {
		if (arguments.length === 1) {
			this._dataSpec = value;
			return value;
		} else {
			return this._dataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.TabularDataSpec Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::DataSpec()" />*/
	,
	_selectedFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::SelectedFieldName()" />*/
	selectedFieldName: function (value) {
		if (arguments.length === 1) {
			this._selectedFieldName = value;
			return value;
		} else {
			return this._selectedFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::SelectedFieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSourceBasedGlobalFilter.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataSourceBasedGlobalFilter.prototype.init1.call(this, 1, other);
		this.dataSpec($.ig.CloneUtils.prototype.cloneObject(other.dataSpec()));
		this.selectedFieldName(other.selectedFieldName());
	},
	init2: function (initNumber, json) {
		$.ig.DataSourceBasedGlobalFilter.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSpec")) {
			this.dataSpec(new $.ig.TabularDataSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSpec"])));
		}
		this.selectedFieldName($.ig.JsonUtility.prototype.loadString(json, "SelectedFieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.TabularGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('TabularGlobalFilter', $.ig.DataSourceBasedGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TabularGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter" />*/

$.ig.util.defType('HierarchicalGlobalFilter', 'TabularGlobalFilter', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TabularGlobalFilter.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.TabularGlobalFilter.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.TabularGlobalFilter.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.HierarchicalGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('HierarchicalGlobalFilter', $.ig.TabularGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.HierarchicalGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter" />*/

$.ig.util.defType('AdHocHierarchyGlobalFilter', 'HierarchicalGlobalFilter', {
	_hierarchyFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::HierarchyFields()" />*/
	hierarchyFields: function (value) {
		if (arguments.length === 1) {
			this._hierarchyFields = value;
			return value;
		} else {
			return this._hierarchyFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::HierarchyFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HierarchicalGlobalFilter.prototype.init.call(this, 0);
		this.hierarchyFields(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.HierarchicalGlobalFilter.prototype.init1.call(this, 1, other);
		this.hierarchyFields($.ig.CloneListUtils.prototype.cloneList(other.hierarchyFields(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.HierarchicalGlobalFilter.prototype.init2.call(this, 2, json);
		this.hierarchyFields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "HierarchyFields")) {
			var jsonHierarchyFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "HierarchyFields");
			var jsonListSize = jsonHierarchyFields.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.hierarchyFields().add(new $.ig.AdHocHierarchyGlobalFilterField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonHierarchyFields[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.AdHocHierarchyGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		$.ig.JsonUtility.prototype.saveContainer(json, "HierarchyFields", this.hierarchyFields());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('AdHocHierarchyGlobalFilter', $.ig.HierarchicalGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AdHocHierarchyGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask" />*/

$.ig.util.defType('DataProcessingTask', 'Object', {
	_inputFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataProcessingTask::InputFields()" />*/
	inputFields: function (value) {
		if (arguments.length === 1) {
			this._inputFields = value;
			return value;
		} else {
			return this._inputFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataProcessingTask::InputFields()" />*/
	,
	_outputFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataProcessingTask::OutputFields()" />*/
	outputFields: function (value) {
		if (arguments.length === 1) {
			this._outputFields = value;
			return value;
		} else {
			return this._outputFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataProcessingTask::OutputFields()" />*/
	,
	_parameters: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingTask::Parameters()" />*/
	parameters: function (value) {
		if (arguments.length === 1) {
			this._parameters = value;
			return value;
		} else {
			return this._parameters;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingTask::Parameters()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.inputFields(new $.ig.Array());
		this.outputFields(new $.ig.Array());
		this.parameters(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.inputFields($.ig.CloneListUtils.prototype.cloneList(other.inputFields(), new $.ig.Array()));
		this.outputFields($.ig.CloneListUtils.prototype.cloneList(other.outputFields(), new $.ig.Array()));
		this.parameters($.ig.CloneUtils.prototype.cloneDictionary(other.parameters()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.inputFields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "InputFields")) {
			var jsonInputFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "InputFields");
			var jsonListSize = jsonInputFields.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.inputFields().add(new $.ig.DataProcessingInputField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonInputFields[i])));
			}
		}
		this.outputFields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "OutputFields")) {
			var jsonOutputFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "OutputFields");
			var jsonListSize1 = jsonOutputFields.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.outputFields().add(new $.ig.DataProcessingOutputField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonOutputFields[i1])));
			}
		}
		this.parameters($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Parameters"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingTask::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingTask::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.DataProcessingTask::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "AmazonMLDataProcessingTaskType") {
			return new $.ig.AmazonMLDataProcessingTask(2, json);
		} else if (instanceType == "AzureMLDataProcessingTaskType") {
			return new $.ig.AzureMLDataProcessingTask(2, json);
		} else if (instanceType == "BigQueryMLDataProcessingTaskType") {
			return new $.ig.BigQueryMLDataProcessingTask(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.DataProcessingTask::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DataProcessingTask', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask" />*/

$.ig.util.defType('AmazonMLDataProcessingTask', 'DataProcessingTask', {
	_url: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Url()" />*/
	url: function (value) {
		if (arguments.length === 1) {
			this._url = value;
			return value;
		} else {
			return this._url;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Url()" />*/
	,
	_key: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Key()" />*/
	key: function (value) {
		if (arguments.length === 1) {
			this._key = value;
			return value;
		} else {
			return this._key;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Key()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataProcessingTask.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataProcessingTask.prototype.init1.call(this, 1, other);
		this.url(other.url());
		this.key(other.key());
	},
	init2: function (initNumber, json) {
		$.ig.DataProcessingTask.prototype.init2.call(this, 2, json);
		this.url($.ig.JsonUtility.prototype.loadString(json, "Url"));
		this.key($.ig.JsonUtility.prototype.loadString(json, "Key"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Clone()" />*/
	clone: function () {
		return new $.ig.AmazonMLDataProcessingTask(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "InputFields", this.inputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "OutputFields", this.outputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		$.ig.JsonUtility.prototype.saveObject(json, "Url", this.url());
		$.ig.JsonUtility.prototype.saveObject(json, "Key", this.key());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask::ToJson()" />*/
	,
	$type: new $.ig.Type('AmazonMLDataProcessingTask', $.ig.DataProcessingTask.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AmazonMLDataProcessingTask" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec" />*/

$.ig.util.defType('VisualizationDataSpec', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "AssetVisualizationDataSpecType") {
			return new $.ig.AssetVisualizationDataSpec(2, json);
		} else if (instanceType == "BubbleVisualizationDataSpecType") {
			return new $.ig.BubbleVisualizationDataSpec(2, json);
		} else if (instanceType == "CategoryVisualizationDataSpecType") {
			return new $.ig.CategoryVisualizationDataSpec(2, json);
		} else if (instanceType == "ChoroplethMapVisualizationDataSpecType") {
			return new $.ig.ChoroplethMapVisualizationDataSpec(2, json);
		} else if (instanceType == "CompositeChartVisualizationDataSpecType") {
			return new $.ig.CompositeChartVisualizationDataSpec(2, json);
		} else if (instanceType == "FinancialVisualizationDataSpecType") {
			return new $.ig.FinancialVisualizationDataSpec(2, json);
		} else if (instanceType == "GridVisualizationDataSpecType") {
			return new $.ig.GridVisualizationDataSpec(2, json);
		} else if (instanceType == "IndicatorBaseVisualizationDataSpecType") {
			return new $.ig.IndicatorBaseVisualizationDataSpec(2, json);
		} else if (instanceType == "IndicatorTargetVisualizationDataSpecType") {
			return new $.ig.IndicatorTargetVisualizationDataSpec(2, json);
		} else if (instanceType == "IndicatorVisualizationDataSpecType") {
			return new $.ig.IndicatorVisualizationDataSpec(2, json);
		} else if (instanceType == "LinearGaugeVisualizationDataSpecType") {
			return new $.ig.LinearGaugeVisualizationDataSpec(2, json);
		} else if (instanceType == "PivotVisualizationDataSpecType") {
			return new $.ig.PivotVisualizationDataSpec(2, json);
		} else if (instanceType == "ScatterMapVisualizationDataSpecType") {
			return new $.ig.ScatterMapVisualizationDataSpec(2, json);
		} else if (instanceType == "ScatterVisualizationDataSpecType") {
			return new $.ig.ScatterVisualizationDataSpec(2, json);
		} else if (instanceType == "SingleGaugeVisualizationDataSpecType") {
			return new $.ig.SingleGaugeVisualizationDataSpec(2, json);
		} else if (instanceType == "SingleValueCategoryVisualizationDataSpecType") {
			return new $.ig.SingleValueCategoryVisualizationDataSpec(2, json);
		} else if (instanceType == "SingleValueLabelsVisualizationDataSpecType") {
			return new $.ig.SingleValueLabelsVisualizationDataSpec(2, json);
		} else if (instanceType == "SingleValueVisualizationDataSpecType") {
			return new $.ig.SingleValueVisualizationDataSpec(2, json);
		} else if (instanceType == "SparklineVisualizationDataSpecType") {
			return new $.ig.SparklineVisualizationDataSpec(2, json);
		} else if (instanceType == "TimeSeriesVisualizationDataSpecType") {
			return new $.ig.TimeSeriesVisualizationDataSpec(2, json);
		} else if (instanceType == "TreeMapVisualizationDataSpecType") {
			return new $.ig.TreeMapVisualizationDataSpec(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::FromJson(System.JSDictionary)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddField(System.String, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	addField: function (section, field) {
		if (this.isMeasureSection(section)) {
			this.addColumn(section, new $.ig.MeasureColumnSpec(4, section, field, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(field)));
		} else if (this.isDateOnlySection(section)) {
			if (field.fieldType() == $.ig.DashboardDataType.prototype.date || field.fieldType() == $.ig.DashboardDataType.prototype.dateTime || field.fieldType() == $.ig.DashboardDataType.prototype.time) {
				this.addColumn(section, new $.ig.DimensionColumnSpec(3, section, field, $.ig.DashboardModelUtils.prototype.createSummarizationField(field)));
			}
		} else {
			this.addColumn(section, new $.ig.DimensionColumnSpec(3, section, field, $.ig.DashboardModelUtils.prototype.createSummarizationField(field)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddField(System.String, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::SetSectionType(System.String, System.String)" />*/
	setSectionType: function (section, type) {
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::SetSectionType(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::EnsureVisibleMeasure(System.String)" />*/
	ensureVisibleMeasure: function (section) {
		var measures = this.getMeasuresInSection(section);
		var measureCount = measures.length;
		if (measureCount == 0) {
			return;
		}
		var visibleCount = $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(measures);
		if (visibleCount > 0) {
			return;
		}
		for (var i = 0; i < measureCount; i++) {
			var measure = measures[i];
			if (measure.isCalculated()) {
				measure.isHidden(false);
				return;
			}
		}
		(measures[0]).isHidden(false);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::EnsureVisibleMeasure(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetMeasuresInSection(System.String)" />*/
	getMeasuresInSection: function (section) {
		var measures = this.getAllMeasureColumns();
		var measureCount = measures.length;
		var sectionMeasures = new $.ig.Array();
		for (var m = 0; m < measureCount; m++) {
			var measure = measures[m];
			if (measure.location() == section) {
				sectionMeasures.add(measure);
			}
		}
		return sectionMeasures;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetMeasuresInSection(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetAllMeasureColumns()" />*/
	getAllMeasureColumns: function () {
		var allColumns = this.getAllColumns();
		var measures = new $.ig.Array();
		var colCount = allColumns.length;
		for (var c = 0; c < colCount; c++) {
			var col = allColumns[c];
			if ($.ig.util.cast($.ig.MeasureColumnSpec.prototype.$type, col) !== null) {
				measures.add(col);
			}
		}
		return measures;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetAllMeasureColumns()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsMeasureSection(System.String)" />*/
	isMeasureSection: function (section) {
		return section == $.ig.VisualizationDataSpec.prototype.valuesSection || section == $.ig.VisualizationDataSpec.prototype.singleValueSection || section == $.ig.VisualizationDataSpec.prototype.targetSection || section == $.ig.VisualizationDataSpec.prototype.openSection || section == $.ig.VisualizationDataSpec.prototype.highSection || section == $.ig.VisualizationDataSpec.prototype.lowSection || section == $.ig.VisualizationDataSpec.prototype.closeSection || section == $.ig.VisualizationDataSpec.prototype.xAxisSection || section == $.ig.VisualizationDataSpec.prototype.yAxisSection || section == $.ig.VisualizationDataSpec.prototype.radiusSection || section == $.ig.VisualizationDataSpec.prototype.chart1Section || section == $.ig.VisualizationDataSpec.prototype.chart2Section || section == $.ig.VisualizationDataSpec.prototype.mapColorSection;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsMeasureSection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsDateOnlySection(System.String)" />*/
	isDateOnlySection: function (section) {
		return section == $.ig.VisualizationDataSpec.prototype.dateSection;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsDateOnlySection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsStringOnlySection(System.String)" />*/
	isStringOnlySection: function (section) {
		return section == $.ig.VisualizationDataSpec.prototype.locationSection;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsStringOnlySection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::SetDefaultDateAggregation(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec, System.String)" />*/
	setDefaultDateAggregation: function (column, section) {
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::SetDefaultDateAggregation(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsEmptySection(System.String)" />*/
	isEmptySection: function (section) {
		var columns = this.getAllColumns();
		var count = columns == null ? 0 : columns.length;
		for (var i = 0; i < count; i++) {
			var col = columns[i];
			if (section == col.location()) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsEmptySection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromDimensions(System.Collections.ArrayList, System.String)" />*/
	removeFromDimensions: function (list, identifier) {
		var count = list.length;
		for (var i = 0; i < count; i++) {
			if ((list[i]).identifier() == identifier) {
				list.removeAt(i);
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromDimensions(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromDimensions(System.Collections.ArrayList, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	removeFromDimensions1: function (list, identifier, dateAggregation) {
		var count = list.length;
		for (var i = 0; i < count; i++) {
			var dc = list[i];
			if (dc.identifier() == identifier && dc.dateAggregation() == dateAggregation) {
				list.removeAt(i);
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromDimensions(System.Collections.ArrayList, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromMeasures(System.Collections.ArrayList, System.String)" />*/
	removeFromMeasures: function (list, identifier) {
		var count = list.length;
		for (var i = 0; i < count; i++) {
			if ((list[i]).identifier() == identifier) {
				list.removeAt(i);
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveFromMeasures(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddSectionColumns(System.String, Infragistics.CPList, System.String)" />*/
	addSectionColumns: function (targetSectionId, columns, srcSection) {
		return this.addSectionColumns1(targetSectionId, columns, srcSection, -1);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddSectionColumns(System.String, Infragistics.CPList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddSectionColumns(System.String, Infragistics.CPList, System.String, System.Int32)" />*/
	addSectionColumns1: function (targetSectionId, columns, section, limit) {
		var remainingColumns = new $.ig.Array();
		var columnCount = columns.length;
		var addedCount = 0;
		for (var c = 0; c < columnCount; c++) {
			var column = columns[c];
			if (column.location() == section) {
				var dimColumn = $.ig.VisualizationDataSpec.prototype.toDimensionSpec(column);
				if (dimColumn != null && addedCount != limit && this.isCompatibleTypeForSection(targetSectionId, dimColumn.type())) {
					this.addColumn(targetSectionId, dimColumn);
					addedCount++;
					continue;
				}
			}
			remainingColumns.add(column);
		}
		return remainingColumns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddSectionColumns(System.String, Infragistics.CPList, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsCompatibleTypeForSection(System.String, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	isCompatibleTypeForSection: function (sectionId, type) {
		if (this.isDateOnlySection(sectionId)) {
			return $.ig.DashboardModelUtils.prototype.isDateBasedDataType(type);
		} else if (this.isStringOnlySection(sectionId)) {
			return type == $.ig.DashboardDataType.prototype.string1;
		} else {
			return true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsCompatibleTypeForSection(System.String, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddNumericColumns(System.String, Infragistics.CPList)" />*/
	addNumericColumns: function (targetSectionId, columns) {
		return this.addNumericColumns1(targetSectionId, columns, -1);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddNumericColumns(System.String, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddNumericColumns(System.String, Infragistics.CPList, System.Int32)" />*/
	addNumericColumns1: function (targetSectionId, columns, limit) {
		var remainingColumns = new $.ig.Array();
		var columnCount = columns.length;
		var addedCount = 0;
		for (var c = 0; c < columnCount; c++) {
			var column = columns[c];
			if ($.ig.util.cast($.ig.MeasureColumnSpec.prototype.$type, column) !== null || ($.ig.util.cast($.ig.TabularColumnSpec.prototype.$type, column) !== null && column.type() == $.ig.DashboardDataType.prototype.number)) {
				var meaColumn = $.ig.VisualizationDataSpec.prototype.toMeasureSpec(column);
				if (meaColumn != null && addedCount != limit) {
					this.addColumn(targetSectionId, meaColumn);
					if (!meaColumn.isHidden()) {
						addedCount++;
					}
					continue;
				}
			}
			remainingColumns.add(column);
		}
		return remainingColumns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddNumericColumns(System.String, Infragistics.CPList, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDateColumn(System.String, Infragistics.CPList)" />*/
	addDateColumn: function (targetSectionId, columns) {
		var remainingColumns = new $.ig.Array();
		var columnCount = columns.length;
		var added = false;
		for (var c = 0; c < columnCount; c++) {
			var column = columns[c];
			if (column.type() == $.ig.DashboardDataType.prototype.date || column.type() == $.ig.DashboardDataType.prototype.dateTime) {
				var dimColumn = $.ig.VisualizationDataSpec.prototype.toDimensionSpec(column);
				if (dimColumn != null && !added) {
					this.addColumn(targetSectionId, dimColumn);
					added = true;
					continue;
				}
			}
			remainingColumns.add(column);
		}
		return remainingColumns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDateColumn(System.String, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToDimensionSpec(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	toDimensionSpec: function (column) {
		if ($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, column) !== null) {
			return column;
		} else if ($.ig.util.cast($.ig.TabularColumnSpec.prototype.$type, column) !== null) {
			return new $.ig.DimensionColumnSpec(3, column.location(), column.tabularField(), $.ig.DashboardModelUtils.prototype.createSummarizationField(column.tabularField()));
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToDimensionSpec(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToMeasureSpec(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	toMeasureSpec: function (column) {
		if ($.ig.util.cast($.ig.MeasureColumnSpec.prototype.$type, column) !== null) {
			return column;
		} else if ($.ig.util.cast($.ig.TabularColumnSpec.prototype.$type, column) !== null) {
			var measureSpec = new $.ig.MeasureColumnSpec(4, column.location(), column.tabularField(), $.ig.DashboardModelUtils.prototype.createSummarizationValueField(column.tabularField()));
			measureSpec.conditionalFormatting(column.conditionalFormatting());
			if ($.ig.util.cast($.ig.NumberFormattingSpec.prototype.$type, column.formatting()) !== null) {
				measureSpec.formatting(column.formatting());
			}
			return measureSpec;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::ToMeasureSpec(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::CreateVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	createVisualizationDataSpec: function (widget) {
		var settings = widget.visualizationSettings();
		var prevDataSpec = widget.visualizationDataSpec();
		if (($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.PivotVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.IndicatorVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.IndicatorTargetVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.SparklineVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.TreeMapVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.AssetVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.DIYVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.ScriptVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.ChoroplethMapVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.ScatterMapVisualizationSettings.prototype.$type, settings) !== null) || ($.ig.util.cast($.ig.SingleRowVisualizationSettings.prototype.$type, settings) !== null && widget.dataSpec().isXmla())) {
			var newVizSpec = $.ig.VisualizationDataSpec.prototype.getEmptyVisualizationDataSpec(settings);
			if ($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, newVizSpec) !== null && $.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, prevDataSpec) !== null) {
				(newVizSpec).adHocFields((prevDataSpec).adHocFields());
				(newVizSpec).adHocExpandedElements((prevDataSpec).adHocExpandedElements());
			}
			if (prevDataSpec != null) {
				var allColumns = prevDataSpec.getAllColumns();
				newVizSpec.loadFromColumns(allColumns);
			}
			return newVizSpec;
		} else if ($.ig.util.cast($.ig.GridVisualizationSettings.prototype.$type, settings) !== null || $.ig.util.cast($.ig.SingleRowVisualizationSettings.prototype.$type, settings) !== null) {
			var newVizSpec1 = new $.ig.GridVisualizationDataSpec(0);
			if (prevDataSpec != null && widget.dataSpec().isTabular()) {
				var fields = $.ig.DashboardModelUtils.prototype.getActiveFields(widget.dataSpec());
				$.ig.VisualizationDataSpec.prototype.addTabularColumns1(newVizSpec1.columns(), $.ig.VisualizationDataSpec.prototype.removeDuplicatedColumns(prevDataSpec.getAllColumns()), fields);
			}
			return newVizSpec1;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::CreateVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetEmptyVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getEmptyVisualizationDataSpec: function (settings) {
		if ($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, settings) !== null) {
			var chartType = (settings).chartType();
			switch (chartType) {
				case $.ig.DashboardChartType.prototype.area:
				case $.ig.DashboardChartType.prototype.bar:
				case $.ig.DashboardChartType.prototype.column:
				case $.ig.DashboardChartType.prototype.line:
				case $.ig.DashboardChartType.prototype.radialColumns:
				case $.ig.DashboardChartType.prototype.radialLines:
				case $.ig.DashboardChartType.prototype.radialPie:
				case $.ig.DashboardChartType.prototype.spline:
				case $.ig.DashboardChartType.prototype.splineArea:
				case $.ig.DashboardChartType.prototype.stackedArea:
				case $.ig.DashboardChartType.prototype.stackedBar:
				case $.ig.DashboardChartType.prototype.stackedColumn:
				case $.ig.DashboardChartType.prototype.stepArea:
				case $.ig.DashboardChartType.prototype.stepLine:
					return new $.ig.CategoryVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.timeSeries: return new $.ig.TimeSeriesVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.doughnut:
				case $.ig.DashboardChartType.prototype.funnel:
				case $.ig.DashboardChartType.prototype.pie:
					return new $.ig.SingleValueLabelsVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.oHLC:
				case $.ig.DashboardChartType.prototype.candlestick:
					return new $.ig.FinancialVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.polarArea:
				case $.ig.DashboardChartType.prototype.polarLines:
				case $.ig.DashboardChartType.prototype.polarScatter:
				case $.ig.DashboardChartType.prototype.scatter:
					return new $.ig.ScatterVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.bubble: return new $.ig.BubbleVisualizationDataSpec(0);
				case $.ig.DashboardChartType.prototype.composite: return new $.ig.CompositeChartVisualizationDataSpec(0);
			}
		} else if ($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, settings) !== null) {
			var gaugeType = (settings).viewType();
			switch (gaugeType) {
				case $.ig.DashboardGaugeViewType.prototype.circular:
				case $.ig.DashboardGaugeViewType.prototype.singleValue:
					return new $.ig.SingleGaugeVisualizationDataSpec(0);
				case $.ig.DashboardGaugeViewType.prototype.linear:
				case $.ig.DashboardGaugeViewType.prototype.bulletGraph:
					return new $.ig.LinearGaugeVisualizationDataSpec(0);
			}
		} else if ($.ig.util.cast($.ig.IndicatorTargetVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.IndicatorTargetVisualizationDataSpec(0);
		} else if ($.ig.util.cast($.ig.IndicatorVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.IndicatorVisualizationDataSpec(0);
		} else if ($.ig.util.cast($.ig.TreeMapVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.TreeMapVisualizationDataSpec(0);
		} else if ($.ig.util.cast($.ig.SparklineVisualizationSettings.prototype.$type, settings) !== null) {
			var sparklineSpec = new $.ig.SparklineVisualizationDataSpec(0);
			sparklineSpec.indicatorType($.ig.DashboardIndicatorVisualizationType.prototype.lastMonths);
			sparklineSpec.numberOfPeriods(12);
			return sparklineSpec;
		} else if ($.ig.util.cast($.ig.AssetVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.AssetVisualizationDataSpec(0);
		} else if ($.ig.util.cast($.ig.ChoroplethMapVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.ChoroplethMapVisualizationDataSpec(0);
		} else if ($.ig.util.cast($.ig.ScatterMapVisualizationSettings.prototype.$type, settings) !== null) {
			return new $.ig.ScatterMapVisualizationDataSpec(0);
		}
		return new $.ig.PivotVisualizationDataSpec(0);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetEmptyVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumns(System.Collections.ArrayList, Infragistics.CPList, System.Collections.ArrayList)" />*/
	addTabularColumns1: function (target, src, fields) {
		var count = src.length;
		for (var i = 0; i < count; i++) {
			var col = src[i];
			if (($.ig.util.cast($.ig.MeasureColumnSpec.prototype.$type, col) !== null) && (col).isCalculated()) {
				continue;
			}
			var field = col.tabularField();
			if (field != null) {
				var tabularColumn = new $.ig.TabularColumnSpec(3, $.ig.VisualizationDataSpec.prototype.columnsSection, field);
				tabularColumn.conditionalFormatting(col.conditionalFormatting());
				if ($.ig.VisualizationDataSpec.prototype.isCompatibleFormatting(field.fieldType(), col.formatting()) && !$.ig.VisualizationDataSpec.prototype.isAggregatedDateColumn(col)) {
					tabularColumn.formatting(col.formatting());
				}
				target.add(tabularColumn);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumns(System.Collections.ArrayList, Infragistics.CPList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsAggregatedDateColumn(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	isAggregatedDateColumn: function (col) {
		if (!$.ig.DashboardModelUtils.prototype.isDateBasedDataType(col.type())) {
			return false;
		}
		if ($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, col) !== null) {
			var dim = col;
			return dim.summarizationField() != null;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsAggregatedDateColumn(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsCompatibleFormatting(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.FormattingSpec)" />*/
	isCompatibleFormatting: function (type, formatting) {
		switch (type) {
			case $.ig.DashboardDataType.prototype.date:
			case $.ig.DashboardDataType.prototype.dateTime:
			case $.ig.DashboardDataType.prototype.time:
				return $.ig.util.cast($.ig.DateFormattingSpec.prototype.$type, formatting) !== null;
			case $.ig.DashboardDataType.prototype.number: return $.ig.util.cast($.ig.NumberFormattingSpec.prototype.$type, formatting) !== null;
			default: return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::IsCompatibleFormatting(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.FormattingSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDimensionColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	addDimensionColumns: function (list, columns, section) {
		var colCount = columns.length;
		for (var i = 0; i < colCount; i++) {
			var col = columns[i];
			col.location(section);
			list.add(col);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDimensionColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDimensionColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec, System.String)" />*/
	addDimensionColumn: function (list, dimensionColumn, section) {
		if (dimensionColumn != null) {
			dimensionColumn.location(section);
			list.add(dimensionColumn);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddDimensionColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddMeasureColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	addMeasureColumns: function (list, columns, section) {
		var colCount = columns.length;
		for (var i = 0; i < colCount; i++) {
			var col = columns[i];
			col.location(section);
			list.add(col);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddMeasureColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddMeasureColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec, System.String)" />*/
	addMeasureColumn: function (list, measureColumn, section) {
		if (measureColumn != null) {
			measureColumn.location(section);
			list.add(measureColumn);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddMeasureColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	addTabularColumns: function (list, columns, section) {
		var colCount = columns.length;
		for (var i = 0; i < colCount; i++) {
			var col = columns[i];
			col.location(section);
			list.add(col);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumns(Infragistics.CPList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.TabularColumnSpec, System.String)" />*/
	addTabularColumn: function (list, column, section) {
		if (column != null) {
			column.location(section);
			list.add(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::AddTabularColumn(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.TabularColumnSpec, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetVisibleMeasureCount(System.Collections.ArrayList)" />*/
	getVisibleMeasureCount: function (measures) {
		var count = measures.length;
		var visibleCount = 0;
		for (var m = 0; m < count; m++) {
			if (!(measures[m]).isHidden()) {
				visibleCount++;
			}
		}
		return visibleCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::GetVisibleMeasureCount(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveDuplicatedColumns(Infragistics.CPList)" />*/
	removeDuplicatedColumns: function (columns) {
		var count = columns == null ? 0 : columns.length;
		if (count == 0) {
			return columns;
		}
		var newColumns = new $.ig.Array();
		var added = new $.ig.Dictionary(0);
		for (var i = 0; i < count; i++) {
			var column = columns[i];
			var columnId = column.identifier();
			if (added.containsKey(columnId)) {
				continue;
			}
			added.item(columnId, "");
			newColumns.add(column);
		}
		return newColumns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec::RemoveDuplicatedColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('VisualizationDataSpec', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec" />*/

$.ig.util.defType('AssetVisualizationDataSpec', 'VisualizationDataSpec', {
	_urlColumn: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.TabularColumnSpec Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::UrlColumn()" />*/
	urlColumn: function (value) {
		if (arguments.length === 1) {
			this._urlColumn = value;
			return value;
		} else {
			return this._urlColumn;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.TabularColumnSpec Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::UrlColumn()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.urlColumn($.ig.CloneUtils.prototype.cloneObject(other.urlColumn()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "UrlColumn")) {
			this.urlColumn(new $.ig.TabularColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["UrlColumn"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.AssetVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "UrlColumn", this.urlColumn());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.urlColumn() == null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addTabularColumn(list, this.urlColumn(), $.ig.VisualizationDataSpec.prototype.urlSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.urlSection, 1, false, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		this.urlColumn(column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		this.urlColumn(column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (this.urlColumn() != null) {
			this.urlColumn(null);
			return 0;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('AssetVisualizationDataSpec', $.ig.VisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AssetVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings" />*/

$.ig.util.defType('VisualizationSettings', 'Object', {
	_visualizationType: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationSettings::VisualizationType()" />*/
	visualizationType: function (value) {
		if (arguments.length === 1) {
			this._visualizationType = value;
			return value;
		} else {
			return this._visualizationType;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationSettings::VisualizationType()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.visualizationType(other.visualizationType());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.visualizationType($.ig.JsonUtility.prototype.loadString(json, "VisualizationType"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationSettings::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DashboardModel.VisualizationSettings::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "AssetVisualizationSettingsType") {
			return new $.ig.AssetVisualizationSettings(2, json);
		} else if (instanceType == "ChartVisualizationSettingsType") {
			return new $.ig.ChartVisualizationSettings(2, json);
		} else if (instanceType == "ChoroplethMapVisualizationSettingsType") {
			return new $.ig.ChoroplethMapVisualizationSettings(2, json);
		} else if (instanceType == "DIYVisualizationSettingsType") {
			return new $.ig.DIYVisualizationSettings(2, json);
		} else if (instanceType == "GaugeVisualizationSettingsType") {
			return new $.ig.GaugeVisualizationSettings(2, json);
		} else if (instanceType == "GeoMapBaseVisualizationSettingsType") {
			return new $.ig.GeoMapBaseVisualizationSettings(2, json);
		} else if (instanceType == "GridVisualizationSettingsType") {
			return new $.ig.GridVisualizationSettings(2, json);
		} else if (instanceType == "HeatMapVisualizationSettingsType") {
			return new $.ig.HeatMapVisualizationSettings(2, json);
		} else if (instanceType == "IndicatorTargetVisualizationSettingsType") {
			return new $.ig.IndicatorTargetVisualizationSettings(2, json);
		} else if (instanceType == "IndicatorVisualizationSettingsType") {
			return new $.ig.IndicatorVisualizationSettings(2, json);
		} else if (instanceType == "MapVisualizationSettingsType") {
			return new $.ig.MapVisualizationSettings(2, json);
		} else if (instanceType == "PivotVisualizationSettingsType") {
			return new $.ig.PivotVisualizationSettings(2, json);
		} else if (instanceType == "ScatterMapVisualizationSettingsType") {
			return new $.ig.ScatterMapVisualizationSettings(2, json);
		} else if (instanceType == "ScriptVisualizationSettingsType") {
			return new $.ig.ScriptVisualizationSettings(2, json);
		} else if (instanceType == "SingleRowVisualizationSettingsType") {
			return new $.ig.SingleRowVisualizationSettings(2, json);
		} else if (instanceType == "SparklineVisualizationSettingsType") {
			return new $.ig.SparklineVisualizationSettings(2, json);
		} else if (instanceType == "TextBoxVisualizationSettingsType") {
			return new $.ig.TextBoxVisualizationSettings(2, json);
		} else if (instanceType == "TreeMapVisualizationSettingsType") {
			return new $.ig.TreeMapVisualizationSettings(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DashboardModel.VisualizationSettings::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('VisualizationSettings', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings" />*/

$.ig.util.defType('AssetVisualizationSettings', 'VisualizationSettings', {
	_contentMode: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ContentMode()" />*/
	contentMode: function (value) {
		if (arguments.length === 1) {
			this._contentMode = value;
			return value;
		} else {
			return this._contentMode;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ContentMode()" />*/
	,
	_zoomEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ZoomEnabled()" />*/
	zoomEnabled: function (value) {
		if (arguments.length === 1) {
			this._zoomEnabled = value;
			return value;
		} else {
			return this._zoomEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ZoomEnabled()" />*/
	,
	_urlColumn: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::UrlColumn()" />*/
	urlColumn: function (value) {
		if (arguments.length === 1) {
			this._urlColumn = value;
			return value;
		} else {
			return this._urlColumn;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::UrlColumn()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.contentMode($.ig.DashboardContentModeType.prototype.aspectFit);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.contentMode(other.contentMode());
		this.zoomEnabled(other.zoomEnabled());
		this.urlColumn(other.urlColumn());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.contentMode($.ig.DashboardEnumDeserialization.prototype.readContentModeType($.ig.JsonUtility.prototype.loadString(json, "ContentMode")));
		this.zoomEnabled($.ig.JsonUtility.prototype.loadBool(json, "ZoomEnabled"));
		this.urlColumn($.ig.JsonUtility.prototype.loadString(json, "UrlColumn"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.AssetVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "ContentMode", $.ig.DashboardEnumSerialization.prototype.writeContentModeType(this.contentMode()));
		$.ig.JsonUtility.prototype.saveBool(json, "ZoomEnabled", this.zoomEnabled());
		$.ig.JsonUtility.prototype.saveObject(json, "UrlColumn", this.urlColumn());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('AssetVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AssetVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask" />*/

$.ig.util.defType('AzureMLDataProcessingTask', 'DataProcessingTask', {
	_url: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Url()" />*/
	url: function (value) {
		if (arguments.length === 1) {
			this._url = value;
			return value;
		} else {
			return this._url;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Url()" />*/
	,
	_metadataUrl: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::MetadataUrl()" />*/
	metadataUrl: function (value) {
		if (arguments.length === 1) {
			this._metadataUrl = value;
			return value;
		} else {
			return this._metadataUrl;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::MetadataUrl()" />*/
	,
	_key: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Key()" />*/
	key: function (value) {
		if (arguments.length === 1) {
			this._key = value;
			return value;
		} else {
			return this._key;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Key()" />*/
	,
	_inputAttributeName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::InputAttributeName()" />*/
	inputAttributeName: function (value) {
		if (arguments.length === 1) {
			this._inputAttributeName = value;
			return value;
		} else {
			return this._inputAttributeName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::InputAttributeName()" />*/
	,
	_outputAttributeName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::OutputAttributeName()" />*/
	outputAttributeName: function (value) {
		if (arguments.length === 1) {
			this._outputAttributeName = value;
			return value;
		} else {
			return this._outputAttributeName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::OutputAttributeName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataProcessingTask.prototype.init.call(this, 0);
		this.inputAttributeName("input1");
		this.outputAttributeName("output1");
	},
	init1: function (initNumber, other) {
		$.ig.DataProcessingTask.prototype.init1.call(this, 1, other);
		this.url(other.url());
		this.metadataUrl(other.metadataUrl());
		this.key(other.key());
		this.inputAttributeName(other.inputAttributeName());
		this.outputAttributeName(other.outputAttributeName());
	},
	init2: function (initNumber, json) {
		$.ig.DataProcessingTask.prototype.init2.call(this, 2, json);
		this.url($.ig.JsonUtility.prototype.loadString(json, "Url"));
		this.metadataUrl($.ig.JsonUtility.prototype.loadString(json, "MetadataUrl"));
		this.key($.ig.JsonUtility.prototype.loadString(json, "Key"));
		this.inputAttributeName($.ig.JsonUtility.prototype.loadString(json, "InputAttributeName"));
		this.outputAttributeName($.ig.JsonUtility.prototype.loadString(json, "OutputAttributeName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Clone()" />*/
	clone: function () {
		return new $.ig.AzureMLDataProcessingTask(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "InputFields", this.inputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "OutputFields", this.outputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		$.ig.JsonUtility.prototype.saveObject(json, "Url", this.url());
		$.ig.JsonUtility.prototype.saveObject(json, "MetadataUrl", this.metadataUrl());
		$.ig.JsonUtility.prototype.saveObject(json, "Key", this.key());
		$.ig.JsonUtility.prototype.saveObject(json, "InputAttributeName", this.inputAttributeName());
		$.ig.JsonUtility.prototype.saveObject(json, "OutputAttributeName", this.outputAttributeName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask::ToJson()" />*/
	,
	$type: new $.ig.Type('AzureMLDataProcessingTask', $.ig.DataProcessingTask.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.AzureMLDataProcessingTask" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BandBase" />*/

$.ig.util.defType('BandBase', 'Object', {
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType Infragistics.ReportPlus.DashboardModel.BandBase::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType Infragistics.ReportPlus.DashboardModel.BandBase::Type()" />*/
	,
	_color: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType Infragistics.ReportPlus.DashboardModel.BandBase::Color()" />*/
	color: function (value) {
		if (arguments.length === 1) {
			this._color = value;
			return value;
		} else {
			return this._color;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType Infragistics.ReportPlus.DashboardModel.BandBase::Color()" />*/
	,
	_value: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.BandBase::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.BandBase::Value()" />*/
	,
	_shape: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType Infragistics.ReportPlus.DashboardModel.BandBase::Shape()" />*/
	shape: function (value) {
		if (arguments.length === 1) {
			this._shape = value;
			return value;
		} else {
			return this._shape;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType Infragistics.ReportPlus.DashboardModel.BandBase::Shape()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.type($.ig.DashboardBandType.prototype.percentage);
		this.color($.ig.DashboardBandColorType.prototype.blue);
		this.shape($.ig.DashboardShapeType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.type(other.type());
		this.color(other.color());
		this.value(other.value());
		this.shape(other.shape());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.type($.ig.DashboardEnumDeserialization.prototype.readBandType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.color($.ig.DashboardEnumDeserialization.prototype.readBandColorType($.ig.JsonUtility.prototype.loadString(json, "Color")));
		this.value($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Value"));
		this.shape($.ig.DashboardEnumDeserialization.prototype.readShapeType($.ig.JsonUtility.prototype.loadString(json, "Shape")));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BandBase::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BandBase::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BandBase Infragistics.ReportPlus.DashboardModel.BandBase::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "ConditionalFormattingBandType") {
			return new $.ig.ConditionalFormattingBand(2, json);
		} else if (instanceType == "GaugeBandType") {
			return new $.ig.GaugeBand(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BandBase Infragistics.ReportPlus.DashboardModel.BandBase::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('BandBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BandBase" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BaseColumnSpec" />*/

$.ig.util.defType('BaseColumnSpec', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseColumnSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "DimensionColumnSpecType") {
			return new $.ig.DimensionColumnSpec(2, json);
		} else if (instanceType == "MeasureColumnSpecType") {
			return new $.ig.MeasureColumnSpec(2, json);
		} else if (instanceType == "TabularColumnSpecType") {
			return new $.ig.TabularColumnSpec(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseColumnSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::FromJson(System.JSDictionary)" />*/
	,
	_tabularField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::TabularField()" />*/
	tabularField: function (value) {
		if (arguments.length === 1) {
			this._tabularField = value;
			return value;
		} else {
			return this._tabularField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::TabularField()" />*/
	,
	_location: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Location()" />*/
	location: function (value) {
		if (arguments.length === 1) {
			this._location = value;
			return value;
		} else {
			return this._location;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Location()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Identifier()" />*/
	identifier: function () {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Identifier()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Name()" />*/
	name: function () {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Name()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Label()" />*/
	label: function (value) {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Label()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Description()" />*/
	description: function () {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Description()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Type()" />*/
	type: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Type()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DisplayType()" />*/
	displayType: function () {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DisplayType()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Aggregation()" />*/
	aggregation: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Aggregation()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DateAggregation()" />*/
	dateAggregation: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::DateFiscalYearStartMonth()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Sorting()" />*/
	sorting: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Sorting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::SortByField()" />*/
	sortByField: function (value) {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::SortByField()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Filter()" />*/
	filter: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Filter()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Formatting()" />*/
	formatting: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::IsHidden()" />*/
	isHidden: function (value) {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::IsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::IsCalculated()" />*/
	isCalculated: function (value) {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::IsCalculated()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Expression()" />*/
	expression: function (value) {
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::Expression()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::SortByCaption()" />*/
	sortByCaption: function (value) {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::SortByCaption()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ApplyColumn(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	applyColumn: function (other) {
		if (other != null) {
			this.aggregation(other.aggregation());
			this.formatting(other.formatting());
			this.conditionalFormatting(other.conditionalFormatting());
			this.filter(other.filter());
			this.dateAggregation(other.dateAggregation());
			this.dateFiscalYearStartMonth(other.dateFiscalYearStartMonth());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::ApplyColumn(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::StringIsNullOrEmpty(System.String)" />*/
	stringIsNullOrEmpty: function (value) {
		return value == null || value == "";
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseColumnSpec::StringIsNullOrEmpty(System.String)" />*/
	,
	$type: new $.ig.Type('BaseColumnSpec', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BaseColumnSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem" />*/

$.ig.util.defType('BaseDataSourceItem', 'Object', {
	_id: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			this._id = value;
			return value;
		} else {
			return this._id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Id()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Title()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Description()" />*/
	,
	_subtitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Subtitle()" />*/
	subtitle: function (value) {
		if (arguments.length === 1) {
			this._subtitle = value;
			return value;
		} else {
			return this._subtitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Subtitle()" />*/
	,
	_dataSourceId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::DataSourceId()" />*/
	dataSourceId: function (value) {
		if (arguments.length === 1) {
			this._dataSourceId = value;
			return value;
		} else {
			return this._dataSourceId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::DataSourceId()" />*/
	,
	_hasTabularData: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::HasTabularData()" />*/
	hasTabularData: function (value) {
		if (arguments.length === 1) {
			this._hasTabularData = value;
			return value;
		} else {
			return this._hasTabularData;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::HasTabularData()" />*/
	,
	_hasAsset: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::HasAsset()" />*/
	hasAsset: function (value) {
		if (arguments.length === 1) {
			this._hasAsset = value;
			return value;
		} else {
			return this._hasAsset;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::HasAsset()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Properties()" />*/
	,
	_parameters: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Parameters()" />*/
	parameters: function (value) {
		if (arguments.length === 1) {
			this._parameters = value;
			return value;
		} else {
			return this._parameters;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::Parameters()" />*/
	,
	_resourceItem: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::ResourceItem()" />*/
	resourceItem: function (value) {
		if (arguments.length === 1) {
			this._resourceItem = value;
			return value;
		} else {
			return this._resourceItem;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::ResourceItem()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.properties(new $.ig.NativeTypedDictionary());
		this.parameters(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.id(other.id());
		this.title(other.title());
		this.description(other.description());
		this.subtitle(other.subtitle());
		this.dataSourceId(other.dataSourceId());
		this.hasTabularData(other.hasTabularData());
		this.hasAsset(other.hasAsset());
		this.properties($.ig.CloneUtils.prototype.cloneDictionary(other.properties()));
		this.parameters($.ig.CloneUtils.prototype.cloneDictionary(other.parameters()));
		this.resourceItem($.ig.CloneUtils.prototype.cloneObject(other.resourceItem()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.id($.ig.JsonUtility.prototype.loadString(json, "Id"));
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.subtitle($.ig.JsonUtility.prototype.loadString(json, "Subtitle"));
		this.dataSourceId($.ig.JsonUtility.prototype.loadString(json, "DataSourceId"));
		this.hasTabularData($.ig.JsonUtility.prototype.loadBool(json, "HasTabularData"));
		this.hasAsset($.ig.JsonUtility.prototype.loadBool(json, "HasAsset"));
		this.properties($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Properties"));
		this.parameters($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Parameters"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "ResourceItem")) {
			this.resourceItem($.ig.BaseDataSourceItem.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ResourceItem"])));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "CompositeDataSourceItemType") {
			return new $.ig.CompositeDataSourceItem(2, json);
		} else if (instanceType == "DataSourceItemType") {
			return new $.ig.DataSourceItem(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('BaseDataSourceItem', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource" />*/

$.ig.util.defType('BaseDataSource', 'Object', {
	_id: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			this._id = value;
			return value;
		} else {
			return this._id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Id()" />*/
	,
	_provider: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Provider()" />*/
	provider: function (value) {
		if (arguments.length === 1) {
			this._provider = value;
			return value;
		} else {
			return this._provider;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Provider()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Description()" />*/
	,
	_subtitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Subtitle()" />*/
	subtitle: function (value) {
		if (arguments.length === 1) {
			this._subtitle = value;
			return value;
		} else {
			return this._subtitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BaseDataSource::Subtitle()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSource::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSource::Properties()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.properties(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.id(other.id());
		this.provider(other.provider());
		this.description(other.description());
		this.subtitle(other.subtitle());
		this.properties($.ig.CloneUtils.prototype.cloneDictionary(other.properties()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.id($.ig.JsonUtility.prototype.loadString(json, "Id"));
		this.provider($.ig.JsonUtility.prototype.loadString(json, "Provider"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.subtitle($.ig.JsonUtility.prototype.loadString(json, "Subtitle"));
		this.properties($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Properties"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSource::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BaseDataSource::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.BaseDataSource::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "CompositeDataSourceType") {
			return new $.ig.CompositeDataSource(2, json);
		} else if (instanceType == "DataSourceType") {
			return new $.ig.DataSource(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.BaseDataSource::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('BaseDataSource', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask" />*/

$.ig.util.defType('BigQueryMLDataProcessingTask', 'DataProcessingTask', {
	_modelId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::ModelId()" />*/
	modelId: function (value) {
		if (arguments.length === 1) {
			this._modelId = value;
			return value;
		} else {
			return this._modelId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::ModelId()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataProcessingTask.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataProcessingTask.prototype.init1.call(this, 1, other);
		this.modelId(other.modelId());
	},
	init2: function (initNumber, json) {
		$.ig.DataProcessingTask.prototype.init2.call(this, 2, json);
		this.modelId($.ig.JsonUtility.prototype.loadString(json, "ModelId"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::Clone()" />*/
	clone: function () {
		return new $.ig.BigQueryMLDataProcessingTask(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "InputFields", this.inputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "OutputFields", this.outputFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		$.ig.JsonUtility.prototype.saveObject(json, "ModelId", this.modelId());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask::ToJson()" />*/
	,
	$type: new $.ig.Type('BigQueryMLDataProcessingTask', $.ig.DataProcessingTask.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BigQueryMLDataProcessingTask" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BindingSource" />*/

$.ig.util.defType('BindingSource', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BindingSource::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BindingSource::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BindingSource Infragistics.ReportPlus.DashboardModel.BindingSource::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "FieldBindingSourceType") {
			return new $.ig.FieldBindingSource(2, json);
		} else if (instanceType == "ParameterBindingSourceType") {
			return new $.ig.ParameterBindingSource(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BindingSource Infragistics.ReportPlus.DashboardModel.BindingSource::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('BindingSource', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BindingSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BindingTarget" />*/

$.ig.util.defType('BindingTarget', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BindingTarget::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BindingTarget::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BindingTarget Infragistics.ReportPlus.DashboardModel.BindingTarget::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "DataBasedGlobalFilterBindingTargetType") {
			return new $.ig.DataBasedGlobalFilterBindingTarget(2, json);
		} else if (instanceType == "DateGlobalFilterBindingTargetType") {
			return new $.ig.DateGlobalFilterBindingTarget(2, json);
		} else if (instanceType == "GlobalVariableBindingTargetType") {
			return new $.ig.GlobalVariableBindingTarget(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BindingTarget Infragistics.ReportPlus.DashboardModel.BindingTarget::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('BindingTarget', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BindingTarget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Binding" />*/

$.ig.util.defType('Binding', 'Object', {
	_source: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BindingSource Infragistics.ReportPlus.DashboardModel.Binding::Source()" />*/
	source: function (value) {
		if (arguments.length === 1) {
			this._source = value;
			return value;
		} else {
			return this._source;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BindingSource Infragistics.ReportPlus.DashboardModel.Binding::Source()" />*/
	,
	_operator: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType Infragistics.ReportPlus.DashboardModel.Binding::Operator()" />*/
	operator: function (value) {
		if (arguments.length === 1) {
			this._operator = value;
			return value;
		} else {
			return this._operator;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType Infragistics.ReportPlus.DashboardModel.Binding::Operator()" />*/
	,
	_target: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BindingTarget Infragistics.ReportPlus.DashboardModel.Binding::Target()" />*/
	target: function (value) {
		if (arguments.length === 1) {
			this._target = value;
			return value;
		} else {
			return this._target;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BindingTarget Infragistics.ReportPlus.DashboardModel.Binding::Target()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.operator($.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.source($.ig.CloneUtils.prototype.cloneObject(other.source()));
		this.operator(other.operator());
		this.target($.ig.CloneUtils.prototype.cloneObject(other.target()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Source")) {
			this.source($.ig.BindingSource.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Source"])));
		}
		this.operator($.ig.DashboardEnumDeserialization.prototype.readGlobalFilterBindingOperatorType($.ig.JsonUtility.prototype.loadString(json, "Operator")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Target")) {
			this.target($.ig.BindingTarget.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Target"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Binding::Clone()" />*/
	clone: function () {
		return new $.ig.Binding(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Binding::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Binding::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Source", this.source());
		$.ig.JsonUtility.prototype.saveObject(json, "Operator", $.ig.DashboardEnumSerialization.prototype.writeGlobalFilterBindingOperatorType(this.operator()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Target", this.target());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Binding::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Binding Infragistics.ReportPlus.DashboardModel.Binding::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.Binding(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Binding Infragistics.ReportPlus.DashboardModel.Binding::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('Binding', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Binding" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Bound" />*/

$.ig.util.defType('Bound', 'Object', {
	_valueType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType Infragistics.ReportPlus.DashboardModel.Bound::ValueType()" />*/
	valueType: function (value) {
		if (arguments.length === 1) {
			this._valueType = value;
			return value;
		} else {
			return this._valueType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType Infragistics.ReportPlus.DashboardModel.Bound::ValueType()" />*/
	,
	_value: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.Bound::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.Bound::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.valueType($.ig.DashboardBoundValueType.prototype.numberValue);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.valueType(other.valueType());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.valueType($.ig.DashboardEnumDeserialization.prototype.readBoundValueType($.ig.JsonUtility.prototype.loadString(json, "ValueType")));
		this.value($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Bound::Clone()" />*/
	clone: function () {
		return new $.ig.Bound(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Bound::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Bound::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "ValueType", $.ig.DashboardEnumSerialization.prototype.writeBoundValueType(this.valueType()));
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Bound::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.Bound::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.Bound(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.Bound::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('Bound', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Bound" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec" />*/

$.ig.util.defType('HierarchyVisualizationDataSpec', 'VisualizationDataSpec', {
	_adHocFields: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AdHocFields()" />*/
	adHocFields: function (value) {
		if (arguments.length === 1) {
			this._adHocFields = value;
			return value;
		} else {
			return this._adHocFields;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AdHocFields()" />*/
	,
	_formatVersion: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::FormatVersion()" />*/
	formatVersion: function (value) {
		if (arguments.length === 1) {
			this._formatVersion = value;
			return value;
		} else {
			return this._formatVersion;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::FormatVersion()" />*/
	,
	_adHocExpandedElements: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AdHocExpandedElements()" />*/
	adHocExpandedElements: function (value) {
		if (arguments.length === 1) {
			this._adHocExpandedElements = value;
			return value;
		} else {
			return this._adHocExpandedElements;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AdHocExpandedElements()" />*/
	,
	_rows: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::Rows()" />*/
	rows: function (value) {
		if (arguments.length === 1) {
			this._rows = value;
			return value;
		} else {
			return this._rows;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::Rows()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationDataSpec.prototype.init.call(this, 0);
		this.adHocExpandedElements(new $.ig.Array());
		this.rows(new $.ig.Array());
		this.formatVersion(0);
		this.customInit();
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.adHocFields(other.adHocFields());
		this.formatVersion(other.formatVersion());
		this.adHocExpandedElements($.ig.CloneListUtils.prototype.cloneList(other.adHocExpandedElements(), new $.ig.Array()));
		this.rows($.ig.CloneListUtils.prototype.cloneList(other.rows(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.adHocFields($.ig.JsonUtility.prototype.loadOptionalInt(json, "AdHocFields"));
		this.formatVersion($.ig.JsonUtility.prototype.loadInt1(json, "FormatVersion", 0));
		this.adHocExpandedElements(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "AdHocExpandedElements")) {
			var jsonAdHocExpandedElements = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "AdHocExpandedElements");
			var jsonListSize = jsonAdHocExpandedElements.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.adHocExpandedElements().add(new $.ig.AdHocExpandedElement(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonAdHocExpandedElements[i])));
			}
		}
		this.rows(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Rows")) {
			var jsonRows = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Rows");
			var jsonListSize1 = jsonRows.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.rows().add(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonRows[i1])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::CustomInit()" />*/
	customInit: function () {
		this.formatVersion(1);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::CustomInit()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.rows() == null || this.rows().length == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsTabular()" />*/
	isTabular: function () {
		return this.rows().length == 0 ? true : (this.rows()[0]).summarizationField() != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsTabular()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addDimensionColumns(list, this.rows(), $.ig.VisualizationDataSpec.prototype.rowsSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.rowsSection, -1, false, dataSpec.isTabular(), false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		this.rows().add(column);
		this.updateAdHocFields(-1);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::UpdateAdHocFields(System.Int32)" />*/
	updateAdHocFields: function (removedPosition) {
		if (removedPosition < 0 || $.ig.NativeDataLayerUtility.prototype.isNullInt(this.adHocFields())) {
			return;
		}
		var af = $.ig.NativeDataLayerUtility.prototype.unwrapInt(this.adHocFields());
		if (removedPosition < af) {
			if (af <= 1) {
				this.adHocFields($.ig.util.toNullable($.ig.Number.prototype.$type, null));
			} else {
				this.adHocFields($.ig.NativeDataLayerUtility.prototype.wrapInt(af - 1));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::UpdateAdHocFields(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		this.rows().insert(position < 0 || position > this.rows().length ? this.rows().length : position, column);
		this.updateAdHocFields(-1);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		var result = this.removeFromDimensions(this.rows(), identifier);
		this.updateAdHocFields(result);
		return result;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::RemoveColumn(System.String, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	removeColumn1: function (section, identifier, dateAggregation) {
		if (section == $.ig.VisualizationDataSpec.prototype.rowsSection || section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			var result = this.removeFromDimensions1(this.rows(), identifier, dateAggregation);
			this.updateAdHocFields(result);
			return result;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::RemoveColumn(System.String, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.rowsSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.rowsSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.rowsSection, columns, $.ig.VisualizationDataSpec.prototype.dateSection);
		if (this.rows().length == 0) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.rowsSection, columns, $.ig.VisualizationDataSpec.prototype.gridColumnsSection, 1);
		}
		this.rows(this.fixHierarchy(this.rows()));
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsDateHierarchy(System.Collections.ArrayList)" />*/
	isDateHierarchy: function (columns) {
		return columns.length > 0 && $.ig.DashboardModelUtils.prototype.isDateBasedDataType((columns[0]).type());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::IsDateHierarchy(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetDateHierarchyDepth(System.Collections.ArrayList)" />*/
	getDateHierarchyDepth: function (columns) {
		var depth = 1;
		var fieldName = (columns[0]).identifier();
		var count = columns.length;
		for (var i = 1; i < count; i++) {
			var col = columns[i];
			if (col.identifier() == fieldName) {
				depth++;
			} else {
				break;
			}
		}
		return depth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::GetDateHierarchyDepth(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::FixHierarchy(System.Collections.ArrayList)" />*/
	fixHierarchy: function (columns) {
		if (this.isDateHierarchy(columns)) {
			var dateCount = this.getDateHierarchyDepth(columns);
			if (dateCount > 1) {
				this.adHocFields($.ig.NativeDataLayerUtility.prototype.wrapInt(dateCount));
			} else {
				this.adHocFields($.ig.util.toNullable($.ig.Number.prototype.$type, null));
			}
		}
		return columns;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec::FixHierarchy(System.Collections.ArrayList)" />*/
	,
	$type: new $.ig.Type('HierarchyVisualizationDataSpec', $.ig.VisualizationDataSpec.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec" />*/

$.ig.util.defType('LabelsVisualizationDataSpec', 'HierarchyVisualizationDataSpec', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HierarchyVisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.HierarchyVisualizationDataSpec.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.HierarchyVisualizationDataSpec.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, dataSpec.isTabular(), false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::LabelSectionLimit()" />*/
	labelSectionLimit: function () {
		return -1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::LabelSectionLimit()" />*/
	,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::Labels()" />*/
	labels: function () {
		return this.rows();
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::Labels()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addDimensionColumns(list, this.labels(), $.ig.VisualizationDataSpec.prototype.labelSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::UpdateAdHocFields(System.Int32)" />*/
	updateAdHocFields: function (removedPos) {
		if (this.labels().length > 1) {
			this.adHocFields($.ig.NativeDataLayerUtility.prototype.wrapInt(this.labels().length));
		} else {
			this.adHocFields($.ig.util.toNullable($.ig.Number.prototype.$type, null));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::UpdateAdHocFields(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection, this.labelSectionLimit());
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection, this.labelSectionLimit());
		if (this.labels().length == 0) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.dateSection, this.labelSectionLimit());
		}
		if (this.labels().length == 0) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.gridColumnsSection, 1);
		}
		this.rows(this.fixHierarchy(this.labels()));
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::FixHierarchy(System.Collections.ArrayList)" />*/
	fixHierarchy: function (columns) {
		var newColumns = $.ig.HierarchyVisualizationDataSpec.prototype.fixHierarchy.call(this, columns);
		var newColumnsCount = newColumns == null ? 0 : newColumns.length;
		if (newColumnsCount == 0) {
			return newColumns;
		}
		var resultSize = Math.max(1, $.ig.NativeDataLayerUtility.prototype.unwrapInt1(this.adHocFields(), 1));
		if (newColumnsCount > resultSize) {
			var result = new $.ig.Array();
			for (var i = 0; i < resultSize; i++) {
				result.add(newColumns[i]);
			}
			return result;
		} else {
			return newColumns;
		}
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec::FixHierarchy(System.Collections.ArrayList)" />*/
	,
	$type: new $.ig.Type('LabelsVisualizationDataSpec', $.ig.HierarchyVisualizationDataSpec.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec" />*/

$.ig.util.defType('ScatterVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_category: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::Category()" />*/
	category: function (value) {
		if (arguments.length === 1) {
			this._category = value;
			return value;
		} else {
			return this._category;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::Category()" />*/
	,
	_xAxis: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::XAxis()" />*/
	xAxis: function (value) {
		if (arguments.length === 1) {
			this._xAxis = value;
			return value;
		} else {
			return this._xAxis;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::XAxis()" />*/
	,
	_yAxis: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::YAxis()" />*/
	yAxis: function (value) {
		if (arguments.length === 1) {
			this._yAxis = value;
			return value;
		} else {
			return this._yAxis;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::YAxis()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.xAxis(new $.ig.Array());
		this.yAxis(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.category($.ig.CloneUtils.prototype.cloneObject(other.category()));
		this.xAxis($.ig.CloneListUtils.prototype.cloneList(other.xAxis(), new $.ig.Array()));
		this.yAxis($.ig.CloneListUtils.prototype.cloneList(other.yAxis(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Category")) {
			this.category(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Category"])));
		}
		this.xAxis(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "XAxis")) {
			var jsonXAxis = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "XAxis");
			var jsonListSize = jsonXAxis.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.xAxis().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonXAxis[i])));
			}
		}
		this.yAxis(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "YAxis")) {
			var jsonYAxis = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "YAxis");
			var jsonListSize1 = jsonYAxis.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.yAxis().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonYAxis[i1])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.ScatterVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Category", this.category());
		$.ig.JsonUtility.prototype.saveContainer(json, "XAxis", this.xAxis());
		$.ig.JsonUtility.prototype.saveContainer(json, "YAxis", this.yAxis());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.xAxis(), $.ig.VisualizationDataSpec.prototype.xAxisSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.yAxis(), $.ig.VisualizationDataSpec.prototype.yAxisSection);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.category(), $.ig.VisualizationDataSpec.prototype.colorSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.xAxisSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.yAxisSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.colorSection, 1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.xAxis()) != 1 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.yAxis()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.xAxisSection) {
			this.xAxis().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.yAxisSection) {
			this.yAxis().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.colorSection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.xAxisSection) {
			this.xAxis().insert(position < 0 || position > this.xAxis().length ? this.xAxis().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.yAxisSection) {
			this.yAxis().insert(position < 0 || position > this.yAxis().length ? this.yAxis().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.colorSection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection || section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.xAxisSection) {
			return this.removeFromMeasures(this.xAxis(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.yAxisSection) {
			return this.removeFromMeasures(this.yAxis(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.colorSection) {
			var index = this.category() == null ? -1 : 0;
			this.category(null);
			return index;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.xAxisSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.yAxisSection, columns, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.colorSection, columns, $.ig.VisualizationDataSpec.prototype.colorSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.colorSection, columns, $.ig.VisualizationDataSpec.prototype.categorySection, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('ScatterVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec" />*/

$.ig.util.defType('BubbleVisualizationDataSpec', 'ScatterVisualizationDataSpec', {
	_radius: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::Radius()" />*/
	radius: function (value) {
		if (arguments.length === 1) {
			this._radius = value;
			return value;
		} else {
			return this._radius;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::Radius()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ScatterVisualizationDataSpec.prototype.init.call(this, 0);
		this.radius(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.ScatterVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.radius($.ig.CloneListUtils.prototype.cloneList(other.radius(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.ScatterVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.radius(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Radius")) {
			var jsonRadius = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Radius");
			var jsonListSize = jsonRadius.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.radius().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonRadius[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.BubbleVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Category", this.category());
		$.ig.JsonUtility.prototype.saveContainer(json, "XAxis", this.xAxis());
		$.ig.JsonUtility.prototype.saveContainer(json, "YAxis", this.yAxis());
		$.ig.JsonUtility.prototype.saveContainer(json, "Radius", this.radius());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.ScatterVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.radius(), $.ig.VisualizationDataSpec.prototype.radiusSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.ScatterVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.insert(list.length - 1, new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.radiusSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.ScatterVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.radius()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			this.radius().add(column);
		} else {
			$.ig.ScatterVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			this.radius().insert(position < 0 || position > this.radius().length ? this.radius().length : position, column);
		} else {
			$.ig.ScatterVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			return this.removeFromMeasures(this.radius(), identifier);
		} else {
			return $.ig.ScatterVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.ScatterVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.radiusSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('BubbleVisualizationDataSpec', $.ig.ScatterVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.BubbleVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec" />*/

$.ig.util.defType('CategoryVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_category: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Category()" />*/
	category: function (value) {
		if (arguments.length === 1) {
			this._category = value;
			return value;
		} else {
			return this._category;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Category()" />*/
	,
	_values: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Values()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.values(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.category($.ig.CloneUtils.prototype.cloneObject(other.category()));
		this.values($.ig.CloneListUtils.prototype.cloneList(other.values(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Category")) {
			this.category(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Category"])));
		}
		this.values(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Values");
			var jsonListSize = jsonValues.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.values().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.CategoryVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Category", this.category());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.values(), $.ig.VisualizationDataSpec.prototype.valuesSection);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.category(), $.ig.VisualizationDataSpec.prototype.categorySection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.valuesSection, -1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.categorySection, 1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.values()) == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.valuesSection) {
			this.values().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.valuesSection) {
			this.values().insert(position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.valuesSection) {
			return this.removeFromMeasures(this.values(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			var index = this.category() == null ? -1 : 0;
			this.category(null);
			return index;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns($.ig.VisualizationDataSpec.prototype.valuesSection, columns);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.categorySection, columns, $.ig.VisualizationDataSpec.prototype.categorySection, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('CategoryVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings" />*/

$.ig.util.defType('ChartVisualizationSettings', 'VisualizationSettings', {
	_chartType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ChartType()" />*/
	chartType: function (value) {
		if (arguments.length === 1) {
			this._chartType = value;
			return value;
		} else {
			return this._chartType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ChartType()" />*/
	,
	_allSeries: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::AllSeries()" />*/
	allSeries: function (value) {
		if (arguments.length === 1) {
			this._allSeries = value;
			return value;
		} else {
			return this._allSeries;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::AllSeries()" />*/
	,
	_showLegends: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowLegends()" />*/
	showLegends: function (value) {
		if (arguments.length === 1) {
			this._showLegends = value;
			return value;
		} else {
			return this._showLegends;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowLegends()" />*/
	,
	_trendlineType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::TrendlineType()" />*/
	trendlineType: function (value) {
		if (arguments.length === 1) {
			this._trendlineType = value;
			return value;
		} else {
			return this._trendlineType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::TrendlineType()" />*/
	,
	_singleAxisMode: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::SingleAxisMode()" />*/
	singleAxisMode: function (value) {
		if (arguments.length === 1) {
			this._singleAxisMode = value;
			return value;
		} else {
			return this._singleAxisMode;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::SingleAxisMode()" />*/
	,
	_financial: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Financial()" />*/
	financial: function (value) {
		if (arguments.length === 1) {
			this._financial = value;
			return value;
		} else {
			return this._financial;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Financial()" />*/
	,
	_labelField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LabelField()" />*/
	labelField: function (value) {
		if (arguments.length === 1) {
			this._labelField = value;
			return value;
		} else {
			return this._labelField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LabelField()" />*/
	,
	_xAxisField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::XAxisField()" />*/
	xAxisField: function (value) {
		if (arguments.length === 1) {
			this._xAxisField = value;
			return value;
		} else {
			return this._xAxisField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::XAxisField()" />*/
	,
	_yAxisField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::YAxisField()" />*/
	yAxisField: function (value) {
		if (arguments.length === 1) {
			this._yAxisField = value;
			return value;
		} else {
			return this._yAxisField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::YAxisField()" />*/
	,
	_zAxisField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ZAxisField()" />*/
	zAxisField: function (value) {
		if (arguments.length === 1) {
			this._zAxisField = value;
			return value;
		} else {
			return this._zAxisField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ZAxisField()" />*/
	,
	_colorAxisField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ColorAxisField()" />*/
	colorAxisField: function (value) {
		if (arguments.length === 1) {
			this._colorAxisField = value;
			return value;
		} else {
			return this._colorAxisField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ColorAxisField()" />*/
	,
	_series: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Series()" />*/
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Series()" />*/
	,
	_leftAxisFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisFields()" />*/
	leftAxisFields: function (value) {
		if (arguments.length === 1) {
			this._leftAxisFields = value;
			return value;
		} else {
			return this._leftAxisFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisFields()" />*/
	,
	_rightAxisFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisFields()" />*/
	rightAxisFields: function (value) {
		if (arguments.length === 1) {
			this._rightAxisFields = value;
			return value;
		} else {
			return this._rightAxisFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisFields()" />*/
	,
	_leftAxisLogarithmic: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisLogarithmic()" />*/
	leftAxisLogarithmic: function (value) {
		if (arguments.length === 1) {
			this._leftAxisLogarithmic = value;
			return value;
		} else {
			return this._leftAxisLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisLogarithmic()" />*/
	,
	_rightAxisLogarithmic: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisLogarithmic()" />*/
	rightAxisLogarithmic: function (value) {
		if (arguments.length === 1) {
			this._rightAxisLogarithmic = value;
			return value;
		} else {
			return this._rightAxisLogarithmic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisLogarithmic()" />*/
	,
	_labelDisplayMode: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LabelDisplayMode()" />*/
	labelDisplayMode: function (value) {
		if (arguments.length === 1) {
			this._labelDisplayMode = value;
			return value;
		} else {
			return this._labelDisplayMode;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LabelDisplayMode()" />*/
	,
	_isPercentageDistributed: $.ig.util.toNullable($.ig.Boolean.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::IsPercentageDistributed()" />*/
	isPercentageDistributed: function (value) {
		if (arguments.length === 1) {
			this._isPercentageDistributed = value;
			return value;
		} else {
			return this._isPercentageDistributed;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::IsPercentageDistributed()" />*/
	,
	_leftAxisMinValue: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisMinValue()" />*/
	leftAxisMinValue: function (value) {
		if (arguments.length === 1) {
			this._leftAxisMinValue = value;
			return value;
		} else {
			return this._leftAxisMinValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisMinValue()" />*/
	,
	_leftAxisMaxValue: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisMaxValue()" />*/
	leftAxisMaxValue: function (value) {
		if (arguments.length === 1) {
			this._leftAxisMaxValue = value;
			return value;
		} else {
			return this._leftAxisMaxValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::LeftAxisMaxValue()" />*/
	,
	_rightAxisMinValue: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisMinValue()" />*/
	rightAxisMinValue: function (value) {
		if (arguments.length === 1) {
			this._rightAxisMinValue = value;
			return value;
		} else {
			return this._rightAxisMinValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisMinValue()" />*/
	,
	_rightAxisMaxValue: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisMaxValue()" />*/
	rightAxisMaxValue: function (value) {
		if (arguments.length === 1) {
			this._rightAxisMaxValue = value;
			return value;
		} else {
			return this._rightAxisMaxValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::RightAxisMaxValue()" />*/
	,
	_brushOffsetIndex: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::BrushOffsetIndex()" />*/
	brushOffsetIndex: function (value) {
		if (arguments.length === 1) {
			this._brushOffsetIndex = value;
			return value;
		} else {
			return this._brushOffsetIndex;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::BrushOffsetIndex()" />*/
	,
	_pieStartPosition: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::PieStartPosition()" />*/
	pieStartPosition: function (value) {
		if (arguments.length === 1) {
			this._pieStartPosition = value;
			return value;
		} else {
			return this._pieStartPosition;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::PieStartPosition()" />*/
	,
	_showTotalsInTooltip: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowTotalsInTooltip()" />*/
	showTotalsInTooltip: function (value) {
		if (arguments.length === 1) {
			this._showTotalsInTooltip = value;
			return value;
		} else {
			return this._showTotalsInTooltip;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowTotalsInTooltip()" />*/
	,
	_compositeChartType1: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartType1()" />*/
	compositeChartType1: function (value) {
		if (arguments.length === 1) {
			this._compositeChartType1 = value;
			return value;
		} else {
			return this._compositeChartType1;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartType1()" />*/
	,
	_compositeChartType2: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartType2()" />*/
	compositeChartType2: function (value) {
		if (arguments.length === 1) {
			this._compositeChartType2 = value;
			return value;
		} else {
			return this._compositeChartType2;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartType2()" />*/
	,
	_compositeChartTypesSwapped: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartTypesSwapped()" />*/
	compositeChartTypesSwapped: function (value) {
		if (arguments.length === 1) {
			this._compositeChartTypesSwapped = value;
			return value;
		} else {
			return this._compositeChartTypesSwapped;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::CompositeChartTypesSwapped()" />*/
	,
	_showZeroValuesInLegend: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowZeroValuesInLegend()" />*/
	showZeroValuesInLegend: function (value) {
		if (arguments.length === 1) {
			this._showZeroValuesInLegend = value;
			return value;
		} else {
			return this._showZeroValuesInLegend;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ShowZeroValuesInLegend()" />*/
	,
	_yAxisLabelAlignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::YAxisLabelAlignment()" />*/
	yAxisLabelAlignment: function (value) {
		if (arguments.length === 1) {
			this._yAxisLabelAlignment = value;
			return value;
		} else {
			return this._yAxisLabelAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::YAxisLabelAlignment()" />*/
	,
	_useCompactLabels: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::UseCompactLabels()" />*/
	useCompactLabels: function (value) {
		if (arguments.length === 1) {
			this._useCompactLabels = value;
			return value;
		} else {
			return this._useCompactLabels;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::UseCompactLabels()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.series(new $.ig.Array());
		this.leftAxisFields(new $.ig.Array());
		this.rightAxisFields(new $.ig.Array());
		this.chartType($.ig.DashboardChartType.prototype.column);
		this.showLegends(true);
		this.trendlineType($.ig.DashboardTrendlineType.prototype.none);
		this.labelDisplayMode($.ig.DashboardLabelDisplayMode.prototype.percentage);
		this.brushOffsetIndex($.ig.util.toNullable($.ig.Number.prototype.$type, -1));
		this.pieStartPosition($.ig.util.toNullable($.ig.Number.prototype.$type, 270));
		this.showTotalsInTooltip(true);
		this.compositeChartType1($.ig.DashboardChartType.prototype.column);
		this.compositeChartType2($.ig.DashboardChartType.prototype.line);
		this.compositeChartTypesSwapped(false);
		this.yAxisLabelAlignment($.ig.DashboardTextAlignment.prototype.right);
		this.useCompactLabels(false);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.chartType(other.chartType());
		this.allSeries(other.allSeries());
		this.showLegends(other.showLegends());
		this.trendlineType(other.trendlineType());
		this.singleAxisMode(other.singleAxisMode());
		this.financial($.ig.CloneUtils.prototype.cloneObject(other.financial()));
		this.labelField(other.labelField());
		this.xAxisField(other.xAxisField());
		this.yAxisField(other.yAxisField());
		this.zAxisField(other.zAxisField());
		this.colorAxisField(other.colorAxisField());
		this.series($.ig.CloneListUtils.prototype.cloneList(other.series(), new $.ig.Array()));
		this.leftAxisFields($.ig.CloneListUtils.prototype.cloneList(other.leftAxisFields(), new $.ig.Array()));
		this.rightAxisFields($.ig.CloneListUtils.prototype.cloneList(other.rightAxisFields(), new $.ig.Array()));
		this.leftAxisLogarithmic(other.leftAxisLogarithmic());
		this.rightAxisLogarithmic(other.rightAxisLogarithmic());
		this.labelDisplayMode(other.labelDisplayMode());
		this.isPercentageDistributed(other.isPercentageDistributed());
		this.leftAxisMinValue(other.leftAxisMinValue());
		this.leftAxisMaxValue(other.leftAxisMaxValue());
		this.rightAxisMinValue(other.rightAxisMinValue());
		this.rightAxisMaxValue(other.rightAxisMaxValue());
		this.brushOffsetIndex(other.brushOffsetIndex());
		this.pieStartPosition(other.pieStartPosition());
		this.showTotalsInTooltip(other.showTotalsInTooltip());
		this.compositeChartType1(other.compositeChartType1());
		this.compositeChartType2(other.compositeChartType2());
		this.compositeChartTypesSwapped(other.compositeChartTypesSwapped());
		this.showZeroValuesInLegend(other.showZeroValuesInLegend());
		this.yAxisLabelAlignment(other.yAxisLabelAlignment());
		this.useCompactLabels(other.useCompactLabels());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.chartType($.ig.DashboardEnumDeserialization.prototype.readChartType($.ig.JsonUtility.prototype.loadString(json, "ChartType")));
		this.allSeries($.ig.JsonUtility.prototype.loadBool(json, "AllSeries"));
		this.showLegends($.ig.JsonUtility.prototype.loadBool1(json, "ShowLegends", true));
		this.trendlineType($.ig.DashboardEnumDeserialization.prototype.readTrendlineType($.ig.JsonUtility.prototype.loadString(json, "TrendlineType")));
		this.singleAxisMode($.ig.JsonUtility.prototype.loadBool(json, "SingleAxisMode"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Financial")) {
			this.financial(new $.ig.FinancialSettings(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Financial"])));
		}
		this.labelField($.ig.JsonUtility.prototype.loadString(json, "LabelField"));
		this.xAxisField($.ig.JsonUtility.prototype.loadString(json, "XAxisField"));
		this.yAxisField($.ig.JsonUtility.prototype.loadString(json, "YAxisField"));
		this.zAxisField($.ig.JsonUtility.prototype.loadString(json, "ZAxisField"));
		this.colorAxisField($.ig.JsonUtility.prototype.loadString(json, "ColorAxisField"));
		this.series($.ig.JsonUtility.prototype.loadStringList(json, "Series"));
		this.leftAxisFields($.ig.JsonUtility.prototype.loadStringList(json, "LeftAxisFields"));
		this.rightAxisFields($.ig.JsonUtility.prototype.loadStringList(json, "RightAxisFields"));
		this.leftAxisLogarithmic($.ig.JsonUtility.prototype.loadBool(json, "LeftAxisLogarithmic"));
		this.rightAxisLogarithmic($.ig.JsonUtility.prototype.loadBool(json, "RightAxisLogarithmic"));
		this.labelDisplayMode($.ig.DashboardEnumDeserialization.prototype.readLabelDisplayMode($.ig.JsonUtility.prototype.loadString(json, "LabelDisplayMode")));
		this.isPercentageDistributed($.ig.JsonUtility.prototype.loadOptionalBool(json, "IsPercentageDistributed"));
		this.leftAxisMinValue($.ig.JsonUtility.prototype.loadOptionalDouble(json, "LeftAxisMinValue"));
		this.leftAxisMaxValue($.ig.JsonUtility.prototype.loadOptionalDouble(json, "LeftAxisMaxValue"));
		this.rightAxisMinValue($.ig.JsonUtility.prototype.loadOptionalDouble(json, "RightAxisMinValue"));
		this.rightAxisMaxValue($.ig.JsonUtility.prototype.loadOptionalDouble(json, "RightAxisMaxValue"));
		this.brushOffsetIndex($.ig.JsonUtility.prototype.loadOptionalInt(json, "BrushOffsetIndex"));
		this.pieStartPosition($.ig.JsonUtility.prototype.loadOptionalInt(json, "PieStartPosition"));
		this.showTotalsInTooltip($.ig.JsonUtility.prototype.loadBool1(json, "ShowTotalsInTooltip", true));
		this.compositeChartType1($.ig.DashboardEnumDeserialization.prototype.readChartType($.ig.JsonUtility.prototype.loadString(json, "CompositeChartType1")));
		this.compositeChartType2($.ig.DashboardEnumDeserialization.prototype.readChartType($.ig.JsonUtility.prototype.loadString(json, "CompositeChartType2")));
		this.compositeChartTypesSwapped($.ig.JsonUtility.prototype.loadBool1(json, "CompositeChartTypesSwapped", false));
		this.showZeroValuesInLegend($.ig.JsonUtility.prototype.loadBool(json, "ShowZeroValuesInLegend"));
		this.yAxisLabelAlignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "YAxisLabelAlignment")));
		this.useCompactLabels($.ig.JsonUtility.prototype.loadBool1(json, "UseCompactLabels", false));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.ChartVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "ChartType", $.ig.DashboardEnumSerialization.prototype.writeChartType(this.chartType()));
		$.ig.JsonUtility.prototype.saveBool(json, "AllSeries", this.allSeries());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLegends", this.showLegends());
		$.ig.JsonUtility.prototype.saveObject(json, "TrendlineType", $.ig.DashboardEnumSerialization.prototype.writeTrendlineType(this.trendlineType()));
		$.ig.JsonUtility.prototype.saveBool(json, "SingleAxisMode", this.singleAxisMode());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Financial", this.financial());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelField", this.labelField());
		$.ig.JsonUtility.prototype.saveObject(json, "XAxisField", this.xAxisField());
		$.ig.JsonUtility.prototype.saveObject(json, "YAxisField", this.yAxisField());
		$.ig.JsonUtility.prototype.saveObject(json, "ZAxisField", this.zAxisField());
		$.ig.JsonUtility.prototype.saveObject(json, "ColorAxisField", this.colorAxisField());
		$.ig.JsonUtility.prototype.saveStringList(json, "Series", this.series());
		$.ig.JsonUtility.prototype.saveStringList(json, "LeftAxisFields", this.leftAxisFields());
		$.ig.JsonUtility.prototype.saveStringList(json, "RightAxisFields", this.rightAxisFields());
		$.ig.JsonUtility.prototype.saveBool(json, "LeftAxisLogarithmic", this.leftAxisLogarithmic());
		$.ig.JsonUtility.prototype.saveBool(json, "RightAxisLogarithmic", this.rightAxisLogarithmic());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelDisplayMode", $.ig.DashboardEnumSerialization.prototype.writeLabelDisplayMode(this.labelDisplayMode()));
		$.ig.JsonUtility.prototype.saveOptionalBool(json, "IsPercentageDistributed", this.isPercentageDistributed());
		$.ig.JsonUtility.prototype.saveObject(json, "LeftAxisMinValue", $.ig.util.unwrapNullable(this.leftAxisMinValue()));
		$.ig.JsonUtility.prototype.saveObject(json, "LeftAxisMaxValue", $.ig.util.unwrapNullable(this.leftAxisMaxValue()));
		$.ig.JsonUtility.prototype.saveObject(json, "RightAxisMinValue", $.ig.util.unwrapNullable(this.rightAxisMinValue()));
		$.ig.JsonUtility.prototype.saveObject(json, "RightAxisMaxValue", $.ig.util.unwrapNullable(this.rightAxisMaxValue()));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "BrushOffsetIndex", this.brushOffsetIndex());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "PieStartPosition", this.pieStartPosition());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowTotalsInTooltip", this.showTotalsInTooltip());
		$.ig.JsonUtility.prototype.saveObject(json, "CompositeChartType1", $.ig.DashboardEnumSerialization.prototype.writeChartType(this.compositeChartType1()));
		$.ig.JsonUtility.prototype.saveObject(json, "CompositeChartType2", $.ig.DashboardEnumSerialization.prototype.writeChartType(this.compositeChartType2()));
		$.ig.JsonUtility.prototype.saveBool(json, "CompositeChartTypesSwapped", this.compositeChartTypesSwapped());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowZeroValuesInLegend", this.showZeroValuesInLegend());
		$.ig.JsonUtility.prototype.saveObject(json, "YAxisLabelAlignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.yAxisLabelAlignment()));
		$.ig.JsonUtility.prototype.saveBool(json, "UseCompactLabels", this.useCompactLabels());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('ChartVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec" />*/

$.ig.util.defType('SingleValueLabelsVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_value: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.value(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.value($.ig.CloneListUtils.prototype.cloneList(other.value(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.value(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Value")) {
			var jsonValue = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Value");
			var jsonListSize = jsonValue.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.value().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValue[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SingleValueLabelsVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().add(column);
		} else {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
		} else {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			return this.removeFromMeasures(this.value(), identifier);
		} else {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('SingleValueLabelsVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SingleValueLabelsVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec" />*/

$.ig.util.defType('ChoroplethMapVisualizationDataSpec', 'SingleValueLabelsVisualizationDataSpec', {
	_mapColor: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::MapColor()" />*/
	mapColor: function (value) {
		if (arguments.length === 1) {
			this._mapColor = value;
			return value;
		} else {
			return this._mapColor;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::MapColor()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.mapColor($.ig.CloneUtils.prototype.cloneObject(other.mapColor()));
	},
	init2: function (initNumber, json) {
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "MapColor")) {
			this.mapColor(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["MapColor"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.ChoroplethMapVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "MapColor", this.mapColor());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1 || this.rows().length == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		var locationSectionInfo = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.locationSection, 1, false, dataSpec.isTabular(), false, true, dataSpec.isXmla());
		locationSectionInfo.isStringOnly(true);
		list.add(locationSectionInfo);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.mapColorSection, 1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			this.mapColor(column);
		} else {
			$.ig.SingleValueLabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			this.mapColor(column);
		} else {
			$.ig.SingleValueLabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			var index = this.mapColor() == null ? -1 : 0;
			this.mapColor(null);
			return index;
		} else {
			return $.ig.SingleValueLabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addDimensionColumns(list, this.labels(), $.ig.VisualizationDataSpec.prototype.locationSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.mapColor(), $.ig.VisualizationDataSpec.prototype.mapColorSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.locationSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.locationSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.locationSection, columns, $.ig.VisualizationDataSpec.prototype.locationSection);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.mapColorSection, columns, $.ig.VisualizationDataSpec.prototype.mapColorSection, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('ChoroplethMapVisualizationDataSpec', $.ig.SingleValueLabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings" />*/

$.ig.util.defType('GeoMapBaseVisualizationSettings', 'VisualizationSettings', {
	_showLegends: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ShowLegends()" />*/
	showLegends: function (value) {
		if (arguments.length === 1) {
			this._showLegends = value;
			return value;
		} else {
			return this._showLegends;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ShowLegends()" />*/
	,
	_region: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::Region()" />*/
	region: function (value) {
		if (arguments.length === 1) {
			this._region = value;
			return value;
		} else {
			return this._region;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::Region()" />*/
	,
	_colorIndex: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ColorIndex()" />*/
	colorIndex: function (value) {
		if (arguments.length === 1) {
			this._colorIndex = value;
			return value;
		} else {
			return this._colorIndex;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ColorIndex()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.showLegends(true);
		this.colorIndex($.ig.util.toNullable($.ig.Number.prototype.$type, -1));
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.showLegends(other.showLegends());
		this.region(other.region());
		this.colorIndex(other.colorIndex());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.showLegends($.ig.JsonUtility.prototype.loadBool1(json, "ShowLegends", true));
		this.region($.ig.JsonUtility.prototype.loadString(json, "Region"));
		this.colorIndex($.ig.JsonUtility.prototype.loadOptionalInt(json, "ColorIndex"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.GeoMapBaseVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLegends", this.showLegends());
		$.ig.JsonUtility.prototype.saveObject(json, "Region", this.region());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "ColorIndex", this.colorIndex());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::GetResolvedColorIndex()" />*/
	getResolvedColorIndex: function () {
		var idx = ($.ig.NativeDataLayerUtility.prototype.isNullInt(this.colorIndex())) ? 0 : $.ig.NativeDataLayerUtility.prototype.unwrapInt(this.colorIndex());
		if (idx == -1) {
			return 0;
		}
		return idx;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings::GetResolvedColorIndex()" />*/
	,
	$type: new $.ig.Type('GeoMapBaseVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GeoMapBaseVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings" />*/

$.ig.util.defType('ChoroplethMapVisualizationSettings', 'GeoMapBaseVisualizationSettings', {
	_colorizationStyle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ColorizationStyle()" />*/
	colorizationStyle: function (value) {
		if (arguments.length === 1) {
			this._colorizationStyle = value;
			return value;
		} else {
			return this._colorizationStyle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ColorizationStyle()" />*/
	,
	_includeAdjacentShapes: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::IncludeAdjacentShapes()" />*/
	includeAdjacentShapes: function (value) {
		if (arguments.length === 1) {
			this._includeAdjacentShapes = value;
			return value;
		} else {
			return this._includeAdjacentShapes;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::IncludeAdjacentShapes()" />*/
	,
	_labelVisibility: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::LabelVisibility()" />*/
	labelVisibility: function (value) {
		if (arguments.length === 1) {
			this._labelVisibility = value;
			return value;
		} else {
			return this._labelVisibility;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::LabelVisibility()" />*/
	,
	_labelStyle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::LabelStyle()" />*/
	labelStyle: function (value) {
		if (arguments.length === 1) {
			this._labelStyle = value;
			return value;
		} else {
			return this._labelStyle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::LabelStyle()" />*/
	,
	_colorBasedOn: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ColorBasedOn()" />*/
	colorBasedOn: function (value) {
		if (arguments.length === 1) {
			this._colorBasedOn = value;
			return value;
		} else {
			return this._colorBasedOn;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ColorBasedOn()" />*/
	,
	_dataLocale: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::DataLocale()" />*/
	dataLocale: function (value) {
		if (arguments.length === 1) {
			this._dataLocale = value;
			return value;
		} else {
			return this._dataLocale;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::DataLocale()" />*/
	,
	_regions: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::Regions()" />*/
	regions: function (value) {
		if (arguments.length === 1) {
			this._regions = value;
			return value;
		} else {
			return this._regions;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::Regions()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GeoMapBaseVisualizationSettings.prototype.init.call(this, 0);
		this.regions(new $.ig.Array());
		this.includeAdjacentShapes(true);
		this.labelVisibility("VALUES ONLY");
		this.labelStyle("ABBREVIATION");
		this.colorBasedOn($.ig.DashboardChoroplethMapColorType.prototype.highest);
	},
	init1: function (initNumber, other) {
		$.ig.GeoMapBaseVisualizationSettings.prototype.init1.call(this, 1, other);
		this.colorizationStyle(other.colorizationStyle());
		this.includeAdjacentShapes(other.includeAdjacentShapes());
		this.labelVisibility(other.labelVisibility());
		this.labelStyle(other.labelStyle());
		this.colorBasedOn(other.colorBasedOn());
		this.dataLocale(other.dataLocale());
		this.regions($.ig.CloneListUtils.prototype.cloneList(other.regions(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.GeoMapBaseVisualizationSettings.prototype.init2.call(this, 2, json);
		this.colorizationStyle($.ig.JsonUtility.prototype.loadString(json, "ColorizationStyle"));
		this.includeAdjacentShapes($.ig.JsonUtility.prototype.loadBool1(json, "IncludeAdjacentShapes", true));
		this.labelVisibility($.ig.JsonUtility.prototype.loadString(json, "LabelVisibility"));
		this.labelStyle($.ig.JsonUtility.prototype.loadString(json, "LabelStyle"));
		this.colorBasedOn($.ig.DashboardEnumDeserialization.prototype.readChoroplethMapColorType($.ig.JsonUtility.prototype.loadString(json, "ColorBasedOn")));
		this.dataLocale($.ig.JsonUtility.prototype.loadString(json, "DataLocale"));
		this.regions($.ig.JsonUtility.prototype.loadStringList(json, "Regions"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.ChoroplethMapVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLegends", this.showLegends());
		$.ig.JsonUtility.prototype.saveObject(json, "Region", this.region());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "ColorIndex", this.colorIndex());
		$.ig.JsonUtility.prototype.saveObject(json, "ColorizationStyle", this.colorizationStyle());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeAdjacentShapes", this.includeAdjacentShapes());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelVisibility", this.labelVisibility());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelStyle", this.labelStyle());
		$.ig.JsonUtility.prototype.saveObject(json, "ColorBasedOn", $.ig.DashboardEnumSerialization.prototype.writeChoroplethMapColorType(this.colorBasedOn()));
		$.ig.JsonUtility.prototype.saveObject(json, "DataLocale", this.dataLocale());
		$.ig.JsonUtility.prototype.saveStringList(json, "Regions", this.regions());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('ChoroplethMapVisualizationSettings', $.ig.GeoMapBaseVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ChoroplethMapVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec" />*/

$.ig.util.defType('CompositeChartVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_chart1: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Chart1()" />*/
	chart1: function (value) {
		if (arguments.length === 1) {
			this._chart1 = value;
			return value;
		} else {
			return this._chart1;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Chart1()" />*/
	,
	_chart2: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Chart2()" />*/
	chart2: function (value) {
		if (arguments.length === 1) {
			this._chart2 = value;
			return value;
		} else {
			return this._chart2;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Chart2()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.chart1(new $.ig.Array());
		this.chart2(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.chart1($.ig.CloneListUtils.prototype.cloneList(other.chart1(), new $.ig.Array()));
		this.chart2($.ig.CloneListUtils.prototype.cloneList(other.chart2(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.chart1(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Chart1")) {
			var jsonChart1 = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Chart1");
			var jsonListSize = jsonChart1.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.chart1().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonChart1[i])));
			}
		}
		this.chart2(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Chart2")) {
			var jsonChart2 = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Chart2");
			var jsonListSize1 = jsonChart2.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.chart2().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonChart2[i1])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.CompositeChartVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Chart1", this.chart1());
		$.ig.JsonUtility.prototype.saveContainer(json, "Chart2", this.chart2());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.chart1(), $.ig.VisualizationDataSpec.prototype.chart1Section);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.chart2(), $.ig.VisualizationDataSpec.prototype.chart2Section);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.chart1Section, -1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.chart2Section, -1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.chart1()) == 0 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.chart2()) == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart1Section) {
			this.chart1().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart2Section) {
			this.chart2().add(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart1Section) {
			this.chart1().insert(position < 0 || position > this.chart1().length ? this.chart1().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart2Section) {
			this.chart2().insert(position < 0 || position > this.chart2().length ? this.chart2().length : position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart1Section) {
			return this.removeFromMeasures(this.chart1(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.chart2Section) {
			return this.removeFromMeasures(this.chart2(), identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.chart1Section, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.chart2Section, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('CompositeChartVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem" />*/

$.ig.util.defType('CompositeDataSourceItem', 'BaseDataSourceItem', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataSourceItem.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseDataSourceItem.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseDataSourceItem.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem::Clone()" />*/
	clone: function () {
		return new $.ig.CompositeDataSourceItem(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Subtitle", this.subtitle());
		$.ig.JsonUtility.prototype.saveObject(json, "DataSourceId", this.dataSourceId());
		$.ig.JsonUtility.prototype.saveBool(json, "HasTabularData", this.hasTabularData());
		$.ig.JsonUtility.prototype.saveBool(json, "HasAsset", this.hasAsset());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ResourceItem", this.resourceItem());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem::ToJson()" />*/
	,
	$type: new $.ig.Type('CompositeDataSourceItem', $.ig.BaseDataSourceItem.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CompositeDataSourceItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CompositeDataSource" />*/

$.ig.util.defType('CompositeDataSource', 'BaseDataSource', {
	_joinExpression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.CompositeDataSource::JoinExpression()" />*/
	joinExpression: function (value) {
		if (arguments.length === 1) {
			this._joinExpression = value;
			return value;
		} else {
			return this._joinExpression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.CompositeDataSource::JoinExpression()" />*/
	,
	_dataSetItems: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeDataSource::DataSetItems()" />*/
	dataSetItems: function (value) {
		if (arguments.length === 1) {
			this._dataSetItems = value;
			return value;
		} else {
			return this._dataSetItems;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.CompositeDataSource::DataSetItems()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataSource.prototype.init.call(this, 0);
		this.dataSetItems(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.BaseDataSource.prototype.init1.call(this, 1, other);
		this.joinExpression(other.joinExpression());
		this.dataSetItems($.ig.CloneListUtils.prototype.cloneList(other.dataSetItems(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.BaseDataSource.prototype.init2.call(this, 2, json);
		this.joinExpression($.ig.JsonUtility.prototype.loadString(json, "JoinExpression"));
		this.dataSetItems(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSetItems")) {
			var jsonDataSetItems = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DataSetItems");
			var jsonListSize = jsonDataSetItems.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.dataSetItems().add(new $.ig.DataSetItem(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonDataSetItems[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeDataSource::Clone()" />*/
	clone: function () {
		return new $.ig.CompositeDataSource(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CompositeDataSource::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeDataSource::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Provider", this.provider());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Subtitle", this.subtitle());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		$.ig.JsonUtility.prototype.saveObject(json, "JoinExpression", this.joinExpression());
		$.ig.JsonUtility.prototype.saveContainer(json, "DataSetItems", this.dataSetItems());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.CompositeDataSource::ToJson()" />*/
	,
	$type: new $.ig.Type('CompositeDataSource', $.ig.BaseDataSource.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CompositeDataSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand" />*/

$.ig.util.defType('ConditionalFormattingBand', 'BandBase', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BandBase.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BandBase.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.BandBase.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand::Clone()" />*/
	clone: function () {
		return new $.ig.ConditionalFormattingBand(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeBandType(this.type()));
		$.ig.JsonUtility.prototype.saveObject(json, "Color", $.ig.DashboardEnumSerialization.prototype.writeBandColorType(this.color()));
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "Shape", $.ig.DashboardEnumSerialization.prototype.writeShapeType(this.shape()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand::ToJson()" />*/
	,
	$type: new $.ig.Type('ConditionalFormattingBand', $.ig.BandBase.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingBand" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec" />*/

$.ig.util.defType('ConditionalFormattingSpec', 'Object', {
	_minimum: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Minimum()" />*/
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			return this._minimum;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Minimum()" />*/
	,
	_maximum: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Maximum()" />*/
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			return this._maximum;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Maximum()" />*/
	,
	_bands: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Bands()" />*/
	bands: function (value) {
		if (arguments.length === 1) {
			this._bands = value;
			return value;
		} else {
			return this._bands;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Bands()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.bands(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.minimum($.ig.CloneUtils.prototype.cloneObject(other.minimum()));
		this.maximum($.ig.CloneUtils.prototype.cloneObject(other.maximum()));
		this.bands($.ig.CloneListUtils.prototype.cloneList(other.bands(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Minimum")) {
			this.minimum(new $.ig.Bound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Minimum"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Maximum")) {
			this.maximum(new $.ig.Bound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Maximum"])));
		}
		this.bands(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Bands")) {
			var jsonBands = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Bands");
			var jsonListSize = jsonBands.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.bands().add(new $.ig.ConditionalFormattingBand(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonBands[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Clone()" />*/
	clone: function () {
		return new $.ig.ConditionalFormattingSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Minimum", this.minimum());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Maximum", this.maximum());
		$.ig.JsonUtility.prototype.saveContainer(json, "Bands", this.bands());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ConditionalFormattingSpec(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ConditionalFormattingSpec', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardModel" />*/

$.ig.util.defType('DashboardModel', 'Object', {
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Title()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Description()" />*/
	,
	_themeName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::ThemeName()" />*/
	themeName: function (value) {
		if (arguments.length === 1) {
			this._themeName = value;
			return value;
		} else {
			return this._themeName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::ThemeName()" />*/
	,
	_createdWith: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::CreatedWith()" />*/
	createdWith: function (value) {
		if (arguments.length === 1) {
			this._createdWith = value;
			return value;
		} else {
			return this._createdWith;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::CreatedWith()" />*/
	,
	_savedWith: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::SavedWith()" />*/
	savedWith: function (value) {
		if (arguments.length === 1) {
			this._savedWith = value;
			return value;
		} else {
			return this._savedWith;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::SavedWith()" />*/
	,
	_formatVersion: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardModel::FormatVersion()" />*/
	formatVersion: function (value) {
		if (arguments.length === 1) {
			this._formatVersion = value;
			return value;
		} else {
			return this._formatVersion;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardModel::FormatVersion()" />*/
	,
	_useAutoLayout: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardModel::UseAutoLayout()" />*/
	useAutoLayout: function (value) {
		if (arguments.length === 1) {
			this._useAutoLayout = value;
			return value;
		} else {
			return this._useAutoLayout;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardModel::UseAutoLayout()" />*/
	,
	_autoRefreshInterval: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DashboardModel::AutoRefreshInterval()" />*/
	autoRefreshInterval: function (value) {
		if (arguments.length === 1) {
			this._autoRefreshInterval = value;
			return value;
		} else {
			return this._autoRefreshInterval;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DashboardModel::AutoRefreshInterval()" />*/
	,
	_passwordHash: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::PasswordHash()" />*/
	passwordHash: function (value) {
		if (arguments.length === 1) {
			this._passwordHash = value;
			return value;
		} else {
			return this._passwordHash;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::PasswordHash()" />*/
	,
	_tags: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Tags()" />*/
	tags: function (value) {
		if (arguments.length === 1) {
			this._tags = value;
			return value;
		} else {
			return this._tags;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardModel::Tags()" />*/
	,
	_widgets: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::Widgets()" />*/
	widgets: function (value) {
		if (arguments.length === 1) {
			this._widgets = value;
			return value;
		} else {
			return this._widgets;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::Widgets()" />*/
	,
	_dataSources: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::DataSources()" />*/
	dataSources: function (value) {
		if (arguments.length === 1) {
			this._dataSources = value;
			return value;
		} else {
			return this._dataSources;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::DataSources()" />*/
	,
	_globalFilters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::GlobalFilters()" />*/
	globalFilters: function (value) {
		if (arguments.length === 1) {
			this._globalFilters = value;
			return value;
		} else {
			return this._globalFilters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::GlobalFilters()" />*/
	,
	_globalVariables: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::GlobalVariables()" />*/
	globalVariables: function (value) {
		if (arguments.length === 1) {
			this._globalVariables = value;
			return value;
		} else {
			return this._globalVariables;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardModel::GlobalVariables()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.widgets(new $.ig.Array());
		this.dataSources(new $.ig.Array());
		this.globalFilters(new $.ig.Array());
		this.globalVariables(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.title(other.title());
		this.description(other.description());
		this.themeName(other.themeName());
		this.createdWith(other.createdWith());
		this.savedWith(other.savedWith());
		this.formatVersion(other.formatVersion());
		this.useAutoLayout(other.useAutoLayout());
		this.autoRefreshInterval(other.autoRefreshInterval());
		this.passwordHash(other.passwordHash());
		this.tags(other.tags());
		this.widgets($.ig.CloneListUtils.prototype.cloneList(other.widgets(), new $.ig.Array()));
		this.dataSources($.ig.CloneListUtils.prototype.cloneList(other.dataSources(), new $.ig.Array()));
		this.globalFilters($.ig.CloneListUtils.prototype.cloneList(other.globalFilters(), new $.ig.Array()));
		this.globalVariables($.ig.CloneListUtils.prototype.cloneList(other.globalVariables(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.themeName($.ig.JsonUtility.prototype.loadString(json, "ThemeName"));
		this.createdWith($.ig.JsonUtility.prototype.loadString(json, "CreatedWith"));
		this.savedWith($.ig.JsonUtility.prototype.loadString(json, "SavedWith"));
		this.formatVersion($.ig.JsonUtility.prototype.loadInt(json, "FormatVersion"));
		this.useAutoLayout($.ig.JsonUtility.prototype.loadBool(json, "UseAutoLayout"));
		this.autoRefreshInterval($.ig.JsonUtility.prototype.loadOptionalInt(json, "AutoRefreshInterval"));
		this.passwordHash($.ig.JsonUtility.prototype.loadString(json, "PasswordHash"));
		this.tags($.ig.JsonUtility.prototype.loadString(json, "Tags"));
		this.widgets(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Widgets")) {
			var jsonWidgets = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Widgets");
			var jsonListSize = jsonWidgets.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.widgets().add(new $.ig.Widget(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonWidgets[i])));
			}
		}
		this.dataSources(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSources")) {
			var jsonDataSources = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DataSources");
			var jsonListSize1 = jsonDataSources.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				var baseDataSourceInstance = $.ig.BaseDataSource.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonDataSources[i1]));
				if (baseDataSourceInstance != null) {
					this.dataSources().add(baseDataSourceInstance);
				}
			}
		}
		this.globalFilters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "GlobalFilters")) {
			var jsonGlobalFilters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "GlobalFilters");
			var jsonListSize2 = jsonGlobalFilters.length;
			for (var i2 = 0; i2 < jsonListSize2; i2++) {
				var globalFilterInstance = $.ig.GlobalFilter.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonGlobalFilters[i2]));
				if (globalFilterInstance != null) {
					this.globalFilters().add(globalFilterInstance);
				}
			}
		}
		this.globalVariables(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "GlobalVariables")) {
			var jsonGlobalVariables = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "GlobalVariables");
			var jsonListSize3 = jsonGlobalVariables.length;
			for (var i3 = 0; i3 < jsonListSize3; i3++) {
				this.globalVariables().add(new $.ig.GlobalVariable(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonGlobalVariables[i3])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DashboardModel::Clone()" />*/
	clone: function () {
		return new $.ig.DashboardModel(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DashboardModel::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DashboardModel::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "ThemeName", this.themeName());
		$.ig.JsonUtility.prototype.saveObject(json, "CreatedWith", this.createdWith());
		$.ig.JsonUtility.prototype.saveObject(json, "SavedWith", this.savedWith());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveBool(json, "UseAutoLayout", this.useAutoLayout());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AutoRefreshInterval", this.autoRefreshInterval());
		$.ig.JsonUtility.prototype.saveObject(json, "PasswordHash", this.passwordHash());
		$.ig.JsonUtility.prototype.saveObject(json, "Tags", this.tags());
		$.ig.JsonUtility.prototype.saveContainer(json, "Widgets", this.widgets());
		$.ig.JsonUtility.prototype.saveContainer(json, "DataSources", this.dataSources());
		$.ig.JsonUtility.prototype.saveContainer(json, "GlobalFilters", this.globalFilters());
		$.ig.JsonUtility.prototype.saveContainer(json, "GlobalVariables", this.globalVariables());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DashboardModel::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardModel Infragistics.ReportPlus.DashboardModel.DashboardModel::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DashboardModel(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardModel Infragistics.ReportPlus.DashboardModel.DashboardModel::FromJson(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.DashboardModel::GetDataSource(System.String)" />*/
	getDataSource: function (dsId) {
		for (var i = 0; i < this.dataSources().length; i++) {
			var datasource = this.dataSources()[i];
			if (datasource.id() == dsId) {
				return datasource;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.DashboardModel::GetDataSource(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.DashboardModel::GetDataSourceBasedGlobalFilters()" />*/
	getDataSourceBasedGlobalFilters: function () {
		var list = new $.ig.Array();
		var en = this.globalFilters().getEnumerator();
		while (en.moveNext()) {
			var gf = en.current();
			if ($.ig.util.cast($.ig.DataSourceBasedGlobalFilter.prototype.$type, gf) !== null) {
				list.add(gf);
			}
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.DashboardModel::GetDataSourceBasedGlobalFilters()" />*/
	,
	_modifiedOn: $.ig.util.toNullable($.ig.Date.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DashboardModel::ModifiedOn()" />*/
	modifiedOn: function (value) {
		if (arguments.length === 1) {
			this._modifiedOn = value;
			return value;
		} else {
			return this._modifiedOn;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DashboardModel::ModifiedOn()" />*/
	,
	_isShared: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardModel::IsShared()" />*/
	isShared: function (value) {
		if (arguments.length === 1) {
			this._isShared = value;
			return value;
		} else {
			return this._isShared;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardModel::IsShared()" />*/
	,
	$type: new $.ig.Type('DashboardModel', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle" />*/

$.ig.util.defType('DashboardRectangle', 'Object', {
	_x: 0,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::X()" />*/
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::X()" />*/
	,
	_y: 0,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Y()" />*/
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Y()" />*/
	,
	_width: 0,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Width()" />*/
	,
	_height: 0,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Height()" />*/
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Height()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.x(0);
		this.y(0);
		this.width(0);
		this.height(0);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.x(other.x());
		this.y(other.y());
		this.width(other.width());
		this.height(other.height());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.x($.ig.JsonUtility.prototype.loadDouble(json, "X", 0));
		this.y($.ig.JsonUtility.prototype.loadDouble(json, "Y", 0));
		this.width($.ig.JsonUtility.prototype.loadDouble(json, "Width", 0));
		this.height($.ig.JsonUtility.prototype.loadDouble(json, "Height", 0));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Clone()" />*/
	clone: function () {
		return new $.ig.DashboardRectangle(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DashboardRectangle::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DashboardRectangle::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveDouble(json, "X", this.x());
		$.ig.JsonUtility.prototype.saveDouble(json, "Y", this.y());
		$.ig.JsonUtility.prototype.saveDouble(json, "Width", this.width());
		$.ig.JsonUtility.prototype.saveDouble(json, "Height", this.height());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DashboardRectangle::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle Infragistics.ReportPlus.DashboardModel.DashboardRectangle::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DashboardRectangle(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle Infragistics.ReportPlus.DashboardModel.DashboardRectangle::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DashboardRectangle', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget" />*/

$.ig.util.defType('DataBasedGlobalFilterBindingTarget', 'BindingTarget', {
	_globalFilterId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::GlobalFilterId()" />*/
	globalFilterId: function (value) {
		if (arguments.length === 1) {
			this._globalFilterId = value;
			return value;
		} else {
			return this._globalFilterId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::GlobalFilterId()" />*/
	,
	_globalFilterFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::GlobalFilterFieldName()" />*/
	globalFilterFieldName: function (value) {
		if (arguments.length === 1) {
			this._globalFilterFieldName = value;
			return value;
		} else {
			return this._globalFilterFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::GlobalFilterFieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BindingTarget.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BindingTarget.prototype.init1.call(this, 1, other);
		this.globalFilterId(other.globalFilterId());
		this.globalFilterFieldName(other.globalFilterFieldName());
	},
	init2: function (initNumber, json) {
		$.ig.BindingTarget.prototype.init2.call(this, 2, json);
		this.globalFilterId($.ig.JsonUtility.prototype.loadString(json, "GlobalFilterId"));
		this.globalFilterFieldName($.ig.JsonUtility.prototype.loadString(json, "GlobalFilterFieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::Clone()" />*/
	clone: function () {
		return new $.ig.DataBasedGlobalFilterBindingTarget(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "GlobalFilterId", this.globalFilterId());
		$.ig.JsonUtility.prototype.saveObject(json, "GlobalFilterFieldName", this.globalFilterFieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget::ToJson()" />*/
	,
	$type: new $.ig.Type('DataBasedGlobalFilterBindingTarget', $.ig.BindingTarget.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataBasedGlobalFilterBindingTarget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingInputField" />*/

$.ig.util.defType('DataProcessingInputField', 'Object', {
	_resultColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::ResultColumnName()" />*/
	resultColumnName: function (value) {
		if (arguments.length === 1) {
			this._resultColumnName = value;
			return value;
		} else {
			return this._resultColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::ResultColumnName()" />*/
	,
	_inputColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::InputColumnName()" />*/
	inputColumnName: function (value) {
		if (arguments.length === 1) {
			this._inputColumnName = value;
			return value;
		} else {
			return this._inputColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::InputColumnName()" />*/
	,
	_fixedValue: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::FixedValue()" />*/
	fixedValue: function (value) {
		if (arguments.length === 1) {
			this._fixedValue = value;
			return value;
		} else {
			return this._fixedValue;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::FixedValue()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.resultColumnName(other.resultColumnName());
		this.inputColumnName(other.inputColumnName());
		this.fixedValue(other.fixedValue());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.resultColumnName($.ig.JsonUtility.prototype.loadString(json, "ResultColumnName"));
		this.inputColumnName($.ig.JsonUtility.prototype.loadString(json, "InputColumnName"));
		this.fixedValue($.ig.JsonUtility.prototype.loadString(json, "FixedValue"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::Clone()" />*/
	clone: function () {
		return new $.ig.DataProcessingInputField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "ResultColumnName", this.resultColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "InputColumnName", this.inputColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "FixedValue", this.fixedValue());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingInputField Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DataProcessingInputField(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingInputField Infragistics.ReportPlus.DashboardModel.DataProcessingInputField::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DataProcessingInputField', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingInputField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField" />*/

$.ig.util.defType('DataProcessingOutputField', 'Object', {
	_outputColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::OutputColumnName()" />*/
	outputColumnName: function (value) {
		if (arguments.length === 1) {
			this._outputColumnName = value;
			return value;
		} else {
			return this._outputColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::OutputColumnName()" />*/
	,
	_resultColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ResultColumnName()" />*/
	resultColumnName: function (value) {
		if (arguments.length === 1) {
			this._resultColumnName = value;
			return value;
		} else {
			return this._resultColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ResultColumnName()" />*/
	,
	_dataType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::DataType()" />*/
	dataType: function (value) {
		if (arguments.length === 1) {
			this._dataType = value;
			return value;
		} else {
			return this._dataType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::DataType()" />*/
	,
	_featureName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::FeatureName()" />*/
	featureName: function (value) {
		if (arguments.length === 1) {
			this._featureName = value;
			return value;
		} else {
			return this._featureName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::FeatureName()" />*/
	,
	_isBoolean: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::IsBoolean()" />*/
	isBoolean: function (value) {
		if (arguments.length === 1) {
			this._isBoolean = value;
			return value;
		} else {
			return this._isBoolean;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::IsBoolean()" />*/
	,
	_referenceColumn: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ReferenceColumn()" />*/
	referenceColumn: function (value) {
		if (arguments.length === 1) {
			this._referenceColumn = value;
			return value;
		} else {
			return this._referenceColumn;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ReferenceColumn()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.dataType($.ig.DashboardDataType.prototype.string1);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.outputColumnName(other.outputColumnName());
		this.resultColumnName(other.resultColumnName());
		this.dataType(other.dataType());
		this.featureName(other.featureName());
		this.isBoolean(other.isBoolean());
		this.referenceColumn(other.referenceColumn());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.outputColumnName($.ig.JsonUtility.prototype.loadString(json, "OutputColumnName"));
		this.resultColumnName($.ig.JsonUtility.prototype.loadString(json, "ResultColumnName"));
		this.dataType($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "DataType")));
		this.featureName($.ig.JsonUtility.prototype.loadString(json, "FeatureName"));
		this.isBoolean($.ig.JsonUtility.prototype.loadBool(json, "IsBoolean"));
		this.referenceColumn($.ig.JsonUtility.prototype.loadString(json, "ReferenceColumn"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::Clone()" />*/
	clone: function () {
		return new $.ig.DataProcessingOutputField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "OutputColumnName", this.outputColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "ResultColumnName", this.resultColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DataType", $.ig.DashboardEnumSerialization.prototype.writeDataType(this.dataType()));
		$.ig.JsonUtility.prototype.saveObject(json, "FeatureName", this.featureName());
		$.ig.JsonUtility.prototype.saveBool(json, "IsBoolean", this.isBoolean());
		$.ig.JsonUtility.prototype.saveObject(json, "ReferenceColumn", this.referenceColumn());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DataProcessingOutputField(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DataProcessingOutputField', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataProcessingOutputField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSetItem" />*/

$.ig.util.defType('DataSetItem', 'Object', {
	_alias: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataSetItem::Alias()" />*/
	alias: function (value) {
		if (arguments.length === 1) {
			this._alias = value;
			return value;
		} else {
			return this._alias;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DataSetItem::Alias()" />*/
	,
	_dataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.DataSetItem::DataSpec()" />*/
	dataSpec: function (value) {
		if (arguments.length === 1) {
			this._dataSpec = value;
			return value;
		} else {
			return this._dataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.DataSetItem::DataSpec()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.alias(other.alias());
		this.dataSpec($.ig.CloneUtils.prototype.cloneObject(other.dataSpec()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.alias($.ig.JsonUtility.prototype.loadString(json, "Alias"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSpec")) {
			this.dataSpec($.ig.DataSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSpec"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSetItem::Clone()" />*/
	clone: function () {
		return new $.ig.DataSetItem(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSetItem::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSetItem::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Alias", this.alias());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSetItem::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSetItem Infragistics.ReportPlus.DashboardModel.DataSetItem::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DataSetItem(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSetItem Infragistics.ReportPlus.DashboardModel.DataSetItem::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DataSetItem', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSetItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem" />*/

$.ig.util.defType('DataSourceItem', 'BaseDataSourceItem', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataSourceItem.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseDataSourceItem.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseDataSourceItem.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSourceItem::Clone()" />*/
	clone: function () {
		return new $.ig.DataSourceItem(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSourceItem::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSourceItem::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Subtitle", this.subtitle());
		$.ig.JsonUtility.prototype.saveObject(json, "DataSourceId", this.dataSourceId());
		$.ig.JsonUtility.prototype.saveBool(json, "HasTabularData", this.hasTabularData());
		$.ig.JsonUtility.prototype.saveBool(json, "HasAsset", this.hasAsset());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		$.ig.JsonUtility.prototype.saveContainer(json, "Parameters", this.parameters());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ResourceItem", this.resourceItem());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSourceItem::ToJson()" />*/
	,
	$type: new $.ig.Type('DataSourceItem', $.ig.BaseDataSourceItem.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSource" />*/

$.ig.util.defType('DataSource', 'BaseDataSource', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataSource.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseDataSource.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseDataSource.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSource::Clone()" />*/
	clone: function () {
		return new $.ig.DataSource(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSource::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSource::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Provider", this.provider());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Subtitle", this.subtitle());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSource::ToJson()" />*/
	,
	$type: new $.ig.Type('DataSource', $.ig.BaseDataSource.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings" />*/

$.ig.util.defType('DataSpecBindings', 'Object', {
	_urlBinding: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.UrlBinding Infragistics.ReportPlus.DashboardModel.DataSpecBindings::UrlBinding()" />*/
	urlBinding: function (value) {
		if (arguments.length === 1) {
			this._urlBinding = value;
			return value;
		} else {
			return this._urlBinding;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.UrlBinding Infragistics.ReportPlus.DashboardModel.DataSpecBindings::UrlBinding()" />*/
	,
	_bindings: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataSpecBindings::Bindings()" />*/
	bindings: function (value) {
		if (arguments.length === 1) {
			this._bindings = value;
			return value;
		} else {
			return this._bindings;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DataSpecBindings::Bindings()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.bindings(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.urlBinding($.ig.CloneUtils.prototype.cloneObject(other.urlBinding()));
		this.bindings($.ig.CloneListUtils.prototype.cloneList(other.bindings(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "UrlBinding")) {
			this.urlBinding(new $.ig.UrlBinding(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["UrlBinding"])));
		}
		this.bindings(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Bindings")) {
			var jsonBindings = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Bindings");
			var jsonListSize = jsonBindings.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.bindings().add(new $.ig.Binding(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonBindings[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSpecBindings::Clone()" />*/
	clone: function () {
		return new $.ig.DataSpecBindings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DataSpecBindings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSpecBindings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveJsonObject(json, "UrlBinding", this.urlBinding());
		$.ig.JsonUtility.prototype.saveContainer(json, "Bindings", this.bindings());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSpecBindings::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings Infragistics.ReportPlus.DashboardModel.DataSpecBindings::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DataSpecBindings(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings Infragistics.ReportPlus.DashboardModel.DataSpecBindings::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('DataSpecBindings', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DataSpec" />*/

$.ig.util.defType('DataSpec', 'Object', {
	_dataSourceItem: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.DataSpec::DataSourceItem()" />*/
	dataSourceItem: function (value) {
		if (arguments.length === 1) {
			this._dataSourceItem = value;
			return value;
		} else {
			return this._dataSourceItem;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.DataSpec::DataSourceItem()" />*/
	,
	_expiration: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DataSpec::Expiration()" />*/
	expiration: function (value) {
		if (arguments.length === 1) {
			this._expiration = value;
			return value;
		} else {
			return this._expiration;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DataSpec::Expiration()" />*/
	,
	_bindings: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings Infragistics.ReportPlus.DashboardModel.DataSpec::Bindings()" />*/
	bindings: function (value) {
		if (arguments.length === 1) {
			this._bindings = value;
			return value;
		} else {
			return this._bindings;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpecBindings Infragistics.ReportPlus.DashboardModel.DataSpec::Bindings()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.expiration(1440);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.dataSourceItem($.ig.CloneUtils.prototype.cloneObject(other.dataSourceItem()));
		this.expiration(other.expiration());
		this.bindings($.ig.CloneUtils.prototype.cloneObject(other.bindings()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSourceItem")) {
			this.dataSourceItem($.ig.BaseDataSourceItem.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSourceItem"])));
		}
		this.expiration($.ig.JsonUtility.prototype.loadInt1(json, "Expiration", 1440));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Bindings")) {
			this.bindings(new $.ig.DataSpecBindings(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Bindings"])));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.DataSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "ResourceDataSpecType") {
			return new $.ig.ResourceDataSpec(2, json);
		} else if (instanceType == "TabularDataSpecType") {
			return new $.ig.TabularDataSpec(2, json);
		} else if (instanceType == "TextBoxDataSpecType") {
			return new $.ig.TextBoxDataSpec(2, json);
		} else if (instanceType == "XmlaDataSpecType") {
			return new $.ig.XmlaDataSpec(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.DataSpec::FromJson(System.JSDictionary)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsNumericAggregation()" />*/
	supportsNumericAggregation: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsNumericAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsDataFilters()" />*/
	supportsDataFilters: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsDataFilters()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsDateAggregation()" />*/
	supportsDateAggregation: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::SupportsDateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::IsTabular()" />*/
	isTabular: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::IsTabular()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::IsXmla()" />*/
	isXmla: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DataSpec::IsXmla()" />*/
	,
	$type: new $.ig.Type('DataSpec', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec" />*/

$.ig.util.defType('FormattingSpec', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FormattingSpec::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FormattingSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.FormattingSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "DateFormattingSpecType") {
			return new $.ig.DateFormattingSpec(2, json);
		} else if (instanceType == "NumberFormattingSpecType") {
			return new $.ig.NumberFormattingSpec(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.FormattingSpec::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('FormattingSpec', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec" />*/

$.ig.util.defType('DateFormattingSpec', 'FormattingSpec', {
	_dateFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::DateFormat()" />*/
	dateFormat: function (value) {
		if (arguments.length === 1) {
			this._dateFormat = value;
			return value;
		} else {
			return this._dateFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::DateFormat()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FormattingSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.FormattingSpec.prototype.init1.call(this, 1, other);
		this.dateFormat(other.dateFormat());
	},
	init2: function (initNumber, json) {
		$.ig.FormattingSpec.prototype.init2.call(this, 2, json);
		this.dateFormat($.ig.JsonUtility.prototype.loadString(json, "DateFormat"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::Clone()" />*/
	clone: function () {
		return new $.ig.DateFormattingSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "DateFormat", this.dateFormat());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateFormattingSpec::ToJson()" />*/
	,
	$type: new $.ig.Type('DateFormattingSpec', $.ig.FormattingSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget" />*/

$.ig.util.defType('DateGlobalFilterBindingTarget', 'BindingTarget', {
	_globalFilterFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::GlobalFilterFieldName()" />*/
	globalFilterFieldName: function (value) {
		if (arguments.length === 1) {
			this._globalFilterFieldName = value;
			return value;
		} else {
			return this._globalFilterFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::GlobalFilterFieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BindingTarget.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BindingTarget.prototype.init1.call(this, 1, other);
		this.globalFilterFieldName(other.globalFilterFieldName());
	},
	init2: function (initNumber, json) {
		$.ig.BindingTarget.prototype.init2.call(this, 2, json);
		this.globalFilterFieldName($.ig.JsonUtility.prototype.loadString(json, "GlobalFilterFieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::Clone()" />*/
	clone: function () {
		return new $.ig.DateGlobalFilterBindingTarget(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "GlobalFilterFieldName", this.globalFilterFieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget::ToJson()" />*/
	,
	$type: new $.ig.Type('DateGlobalFilterBindingTarget', $.ig.BindingTarget.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateGlobalFilterBindingTarget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateGlobalFilter" />*/

$.ig.util.defType('DateGlobalFilter', 'GlobalFilter', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::RuleType()" />*/
	,
	_customDateRange: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::CustomDateRange()" />*/
	customDateRange: function (value) {
		if (arguments.length === 1) {
			this._customDateRange = value;
			return value;
		} else {
			return this._customDateRange;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::CustomDateRange()" />*/
	,
	_includeToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::IncludeToday()" />*/
	includeToday: function (value) {
		if (arguments.length === 1) {
			this._includeToday = value;
			return value;
		} else {
			return this._includeToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::IncludeToday()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GlobalFilter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardDateRuleType.prototype.none);
		this.includeToday(true);
	},
	init1: function (initNumber, other) {
		$.ig.GlobalFilter.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.customDateRange($.ig.CloneUtils.prototype.cloneObject(other.customDateRange()));
		this.includeToday(other.includeToday());
	},
	init2: function (initNumber, json) {
		$.ig.GlobalFilter.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readDateRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CustomDateRange")) {
			this.customDateRange(new $.ig.DateRange(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["CustomDateRange"])));
		}
		this.includeToday($.ig.JsonUtility.prototype.loadBool1(json, "IncludeToday", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.DateGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeDateRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "CustomDateRange", this.customDateRange());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeToday", this.includeToday());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('DateGlobalFilter', $.ig.GlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateRange" />*/

$.ig.util.defType('DateRange', 'Object', {
	_from: $.ig.util.toNullable($.ig.Date.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DateRange::From()" />*/
	from: function (value) {
		if (arguments.length === 1) {
			this._from = value;
			return value;
		} else {
			return this._from;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DateRange::From()" />*/
	,
	_to: $.ig.util.toNullable($.ig.Date.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DateRange::To()" />*/
	to: function (value) {
		if (arguments.length === 1) {
			this._to = value;
			return value;
		} else {
			return this._to;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.DateRange::To()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.from(other.from());
		this.to(other.to());
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.from($.ig.JsonUtility.prototype.loadDateTime(json, "From"));
		this.to($.ig.JsonUtility.prototype.loadDateTime(json, "To"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateRange::Clone()" />*/
	clone: function () {
		return new $.ig.DateRange(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateRange::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateRange::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "From", $.ig.util.unwrapNullable(this.from()));
		$.ig.JsonUtility.prototype.saveObject(json, "To", $.ig.util.unwrapNullable(this.to()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateRange::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateRange::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.DateRange(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateRange::FromJson(System.JSDictionary)" />*/
	,
	_isDateTimeFilter: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateRange::IsDateTimeFilter()" />*/
	isDateTimeFilter: function (value) {
		if (arguments.length === 1) {
			this._isDateTimeFilter = value;
			return value;
		} else {
			return this._isDateTimeFilter;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateRange::IsDateTimeFilter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.DateRange::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.DateRange)" />*/
	copyAdditionalProperties: function (range) {
		this.isDateTimeFilter(range.isDateTimeFilter());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.DateRange::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.DateRange)" />*/
	,
	$type: new $.ig.Type('DateRange', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateRange" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FieldSettings" />*/

$.ig.util.defType('FieldSettings', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FieldSettings::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FieldSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FieldSettings Infragistics.ReportPlus.DashboardModel.FieldSettings::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "DateTimeFieldSettingsType") {
			return new $.ig.DateTimeFieldSettings(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FieldSettings Infragistics.ReportPlus.DashboardModel.FieldSettings::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('FieldSettings', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FieldSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings" />*/

$.ig.util.defType('DateTimeFieldSettings', 'FieldSettings', {
	_dateFiscalYearStartMonth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			this._dateFiscalYearStartMonth = value;
			return value;
		} else {
			return this._dateFiscalYearStartMonth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::DateFiscalYearStartMonth()" />*/
	,
	_displayInLocalTimeZone: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::DisplayInLocalTimeZone()" />*/
	displayInLocalTimeZone: function (value) {
		if (arguments.length === 1) {
			this._displayInLocalTimeZone = value;
			return value;
		} else {
			return this._displayInLocalTimeZone;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::DisplayInLocalTimeZone()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FieldSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.FieldSettings.prototype.init1.call(this, 1, other);
		this.dateFiscalYearStartMonth(other.dateFiscalYearStartMonth());
		this.displayInLocalTimeZone(other.displayInLocalTimeZone());
	},
	init2: function (initNumber, json) {
		$.ig.FieldSettings.prototype.init2.call(this, 2, json);
		this.dateFiscalYearStartMonth($.ig.JsonUtility.prototype.loadInt(json, "DateFiscalYearStartMonth"));
		this.displayInLocalTimeZone($.ig.JsonUtility.prototype.loadBool(json, "DisplayInLocalTimeZone"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::Clone()" />*/
	clone: function () {
		return new $.ig.DateTimeFieldSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveBool(json, "DisplayInLocalTimeZone", this.displayInLocalTimeZone());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('DateTimeFieldSettings', $.ig.FieldSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateTimeFieldSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Filter" />*/

$.ig.util.defType('Filter', 'Object', {
	_filterType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType Infragistics.ReportPlus.DashboardModel.Filter::FilterType()" />*/
	filterType: function (value) {
		if (arguments.length === 1) {
			this._filterType = value;
			return value;
		} else {
			return this._filterType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType Infragistics.ReportPlus.DashboardModel.Filter::FilterType()" />*/
	,
	_selectedValues: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Filter::SelectedValues()" />*/
	selectedValues: function (value) {
		if (arguments.length === 1) {
			this._selectedValues = value;
			return value;
		} else {
			return this._selectedValues;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Filter::SelectedValues()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.selectedValues(new $.ig.Array());
		this.filterType($.ig.DashboardFilterEnumType.prototype.allValues);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.filterType(other.filterType());
		this.selectedValues($.ig.CloneListUtils.prototype.cloneList(other.selectedValues(), new $.ig.Array()));
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.filterType($.ig.DashboardEnumDeserialization.prototype.readFilterEnumType($.ig.JsonUtility.prototype.loadString(json, "FilterType")));
		this.selectedValues(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "SelectedValues")) {
			var jsonSelectedValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "SelectedValues");
			var jsonListSize = jsonSelectedValues.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.selectedValues().add(new $.ig.FilterValue(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonSelectedValues[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Filter::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Filter::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.Filter::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "DateTimeFilterType") {
			return new $.ig.DateTimeFilter(2, json);
		} else if (instanceType == "NumberFilterType") {
			return new $.ig.NumberFilter(2, json);
		} else if (instanceType == "StringFilterType") {
			return new $.ig.StringFilter(2, json);
		} else if (instanceType == "TimeFilterType") {
			return new $.ig.TimeFilter(2, json);
		} else if (instanceType == "XmlaDateFilterType") {
			return new $.ig.XmlaDateFilter(2, json);
		} else if (instanceType == "XmlaRegularFilterType") {
			return new $.ig.XmlaRegularFilter(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.Filter::FromJson(System.JSDictionary)" />*/
	,
	_isAdHocFilter: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Filter::IsAdHocFilter()" />*/
	isAdHocFilter: function (value) {
		if (arguments.length === 1) {
			this._isAdHocFilter = value;
			return value;
		} else {
			return this._isAdHocFilter;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Filter::IsAdHocFilter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.Filter::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	copyAdditionalProperties: function (other) {
		this.isAdHocFilter(other.isAdHocFilter());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.Filter::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	,
	$type: new $.ig.Type('Filter', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Filter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DateTimeFilter" />*/

$.ig.util.defType('DateTimeFilter', 'Filter', {
	_dateFiscalYearStartMonth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DateTimeFilter::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			this._dateFiscalYearStartMonth = value;
			return value;
		} else {
			return this._dateFiscalYearStartMonth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DateTimeFilter::DateFiscalYearStartMonth()" />*/
	,
	_displayInLocalTimeZone: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFilter::DisplayInLocalTimeZone()" />*/
	displayInLocalTimeZone: function (value) {
		if (arguments.length === 1) {
			this._displayInLocalTimeZone = value;
			return value;
		} else {
			return this._displayInLocalTimeZone;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFilter::DisplayInLocalTimeZone()" />*/
	,
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DateTimeFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.DateTimeFilter::RuleType()" />*/
	,
	_customDateRange: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateTimeFilter::CustomDateRange()" />*/
	customDateRange: function (value) {
		if (arguments.length === 1) {
			this._customDateRange = value;
			return value;
		} else {
			return this._customDateRange;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.DateTimeFilter::CustomDateRange()" />*/
	,
	_includeToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFilter::IncludeToday()" />*/
	includeToday: function (value) {
		if (arguments.length === 1) {
			this._includeToday = value;
			return value;
		} else {
			return this._includeToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DateTimeFilter::IncludeToday()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardDateRuleType.prototype.allTime);
		this.includeToday(true);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.dateFiscalYearStartMonth(other.dateFiscalYearStartMonth());
		this.displayInLocalTimeZone(other.displayInLocalTimeZone());
		this.ruleType(other.ruleType());
		this.customDateRange($.ig.CloneUtils.prototype.cloneObject(other.customDateRange()));
		this.includeToday(other.includeToday());
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		this.dateFiscalYearStartMonth($.ig.JsonUtility.prototype.loadInt(json, "DateFiscalYearStartMonth"));
		this.displayInLocalTimeZone($.ig.JsonUtility.prototype.loadBool(json, "DisplayInLocalTimeZone"));
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readDateRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CustomDateRange")) {
			this.customDateRange(new $.ig.DateRange(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["CustomDateRange"])));
		}
		this.includeToday($.ig.JsonUtility.prototype.loadBool1(json, "IncludeToday", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateTimeFilter::Clone()" />*/
	clone: function () {
		return new $.ig.DateTimeFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DateTimeFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateTimeFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveBool(json, "DisplayInLocalTimeZone", this.displayInLocalTimeZone());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeDateRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "CustomDateRange", this.customDateRange());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeToday", this.includeToday());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DateTimeFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('DateTimeFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DateTimeFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec" />*/

$.ig.util.defType('DimensionColumnSpec', 'BaseColumnSpec', {
	_summarizationField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SummarizationField()" />*/
	summarizationField: function (value) {
		if (arguments.length === 1) {
			this._summarizationField = value;
			return value;
		} else {
			return this._summarizationField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SummarizationField()" />*/
	,
	_xmlaElement: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::XmlaElement()" />*/
	xmlaElement: function (value) {
		if (arguments.length === 1) {
			this._xmlaElement = value;
			return value;
		} else {
			return this._xmlaElement;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::XmlaElement()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseColumnSpec.prototype.init1.call(this, 1, other);
		this.summarizationField($.ig.CloneUtils.prototype.cloneObject(other.summarizationField()));
		this.xmlaElement($.ig.CloneUtils.prototype.cloneObject(other.xmlaElement()));
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseColumnSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "SummarizationField")) {
			this.summarizationField($.ig.SummarizationDimensionField.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SummarizationField"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "XmlaElement")) {
			this.xmlaElement($.ig.XmlaDimensionElement.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["XmlaElement"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Clone()" />*/
	clone: function () {
		return new $.ig.DimensionColumnSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SummarizationField", this.summarizationField());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaElement", this.xmlaElement());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::ToJson()" />*/
	,
	init3: function (initNumber, location, field, dimensionField) {
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
		this.location(location);
		this.tabularField(field);
		this.summarizationField(dimensionField);
	},
	init4: function (initNumber, location, dimensionElement) {
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
		this.location(location);
		this.xmlaElement(dimensionElement);
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec)" />*/
	copyAdditionalProperties: function (other) {
		this.location(other.location());
		this.tabularField(other.tabularField() == null ? null : other.tabularField().clone());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Name()" />*/
	name: function () {
		if (this.xmlaElement() != null) {
			return this.xmlaElement().caption();
		} else if (this.tabularField() != null) {
			return this.tabularField().fieldName();
		} else if (this.summarizationField() != null) {
			return this.summarizationField().fieldName();
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Name()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().fieldLabel(value);
			} else if (this.xmlaElement() != null) {
				this.xmlaElement().userCaption(value);
			}
			return value;
		} else {
			if (this.xmlaElement() != null) {
				return $.ig.BaseColumnSpec.prototype.stringIsNullOrEmpty(this.xmlaElement().userCaption()) ? this.xmlaElement().caption() : this.xmlaElement().userCaption();
			} else if (this.tabularField() != null) {
				return $.ig.BaseColumnSpec.prototype.stringIsNullOrEmpty(this.tabularField().fieldLabel()) ? this.tabularField().fieldName() : this.tabularField().fieldLabel();
			} else if (this.summarizationField() != null) {
				return this.summarizationField().fieldName();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Label()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Description()" />*/
	description: function () {
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Description()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			if (this.tabularField() != null) {
				return this.tabularField().fieldType();
			} else if (this.xmlaElement() != null) {
				return this.xmlaElement().dimensionType() == $.ig.DashboardXmlaDimensionEnumType.prototype.date ? $.ig.DashboardDataType.prototype.date : $.ig.DashboardDataType.prototype.string1;
			} else {
				return $.ig.DashboardDataType.prototype.string1;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Type()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DisplayType()" />*/
	displayType: function () {
		return this.type();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DisplayType()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Identifier()" />*/
	identifier: function () {
		return this.summarizationField() == null ? (this.xmlaElement() == null ? null : this.xmlaElement().uniqueName()) : this.summarizationField().fieldName();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Identifier()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Aggregation()" />*/
	aggregation: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return $.ig.DashboardAggregationType.prototype.auto;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Aggregation()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				if (!($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, this.tabularField().settings()) !== null)) {
					this.tabularField().settings(new $.ig.DateTimeFieldSettings(0));
				}
				(this.tabularField().settings()).dateFiscalYearStartMonth(value);
			} else if (this.xmlaElement() != null) {
				this.xmlaElement().dateFiscalYearStartMonth(value);
			}
			return value;
		} else {
			if (this.xmlaElement() != null) {
				return this.xmlaElement().dateFiscalYearStartMonth();
			} else {
				return this.tabularField() == null || !($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, this.tabularField().settings()) !== null) ? 0 : (this.tabularField().settings()).dateFiscalYearStartMonth();
			}
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DateFiscalYearStartMonth()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DateAggregation()" />*/
	dateAggregation: function (value) {
		if (arguments.length === 1) {
			if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, this.summarizationField()) !== null) {
				(this.summarizationField()).dateAggregationType(value);
			} else if (this.xmlaElement() != null) {
				this.xmlaElement().dateAggregationType(value);
			}
			return value;
		} else {
			if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, this.summarizationField()) !== null) {
				return (this.summarizationField()).dateAggregationType();
			} else if (this.xmlaElement() != null) {
				return this.xmlaElement().dateAggregationType();
			} else {
				return $.ig.DashboardDateAggregationType.prototype.year;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::DateAggregation()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().filter(value);
			} else if (this.xmlaElement() != null) {
				if (this.xmlaElement().xmlaFilter() == null) {
					this.xmlaElement().xmlaFilter(new $.ig.XmlaFilter(0));
					this.xmlaElement().xmlaFilter().dataType(this.xmlaElement().dimensionType() == $.ig.DashboardXmlaDimensionEnumType.prototype.date ? $.ig.DashboardDataType.prototype.date : $.ig.DashboardDataType.prototype.string1);
					this.xmlaElement().xmlaFilter().uniqueName(this.xmlaElement().uniqueName());
				}
				this.xmlaElement().xmlaFilter().filter(value);
			}
			return value;
		} else {
			if (this.tabularField() != null) {
				return this.tabularField().filter();
			} else if (this.xmlaElement() != null) {
				return this.xmlaElement().xmlaFilter() == null ? null : this.xmlaElement().xmlaFilter().filter();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Filter()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			if (($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, this.summarizationField()) !== null) && ($.ig.util.cast($.ig.DateFormattingSpec.prototype.$type, value) !== null)) {
				(this.summarizationField()).dateFormatting(value);
			} else if (this.tabularField() != null) {
				this.tabularField().formatting(value);
			}
			return value;
		} else {
			if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, this.summarizationField()) !== null) {
				return (this.summarizationField()).dateFormatting();
			} else if (this.tabularField() != null) {
				return this.tabularField().formatting();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().conditionalFormatting(value);
			}
			return value;
		} else {
			if (this.tabularField() != null) {
				return this.tabularField().conditionalFormatting();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().sorting(value);
			} else if (this.xmlaElement() != null) {
				this.xmlaElement().sorting(value);
			}
			return value;
		} else {
			if (this.tabularField() != null) {
				return this.tabularField().sorting();
			} else if (this.xmlaElement() != null) {
				return this.xmlaElement().sorting();
			} else {
				return $.ig.DashboardSortingType.prototype.none;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Sorting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SortByField()" />*/
	sortByField: function (value) {
		if (arguments.length === 1) {
			if (this.summarizationField() != null) {
				this.summarizationField().sortByField(value);
			}
			return value;
		} else {
			return this.summarizationField() == null ? null : this.summarizationField().sortByField();
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SortByField()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::IsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::IsCalculated()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::Expression()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SortByCaption()" />*/
	sortByCaption: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaElement() != null) {
				this.xmlaElement().fieldSortingByLabel(value);
			}
			return value;
		} else {
			return this.xmlaElement() == null ? false : this.xmlaElement().fieldSortingByLabel();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec::SortByCaption()" />*/
	,
	$type: new $.ig.Type('DimensionColumnSpec', $.ig.BaseColumnSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings" />*/

$.ig.util.defType('DIYVisualizationSettings', 'VisualizationSettings', {
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Title()" />*/
	,
	_url: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Url()" />*/
	url: function (value) {
		if (arguments.length === 1) {
			this._url = value;
			return value;
		} else {
			return this._url;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Url()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.title(other.title());
		this.url(other.url());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		this.url($.ig.JsonUtility.prototype.loadString(json, "Url"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.DIYVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "Url", this.url());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('DIYVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DIYVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.EntitiesQueryField" />*/

$.ig.util.defType('EntitiesQueryField', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Name()" />*/
	,
	_path: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Path()" />*/
	path: function (value) {
		if (arguments.length === 1) {
			this._path = value;
			return value;
		} else {
			return this._path;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Path()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.path(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.name(other.name());
		this.path($.ig.CloneListUtils.prototype.cloneList(other.path(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.path($.ig.JsonUtility.prototype.loadStringList(json, "Path"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Clone()" />*/
	clone: function () {
		return new $.ig.EntitiesQueryField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveStringList(json, "Path", this.path());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.EntitiesQueryField Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.EntitiesQueryField(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.EntitiesQueryField Infragistics.ReportPlus.DashboardModel.EntitiesQueryField::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('EntitiesQueryField', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.EntitiesQueryField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.EntitiesQuery" />*/

$.ig.util.defType('EntitiesQuery', 'Object', {
	_selectedFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.EntitiesQuery::SelectedFields()" />*/
	selectedFields: function (value) {
		if (arguments.length === 1) {
			this._selectedFields = value;
			return value;
		} else {
			return this._selectedFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.EntitiesQuery::SelectedFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.selectedFields(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.selectedFields($.ig.CloneListUtils.prototype.cloneList(other.selectedFields(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.selectedFields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "SelectedFields")) {
			var jsonSelectedFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "SelectedFields");
			var jsonListSize = jsonSelectedFields.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.selectedFields().add(new $.ig.EntitiesQueryField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonSelectedFields[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.EntitiesQuery::Clone()" />*/
	clone: function () {
		return new $.ig.EntitiesQuery(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.EntitiesQuery::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.EntitiesQuery::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedFields", this.selectedFields());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.EntitiesQuery::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.EntitiesQuery Infragistics.ReportPlus.DashboardModel.EntitiesQuery::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.EntitiesQuery(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.EntitiesQuery Infragistics.ReportPlus.DashboardModel.EntitiesQuery::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('EntitiesQuery', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.EntitiesQuery" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ExcelRange" />*/

$.ig.util.defType('ExcelRange', 'Object', {
	_locationX: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LocationX()" />*/
	locationX: function (value) {
		if (arguments.length === 1) {
			this._locationX = value;
			return value;
		} else {
			return this._locationX;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LocationX()" />*/
	,
	_lengthX: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LengthX()" />*/
	lengthX: function (value) {
		if (arguments.length === 1) {
			this._lengthX = value;
			return value;
		} else {
			return this._lengthX;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LengthX()" />*/
	,
	_locationY: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LocationY()" />*/
	locationY: function (value) {
		if (arguments.length === 1) {
			this._locationY = value;
			return value;
		} else {
			return this._locationY;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LocationY()" />*/
	,
	_lengthY: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LengthY()" />*/
	lengthY: function (value) {
		if (arguments.length === 1) {
			this._lengthY = value;
			return value;
		} else {
			return this._lengthY;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ExcelRange::LengthY()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.locationX(other.locationX());
		this.lengthX(other.lengthX());
		this.locationY(other.locationY());
		this.lengthY(other.lengthY());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.locationX($.ig.JsonUtility.prototype.loadInt(json, "LocationX"));
		this.lengthX($.ig.JsonUtility.prototype.loadInt(json, "LengthX"));
		this.locationY($.ig.JsonUtility.prototype.loadInt(json, "LocationY"));
		this.lengthY($.ig.JsonUtility.prototype.loadInt(json, "LengthY"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ExcelRange::Clone()" />*/
	clone: function () {
		return new $.ig.ExcelRange(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ExcelRange::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ExcelRange::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveInt(json, "LocationX", this.locationX());
		$.ig.JsonUtility.prototype.saveInt(json, "LengthX", this.lengthX());
		$.ig.JsonUtility.prototype.saveInt(json, "LocationY", this.locationY());
		$.ig.JsonUtility.prototype.saveInt(json, "LengthY", this.lengthY());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ExcelRange::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ExcelRange Infragistics.ReportPlus.DashboardModel.ExcelRange::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ExcelRange(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ExcelRange Infragistics.ReportPlus.DashboardModel.ExcelRange::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ExcelRange', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ExcelRange" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FieldBindingSource" />*/

$.ig.util.defType('FieldBindingSource', 'BindingSource', {
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FieldBindingSource::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FieldBindingSource::FieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BindingSource.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BindingSource.prototype.init1.call(this, 1, other);
		this.fieldName(other.fieldName());
	},
	init2: function (initNumber, json) {
		$.ig.BindingSource.prototype.init2.call(this, 2, json);
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FieldBindingSource::Clone()" />*/
	clone: function () {
		return new $.ig.FieldBindingSource(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FieldBindingSource::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FieldBindingSource::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FieldBindingSource::ToJson()" />*/
	,
	$type: new $.ig.Type('FieldBindingSource', $.ig.BindingSource.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FieldBindingSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Field" />*/

$.ig.util.defType('Field', 'Object', {
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::FieldName()" />*/
	,
	_fieldLabel: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::FieldLabel()" />*/
	fieldLabel: function (value) {
		if (arguments.length === 1) {
			this._fieldLabel = value;
			return value;
		} else {
			return this._fieldLabel;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::FieldLabel()" />*/
	,
	_fieldType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.Field::FieldType()" />*/
	fieldType: function (value) {
		if (arguments.length === 1) {
			this._fieldType = value;
			return value;
		} else {
			return this._fieldType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.Field::FieldType()" />*/
	,
	_isHidden: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Field::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			this._isHidden = value;
			return value;
		} else {
			return this._isHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Field::IsHidden()" />*/
	,
	_isCalculated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Field::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			this._isCalculated = value;
			return value;
		} else {
			return this._isCalculated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Field::IsCalculated()" />*/
	,
	_expression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			this._expression = value;
			return value;
		} else {
			return this._expression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::Expression()" />*/
	,
	_sorting: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.Field::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			this._sorting = value;
			return value;
		} else {
			return this._sorting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.Field::Sorting()" />*/
	,
	_filter: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.Field::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			this._filter = value;
			return value;
		} else {
			return this._filter;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.Field::Filter()" />*/
	,
	_formatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.Field::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			this._formatting = value;
			return value;
		} else {
			return this._formatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.Field::Formatting()" />*/
	,
	_conditionalFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.Field::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			this._conditionalFormatting = value;
			return value;
		} else {
			return this._conditionalFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.Field::ConditionalFormatting()" />*/
	,
	_settings: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FieldSettings Infragistics.ReportPlus.DashboardModel.Field::Settings()" />*/
	settings: function (value) {
		if (arguments.length === 1) {
			this._settings = value;
			return value;
		} else {
			return this._settings;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FieldSettings Infragistics.ReportPlus.DashboardModel.Field::Settings()" />*/
	,
	_tableAlias: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::TableAlias()" />*/
	tableAlias: function (value) {
		if (arguments.length === 1) {
			this._tableAlias = value;
			return value;
		} else {
			return this._tableAlias;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Field::TableAlias()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.Field::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.Field::Properties()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.properties(new $.ig.NativeTypedDictionary());
		this.fieldType($.ig.DashboardDataType.prototype.string1);
		this.sorting($.ig.DashboardSortingType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName(other.fieldName());
		this.fieldLabel(other.fieldLabel());
		this.fieldType(other.fieldType());
		this.isHidden(other.isHidden());
		this.isCalculated(other.isCalculated());
		this.expression(other.expression());
		this.sorting(other.sorting());
		this.filter($.ig.CloneUtils.prototype.cloneObject(other.filter()));
		this.formatting($.ig.CloneUtils.prototype.cloneObject(other.formatting()));
		this.conditionalFormatting($.ig.CloneUtils.prototype.cloneObject(other.conditionalFormatting()));
		this.settings($.ig.CloneUtils.prototype.cloneObject(other.settings()));
		this.tableAlias(other.tableAlias());
		this.properties($.ig.CloneUtils.prototype.cloneDictionary(other.properties()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
		this.fieldLabel($.ig.JsonUtility.prototype.loadString(json, "FieldLabel"));
		this.fieldType($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "FieldType")));
		this.isHidden($.ig.JsonUtility.prototype.loadBool(json, "IsHidden"));
		this.isCalculated($.ig.JsonUtility.prototype.loadBool(json, "IsCalculated"));
		this.expression($.ig.JsonUtility.prototype.loadString(json, "Expression"));
		this.sorting($.ig.DashboardEnumDeserialization.prototype.readSortingType($.ig.JsonUtility.prototype.loadString(json, "Sorting")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Filter")) {
			this.filter($.ig.Filter.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Filter"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Formatting")) {
			this.formatting($.ig.FormattingSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Formatting"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "ConditionalFormatting")) {
			this.conditionalFormatting(new $.ig.ConditionalFormattingSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ConditionalFormatting"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Settings")) {
			this.settings($.ig.FieldSettings.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Settings"])));
		}
		this.tableAlias($.ig.JsonUtility.prototype.loadString(json, "TableAlias"));
		this.properties($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Properties"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Field::Clone()" />*/
	clone: function () {
		return new $.ig.Field(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Field::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Field::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveObject(json, "FieldLabel", this.fieldLabel());
		$.ig.JsonUtility.prototype.saveObject(json, "FieldType", $.ig.DashboardEnumSerialization.prototype.writeDataType(this.fieldType()));
		$.ig.JsonUtility.prototype.saveBool(json, "IsHidden", this.isHidden());
		$.ig.JsonUtility.prototype.saveBool(json, "IsCalculated", this.isCalculated());
		$.ig.JsonUtility.prototype.saveObject(json, "Expression", this.expression());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Filter", this.filter());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Formatting", this.formatting());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ConditionalFormatting", this.conditionalFormatting());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Settings", this.settings());
		$.ig.JsonUtility.prototype.saveObject(json, "TableAlias", this.tableAlias());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Field::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DashboardModel.Field::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.Field(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DashboardModel.Field::FromJson(System.JSDictionary)" />*/
	,
	init3: function (initNumber, name, type) {
		$.ig.Field.prototype.init.call(this, 0);
		this.fieldName(name);
		this.fieldType(type);
	},
	$type: new $.ig.Type('Field', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Field" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FilterValue" />*/

$.ig.util.defType('FilterValue', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FilterValue::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FilterValue::Name()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.FilterValue::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.FilterValue::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.name(other.name());
		this.value($.ig.CloneUtils.prototype.cloneObject(other.value()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.value($.ig.JsonUtility.prototype.loadObject(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FilterValue::Clone()" />*/
	clone: function () {
		return new $.ig.FilterValue(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FilterValue::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FilterValue::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FilterValue::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FilterValue Infragistics.ReportPlus.DashboardModel.FilterValue::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.FilterValue(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FilterValue Infragistics.ReportPlus.DashboardModel.FilterValue::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('FilterValue', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FilterValue" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings" />*/

$.ig.util.defType('FinancialSettings', 'Object', {
	_financialOpenField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialOpenField()" />*/
	financialOpenField: function (value) {
		if (arguments.length === 1) {
			this._financialOpenField = value;
			return value;
		} else {
			return this._financialOpenField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialOpenField()" />*/
	,
	_financialHighField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialHighField()" />*/
	financialHighField: function (value) {
		if (arguments.length === 1) {
			this._financialHighField = value;
			return value;
		} else {
			return this._financialHighField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialHighField()" />*/
	,
	_financialLowField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialLowField()" />*/
	financialLowField: function (value) {
		if (arguments.length === 1) {
			this._financialLowField = value;
			return value;
		} else {
			return this._financialLowField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialLowField()" />*/
	,
	_financialCloseField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialCloseField()" />*/
	financialCloseField: function (value) {
		if (arguments.length === 1) {
			this._financialCloseField = value;
			return value;
		} else {
			return this._financialCloseField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.FinancialSettings::FinancialCloseField()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.financialOpenField(other.financialOpenField());
		this.financialHighField(other.financialHighField());
		this.financialLowField(other.financialLowField());
		this.financialCloseField(other.financialCloseField());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.financialOpenField($.ig.JsonUtility.prototype.loadString(json, "FinancialOpenField"));
		this.financialHighField($.ig.JsonUtility.prototype.loadString(json, "FinancialHighField"));
		this.financialLowField($.ig.JsonUtility.prototype.loadString(json, "FinancialLowField"));
		this.financialCloseField($.ig.JsonUtility.prototype.loadString(json, "FinancialCloseField"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FinancialSettings::Clone()" />*/
	clone: function () {
		return new $.ig.FinancialSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FinancialSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FinancialSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "FinancialOpenField", this.financialOpenField());
		$.ig.JsonUtility.prototype.saveObject(json, "FinancialHighField", this.financialHighField());
		$.ig.JsonUtility.prototype.saveObject(json, "FinancialLowField", this.financialLowField());
		$.ig.JsonUtility.prototype.saveObject(json, "FinancialCloseField", this.financialCloseField());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FinancialSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings Infragistics.ReportPlus.DashboardModel.FinancialSettings::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.FinancialSettings(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings Infragistics.ReportPlus.DashboardModel.FinancialSettings::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('FinancialSettings', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FinancialSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec" />*/

$.ig.util.defType('FinancialVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_open: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Open()" />*/
	open: function (value) {
		if (arguments.length === 1) {
			this._open = value;
			return value;
		} else {
			return this._open;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Open()" />*/
	,
	_high: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::High()" />*/
	high: function (value) {
		if (arguments.length === 1) {
			this._high = value;
			return value;
		} else {
			return this._high;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::High()" />*/
	,
	_low: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Low()" />*/
	low: function (value) {
		if (arguments.length === 1) {
			this._low = value;
			return value;
		} else {
			return this._low;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Low()" />*/
	,
	_close: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Close()" />*/
	close: function (value) {
		if (arguments.length === 1) {
			this._close = value;
			return value;
		} else {
			return this._close;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Close()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.open(new $.ig.Array());
		this.high(new $.ig.Array());
		this.low(new $.ig.Array());
		this.close(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.open($.ig.CloneListUtils.prototype.cloneList(other.open(), new $.ig.Array()));
		this.high($.ig.CloneListUtils.prototype.cloneList(other.high(), new $.ig.Array()));
		this.low($.ig.CloneListUtils.prototype.cloneList(other.low(), new $.ig.Array()));
		this.close($.ig.CloneListUtils.prototype.cloneList(other.close(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.open(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Open")) {
			var jsonOpen = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Open");
			var jsonListSize = jsonOpen.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.open().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonOpen[i])));
			}
		}
		this.high(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "High")) {
			var jsonHigh = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "High");
			var jsonListSize1 = jsonHigh.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.high().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonHigh[i1])));
			}
		}
		this.low(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Low")) {
			var jsonLow = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Low");
			var jsonListSize2 = jsonLow.length;
			for (var i2 = 0; i2 < jsonListSize2; i2++) {
				this.low().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonLow[i2])));
			}
		}
		this.close(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Close")) {
			var jsonClose = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Close");
			var jsonListSize3 = jsonClose.length;
			for (var i3 = 0; i3 < jsonListSize3; i3++) {
				this.close().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonClose[i3])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.FinancialVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Open", this.open());
		$.ig.JsonUtility.prototype.saveContainer(json, "High", this.high());
		$.ig.JsonUtility.prototype.saveContainer(json, "Low", this.low());
		$.ig.JsonUtility.prototype.saveContainer(json, "Close", this.close());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.open(), $.ig.VisualizationDataSpec.prototype.openSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.high(), $.ig.VisualizationDataSpec.prototype.highSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.low(), $.ig.VisualizationDataSpec.prototype.lowSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.close(), $.ig.VisualizationDataSpec.prototype.closeSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.openSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.highSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.lowSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.closeSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.open()) != 1 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.high()) != 1 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.low()) != 1 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.close()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.openSection) {
			this.open().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.highSection) {
			this.high().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.lowSection) {
			this.low().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.closeSection) {
			this.close().add(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.openSection) {
			this.open().insert(position < 0 || position > this.open().length ? this.open().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.highSection) {
			this.high().insert(position < 0 || position > this.high().length ? this.high().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.lowSection) {
			this.low().insert(position < 0 || position > this.low().length ? this.low().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.closeSection) {
			this.close().insert(position < 0 || position > this.close().length ? this.close().length : position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.openSection) {
			return this.removeFromMeasures(this.open(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.highSection) {
			return this.removeFromMeasures(this.high(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.lowSection) {
			return this.removeFromMeasures(this.low(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.closeSection) {
			return this.removeFromMeasures(this.close(), identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.openSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.highSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.lowSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.closeSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('FinancialVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.PostTransformation" />*/

$.ig.util.defType('PostTransformation', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PostTransformation::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PostTransformation::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.PostTransformation Infragistics.ReportPlus.DashboardModel.PostTransformation::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "ForecastingTransformationType") {
			return new $.ig.ForecastingTransformation(2, json);
		} else if (instanceType == "LinearRegressionTransformationType") {
			return new $.ig.LinearRegressionTransformation(2, json);
		} else if (instanceType == "MLPostTransformationType") {
			return new $.ig.MLPostTransformation(2, json);
		} else if (instanceType == "OutliersTransformationType") {
			return new $.ig.OutliersTransformation(2, json);
		} else if (instanceType == "TimeSeriesTransformationType") {
			return new $.ig.TimeSeriesTransformation(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.PostTransformation Infragistics.ReportPlus.DashboardModel.PostTransformation::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('PostTransformation', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.PostTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation" />*/

$.ig.util.defType('TimeSeriesTransformation', 'PostTransformation', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PostTransformation.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.PostTransformation.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.PostTransformation.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation::Clone()" />*/
	clone: function () {
		return new $.ig.TimeSeriesTransformation(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation::ToJson()" />*/
	,
	$type: new $.ig.Type('TimeSeriesTransformation', $.ig.PostTransformation.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TimeSeriesTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ForecastingTransformation" />*/

$.ig.util.defType('ForecastingTransformation', 'TimeSeriesTransformation', {
	_periodsToForecast: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::PeriodsToForecast()" />*/
	periodsToForecast: function (value) {
		if (arguments.length === 1) {
			this._periodsToForecast = value;
			return value;
		} else {
			return this._periodsToForecast;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::PeriodsToForecast()" />*/
	,
	_seasonLength: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::SeasonLength()" />*/
	seasonLength: function (value) {
		if (arguments.length === 1) {
			this._seasonLength = value;
			return value;
		} else {
			return this._seasonLength;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::SeasonLength()" />*/
	,
	_periodType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::PeriodType()" />*/
	periodType: function (value) {
		if (arguments.length === 1) {
			this._periodType = value;
			return value;
		} else {
			return this._periodType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::PeriodType()" />*/
	,
	_includeBounds: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::IncludeBounds()" />*/
	includeBounds: function (value) {
		if (arguments.length === 1) {
			this._includeBounds = value;
			return value;
		} else {
			return this._includeBounds;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::IncludeBounds()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TimeSeriesTransformation.prototype.init.call(this, 0);
		this.periodsToForecast(12);
		this.seasonLength(12);
		this.periodType($.ig.DashboardDateAggregationType.prototype.month);
	},
	init1: function (initNumber, other) {
		$.ig.TimeSeriesTransformation.prototype.init1.call(this, 1, other);
		this.periodsToForecast(other.periodsToForecast());
		this.seasonLength(other.seasonLength());
		this.periodType(other.periodType());
		this.includeBounds(other.includeBounds());
	},
	init2: function (initNumber, json) {
		$.ig.TimeSeriesTransformation.prototype.init2.call(this, 2, json);
		this.periodsToForecast($.ig.JsonUtility.prototype.loadInt1(json, "PeriodsToForecast", 12));
		this.seasonLength($.ig.JsonUtility.prototype.loadInt1(json, "SeasonLength", 12));
		this.periodType($.ig.DashboardEnumDeserialization.prototype.readDateAggregationType($.ig.JsonUtility.prototype.loadString(json, "PeriodType")));
		this.includeBounds($.ig.JsonUtility.prototype.loadBool(json, "IncludeBounds"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::Clone()" />*/
	clone: function () {
		return new $.ig.ForecastingTransformation(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveInt(json, "PeriodsToForecast", this.periodsToForecast());
		$.ig.JsonUtility.prototype.saveInt(json, "SeasonLength", this.seasonLength());
		$.ig.JsonUtility.prototype.saveObject(json, "PeriodType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.periodType()));
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeBounds", this.includeBounds());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ForecastingTransformation::ToJson()" />*/
	,
	$type: new $.ig.Type('ForecastingTransformation', $.ig.TimeSeriesTransformation.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ForecastingTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GaugeBand" />*/

$.ig.util.defType('GaugeBand', 'BandBase', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BandBase.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BandBase.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.BandBase.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GaugeBand::Clone()" />*/
	clone: function () {
		return new $.ig.GaugeBand(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GaugeBand::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GaugeBand::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeBandType(this.type()));
		$.ig.JsonUtility.prototype.saveObject(json, "Color", $.ig.DashboardEnumSerialization.prototype.writeBandColorType(this.color()));
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "Shape", $.ig.DashboardEnumSerialization.prototype.writeShapeType(this.shape()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GaugeBand::ToJson()" />*/
	,
	$type: new $.ig.Type('GaugeBand', $.ig.BandBase.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GaugeBand" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings" />*/

$.ig.util.defType('GaugeVisualizationSettings', 'VisualizationSettings', {
	_viewType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ViewType()" />*/
	viewType: function (value) {
		if (arguments.length === 1) {
			this._viewType = value;
			return value;
		} else {
			return this._viewType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ViewType()" />*/
	,
	_minimum: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Minimum()" />*/
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			return this._minimum;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Minimum()" />*/
	,
	_maximum: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Maximum()" />*/
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			return this._maximum;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Bound Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Maximum()" />*/
	,
	_gaugeBands: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::GaugeBands()" />*/
	gaugeBands: function (value) {
		if (arguments.length === 1) {
			this._gaugeBands = value;
			return value;
		} else {
			return this._gaugeBands;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::GaugeBands()" />*/
	,
	_valueColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ValueColumnName()" />*/
	valueColumnName: function (value) {
		if (arguments.length === 1) {
			this._valueColumnName = value;
			return value;
		} else {
			return this._valueColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ValueColumnName()" />*/
	,
	_labelColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::LabelColumnName()" />*/
	labelColumnName: function (value) {
		if (arguments.length === 1) {
			this._labelColumnName = value;
			return value;
		} else {
			return this._labelColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::LabelColumnName()" />*/
	,
	_targetColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::TargetColumnName()" />*/
	targetColumnName: function (value) {
		if (arguments.length === 1) {
			this._targetColumnName = value;
			return value;
		} else {
			return this._targetColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::TargetColumnName()" />*/
	,
	_singleValueFormattingEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::SingleValueFormattingEnabled()" />*/
	singleValueFormattingEnabled: function (value) {
		if (arguments.length === 1) {
			this._singleValueFormattingEnabled = value;
			return value;
		} else {
			return this._singleValueFormattingEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::SingleValueFormattingEnabled()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.gaugeBands(new $.ig.Array());
		this.viewType($.ig.DashboardGaugeViewType.prototype.circular);
		this.singleValueFormattingEnabled(true);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.viewType(other.viewType());
		this.minimum($.ig.CloneUtils.prototype.cloneObject(other.minimum()));
		this.maximum($.ig.CloneUtils.prototype.cloneObject(other.maximum()));
		this.gaugeBands($.ig.CloneListUtils.prototype.cloneList(other.gaugeBands(), new $.ig.Array()));
		this.valueColumnName(other.valueColumnName());
		this.labelColumnName(other.labelColumnName());
		this.targetColumnName(other.targetColumnName());
		this.singleValueFormattingEnabled(other.singleValueFormattingEnabled());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.viewType($.ig.DashboardEnumDeserialization.prototype.readGaugeViewType($.ig.JsonUtility.prototype.loadString(json, "ViewType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Minimum")) {
			this.minimum(new $.ig.Bound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Minimum"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Maximum")) {
			this.maximum(new $.ig.Bound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Maximum"])));
		}
		this.gaugeBands(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "GaugeBands")) {
			var jsonGaugeBands = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "GaugeBands");
			var jsonListSize = jsonGaugeBands.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.gaugeBands().add(new $.ig.GaugeBand(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonGaugeBands[i])));
			}
		}
		this.valueColumnName($.ig.JsonUtility.prototype.loadString(json, "ValueColumnName"));
		this.labelColumnName($.ig.JsonUtility.prototype.loadString(json, "LabelColumnName"));
		this.targetColumnName($.ig.JsonUtility.prototype.loadString(json, "TargetColumnName"));
		this.singleValueFormattingEnabled($.ig.JsonUtility.prototype.loadBool1(json, "SingleValueFormattingEnabled", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.GaugeVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "ViewType", $.ig.DashboardEnumSerialization.prototype.writeGaugeViewType(this.viewType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Minimum", this.minimum());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Maximum", this.maximum());
		$.ig.JsonUtility.prototype.saveContainer(json, "GaugeBands", this.gaugeBands());
		$.ig.JsonUtility.prototype.saveObject(json, "ValueColumnName", this.valueColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelColumnName", this.labelColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "TargetColumnName", this.targetColumnName());
		$.ig.JsonUtility.prototype.saveBool(json, "SingleValueFormattingEnabled", this.singleValueFormattingEnabled());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('GaugeVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GaugeVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem" />*/

$.ig.util.defType('GlobalFilterSelectedItem', 'Object', {
	_fieldValues: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::FieldValues()" />*/
	fieldValues: function (value) {
		if (arguments.length === 1) {
			this._fieldValues = value;
			return value;
		} else {
			return this._fieldValues;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::FieldValues()" />*/
	,
	_expansionPath: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::ExpansionPath()" />*/
	expansionPath: function (value) {
		if (arguments.length === 1) {
			this._expansionPath = value;
			return value;
		} else {
			return this._expansionPath;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::ExpansionPath()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.fieldValues(new $.ig.NativeTypedDictionary());
		this.expansionPath(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.fieldValues($.ig.CloneUtils.prototype.cloneDictionary(other.fieldValues()));
		this.expansionPath($.ig.CloneListUtils.prototype.cloneList(other.expansionPath(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.fieldValues($.ig.JsonUtility.prototype.loadTypedDictionary(json, "FieldValues"));
		this.expansionPath($.ig.JsonUtility.prototype.loadStringList(json, "ExpansionPath"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::Clone()" />*/
	clone: function () {
		return new $.ig.GlobalFilterSelectedItem(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveContainer(json, "FieldValues", this.fieldValues());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpansionPath", this.expansionPath());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.GlobalFilterSelectedItem(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('GlobalFilterSelectedItem', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GlobalFilterSelectedItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget" />*/

$.ig.util.defType('GlobalVariableBindingTarget', 'BindingTarget', {
	_globalVariableName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::GlobalVariableName()" />*/
	globalVariableName: function (value) {
		if (arguments.length === 1) {
			this._globalVariableName = value;
			return value;
		} else {
			return this._globalVariableName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::GlobalVariableName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BindingTarget.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BindingTarget.prototype.init1.call(this, 1, other);
		this.globalVariableName(other.globalVariableName());
	},
	init2: function (initNumber, json) {
		$.ig.BindingTarget.prototype.init2.call(this, 2, json);
		this.globalVariableName($.ig.JsonUtility.prototype.loadString(json, "GlobalVariableName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::Clone()" />*/
	clone: function () {
		return new $.ig.GlobalVariableBindingTarget(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "GlobalVariableName", this.globalVariableName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget::ToJson()" />*/
	,
	$type: new $.ig.Type('GlobalVariableBindingTarget', $.ig.BindingTarget.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GlobalVariableBindingTarget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GlobalVariable" />*/

$.ig.util.defType('GlobalVariable', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalVariable::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.GlobalVariable::Name()" />*/
	,
	_isHidden: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GlobalVariable::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			this._isHidden = value;
			return value;
		} else {
			return this._isHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GlobalVariable::IsHidden()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType Infragistics.ReportPlus.DashboardModel.GlobalVariable::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType Infragistics.ReportPlus.DashboardModel.GlobalVariable::Type()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariable::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariable::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.type($.ig.DashboardGlobalVariableValueType.prototype.string1);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.name(other.name());
		this.isHidden(other.isHidden());
		this.type(other.type());
		this.value($.ig.CloneUtils.prototype.cloneObject(other.value()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.isHidden($.ig.JsonUtility.prototype.loadBool(json, "IsHidden"));
		this.type($.ig.DashboardEnumDeserialization.prototype.readGlobalVariableValueType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.value($.ig.JsonUtility.prototype.loadObject(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariable::Clone()" />*/
	clone: function () {
		return new $.ig.GlobalVariable(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GlobalVariable::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalVariable::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveBool(json, "IsHidden", this.isHidden());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeGlobalVariableValueType(this.type()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GlobalVariable::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalVariable Infragistics.ReportPlus.DashboardModel.GlobalVariable::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.GlobalVariable(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalVariable Infragistics.ReportPlus.DashboardModel.GlobalVariable::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('GlobalVariable', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GlobalVariable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec" />*/

$.ig.util.defType('GridVisualizationDataSpec', 'VisualizationDataSpec', {
	_columns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::Columns()" />*/
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::Columns()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationDataSpec.prototype.init.call(this, 0);
		this.columns(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.columns($.ig.CloneListUtils.prototype.cloneList(other.columns(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.columns(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Columns")) {
			var jsonColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Columns");
			var jsonListSize = jsonColumns.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.columns().add(new $.ig.TabularColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonColumns[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.GridVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "Columns", this.columns());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.columns() == null || this.columns().length == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addTabularColumns(list, this.columns(), $.ig.VisualizationDataSpec.prototype.gridColumnsSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.gridColumnsSection, -1, false, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		this.columns().add(column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		this.columns().insert(position, column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		var count = this.columns().length;
		for (var i = 0; i < count; i++) {
			if ((this.columns()[i]).identifier() == identifier) {
				this.columns().removeAt(i);
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		return $.ig.VisualizationDataSpec.prototype.removeDuplicatedColumns(columns);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('GridVisualizationDataSpec', $.ig.VisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings" />*/

$.ig.util.defType('GridVisualizationSettings', 'VisualizationSettings', {
	_hideGrandTotals: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::HideGrandTotals()" />*/
	hideGrandTotals: function (value) {
		if (arguments.length === 1) {
			this._hideGrandTotals = value;
			return value;
		} else {
			return this._hideGrandTotals;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::HideGrandTotals()" />*/
	,
	_fontSize: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::FontSize()" />*/
	fontSize: function (value) {
		if (arguments.length === 1) {
			this._fontSize = value;
			return value;
		} else {
			return this._fontSize;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::FontSize()" />*/
	,
	_style: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::Style()" />*/
	style: function (value) {
		if (arguments.length === 1) {
			this._style = value;
			return value;
		} else {
			return this._style;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::Style()" />*/
	,
	_visualizationColumns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::VisualizationColumns()" />*/
	visualizationColumns: function (value) {
		if (arguments.length === 1) {
			this._visualizationColumns = value;
			return value;
		} else {
			return this._visualizationColumns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::VisualizationColumns()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.visualizationColumns(new $.ig.Array());
		this.fontSize($.ig.DashboardFontSizeType.prototype.small);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.hideGrandTotals(other.hideGrandTotals());
		this.fontSize(other.fontSize());
		this.style($.ig.CloneUtils.prototype.cloneObject(other.style()));
		this.visualizationColumns($.ig.CloneListUtils.prototype.cloneList(other.visualizationColumns(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.hideGrandTotals($.ig.JsonUtility.prototype.loadBool(json, "HideGrandTotals"));
		this.fontSize($.ig.DashboardEnumDeserialization.prototype.readFontSizeType($.ig.JsonUtility.prototype.loadString(json, "FontSize")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Style")) {
			this.style(new $.ig.GridVisualizationStyle(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Style"])));
		}
		this.visualizationColumns(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "VisualizationColumns")) {
			var jsonVisualizationColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "VisualizationColumns");
			var jsonListSize = jsonVisualizationColumns.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.visualizationColumns().add(new $.ig.VisualizationColumnStyle(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonVisualizationColumns[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.GridVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "HideGrandTotals", this.hideGrandTotals());
		$.ig.JsonUtility.prototype.saveObject(json, "FontSize", $.ig.DashboardEnumSerialization.prototype.writeFontSizeType(this.fontSize()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Style", this.style());
		$.ig.JsonUtility.prototype.saveContainer(json, "VisualizationColumns", this.visualizationColumns());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('GridVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle" />*/

$.ig.util.defType('GridVisualizationStyle', 'Object', {
	_fixedLeftColumns: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::FixedLeftColumns()" />*/
	fixedLeftColumns: function (value) {
		if (arguments.length === 1) {
			this._fixedLeftColumns = value;
			return value;
		} else {
			return this._fixedLeftColumns;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::FixedLeftColumns()" />*/
	,
	_textAlignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::TextAlignment()" />*/
	textAlignment: function (value) {
		if (arguments.length === 1) {
			this._textAlignment = value;
			return value;
		} else {
			return this._textAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::TextAlignment()" />*/
	,
	_numericAlignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::NumericAlignment()" />*/
	numericAlignment: function (value) {
		if (arguments.length === 1) {
			this._numericAlignment = value;
			return value;
		} else {
			return this._numericAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::NumericAlignment()" />*/
	,
	_dateAlignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::DateAlignment()" />*/
	dateAlignment: function (value) {
		if (arguments.length === 1) {
			this._dateAlignment = value;
			return value;
		} else {
			return this._dateAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::DateAlignment()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.textAlignment($.ig.DashboardTextAlignment.prototype.inherit);
		this.numericAlignment($.ig.DashboardTextAlignment.prototype.inherit);
		this.dateAlignment($.ig.DashboardTextAlignment.prototype.inherit);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.fixedLeftColumns(other.fixedLeftColumns());
		this.textAlignment(other.textAlignment());
		this.numericAlignment(other.numericAlignment());
		this.dateAlignment(other.dateAlignment());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.fixedLeftColumns($.ig.JsonUtility.prototype.loadBool(json, "FixedLeftColumns"));
		this.textAlignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "TextAlignment")));
		this.numericAlignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "NumericAlignment")));
		this.dateAlignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "DateAlignment")));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::Clone()" />*/
	clone: function () {
		return new $.ig.GridVisualizationStyle(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveBool(json, "FixedLeftColumns", this.fixedLeftColumns());
		$.ig.JsonUtility.prototype.saveObject(json, "TextAlignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.textAlignment()));
		$.ig.JsonUtility.prototype.saveObject(json, "NumericAlignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.numericAlignment()));
		$.ig.JsonUtility.prototype.saveObject(json, "DateAlignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.dateAlignment()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.GridVisualizationStyle(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('GridVisualizationStyle', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.GridVisualizationStyle" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings" />*/

$.ig.util.defType('HeatMapLayersSettings', 'Object', {
	_pinsLayerEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::PinsLayerEnabled()" />*/
	pinsLayerEnabled: function (value) {
		if (arguments.length === 1) {
			this._pinsLayerEnabled = value;
			return value;
		} else {
			return this._pinsLayerEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::PinsLayerEnabled()" />*/
	,
	_heatMapLayerEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::HeatMapLayerEnabled()" />*/
	heatMapLayerEnabled: function (value) {
		if (arguments.length === 1) {
			this._heatMapLayerEnabled = value;
			return value;
		} else {
			return this._heatMapLayerEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::HeatMapLayerEnabled()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.pinsLayerEnabled(true);
		this.heatMapLayerEnabled(false);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.pinsLayerEnabled(other.pinsLayerEnabled());
		this.heatMapLayerEnabled(other.heatMapLayerEnabled());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.pinsLayerEnabled($.ig.JsonUtility.prototype.loadBool1(json, "PinsLayerEnabled", true));
		this.heatMapLayerEnabled($.ig.JsonUtility.prototype.loadBool1(json, "HeatMapLayerEnabled", false));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::Clone()" />*/
	clone: function () {
		return new $.ig.HeatMapLayersSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveBool(json, "PinsLayerEnabled", this.pinsLayerEnabled());
		$.ig.JsonUtility.prototype.saveBool(json, "HeatMapLayerEnabled", this.heatMapLayerEnabled());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.HeatMapLayersSettings(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('HeatMapLayersSettings', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings" />*/

$.ig.util.defType('MapBaseVisualizationSettings', 'VisualizationSettings', {
	_mapType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::MapType()" />*/
	mapType: function (value) {
		if (arguments.length === 1) {
			this._mapType = value;
			return value;
		} else {
			return this._mapType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::MapType()" />*/
	,
	_latitudeColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LatitudeColumnName()" />*/
	latitudeColumnName: function (value) {
		if (arguments.length === 1) {
			this._latitudeColumnName = value;
			return value;
		} else {
			return this._latitudeColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LatitudeColumnName()" />*/
	,
	_longitudeColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LongitudeColumnName()" />*/
	longitudeColumnName: function (value) {
		if (arguments.length === 1) {
			this._longitudeColumnName = value;
			return value;
		} else {
			return this._longitudeColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LongitudeColumnName()" />*/
	,
	_latitudeLongitudeColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LatitudeLongitudeColumnName()" />*/
	latitudeLongitudeColumnName: function (value) {
		if (arguments.length === 1) {
			this._latitudeLongitudeColumnName = value;
			return value;
		} else {
			return this._latitudeLongitudeColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::LatitudeLongitudeColumnName()" />*/
	,
	_displayColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayColumnName()" />*/
	displayColumnName: function (value) {
		if (arguments.length === 1) {
			this._displayColumnName = value;
			return value;
		} else {
			return this._displayColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayColumnName()" />*/
	,
	_displayValueColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayValueColumnName()" />*/
	displayValueColumnName: function (value) {
		if (arguments.length === 1) {
			this._displayValueColumnName = value;
			return value;
		} else {
			return this._displayValueColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayValueColumnName()" />*/
	,
	_displayValueColor: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayValueColor()" />*/
	displayValueColor: function (value) {
		if (arguments.length === 1) {
			this._displayValueColor = value;
			return value;
		} else {
			return this._displayValueColor;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::DisplayValueColor()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.mapType($.ig.DashboardMapVisualizationType.prototype.standard);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.mapType(other.mapType());
		this.latitudeColumnName(other.latitudeColumnName());
		this.longitudeColumnName(other.longitudeColumnName());
		this.latitudeLongitudeColumnName(other.latitudeLongitudeColumnName());
		this.displayColumnName(other.displayColumnName());
		this.displayValueColumnName(other.displayValueColumnName());
		this.displayValueColor(other.displayValueColor());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.mapType($.ig.DashboardEnumDeserialization.prototype.readMapVisualizationType($.ig.JsonUtility.prototype.loadString(json, "MapType")));
		this.latitudeColumnName($.ig.JsonUtility.prototype.loadString(json, "LatitudeColumnName"));
		this.longitudeColumnName($.ig.JsonUtility.prototype.loadString(json, "LongitudeColumnName"));
		this.latitudeLongitudeColumnName($.ig.JsonUtility.prototype.loadString(json, "LatitudeLongitudeColumnName"));
		this.displayColumnName($.ig.JsonUtility.prototype.loadString(json, "DisplayColumnName"));
		this.displayValueColumnName($.ig.JsonUtility.prototype.loadString(json, "DisplayValueColumnName"));
		this.displayValueColor($.ig.JsonUtility.prototype.loadString(json, "DisplayValueColor"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('MapBaseVisualizationSettings', $.ig.VisualizationSettings.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.MapBaseVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings" />*/

$.ig.util.defType('HeatMapVisualizationSettings', 'MapBaseVisualizationSettings', {
	_locationType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::LocationType()" />*/
	locationType: function (value) {
		if (arguments.length === 1) {
			this._locationType = value;
			return value;
		} else {
			return this._locationType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::LocationType()" />*/
	,
	_layers: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::Layers()" />*/
	layers: function (value) {
		if (arguments.length === 1) {
			this._layers = value;
			return value;
		} else {
			return this._layers;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.HeatMapLayersSettings Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::Layers()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.MapBaseVisualizationSettings.prototype.init.call(this, 0);
		this.locationType($.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField);
	},
	init1: function (initNumber, other) {
		$.ig.MapBaseVisualizationSettings.prototype.init1.call(this, 1, other);
		this.locationType(other.locationType());
		this.layers($.ig.CloneUtils.prototype.cloneObject(other.layers()));
	},
	init2: function (initNumber, json) {
		$.ig.MapBaseVisualizationSettings.prototype.init2.call(this, 2, json);
		this.locationType($.ig.DashboardEnumDeserialization.prototype.readHeatMapLocationType($.ig.JsonUtility.prototype.loadString(json, "LocationType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Layers")) {
			this.layers(new $.ig.HeatMapLayersSettings(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Layers"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.HeatMapVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "MapType", $.ig.DashboardEnumSerialization.prototype.writeMapVisualizationType(this.mapType()));
		$.ig.JsonUtility.prototype.saveObject(json, "LatitudeColumnName", this.latitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "LongitudeColumnName", this.longitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "LatitudeLongitudeColumnName", this.latitudeLongitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayColumnName", this.displayColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayValueColumnName", this.displayValueColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayValueColor", this.displayValueColor());
		$.ig.JsonUtility.prototype.saveObject(json, "LocationType", $.ig.DashboardEnumSerialization.prototype.writeHeatMapLocationType(this.locationType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Layers", this.layers());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('HeatMapVisualizationSettings', $.ig.MapBaseVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.HeatMapVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec" />*/

$.ig.util.defType('IndicatorBaseVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_date: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Date()" />*/
	date: function (value) {
		if (arguments.length === 1) {
			this._date = value;
			return value;
		} else {
			return this._date;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Date()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.value(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.date($.ig.CloneUtils.prototype.cloneObject(other.date()));
		this.value($.ig.CloneListUtils.prototype.cloneList(other.value(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Date")) {
			this.date(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Date"])));
		}
		this.value(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Value")) {
			var jsonValue = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Value");
			var jsonListSize = jsonValue.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.value().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValue[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.IndicatorBaseVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Date", this.date());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec::ToJson()" />*/
	,
	$type: new $.ig.Type('IndicatorBaseVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IndicatorBaseVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec" />*/

$.ig.util.defType('IndicatorTargetVisualizationDataSpec', 'IndicatorBaseVisualizationDataSpec', {
	_target: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::Target()" />*/
	target: function (value) {
		if (arguments.length === 1) {
			this._target = value;
			return value;
		} else {
			return this._target;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::Target()" />*/
	,
	_dateFilterType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::DateFilterType()" />*/
	dateFilterType: function (value) {
		if (arguments.length === 1) {
			this._dateFilterType = value;
			return value;
		} else {
			return this._dateFilterType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::DateFilterType()" />*/
	,
	_customDateRange: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::CustomDateRange()" />*/
	customDateRange: function (value) {
		if (arguments.length === 1) {
			this._customDateRange = value;
			return value;
		} else {
			return this._customDateRange;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::CustomDateRange()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init.call(this, 0);
		this.target(new $.ig.Array());
		this.dateFilterType($.ig.DashboardIndicatorTargetDateFilterType.prototype.yearToDate);
	},
	init1: function (initNumber, other) {
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.target($.ig.CloneListUtils.prototype.cloneList(other.target(), new $.ig.Array()));
		this.dateFilterType(other.dateFilterType());
		this.customDateRange($.ig.CloneUtils.prototype.cloneObject(other.customDateRange()));
	},
	init2: function (initNumber, json) {
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.target(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Target")) {
			var jsonTarget = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Target");
			var jsonListSize = jsonTarget.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.target().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonTarget[i])));
			}
		}
		this.dateFilterType($.ig.DashboardEnumDeserialization.prototype.readIndicatorTargetDateFilterType($.ig.JsonUtility.prototype.loadString(json, "DateFilterType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CustomDateRange")) {
			this.customDateRange(new $.ig.DateRange(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["CustomDateRange"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.IndicatorTargetVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Date", this.date());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveContainer(json, "Target", this.target());
		$.ig.JsonUtility.prototype.saveObject(json, "DateFilterType", $.ig.DashboardEnumSerialization.prototype.writeIndicatorTargetDateFilterType(this.dateFilterType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "CustomDateRange", this.customDateRange());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.IndicatorBaseVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.date(), $.ig.VisualizationDataSpec.prototype.dateSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.target(), $.ig.VisualizationDataSpec.prototype.targetSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.dateSection, 1, false, false, true, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.targetSection, 1, true, false, false, false, dataSpec.isXmla()));
		var lblSection = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, dataSpec.isTabular(), false, true, dataSpec.isXmla());
		lblSection.sectionLocalizationKey($.ig.VisualizationDataSpec.prototype.categorySection);
		list.add(lblSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			this.date(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			this.target().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.IndicatorBaseVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			var index = this.date() == null ? -1 : 0;
			this.date(null);
			return index;
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			return this.removeFromMeasures(this.value(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			return this.removeFromMeasures(this.target(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.IndicatorBaseVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			this.addColumn(section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			this.target().insert(position < 0 || position > this.target().length ? this.target().length : position, column);
		} else {
			$.ig.IndicatorBaseVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.date() == null || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1 || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.target()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addDateColumn($.ig.VisualizationDataSpec.prototype.dateSection, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.targetSection, columns, 1);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection);
		if (this.labels().length == 0) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.gridColumnsSection, 1);
		}
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('IndicatorTargetVisualizationDataSpec', $.ig.IndicatorBaseVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings" />*/

$.ig.util.defType('IndicatorVisualizationSettings', 'VisualizationSettings', {
	_differenceMode: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::DifferenceMode()" />*/
	differenceMode: function (value) {
		if (arguments.length === 1) {
			this._differenceMode = value;
			return value;
		} else {
			return this._differenceMode;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::DifferenceMode()" />*/
	,
	_positiveIsRed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::PositiveIsRed()" />*/
	positiveIsRed: function (value) {
		if (arguments.length === 1) {
			this._positiveIsRed = value;
			return value;
		} else {
			return this._positiveIsRed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::PositiveIsRed()" />*/
	,
	_includeToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::IncludeToday()" />*/
	includeToday: function (value) {
		if (arguments.length === 1) {
			this._includeToday = value;
			return value;
		} else {
			return this._includeToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::IncludeToday()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.differenceMode($.ig.DashboardIndicatorDifferenceMode.prototype.percentage);
		this.includeToday(true);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.differenceMode(other.differenceMode());
		this.positiveIsRed(other.positiveIsRed());
		this.includeToday(other.includeToday());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.differenceMode($.ig.DashboardEnumDeserialization.prototype.readIndicatorDifferenceMode($.ig.JsonUtility.prototype.loadString(json, "DifferenceMode")));
		this.positiveIsRed($.ig.JsonUtility.prototype.loadBool(json, "PositiveIsRed"));
		this.includeToday($.ig.JsonUtility.prototype.loadBool1(json, "IncludeToday", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.IndicatorVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "DifferenceMode", $.ig.DashboardEnumSerialization.prototype.writeIndicatorDifferenceMode(this.differenceMode()));
		$.ig.JsonUtility.prototype.saveBool(json, "PositiveIsRed", this.positiveIsRed());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeToday", this.includeToday());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('IndicatorVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings" />*/

$.ig.util.defType('IndicatorTargetVisualizationSettings', 'IndicatorVisualizationSettings', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.IndicatorVisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.IndicatorVisualizationSettings.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.IndicatorVisualizationSettings.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.IndicatorTargetVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "DifferenceMode", $.ig.DashboardEnumSerialization.prototype.writeIndicatorDifferenceMode(this.differenceMode()));
		$.ig.JsonUtility.prototype.saveBool(json, "PositiveIsRed", this.positiveIsRed());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeToday", this.includeToday());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('IndicatorTargetVisualizationSettings', $.ig.IndicatorVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IndicatorTargetVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec" />*/

$.ig.util.defType('IndicatorVisualizationDataSpec', 'IndicatorBaseVisualizationDataSpec', {
	_indicatorType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::IndicatorType()" />*/
	indicatorType: function (value) {
		if (arguments.length === 1) {
			this._indicatorType = value;
			return value;
		} else {
			return this._indicatorType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::IndicatorType()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init.call(this, 0);
		this.indicatorType($.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear);
	},
	init1: function (initNumber, other) {
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.indicatorType(other.indicatorType());
	},
	init2: function (initNumber, json) {
		$.ig.IndicatorBaseVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.indicatorType($.ig.DashboardEnumDeserialization.prototype.readIndicatorVisualizationType($.ig.JsonUtility.prototype.loadString(json, "IndicatorType")));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.IndicatorVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Date", this.date());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "IndicatorType", $.ig.DashboardEnumSerialization.prototype.writeIndicatorVisualizationType(this.indicatorType()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.IndicatorBaseVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.date(), $.ig.VisualizationDataSpec.prototype.dateSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.dateSection, 1, false, false, true, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		var lblSection = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, dataSpec.isTabular(), false, true, dataSpec.isXmla());
		lblSection.sectionLocalizationKey($.ig.VisualizationDataSpec.prototype.categorySection);
		list.add(lblSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			this.date(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.IndicatorBaseVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			var index = this.date() == null ? -1 : 0;
			this.date(null);
			return index;
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			return this.removeFromMeasures(this.value(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.IndicatorBaseVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.dateSection) {
			this.addColumn(section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
		} else {
			$.ig.IndicatorBaseVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.date() == null || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addDateColumn($.ig.VisualizationDataSpec.prototype.dateSection, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection);
		if (this.labels().length == 0) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.gridColumnsSection, 1);
		}
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('IndicatorVisualizationDataSpec', $.ig.IndicatorBaseVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.IndicatorVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.JoinCondition" />*/

$.ig.util.defType('JoinCondition', 'Object', {
	_leftFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.JoinCondition::LeftFieldName()" />*/
	leftFieldName: function (value) {
		if (arguments.length === 1) {
			this._leftFieldName = value;
			return value;
		} else {
			return this._leftFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.JoinCondition::LeftFieldName()" />*/
	,
	_rightFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.JoinCondition::RightFieldName()" />*/
	rightFieldName: function (value) {
		if (arguments.length === 1) {
			this._rightFieldName = value;
			return value;
		} else {
			return this._rightFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.JoinCondition::RightFieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.leftFieldName(other.leftFieldName());
		this.rightFieldName(other.rightFieldName());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.leftFieldName($.ig.JsonUtility.prototype.loadString(json, "LeftFieldName"));
		this.rightFieldName($.ig.JsonUtility.prototype.loadString(json, "RightFieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.JoinCondition::Clone()" />*/
	clone: function () {
		return new $.ig.JoinCondition(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.JoinCondition::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.JoinCondition::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "LeftFieldName", this.leftFieldName());
		$.ig.JsonUtility.prototype.saveObject(json, "RightFieldName", this.rightFieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.JoinCondition::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.JoinCondition Infragistics.ReportPlus.DashboardModel.JoinCondition::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.JoinCondition(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.JoinCondition Infragistics.ReportPlus.DashboardModel.JoinCondition::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('JoinCondition', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.JoinCondition" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec" />*/

$.ig.util.defType('LinearGaugeVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_value: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Value()" />*/
	,
	_target: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Target()" />*/
	target: function (value) {
		if (arguments.length === 1) {
			this._target = value;
			return value;
		} else {
			return this._target;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Target()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.value(new $.ig.Array());
		this.target(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.value($.ig.CloneListUtils.prototype.cloneList(other.value(), new $.ig.Array()));
		this.target($.ig.CloneListUtils.prototype.cloneList(other.target(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.value(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Value")) {
			var jsonValue = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Value");
			var jsonListSize = jsonValue.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.value().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValue[i])));
			}
		}
		this.target(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Target")) {
			var jsonTarget = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Target");
			var jsonListSize1 = jsonTarget.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.target().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonTarget[i1])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.LinearGaugeVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveContainer(json, "Target", this.target());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.target(), $.ig.VisualizationDataSpec.prototype.targetSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		if (($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, settings) !== null) && (settings).viewType() == $.ig.DashboardGaugeViewType.prototype.bulletGraph) {
			list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.targetSection, 1, true, false, false, true, dataSpec.isXmla()));
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			this.target().add(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			this.target().insert(position < 0 || position > this.target().length ? this.target().length : position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			return this.removeFromMeasures(this.value(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.targetSection) {
			return this.removeFromMeasures(this.target(), identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.targetSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('LinearGaugeVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.LinearGaugeVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation" />*/

$.ig.util.defType('LinearRegressionTransformation', 'PostTransformation', {
	_periodsToForecast: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::PeriodsToForecast()" />*/
	periodsToForecast: function (value) {
		if (arguments.length === 1) {
			this._periodsToForecast = value;
			return value;
		} else {
			return this._periodsToForecast;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::PeriodsToForecast()" />*/
	,
	_includeBounds: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::IncludeBounds()" />*/
	includeBounds: function (value) {
		if (arguments.length === 1) {
			this._includeBounds = value;
			return value;
		} else {
			return this._includeBounds;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::IncludeBounds()" />*/
	,
	_displayR2: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::DisplayR2()" />*/
	displayR2: function (value) {
		if (arguments.length === 1) {
			this._displayR2 = value;
			return value;
		} else {
			return this._displayR2;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::DisplayR2()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PostTransformation.prototype.init.call(this, 0);
		this.periodsToForecast(0);
	},
	init1: function (initNumber, other) {
		$.ig.PostTransformation.prototype.init1.call(this, 1, other);
		this.periodsToForecast(other.periodsToForecast());
		this.includeBounds(other.includeBounds());
		this.displayR2(other.displayR2());
	},
	init2: function (initNumber, json) {
		$.ig.PostTransformation.prototype.init2.call(this, 2, json);
		this.periodsToForecast($.ig.JsonUtility.prototype.loadInt1(json, "PeriodsToForecast", 0));
		this.includeBounds($.ig.JsonUtility.prototype.loadBool(json, "IncludeBounds"));
		this.displayR2($.ig.JsonUtility.prototype.loadBool(json, "DisplayR2"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::Clone()" />*/
	clone: function () {
		return new $.ig.LinearRegressionTransformation(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveInt(json, "PeriodsToForecast", this.periodsToForecast());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeBounds", this.includeBounds());
		$.ig.JsonUtility.prototype.saveBool(json, "DisplayR2", this.displayR2());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation::ToJson()" />*/
	,
	$type: new $.ig.Type('LinearRegressionTransformation', $.ig.PostTransformation.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.LinearRegressionTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings" />*/

$.ig.util.defType('MapVisualizationSettings', 'MapBaseVisualizationSettings', {
	_locationType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::LocationType()" />*/
	locationType: function (value) {
		if (arguments.length === 1) {
			this._locationType = value;
			return value;
		} else {
			return this._locationType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::LocationType()" />*/
	,
	_geolocationColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::GeolocationColumnName()" />*/
	geolocationColumnName: function (value) {
		if (arguments.length === 1) {
			this._geolocationColumnName = value;
			return value;
		} else {
			return this._geolocationColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::GeolocationColumnName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.MapBaseVisualizationSettings.prototype.init.call(this, 0);
		this.locationType($.ig.DashboardMapLocationType.prototype.geocoding);
	},
	init1: function (initNumber, other) {
		$.ig.MapBaseVisualizationSettings.prototype.init1.call(this, 1, other);
		this.locationType(other.locationType());
		this.geolocationColumnName(other.geolocationColumnName());
	},
	init2: function (initNumber, json) {
		$.ig.MapBaseVisualizationSettings.prototype.init2.call(this, 2, json);
		this.locationType($.ig.DashboardEnumDeserialization.prototype.readMapLocationType($.ig.JsonUtility.prototype.loadString(json, "LocationType")));
		this.geolocationColumnName($.ig.JsonUtility.prototype.loadString(json, "GeolocationColumnName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.MapVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "MapType", $.ig.DashboardEnumSerialization.prototype.writeMapVisualizationType(this.mapType()));
		$.ig.JsonUtility.prototype.saveObject(json, "LatitudeColumnName", this.latitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "LongitudeColumnName", this.longitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "LatitudeLongitudeColumnName", this.latitudeLongitudeColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayColumnName", this.displayColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayValueColumnName", this.displayValueColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayValueColor", this.displayValueColor());
		$.ig.JsonUtility.prototype.saveObject(json, "LocationType", $.ig.DashboardEnumSerialization.prototype.writeMapLocationType(this.locationType()));
		$.ig.JsonUtility.prototype.saveObject(json, "GeolocationColumnName", this.geolocationColumnName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('MapVisualizationSettings', $.ig.MapBaseVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.MapVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec" />*/

$.ig.util.defType('MeasureColumnSpec', 'BaseColumnSpec', {
	_summarizationField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SummarizationField()" />*/
	summarizationField: function (value) {
		if (arguments.length === 1) {
			this._summarizationField = value;
			return value;
		} else {
			return this._summarizationField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SummarizationField()" />*/
	,
	_xmlaMeasure: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::XmlaMeasure()" />*/
	xmlaMeasure: function (value) {
		if (arguments.length === 1) {
			this._xmlaMeasure = value;
			return value;
		} else {
			return this._xmlaMeasure;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::XmlaMeasure()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseColumnSpec.prototype.init1.call(this, 1, other);
		this.summarizationField($.ig.CloneUtils.prototype.cloneObject(other.summarizationField()));
		this.xmlaMeasure($.ig.CloneUtils.prototype.cloneObject(other.xmlaMeasure()));
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseColumnSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "SummarizationField")) {
			this.summarizationField(new $.ig.SummarizationValueField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SummarizationField"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "XmlaMeasure")) {
			this.xmlaMeasure(new $.ig.XmlaMeasure(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["XmlaMeasure"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Clone()" />*/
	clone: function () {
		return new $.ig.MeasureColumnSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SummarizationField", this.summarizationField());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaMeasure", this.xmlaMeasure());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::ToJson()" />*/
	,
	init3: function (initNumber, location, measure) {
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
		this.location(location);
		this.xmlaMeasure(measure);
	},
	init4: function (initNumber, location, field, valueField) {
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
		this.location(location);
		this.tabularField(field);
		this.summarizationField(valueField);
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec)" />*/
	copyAdditionalProperties: function (other) {
		this.location(other.location());
		this.tabularField(other.tabularField() == null ? null : other.tabularField().clone());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Name()" />*/
	name: function () {
		if (this.xmlaMeasure() != null) {
			return this.xmlaMeasure().caption();
		} else if (this.summarizationField() != null) {
			return this.summarizationField().fieldName();
		} else if (this.tabularField() != null) {
			return this.tabularField().fieldName();
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Name()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().userCaption(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().fieldLabel(value);
			} else if (this.tabularField() != null) {
				this.tabularField().fieldLabel(value);
			}
			return value;
		} else {
			if (this.xmlaMeasure() != null) {
				return ($.ig.BaseColumnSpec.prototype.stringIsNullOrEmpty(this.xmlaMeasure().userCaption()) ? this.xmlaMeasure().caption() : this.xmlaMeasure().userCaption());
			} else if (this.summarizationField() != null) {
				return this.summarizationField().fieldLabel();
			} else if (this.tabularField() != null) {
				return $.ig.BaseColumnSpec.prototype.stringIsNullOrEmpty(this.tabularField().fieldLabel()) ? this.tabularField().fieldName() : this.tabularField().fieldLabel();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Label()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Description()" />*/
	description: function () {
		return this.summarizationField() == null ? null : $.ig.DashboardEnumSerialization.prototype.writeAggregationType(this.summarizationField().aggregationType());
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Description()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return $.ig.DashboardDataType.prototype.number;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Type()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DisplayType()" />*/
	displayType: function () {
		return this.tabularField() == null ? $.ig.DashboardDataType.prototype.number : this.tabularField().fieldType();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DisplayType()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Identifier()" />*/
	identifier: function () {
		return this.summarizationField() == null ? (this.xmlaMeasure() == null ? null : this.xmlaMeasure().uniqueName()) : this.summarizationField().fieldName();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Identifier()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Aggregation()" />*/
	aggregation: function (value) {
		if (arguments.length === 1) {
			if (this.summarizationField() != null) {
				this.summarizationField().aggregationType(value);
			}
			return value;
		} else {
			return this.summarizationField() == null ? $.ig.DashboardAggregationType.prototype.auto : this.summarizationField().aggregationType();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Aggregation()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DateAggregation()" />*/
	dateAggregation: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return $.ig.DashboardDateAggregationType.prototype.year;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return 0;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::DateFiscalYearStartMonth()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			if (this.summarizationField() != null) {
				this.summarizationField().filter(value);
			}
			return value;
		} else {
			if (this.summarizationField() != null) {
				return this.summarizationField().filter();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Filter()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			if (this.summarizationField() != null) {
				this.summarizationField().sorting(value);
			} else if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().sorting(value);
			}
			return value;
		} else {
			if (this.summarizationField() != null) {
				return this.summarizationField().sorting();
			} else if (this.xmlaMeasure() != null) {
				return this.xmlaMeasure().sorting();
			} else {
				return $.ig.DashboardSortingType.prototype.none;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Sorting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SortByField()" />*/
	sortByField: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SortByField()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().formatting(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().formatting(value);
			}
			return value;
		} else {
			if (this.xmlaMeasure() != null) {
				return this.xmlaMeasure().formatting();
			} else if (this.summarizationField() != null) {
				return this.summarizationField().formatting();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().conditionalFormatting(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().conditionalFormatting(value);
			}
			return value;
		} else {
			if (this.xmlaMeasure() != null) {
				return this.xmlaMeasure().conditionalFormatting();
			} else if (this.summarizationField() != null) {
				return this.summarizationField().conditionalFormatting();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().isHidden(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().isHidden(value);
			}
			return value;
		} else {
			return this.xmlaMeasure() != null ? this.xmlaMeasure().isHidden() : (this.summarizationField() != null ? this.summarizationField().isHidden() : false);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::IsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().isCalculated(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().isCalculated(value);
			}
			return value;
		} else {
			return this.xmlaMeasure() != null ? this.xmlaMeasure().isCalculated() : (this.summarizationField() != null ? this.summarizationField().isCalculated() : false);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::IsCalculated()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			if (this.xmlaMeasure() != null) {
				this.xmlaMeasure().expression(value);
			} else if (this.summarizationField() != null) {
				this.summarizationField().expression(value);
			}
			return value;
		} else {
			return this.xmlaMeasure() != null ? this.xmlaMeasure().expression() : (this.summarizationField() != null ? this.summarizationField().expression() : null);
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::Expression()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SortByCaption()" />*/
	sortByCaption: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec::SortByCaption()" />*/
	,
	$type: new $.ig.Type('MeasureColumnSpec', $.ig.BaseColumnSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.MLPostTransformation" />*/

$.ig.util.defType('MLPostTransformation', 'PostTransformation', {
	_dataProcessingTask: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.MLPostTransformation::DataProcessingTask()" />*/
	dataProcessingTask: function (value) {
		if (arguments.length === 1) {
			this._dataProcessingTask = value;
			return value;
		} else {
			return this._dataProcessingTask;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.MLPostTransformation::DataProcessingTask()" />*/
	,
	_appendResults: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MLPostTransformation::AppendResults()" />*/
	appendResults: function (value) {
		if (arguments.length === 1) {
			this._appendResults = value;
			return value;
		} else {
			return this._appendResults;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.MLPostTransformation::AppendResults()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PostTransformation.prototype.init.call(this, 0);
		this.appendResults(false);
	},
	init1: function (initNumber, other) {
		$.ig.PostTransformation.prototype.init1.call(this, 1, other);
		this.dataProcessingTask($.ig.CloneUtils.prototype.cloneObject(other.dataProcessingTask()));
		this.appendResults(other.appendResults());
	},
	init2: function (initNumber, json) {
		$.ig.PostTransformation.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataProcessingTask")) {
			this.dataProcessingTask($.ig.DataProcessingTask.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataProcessingTask"])));
		}
		this.appendResults($.ig.JsonUtility.prototype.loadBool1(json, "AppendResults", false));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MLPostTransformation::Clone()" />*/
	clone: function () {
		return new $.ig.MLPostTransformation(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.MLPostTransformation::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MLPostTransformation::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataProcessingTask", this.dataProcessingTask());
		$.ig.JsonUtility.prototype.saveBool(json, "AppendResults", this.appendResults());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.MLPostTransformation::ToJson()" />*/
	,
	$type: new $.ig.Type('MLPostTransformation', $.ig.PostTransformation.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.MLPostTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.NumberFilter" />*/

$.ig.util.defType('NumberFilter', 'Filter', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.NumberFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.NumberFilter::RuleType()" />*/
	,
	_value: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.NumberFilter::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.NumberFilter::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardNumberRuleType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readNumberRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		this.value($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.NumberFilter::Clone()" />*/
	clone: function () {
		return new $.ig.NumberFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.NumberFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.NumberFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeNumberRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.NumberFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('NumberFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.NumberFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec" />*/

$.ig.util.defType('NumberFormattingSpec', 'FormattingSpec', {
	_formatType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::FormatType()" />*/
	formatType: function (value) {
		if (arguments.length === 1) {
			this._formatType = value;
			return value;
		} else {
			return this._formatType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::FormatType()" />*/
	,
	_decimalDigits: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::DecimalDigits()" />*/
	decimalDigits: function (value) {
		if (arguments.length === 1) {
			this._decimalDigits = value;
			return value;
		} else {
			return this._decimalDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::DecimalDigits()" />*/
	,
	_showGroupingSeparator: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ShowGroupingSeparator()" />*/
	showGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			this._showGroupingSeparator = value;
			return value;
		} else {
			return this._showGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ShowGroupingSeparator()" />*/
	,
	_currencySymbol: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::CurrencySymbol()" />*/
	currencySymbol: function (value) {
		if (arguments.length === 1) {
			this._currencySymbol = value;
			return value;
		} else {
			return this._currencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::CurrencySymbol()" />*/
	,
	_negativeFormat: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::NegativeFormat()" />*/
	negativeFormat: function (value) {
		if (arguments.length === 1) {
			this._negativeFormat = value;
			return value;
		} else {
			return this._negativeFormat;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::NegativeFormat()" />*/
	,
	_applyMkFormat: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ApplyMkFormat()" />*/
	applyMkFormat: function (value) {
		if (arguments.length === 1) {
			this._applyMkFormat = value;
			return value;
		} else {
			return this._applyMkFormat;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ApplyMkFormat()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FormattingSpec.prototype.init.call(this, 0);
		this.formatType($.ig.DashboardNumberFormattingType.prototype.number);
		this.decimalDigits(2);
		this.currencySymbol("$");
		this.negativeFormat($.ig.DashboardNegativeFormatType.prototype.minusSign);
	},
	init1: function (initNumber, other) {
		$.ig.FormattingSpec.prototype.init1.call(this, 1, other);
		this.formatType(other.formatType());
		this.decimalDigits(other.decimalDigits());
		this.showGroupingSeparator(other.showGroupingSeparator());
		this.currencySymbol(other.currencySymbol());
		this.negativeFormat(other.negativeFormat());
		this.applyMkFormat(other.applyMkFormat());
	},
	init2: function (initNumber, json) {
		$.ig.FormattingSpec.prototype.init2.call(this, 2, json);
		this.formatType($.ig.DashboardEnumDeserialization.prototype.readNumberFormattingType($.ig.JsonUtility.prototype.loadString(json, "FormatType")));
		this.decimalDigits($.ig.JsonUtility.prototype.loadInt1(json, "DecimalDigits", 2));
		this.showGroupingSeparator($.ig.JsonUtility.prototype.loadBool(json, "ShowGroupingSeparator"));
		this.currencySymbol($.ig.JsonUtility.prototype.loadString(json, "CurrencySymbol"));
		this.negativeFormat($.ig.DashboardEnumDeserialization.prototype.readNegativeFormatType($.ig.JsonUtility.prototype.loadString(json, "NegativeFormat")));
		this.applyMkFormat($.ig.JsonUtility.prototype.loadBool(json, "ApplyMkFormat"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::Clone()" />*/
	clone: function () {
		return new $.ig.NumberFormattingSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FormatType", $.ig.DashboardEnumSerialization.prototype.writeNumberFormattingType(this.formatType()));
		$.ig.JsonUtility.prototype.saveInt(json, "DecimalDigits", this.decimalDigits());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowGroupingSeparator", this.showGroupingSeparator());
		$.ig.JsonUtility.prototype.saveObject(json, "CurrencySymbol", this.currencySymbol());
		$.ig.JsonUtility.prototype.saveObject(json, "NegativeFormat", $.ig.DashboardEnumSerialization.prototype.writeNegativeFormatType(this.negativeFormat()));
		$.ig.JsonUtility.prototype.saveBool(json, "ApplyMkFormat", this.applyMkFormat());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec::ToJson()" />*/
	,
	$type: new $.ig.Type('NumberFormattingSpec', $.ig.FormattingSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.NumberFormattingSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.OutliersTransformation" />*/

$.ig.util.defType('OutliersTransformation', 'PostTransformation', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PostTransformation.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.PostTransformation.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.PostTransformation.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.OutliersTransformation::Clone()" />*/
	clone: function () {
		return new $.ig.OutliersTransformation(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.OutliersTransformation::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.OutliersTransformation::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.OutliersTransformation::ToJson()" />*/
	,
	$type: new $.ig.Type('OutliersTransformation', $.ig.PostTransformation.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.OutliersTransformation" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter" />*/

$.ig.util.defType('ParameterBasedHierarchyGlobalFilter', 'HierarchicalGlobalFilter', {
	_expansionParameters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::ExpansionParameters()" />*/
	expansionParameters: function (value) {
		if (arguments.length === 1) {
			this._expansionParameters = value;
			return value;
		} else {
			return this._expansionParameters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::ExpansionParameters()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HierarchicalGlobalFilter.prototype.init.call(this, 0);
		this.expansionParameters(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.HierarchicalGlobalFilter.prototype.init1.call(this, 1, other);
		this.expansionParameters($.ig.CloneListUtils.prototype.cloneList(other.expansionParameters(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.HierarchicalGlobalFilter.prototype.init2.call(this, 2, json);
		this.expansionParameters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "ExpansionParameters")) {
			var jsonExpansionParameters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "ExpansionParameters");
			var jsonListSize = jsonExpansionParameters.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.expansionParameters().add(new $.ig.ParameterMapping(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonExpansionParameters[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.ParameterBasedHierarchyGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		$.ig.JsonUtility.prototype.saveContainer(json, "ExpansionParameters", this.expansionParameters());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('ParameterBasedHierarchyGlobalFilter', $.ig.HierarchicalGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ParameterBasedHierarchyGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ParameterBindingSource" />*/

$.ig.util.defType('ParameterBindingSource', 'BindingSource', {
	_parameterName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::ParameterName()" />*/
	parameterName: function (value) {
		if (arguments.length === 1) {
			this._parameterName = value;
			return value;
		} else {
			return this._parameterName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::ParameterName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BindingSource.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BindingSource.prototype.init1.call(this, 1, other);
		this.parameterName(other.parameterName());
	},
	init2: function (initNumber, json) {
		$.ig.BindingSource.prototype.init2.call(this, 2, json);
		this.parameterName($.ig.JsonUtility.prototype.loadString(json, "ParameterName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::Clone()" />*/
	clone: function () {
		return new $.ig.ParameterBindingSource(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "ParameterName", this.parameterName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterBindingSource::ToJson()" />*/
	,
	$type: new $.ig.Type('ParameterBindingSource', $.ig.BindingSource.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ParameterBindingSource" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ParameterMapping" />*/

$.ig.util.defType('ParameterMapping', 'Object', {
	_parameterName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterMapping::ParameterName()" />*/
	parameterName: function (value) {
		if (arguments.length === 1) {
			this._parameterName = value;
			return value;
		} else {
			return this._parameterName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterMapping::ParameterName()" />*/
	,
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterMapping::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParameterMapping::FieldName()" />*/
	,
	_fixedValue: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterMapping::FixedValue()" />*/
	fixedValue: function (value) {
		if (arguments.length === 1) {
			this._fixedValue = value;
			return value;
		} else {
			return this._fixedValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterMapping::FixedValue()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.parameterName(other.parameterName());
		this.fieldName(other.fieldName());
		this.fixedValue($.ig.CloneUtils.prototype.cloneObject(other.fixedValue()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.parameterName($.ig.JsonUtility.prototype.loadString(json, "ParameterName"));
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
		this.fixedValue($.ig.JsonUtility.prototype.loadObject(json, "FixedValue"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterMapping::Clone()" />*/
	clone: function () {
		return new $.ig.ParameterMapping(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParameterMapping::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterMapping::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "ParameterName", this.parameterName());
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "FixedValue", this.fixedValue());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParameterMapping::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ParameterMapping Infragistics.ReportPlus.DashboardModel.ParameterMapping::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ParameterMapping(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ParameterMapping Infragistics.ReportPlus.DashboardModel.ParameterMapping::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ParameterMapping', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ParameterMapping" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter" />*/

$.ig.util.defType('ParentChildHierarchyGlobalFilter', 'HierarchicalGlobalFilter', {
	_parentFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ParentFieldName()" />*/
	parentFieldName: function (value) {
		if (arguments.length === 1) {
			this._parentFieldName = value;
			return value;
		} else {
			return this._parentFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ParentFieldName()" />*/
	,
	_childFieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ChildFieldName()" />*/
	childFieldName: function (value) {
		if (arguments.length === 1) {
			this._childFieldName = value;
			return value;
		} else {
			return this._childFieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ChildFieldName()" />*/
	,
	_rootParentValue: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::RootParentValue()" />*/
	rootParentValue: function (value) {
		if (arguments.length === 1) {
			this._rootParentValue = value;
			return value;
		} else {
			return this._rootParentValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::RootParentValue()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HierarchicalGlobalFilter.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.HierarchicalGlobalFilter.prototype.init1.call(this, 1, other);
		this.parentFieldName(other.parentFieldName());
		this.childFieldName(other.childFieldName());
		this.rootParentValue($.ig.CloneUtils.prototype.cloneObject(other.rootParentValue()));
	},
	init2: function (initNumber, json) {
		$.ig.HierarchicalGlobalFilter.prototype.init2.call(this, 2, json);
		this.parentFieldName($.ig.JsonUtility.prototype.loadString(json, "ParentFieldName"));
		this.childFieldName($.ig.JsonUtility.prototype.loadString(json, "ChildFieldName"));
		this.rootParentValue($.ig.JsonUtility.prototype.loadObject(json, "RootParentValue"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.ParentChildHierarchyGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveObject(json, "SelectedFieldName", this.selectedFieldName());
		$.ig.JsonUtility.prototype.saveObject(json, "ParentFieldName", this.parentFieldName());
		$.ig.JsonUtility.prototype.saveObject(json, "ChildFieldName", this.childFieldName());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "RootParentValue", this.rootParentValue());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('ParentChildHierarchyGlobalFilter', $.ig.HierarchicalGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ParentChildHierarchyGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec" />*/

$.ig.util.defType('PivotVisualizationDataSpec', 'HierarchyVisualizationDataSpec', {
	_columns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Columns()" />*/
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Columns()" />*/
	,
	_values: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Values()" />*/
	,
	_showGrandTotals: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::ShowGrandTotals()" />*/
	showGrandTotals: function (value) {
		if (arguments.length === 1) {
			this._showGrandTotals = value;
			return value;
		} else {
			return this._showGrandTotals;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::ShowGrandTotals()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HierarchyVisualizationDataSpec.prototype.init.call(this, 0);
		this.columns(new $.ig.Array());
		this.values(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.HierarchyVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.columns($.ig.CloneListUtils.prototype.cloneList(other.columns(), new $.ig.Array()));
		this.values($.ig.CloneListUtils.prototype.cloneList(other.values(), new $.ig.Array()));
		this.showGrandTotals(other.showGrandTotals());
	},
	init2: function (initNumber, json) {
		$.ig.HierarchyVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.columns(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Columns")) {
			var jsonColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Columns");
			var jsonListSize = jsonColumns.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.columns().add(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonColumns[i])));
			}
		}
		this.values(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Values");
			var jsonListSize1 = jsonValues.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.values().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i1])));
			}
		}
		this.showGrandTotals($.ig.JsonUtility.prototype.loadBool(json, "ShowGrandTotals"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.PivotVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Columns", this.columns());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowGrandTotals", this.showGrandTotals());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.values()) == 0 && (this.rows() == null || this.rows().length == 0);
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.HierarchyVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.values(), $.ig.VisualizationDataSpec.prototype.valuesSection);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumns(list, this.columns(), $.ig.VisualizationDataSpec.prototype.columnsSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.HierarchyVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.valuesSection, -1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.columnsSection, -1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		this.insertColumn(section, -1, column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.rowsSection) {
			$.ig.HierarchyVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.columnsSection) {
			this.columns().insert(position < 0 || position > this.columns().length ? this.columns().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.valuesSection) {
			this.values().insert(position < 0 || position > this.values().length ? this.values().length : position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.rowsSection) {
			return $.ig.HierarchyVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.columnsSection) {
			return this.removeFromDimensions(this.columns(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.valuesSection) {
			return this.removeFromMeasures(this.values(), identifier);
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.valuesSection, columns, 3);
		columns = $.ig.HierarchyVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addSectionColumns($.ig.VisualizationDataSpec.prototype.columnsSection, columns, $.ig.VisualizationDataSpec.prototype.categorySection);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('PivotVisualizationDataSpec', $.ig.HierarchyVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.PivotVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings" />*/

$.ig.util.defType('PivotVisualizationSettings', 'GridVisualizationSettings', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GridVisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.GridVisualizationSettings.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.GridVisualizationSettings.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.PivotVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "HideGrandTotals", this.hideGrandTotals());
		$.ig.JsonUtility.prototype.saveObject(json, "FontSize", $.ig.DashboardEnumSerialization.prototype.writeFontSizeType(this.fontSize()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Style", this.style());
		$.ig.JsonUtility.prototype.saveContainer(json, "VisualizationColumns", this.visualizationColumns());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('PivotVisualizationSettings', $.ig.GridVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.PivotVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.PublicWidget" />*/

$.ig.util.defType('PublicWidget', 'Object', {
	_dataSource: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.PublicWidget::DataSource()" />*/
	dataSource: function (value) {
		if (arguments.length === 1) {
			this._dataSource = value;
			return value;
		} else {
			return this._dataSource;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DashboardModel.PublicWidget::DataSource()" />*/
	,
	_widget: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DashboardModel.PublicWidget::Widget()" />*/
	widget: function (value) {
		if (arguments.length === 1) {
			this._widget = value;
			return value;
		} else {
			return this._widget;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DashboardModel.PublicWidget::Widget()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.dataSource($.ig.CloneUtils.prototype.cloneObject(other.dataSource()));
		this.widget($.ig.CloneUtils.prototype.cloneObject(other.widget()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSource")) {
			this.dataSource($.ig.BaseDataSource.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSource"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Widget")) {
			this.widget(new $.ig.Widget(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Widget"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PublicWidget::Clone()" />*/
	clone: function () {
		return new $.ig.PublicWidget(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.PublicWidget::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PublicWidget::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSource", this.dataSource());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Widget", this.widget());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.PublicWidget::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.PublicWidget Infragistics.ReportPlus.DashboardModel.PublicWidget::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.PublicWidget(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.PublicWidget Infragistics.ReportPlus.DashboardModel.PublicWidget::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('PublicWidget', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.PublicWidget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.QuickFilter" />*/

$.ig.util.defType('QuickFilter', 'Object', {
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.QuickFilter::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.QuickFilter::FieldName()" />*/
	,
	_isDynamic: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.QuickFilter::IsDynamic()" />*/
	isDynamic: function (value) {
		if (arguments.length === 1) {
			this._isDynamic = value;
			return value;
		} else {
			return this._isDynamic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.QuickFilter::IsDynamic()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName(other.fieldName());
		this.isDynamic(other.isDynamic());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
		this.isDynamic($.ig.JsonUtility.prototype.loadBool(json, "IsDynamic"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.QuickFilter::Clone()" />*/
	clone: function () {
		return new $.ig.QuickFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.QuickFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.QuickFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.QuickFilter::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.QuickFilter Infragistics.ReportPlus.DashboardModel.QuickFilter::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.QuickFilter(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.QuickFilter Infragistics.ReportPlus.DashboardModel.QuickFilter::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('QuickFilter', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.QuickFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ResourceDataSpec" />*/

$.ig.util.defType('ResourceDataSpec', 'DataSpec', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataSpec.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.DataSpec.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.ResourceDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		$.ig.JsonUtility.prototype.saveInt(json, "Expiration", this.expiration());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Bindings", this.bindings());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsDateAggregation()" />*/
	supportsDateAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsDateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsDataFilters()" />*/
	supportsDataFilters: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsDataFilters()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::IsTabular()" />*/
	isTabular: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::IsTabular()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::IsXmla()" />*/
	isXmla: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::IsXmla()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsNumericAggregation()" />*/
	supportsNumericAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ResourceDataSpec::SupportsNumericAggregation()" />*/
	,
	$type: new $.ig.Type('ResourceDataSpec', $.ig.DataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ResourceDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec" />*/

$.ig.util.defType('ScatterMapVisualizationDataSpec', 'VisualizationDataSpec', {
	_isSingleLocationField: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsSingleLocationField()" />*/
	isSingleLocationField: function (value) {
		if (arguments.length === 1) {
			this._isSingleLocationField = value;
			return value;
		} else {
			return this._isSingleLocationField;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsSingleLocationField()" />*/
	,
	_isColorByValue: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsColorByValue()" />*/
	isColorByValue: function (value) {
		if (arguments.length === 1) {
			this._isColorByValue = value;
			return value;
		} else {
			return this._isColorByValue;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsColorByValue()" />*/
	,
	_location: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Location()" />*/
	location: function (value) {
		if (arguments.length === 1) {
			this._location = value;
			return value;
		} else {
			return this._location;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Location()" />*/
	,
	_longitude: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Longitude()" />*/
	longitude: function (value) {
		if (arguments.length === 1) {
			this._longitude = value;
			return value;
		} else {
			return this._longitude;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Longitude()" />*/
	,
	_label: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Label()" />*/
	,
	_mapColorCategory: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColorCategory()" />*/
	mapColorCategory: function (value) {
		if (arguments.length === 1) {
			this._mapColorCategory = value;
			return value;
		} else {
			return this._mapColorCategory;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColorCategory()" />*/
	,
	_mapColor: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColor()" />*/
	mapColor: function (value) {
		if (arguments.length === 1) {
			this._mapColor = value;
			return value;
		} else {
			return this._mapColor;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColor()" />*/
	,
	_radius: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Radius()" />*/
	radius: function (value) {
		if (arguments.length === 1) {
			this._radius = value;
			return value;
		} else {
			return this._radius;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Radius()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationDataSpec.prototype.init.call(this, 0);
		this.mapColor(new $.ig.Array());
		this.radius(new $.ig.Array());
		this.isSingleLocationField(false);
		this.isColorByValue(true);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.isSingleLocationField(other.isSingleLocationField());
		this.isColorByValue(other.isColorByValue());
		this.location($.ig.CloneUtils.prototype.cloneObject(other.location()));
		this.longitude($.ig.CloneUtils.prototype.cloneObject(other.longitude()));
		this.label($.ig.CloneUtils.prototype.cloneObject(other.label()));
		this.mapColorCategory($.ig.CloneUtils.prototype.cloneObject(other.mapColorCategory()));
		this.mapColor($.ig.CloneListUtils.prototype.cloneList(other.mapColor(), new $.ig.Array()));
		this.radius($.ig.CloneListUtils.prototype.cloneList(other.radius(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.isSingleLocationField($.ig.JsonUtility.prototype.loadBool1(json, "IsSingleLocationField", false));
		this.isColorByValue($.ig.JsonUtility.prototype.loadBool1(json, "IsColorByValue", true));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Location")) {
			this.location(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Location"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Longitude")) {
			this.longitude(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Longitude"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Label")) {
			this.label(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Label"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "MapColorCategory")) {
			this.mapColorCategory(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["MapColorCategory"])));
		}
		this.mapColor(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "MapColor")) {
			var jsonMapColor = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "MapColor");
			var jsonListSize = jsonMapColor.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.mapColor().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonMapColor[i])));
			}
		}
		this.radius(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Radius")) {
			var jsonRadius = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Radius");
			var jsonListSize1 = jsonRadius.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.radius().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonRadius[i1])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.ScatterMapVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveBool(json, "IsSingleLocationField", this.isSingleLocationField());
		$.ig.JsonUtility.prototype.saveBool(json, "IsColorByValue", this.isColorByValue());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Location", this.location());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Longitude", this.longitude());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Label", this.label());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "MapColorCategory", this.mapColorCategory());
		$.ig.JsonUtility.prototype.saveContainer(json, "MapColor", this.mapColor());
		$.ig.JsonUtility.prototype.saveContainer(json, "Radius", this.radius());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return this.location() == null || (!this.isSingleLocationField() && this.longitude() == null);
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::HasValidMapColorSet()" />*/
	hasValidMapColorSet: function () {
		return this.mapColor() != null && $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.mapColor()) > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::HasValidMapColorSet()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::HasValidRadiusSet()" />*/
	hasValidRadiusSet: function () {
		return this.radius() != null && $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.radius()) > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::HasValidRadiusSet()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::RadiusFieldName()" />*/
	radiusFieldName: function () {
		if (this.radius() == null) {
			return null;
		}
		var radiusCount = this.radius().length;
		for (var i = 0; i < radiusCount; i++) {
			var r = this.radius()[i];
			if (!r.isHidden()) {
				return r.identifier();
			}
		}
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::RadiusFieldName()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColorFieldName()" />*/
	mapColorFieldName: function () {
		if (this.mapColor() == null) {
			return null;
		}
		var mapColorCount = this.mapColor().length;
		for (var i = 0; i < mapColorCount; i++) {
			var mc = this.mapColor()[i];
			if (!mc.isHidden()) {
				return mc.identifier();
			}
		}
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::MapColorFieldName()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		var locationInfo = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.locationSection, 1, false, false, false, true, dataSpec.isXmla());
		locationInfo.sectionLocalizationKey(this.isSingleLocationField() ? $.ig.VisualizationDataSpec.prototype.locationSection : $.ig.VisualizationDataSpec.prototype.latitudeSection);
		locationInfo.placeholderLocalizationKey(this.isSingleLocationField() ? $.ig.VisualizationDataSpec.prototype.locationSection : $.ig.VisualizationDataSpec.prototype.latitudeSection);
		list.add(locationInfo);
		if (!this.isSingleLocationField()) {
			var lngSection = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.longitudeSection, 1, false, false, false, true, dataSpec.isXmla());
			lngSection.isNumericOnly(!dataSpec.isXmla());
			locationInfo.isNumericOnly(lngSection.isNumericOnly());
			list.add(lngSection);
		}
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, false, false, true, dataSpec.isXmla()));
		var categoryInfo;
		if (this.isColorByValue()) {
			categoryInfo = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.mapColorSection, 1, true, false, false, false, dataSpec.isXmla());
			categoryInfo.sectionLocalizationKey($.ig.VisualizationDataSpec.prototype.scatterMapColorLocalizationKey);
		} else {
			categoryInfo = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.mapColorCategorySection, 1, false, false, false, true, dataSpec.isXmla());
		}
		var colorTypes = new $.ig.Array();
		colorTypes.add($.ig.VisualizationDataSpec.prototype.scatterMapColorLocalizationKey);
		colorTypes.add($.ig.VisualizationDataSpec.prototype.mapColorCategorySection);
		categoryInfo.sectionTypes(colorTypes);
		list.add(categoryInfo);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.radiusSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::SetSectionType(System.String, System.String)" />*/
	setSectionType: function (section, type) {
		if (section == $.ig.VisualizationDataSpec.prototype.locationSection) {
			this.isSingleLocationField(type == $.ig.VisualizationDataSpec.prototype.locationSection);
		} else if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection || section == $.ig.VisualizationDataSpec.prototype.mapColorCategorySection) {
			this.isColorByValue(type == $.ig.VisualizationDataSpec.prototype.scatterMapColorLocalizationKey);
			this.updateColorFields();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::SetSectionType(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::UpdateColorFields()" />*/
	updateColorFields: function () {
		if (this.isColorByValue()) {
			if (this.mapColor().length == 0 && this.mapColorCategory() != null && this.mapColorCategory().tabularField() != null) {
				var valueColor = new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.mapColorSection, this.mapColorCategory().tabularField(), $.ig.DashboardModelUtils.prototype.createSummarizationValueField(this.mapColorCategory().tabularField()));
				this.mapColor().add(valueColor);
			}
		} else if (this.mapColorCategory() == null && this.mapColor().length > 0) {
			var valueColor1 = this.mapColor()[0];
			if (valueColor1.tabularField() != null) {
				this.mapColorCategory(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.mapColorCategorySection, valueColor1.tabularField(), $.ig.DashboardModelUtils.prototype.createSummarizationField(valueColor1.tabularField())));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::UpdateColorFields()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			this.mapColor().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			this.radius().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.locationSection) {
			this.location(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.longitudeSection) {
			this.longitude(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			this.label(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.mapColorCategorySection) {
			this.mapColorCategory(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			this.mapColor().insert(position < 0 || position > this.mapColor().length ? this.mapColor().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			this.radius().insert(position < 0 || position > this.radius().length ? this.radius().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.locationSection) {
			this.location(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.longitudeSection) {
			this.longitude(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			this.label(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.mapColorCategorySection) {
			this.mapColorCategory(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.mapColorSection) {
			return this.removeFromMeasures(this.mapColor(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.radiusSection) {
			return this.removeFromMeasures(this.radius(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.locationSection) {
			var index = this.location() == null ? -1 : 0;
			this.location(null);
			return index;
		} else if (section == $.ig.VisualizationDataSpec.prototype.longitudeSection) {
			var index1 = this.longitude() == null ? -1 : 0;
			this.longitude(null);
			return index1;
		} else if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			var index2 = this.label() == null ? -1 : 0;
			this.label(null);
			return index2;
		} else if (section == $.ig.VisualizationDataSpec.prototype.mapColorCategorySection) {
			var index3 = this.mapColorCategory() == null ? -1 : 0;
			this.mapColorCategory(null);
			return index3;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.location(), $.ig.VisualizationDataSpec.prototype.locationSection);
		if (!this.isSingleLocationField()) {
			$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.longitude(), $.ig.VisualizationDataSpec.prototype.longitudeSection);
		}
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.label(), $.ig.VisualizationDataSpec.prototype.labelSection);
		if (this.isColorByValue()) {
			$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.mapColor(), $.ig.VisualizationDataSpec.prototype.mapColorSection);
		} else {
			$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.mapColorCategory(), $.ig.VisualizationDataSpec.prototype.mapColorCategorySection);
		}
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.radius(), $.ig.VisualizationDataSpec.prototype.radiusSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.locationSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.locationSection, columns, $.ig.VisualizationDataSpec.prototype.locationSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.longitudeSection, columns, $.ig.VisualizationDataSpec.prototype.longitudeSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.mapColorSection, columns, $.ig.VisualizationDataSpec.prototype.mapColorSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.mapColorCategorySection, columns, $.ig.VisualizationDataSpec.prototype.mapColorCategorySection, 1);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.radiusSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('ScatterMapVisualizationDataSpec', $.ig.VisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings" />*/

$.ig.util.defType('ScatterMapVisualizationSettings', 'GeoMapBaseVisualizationSettings', {
	_useDifferentMarkers: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::UseDifferentMarkers()" />*/
	useDifferentMarkers: function (value) {
		if (arguments.length === 1) {
			this._useDifferentMarkers = value;
			return value;
		} else {
			return this._useDifferentMarkers;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::UseDifferentMarkers()" />*/
	,
	_colorizationMode: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ColorizationMode()" />*/
	colorizationMode: function (value) {
		if (arguments.length === 1) {
			this._colorizationMode = value;
			return value;
		} else {
			return this._colorizationMode;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ColorizationMode()" />*/
	,
	_conditionalFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			this._conditionalFormatting = value;
			return value;
		} else {
			return this._conditionalFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ConditionalFormatting()" />*/
	,
	_showTileSource: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ShowTileSource()" />*/
	showTileSource: function (value) {
		if (arguments.length === 1) {
			this._showTileSource = value;
			return value;
		} else {
			return this._showTileSource;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ShowTileSource()" />*/
	,
	_zoomThreshold: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ZoomThreshold()" />*/
	zoomThreshold: function (value) {
		if (arguments.length === 1) {
			this._zoomThreshold = value;
			return value;
		} else {
			return this._zoomThreshold;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ZoomThreshold()" />*/
	,
	_zoomRectangle: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ZoomRectangle()" />*/
	zoomRectangle: function (value) {
		if (arguments.length === 1) {
			this._zoomRectangle = value;
			return value;
		} else {
			return this._zoomRectangle;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardRectangle Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ZoomRectangle()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GeoMapBaseVisualizationSettings.prototype.init.call(this, 0);
		this.useDifferentMarkers(false);
		this.colorizationMode($.ig.DashboardScatterMapColorizationModeType.prototype.range);
		this.showTileSource(true);
		this.zoomThreshold(3);
	},
	init1: function (initNumber, other) {
		$.ig.GeoMapBaseVisualizationSettings.prototype.init1.call(this, 1, other);
		this.useDifferentMarkers(other.useDifferentMarkers());
		this.colorizationMode(other.colorizationMode());
		this.conditionalFormatting($.ig.CloneUtils.prototype.cloneObject(other.conditionalFormatting()));
		this.showTileSource(other.showTileSource());
		this.zoomThreshold(other.zoomThreshold());
		this.zoomRectangle($.ig.CloneUtils.prototype.cloneObject(other.zoomRectangle()));
	},
	init2: function (initNumber, json) {
		$.ig.GeoMapBaseVisualizationSettings.prototype.init2.call(this, 2, json);
		this.useDifferentMarkers($.ig.JsonUtility.prototype.loadBool1(json, "UseDifferentMarkers", false));
		this.colorizationMode($.ig.DashboardEnumDeserialization.prototype.readScatterMapColorizationModeType($.ig.JsonUtility.prototype.loadString(json, "ColorizationMode")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "ConditionalFormatting")) {
			this.conditionalFormatting(new $.ig.ConditionalFormattingSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ConditionalFormatting"])));
		}
		this.showTileSource($.ig.JsonUtility.prototype.loadBool1(json, "ShowTileSource", true));
		this.zoomThreshold($.ig.JsonUtility.prototype.loadInt1(json, "ZoomThreshold", 3));
		if ($.ig.JsonUtility.prototype.containsKey(json, "ZoomRectangle")) {
			this.zoomRectangle(new $.ig.DashboardRectangle(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ZoomRectangle"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.ScatterMapVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLegends", this.showLegends());
		$.ig.JsonUtility.prototype.saveObject(json, "Region", this.region());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "ColorIndex", this.colorIndex());
		$.ig.JsonUtility.prototype.saveBool(json, "UseDifferentMarkers", this.useDifferentMarkers());
		$.ig.JsonUtility.prototype.saveObject(json, "ColorizationMode", $.ig.DashboardEnumSerialization.prototype.writeScatterMapColorizationModeType(this.colorizationMode()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ConditionalFormatting", this.conditionalFormatting());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowTileSource", this.showTileSource());
		$.ig.JsonUtility.prototype.saveInt(json, "ZoomThreshold", this.zoomThreshold());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ZoomRectangle", this.zoomRectangle());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('ScatterMapVisualizationSettings', $.ig.GeoMapBaseVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ScatterMapVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings" />*/

$.ig.util.defType('ScriptVisualizationSettings', 'VisualizationSettings', {
	_language: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Language()" />*/
	language: function (value) {
		if (arguments.length === 1) {
			this._language = value;
			return value;
		} else {
			return this._language;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Language()" />*/
	,
	_script: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Script()" />*/
	script: function (value) {
		if (arguments.length === 1) {
			this._script = value;
			return value;
		} else {
			return this._script;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Script()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.language(other.language());
		this.script(other.script());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.language($.ig.JsonUtility.prototype.loadString(json, "Language"));
		this.script($.ig.JsonUtility.prototype.loadString(json, "Script"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.ScriptVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "Language", this.language());
		$.ig.JsonUtility.prototype.saveObject(json, "Script", this.script());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('ScriptVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ScriptVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable" />*/

$.ig.util.defType('ServiceAdditionalTable', 'Object', {
	_alias: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::Alias()" />*/
	alias: function (value) {
		if (arguments.length === 1) {
			this._alias = value;
			return value;
		} else {
			return this._alias;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::Alias()" />*/
	,
	_dataProcessingTask: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::DataProcessingTask()" />*/
	dataProcessingTask: function (value) {
		if (arguments.length === 1) {
			this._dataProcessingTask = value;
			return value;
		} else {
			return this._dataProcessingTask;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataProcessingTask Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::DataProcessingTask()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.alias(other.alias());
		this.dataProcessingTask($.ig.CloneUtils.prototype.cloneObject(other.dataProcessingTask()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.alias($.ig.JsonUtility.prototype.loadString(json, "Alias"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataProcessingTask")) {
			this.dataProcessingTask($.ig.DataProcessingTask.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataProcessingTask"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::Clone()" />*/
	clone: function () {
		return new $.ig.ServiceAdditionalTable(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Alias", this.alias());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataProcessingTask", this.dataProcessingTask());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.ServiceAdditionalTable(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ServiceAdditionalTable', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.ServiceAdditionalTable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec" />*/

$.ig.util.defType('SingleValueVisualizationDataSpec', 'VisualizationDataSpec', {
	_value: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationDataSpec.prototype.init.call(this, 0);
		this.value(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.value($.ig.CloneListUtils.prototype.cloneList(other.value(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.value(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Value")) {
			var jsonValue = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Value");
			var jsonListSize = jsonValue.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.value().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValue[i])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SingleValueVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = new $.ig.Array();
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		this.value().add(column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		return this.removeFromMeasures(this.value(), identifier);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('SingleValueVisualizationDataSpec', $.ig.VisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SingleValueVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec" />*/

$.ig.util.defType('SingleGaugeVisualizationDataSpec', 'SingleValueVisualizationDataSpec', {
	_label: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::Label()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SingleValueVisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.SingleValueVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.label($.ig.CloneUtils.prototype.cloneObject(other.label()));
	},
	init2: function (initNumber, json) {
		$.ig.SingleValueVisualizationDataSpec.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Label")) {
			this.label(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Label"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SingleGaugeVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Label", this.label());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, false, false, true, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			this.label(column);
		} else {
			$.ig.SingleValueVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			this.label(column);
		} else {
			$.ig.SingleValueVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			var index = this.label() == null ? -1 : 0;
			this.label(null);
			return index;
		} else {
			return $.ig.SingleValueVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.SingleValueVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.label(), $.ig.VisualizationDataSpec.prototype.labelSection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.rowsSection, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.labelSection, 1);
		if (this.label() == null) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.dateSection, 1);
		}
		if (this.label() == null) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.labelSection, columns, $.ig.VisualizationDataSpec.prototype.gridColumnsSection, 1);
		}
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('SingleGaugeVisualizationDataSpec', $.ig.SingleValueVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SingleGaugeVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings" />*/

$.ig.util.defType('SingleRowVisualizationSettings', 'VisualizationSettings', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.SingleRowVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('SingleRowVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SingleRowVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec" />*/

$.ig.util.defType('SingleValueCategoryVisualizationDataSpec', 'LabelsVisualizationDataSpec', {
	_value: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Value()" />*/
	,
	_category: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Category()" />*/
	category: function (value) {
		if (arguments.length === 1) {
			this._category = value;
			return value;
		} else {
			return this._category;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Category()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LabelsVisualizationDataSpec.prototype.init.call(this, 0);
		this.value(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.LabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.value($.ig.CloneListUtils.prototype.cloneList(other.value(), new $.ig.Array()));
		this.category($.ig.CloneUtils.prototype.cloneObject(other.category()));
	},
	init2: function (initNumber, json) {
		$.ig.LabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.value(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Value")) {
			var jsonValue = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Value");
			var jsonListSize = jsonValue.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.value().add(new $.ig.MeasureColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValue[i])));
			}
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Category")) {
			this.category(new $.ig.DimensionColumnSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Category"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SingleValueCategoryVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Category", this.category());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::GetAllColumns()" />*/
	getAllColumns: function () {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getAllColumns.call(this);
		$.ig.VisualizationDataSpec.prototype.addMeasureColumns(list, this.value(), $.ig.VisualizationDataSpec.prototype.singleValueSection);
		$.ig.VisualizationDataSpec.prototype.addDimensionColumn(list, this.category(), $.ig.VisualizationDataSpec.prototype.categorySection);
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::GetAllColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = $.ig.LabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.categorySection, 1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.LabelsVisualizationDataSpec.prototype.isEmpty.call(this) || $.ig.VisualizationDataSpec.prototype.getVisibleMeasureCount(this.value()) != 1;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::IsEmpty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	addColumn: function (section, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.addColumn.call(this, section, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().add(column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::AddColumn(System.String, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	insertColumn: function (section, position, column) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			$.ig.LabelsVisualizationDataSpec.prototype.insertColumn.call(this, section, position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			this.value().insert(position < 0 || position > this.value().length ? this.value().length : position, column);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			this.category(column);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::InsertColumn(System.String, System.Int32, Infragistics.ReportPlus.DashboardModel.BaseColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	removeColumn: function (section, identifier) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection) {
			return $.ig.LabelsVisualizationDataSpec.prototype.removeColumn.call(this, section, identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.singleValueSection) {
			return this.removeFromMeasures(this.value(), identifier);
		} else if (section == $.ig.VisualizationDataSpec.prototype.categorySection) {
			var index = this.category() == null ? -1 : 0;
			this.category(null);
			return index;
		} else {
			return -1;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::RemoveColumn(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		columns = $.ig.LabelsVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		columns = this.addNumericColumns1($.ig.VisualizationDataSpec.prototype.singleValueSection, columns, 1);
		columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.categorySection, columns, $.ig.VisualizationDataSpec.prototype.categorySection, 1);
		if (this.category() == null) {
			columns = this.addSectionColumns1($.ig.VisualizationDataSpec.prototype.categorySection, columns, $.ig.VisualizationDataSpec.prototype.columnsSection, 1);
		}
		return columns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('SingleValueCategoryVisualizationDataSpec', $.ig.LabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SingleValueCategoryVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec" />*/

$.ig.util.defType('SparklineVisualizationDataSpec', 'IndicatorVisualizationDataSpec', {
	_numberOfPeriods: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::NumberOfPeriods()" />*/
	numberOfPeriods: function (value) {
		if (arguments.length === 1) {
			this._numberOfPeriods = value;
			return value;
		} else {
			return this._numberOfPeriods;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::NumberOfPeriods()" />*/
	,
	_showIndicator: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::ShowIndicator()" />*/
	showIndicator: function (value) {
		if (arguments.length === 1) {
			this._showIndicator = value;
			return value;
		} else {
			return this._showIndicator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::ShowIndicator()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.IndicatorVisualizationDataSpec.prototype.init.call(this, 0);
		this.numberOfPeriods(12);
		this.showIndicator(true);
	},
	init1: function (initNumber, other) {
		$.ig.IndicatorVisualizationDataSpec.prototype.init1.call(this, 1, other);
		this.numberOfPeriods(other.numberOfPeriods());
		this.showIndicator(other.showIndicator());
	},
	init2: function (initNumber, json) {
		$.ig.IndicatorVisualizationDataSpec.prototype.init2.call(this, 2, json);
		this.numberOfPeriods($.ig.JsonUtility.prototype.loadInt1(json, "NumberOfPeriods", 12));
		this.showIndicator($.ig.JsonUtility.prototype.loadBool1(json, "ShowIndicator", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SparklineVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Date", this.date());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "IndicatorType", $.ig.DashboardEnumSerialization.prototype.writeIndicatorVisualizationType(this.indicatorType()));
		$.ig.JsonUtility.prototype.saveInt(json, "NumberOfPeriods", this.numberOfPeriods());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowIndicator", this.showIndicator());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::IsEmpty()" />*/
	isEmpty: function () {
		return $.ig.IndicatorVisualizationDataSpec.prototype.isEmpty.call(this) || this.labels().length == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec::IsEmpty()" />*/
	,
	$type: new $.ig.Type('SparklineVisualizationDataSpec', $.ig.IndicatorVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SparklineVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings" />*/

$.ig.util.defType('SparklineVisualizationSettings', 'GridVisualizationSettings', {
	_chartType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ChartType()" />*/
	chartType: function (value) {
		if (arguments.length === 1) {
			this._chartType = value;
			return value;
		} else {
			return this._chartType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ChartType()" />*/
	,
	_showLastTwoValues: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ShowLastTwoValues()" />*/
	showLastTwoValues: function (value) {
		if (arguments.length === 1) {
			this._showLastTwoValues = value;
			return value;
		} else {
			return this._showLastTwoValues;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ShowLastTwoValues()" />*/
	,
	_showDifference: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ShowDifference()" />*/
	showDifference: function (value) {
		if (arguments.length === 1) {
			this._showDifference = value;
			return value;
		} else {
			return this._showDifference;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ShowDifference()" />*/
	,
	_positiveIsRed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::PositiveIsRed()" />*/
	positiveIsRed: function (value) {
		if (arguments.length === 1) {
			this._positiveIsRed = value;
			return value;
		} else {
			return this._positiveIsRed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::PositiveIsRed()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GridVisualizationSettings.prototype.init.call(this, 0);
		this.chartType($.ig.DashboardChartType.prototype.line);
		this.showLastTwoValues(true);
		this.showDifference(true);
		this.positiveIsRed(false);
	},
	init1: function (initNumber, other) {
		$.ig.GridVisualizationSettings.prototype.init1.call(this, 1, other);
		this.chartType(other.chartType());
		this.showLastTwoValues(other.showLastTwoValues());
		this.showDifference(other.showDifference());
		this.positiveIsRed(other.positiveIsRed());
	},
	init2: function (initNumber, json) {
		$.ig.GridVisualizationSettings.prototype.init2.call(this, 2, json);
		this.chartType($.ig.DashboardEnumDeserialization.prototype.readChartType($.ig.JsonUtility.prototype.loadString(json, "ChartType")));
		this.showLastTwoValues($.ig.JsonUtility.prototype.loadBool1(json, "ShowLastTwoValues", true));
		this.showDifference($.ig.JsonUtility.prototype.loadBool1(json, "ShowDifference", true));
		this.positiveIsRed($.ig.JsonUtility.prototype.loadBool1(json, "PositiveIsRed", false));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.SparklineVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveBool(json, "HideGrandTotals", this.hideGrandTotals());
		$.ig.JsonUtility.prototype.saveObject(json, "FontSize", $.ig.DashboardEnumSerialization.prototype.writeFontSizeType(this.fontSize()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Style", this.style());
		$.ig.JsonUtility.prototype.saveContainer(json, "VisualizationColumns", this.visualizationColumns());
		$.ig.JsonUtility.prototype.saveObject(json, "ChartType", $.ig.DashboardEnumSerialization.prototype.writeChartType(this.chartType()));
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLastTwoValues", this.showLastTwoValues());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowDifference", this.showDifference());
		$.ig.JsonUtility.prototype.saveBool(json, "PositiveIsRed", this.positiveIsRed());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('SparklineVisualizationSettings', $.ig.GridVisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SparklineVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.StringFilter" />*/

$.ig.util.defType('StringFilter', 'Filter', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.StringFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.StringFilter::RuleType()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.StringFilter::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.StringFilter::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardStringRuleType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readStringRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		this.value($.ig.JsonUtility.prototype.loadString(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.StringFilter::Clone()" />*/
	clone: function () {
		return new $.ig.StringFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.StringFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.StringFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeStringRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveObject(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.StringFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('StringFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.StringFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationBaseField" />*/

$.ig.util.defType('SummarizationBaseField', 'Object', {
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::FieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName(other.fieldName());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationBaseField Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "SummarizationDateFieldType") {
			return new $.ig.SummarizationDateField(2, json);
		} else if (instanceType == "SummarizationRegularFieldType") {
			return new $.ig.SummarizationRegularField(2, json);
		} else if (instanceType == "SummarizationValueFieldType") {
			return new $.ig.SummarizationValueField(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationBaseField Infragistics.ReportPlus.DashboardModel.SummarizationBaseField::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('SummarizationBaseField', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationBaseField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField" />*/

$.ig.util.defType('SummarizationDimensionField', 'SummarizationBaseField', {
	_drillDownElements: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::DrillDownElements()" />*/
	drillDownElements: function (value) {
		if (arguments.length === 1) {
			this._drillDownElements = value;
			return value;
		} else {
			return this._drillDownElements;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::DrillDownElements()" />*/
	,
	_expandedItems: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::ExpandedItems()" />*/
	expandedItems: function (value) {
		if (arguments.length === 1) {
			this._expandedItems = value;
			return value;
		} else {
			return this._expandedItems;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::ExpandedItems()" />*/
	,
	_sortByField: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::SortByField()" />*/
	sortByField: function (value) {
		if (arguments.length === 1) {
			this._sortByField = value;
			return value;
		} else {
			return this._sortByField;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::SortByField()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SummarizationBaseField.prototype.init.call(this, 0);
		this.drillDownElements(new $.ig.Array());
		this.expandedItems(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.SummarizationBaseField.prototype.init1.call(this, 1, other);
		this.drillDownElements($.ig.CloneListUtils.prototype.cloneList(other.drillDownElements(), new $.ig.Array()));
		this.expandedItems($.ig.CloneListUtils.prototype.cloneList(other.expandedItems(), new $.ig.Array()));
		this.sortByField(other.sortByField());
	},
	init2: function (initNumber, json) {
		$.ig.SummarizationBaseField.prototype.init2.call(this, 2, json);
		this.drillDownElements($.ig.JsonUtility.prototype.loadStringList(json, "DrillDownElements"));
		this.expandedItems($.ig.JsonUtility.prototype.loadStringList(json, "ExpandedItems"));
		this.sortByField($.ig.JsonUtility.prototype.loadString(json, "SortByField"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField::ToJson()" />*/
	,
	$type: new $.ig.Type('SummarizationDimensionField', $.ig.SummarizationBaseField.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField" />*/

$.ig.util.defType('SummarizationDateField', 'SummarizationDimensionField', {
	_dateAggregationType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.SummarizationDateField::DateAggregationType()" />*/
	dateAggregationType: function (value) {
		if (arguments.length === 1) {
			this._dateAggregationType = value;
			return value;
		} else {
			return this._dateAggregationType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.SummarizationDateField::DateAggregationType()" />*/
	,
	_dateFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationDateField::DateFormatting()" />*/
	dateFormatting: function (value) {
		if (arguments.length === 1) {
			this._dateFormatting = value;
			return value;
		} else {
			return this._dateFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationDateField::DateFormatting()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SummarizationDimensionField.prototype.init.call(this, 0);
		this.dateAggregationType($.ig.DashboardDateAggregationType.prototype.year);
	},
	init1: function (initNumber, other) {
		$.ig.SummarizationDimensionField.prototype.init1.call(this, 1, other);
		this.dateAggregationType(other.dateAggregationType());
		this.dateFormatting($.ig.CloneUtils.prototype.cloneObject(other.dateFormatting()));
	},
	init2: function (initNumber, json) {
		$.ig.SummarizationDimensionField.prototype.init2.call(this, 2, json);
		this.dateAggregationType($.ig.DashboardEnumDeserialization.prototype.readDateAggregationType($.ig.JsonUtility.prototype.loadString(json, "DateAggregationType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DateFormatting")) {
			this.dateFormatting(new $.ig.DateFormattingSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DateFormatting"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationDateField::Clone()" />*/
	clone: function () {
		return new $.ig.SummarizationDateField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationDateField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationDateField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "SortByField", this.sortByField());
		$.ig.JsonUtility.prototype.saveObject(json, "DateAggregationType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.dateAggregationType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DateFormatting", this.dateFormatting());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationDateField::ToJson()" />*/
	,
	$type: new $.ig.Type('SummarizationDateField', $.ig.SummarizationDimensionField.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationRegularField" />*/

$.ig.util.defType('SummarizationRegularField', 'SummarizationDimensionField', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SummarizationDimensionField.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.SummarizationDimensionField.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.SummarizationDimensionField.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationRegularField::Clone()" />*/
	clone: function () {
		return new $.ig.SummarizationRegularField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationRegularField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationRegularField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "SortByField", this.sortByField());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationRegularField::ToJson()" />*/
	,
	$type: new $.ig.Type('SummarizationRegularField', $.ig.SummarizationDimensionField.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationRegularField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec" />*/

$.ig.util.defType('SummarizationSpec', 'Object', {
	_hideGrandTotalRow: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::HideGrandTotalRow()" />*/
	hideGrandTotalRow: function (value) {
		if (arguments.length === 1) {
			this._hideGrandTotalRow = value;
			return value;
		} else {
			return this._hideGrandTotalRow;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::HideGrandTotalRow()" />*/
	,
	_hideGrandTotalCol: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::HideGrandTotalCol()" />*/
	hideGrandTotalCol: function (value) {
		if (arguments.length === 1) {
			this._hideGrandTotalCol = value;
			return value;
		} else {
			return this._hideGrandTotalCol;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::HideGrandTotalCol()" />*/
	,
	_adHocFields: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.SummarizationSpec::AdHocFields()" />*/
	adHocFields: function (value) {
		if (arguments.length === 1) {
			this._adHocFields = value;
			return value;
		} else {
			return this._adHocFields;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.SummarizationSpec::AdHocFields()" />*/
	,
	_rows: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Rows()" />*/
	rows: function (value) {
		if (arguments.length === 1) {
			this._rows = value;
			return value;
		} else {
			return this._rows;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Rows()" />*/
	,
	_columns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Columns()" />*/
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Columns()" />*/
	,
	_values: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Values()" />*/
	,
	_adHocExpandedElements: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::AdHocExpandedElements()" />*/
	adHocExpandedElements: function (value) {
		if (arguments.length === 1) {
			this._adHocExpandedElements = value;
			return value;
		} else {
			return this._adHocExpandedElements;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.SummarizationSpec::AdHocExpandedElements()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.rows(new $.ig.Array());
		this.columns(new $.ig.Array());
		this.values(new $.ig.Array());
		this.adHocExpandedElements(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.hideGrandTotalRow(other.hideGrandTotalRow());
		this.hideGrandTotalCol(other.hideGrandTotalCol());
		this.adHocFields(other.adHocFields());
		this.rows($.ig.CloneListUtils.prototype.cloneList(other.rows(), new $.ig.Array()));
		this.columns($.ig.CloneListUtils.prototype.cloneList(other.columns(), new $.ig.Array()));
		this.values($.ig.CloneListUtils.prototype.cloneList(other.values(), new $.ig.Array()));
		this.adHocExpandedElements($.ig.CloneListUtils.prototype.cloneList(other.adHocExpandedElements(), new $.ig.Array()));
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.hideGrandTotalRow($.ig.JsonUtility.prototype.loadBool(json, "HideGrandTotalRow"));
		this.hideGrandTotalCol($.ig.JsonUtility.prototype.loadBool(json, "HideGrandTotalCol"));
		this.adHocFields($.ig.JsonUtility.prototype.loadOptionalInt(json, "AdHocFields"));
		this.rows(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Rows")) {
			var jsonRows = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Rows");
			var jsonListSize = jsonRows.length;
			for (var i = 0; i < jsonListSize; i++) {
				var summarizationDimensionFieldInstance = $.ig.SummarizationDimensionField.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonRows[i]));
				if (summarizationDimensionFieldInstance != null) {
					this.rows().add(summarizationDimensionFieldInstance);
				}
			}
		}
		this.columns(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Columns")) {
			var jsonColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Columns");
			var jsonListSize1 = jsonColumns.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				var summarizationDimensionFieldInstance1 = $.ig.SummarizationDimensionField.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonColumns[i1]));
				if (summarizationDimensionFieldInstance1 != null) {
					this.columns().add(summarizationDimensionFieldInstance1);
				}
			}
		}
		this.values(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Values");
			var jsonListSize2 = jsonValues.length;
			for (var i2 = 0; i2 < jsonListSize2; i2++) {
				this.values().add(new $.ig.SummarizationValueField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i2])));
			}
		}
		this.adHocExpandedElements(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "AdHocExpandedElements")) {
			var jsonAdHocExpandedElements = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "AdHocExpandedElements");
			var jsonListSize3 = jsonAdHocExpandedElements.length;
			for (var i3 = 0; i3 < jsonListSize3; i3++) {
				this.adHocExpandedElements().add(new $.ig.AdHocExpandedElement(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonAdHocExpandedElements[i3])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Clone()" />*/
	clone: function () {
		return new $.ig.SummarizationSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveBool(json, "HideGrandTotalRow", this.hideGrandTotalRow());
		$.ig.JsonUtility.prototype.saveBool(json, "HideGrandTotalCol", this.hideGrandTotalCol());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Columns", this.columns());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec Infragistics.ReportPlus.DashboardModel.SummarizationSpec::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.SummarizationSpec(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec Infragistics.ReportPlus.DashboardModel.SummarizationSpec::FromJson(System.JSDictionary)" />*/
	,
	_keepOriginalNameForAggregatedFields: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::KeepOriginalNameForAggregatedFields()" />*/
	keepOriginalNameForAggregatedFields: function (value) {
		if (arguments.length === 1) {
			this._keepOriginalNameForAggregatedFields = value;
			return value;
		} else {
			return this._keepOriginalNameForAggregatedFields;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationSpec::KeepOriginalNameForAggregatedFields()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SummarizationSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	copyAdditionalProperties: function (other) {
		this.keepOriginalNameForAggregatedFields(other.keepOriginalNameForAggregatedFields());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.SummarizationSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	,
	$type: new $.ig.Type('SummarizationSpec', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField" />*/

$.ig.util.defType('SummarizationValueField', 'SummarizationBaseField', {
	_fieldLabel: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationValueField::FieldLabel()" />*/
	fieldLabel: function (value) {
		if (arguments.length === 1) {
			this._fieldLabel = value;
			return value;
		} else {
			return this._fieldLabel;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationValueField::FieldLabel()" />*/
	,
	_isHidden: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationValueField::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			this._isHidden = value;
			return value;
		} else {
			return this._isHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationValueField::IsHidden()" />*/
	,
	_aggregationType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.SummarizationValueField::AggregationType()" />*/
	aggregationType: function (value) {
		if (arguments.length === 1) {
			this._aggregationType = value;
			return value;
		} else {
			return this._aggregationType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.SummarizationValueField::AggregationType()" />*/
	,
	_sorting: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			this._sorting = value;
			return value;
		} else {
			return this._sorting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Sorting()" />*/
	,
	_isCalculated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationValueField::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			this._isCalculated = value;
			return value;
		} else {
			return this._isCalculated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.SummarizationValueField::IsCalculated()" />*/
	,
	_expression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			this._expression = value;
			return value;
		} else {
			return this._expression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Expression()" />*/
	,
	_formatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			this._formatting = value;
			return value;
		} else {
			return this._formatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Formatting()" />*/
	,
	_conditionalFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationValueField::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			this._conditionalFormatting = value;
			return value;
		} else {
			return this._conditionalFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.SummarizationValueField::ConditionalFormatting()" />*/
	,
	_filter: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			this._filter = value;
			return value;
		} else {
			return this._filter;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Filter()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SummarizationBaseField.prototype.init.call(this, 0);
		this.aggregationType($.ig.DashboardAggregationType.prototype.sum);
		this.sorting($.ig.DashboardSortingType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.SummarizationBaseField.prototype.init1.call(this, 1, other);
		this.fieldLabel(other.fieldLabel());
		this.isHidden(other.isHidden());
		this.aggregationType(other.aggregationType());
		this.sorting(other.sorting());
		this.isCalculated(other.isCalculated());
		this.expression(other.expression());
		this.formatting($.ig.CloneUtils.prototype.cloneObject(other.formatting()));
		this.conditionalFormatting($.ig.CloneUtils.prototype.cloneObject(other.conditionalFormatting()));
		this.filter($.ig.CloneUtils.prototype.cloneObject(other.filter()));
	},
	init2: function (initNumber, json) {
		$.ig.SummarizationBaseField.prototype.init2.call(this, 2, json);
		this.fieldLabel($.ig.JsonUtility.prototype.loadString(json, "FieldLabel"));
		this.isHidden($.ig.JsonUtility.prototype.loadBool(json, "IsHidden"));
		this.aggregationType($.ig.DashboardEnumDeserialization.prototype.readAggregationType($.ig.JsonUtility.prototype.loadString(json, "AggregationType")));
		this.sorting($.ig.DashboardEnumDeserialization.prototype.readSortingType($.ig.JsonUtility.prototype.loadString(json, "Sorting")));
		this.isCalculated($.ig.JsonUtility.prototype.loadBool(json, "IsCalculated"));
		this.expression($.ig.JsonUtility.prototype.loadString(json, "Expression"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Formatting")) {
			this.formatting($.ig.FormattingSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Formatting"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "ConditionalFormatting")) {
			this.conditionalFormatting(new $.ig.ConditionalFormattingSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ConditionalFormatting"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Filter")) {
			this.filter($.ig.Filter.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Filter"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Clone()" />*/
	clone: function () {
		return new $.ig.SummarizationValueField(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.SummarizationValueField::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationValueField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		$.ig.JsonUtility.prototype.saveObject(json, "FieldLabel", this.fieldLabel());
		$.ig.JsonUtility.prototype.saveBool(json, "IsHidden", this.isHidden());
		$.ig.JsonUtility.prototype.saveObject(json, "AggregationType", $.ig.DashboardEnumSerialization.prototype.writeAggregationType(this.aggregationType()));
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveBool(json, "IsCalculated", this.isCalculated());
		$.ig.JsonUtility.prototype.saveObject(json, "Expression", this.expression());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Formatting", this.formatting());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ConditionalFormatting", this.conditionalFormatting());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Filter", this.filter());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.SummarizationValueField::ToJson()" />*/
	,
	$type: new $.ig.Type('SummarizationValueField', $.ig.SummarizationBaseField.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TabularColumnSpec" />*/

$.ig.util.defType('TabularColumnSpec', 'BaseColumnSpec', {
	_fieldName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::FieldName()" />*/
	fieldName: function (value) {
		if (arguments.length === 1) {
			this._fieldName = value;
			return value;
		} else {
			return this._fieldName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::FieldName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.BaseColumnSpec.prototype.init1.call(this, 1, other);
		this.fieldName(other.fieldName());
		this.copyAdditionalProperties(other);
	},
	init2: function (initNumber, json) {
		$.ig.BaseColumnSpec.prototype.init2.call(this, 2, json);
		this.fieldName($.ig.JsonUtility.prototype.loadString(json, "FieldName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Clone()" />*/
	clone: function () {
		return new $.ig.TabularColumnSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FieldName", this.fieldName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::ToJson()" />*/
	,
	init3: function (initNumber, location, field) {
		$.ig.BaseColumnSpec.prototype.init.call(this, 0);
		this.location(location);
		this.tabularField(field);
		this.fieldName(field.fieldName());
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.TabularColumnSpec)" />*/
	copyAdditionalProperties: function (other) {
		this.location(other.location());
		this.tabularField(other.tabularField() == null ? null : other.tabularField().clone());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::CopyAdditionalProperties(Infragistics.ReportPlus.DashboardModel.TabularColumnSpec)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Identifier()" />*/
	identifier: function () {
		return this.tabularField() == null ? null : this.tabularField().fieldName();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Identifier()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Name()" />*/
	name: function () {
		return this.identifier();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Name()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().fieldLabel(value);
			}
			return value;
		} else {
			if (this.tabularField() != null) {
				return $.ig.BaseColumnSpec.prototype.stringIsNullOrEmpty(this.tabularField().fieldLabel()) ? this.tabularField().fieldName() : this.tabularField().fieldLabel();
			} else {
				return null;
			}
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Label()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Description()" />*/
	description: function () {
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Description()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().fieldType(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? $.ig.DashboardDataType.prototype.number : this.tabularField().fieldType();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Type()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DisplayType()" />*/
	displayType: function () {
		return this.tabularField() == null ? $.ig.DashboardDataType.prototype.number : this.tabularField().fieldType();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DisplayType()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Aggregation()" />*/
	aggregation: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return $.ig.DashboardAggregationType.prototype.auto;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Aggregation()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DateAggregation()" />*/
	dateAggregation: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return $.ig.DashboardDateAggregationType.prototype.year;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				if (!($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, this.tabularField().settings()) !== null)) {
					this.tabularField().settings(new $.ig.DateTimeFieldSettings(0));
				}
				(this.tabularField().settings()).dateFiscalYearStartMonth(value);
			}
			return value;
		} else {
			return (this.tabularField() != null && ($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, this.tabularField().settings()) !== null)) ? (this.tabularField().settings()).dateFiscalYearStartMonth() : 0;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::DateFiscalYearStartMonth()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().filter(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? null : this.tabularField().filter();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Filter()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().formatting(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? null : this.tabularField().formatting();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().conditionalFormatting(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? null : this.tabularField().conditionalFormatting();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().sorting(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? $.ig.DashboardSortingType.prototype.none : this.tabularField().sorting();
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Sorting()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::SortByField()" />*/
	sortByField: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::SortByField()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().expression(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? null : this.tabularField().expression();
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::Expression()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().isCalculated(value);
			}
			return value;
		} else {
			return this.tabularField() == null ? false : this.tabularField().isCalculated();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::IsCalculated()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			if (this.tabularField() != null) {
				this.tabularField().isHidden(value);
			}
			return value;
		} else {
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::IsHidden()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::SortByCaption()" />*/
	sortByCaption: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularColumnSpec::SortByCaption()" />*/
	,
	$type: new $.ig.Type('TabularColumnSpec', $.ig.BaseColumnSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TabularColumnSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TabularDataSpec" />*/

$.ig.util.defType('TabularDataSpec', 'DataSpec', {
	_isTransposed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsTransposed()" />*/
	isTransposed: function (value) {
		if (arguments.length === 1) {
			this._isTransposed = value;
			return value;
		} else {
			return this._isTransposed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsTransposed()" />*/
	,
	_fields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::Fields()" />*/
	fields: function (value) {
		if (arguments.length === 1) {
			this._fields = value;
			return value;
		} else {
			return this._fields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::Fields()" />*/
	,
	_transposedFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::TransposedFields()" />*/
	transposedFields: function (value) {
		if (arguments.length === 1) {
			this._transposedFields = value;
			return value;
		} else {
			return this._transposedFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::TransposedFields()" />*/
	,
	_quickFilters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::QuickFilters()" />*/
	quickFilters: function (value) {
		if (arguments.length === 1) {
			this._quickFilters = value;
			return value;
		} else {
			return this._quickFilters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::QuickFilters()" />*/
	,
	_summarizationSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SummarizationSpec()" />*/
	summarizationSpec: function (value) {
		if (arguments.length === 1) {
			this._summarizationSpec = value;
			return value;
		} else {
			return this._summarizationSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationSpec Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SummarizationSpec()" />*/
	,
	_additionalTables: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::AdditionalTables()" />*/
	additionalTables: function (value) {
		if (arguments.length === 1) {
			this._additionalTables = value;
			return value;
		} else {
			return this._additionalTables;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::AdditionalTables()" />*/
	,
	_serviceAdditionalTables: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::ServiceAdditionalTables()" />*/
	serviceAdditionalTables: function (value) {
		if (arguments.length === 1) {
			this._serviceAdditionalTables = value;
			return value;
		} else {
			return this._serviceAdditionalTables;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.TabularDataSpec::ServiceAdditionalTables()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSpec.prototype.init.call(this, 0);
		this.fields(new $.ig.Array());
		this.transposedFields(new $.ig.Array());
		this.quickFilters(new $.ig.Array());
		this.additionalTables(new $.ig.Array());
		this.serviceAdditionalTables(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.DataSpec.prototype.init1.call(this, 1, other);
		this.isTransposed(other.isTransposed());
		this.fields($.ig.CloneListUtils.prototype.cloneList(other.fields(), new $.ig.Array()));
		this.transposedFields($.ig.CloneListUtils.prototype.cloneList(other.transposedFields(), new $.ig.Array()));
		this.quickFilters($.ig.CloneListUtils.prototype.cloneList(other.quickFilters(), new $.ig.Array()));
		this.summarizationSpec($.ig.CloneUtils.prototype.cloneObject(other.summarizationSpec()));
		this.additionalTables($.ig.CloneListUtils.prototype.cloneList(other.additionalTables(), new $.ig.Array()));
		this.serviceAdditionalTables($.ig.CloneListUtils.prototype.cloneList(other.serviceAdditionalTables(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.DataSpec.prototype.init2.call(this, 2, json);
		this.isTransposed($.ig.JsonUtility.prototype.loadBool(json, "IsTransposed"));
		this.fields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Fields")) {
			var jsonFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Fields");
			var jsonListSize = jsonFields.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.fields().add(new $.ig.Field(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonFields[i])));
			}
		}
		this.transposedFields(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "TransposedFields")) {
			var jsonTransposedFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "TransposedFields");
			var jsonListSize1 = jsonTransposedFields.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				this.transposedFields().add(new $.ig.Field(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonTransposedFields[i1])));
			}
		}
		this.quickFilters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "QuickFilters")) {
			var jsonQuickFilters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "QuickFilters");
			var jsonListSize2 = jsonQuickFilters.length;
			for (var i2 = 0; i2 < jsonListSize2; i2++) {
				this.quickFilters().add(new $.ig.QuickFilter(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonQuickFilters[i2])));
			}
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "SummarizationSpec")) {
			this.summarizationSpec(new $.ig.SummarizationSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SummarizationSpec"])));
		}
		this.additionalTables(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "AdditionalTables")) {
			var jsonAdditionalTables = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "AdditionalTables");
			var jsonListSize3 = jsonAdditionalTables.length;
			for (var i3 = 0; i3 < jsonListSize3; i3++) {
				this.additionalTables().add(new $.ig.AdditionalTable(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonAdditionalTables[i3])));
			}
		}
		this.serviceAdditionalTables(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "ServiceAdditionalTables")) {
			var jsonServiceAdditionalTables = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "ServiceAdditionalTables");
			var jsonListSize4 = jsonServiceAdditionalTables.length;
			for (var i4 = 0; i4 < jsonListSize4; i4++) {
				this.serviceAdditionalTables().add(new $.ig.ServiceAdditionalTable(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonServiceAdditionalTables[i4])));
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.TabularDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TabularDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		$.ig.JsonUtility.prototype.saveInt(json, "Expiration", this.expiration());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Bindings", this.bindings());
		$.ig.JsonUtility.prototype.saveBool(json, "IsTransposed", this.isTransposed());
		$.ig.JsonUtility.prototype.saveContainer(json, "Fields", this.fields());
		$.ig.JsonUtility.prototype.saveContainer(json, "TransposedFields", this.transposedFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "QuickFilters", this.quickFilters());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SummarizationSpec", this.summarizationSpec());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdditionalTables", this.additionalTables());
		$.ig.JsonUtility.prototype.saveContainer(json, "ServiceAdditionalTables", this.serviceAdditionalTables());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TabularDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsDateAggregation()" />*/
	supportsDateAggregation: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsDateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsDataFilters()" />*/
	supportsDataFilters: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsDataFilters()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsTabular()" />*/
	isTabular: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsTabular()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsXmla()" />*/
	isXmla: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::IsXmla()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsNumericAggregation()" />*/
	supportsNumericAggregation: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TabularDataSpec::SupportsNumericAggregation()" />*/
	,
	$type: new $.ig.Type('TabularDataSpec', $.ig.DataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TabularDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec" />*/

$.ig.util.defType('TextBoxDataSpec', 'DataSpec', {
	_text: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Text()" />*/
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Text()" />*/
	,
	_fontSize: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::FontSize()" />*/
	fontSize: function (value) {
		if (arguments.length === 1) {
			this._fontSize = value;
			return value;
		} else {
			return this._fontSize;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::FontSize()" />*/
	,
	_alignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Alignment()" />*/
	alignment: function (value) {
		if (arguments.length === 1) {
			this._alignment = value;
			return value;
		} else {
			return this._alignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Alignment()" />*/
	,
	_richTextFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::RichTextFormatting()" />*/
	richTextFormatting: function (value) {
		if (arguments.length === 1) {
			this._richTextFormatting = value;
			return value;
		} else {
			return this._richTextFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::RichTextFormatting()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSpec.prototype.init.call(this, 0);
		this.fontSize($.ig.DashboardFontSizeType.prototype.medium);
		this.alignment($.ig.DashboardTextAlignment.prototype.left);
	},
	init1: function (initNumber, other) {
		$.ig.DataSpec.prototype.init1.call(this, 1, other);
		this.text(other.text());
		this.fontSize(other.fontSize());
		this.alignment(other.alignment());
		this.richTextFormatting($.ig.CloneUtils.prototype.cloneObject(other.richTextFormatting()));
	},
	init2: function (initNumber, json) {
		$.ig.DataSpec.prototype.init2.call(this, 2, json);
		this.text($.ig.JsonUtility.prototype.loadString(json, "Text"));
		this.fontSize($.ig.DashboardEnumDeserialization.prototype.readFontSizeType($.ig.JsonUtility.prototype.loadString(json, "FontSize")));
		this.alignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "Alignment")));
		this.richTextFormatting($.ig.JsonUtility.prototype.loadJsonObjectWrapper(json, "RichTextFormatting"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.TextBoxDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		$.ig.JsonUtility.prototype.saveInt(json, "Expiration", this.expiration());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Bindings", this.bindings());
		$.ig.JsonUtility.prototype.saveObject(json, "Text", this.text());
		$.ig.JsonUtility.prototype.saveObject(json, "FontSize", $.ig.DashboardEnumSerialization.prototype.writeFontSizeType(this.fontSize()));
		$.ig.JsonUtility.prototype.saveObject(json, "Alignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.alignment()));
		$.ig.JsonUtility.prototype.saveJsonObjectWrapper(json, "RichTextFormatting", this.richTextFormatting());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsDateAggregation()" />*/
	supportsDateAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsDateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsDataFilters()" />*/
	supportsDataFilters: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsDataFilters()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::IsTabular()" />*/
	isTabular: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::IsTabular()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::IsXmla()" />*/
	isXmla: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::IsXmla()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsNumericAggregation()" />*/
	supportsNumericAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec::SupportsNumericAggregation()" />*/
	,
	$type: new $.ig.Type('TextBoxDataSpec', $.ig.DataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TextBoxDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings" />*/

$.ig.util.defType('TextBoxVisualizationSettings', 'VisualizationSettings', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.TextBoxVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings::ToJson()" />*/
	,
	$type: new $.ig.Type('TextBoxVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TextBoxVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TimeFilter" />*/

$.ig.util.defType('TimeFilter', 'Filter', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType Infragistics.ReportPlus.DashboardModel.TimeFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType Infragistics.ReportPlus.DashboardModel.TimeFilter::RuleType()" />*/
	,
	_customTimeRange: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.TimeFilter::CustomTimeRange()" />*/
	customTimeRange: function (value) {
		if (arguments.length === 1) {
			this._customTimeRange = value;
			return value;
		} else {
			return this._customTimeRange;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.TimeFilter::CustomTimeRange()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardTimeRuleType.prototype.allTime);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.customTimeRange($.ig.CloneUtils.prototype.cloneObject(other.customTimeRange()));
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readTimeRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CustomTimeRange")) {
			this.customTimeRange(new $.ig.DateRange(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["CustomTimeRange"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeFilter::Clone()" />*/
	clone: function () {
		return new $.ig.TimeFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeTimeRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "CustomTimeRange", this.customTimeRange());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('TimeFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TimeFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec" />*/

$.ig.util.defType('TimeSeriesVisualizationDataSpec', 'CategoryVisualizationDataSpec', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CategoryVisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.CategoryVisualizationDataSpec.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.CategoryVisualizationDataSpec.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.TimeSeriesVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Category", this.category());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		var list = new $.ig.Array();
		var lblSection = new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 1, false, false, true, true, dataSpec.isXmla());
		lblSection.sectionLocalizationKey($.ig.VisualizationDataSpec.prototype.dateSection);
		lblSection.placeholderLocalizationKey($.ig.VisualizationDataSpec.prototype.dateSection);
		list.add(lblSection);
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.valuesSection, -1, true, false, false, false, dataSpec.isXmla()));
		list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.categorySection, 1, false, false, false, true, dataSpec.isXmla()));
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	loadFromColumns: function (columns) {
		var remainingColumns = $.ig.CategoryVisualizationDataSpec.prototype.loadFromColumns.call(this, columns);
		if (this.labels().length == 1) {
			var dim = this.labels()[0];
			var lower = $.ig.TimeSeriesVisualizationDataSpec.prototype.getLowerDateAggregation(columns, dim.identifier(), dim.type());
			if (lower != null) {
				this.labels().removeAt(0);
				this.labels().add(lower);
			}
		}
		return remainingColumns;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::LoadFromColumns(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::GetLowerDateAggregation(Infragistics.CPList, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getLowerDateAggregation: function (columns, identifier, type) {
		var count = columns.length;
		var column = null;
		var agg = $.ig.DashboardModelUtils.prototype.getFirstDateAggregation(type);
		for (var i = 0; i < count; i++) {
			var col = columns[i];
			if (!($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, col) !== null) || col.identifier() != identifier) {
				continue;
			}
			var dimCol = col;
			if (dimCol.dateAggregation() == agg || $.ig.DashboardModelUtils.prototype.isLowerDateAggregation(type, dimCol.dateAggregation(), agg)) {
				column = dimCol;
				agg = dimCol.dateAggregation();
			}
		}
		return column;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::GetLowerDateAggregation(Infragistics.CPList, System.String, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::LabelSectionLimit()" />*/
	labelSectionLimit: function () {
		return 1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::LabelSectionLimit()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::IsDateOnlySection(System.String)" />*/
	isDateOnlySection: function (section) {
		return section == $.ig.VisualizationDataSpec.prototype.labelSection || $.ig.CategoryVisualizationDataSpec.prototype.isDateOnlySection.call(this, section);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::IsDateOnlySection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::SetDefaultDateAggregation(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec, System.String)" />*/
	setDefaultDateAggregation: function (column, section) {
		if (section == $.ig.VisualizationDataSpec.prototype.labelSection && ($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, column) !== null)) {
			var dim = column;
			if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, dim.summarizationField()) !== null) {
				var dateField = dim.summarizationField();
				dateField.dateAggregationType(dim.type() == $.ig.DashboardDataType.prototype.time ? $.ig.DashboardDateAggregationType.prototype.minute : $.ig.DashboardDateAggregationType.prototype.day);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec::SetDefaultDateAggregation(Infragistics.ReportPlus.DashboardModel.BaseColumnSpec, System.String)" />*/
	,
	$type: new $.ig.Type('TimeSeriesVisualizationDataSpec', $.ig.CategoryVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TimeSeriesVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound" />*/

$.ig.util.defType('TreeMapBound', 'Object', {
	_color: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType Infragistics.ReportPlus.DashboardModel.TreeMapBound::Color()" />*/
	color: function (value) {
		if (arguments.length === 1) {
			this._color = value;
			return value;
		} else {
			return this._color;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType Infragistics.ReportPlus.DashboardModel.TreeMapBound::Color()" />*/
	,
	_value: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.TreeMapBound::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.TreeMapBound::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.color($.ig.DashboardTreeMapBoundColorType.prototype.green);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.color(other.color());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.color($.ig.DashboardEnumDeserialization.prototype.readTreeMapBoundColorType($.ig.JsonUtility.prototype.loadString(json, "Color")));
		this.value($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapBound::Clone()" />*/
	clone: function () {
		return new $.ig.TreeMapBound(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapBound::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapBound::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Color", $.ig.DashboardEnumSerialization.prototype.writeTreeMapBoundColorType(this.color()));
		$.ig.JsonUtility.prototype.saveObject(json, "Value", $.ig.util.unwrapNullable(this.value()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapBound::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapBound::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.TreeMapBound(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapBound::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('TreeMapBound', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec" />*/

$.ig.util.defType('TreeMapVisualizationDataSpec', 'SingleValueLabelsVisualizationDataSpec', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init1.call(this, 1, other);
	},
	init2: function (initNumber, json) {
		$.ig.SingleValueLabelsVisualizationDataSpec.prototype.init2.call(this, 2, json);
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.TreeMapVisualizationDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "AdHocFields", this.adHocFields());
		$.ig.JsonUtility.prototype.saveInt(json, "FormatVersion", this.formatVersion());
		$.ig.JsonUtility.prototype.saveContainer(json, "AdHocExpandedElements", this.adHocExpandedElements());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSections: function (dataSpec, settings) {
		if (dataSpec.isXmla()) {
			var list = new $.ig.Array();
			list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.labelSection, 2, false, dataSpec.isTabular(), false, true, dataSpec.isXmla()));
			list.add(new $.ig.VisualizationEditorSectionInfo($.ig.VisualizationDataSpec.prototype.singleValueSection, 1, true, false, false, false, dataSpec.isXmla()));
			return list;
		} else {
			return $.ig.SingleValueLabelsVisualizationDataSpec.prototype.getSections.call(this, dataSpec, settings);
		}
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec::GetSections(Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	$type: new $.ig.Type('TreeMapVisualizationDataSpec', $.ig.SingleValueLabelsVisualizationDataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings" />*/

$.ig.util.defType('TreeMapVisualizationSettings', 'VisualizationSettings', {
	_layout: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::Layout()" />*/
	layout: function (value) {
		if (arguments.length === 1) {
			this._layout = value;
			return value;
		} else {
			return this._layout;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::Layout()" />*/
	,
	_brushOffsetIndex: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::BrushOffsetIndex()" />*/
	brushOffsetIndex: function (value) {
		if (arguments.length === 1) {
			this._brushOffsetIndex = value;
			return value;
		} else {
			return this._brushOffsetIndex;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::BrushOffsetIndex()" />*/
	,
	_showValues: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ShowValues()" />*/
	showValues: function (value) {
		if (arguments.length === 1) {
			this._showValues = value;
			return value;
		} else {
			return this._showValues;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ShowValues()" />*/
	,
	_showLegend: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ShowLegend()" />*/
	showLegend: function (value) {
		if (arguments.length === 1) {
			this._showLegend = value;
			return value;
		} else {
			return this._showLegend;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ShowLegend()" />*/
	,
	_colorAs: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ColorAs()" />*/
	colorAs: function (value) {
		if (arguments.length === 1) {
			this._colorAs = value;
			return value;
		} else {
			return this._colorAs;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ColorAs()" />*/
	,
	_minBound: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::MinBound()" />*/
	minBound: function (value) {
		if (arguments.length === 1) {
			this._minBound = value;
			return value;
		} else {
			return this._minBound;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::MinBound()" />*/
	,
	_maxBound: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::MaxBound()" />*/
	maxBound: function (value) {
		if (arguments.length === 1) {
			this._maxBound = value;
			return value;
		} else {
			return this._maxBound;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.TreeMapBound Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::MaxBound()" />*/
	,
	_labelColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::LabelColumnName()" />*/
	labelColumnName: function (value) {
		if (arguments.length === 1) {
			this._labelColumnName = value;
			return value;
		} else {
			return this._labelColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::LabelColumnName()" />*/
	,
	_valueColumnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ValueColumnName()" />*/
	valueColumnName: function (value) {
		if (arguments.length === 1) {
			this._valueColumnName = value;
			return value;
		} else {
			return this._valueColumnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ValueColumnName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.VisualizationSettings.prototype.init.call(this, 0);
		this.layout($.ig.DashboardTreeMapLayoutEnumType.prototype.squarified);
		this.brushOffsetIndex($.ig.util.toNullable($.ig.Number.prototype.$type, -1));
		this.showValues(true);
		this.showLegend(true);
		this.colorAs($.ig.DashboardTreeMapColorType.prototype.singleColor);
		this.customInit();
	},
	init1: function (initNumber, other) {
		$.ig.VisualizationSettings.prototype.init1.call(this, 1, other);
		this.layout(other.layout());
		this.brushOffsetIndex(other.brushOffsetIndex());
		this.showValues(other.showValues());
		this.showLegend(other.showLegend());
		this.colorAs(other.colorAs());
		this.minBound($.ig.CloneUtils.prototype.cloneObject(other.minBound()));
		this.maxBound($.ig.CloneUtils.prototype.cloneObject(other.maxBound()));
		this.labelColumnName(other.labelColumnName());
		this.valueColumnName(other.valueColumnName());
	},
	init2: function (initNumber, json) {
		$.ig.VisualizationSettings.prototype.init2.call(this, 2, json);
		this.layout($.ig.DashboardEnumDeserialization.prototype.readTreeMapLayoutEnumType($.ig.JsonUtility.prototype.loadString(json, "Layout")));
		this.brushOffsetIndex($.ig.JsonUtility.prototype.loadOptionalInt(json, "BrushOffsetIndex"));
		this.showValues($.ig.JsonUtility.prototype.loadBool1(json, "ShowValues", true));
		this.showLegend($.ig.JsonUtility.prototype.loadBool1(json, "ShowLegend", true));
		this.colorAs($.ig.DashboardEnumDeserialization.prototype.readTreeMapColorType($.ig.JsonUtility.prototype.loadString(json, "ColorAs")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "MinBound")) {
			this.minBound(new $.ig.TreeMapBound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["MinBound"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "MaxBound")) {
			this.maxBound(new $.ig.TreeMapBound(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["MaxBound"])));
		}
		this.labelColumnName($.ig.JsonUtility.prototype.loadString(json, "LabelColumnName"));
		this.valueColumnName($.ig.JsonUtility.prototype.loadString(json, "ValueColumnName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::Clone()" />*/
	clone: function () {
		return new $.ig.TreeMapVisualizationSettings(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "VisualizationType", this.visualizationType());
		$.ig.JsonUtility.prototype.saveObject(json, "Layout", $.ig.DashboardEnumSerialization.prototype.writeTreeMapLayoutEnumType(this.layout()));
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "BrushOffsetIndex", this.brushOffsetIndex());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowValues", this.showValues());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowLegend", this.showLegend());
		$.ig.JsonUtility.prototype.saveObject(json, "ColorAs", $.ig.DashboardEnumSerialization.prototype.writeTreeMapColorType(this.colorAs()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "MinBound", this.minBound());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "MaxBound", this.maxBound());
		$.ig.JsonUtility.prototype.saveObject(json, "LabelColumnName", this.labelColumnName());
		$.ig.JsonUtility.prototype.saveObject(json, "ValueColumnName", this.valueColumnName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::CustomInit()" />*/
	customInit: function () {
		this.minBound(new $.ig.TreeMapBound(0));
		this.minBound().color($.ig.DashboardTreeMapBoundColorType.prototype.red);
		this.maxBound(new $.ig.TreeMapBound(0));
		this.maxBound().color($.ig.DashboardTreeMapBoundColorType.prototype.green);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings::CustomInit()" />*/
	,
	$type: new $.ig.Type('TreeMapVisualizationSettings', $.ig.VisualizationSettings.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.UrlBinding" />*/

$.ig.util.defType('UrlBinding', 'Object', {
	_globalFilterId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.UrlBinding::GlobalFilterId()" />*/
	globalFilterId: function (value) {
		if (arguments.length === 1) {
			this._globalFilterId = value;
			return value;
		} else {
			return this._globalFilterId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.UrlBinding::GlobalFilterId()" />*/
	,
	_urlExpression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.UrlBinding::UrlExpression()" />*/
	urlExpression: function (value) {
		if (arguments.length === 1) {
			this._urlExpression = value;
			return value;
		} else {
			return this._urlExpression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.UrlBinding::UrlExpression()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.globalFilterId(other.globalFilterId());
		this.urlExpression(other.urlExpression());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.globalFilterId($.ig.JsonUtility.prototype.loadString(json, "GlobalFilterId"));
		this.urlExpression($.ig.JsonUtility.prototype.loadString(json, "UrlExpression"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.UrlBinding::Clone()" />*/
	clone: function () {
		return new $.ig.UrlBinding(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.UrlBinding::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.UrlBinding::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "GlobalFilterId", this.globalFilterId());
		$.ig.JsonUtility.prototype.saveObject(json, "UrlExpression", this.urlExpression());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.UrlBinding::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.UrlBinding Infragistics.ReportPlus.DashboardModel.UrlBinding::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.UrlBinding(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.UrlBinding Infragistics.ReportPlus.DashboardModel.UrlBinding::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('UrlBinding', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.UrlBinding" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle" />*/

$.ig.util.defType('VisualizationColumnStyle', 'Object', {
	_columnName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::ColumnName()" />*/
	columnName: function (value) {
		if (arguments.length === 1) {
			this._columnName = value;
			return value;
		} else {
			return this._columnName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::ColumnName()" />*/
	,
	_width: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::Width()" />*/
	,
	_textAlignment: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::TextAlignment()" />*/
	textAlignment: function (value) {
		if (arguments.length === 1) {
			this._textAlignment = value;
			return value;
		} else {
			return this._textAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::TextAlignment()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.textAlignment($.ig.DashboardTextAlignment.prototype.inherit);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.columnName(other.columnName());
		this.width(other.width());
		this.textAlignment(other.textAlignment());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.columnName($.ig.JsonUtility.prototype.loadString(json, "ColumnName"));
		this.width($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Width"));
		this.textAlignment($.ig.DashboardEnumDeserialization.prototype.readTextAlignment($.ig.JsonUtility.prototype.loadString(json, "TextAlignment")));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::Clone()" />*/
	clone: function () {
		return new $.ig.VisualizationColumnStyle(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "ColumnName", this.columnName());
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Width", this.width());
		$.ig.JsonUtility.prototype.saveObject(json, "TextAlignment", $.ig.DashboardEnumSerialization.prototype.writeTextAlignment(this.textAlignment()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.VisualizationColumnStyle(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('VisualizationColumnStyle', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.VisualizationColumnStyle" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.Widget" />*/

$.ig.util.defType('Widget', 'Object', {
	_id: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Widget::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			this._id = value;
			return value;
		} else {
			return this._id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Widget::Id()" />*/
	,
	_rowSpan: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.Widget::RowSpan()" />*/
	rowSpan: function (value) {
		if (arguments.length === 1) {
			this._rowSpan = value;
			return value;
		} else {
			return this._rowSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.Widget::RowSpan()" />*/
	,
	_columnSpan: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.Widget::ColumnSpan()" />*/
	columnSpan: function (value) {
		if (arguments.length === 1) {
			this._columnSpan = value;
			return value;
		} else {
			return this._columnSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.Widget::ColumnSpan()" />*/
	,
	_isTitleVisible: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Widget::IsTitleVisible()" />*/
	isTitleVisible: function (value) {
		if (arguments.length === 1) {
			this._isTitleVisible = value;
			return value;
		} else {
			return this._isTitleVisible;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.Widget::IsTitleVisible()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Widget::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.Widget::Title()" />*/
	,
	_dataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.Widget::DataSpec()" />*/
	dataSpec: function (value) {
		if (arguments.length === 1) {
			this._dataSpec = value;
			return value;
		} else {
			return this._dataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DashboardModel.Widget::DataSpec()" />*/
	,
	_visualizationSettings: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DashboardModel.Widget::VisualizationSettings()" />*/
	visualizationSettings: function (value) {
		if (arguments.length === 1) {
			this._visualizationSettings = value;
			return value;
		} else {
			return this._visualizationSettings;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DashboardModel.Widget::VisualizationSettings()" />*/
	,
	_visualizationDataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.Widget::VisualizationDataSpec()" />*/
	visualizationDataSpec: function (value) {
		if (arguments.length === 1) {
			this._visualizationDataSpec = value;
			return value;
		} else {
			return this._visualizationDataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DashboardModel.Widget::VisualizationDataSpec()" />*/
	,
	_actionsModel: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ActionsModel Infragistics.ReportPlus.DashboardModel.Widget::ActionsModel()" />*/
	actionsModel: function (value) {
		if (arguments.length === 1) {
			this._actionsModel = value;
			return value;
		} else {
			return this._actionsModel;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ActionsModel Infragistics.ReportPlus.DashboardModel.Widget::ActionsModel()" />*/
	,
	_postTransformations: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Widget::PostTransformations()" />*/
	postTransformations: function (value) {
		if (arguments.length === 1) {
			this._postTransformations = value;
			return value;
		} else {
			return this._postTransformations;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.Widget::PostTransformations()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.postTransformations(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.id(other.id());
		this.rowSpan(other.rowSpan());
		this.columnSpan(other.columnSpan());
		this.isTitleVisible(other.isTitleVisible());
		this.title(other.title());
		this.dataSpec($.ig.CloneUtils.prototype.cloneObject(other.dataSpec()));
		this.visualizationSettings($.ig.CloneUtils.prototype.cloneObject(other.visualizationSettings()));
		this.visualizationDataSpec($.ig.CloneUtils.prototype.cloneObject(other.visualizationDataSpec()));
		this.actionsModel($.ig.CloneUtils.prototype.cloneObject(other.actionsModel()));
		this.postTransformations($.ig.CloneListUtils.prototype.cloneList(other.postTransformations(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.id($.ig.JsonUtility.prototype.loadString(json, "Id"));
		this.rowSpan($.ig.JsonUtility.prototype.loadInt(json, "RowSpan"));
		this.columnSpan($.ig.JsonUtility.prototype.loadInt(json, "ColumnSpan"));
		this.isTitleVisible($.ig.JsonUtility.prototype.loadBool(json, "IsTitleVisible"));
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSpec")) {
			this.dataSpec($.ig.DataSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSpec"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "VisualizationSettings")) {
			this.visualizationSettings($.ig.VisualizationSettings.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["VisualizationSettings"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "VisualizationDataSpec")) {
			this.visualizationDataSpec($.ig.VisualizationDataSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["VisualizationDataSpec"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "ActionsModel")) {
			this.actionsModel(new $.ig.ActionsModel(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ActionsModel"])));
		}
		this.postTransformations(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "PostTransformations")) {
			var jsonPostTransformations = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "PostTransformations");
			var jsonListSize = jsonPostTransformations.length;
			for (var i = 0; i < jsonListSize; i++) {
				var postTransformationInstance = $.ig.PostTransformation.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonPostTransformations[i]));
				if (postTransformationInstance != null) {
					this.postTransformations().add(postTransformationInstance);
				}
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Widget::Clone()" />*/
	clone: function () {
		return new $.ig.Widget(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.Widget::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Widget::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveInt(json, "RowSpan", this.rowSpan());
		$.ig.JsonUtility.prototype.saveInt(json, "ColumnSpan", this.columnSpan());
		$.ig.JsonUtility.prototype.saveBool(json, "IsTitleVisible", this.isTitleVisible());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "VisualizationSettings", this.visualizationSettings());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "VisualizationDataSpec", this.visualizationDataSpec());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ActionsModel", this.actionsModel());
		$.ig.JsonUtility.prototype.saveContainer(json, "PostTransformations", this.postTransformations());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.Widget::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DashboardModel.Widget::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.Widget(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DashboardModel.Widget::FromJson(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.Widget::GetXmlaQuickFilter(System.String)" />*/
	getXmlaQuickFilter: function (filterId) {
		if (this.dataSpec() == null || !($.ig.util.cast($.ig.XmlaDataSpec.prototype.$type, this.dataSpec()) !== null)) {
			return null;
		}
		return (this.dataSpec()).getXmlaQuickFilter(filterId);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.Widget::GetXmlaQuickFilter(System.String)" />*/
	,
	$type: new $.ig.Type('Widget', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.Widget" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaDataSpec" />*/

$.ig.util.defType('XmlaDataSpec', 'DataSpec', {
	_showGrandTotals: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::ShowGrandTotals()" />*/
	showGrandTotals: function (value) {
		if (arguments.length === 1) {
			this._showGrandTotals = value;
			return value;
		} else {
			return this._showGrandTotals;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::ShowGrandTotals()" />*/
	,
	_rows: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Rows()" />*/
	rows: function (value) {
		if (arguments.length === 1) {
			this._rows = value;
			return value;
		} else {
			return this._rows;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Rows()" />*/
	,
	_columns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Columns()" />*/
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Columns()" />*/
	,
	_measures: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Measures()" />*/
	measures: function (value) {
		if (arguments.length === 1) {
			this._measures = value;
			return value;
		} else {
			return this._measures;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Measures()" />*/
	,
	_filters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Filters()" />*/
	filters: function (value) {
		if (arguments.length === 1) {
			this._filters = value;
			return value;
		} else {
			return this._filters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Filters()" />*/
	,
	_dataFilters: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::DataFilters()" />*/
	dataFilters: function (value) {
		if (arguments.length === 1) {
			this._dataFilters = value;
			return value;
		} else {
			return this._dataFilters;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::DataFilters()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSpec.prototype.init.call(this, 0);
		this.rows(new $.ig.Array());
		this.columns(new $.ig.Array());
		this.measures(new $.ig.Array());
		this.filters(new $.ig.Array());
		this.dataFilters(new $.ig.Array());
	},
	init1: function (initNumber, other) {
		$.ig.DataSpec.prototype.init1.call(this, 1, other);
		this.showGrandTotals(other.showGrandTotals());
		this.rows($.ig.CloneListUtils.prototype.cloneList(other.rows(), new $.ig.Array()));
		this.columns($.ig.CloneListUtils.prototype.cloneList(other.columns(), new $.ig.Array()));
		this.measures($.ig.CloneListUtils.prototype.cloneList(other.measures(), new $.ig.Array()));
		this.filters($.ig.CloneListUtils.prototype.cloneList(other.filters(), new $.ig.Array()));
		this.dataFilters($.ig.CloneListUtils.prototype.cloneList(other.dataFilters(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.DataSpec.prototype.init2.call(this, 2, json);
		this.showGrandTotals($.ig.JsonUtility.prototype.loadBool(json, "ShowGrandTotals"));
		this.rows(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Rows")) {
			var jsonRows = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Rows");
			var jsonListSize = jsonRows.length;
			for (var i = 0; i < jsonListSize; i++) {
				var xmlaDimensionElementInstance = $.ig.XmlaDimensionElement.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonRows[i]));
				if (xmlaDimensionElementInstance != null) {
					this.rows().add(xmlaDimensionElementInstance);
				}
			}
		}
		this.columns(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Columns")) {
			var jsonColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Columns");
			var jsonListSize1 = jsonColumns.length;
			for (var i1 = 0; i1 < jsonListSize1; i1++) {
				var xmlaDimensionElementInstance1 = $.ig.XmlaDimensionElement.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonColumns[i1]));
				if (xmlaDimensionElementInstance1 != null) {
					this.columns().add(xmlaDimensionElementInstance1);
				}
			}
		}
		this.measures(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Measures")) {
			var jsonMeasures = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Measures");
			var jsonListSize2 = jsonMeasures.length;
			for (var i2 = 0; i2 < jsonListSize2; i2++) {
				this.measures().add(new $.ig.XmlaMeasure(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonMeasures[i2])));
			}
		}
		this.filters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Filters")) {
			var jsonFilters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Filters");
			var jsonListSize3 = jsonFilters.length;
			for (var i3 = 0; i3 < jsonListSize3; i3++) {
				var xmlaDimensionElementInstance2 = $.ig.XmlaDimensionElement.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonFilters[i3]));
				if (xmlaDimensionElementInstance2 != null) {
					this.filters().add(xmlaDimensionElementInstance2);
				}
			}
		}
		this.dataFilters(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataFilters")) {
			var jsonDataFilters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DataFilters");
			var jsonListSize4 = jsonDataFilters.length;
			for (var i4 = 0; i4 < jsonListSize4; i4++) {
				var xmlaDimensionElementInstance3 = $.ig.XmlaDimensionElement.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonDataFilters[i4]));
				if (xmlaDimensionElementInstance3 != null) {
					this.dataFilters().add(xmlaDimensionElementInstance3);
				}
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaDataSpec(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		$.ig.JsonUtility.prototype.saveInt(json, "Expiration", this.expiration());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Bindings", this.bindings());
		$.ig.JsonUtility.prototype.saveBool(json, "ShowGrandTotals", this.showGrandTotals());
		$.ig.JsonUtility.prototype.saveContainer(json, "Rows", this.rows());
		$.ig.JsonUtility.prototype.saveContainer(json, "Columns", this.columns());
		$.ig.JsonUtility.prototype.saveContainer(json, "Measures", this.measures());
		$.ig.JsonUtility.prototype.saveContainer(json, "Filters", this.filters());
		$.ig.JsonUtility.prototype.saveContainer(json, "DataFilters", this.dataFilters());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::GetXmlaQuickFilter(System.String)" />*/
	getXmlaQuickFilter: function (filterId) {
		if (filterId == null) {
			return null;
		}
		var filter = $.ig.DashboardModelUtils.prototype.getXmlaElement(this.filters(), filterId);
		if (filter == null) {
			filter = $.ig.DashboardModelUtils.prototype.getXmlaElement(this.dataFilters(), filterId);
		}
		return filter;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::GetXmlaQuickFilter(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsDateAggregation()" />*/
	supportsDateAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsDateAggregation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsDataFilters()" />*/
	supportsDataFilters: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsDataFilters()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::IsTabular()" />*/
	isTabular: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::IsTabular()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::IsXmla()" />*/
	isXmla: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::IsXmla()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsNumericAggregation()" />*/
	supportsNumericAggregation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDataSpec::SupportsNumericAggregation()" />*/
	,
	$type: new $.ig.Type('XmlaDataSpec', $.ig.DataSpec.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaDataSpec" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaDateFilter" />*/

$.ig.util.defType('XmlaDateFilter', 'Filter', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::RuleType()" />*/
	,
	_customDateRange: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::CustomDateRange()" />*/
	customDateRange: function (value) {
		if (arguments.length === 1) {
			this._customDateRange = value;
			return value;
		} else {
			return this._customDateRange;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::CustomDateRange()" />*/
	,
	_includeToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::IncludeToday()" />*/
	includeToday: function (value) {
		if (arguments.length === 1) {
			this._includeToday = value;
			return value;
		} else {
			return this._includeToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::IncludeToday()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardDateRuleType.prototype.allTime);
		this.includeToday(true);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.customDateRange($.ig.CloneUtils.prototype.cloneObject(other.customDateRange()));
		this.includeToday(other.includeToday());
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readDateRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CustomDateRange")) {
			this.customDateRange(new $.ig.DateRange(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["CustomDateRange"])));
		}
		this.includeToday($.ig.JsonUtility.prototype.loadBool1(json, "IncludeToday", true));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaDateFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeDateRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveJsonObject(json, "CustomDateRange", this.customDateRange());
		$.ig.JsonUtility.prototype.saveBool(json, "IncludeToday", this.includeToday());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDateFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaDateFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaDateFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement" />*/

$.ig.util.defType('XmlaDimensionElement', 'Object', {
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::UniqueName()" />*/
	,
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::Caption()" />*/
	,
	_userCaption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::UserCaption()" />*/
	userCaption: function (value) {
		if (arguments.length === 1) {
			this._userCaption = value;
			return value;
		} else {
			return this._userCaption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::UserCaption()" />*/
	,
	_dimensionUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DimensionUniqueName()" />*/
	dimensionUniqueName: function (value) {
		if (arguments.length === 1) {
			this._dimensionUniqueName = value;
			return value;
		} else {
			return this._dimensionUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DimensionUniqueName()" />*/
	,
	_dimensionType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DimensionType()" />*/
	dimensionType: function (value) {
		if (arguments.length === 1) {
			this._dimensionType = value;
			return value;
		} else {
			return this._dimensionType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DimensionType()" />*/
	,
	_drillDownElements: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DrillDownElements()" />*/
	drillDownElements: function (value) {
		if (arguments.length === 1) {
			this._drillDownElements = value;
			return value;
		} else {
			return this._drillDownElements;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DrillDownElements()" />*/
	,
	_sorting: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			this._sorting = value;
			return value;
		} else {
			return this._sorting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::Sorting()" />*/
	,
	_fieldSortingByLabel: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FieldSortingByLabel()" />*/
	fieldSortingByLabel: function (value) {
		if (arguments.length === 1) {
			this._fieldSortingByLabel = value;
			return value;
		} else {
			return this._fieldSortingByLabel;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FieldSortingByLabel()" />*/
	,
	_xmlaFilter: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::XmlaFilter()" />*/
	xmlaFilter: function (value) {
		if (arguments.length === 1) {
			this._xmlaFilter = value;
			return value;
		} else {
			return this._xmlaFilter;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::XmlaFilter()" />*/
	,
	_fullyExpandedLevels: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FullyExpandedLevels()" />*/
	fullyExpandedLevels: function (value) {
		if (arguments.length === 1) {
			this._fullyExpandedLevels = value;
			return value;
		} else {
			return this._fullyExpandedLevels;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FullyExpandedLevels()" />*/
	,
	_expandedItems: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::ExpandedItems()" />*/
	expandedItems: function (value) {
		if (arguments.length === 1) {
			this._expandedItems = value;
			return value;
		} else {
			return this._expandedItems;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::ExpandedItems()" />*/
	,
	_dateAggregationType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DateAggregationType()" />*/
	dateAggregationType: function (value) {
		if (arguments.length === 1) {
			this._dateAggregationType = value;
			return value;
		} else {
			return this._dateAggregationType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DateAggregationType()" />*/
	,
	_dateFiscalYearStartMonth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DateFiscalYearStartMonth()" />*/
	dateFiscalYearStartMonth: function (value) {
		if (arguments.length === 1) {
			this._dateFiscalYearStartMonth = value;
			return value;
		} else {
			return this._dateFiscalYearStartMonth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DateFiscalYearStartMonth()" />*/
	,
	_drillDownMembers: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DrillDownMembers()" />*/
	drillDownMembers: function (value) {
		if (arguments.length === 1) {
			this._drillDownMembers = value;
			return value;
		} else {
			return this._drillDownMembers;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::DrillDownMembers()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.drillDownElements(new $.ig.Array());
		this.expandedItems(new $.ig.Array());
		this.drillDownMembers(new $.ig.Array());
		this.dimensionType($.ig.DashboardXmlaDimensionEnumType.prototype.regular);
		this.sorting($.ig.DashboardSortingType.prototype.none);
		this.dateAggregationType($.ig.DashboardDateAggregationType.prototype.year);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.uniqueName(other.uniqueName());
		this.caption(other.caption());
		this.userCaption(other.userCaption());
		this.dimensionUniqueName(other.dimensionUniqueName());
		this.dimensionType(other.dimensionType());
		this.drillDownElements($.ig.CloneListUtils.prototype.cloneList(other.drillDownElements(), new $.ig.Array()));
		this.sorting(other.sorting());
		this.fieldSortingByLabel(other.fieldSortingByLabel());
		this.xmlaFilter($.ig.CloneUtils.prototype.cloneObject(other.xmlaFilter()));
		this.fullyExpandedLevels(other.fullyExpandedLevels());
		this.expandedItems($.ig.CloneListUtils.prototype.cloneList(other.expandedItems(), new $.ig.Array()));
		this.dateAggregationType(other.dateAggregationType());
		this.dateFiscalYearStartMonth(other.dateFiscalYearStartMonth());
		this.drillDownMembers($.ig.CloneListUtils.prototype.cloneList(other.drillDownMembers(), new $.ig.Array()));
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.caption($.ig.JsonUtility.prototype.loadString(json, "Caption"));
		this.userCaption($.ig.JsonUtility.prototype.loadString(json, "UserCaption"));
		this.dimensionUniqueName($.ig.JsonUtility.prototype.loadString(json, "DimensionUniqueName"));
		this.dimensionType($.ig.DashboardEnumDeserialization.prototype.readXmlaDimensionEnumType($.ig.JsonUtility.prototype.loadString(json, "DimensionType")));
		this.drillDownElements($.ig.JsonUtility.prototype.loadStringList(json, "DrillDownElements"));
		this.sorting($.ig.DashboardEnumDeserialization.prototype.readSortingType($.ig.JsonUtility.prototype.loadString(json, "Sorting")));
		this.fieldSortingByLabel($.ig.JsonUtility.prototype.loadBool(json, "FieldSortingByLabel"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "XmlaFilter")) {
			this.xmlaFilter(new $.ig.XmlaFilter(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["XmlaFilter"])));
		}
		this.fullyExpandedLevels($.ig.JsonUtility.prototype.loadInt(json, "FullyExpandedLevels"));
		this.expandedItems($.ig.JsonUtility.prototype.loadStringList(json, "ExpandedItems"));
		this.dateAggregationType($.ig.DashboardEnumDeserialization.prototype.readDateAggregationType($.ig.JsonUtility.prototype.loadString(json, "DateAggregationType")));
		this.dateFiscalYearStartMonth($.ig.JsonUtility.prototype.loadInt(json, "DateFiscalYearStartMonth"));
		this.drillDownMembers(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "DrillDownMembers")) {
			var jsonDrillDownMembers = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DrillDownMembers");
			var jsonListSize = jsonDrillDownMembers.length;
			for (var i = 0; i < jsonListSize; i++) {
				this.drillDownMembers().add(new $.ig.XmlaMember(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonDrillDownMembers[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "XmlaDimensionType") {
			return new $.ig.XmlaDimension(2, json);
		} else if (instanceType == "XmlaHierarchyLevelType") {
			return new $.ig.XmlaHierarchyLevel(2, json);
		} else if (instanceType == "XmlaHierarchyType") {
			return new $.ig.XmlaHierarchy(2, json);
		} else if (instanceType == "XmlaSetType") {
			return new $.ig.XmlaSet(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('XmlaDimensionElement', $.ig.Object.prototype.$type, [$.ig.IJSONSerializable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaDimension" />*/

$.ig.util.defType('XmlaDimension', 'XmlaDimensionElement', {
	_defaultHierarchy: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimension::DefaultHierarchy()" />*/
	defaultHierarchy: function (value) {
		if (arguments.length === 1) {
			this._defaultHierarchy = value;
			return value;
		} else {
			return this._defaultHierarchy;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaDimension::DefaultHierarchy()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaDimensionElement.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaDimensionElement.prototype.init1.call(this, 1, other);
		this.defaultHierarchy(other.defaultHierarchy());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaDimensionElement.prototype.init2.call(this, 2, json);
		this.defaultHierarchy($.ig.JsonUtility.prototype.loadString(json, "DefaultHierarchy"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDimension::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaDimension(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaDimension::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDimension::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "UserCaption", this.userCaption());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionUniqueName", this.dimensionUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionType", $.ig.DashboardEnumSerialization.prototype.writeXmlaDimensionEnumType(this.dimensionType()));
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveBool(json, "FieldSortingByLabel", this.fieldSortingByLabel());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaFilter", this.xmlaFilter());
		$.ig.JsonUtility.prototype.saveInt(json, "FullyExpandedLevels", this.fullyExpandedLevels());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "DateAggregationType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.dateAggregationType()));
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveContainer(json, "DrillDownMembers", this.drillDownMembers());
		$.ig.JsonUtility.prototype.saveObject(json, "DefaultHierarchy", this.defaultHierarchy());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaDimension::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaDimension', $.ig.XmlaDimensionElement.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaDimension" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule" />*/

$.ig.util.defType('XmlaFilterRule', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaFilterRule::ToJson()" />*/
	toJson: function () {
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaFilterRule::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule Infragistics.ReportPlus.DashboardModel.XmlaFilterRule::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var instanceType = json["_type"];
		if (instanceType == "XmlaNumberFilterRuleType") {
			return new $.ig.XmlaNumberFilterRule(2, json);
		} else if (instanceType == "XmlaStringFilterRuleType") {
			return new $.ig.XmlaStringFilterRule(2, json);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule Infragistics.ReportPlus.DashboardModel.XmlaFilterRule::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('XmlaFilterRule', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter" />*/

$.ig.util.defType('XmlaFilter', 'Object', {
	_filter: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.XmlaFilter::Filter()" />*/
	filter: function (value) {
		if (arguments.length === 1) {
			this._filter = value;
			return value;
		} else {
			return this._filter;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DashboardModel.XmlaFilter::Filter()" />*/
	,
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaFilter::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaFilter::UniqueName()" />*/
	,
	_dataType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.XmlaFilter::DataType()" />*/
	dataType: function (value) {
		if (arguments.length === 1) {
			this._dataType = value;
			return value;
		} else {
			return this._dataType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DashboardModel.XmlaFilter::DataType()" />*/
	,
	_elementType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType Infragistics.ReportPlus.DashboardModel.XmlaFilter::ElementType()" />*/
	elementType: function (value) {
		if (arguments.length === 1) {
			this._elementType = value;
			return value;
		} else {
			return this._elementType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType Infragistics.ReportPlus.DashboardModel.XmlaFilter::ElementType()" />*/
	,
	_isDynamic: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaFilter::IsDynamic()" />*/
	isDynamic: function (value) {
		if (arguments.length === 1) {
			this._isDynamic = value;
			return value;
		} else {
			return this._isDynamic;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaFilter::IsDynamic()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.dataType($.ig.DashboardDataType.prototype.string1);
		this.elementType($.ig.DashboardXmlaElementType.prototype.dimension);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.filter($.ig.CloneUtils.prototype.cloneObject(other.filter()));
		this.uniqueName(other.uniqueName());
		this.dataType(other.dataType());
		this.elementType(other.elementType());
		this.isDynamic(other.isDynamic());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		if ($.ig.JsonUtility.prototype.containsKey(json, "Filter")) {
			this.filter($.ig.Filter.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Filter"])));
		}
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.dataType($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "DataType")));
		this.elementType($.ig.DashboardEnumDeserialization.prototype.readXmlaElementType($.ig.JsonUtility.prototype.loadString(json, "ElementType")));
		this.isDynamic($.ig.JsonUtility.prototype.loadBool(json, "IsDynamic"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaFilter::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Filter", this.filter());
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DataType", $.ig.DashboardEnumSerialization.prototype.writeDataType(this.dataType()));
		$.ig.JsonUtility.prototype.saveObject(json, "ElementType", $.ig.DashboardEnumSerialization.prototype.writeXmlaElementType(this.elementType()));
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaFilter::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DashboardModel.XmlaFilter::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.XmlaFilter(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DashboardModel.XmlaFilter::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('XmlaFilter', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter" />*/

$.ig.util.defType('XmlaGlobalFilter', 'DataSourceBasedGlobalFilter', {
	_dataSourceItem: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::DataSourceItem()" />*/
	dataSourceItem: function (value) {
		if (arguments.length === 1) {
			this._dataSourceItem = value;
			return value;
		} else {
			return this._dataSourceItem;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::DataSourceItem()" />*/
	,
	_dimensionUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::DimensionUniqueName()" />*/
	dimensionUniqueName: function (value) {
		if (arguments.length === 1) {
			this._dimensionUniqueName = value;
			return value;
		} else {
			return this._dimensionUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::DimensionUniqueName()" />*/
	,
	_hierarchyUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::HierarchyUniqueName()" />*/
	hierarchyUniqueName: function (value) {
		if (arguments.length === 1) {
			this._hierarchyUniqueName = value;
			return value;
		} else {
			return this._hierarchyUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::HierarchyUniqueName()" />*/
	,
	_levelUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::LevelUniqueName()" />*/
	levelUniqueName: function (value) {
		if (arguments.length === 1) {
			this._levelUniqueName = value;
			return value;
		} else {
			return this._levelUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::LevelUniqueName()" />*/
	,
	_measureUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::MeasureUniqueName()" />*/
	measureUniqueName: function (value) {
		if (arguments.length === 1) {
			this._measureUniqueName = value;
			return value;
		} else {
			return this._measureUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::MeasureUniqueName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSourceBasedGlobalFilter.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataSourceBasedGlobalFilter.prototype.init1.call(this, 1, other);
		this.dataSourceItem($.ig.CloneUtils.prototype.cloneObject(other.dataSourceItem()));
		this.dimensionUniqueName(other.dimensionUniqueName());
		this.hierarchyUniqueName(other.hierarchyUniqueName());
		this.levelUniqueName(other.levelUniqueName());
		this.measureUniqueName(other.measureUniqueName());
	},
	init2: function (initNumber, json) {
		$.ig.DataSourceBasedGlobalFilter.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSourceItem")) {
			this.dataSourceItem($.ig.BaseDataSourceItem.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSourceItem"])));
		}
		this.dimensionUniqueName($.ig.JsonUtility.prototype.loadString(json, "DimensionUniqueName"));
		this.hierarchyUniqueName($.ig.JsonUtility.prototype.loadString(json, "HierarchyUniqueName"));
		this.levelUniqueName($.ig.JsonUtility.prototype.loadString(json, "LevelUniqueName"));
		this.measureUniqueName($.ig.JsonUtility.prototype.loadString(json, "MeasureUniqueName"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaGlobalFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveBool(json, "IsDynamic", this.isDynamic());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowMultipleSelection", this.allowMultipleSelection());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowEmptySelection", this.allowEmptySelection());
		$.ig.JsonUtility.prototype.saveBool(json, "SortByLabel", this.sortByLabel());
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedItems", this.selectedItems());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionUniqueName", this.dimensionUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "HierarchyUniqueName", this.hierarchyUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "LevelUniqueName", this.levelUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "MeasureUniqueName", this.measureUniqueName());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaGlobalFilter', $.ig.DataSourceBasedGlobalFilter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaGlobalFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel" />*/

$.ig.util.defType('XmlaHierarchyLevel', 'XmlaDimensionElement', {
	_hierarchyUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::HierarchyUniqueName()" />*/
	hierarchyUniqueName: function (value) {
		if (arguments.length === 1) {
			this._hierarchyUniqueName = value;
			return value;
		} else {
			return this._hierarchyUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::HierarchyUniqueName()" />*/
	,
	_levelNumber: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::LevelNumber()" />*/
	levelNumber: function (value) {
		if (arguments.length === 1) {
			this._levelNumber = value;
			return value;
		} else {
			return this._levelNumber;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::LevelNumber()" />*/
	,
	_cardinality: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::Cardinality()" />*/
	cardinality: function (value) {
		if (arguments.length === 1) {
			this._cardinality = value;
			return value;
		} else {
			return this._cardinality;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::Cardinality()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaDimensionElement.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaDimensionElement.prototype.init1.call(this, 1, other);
		this.hierarchyUniqueName(other.hierarchyUniqueName());
		this.levelNumber(other.levelNumber());
		this.cardinality(other.cardinality());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaDimensionElement.prototype.init2.call(this, 2, json);
		this.hierarchyUniqueName($.ig.JsonUtility.prototype.loadString(json, "HierarchyUniqueName"));
		this.levelNumber($.ig.JsonUtility.prototype.loadInt(json, "LevelNumber"));
		this.cardinality($.ig.JsonUtility.prototype.loadInt(json, "Cardinality"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaHierarchyLevel(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "UserCaption", this.userCaption());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionUniqueName", this.dimensionUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionType", $.ig.DashboardEnumSerialization.prototype.writeXmlaDimensionEnumType(this.dimensionType()));
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveBool(json, "FieldSortingByLabel", this.fieldSortingByLabel());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaFilter", this.xmlaFilter());
		$.ig.JsonUtility.prototype.saveInt(json, "FullyExpandedLevels", this.fullyExpandedLevels());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "DateAggregationType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.dateAggregationType()));
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveContainer(json, "DrillDownMembers", this.drillDownMembers());
		$.ig.JsonUtility.prototype.saveObject(json, "HierarchyUniqueName", this.hierarchyUniqueName());
		$.ig.JsonUtility.prototype.saveInt(json, "LevelNumber", this.levelNumber());
		$.ig.JsonUtility.prototype.saveInt(json, "Cardinality", this.cardinality());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaHierarchyLevel', $.ig.XmlaDimensionElement.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaHierarchyLevel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaHierarchy" />*/

$.ig.util.defType('XmlaHierarchy', 'XmlaDimensionElement', {
	_origin: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Origin()" />*/
	origin: function (value) {
		if (arguments.length === 1) {
			this._origin = value;
			return value;
		} else {
			return this._origin;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Origin()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Description()" />*/
	,
	_cardinality: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Cardinality()" />*/
	cardinality: function (value) {
		if (arguments.length === 1) {
			this._cardinality = value;
			return value;
		} else {
			return this._cardinality;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Cardinality()" />*/
	,
	_displayFolder: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::DisplayFolder()" />*/
	displayFolder: function (value) {
		if (arguments.length === 1) {
			this._displayFolder = value;
			return value;
		} else {
			return this._displayFolder;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::DisplayFolder()" />*/
	,
	_allMember: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::AllMember()" />*/
	allMember: function (value) {
		if (arguments.length === 1) {
			this._allMember = value;
			return value;
		} else {
			return this._allMember;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::AllMember()" />*/
	,
	_defaultMember: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::DefaultMember()" />*/
	defaultMember: function (value) {
		if (arguments.length === 1) {
			this._defaultMember = value;
			return value;
		} else {
			return this._defaultMember;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::DefaultMember()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaDimensionElement.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaDimensionElement.prototype.init1.call(this, 1, other);
		this.origin(other.origin());
		this.description(other.description());
		this.cardinality(other.cardinality());
		this.displayFolder(other.displayFolder());
		this.allMember(other.allMember());
		this.defaultMember(other.defaultMember());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaDimensionElement.prototype.init2.call(this, 2, json);
		this.origin($.ig.JsonUtility.prototype.loadInt(json, "Origin"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.cardinality($.ig.JsonUtility.prototype.loadOptionalInt(json, "Cardinality"));
		this.displayFolder($.ig.JsonUtility.prototype.loadString(json, "DisplayFolder"));
		this.allMember($.ig.JsonUtility.prototype.loadString(json, "AllMember"));
		this.defaultMember($.ig.JsonUtility.prototype.loadString(json, "DefaultMember"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaHierarchy(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "UserCaption", this.userCaption());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionUniqueName", this.dimensionUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionType", $.ig.DashboardEnumSerialization.prototype.writeXmlaDimensionEnumType(this.dimensionType()));
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveBool(json, "FieldSortingByLabel", this.fieldSortingByLabel());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaFilter", this.xmlaFilter());
		$.ig.JsonUtility.prototype.saveInt(json, "FullyExpandedLevels", this.fullyExpandedLevels());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "DateAggregationType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.dateAggregationType()));
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveContainer(json, "DrillDownMembers", this.drillDownMembers());
		$.ig.JsonUtility.prototype.saveInt(json, "Origin", this.origin());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "Cardinality", this.cardinality());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayFolder", this.displayFolder());
		$.ig.JsonUtility.prototype.saveObject(json, "AllMember", this.allMember());
		$.ig.JsonUtility.prototype.saveObject(json, "DefaultMember", this.defaultMember());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaHierarchy::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaHierarchy', $.ig.XmlaDimensionElement.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaHierarchy" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure" />*/

$.ig.util.defType('XmlaMeasure', 'Object', {
	_isHidden: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaMeasure::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			this._isHidden = value;
			return value;
		} else {
			return this._isHidden;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaMeasure::IsHidden()" />*/
	,
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::UniqueName()" />*/
	,
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Caption()" />*/
	,
	_displayFolder: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::DisplayFolder()" />*/
	displayFolder: function (value) {
		if (arguments.length === 1) {
			this._displayFolder = value;
			return value;
		} else {
			return this._displayFolder;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::DisplayFolder()" />*/
	,
	_measureGroupName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::MeasureGroupName()" />*/
	measureGroupName: function (value) {
		if (arguments.length === 1) {
			this._measureGroupName = value;
			return value;
		} else {
			return this._measureGroupName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::MeasureGroupName()" />*/
	,
	_userCaption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::UserCaption()" />*/
	userCaption: function (value) {
		if (arguments.length === 1) {
			this._userCaption = value;
			return value;
		} else {
			return this._userCaption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::UserCaption()" />*/
	,
	_isCalculated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaMeasure::IsCalculated()" />*/
	isCalculated: function (value) {
		if (arguments.length === 1) {
			this._isCalculated = value;
			return value;
		} else {
			return this._isCalculated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.XmlaMeasure::IsCalculated()" />*/
	,
	_expression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Expression()" />*/
	expression: function (value) {
		if (arguments.length === 1) {
			this._expression = value;
			return value;
		} else {
			return this._expression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Expression()" />*/
	,
	_formatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Formatting()" />*/
	formatting: function (value) {
		if (arguments.length === 1) {
			this._formatting = value;
			return value;
		} else {
			return this._formatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Formatting()" />*/
	,
	_conditionalFormatting: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.XmlaMeasure::ConditionalFormatting()" />*/
	conditionalFormatting: function (value) {
		if (arguments.length === 1) {
			this._conditionalFormatting = value;
			return value;
		} else {
			return this._conditionalFormatting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DashboardModel.XmlaMeasure::ConditionalFormatting()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Description()" />*/
	,
	_sorting: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Sorting()" />*/
	sorting: function (value) {
		if (arguments.length === 1) {
			this._sorting = value;
			return value;
		} else {
			return this._sorting;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Sorting()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.sorting($.ig.DashboardSortingType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.isHidden(other.isHidden());
		this.uniqueName(other.uniqueName());
		this.caption(other.caption());
		this.displayFolder(other.displayFolder());
		this.measureGroupName(other.measureGroupName());
		this.userCaption(other.userCaption());
		this.isCalculated(other.isCalculated());
		this.expression(other.expression());
		this.formatting($.ig.CloneUtils.prototype.cloneObject(other.formatting()));
		this.conditionalFormatting($.ig.CloneUtils.prototype.cloneObject(other.conditionalFormatting()));
		this.description(other.description());
		this.sorting(other.sorting());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.isHidden($.ig.JsonUtility.prototype.loadBool(json, "IsHidden"));
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.caption($.ig.JsonUtility.prototype.loadString(json, "Caption"));
		this.displayFolder($.ig.JsonUtility.prototype.loadString(json, "DisplayFolder"));
		this.measureGroupName($.ig.JsonUtility.prototype.loadString(json, "MeasureGroupName"));
		this.userCaption($.ig.JsonUtility.prototype.loadString(json, "UserCaption"));
		this.isCalculated($.ig.JsonUtility.prototype.loadBool(json, "IsCalculated"));
		this.expression($.ig.JsonUtility.prototype.loadString(json, "Expression"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Formatting")) {
			this.formatting($.ig.FormattingSpec.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["Formatting"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "ConditionalFormatting")) {
			this.conditionalFormatting(new $.ig.ConditionalFormattingSpec(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ConditionalFormatting"])));
		}
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.sorting($.ig.DashboardEnumDeserialization.prototype.readSortingType($.ig.JsonUtility.prototype.loadString(json, "Sorting")));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaMeasure(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMeasure::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMeasure::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveBool(json, "IsHidden", this.isHidden());
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayFolder", this.displayFolder());
		$.ig.JsonUtility.prototype.saveObject(json, "MeasureGroupName", this.measureGroupName());
		$.ig.JsonUtility.prototype.saveObject(json, "UserCaption", this.userCaption());
		$.ig.JsonUtility.prototype.saveBool(json, "IsCalculated", this.isCalculated());
		$.ig.JsonUtility.prototype.saveObject(json, "Expression", this.expression());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "Formatting", this.formatting());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ConditionalFormatting", this.conditionalFormatting());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMeasure::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DashboardModel.XmlaMeasure::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.XmlaMeasure(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DashboardModel.XmlaMeasure::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('XmlaMeasure', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaMember" />*/

$.ig.util.defType('XmlaMember', 'Object', {
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMember::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMember::UniqueName()" />*/
	,
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMember::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMember::Caption()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.uniqueName(other.uniqueName());
		this.caption(other.caption());
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.caption($.ig.JsonUtility.prototype.loadString(json, "Caption"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMember::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaMember(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMember::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMember::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMember::ToJson()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMember Infragistics.ReportPlus.DashboardModel.XmlaMember::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		return new $.ig.XmlaMember(2, json);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMember Infragistics.ReportPlus.DashboardModel.XmlaMember::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('XmlaMember', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaMember" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule" />*/

$.ig.util.defType('XmlaNumberFilterRule', 'XmlaFilterRule', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::RuleType()" />*/
	,
	_value: $.ig.util.toNullable(Number, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaFilterRule.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardNumberRuleType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaFilterRule.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaFilterRule.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readNumberRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		this.value($.ig.JsonUtility.prototype.loadOptionalDouble(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaNumberFilterRule(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeNumberRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveOptionalDouble(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaNumberFilterRule', $.ig.XmlaFilterRule.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaNumberFilterRule" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter" />*/

$.ig.util.defType('XmlaRegularFilter', 'Filter', {
	_filterRule: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::FilterRule()" />*/
	filterRule: function (value) {
		if (arguments.length === 1) {
			this._filterRule = value;
			return value;
		} else {
			return this._filterRule;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaFilterRule Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::FilterRule()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Filter.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.Filter.prototype.init1.call(this, 1, other);
		this.filterRule($.ig.CloneUtils.prototype.cloneObject(other.filterRule()));
	},
	init2: function (initNumber, json) {
		$.ig.Filter.prototype.init2.call(this, 2, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "FilterRule")) {
			this.filterRule($.ig.XmlaFilterRule.prototype.fromJson($.ig.NativeDataLayerUtility.prototype.getJsonObject(json["FilterRule"])));
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaRegularFilter(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "FilterType", $.ig.DashboardEnumSerialization.prototype.writeFilterEnumType(this.filterType()));
		$.ig.JsonUtility.prototype.saveContainer(json, "SelectedValues", this.selectedValues());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "FilterRule", this.filterRule());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaRegularFilter', $.ig.Filter.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaRegularFilter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaSet" />*/

$.ig.util.defType('XmlaSet', 'XmlaDimensionElement', {
	_hierarchyUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaSet::HierarchyUniqueName()" />*/
	hierarchyUniqueName: function (value) {
		if (arguments.length === 1) {
			this._hierarchyUniqueName = value;
			return value;
		} else {
			return this._hierarchyUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaSet::HierarchyUniqueName()" />*/
	,
	_displayFolder: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaSet::DisplayFolder()" />*/
	displayFolder: function (value) {
		if (arguments.length === 1) {
			this._displayFolder = value;
			return value;
		} else {
			return this._displayFolder;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaSet::DisplayFolder()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaDimensionElement.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaDimensionElement.prototype.init1.call(this, 1, other);
		this.hierarchyUniqueName(other.hierarchyUniqueName());
		this.displayFolder(other.displayFolder());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaDimensionElement.prototype.init2.call(this, 2, json);
		this.hierarchyUniqueName($.ig.JsonUtility.prototype.loadString(json, "HierarchyUniqueName"));
		this.displayFolder($.ig.JsonUtility.prototype.loadString(json, "DisplayFolder"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaSet::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaSet(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaSet::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaSet::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "UserCaption", this.userCaption());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionUniqueName", this.dimensionUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DimensionType", $.ig.DashboardEnumSerialization.prototype.writeXmlaDimensionEnumType(this.dimensionType()));
		$.ig.JsonUtility.prototype.saveStringList(json, "DrillDownElements", this.drillDownElements());
		$.ig.JsonUtility.prototype.saveObject(json, "Sorting", $.ig.DashboardEnumSerialization.prototype.writeSortingType(this.sorting()));
		$.ig.JsonUtility.prototype.saveBool(json, "FieldSortingByLabel", this.fieldSortingByLabel());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "XmlaFilter", this.xmlaFilter());
		$.ig.JsonUtility.prototype.saveInt(json, "FullyExpandedLevels", this.fullyExpandedLevels());
		$.ig.JsonUtility.prototype.saveStringList(json, "ExpandedItems", this.expandedItems());
		$.ig.JsonUtility.prototype.saveObject(json, "DateAggregationType", $.ig.DashboardEnumSerialization.prototype.writeDateAggregationType(this.dateAggregationType()));
		$.ig.JsonUtility.prototype.saveInt(json, "DateFiscalYearStartMonth", this.dateFiscalYearStartMonth());
		$.ig.JsonUtility.prototype.saveContainer(json, "DrillDownMembers", this.drillDownMembers());
		$.ig.JsonUtility.prototype.saveObject(json, "HierarchyUniqueName", this.hierarchyUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayFolder", this.displayFolder());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaSet::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaSet', $.ig.XmlaDimensionElement.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaSet" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule" />*/

$.ig.util.defType('XmlaStringFilterRule', 'XmlaFilterRule', {
	_ruleType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::RuleType()" />*/
	ruleType: function (value) {
		if (arguments.length === 1) {
			this._ruleType = value;
			return value;
		} else {
			return this._ruleType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::RuleType()" />*/
	,
	_value: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::Value()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.XmlaFilterRule.prototype.init.call(this, 0);
		this.ruleType($.ig.DashboardStringRuleType.prototype.none);
	},
	init1: function (initNumber, other) {
		$.ig.XmlaFilterRule.prototype.init1.call(this, 1, other);
		this.ruleType(other.ruleType());
		this.value(other.value());
	},
	init2: function (initNumber, json) {
		$.ig.XmlaFilterRule.prototype.init2.call(this, 2, json);
		this.ruleType($.ig.DashboardEnumDeserialization.prototype.readStringRuleType($.ig.JsonUtility.prototype.loadString(json, "RuleType")));
		this.value($.ig.JsonUtility.prototype.loadString(json, "Value"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaStringFilterRule(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "RuleType", $.ig.DashboardEnumSerialization.prototype.writeStringRuleType(this.ruleType()));
		$.ig.JsonUtility.prototype.saveObject(json, "Value", this.value());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaStringFilterRule', $.ig.XmlaFilterRule.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaStringFilterRule" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup" />*/

$.ig.util.defType('XmlaMeasureGroup', 'Object', {
	_catalogName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::CatalogName()" />*/
	catalogName: function (value) {
		if (arguments.length === 1) {
			this._catalogName = value;
			return value;
		} else {
			return this._catalogName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::CatalogName()" />*/
	,
	_cubeName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::CubeName()" />*/
	cubeName: function (value) {
		if (arguments.length === 1) {
			this._cubeName = value;
			return value;
		} else {
			return this._cubeName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::CubeName()" />*/
	,
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Name()" />*/
	,
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Caption()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.catalogName(other.catalogName());
		this.cubeName(other.cubeName());
		this.name(other.name());
		this.caption(other.caption());
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Clone()" />*/
	clone: function () {
		return new $.ig.XmlaMeasureGroup(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "CatalogName", this.catalogName());
		$.ig.JsonUtility.prototype.saveObject(json, "CubeName", this.cubeName());
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaMeasureGroup', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasureGroup" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.CloneUtils" />*/

$.ig.util.defType('CloneUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.CloneUtils::CloneDictionary(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	cloneDictionary: function (original) {
		return original;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DashboardModel.CloneUtils::CloneDictionary(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CloneUtils::CloneObject(System.Object)" />*/
	cloneObject: function (value) {
		if (value == null) {
			return null;
		}
		return $.ig.util.cast($.ig.IDashboardModelObject.prototype.$type, value) !== null ? (value).clone() : value;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DashboardModel.CloneUtils::CloneObject(System.Object)" />*/
	,
	$type: new $.ig.Type('CloneUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.CloneUtils" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo" />*/

$.ig.util.defType('VisualizationEditorSectionInfo', 'Object', {
	_minSize: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::MinSize()" />*/
	minSize: function (value) {
		if (arguments.length === 1) {
			this._minSize = value;
			return value;
		} else {
			return this._minSize;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::MinSize()" />*/
	,
	_maxSize: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::MaxSize()" />*/
	maxSize: function (value) {
		if (arguments.length === 1) {
			this._maxSize = value;
			return value;
		} else {
			return this._maxSize;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::MaxSize()" />*/
	,
	_sectionId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionId()" />*/
	sectionId: function (value) {
		if (arguments.length === 1) {
			this._sectionId = value;
			return value;
		} else {
			return this._sectionId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionId()" />*/
	,
	_numericAggregationAllowed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::NumericAggregationAllowed()" />*/
	numericAggregationAllowed: function (value) {
		if (arguments.length === 1) {
			this._numericAggregationAllowed = value;
			return value;
		} else {
			return this._numericAggregationAllowed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::NumericAggregationAllowed()" />*/
	,
	_dateAggregationAllowed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::DateAggregationAllowed()" />*/
	dateAggregationAllowed: function (value) {
		if (arguments.length === 1) {
			this._dateAggregationAllowed = value;
			return value;
		} else {
			return this._dateAggregationAllowed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::DateAggregationAllowed()" />*/
	,
	_hierarchyAllowed: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::HierarchyAllowed()" />*/
	hierarchyAllowed: function (value) {
		if (arguments.length === 1) {
			this._hierarchyAllowed = value;
			return value;
		} else {
			return this._hierarchyAllowed;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::HierarchyAllowed()" />*/
	,
	_isDateOnly: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsDateOnly()" />*/
	isDateOnly: function (value) {
		if (arguments.length === 1) {
			this._isDateOnly = value;
			return value;
		} else {
			return this._isDateOnly;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsDateOnly()" />*/
	,
	_isXmla: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsXmla()" />*/
	isXmla: function (value) {
		if (arguments.length === 1) {
			this._isXmla = value;
			return value;
		} else {
			return this._isXmla;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsXmla()" />*/
	,
	_sectionLocalizationKey: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionLocalizationKey()" />*/
	sectionLocalizationKey: function (value) {
		if (arguments.length === 1) {
			this._sectionLocalizationKey = value;
			return value;
		} else {
			return this._sectionLocalizationKey;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionLocalizationKey()" />*/
	,
	_isStringOnly: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsStringOnly()" />*/
	isStringOnly: function (value) {
		if (arguments.length === 1) {
			this._isStringOnly = value;
			return value;
		} else {
			return this._isStringOnly;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsStringOnly()" />*/
	,
	_isNumericOnly: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsNumericOnly()" />*/
	isNumericOnly: function (value) {
		if (arguments.length === 1) {
			this._isNumericOnly = value;
			return value;
		} else {
			return this._isNumericOnly;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsNumericOnly()" />*/
	,
	_placeholderLocalizationKey: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::PlaceholderLocalizationKey()" />*/
	placeholderLocalizationKey: function (value) {
		if (arguments.length === 1) {
			this._placeholderLocalizationKey = value;
			return value;
		} else {
			return this._placeholderLocalizationKey;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::PlaceholderLocalizationKey()" />*/
	,
	_showSectionHeader: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::ShowSectionHeader()" />*/
	showSectionHeader: function (value) {
		if (arguments.length === 1) {
			this._showSectionHeader = value;
			return value;
		} else {
			return this._showSectionHeader;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::ShowSectionHeader()" />*/
	,
	_sectionTypes: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionTypes()" />*/
	sectionTypes: function (value) {
		if (arguments.length === 1) {
			this._sectionTypes = value;
			return value;
		} else {
			return this._sectionTypes;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::SectionTypes()" />*/
	,
	init: function (section, sizeLimit, numeric, hierarchy, dateOnly, dateAggregation, xmla) {
		$.ig.Object.prototype.init.call(this);
		this.minSize(0);
		this.sectionId(section);
		this.maxSize(sizeLimit);
		this.numericAggregationAllowed(numeric);
		this.hierarchyAllowed(hierarchy);
		this.isDateOnly(dateOnly);
		this.isXmla(xmla);
		this.dateAggregationAllowed(dateAggregation);
		this.sectionLocalizationKey(section);
		this.showSectionHeader(true);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsTypeSupported(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	isTypeSupported: function (fieldType) {
		if (this.isXmla()) {
			return this.numericAggregationAllowed() ? fieldType == $.ig.DashboardDataType.prototype.number : fieldType != $.ig.DashboardDataType.prototype.number;
		}
		if (this.isDateOnly()) {
			return fieldType == $.ig.DashboardDataType.prototype.date || fieldType == $.ig.DashboardDataType.prototype.time || fieldType == $.ig.DashboardDataType.prototype.dateTime;
		} else if (this.isStringOnly()) {
			return fieldType == $.ig.DashboardDataType.prototype.string1;
		} else if (this.isNumericOnly()) {
			return fieldType == $.ig.DashboardDataType.prototype.number;
		} else {
			return true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo::IsTypeSupported(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	$type: new $.ig.Type('VisualizationEditorSectionInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.VisualizationEditorSectionInfo" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription" />*/

$.ig.util.defType('DashboardItemLayoutDescription', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_rowSpan: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::RowSpan()" />*/
	rowSpan: function (value) {
		if (arguments.length === 1) {
			this._rowSpan = value;
			return value;
		} else {
			return this._rowSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::RowSpan()" />*/
	,
	_columnSpan: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::ColumnSpan()" />*/
	columnSpan: function (value) {
		if (arguments.length === 1) {
			this._columnSpan = value;
			return value;
		} else {
			return this._columnSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::ColumnSpan()" />*/
	,
	_isTitleVisible: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::IsTitleVisible()" />*/
	isTitleVisible: function (value) {
		if (arguments.length === 1) {
			this._isTitleVisible = value;
			return value;
		} else {
			return this._isTitleVisible;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::IsTitleVisible()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::Title()" />*/
	,
	_type: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::Type()" />*/
	,
	_chartType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::ChartType()" />*/
	chartType: function (value) {
		if (arguments.length === 1) {
			this._chartType = value;
			return value;
		} else {
			return this._chartType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::ChartType()" />*/
	,
	_gaugeType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::GaugeType()" />*/
	gaugeType: function (value) {
		if (arguments.length === 1) {
			this._gaugeType = value;
			return value;
		} else {
			return this._gaugeType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::GaugeType()" />*/
	,
	_seriesCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::SeriesCount()" />*/
	seriesCount: function (value) {
		if (arguments.length === 1) {
			this._seriesCount = value;
			return value;
		} else {
			return this._seriesCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::SeriesCount()" />*/
	,
	_brushOffset: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::BrushOffset()" />*/
	brushOffset: function (value) {
		if (arguments.length === 1) {
			this._brushOffset = value;
			return value;
		} else {
			return this._brushOffset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::BrushOffset()" />*/
	,
	_numberOfPoints: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::NumberOfPoints()" />*/
	numberOfPoints: function (value) {
		if (arguments.length === 1) {
			this._numberOfPoints = value;
			return value;
		} else {
			return this._numberOfPoints;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription::NumberOfPoints()" />*/
	,
	$type: new $.ig.Type('DashboardItemLayoutDescription', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardItemLayoutDescription" />*/

/*<BeginType Name="Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription" />*/

$.ig.util.defType('DashboardLayoutDescription', 'Object', {
	_themeName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::ThemeName()" />*/
	themeName: function (value) {
		if (arguments.length === 1) {
			this._themeName = value;
			return value;
		} else {
			return this._themeName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::ThemeName()" />*/
	,
	_createdWith: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::CreatedWith()" />*/
	createdWith: function (value) {
		if (arguments.length === 1) {
			this._createdWith = value;
			return value;
		} else {
			return this._createdWith;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::CreatedWith()" />*/
	,
	_formatVersion: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::FormatVersion()" />*/
	formatVersion: function (value) {
		if (arguments.length === 1) {
			this._formatVersion = value;
			return value;
		} else {
			return this._formatVersion;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::FormatVersion()" />*/
	,
	_items: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::Items()" />*/
	items: function (value) {
		if (arguments.length === 1) {
			this._items = value;
			return value;
		} else {
			return this._items;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription::Items()" />*/
	,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.items(new $.ig.Array());
	},
	$type: new $.ig.Type('DashboardLayoutDescription', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DashboardModel.DashboardLayoutDescription" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.IDataTable" />*/

$.ig.util.defType('IDataTable', 'Object', {
	$type: new $.ig.Type('IDataTable', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.IDataTable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.DataTableBase" />*/

$.ig.util.defType('DataTableBase', 'Object', {
	_dataColumns: null,
	_rowCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::RowCount()" />*/
	rowCount: function (value) {
		if (arguments.length === 1) {
			this._rowCount = value;
			return value;
		} else {
			return this._rowCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::RowCount()" />*/
	,
	_truncated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::Truncated()" />*/
	truncated: function (value) {
		if (arguments.length === 1) {
			this._truncated = value;
			return value;
		} else {
			return this._truncated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::Truncated()" />*/
	,
	_columns: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DataTableBase::Columns()" />*/
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DataTableBase::Columns()" />*/
	,
	_transposedFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DataTableBase::TransposedFields()" />*/
	transposedFields: function (value) {
		if (arguments.length === 1) {
			this._transposedFields = value;
			return value;
		} else {
			return this._transposedFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DataTableBase::TransposedFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.truncated(false);
	},
	init1: function (initNumber, columnList, data, numberOfRows, hasTotalsRow) {
		$.ig.Object.prototype.init.call(this);
		this.columns(columnList);
		this._dataColumns = data;
		this.rowCount(numberOfRows);
		this.totalsRow(hasTotalsRow);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.rowCount($.ig.JsonUtility.prototype.loadInt(json, "RowCount"));
		this.totalsRow($.ig.JsonUtility.prototype.loadBool(json, "TotalsRow"));
		this.truncated($.ig.JsonUtility.prototype.loadBool(json, "Truncated"));
		this.columns(new $.ig.Array());
		var jsonColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Columns");
		var columnCount = jsonColumns.length;
		for (var c = 0; c < columnCount; c++) {
			var tcJson = $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonColumns[c]);
			var instanceType = $.ig.JsonUtility.prototype.loadString(tcJson, "_type");
			if (instanceType == "TableColumnType") {
				this.columns().add(new $.ig.TableColumn(1, tcJson));
			} else if (instanceType == "FieldTableColumnType") {
				this.columns().add(new $.ig.FieldTableColumn(1, tcJson));
			} else if (instanceType == "ComputedColumnType") {
				this.columns().add(new $.ig.ComputedColumn(1, tcJson));
			} else if (instanceType == "PivotDimensionColumnType") {
				this.columns().add(new $.ig.PivotDimensionColumn(1, tcJson));
			} else if (instanceType == "PivotMeasureColumnType") {
				this.columns().add(new $.ig.PivotMeasureColumn(1, tcJson));
			} else if (instanceType == "PivotDateDimensionColumnType") {
				this.columns().add(new $.ig.PivotDateDimensionColumn(1, tcJson));
			} else if (instanceType == "PivotAdhocColumnType") {
				this.columns().add(new $.ig.PivotAdhocColumn(1, tcJson));
			} else if (instanceType == "XmlaHierarchyColumnType") {
				this.columns().add(new $.ig.XmlaHierarchyColumn(1, tcJson));
			} else if (instanceType == "XmlaMeasureColumnType") {
				this.columns().add(new $.ig.XmlaMeasureColumn(1, tcJson));
			}
		}
		this._dataColumns = new $.ig.Array();
		var jsonDataColumns = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DataColumns");
		columnCount = jsonDataColumns.length;
		for (var c1 = 0; c1 < columnCount; c1++) {
			this._dataColumns.add(new $.ig.DataColumn(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonDataColumns[c1])));
		}
		this.transposedFields(new $.ig.Array());
		var jsonTransposedFields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "TransposedFields");
		if (jsonTransposedFields != null) {
			for (var c2 = 0; c2 < jsonTransposedFields.length; c2++) {
				this.transposedFields().add(new $.ig.Field(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonTransposedFields[c2])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataTableBase::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveInt(json, "RowCount", this.rowCount());
		$.ig.JsonUtility.prototype.saveBool(json, "TotalsRow", this.totalsRow());
		$.ig.JsonUtility.prototype.saveBool(json, "Truncated", this.truncated());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", this.resolveDataTableType());
		var jsonDataColumns = new $.ig.Array();
		var dataColumnCount = this._dataColumns.length;
		for (var c = 0; c < dataColumnCount; c++) {
			jsonDataColumns.add((this._dataColumns[c]).toJson(this, c));
		}
		json["DataColumns"] = jsonDataColumns;
		var jsonTableColumns = new $.ig.Array();
		for (var c1 = 0; c1 < this.columns().length; c1++) {
			jsonTableColumns.add((this.columns()[c1]).toJson());
		}
		json["Columns"] = jsonTableColumns;
		var jsonTransposedFields = new $.ig.Array();
		if (this.transposedFields() != null) {
			for (var c2 = 0; c2 < this.transposedFields().length; c2++) {
				jsonTransposedFields.add((this.transposedFields()[c2]).toJson());
			}
			json["TransposedFields"] = jsonTransposedFields;
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataTableBase::ToJson()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::ColumnCount()" />*/
	columnCount: function () {
		return this.columns().length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::ColumnCount()" />*/
	,
	_totalsRow: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::TotalsRow()" />*/
	totalsRow: function (value) {
		if (arguments.length === 1) {
			this._totalsRow = value;
			return value;
		} else {
			return this._totalsRow;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::TotalsRow()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.TableColumn Infragistics.ReportPlus.DataLayer.DataTableBase::GetColumn(System.Int32)" />*/
	getColumn: function (index) {
		return this.columns()[index];
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.TableColumn Infragistics.ReportPlus.DataLayer.DataTableBase::GetColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataTableBase::GetDataColumn(System.Int32)" />*/
	getDataColumn: function (index) {
		return this._dataColumns[index];
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataTableBase::GetDataColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::HasTotalsRow()" />*/
	hasTotalsRow: function () {
		return this.totalsRow();
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::HasTotalsRow()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::GetDimensionColumnCount()" />*/
	getDimensionColumnCount: function () {
		if (this.columns() == null || this.columns().length == 0) {
			return 0;
		}
		var count = 0;
		for (var i = 0; i < this.columns().length; i++) {
			var column = this.columns()[i];
			if ($.ig.util.cast($.ig.IHierarchyColumn.prototype.$type, column) !== null) {
				count++;
			} else {
				break;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DataTableBase::GetDimensionColumnCount()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataTableBase::GetValue(System.Int32, System.Int32)" />*/
	getValue: function (row, column) {
		var dataColumn = this._dataColumns[column];
		if (dataColumn._type == $.ig.DashboardDataType.prototype.number && dataColumn._values != null) {
			var value = dataColumn._values[row];
			if ($.ig.util.isNaN(value) || Number.isInfinity(value)) {
				return null;
			}
			return $.ig.NativeDataLayerUtility.prototype.toObject(value);
		} else {
			return $.ig.NativeDataLayerUtility.prototype.unwrapNull(dataColumn._labels[row]);
		}
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataTableBase::GetValue(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DataTableBase::GetFormattedValue(System.Int32, System.Int32)" />*/
	getFormattedValue: function (row, column) {
		return this.getCell(row, column).formattedValue();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DataTableBase::GetFormattedValue(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DataTableBase::TruncateIfNeeded(System.Int32)" />*/
	truncateIfNeeded: function (maxCells) {
		if (maxCells <= 0 || maxCells >= this.columnCount() * this.rowCount()) {
			return;
		}
		var maxRows = $.ig.intDivide(maxCells, this.columnCount());
		for (var i = 0; i < this.columnCount(); i++) {
			var dataColumn = this._dataColumns[i];
			dataColumn.truncate(maxRows);
		}
		this.rowCount(maxRows);
		this.totalsRow(false);
		this.truncated(true);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DataTableBase::TruncateIfNeeded(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::UseLocalTimeZone(Infragistics.ReportPlus.DataLayer.TableColumn)" />*/
	useLocalTimeZone: function (column) {
		if ($.ig.util.cast($.ig.FieldTableColumn.prototype.$type, column) !== null) {
			var field = (column).sourceField();
			var settings = field == null ? null : field.settings();
			if (settings != null && ($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, settings) !== null)) {
				return (settings).displayInLocalTimeZone();
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DataTableBase::UseLocalTimeZone(Infragistics.ReportPlus.DataLayer.TableColumn)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.TableCell Infragistics.ReportPlus.DataLayer.DataTableBase::GetCell(System.Int32, System.Int32)" />*/
	getCell: function (row, column) {
		var dataColumn = this._dataColumns[column];
		if (dataColumn._cells != null) {
			return dataColumn._cells[row];
		}
		var cell = new $.ig.TableCell(0);
		var value = this.getValue(row, column);
		if (value == null) {
			cell.formattedValue("");
		} else if ($.ig.NativeDataLayerUtility.prototype.isNumber(value)) {
			cell.formattedValue($.ig.NativeDataLayerUtility.prototype.formatDecimal($.ig.NativeDataLayerUtility.prototype.toDouble(value), 0, 2));
		} else {
			cell.formattedValue(value.toString());
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.TableCell Infragistics.ReportPlus.DataLayer.DataTableBase::GetCell(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.DataTableBase::GetConditionalFormattingSpec(Infragistics.ReportPlus.DataLayer.TableColumn)" />*/
	getConditionalFormattingSpec: function (column) {
		if ($.ig.util.cast($.ig.FieldTableColumn.prototype.$type, column) !== null) {
			var sourceField = (column).sourceField();
			return sourceField == null ? null : sourceField.conditionalFormatting();
		} else if ($.ig.util.cast($.ig.PivotMeasureColumn.prototype.$type, column) !== null) {
			var valueField = (column).valueField();
			return valueField == null ? null : valueField.conditionalFormatting();
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.DataTableBase::GetConditionalFormattingSpec(Infragistics.ReportPlus.DataLayer.TableColumn)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.DataTableBase::SortedTable(, )" />*/
	sortedTable: function (sortMapping, sortOrder) {
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.DataTableBase::SortedTable(, )" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DataTableBase::ResolveDataTableType()" />*/
	resolveDataTableType: function () {
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DataTableBase::ResolveDataTableType()" />*/
	,
	$type: new $.ig.Type('DataTableBase', $.ig.Object.prototype.$type, [$.ig.IDataTable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.DataTableBase" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.ClientDataTable" />*/

$.ig.util.defType('ClientDataTable', 'DataTableBase', {
	init: function (initNumber, json) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataTableBase.prototype.init2.call(this, 2, json);
	},
	init1: function (initNumber, tableColumnList, dataColumnList, numberOfRows, hasTotalsRow) {
		$.ig.DataTableBase.prototype.init1.call(this, 1, tableColumnList, dataColumnList, numberOfRows, hasTotalsRow);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.ClientDataTable::SortedTable(, )" />*/
	sortedTable: function (sortMapping, sortOrder) {
		var dataTable = new $.ig.InMemoryDataTable(this._dataColumns, this.rowCount(), this.hasTotalsRow(), this.truncated());
		dataTable = $.ig.Sorter.prototype.sort1(dataTable, sortMapping, sortOrder);
		var result = new $.ig.ClientDataTable(1, this.columns(), dataTable.dataColumns(), dataTable.rowCount(), dataTable.hasTotalsRow());
		result.truncated(this.truncated());
		return result;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.ClientDataTable::SortedTable(, )" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.ClientDataTable::ResolveDataTableType()" />*/
	resolveDataTableType: function () {
		return "DataTable";
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.ClientDataTable::ResolveDataTableType()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ClientDataTable Infragistics.ReportPlus.DataLayer.ClientDataTable::FromJSON(System.JSDictionary)" />*/
	fromJSON: function (json) {
		var instanceType = $.ig.JsonUtility.prototype.loadString(json, "Type");
		if (instanceType == "DataTable") {
			return new $.ig.ClientDataTable(0, json);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ClientDataTable Infragistics.ReportPlus.DataLayer.ClientDataTable::FromJSON(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('ClientDataTable', $.ig.DataTableBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.ClientDataTable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility" />*/

$.ig.util.defType('NativeDataLayerUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNumber(System.Object)" />*/
	isNumber: function (o) {
		return typeof o === 'number';
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNumber(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonList(System.JSDictionary, System.String)" />*/
	getJsonList: function (dictionary, name) {
		var value = dictionary[name];
		if ($.ig.util.cast(Array, value) !== null) {
			return value;
		} else if (value != null) {
			var list = new $.ig.Array();
			list.add(value);
			return list;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonList(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsJsonList(System.Object)" />*/
	isJsonList: function (o) {
		return $.ig.util.cast(Array, o) !== null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsJsonList(System.Object)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonDoubleArray(System.JSDictionary, System.String)" />*/
	getJsonDoubleArray: function (dictionary, name) {
		var array = dictionary[name];
		var copy = array.slice();
		var length = copy.length;
		for (var i = 0; i < length; i++) {
			if (copy[i] == "NaN") {
				copy[i] = NaN;
			}
		}
		return copy;
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonDoubleArray(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonIntArray(System.JSDictionary, System.String)" />*/
	getJsonIntArray: function (dictionary, name) {
		return dictionary[name];
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonIntArray(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::NewUuid()" />*/
	newUuid: function () {
		return $.ig.util.createGuid();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::NewUuid()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::FormatDecimal(System.Double, System.Int32, System.Int32)" />*/
	formatDecimal: function (value, minDecimalPlaces, maxDecimalPlaces) {
		var str = $.ig.NativeStringUtility.prototype.convertNumberToStringWithFormat(value, maxDecimalPlaces);
		while (true) {
			if ($.ig.NativeStringUtility.prototype.endsWith(str, "0") || $.ig.NativeStringUtility.prototype.endsWith(str, ".")) {
				str = str.substr(0, str.length - 1);
			} else {
				break;
			}
		}
		return str;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::FormatDecimal(System.Double, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObjectArray(System.JSDictionary, System.String)" />*/
	getJsonObjectArray: function (dictionary, name) {
		return $.ig.NativeDataLayerUtility.prototype.getJsonObjectArray1(dictionary, name, false);
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObjectArray(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObjectArray(System.JSDictionary, System.String, System.Boolean)" />*/
	getJsonObjectArray1: function (dictionary, name, convertingDates) {
		return dictionary[name];
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObjectArray(System.JSDictionary, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObject(System.Object)" />*/
	getJsonObject: function (o) {
		return o;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonObject(System.Object)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SerializeXmlDateTime(System.DateTime)" />*/
	serializeXmlDateTime: function (dt) {
		return dt.toJSON();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SerializeXmlDateTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DeserializeXmlDateTime(System.String)" />*/
	deserializeXmlDateTime: function (s) {
		return $.ig.util.toNullable($.ig.Date.prototype.$type, new Date(s));
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DeserializeXmlDateTime(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SerializeToJson(System.JSDictionary, System.Boolean, Infragistics.ReportPlus.DataLayer.DataLayerErrorBlock)" />*/
	serializeToJson: function (o, indented, errorHandler) {
		return JSON.stringify(o);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SerializeToJson(System.JSDictionary, System.Boolean, Infragistics.ReportPlus.DataLayer.DataLayerErrorBlock)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DeserializeFromJson(System.String, Infragistics.ReportPlus.DataLayer.DataLayerErrorBlock)" />*/
	deserializeFromJson: function (json, errorHandler) {
		try {
			return JSON.parse(json);
		}
		catch (e) {
			errorHandler(new $.ig.ReportPlusError(4, e.toString()));
			return null;
		}
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DeserializeFromJson(System.String, Infragistics.ReportPlus.DataLayer.DataLayerErrorBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNull(System.Object)" />*/
	isNull: function (o) {
		return o == null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNull(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullBool(System.Nullable)" />*/
	isNullBool: function (b) {
		return $.ig.util.nullableEquals(b, null);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullBool(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullInt(System.Nullable)" />*/
	isNullInt: function (i) {
		return $.ig.util.nullableEquals(i, null);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullInt(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullDouble(System.Nullable)" />*/
	isNullDouble: function (d) {
		return $.ig.util.nullableEquals(d, null);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullDouble(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TypedDictionaryToJson(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	typedDictionaryToJson: function (typedDictionary) {
		var jsonDictionary = {};
		var innerValues = typedDictionary.getValuesDictionary();
		var keys = typedDictionary.getAllKeys();
		var keyCount = keys.length;
		for (var k = 0; k < keyCount; k++) {
			var key = keys[k];
			var value = innerValues[key];
			if ($.ig.util.cast($.ig.IDashboardModelObject.prototype.$type, value) !== null) {
				jsonDictionary[key] = (value).toJson();
			} else {
				$.ig.JsonUtility.prototype.saveObject(jsonDictionary, key, value);
			}
		}
		return jsonDictionary;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TypedDictionaryToJson(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DoubleArrayToJson()" />*/
	doubleArrayToJson: function (values) {
		return values;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::DoubleArrayToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IntArrayToJson()" />*/
	intArrayToJson: function (values) {
		return values;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IntArrayToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ObjectArrayToJson()" />*/
	objectArrayToJson: function (values) {
		return values;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ObjectArrayToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ObjectArrayToJson(, System.Boolean)" />*/
	objectArrayToJson1: function (values, convertingDates) {
		return values;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ObjectArrayToJson(, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ListToJson(System.Object)" />*/
	listToJson: function (o) {
		if (o == null) {
			return null;
		}
		var result = new $.ig.Array();
		var list = o;
		var size = list.length;
		for (var i = 0; i < size; i++) {
			var value = list[i];
			if ($.ig.util.cast($.ig.IDashboardModelObject.prototype.$type, value) !== null) {
				result.add((value).toJson());
			} else {
				result.add(value);
			}
		}
		return result;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ListToJson(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullDateTime(System.Nullable)" />*/
	isNullDateTime: function (modifiedDate) {
		return $.ig.util.nullableEquals(modifiedDate, null);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsNullDateTime(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToInt(System.Object, System.Int32)" />*/
	toInt: function (o, defaultValue) {
		return typeof o === 'number' ? $.ig.util.getValue(o) : parseInt(o);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToInt(System.Object, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapNull(System.Object)" />*/
	wrapNull: function (value) {
		return value;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapNull(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapInt(System.Int32)" />*/
	wrapInt: function (i) {
		return $.ig.util.toNullable($.ig.Number.prototype.$type, i);
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapInt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapInt(System.Nullable)" />*/
	unwrapInt: function (i) {
		return i.value();
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapInt(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapInt(System.Nullable, System.Int32)" />*/
	unwrapInt1: function (i, defaultValue) {
		return $.ig.util.nullableEquals(i, null) ? defaultValue : i.value();
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapInt(System.Nullable, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapBool(System.Nullable)" />*/
	unwrapBool: function (i) {
		return i.value();
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapBool(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToBoolean(System.Object)" />*/
	toBoolean: function (o) {
		return o;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToBoolean(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapDouble(System.Double)" />*/
	wrapDouble: function (d) {
		return $.ig.util.toNullable(Number, d);
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapDouble(System.Double)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapDateTime(System.Nullable)" />*/
	unwrapDateTime: function (dt) {
		return dt;
	}
	/*<EndMethod Name="System.DateTime Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapDateTime(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapDouble(System.Nullable)" />*/
	unwrapDouble: function (d) {
		return d.value();
	}
	/*<EndMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapDouble(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToDouble(System.Object)" />*/
	toDouble: function (o) {
		return o;
	}
	/*<EndMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToDouble(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapBool(System.Boolean)" />*/
	wrapBool: function (b) {
		return $.ig.util.toNullable($.ig.Boolean.prototype.$type, b);
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::WrapBool(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsJsonObject(System.Object)" />*/
	isJsonObject: function (o) {
		return o != null && (o)["_type"] != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IsJsonObject(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonKeysList(System.JSDictionary)" />*/
	getJsonKeysList: function (dictionary) {
		var keysList = new $.ig.Array();
		var keys = Object.keys(dictionary);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			keysList.add(key);
		}
		return keysList;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetJsonKeysList(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapJsonNull(System.Object)" />*/
	unwrapJsonNull: function (value) {
		return value;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapJsonNull(System.Object)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetSerializationClassName(System.Object)" />*/
	getSerializationClassName: function (o) {
		return o.getType().typeName();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetSerializationClassName(System.Object)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringSubstring(System.String, System.Int32, System.Int32)" />*/
	stringSubstring1: function (val, start, length) {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringSubstring(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringSubstring(System.String, System.Int32)" />*/
	stringSubstring: function (val, start) {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringSubstring(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringIndexOf(System.String, System.String)" />*/
	stringIndexOf: function (val, pattern) {
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::StringIndexOf(System.String, System.String)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetDoubleArraySortMapping(, System.Boolean, System.Int32)" />*/
	getDoubleArraySortMapping: function (array, ascending, length) {
		var copy = array.slice();
		var items = new Array(length);
		for (var i = 0; i < length; i++) {
			items[i] = i;
		}
		if (ascending) {
			return items.sort(function(a, b){ if (isNaN(copy[a])) return isNaN(copy[b]) ? a - b : -1; if (isNaN(copy[b])) return 1; if(copy[a] == copy[b]) return a - b; return copy[a] - copy[b]});
		} else {
			return items.sort(function(a, b){ if (isNaN(copy[a])) return isNaN(copy[b]) ? a - b : 1; if (isNaN(copy[b])) return -1;  if(copy[a] == copy[b]) return a - b; return copy[b] - copy[a]});
		}
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetDoubleArraySortMapping(, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetObjectArraySortMapping(, System.Boolean, System.Int32)" />*/
	getObjectArraySortMapping: function (array, ascending, length) {
		var copy = array.slice();
		var items = new Array(length);
		for (var i = 0; i < length; i++) {
			items[i] = i;
		}
		if (ascending) {
			return items.sort(function(a, b){ if(copy[a] == copy[b]) return a - b; if (copy[a] > copy[b] || copy[b] == null) return 1;else if (copy[a] < copy[b] || copy[a] == null) return -1;else return 0;});
		} else {
			return items.sort(function(a, b){ if(copy[a] == copy[b]) return b - a; if (copy[a] > copy[b] || copy[b] == null) return -1;else if (copy[a] < copy[b] || copy[a] == null) return 1;else return 0;});
		}
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetObjectArraySortMapping(, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortDoubleArrayWithMapping(, , System.Int32)" />*/
	sortDoubleArrayWithMapping: function (values, mapping, length) {
		var copy = values.slice();
		for (var i = 0; i < length; i++) {
			values[i] = copy[mapping[i]];
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortDoubleArrayWithMapping(, , System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortObjectArrayWithMapping(, , System.Int32)" />*/
	sortObjectArrayWithMapping: function (values, mapping, length) {
		var copy = values.slice();
		for (var i = 0; i < length; i++) {
			values[i] = copy[mapping[i]];
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortObjectArrayWithMapping(, , System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CopyDoubleArray()" />*/
	copyDoubleArray: function (values) {
		return values.slice();
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CopyDoubleArray()" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TruncateDoubleArray(, System.Int32)" />*/
	truncateDoubleArray: function (values, length) {
		if (values == null || values.length <= length) {
			return values;
		}
		return values.slice(0, length);
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TruncateDoubleArray(, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CopyObjectArray()" />*/
	copyObjectArray: function (values) {
		return values.slice();
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CopyObjectArray()" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TruncateObjectArray(, System.Int32)" />*/
	truncateObjectArray: function (values, length) {
		if (values == null || values.length <= length) {
			return values;
		}
		return values.slice(0, length);
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::TruncateObjectArray(, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetStringFromBuilder(System.Text.StringBuilder)" />*/
	getStringFromBuilder: function (builder) {
		return builder.toString();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetStringFromBuilder(System.Text.StringBuilder)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortStringList(System.Collections.ArrayList)" />*/
	sortStringList: function (list) {
		list.sort();
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::SortStringList(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToObject(System.Double)" />*/
	toObject: function (d) {
		return $.ig.util.isNaN(d) ? null : d;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::ToObject(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapNull(System.Object)" />*/
	unwrapNull: function (value) {
		return value;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::UnwrapNull(System.Object)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetStackTrace(System.Exception)" />*/
	getStackTrace: function (error) {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetStackTrace(System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetUTCDateTime(System.Nullable)" />*/
	getUTCDateTime: function (d) {
		if ($.ig.util.nullableEquals(d, null)) {
			return $.ig.util.toNullable($.ig.Date.prototype.$type, null);
		}
		var isUTC = d.value()._utc !== undefined && d.value()._utc;
		if (isUTC) {
			return d;
		}
		var utc = $.ig.NativeDateUtility.prototype.convertUTCToLocalTime(d.value());
		utc._utc = true;
		return $.ig.util.toNullable($.ig.Date.prototype.$type, utc);
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetUTCDateTime(System.Nullable)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetLocalDateRange(Infragistics.ReportPlus.DashboardModel.DateRange)" />*/
	getLocalDateRange: function (r) {
		if (r == null) {
			return null;
		}
		var newRange = new $.ig.DateRange(0);
		if ($.ig.util.nullableNotEquals(r.from(), null)) {
			newRange.from($.ig.util.toNullable($.ig.Date.prototype.$type, $.ig.NativeDateUtility.prototype.convertLocalTimeToUTC(r.from().value())));
		}
		if ($.ig.util.nullableNotEquals(r.to(), null)) {
			newRange.to($.ig.util.toNullable($.ig.Date.prototype.$type, $.ig.NativeDateUtility.prototype.convertLocalTimeToUTC(r.to().value())));
		}
		return newRange;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DateRange Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetLocalDateRange(Infragistics.ReportPlus.DashboardModel.DateRange)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetKeysList(System.JSDictionary)" />*/
	getKeysList: function (dictionary) {
		return Object.keys(dictionary);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetKeysList(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CompareDates(System.DateTime, System.DateTime)" />*/
	compareDates: function (d1, d2) {
		if (d1.getTime() > d2.getTime()) {
			return 1;
		} else if (d1.getTime() < d2.getTime()) {
			return -1;
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::CompareDates(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IntToString(System.Int32)" />*/
	intToString: function (i) {
		return i.toString();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::IntToString(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetLocalTimeWithUTCValues(System.Object)" />*/
	getLocalTimeWithUTCValues: function (dateObject) {
		if ($.ig.util.cast($.ig.Date.prototype.$type, dateObject) !== null) {
			return new Date(dateObject.getTime() + (dateObject.getTimezoneOffset() * 60 * 1000));
		}
		return dateObject;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility::GetLocalTimeWithUTCValues(System.Object)" />*/
	,
	$type: new $.ig.Type('NativeDataLayerUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.NativeDataLayerUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary" />*/

$.ig.util.defType('NativeTypedDictionary', 'Object', {
	_dictionary: null,
	_transientDictionary: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._dictionary = {};
		this._transientDictionary = {};
	},
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::Count()" />*/
	count: function () {
		return this.getAllKeys().length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::Count()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::Clone()" />*/
	clone: function () {
		var other = new $.ig.NativeTypedDictionary();
		other.copyValues(this._dictionary);
		return other;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::Clone()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::ContainsKey(System.String)" />*/
	containsKey: function (key) {
		return this._dictionary[key] != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::ContainsKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetIntValue(System.String)" />*/
	getIntValue: function (key) {
		return $.ig.util.getValue(this._dictionary[key]);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetIntValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetIntValue(System.String, System.Int32)" />*/
	getIntValue1: function (key, defaultValue) {
		if (this.containsKey(key)) {
			return this.getIntValue(key);
		} else {
			return defaultValue;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetIntValue(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetIntValue(System.String, System.Int32)" />*/
	setIntValue: function (key, value) {
		this._dictionary[key] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetIntValue(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetDoubleValue(System.String)" />*/
	getDoubleValue: function (key) {
		return this._dictionary[key];
	}
	/*<EndMethod Name="System.Double Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetDoubleValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetDoubleValue(System.String, System.Double)" />*/
	setDoubleValue: function (key, value) {
		this._dictionary[key] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetDoubleValue(System.String, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetBoolValue(System.String)" />*/
	getBoolValue: function (key) {
		return this._dictionary[key];
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetBoolValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetBoolValue(System.String, System.Boolean)" />*/
	setBoolValue: function (key, value) {
		this._dictionary[key] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetBoolValue(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetObjectValue(System.String)" />*/
	getObjectValue: function (key) {
		return (function ($t) { return $t != null ? $t : null; }(this._dictionary[key]));
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetObjectValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetObjectValue(System.String, System.Object)" />*/
	setObjectValue: function (key, value) {
		if (value == null) {
			this.removeKey(key);
		} else {
			this._dictionary[key] = value;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetObjectValue(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetValuesDictionary()" />*/
	getValuesDictionary: function () {
		return this._dictionary;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetValuesDictionary()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::CopyValues(System.JSDictionary)" />*/
	copyValues: function (values) {
		var keys = Object.keys(values);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			this._dictionary[key] = values[key];
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::CopyValues(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetTransientValue(System.String, System.Object)" />*/
	setTransientValue: function (key, value) {
		this._transientDictionary[key] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::SetTransientValue(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetTransientValue(System.String)" />*/
	getTransientValue: function (key) {
		return this._transientDictionary[key];
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetTransientValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetAllKeys()" />*/
	getAllKeys: function () {
		var keysList = new $.ig.Array();
		var keys = Object.keys(this._dictionary);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			keysList.add(key);
		}
		return keysList;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::GetAllKeys()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::RemoveKey(System.String)" />*/
	removeKey: function (key) {
		delete this._dictionary[key];
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.NativeTypedDictionary::RemoveKey(System.String)" />*/
	,
	$type: new $.ig.Type('NativeTypedDictionary', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.IDataTableResult" />*/

$.ig.util.defType('IDataTableResult', 'Object', {
	$type: new $.ig.Type('IDataTableResult', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.IDataTableResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.DataTableResult" />*/

$.ig.util.defType('DataTableResult', 'Object', {
	_table: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.DataTableResult::Table()" />*/
	table: function (value) {
		if (arguments.length === 1) {
			this._table = value;
			return value;
		} else {
			return this._table;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.DataTableResult::Table()" />*/
	,
	_widgetId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.DataTableResult::WidgetId()" />*/
	widgetId: function (value) {
		if (arguments.length === 1) {
			this._widgetId = value;
			return value;
		} else {
			return this._widgetId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.DataTableResult::WidgetId()" />*/
	,
	_maxCells: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.DataTableResult::MaxCells()" />*/
	maxCells: function (value) {
		if (arguments.length === 1) {
			this._maxCells = value;
			return value;
		} else {
			return this._maxCells;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.DataTableResult::MaxCells()" />*/
	,
	init: function (initNumber, widgetIdentifier, t, maxCells) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.widgetId(widgetIdentifier);
		this.table(t);
		this.maxCells(maxCells);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.widgetId($.ig.JsonUtility.prototype.loadString(json, "WidgetId"));
		var table = $.ig.JsonUtility.prototype.loadObject(json, "Table");
		this.table($.ig.ClientDataTable.prototype.fromJSON(table));
		this.maxCells($.ig.JsonUtility.prototype.loadOptionalInt(json, "MaxCells"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataTableResult::ToJson()" />*/
	toJson: function () {
		var json = {};
		json["Table"] = this.table().toJson();
		json["WidgetId"] = this.widgetId();
		json["MaxCells"] = $.ig.util.unwrapNullable(this.maxCells());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataTableResult::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataTableResult::Clone()" />*/
	clone: function () {
		return new $.ig.DataTableResult(1, this.toJson());
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataTableResult::Clone()" />*/
	,
	$type: new $.ig.Type('DataTableResult', $.ig.Object.prototype.$type, [$.ig.IDataTableResult.prototype.$type, $.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.DataTableResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.EditorExpressionInfo" />*/

$.ig.util.defType('EditorExpressionInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_resultType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::ResultType()" />*/
	resultType: function (value) {
		if (arguments.length === 1) {
			this._resultType = value;
			return value;
		} else {
			return this._resultType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::ResultType()" />*/
	,
	_internalExpression: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::InternalExpression()" />*/
	internalExpression: function (value) {
		if (arguments.length === 1) {
			this._internalExpression = value;
			return value;
		} else {
			return this._internalExpression;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::InternalExpression()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::ToJson()" />*/
	toJson: function () {
		var json = {};
		json["Type"] = $.ig.DashboardEnumSerialization.prototype.writeDataType(this.resultType());
		json["InternalExpression"] = this.internalExpression();
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.EditorExpressionInfo::ToJson()" />*/
	,
	$type: new $.ig.Type('EditorExpressionInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.EditorExpressionInfo" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.IInMemoryDataIterator" />*/

$.ig.util.defType('IInMemoryDataIterator', 'Object', {
	$type: new $.ig.Type('IInMemoryDataIterator', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.IInMemoryDataIterator" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable" />*/

$.ig.util.defType('InMemoryDataTable', 'Object', {
	_dataColumns: null,
	_rowCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.InMemoryDataTable::RowCount()" />*/
	rowCount: function (value) {
		if (arguments.length === 1) {
			this._rowCount = value;
			return value;
		} else {
			return this._rowCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.InMemoryDataTable::RowCount()" />*/
	,
	_hasTotalsRow: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.InMemoryDataTable::HasTotalsRow()" />*/
	hasTotalsRow: function (value) {
		if (arguments.length === 1) {
			this._hasTotalsRow = value;
			return value;
		} else {
			return this._hasTotalsRow;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.InMemoryDataTable::HasTotalsRow()" />*/
	,
	_truncated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.InMemoryDataTable::Truncated()" />*/
	truncated: function (value) {
		if (arguments.length === 1) {
			this._truncated = value;
			return value;
		} else {
			return this._truncated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.InMemoryDataTable::Truncated()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.InMemoryDataTable::ColumnCount()" />*/
	columnCount: function () {
		return this._dataColumns.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.InMemoryDataTable::ColumnCount()" />*/
	,
	init: function (columns, rows, totalsRow, truncated) {
		$.ig.Object.prototype.init.call(this);
		this._dataColumns = columns;
		this.rowCount(rows);
		this.hasTotalsRow(totalsRow);
		this.truncated(truncated);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.InMemoryDataTable::GetDataColumn(System.Int32)" />*/
	getDataColumn: function (index) {
		return this._dataColumns[index];
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.InMemoryDataTable::GetDataColumn(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.InMemoryDataTable::DataColumns()" />*/
	dataColumns: function () {
		return this._dataColumns;
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.InMemoryDataTable::DataColumns()" />*/
	,
	$type: new $.ig.Type('InMemoryDataTable', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.WidgetDataResult" />*/

$.ig.util.defType('WidgetDataResult', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_widget: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DataLayer.WidgetDataResult::Widget()" />*/
	widget: function (value) {
		if (arguments.length === 1) {
			this._widget = value;
			return value;
		} else {
			return this._widget;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Widget Infragistics.ReportPlus.DataLayer.WidgetDataResult::Widget()" />*/
	,
	_result: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.IDataTableResult Infragistics.ReportPlus.DataLayer.WidgetDataResult::Result()" />*/
	result: function (value) {
		if (arguments.length === 1) {
			this._result = value;
			return value;
		} else {
			return this._result;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.IDataTableResult Infragistics.ReportPlus.DataLayer.WidgetDataResult::Result()" />*/
	,
	$type: new $.ig.Type('WidgetDataResult', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.WidgetDataResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.DataColumn" />*/

$.ig.util.defType('DataColumn', 'Object', {
	_name: null,
	_label: null,
	_type: 0,
	_labels: null,
	_values: null,
	_cells: null,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, colName, colLabel, colType) {
		$.ig.Object.prototype.init.call(this);
		this._name = colName;
		this._label = colLabel;
		this._type = colType;
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this._type = $.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "Type"));
		this._name = $.ig.JsonUtility.prototype.loadString(json, "Name");
		this._label = $.ig.JsonUtility.prototype.loadString(json, "Label");
		if ($.ig.JsonUtility.prototype.containsKey(json, "Labels")) {
			this._labels = $.ig.NativeDataLayerUtility.prototype.getJsonObjectArray1(json, "Labels", this._type == $.ig.DashboardDataType.prototype.date || this._type == $.ig.DashboardDataType.prototype.dateTime || this._type == $.ig.DashboardDataType.prototype.time);
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			this._values = $.ig.NativeDataLayerUtility.prototype.getJsonDoubleArray(json, "Values");
		}
		var jsonCells = $.ig.JsonUtility.prototype.containsKey(json, "Cells") ? $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Cells") : null;
		if (jsonCells != null) {
			var cellCount = jsonCells.length;
			this._cells = new Array(cellCount);
			for (var i = 0; i < cellCount; i++) {
				var jsonCell = $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonCells[i]);
				var instanceType = $.ig.JsonUtility.prototype.loadString(jsonCell, "_type");
				if (instanceType == "TableCellType") {
					this._cells[i] = new $.ig.TableCell(1, jsonCell);
				} else if (instanceType == "HierarchyCellType") {
					this._cells[i] = new $.ig.HierarchyCell(1, jsonCell);
				}
			}
		}
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataColumn::GetObjectValue(System.Int32)" />*/
	getObjectValue: function (row) {
		return this._values == null ? this._labels[row] : $.ig.util.unwrapNullable($.ig.NativeDataLayerUtility.prototype.wrapDouble(this._values[row]));
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.DataColumn::GetObjectValue(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataColumn::Clone()" />*/
	clone: function () {
		var newColumn = new $.ig.DataColumn(0);
		newColumn._name = this._name;
		newColumn._label = this._label;
		newColumn._type = this._type;
		if (this._labels != null) {
			newColumn._labels = $.ig.NativeDataLayerUtility.prototype.copyObjectArray(this._labels);
		}
		if (this._values != null) {
			newColumn._values = $.ig.NativeDataLayerUtility.prototype.copyDoubleArray(this._values);
		}
		if (this._cells != null) {
			newColumn._cells = $.ig.NativeDataLayerUtility.prototype.copyObjectArray(this._cells);
		}
		return newColumn;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataColumn::Clone()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataColumn::TruncatedCopy(System.Int32)" />*/
	truncatedCopy: function (maxRows) {
		var newColumn = new $.ig.DataColumn(0);
		newColumn._name = this._name;
		newColumn._label = this._label;
		newColumn._type = this._type;
		if (this._labels != null) {
			newColumn._labels = $.ig.NativeDataLayerUtility.prototype.truncateObjectArray(this._labels, maxRows);
		}
		if (this._values != null) {
			newColumn._values = $.ig.NativeDataLayerUtility.prototype.truncateDoubleArray(this._values, maxRows);
		}
		if (this._cells != null) {
			newColumn._cells = $.ig.NativeDataLayerUtility.prototype.truncateObjectArray(this._cells, maxRows);
		}
		return newColumn;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.DataColumn Infragistics.ReportPlus.DataLayer.DataColumn::TruncatedCopy(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DataColumn::Truncate(System.Int32)" />*/
	truncate: function (maxRows) {
		if (this._labels != null) {
			this._labels = $.ig.NativeDataLayerUtility.prototype.truncateObjectArray(this._labels, maxRows);
		}
		if (this._values != null) {
			this._values = $.ig.NativeDataLayerUtility.prototype.truncateDoubleArray(this._values, maxRows);
		}
		if (this._cells != null) {
			this._cells = $.ig.NativeDataLayerUtility.prototype.truncateObjectArray(this._cells, maxRows);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DataColumn::Truncate(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataColumn::ToJson(Infragistics.ReportPlus.DataLayer.IDataTable, System.Int32)" />*/
	toJson: function (table, columnIndex) {
		var json = {};
		json["Type"] = $.ig.DashboardEnumSerialization.prototype.writeDataType(this._type);
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this._name);
		$.ig.JsonUtility.prototype.saveObject(json, "Label", this._label);
		$.ig.JsonUtility.prototype.saveObjectArray(json, "Labels", this._labels, this._type == $.ig.DashboardDataType.prototype.date || this._type == $.ig.DashboardDataType.prototype.dateTime || this._type == $.ig.DashboardDataType.prototype.time);
		$.ig.JsonUtility.prototype.saveDoubleArray(json, "Values", this._values);
		var rowCount = this._values != null ? this._values.length : (this._labels != null ? this._labels.length : 0);
		if (rowCount > 0) {
			var jsonCells = new $.ig.Array();
			for (var r = 0; r < rowCount; r++) {
				var cell = table.getCell(r, columnIndex);
				jsonCells.add(cell.toJson());
			}
			json["Cells"] = jsonCells;
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.DataColumn::ToJson(Infragistics.ReportPlus.DataLayer.IDataTable, System.Int32)" />*/
	,
	$type: new $.ig.Type('DataColumn', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.DataColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.TableColumn" />*/

$.ig.util.defType('TableColumn', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableColumn::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableColumn::Name()" />*/
	,
	_label: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableColumn::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableColumn::Label()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.TableColumn::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.TableColumn::Type()" />*/
	,
	_attributes: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.TableColumn::Attributes()" />*/
	attributes: function (value) {
		if (arguments.length === 1) {
			this._attributes = value;
			return value;
		} else {
			return this._attributes;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.TableColumn::Attributes()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.attributes(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.label($.ig.JsonUtility.prototype.loadString(json, "Label"));
		this.type($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.attributes($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Attributes"));
		if (this.attributes() == null) {
			this.attributes(new $.ig.NativeTypedDictionary());
		}
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.TableColumn::Formatting()" />*/
	formatting: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.TableColumn::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.TableColumn::ConditionalFormatting()" />*/
	conditionalFormatting: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.TableColumn::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.TableColumn::Sorting()" />*/
	sorting: function () {
		return $.ig.DashboardSortingType.prototype.none;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.TableColumn::Sorting()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableColumn::HasFeature(System.String)" />*/
	hasFeature: function (feature) {
		var key = $.ig.TableColumn.prototype._featurePrefix + feature;
		return this.attributes().containsKey(key) && this.attributes().getBoolValue(key);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableColumn::HasFeature(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.TableColumn::AddFeature(System.String)" />*/
	addFeature: function (feature) {
		this.attributes().setBoolValue($.ig.TableColumn.prototype._featurePrefix + feature, true);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.TableColumn::AddFeature(System.String)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.TableColumn::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "Label", this.label());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.DashboardEnumSerialization.prototype.writeDataType(this.type()));
		var fmt = this.formatting();
		if (fmt != null) {
			json["Formatting"] = (fmt).toJson();
		}
		$.ig.JsonUtility.prototype.saveContainer(json, "Attributes", this.attributes());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.TableColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('TableColumn', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.TableColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.FieldTableColumn" />*/

$.ig.util.defType('FieldTableColumn', 'TableColumn', {
	_sourceField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.FieldTableColumn::SourceField()" />*/
	sourceField: function (value) {
		if (arguments.length === 1) {
			this._sourceField = value;
			return value;
		} else {
			return this._sourceField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.FieldTableColumn::SourceField()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TableColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.TableColumn.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "SourceField")) {
			this.sourceField(new $.ig.Field(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SourceField"])));
		}
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FieldTableColumn::Formatting()" />*/
	formatting: function () {
		return this.sourceField() == null ? null : this.sourceField().formatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FieldTableColumn::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.FieldTableColumn::ConditionalFormatting()" />*/
	conditionalFormatting: function () {
		return this.sourceField() == null ? null : this.sourceField().conditionalFormatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.FieldTableColumn::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.FieldTableColumn::Sorting()" />*/
	sorting: function () {
		return this.sourceField() == null ? $.ig.DashboardSortingType.prototype.none : this.sourceField().sorting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.FieldTableColumn::Sorting()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.FieldTableColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.TableColumn.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SourceField", this.sourceField());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.FieldTableColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('FieldTableColumn', $.ig.TableColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.FieldTableColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.ComputedColumn" />*/

$.ig.util.defType('ComputedColumn', 'FieldTableColumn', {
	_resultType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.ComputedColumn::ResultType()" />*/
	resultType: function (value) {
		if (arguments.length === 1) {
			this._resultType = value;
			return value;
		} else {
			return this._resultType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.ComputedColumn::ResultType()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FieldTableColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.FieldTableColumn.prototype.init1.call(this, 1, json);
		this.resultType($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "ResultType")));
	},
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.ComputedColumn::Expression()" />*/
	expression: function () {
		return this.sourceField().expression();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.ComputedColumn::Expression()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.ComputedColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.FieldTableColumn.prototype.toJson.call(this);
		json["ResultType"] = $.ig.DashboardEnumSerialization.prototype.writeDataType(this.resultType());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.ComputedColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('ComputedColumn', $.ig.FieldTableColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.ComputedColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.IHierarchyColumn" />*/

$.ig.util.defType('IHierarchyColumn', 'Object', {
	$type: new $.ig.Type('IHierarchyColumn', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.IHierarchyColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.PivotDimensionColumn" />*/

$.ig.util.defType('PivotDimensionColumn', 'FieldTableColumn', {
	_dimensionField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::DimensionField()" />*/
	dimensionField: function (value) {
		if (arguments.length === 1) {
			this._dimensionField = value;
			return value;
		} else {
			return this._dimensionField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::DimensionField()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FieldTableColumn.prototype.init.call(this, 0);
	},
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::HierarchyName()" />*/
	hierarchyName: function () {
		return this.dimensionField() == null ? null : this.dimensionField().fieldName();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::HierarchyName()" />*/
	,
	init1: function (initNumber, json) {
		$.ig.FieldTableColumn.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DimensionField")) {
			var dfJson = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DimensionField"]);
			var instanceType = $.ig.JsonUtility.prototype.loadString(dfJson, "_type");
			if (instanceType == "SummarizationDateFieldType") {
				this.dimensionField(new $.ig.SummarizationDateField(2, dfJson));
			} else if (instanceType == "SummarizationRegularFieldType") {
				this.dimensionField(new $.ig.SummarizationRegularField(2, dfJson));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.FieldTableColumn.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DimensionField", this.dimensionField());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::ToJson()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::Formatting()" />*/
	formatting: function () {
		if (($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, this.dimensionField()) !== null) && (this.dimensionField()).dateFormatting() != null) {
			return (this.dimensionField()).dateFormatting();
		} else {
			return $.ig.FieldTableColumn.prototype.formatting.call(this);
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.PivotDimensionColumn::Formatting()" />*/
	,
	$type: new $.ig.Type('PivotDimensionColumn', $.ig.FieldTableColumn.prototype.$type, [$.ig.IHierarchyColumn.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.PivotDimensionColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.PivotMeasureColumn" />*/

$.ig.util.defType('PivotMeasureColumn', 'FieldTableColumn', {
	_valueField: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ValueField()" />*/
	valueField: function (value) {
		if (arguments.length === 1) {
			this._valueField = value;
			return value;
		} else {
			return this._valueField;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ValueField()" />*/
	,
	_isTotalColumn: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::IsTotalColumn()" />*/
	isTotalColumn: function (value) {
		if (arguments.length === 1) {
			this._isTotalColumn = value;
			return value;
		} else {
			return this._isTotalColumn;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::IsTotalColumn()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FieldTableColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.FieldTableColumn.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "ValueField")) {
			this.valueField(new $.ig.SummarizationValueField(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["ValueField"])));
			this.isTotalColumn($.ig.JsonUtility.prototype.loadBool(json, "IsTotalColumn"));
		}
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::Formatting()" />*/
	formatting: function () {
		return this.valueField().formatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ConditionalFormatting()" />*/
	conditionalFormatting: function () {
		return this.valueField().conditionalFormatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ConditionalFormatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::Sorting()" />*/
	sorting: function () {
		return this.valueField().sorting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::Sorting()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.FieldTableColumn.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ValueField", this.valueField());
		$.ig.JsonUtility.prototype.saveBool(json, "IsTotalColumn", this.isTotalColumn());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotMeasureColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('PivotMeasureColumn', $.ig.FieldTableColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.PivotMeasureColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn" />*/

$.ig.util.defType('PivotDateDimensionColumn', 'PivotDimensionColumn', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PivotDimensionColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.PivotDimensionColumn.prototype.init1.call(this, 1, json);
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn::DateField()" />*/
	dateField: function () {
		return this.dimensionField();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn::DateField()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn::DateAggregation()" />*/
	dateAggregation: function () {
		return this.dateField().dateAggregationType();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn::DateAggregation()" />*/
	,
	$type: new $.ig.Type('PivotDateDimensionColumn', $.ig.PivotDimensionColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.PivotDateDimensionColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.PivotAdhocColumn" />*/

$.ig.util.defType('PivotAdhocColumn', 'PivotDimensionColumn', {
	_levelsCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::LevelsCount()" />*/
	levelsCount: function (value) {
		if (arguments.length === 1) {
			this._levelsCount = value;
			return value;
		} else {
			return this._levelsCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::LevelsCount()" />*/
	,
	_drillDownLevels: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::DrillDownLevels()" />*/
	drillDownLevels: function (value) {
		if (arguments.length === 1) {
			this._drillDownLevels = value;
			return value;
		} else {
			return this._drillDownLevels;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::DrillDownLevels()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PivotDimensionColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.PivotDimensionColumn.prototype.init1.call(this, 1, json);
		this.levelsCount($.ig.JsonUtility.prototype.loadInt(json, "LevelsCount"));
		this.drillDownLevels($.ig.JsonUtility.prototype.loadInt(json, "DrillDownLevels"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.PivotDimensionColumn.prototype.toJson.call(this);
		json["LevelsCount"] = this.levelsCount();
		json["DrillDownLevels"] = this.drillDownLevels();
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.PivotAdhocColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('PivotAdhocColumn', $.ig.PivotDimensionColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.PivotAdhocColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn" />*/

$.ig.util.defType('XmlaHierarchyColumn', 'TableColumn', {
	_sourceElement: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::SourceElement()" />*/
	sourceElement: function (value) {
		if (arguments.length === 1) {
			this._sourceElement = value;
			return value;
		} else {
			return this._sourceElement;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::SourceElement()" />*/
	,
	_isDrillUpEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::IsDrillUpEnabled()" />*/
	isDrillUpEnabled: function (value) {
		if (arguments.length === 1) {
			this._isDrillUpEnabled = value;
			return value;
		} else {
			return this._isDrillUpEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::IsDrillUpEnabled()" />*/
	,
	_levelsCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::LevelsCount()" />*/
	levelsCount: function (value) {
		if (arguments.length === 1) {
			this._levelsCount = value;
			return value;
		} else {
			return this._levelsCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::LevelsCount()" />*/
	,
	_levels: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::Levels()" />*/
	levels: function (value) {
		if (arguments.length === 1) {
			this._levels = value;
			return value;
		} else {
			return this._levels;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::Levels()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TableColumn.prototype.init.call(this, 0);
	},
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::HierarchyName()" />*/
	hierarchyName: function () {
		return this.sourceElement() == null ? null : this.sourceElement().uniqueName();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::HierarchyName()" />*/
	,
	init1: function (initNumber, json) {
		$.ig.TableColumn.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "SourceElement")) {
			var eJson = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SourceElement"]);
			var instanceType = $.ig.JsonUtility.prototype.loadString(eJson, "_type");
			if (instanceType == "XmlaDimensionType") {
				this.sourceElement(new $.ig.XmlaDimension(2, eJson));
			} else if (instanceType == "XmlaHierarchyType") {
				this.sourceElement(new $.ig.XmlaHierarchy(2, eJson));
			} else if (instanceType == "XmlaHierarchyLevelType") {
				this.sourceElement(new $.ig.XmlaHierarchyLevel(2, eJson));
			} else if (instanceType == "XmlaSetType") {
				this.sourceElement(new $.ig.XmlaSet(2, eJson));
			}
		}
		this.isDrillUpEnabled($.ig.JsonUtility.prototype.loadBool(json, "IsDrillUpEnabled"));
		this.levelsCount($.ig.JsonUtility.prototype.loadInt(json, "LevelsCount"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Levels")) {
			var jsonLevels = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Levels");
			this.levels(new $.ig.Array());
			var len = jsonLevels.length;
			for (var i = 0; i < len; i++) {
				this.levels().add(new $.ig.XmlaHierarchyLevel(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonLevels[i])));
			}
		}
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::Sorting()" />*/
	sorting: function () {
		return this.sourceElement() == null ? $.ig.DashboardSortingType.prototype.none : this.sourceElement().sorting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::Sorting()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.TableColumn.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SourceElement", this.sourceElement());
		json["IsDrillUpEnabled"] = this.isDrillUpEnabled();
		json["LevelsCount"] = this.levelsCount();
		$.ig.JsonUtility.prototype.saveContainer(json, "Levels", this.levels());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaHierarchyColumn', $.ig.TableColumn.prototype.$type, [$.ig.IHierarchyColumn.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.XmlaHierarchyColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn" />*/

$.ig.util.defType('XmlaMeasureColumn', 'TableColumn', {
	_sourceMeasure: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::SourceMeasure()" />*/
	sourceMeasure: function (value) {
		if (arguments.length === 1) {
			this._sourceMeasure = value;
			return value;
		} else {
			return this._sourceMeasure;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::SourceMeasure()" />*/
	,
	_tuple: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::Tuple()" />*/
	tuple: function (value) {
		if (arguments.length === 1) {
			this._tuple = value;
			return value;
		} else {
			return this._tuple;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::Tuple()" />*/
	,
	_isTotalColumn: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::IsTotalColumn()" />*/
	isTotalColumn: function (value) {
		if (arguments.length === 1) {
			this._isTotalColumn = value;
			return value;
		} else {
			return this._isTotalColumn;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::IsTotalColumn()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TableColumn.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.TableColumn.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "SourceMeasure")) {
			this.sourceMeasure(new $.ig.XmlaMeasure(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["SourceMeasure"])));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Tuple")) {
			var jsonTuple = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Tuple");
			this.tuple(new $.ig.Array());
			var len = jsonTuple.length;
			for (var i = 0; i < len; i++) {
				this.tuple().add(new $.ig.XmlaAxisMember(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonTuple[i])));
			}
		}
		this.isTotalColumn($.ig.JsonUtility.prototype.loadBool(json, "IsTotalColumn"));
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::Formatting()" />*/
	formatting: function () {
		return this.sourceMeasure().formatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::Formatting()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::ConditionalFormatting()" />*/
	conditionalFormatting: function () {
		return this.sourceMeasure().conditionalFormatting();
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.ConditionalFormattingSpec Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::ConditionalFormatting()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::ToJson()" />*/
	toJson: function () {
		var json = $.ig.TableColumn.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "SourceMeasure", this.sourceMeasure());
		$.ig.JsonUtility.prototype.saveContainer(json, "Tuple", this.tuple());
		$.ig.JsonUtility.prototype.saveBool(json, "IsTotalColumn", this.isTotalColumn());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaMeasureColumn', $.ig.TableColumn.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.XmlaMeasureColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.XmlaAxisMember" />*/

$.ig.util.defType('XmlaAxisMember', 'Object', {
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Caption()" />*/
	,
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::UniqueName()" />*/
	,
	_level: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Level()" />*/
	level: function (value) {
		if (arguments.length === 1) {
			this._level = value;
			return value;
		} else {
			return this._level;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Level()" />*/
	,
	_hierarchy: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Hierarchy()" />*/
	hierarchy: function (value) {
		if (arguments.length === 1) {
			this._hierarchy = value;
			return value;
		} else {
			return this._hierarchy;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Hierarchy()" />*/
	,
	_maxLevel: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::MaxLevel()" />*/
	maxLevel: function (value) {
		if (arguments.length === 1) {
			this._maxLevel = value;
			return value;
		} else {
			return this._maxLevel;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::MaxLevel()" />*/
	,
	_childCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::ChildCount()" />*/
	childCount: function (value) {
		if (arguments.length === 1) {
			this._childCount = value;
			return value;
		} else {
			return this._childCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.XmlaAxisMember::ChildCount()" />*/
	,
	_drilledDown: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaAxisMember::DrilledDown()" />*/
	drilledDown: function (value) {
		if (arguments.length === 1) {
			this._drilledDown = value;
			return value;
		} else {
			return this._drilledDown;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.XmlaAxisMember::DrilledDown()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.caption($.ig.JsonUtility.prototype.loadString(json, "Caption"));
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.level($.ig.JsonUtility.prototype.loadInt(json, "Level"));
		this.hierarchy($.ig.JsonUtility.prototype.loadString(json, "Hierarchy"));
		this.maxLevel($.ig.JsonUtility.prototype.loadInt(json, "MaxLevel"));
		this.childCount($.ig.JsonUtility.prototype.loadInt(json, "ChildCount"));
		this.drilledDown($.ig.JsonUtility.prototype.loadBool(json, "DrilledDown"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Clone()" />*/
	clone: function () {
		var newMember = new $.ig.XmlaAxisMember(0);
		newMember.caption(this.caption());
		newMember.uniqueName(this.uniqueName());
		newMember.level(this.level());
		newMember.hierarchy(this.hierarchy());
		newMember.maxLevel(this.maxLevel());
		newMember.childCount(this.childCount());
		newMember.drilledDown(this.drilledDown());
		return newMember;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.XmlaAxisMember::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaAxisMember::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveInt(json, "Level", this.level());
		$.ig.JsonUtility.prototype.saveObject(json, "Hierarchy", this.hierarchy());
		$.ig.JsonUtility.prototype.saveInt(json, "MaxLevel", this.maxLevel());
		$.ig.JsonUtility.prototype.saveInt(json, "ChildCount", this.childCount());
		$.ig.JsonUtility.prototype.saveBool(json, "DrilledDown", this.drilledDown());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.XmlaAxisMember::ToJson()" />*/
	,
	$type: new $.ig.Type('XmlaAxisMember', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.XmlaAxisMember" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.TableCell" />*/

$.ig.util.defType('TableCell', 'Object', {
	_value: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.TableCell::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.TableCell::Value()" />*/
	,
	_formattedValue: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableCell::FormattedValue()" />*/
	formattedValue: function (value) {
		if (arguments.length === 1) {
			this._formattedValue = value;
			return value;
		} else {
			return this._formattedValue;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableCell::FormattedValue()" />*/
	,
	_isHighlighted: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableCell::IsHighlighted()" />*/
	isHighlighted: function (value) {
		if (arguments.length === 1) {
			this._isHighlighted = value;
			return value;
		} else {
			return this._isHighlighted;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableCell::IsHighlighted()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.value($.ig.JsonUtility.prototype.loadObject(json, "Value"));
		this.formattedValue($.ig.JsonUtility.prototype.loadString(json, "FormattedValue"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.TableCell::ToJson()" />*/
	toJson: function () {
		var json = {};
		json["_type"] = $.ig.JsonUtility.prototype.getClassTypeName(this);
		$.ig.JsonUtility.prototype.saveObject(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "FormattedValue", this.formattedValue());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.TableCell::ToJson()" />*/
	,
	$type: new $.ig.Type('TableCell', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.TableCell" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.HierarchyCell" />*/

$.ig.util.defType('HierarchyCell', 'TableCell', {
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::UniqueName()" />*/
	,
	_caption: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::Caption()" />*/
	caption: function (value) {
		if (arguments.length === 1) {
			this._caption = value;
			return value;
		} else {
			return this._caption;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::Caption()" />*/
	,
	_indentation: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.HierarchyCell::Indentation()" />*/
	indentation: function (value) {
		if (arguments.length === 1) {
			this._indentation = value;
			return value;
		} else {
			return this._indentation;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.HierarchyCell::Indentation()" />*/
	,
	_hierarchyUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::HierarchyUniqueName()" />*/
	hierarchyUniqueName: function (value) {
		if (arguments.length === 1) {
			this._hierarchyUniqueName = value;
			return value;
		} else {
			return this._hierarchyUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::HierarchyUniqueName()" />*/
	,
	_levelUniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::LevelUniqueName()" />*/
	levelUniqueName: function (value) {
		if (arguments.length === 1) {
			this._levelUniqueName = value;
			return value;
		} else {
			return this._levelUniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.HierarchyCell::LevelUniqueName()" />*/
	,
	_isTotal: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.HierarchyCell::IsTotal()" />*/
	isTotal: function (value) {
		if (arguments.length === 1) {
			this._isTotal = value;
			return value;
		} else {
			return this._isTotal;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.HierarchyCell::IsTotal()" />*/
	,
	_isExpanded: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.HierarchyCell::IsExpanded()" />*/
	isExpanded: function (value) {
		if (arguments.length === 1) {
			this._isExpanded = value;
			return value;
		} else {
			return this._isExpanded;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.HierarchyCell::IsExpanded()" />*/
	,
	_rowDescriptor: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.RowDescriptor Infragistics.ReportPlus.DataLayer.HierarchyCell::RowDescriptor()" />*/
	rowDescriptor: function (value) {
		if (arguments.length === 1) {
			this._rowDescriptor = value;
			return value;
		} else {
			return this._rowDescriptor;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.RowDescriptor Infragistics.ReportPlus.DataLayer.HierarchyCell::RowDescriptor()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TableCell.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.TableCell.prototype.init1.call(this, 1, json);
		this.uniqueName($.ig.JsonUtility.prototype.loadString(json, "UniqueName"));
		this.caption($.ig.JsonUtility.prototype.loadString(json, "Caption"));
		this.indentation($.ig.JsonUtility.prototype.loadInt(json, "Indentation"));
		this.hierarchyUniqueName($.ig.JsonUtility.prototype.loadString(json, "HierarchyUniqueName"));
		this.levelUniqueName($.ig.JsonUtility.prototype.loadString(json, "LevelUniqueName"));
		this.isTotal($.ig.JsonUtility.prototype.loadBool(json, "IsTotal"));
		this.isExpanded($.ig.JsonUtility.prototype.loadBool(json, "IsExpanded"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "RowDescriptor")) {
			this.rowDescriptor(new $.ig.RowDescriptor($.ig.NativeDataLayerUtility.prototype.getJsonIntArray(json, "RowDescriptor")));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.HierarchyCell::ToJson()" />*/
	toJson: function () {
		var json = $.ig.TableCell.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveObject(json, "UniqueName", this.uniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "Caption", this.caption());
		$.ig.JsonUtility.prototype.saveInt(json, "Indentation", this.indentation());
		$.ig.JsonUtility.prototype.saveObject(json, "HierarchyUniqueName", this.hierarchyUniqueName());
		$.ig.JsonUtility.prototype.saveObject(json, "LevelUniqueName", this.levelUniqueName());
		$.ig.JsonUtility.prototype.saveBool(json, "IsTotal", this.isTotal());
		$.ig.JsonUtility.prototype.saveBool(json, "IsExpanded", this.isExpanded());
		if (this.rowDescriptor() != null) {
			$.ig.JsonUtility.prototype.saveIntArray(json, "RowDescriptor", this.rowDescriptor().getRaw());
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.HierarchyCell::ToJson()" />*/
	,
	$type: new $.ig.Type('HierarchyCell', $.ig.TableCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.HierarchyCell" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RowDescriptor" />*/

$.ig.util.defType('RowDescriptor', 'Object', {
	init: function (rawData) {
		$.ig.Object.prototype.init.call(this);
		this._rootRowIndex = rawData[0];
		this.absoluteIndexesToParents(new Array(rawData.length - 1));
		for (var i = 0; i < rawData.length - 1; i++) {
			this.absoluteIndexesToParents()[i] = rawData[i + 1];
		}
	},
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.RowDescriptor::GetRaw()" />*/
	getRaw: function () {
		var result = new Array(this.absoluteIndexesToParents().length + 1);
		result[0] = this.rootRowIndex();
		for (var i = 0; i < this.absoluteIndexesToParents().length; i++) {
			result[i + 1] = this.absoluteIndexesToParents()[i];
		}
		return result;
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.RowDescriptor::GetRaw()" />*/
	,
	_rootRowIndex: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RowDescriptor::RootRowIndex()" />*/
	rootRowIndex: function (value) {
		if (arguments.length === 1) {
			this._rootRowIndex = value;
			return value;
		} else {
			return this._rootRowIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RowDescriptor::RootRowIndex()" />*/
	,
	_aboluteIndexesOfParents: null,
	/*<BeginProperty Name=" Infragistics.ReportPlus.DataLayer.RowDescriptor::AbsoluteIndexesToParents()" />*/
	absoluteIndexesToParents: function (value) {
		if (arguments.length === 1) {
			this._aboluteIndexesOfParents = value;
			return value;
		} else {
			return this._aboluteIndexesOfParents;
		}
	}
	/*<EndProperty Name=" Infragistics.ReportPlus.DataLayer.RowDescriptor::AbsoluteIndexesToParents()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.RowDescriptor::ToString()" />*/
	toString: function () {
		var s = "RootRowIndex: " + this.rootRowIndex() + "; AbsIndexesToParents";
		if (this.absoluteIndexesToParents().length == 0) {
			s = s + " <none>";
		} else {
			for (var i = 0; i < this.absoluteIndexesToParents().length; i++) {
				s = s + this.absoluteIndexesToParents()[0];
				if (i != this.absoluteIndexesToParents().length - 1) {
					s = s + ", ";
				}
			}
		}
		return s;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.RowDescriptor::ToString()" />*/
	,
	$type: new $.ig.Type('RowDescriptor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RowDescriptor" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.JsonUtility" />*/

$.ig.util.defType('JsonUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveObject(System.JSDictionary, System.String, System.Object)" />*/
	saveObject: function (json, name, value) {
		$.ig.JsonUtility.prototype.saveJsonObject(json, name, value);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveObject(System.JSDictionary, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDateToJson(System.DateTime)" />*/
	saveDateToJson: function (dateTime) {
		var dictionary = {};
		dictionary["_type"] = "date";
		dictionary["value"] = $.ig.NativeDataLayerUtility.prototype.serializeXmlDateTime(dateTime);
		return dictionary;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDateToJson(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveJsonObject(System.JSDictionary, System.String, System.Object)" />*/
	saveJsonObject: function (json, name, value) {
		if (value != null) {
			if ($.ig.util.cast($.ig.IDashboardModelObject.prototype.$type, value) !== null) {
				json[name] = (value).toJson();
			} else if ($.ig.util.cast($.ig.Date.prototype.$type, value) !== null) {
				json[name] = $.ig.JsonUtility.prototype.saveDateToJson(value);
			} else if ((typeof value === 'number') && $.ig.util.isNaN(value)) {
			} else {
				json[name] = value;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveJsonObject(System.JSDictionary, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveStringList(System.JSDictionary, System.String, System.Collections.ArrayList)" />*/
	saveStringList: function (json, name, stringList) {
		if (stringList != null) {
			json[name] = stringList;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveStringList(System.JSDictionary, System.String, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveInt(System.JSDictionary, System.String, System.Int32)" />*/
	saveInt: function (json, name, value) {
		json[name] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveInt(System.JSDictionary, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDouble(System.JSDictionary, System.String, System.Double)" />*/
	saveDouble: function (json, name, value) {
		json[name] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDouble(System.JSDictionary, System.String, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveBool(System.JSDictionary, System.String, System.Boolean)" />*/
	saveBool: function (json, name, value) {
		json[name] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveBool(System.JSDictionary, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalBool(System.JSDictionary, System.String, System.Nullable)" />*/
	saveOptionalBool: function (json, name, value) {
		if (!$.ig.NativeDataLayerUtility.prototype.isNullBool(value)) {
			json[name] = $.ig.util.unwrapNullable(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalBool(System.JSDictionary, System.String, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalInt(System.JSDictionary, System.String, System.Nullable)" />*/
	saveOptionalInt: function (json, name, value) {
		if (!$.ig.NativeDataLayerUtility.prototype.isNullInt(value)) {
			json[name] = $.ig.util.unwrapNullable(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalInt(System.JSDictionary, System.String, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalDouble(System.JSDictionary, System.String, System.Nullable)" />*/
	saveOptionalDouble: function (json, name, value) {
		if (!$.ig.NativeDataLayerUtility.prototype.isNullDouble(value)) {
			json[name] = $.ig.util.unwrapNullable(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveOptionalDouble(System.JSDictionary, System.String, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveContainer(System.JSDictionary, System.String, System.Object)" />*/
	saveContainer: function (json, name, value) {
		if (value == null) {
			return;
		}
		if ($.ig.util.cast($.ig.NativeTypedDictionary.prototype.$type, value) !== null) {
			json[name] = $.ig.NativeDataLayerUtility.prototype.typedDictionaryToJson(value);
		} else {
			json[name] = $.ig.NativeDataLayerUtility.prototype.listToJson(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveContainer(System.JSDictionary, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveObjectArray(System.JSDictionary, System.String, , System.Boolean)" />*/
	saveObjectArray: function (json, name, values, convertingDates) {
		if (values != null) {
			json[name] = $.ig.NativeDataLayerUtility.prototype.objectArrayToJson1(values, convertingDates);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveObjectArray(System.JSDictionary, System.String, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveIntArray(System.JSDictionary, System.String, )" />*/
	saveIntArray: function (json, name, values) {
		if (values != null) {
			json[name] = $.ig.NativeDataLayerUtility.prototype.intArrayToJson(values);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveIntArray(System.JSDictionary, System.String, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDoubleArray(System.JSDictionary, System.String, )" />*/
	saveDoubleArray: function (json, name, values) {
		if (values != null) {
			json[name] = $.ig.NativeDataLayerUtility.prototype.doubleArrayToJson(values);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveDoubleArray(System.JSDictionary, System.String, )" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.JsonUtility::LoadString(System.JSDictionary, System.String)" />*/
	loadString: function (json, name) {
		var value = ($.ig.JsonUtility.prototype.containsKey(json, name) ? json[name] : null);
		return value == null ? null : (typeof value === 'string' ? value : value.toString());
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.JsonUtility::LoadString(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.JsonUtility::LoadInt(System.JSDictionary, System.String, System.Int32)" />*/
	loadInt1: function (json, name, defaultValue) {
		return $.ig.JsonUtility.prototype.containsKey(json, name) ? $.ig.NativeDataLayerUtility.prototype.toInt(json[name], defaultValue) : defaultValue;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.JsonUtility::LoadInt(System.JSDictionary, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ReportPlus.DataLayer.JsonUtility::LoadDouble(System.JSDictionary, System.String, System.Double)" />*/
	loadDouble: function (json, name, defaultValue) {
		return $.ig.JsonUtility.prototype.containsKey(json, name) ? $.ig.NativeDataLayerUtility.prototype.toDouble(json[name]) : defaultValue;
	}
	/*<EndMethod Name="System.Double Infragistics.ReportPlus.DataLayer.JsonUtility::LoadDouble(System.JSDictionary, System.String, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.JsonUtility::LoadInt(System.JSDictionary, System.String)" />*/
	loadInt: function (json, name) {
		return $.ig.JsonUtility.prototype.loadInt1(json, name, 0);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.JsonUtility::LoadInt(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::LoadBool(System.JSDictionary, System.String)" />*/
	loadBool: function (json, name) {
		return $.ig.JsonUtility.prototype.loadBool1(json, name, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::LoadBool(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::LoadBool(System.JSDictionary, System.String, System.Boolean)" />*/
	loadBool1: function (json, name, defaultValue) {
		return $.ig.JsonUtility.prototype.containsKey(json, name) ? $.ig.NativeDataLayerUtility.prototype.toBoolean(json[name]) : defaultValue;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::LoadBool(System.JSDictionary, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalInt(System.JSDictionary, System.String)" />*/
	loadOptionalInt: function (json, name) {
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			return $.ig.NativeDataLayerUtility.prototype.wrapInt($.ig.NativeDataLayerUtility.prototype.toInt(json[name], 0));
		} else {
			return $.ig.util.toNullable($.ig.Number.prototype.$type, null);
		}
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalInt(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalDouble(System.JSDictionary, System.String)" />*/
	loadOptionalDouble: function (json, name) {
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			return $.ig.NativeDataLayerUtility.prototype.wrapDouble($.ig.NativeDataLayerUtility.prototype.toDouble(json[name]));
		} else {
			return $.ig.util.toNullable(Number, null);
		}
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalDouble(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalBool(System.JSDictionary, System.String)" />*/
	loadOptionalBool: function (json, name) {
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			return $.ig.NativeDataLayerUtility.prototype.wrapBool($.ig.NativeDataLayerUtility.prototype.toBoolean(json[name]));
		} else {
			return $.ig.util.toNullable($.ig.Boolean.prototype.$type, null);
		}
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadOptionalBool(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonUtility::LoadJsonObjectUnwrappingDates(System.Object)" />*/
	loadJsonObjectUnwrappingDates: function (objectValue) {
		var jsonObject = $.ig.NativeDataLayerUtility.prototype.getJsonObject(objectValue);
		if ($.ig.JsonUtility.prototype.containsKey(jsonObject, "_type")) {
			var type = jsonObject["_type"];
			if (type != null && type == "date" && $.ig.JsonUtility.prototype.containsKey(jsonObject, "value")) {
				var value = jsonObject["value"];
				if (typeof value === 'string') {
					return $.ig.util.unwrapNullable($.ig.NativeDataLayerUtility.prototype.deserializeXmlDateTime(value));
				} else if ($.ig.util.cast($.ig.Date.prototype.$type, value) !== null) {
					return value;
				} else {
					return null;
				}
			}
		}
		return jsonObject;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonUtility::LoadJsonObjectUnwrappingDates(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonUtility::LoadObject(System.JSDictionary, System.String)" />*/
	loadObject: function (json, name) {
		var objectValue = null;
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			objectValue = $.ig.NativeDataLayerUtility.prototype.unwrapJsonNull(json[name]);
		}
		if ($.ig.NativeDataLayerUtility.prototype.isJsonObject(objectValue)) {
			return $.ig.JsonUtility.prototype.loadJsonObjectUnwrappingDates(objectValue);
		} else if ($.ig.NativeDataLayerUtility.prototype.isJsonList(objectValue)) {
			return $.ig.NativeDataLayerUtility.prototype.getJsonList(json, name);
		}
		return objectValue;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonUtility::LoadObject(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.JsonUtility::LoadStringList(System.JSDictionary, System.String)" />*/
	loadStringList: function (json, name) {
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			var jsonList = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, name);
			var strList = new $.ig.Array();
			var size = jsonList.length;
			for (var i = 0; i < size; i++) {
				var value = jsonList[i];
				if (typeof value === 'string') {
					strList.add(value);
				} else if (value != null) {
					strList.add(value.toString());
				}
			}
			return strList;
		} else {
			return new $.ig.Array();
		}
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.JsonUtility::LoadStringList(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.JsonUtility::LoadTypedDictionary(System.JSDictionary, System.String)" />*/
	loadTypedDictionary: function (json, name) {
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			var jsonDictionary = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json[name]);
			var typedDictionary = new $.ig.NativeTypedDictionary();
			typedDictionary.copyValues(jsonDictionary);
			return typedDictionary;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.JsonUtility::LoadTypedDictionary(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadDateTime(System.JSDictionary, System.String)" />*/
	loadDateTime: function (json, name) {
		var value = $.ig.JsonUtility.prototype.loadObject(json, name);
		if ($.ig.util.cast($.ig.Date.prototype.$type, value) !== null) {
			return $.ig.util.toNullable($.ig.Date.prototype.$type, value);
		} else {
			return $.ig.util.toNullable($.ig.Date.prototype.$type, null);
		}
	}
	/*<EndMethod Name="System.Nullable Infragistics.ReportPlus.DataLayer.JsonUtility::LoadDateTime(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.JsonUtility::GetClassTypeName(System.Object)" />*/
	getClassTypeName: function (o) {
		return $.ig.NativeDataLayerUtility.prototype.getSerializationClassName(o) + "Type";
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.JsonUtility::GetClassTypeName(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::ContainsKey(System.JSDictionary, System.String)" />*/
	containsKey: function (json, name) {
		return json[name] != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.JsonUtility::ContainsKey(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPJSONObject Infragistics.ReportPlus.DataLayer.JsonUtility::GetCPJSONObject(System.Object)" />*/
	getCPJSONObject: function (objectValue) {
		var jsonObject = $.ig.NativeDataLayerUtility.prototype.getJsonObject(objectValue);
		return new $.ig.CPJSONObject(0, jsonObject);
	}
	/*<EndMethod Name="Infragistics.CPJSONObject Infragistics.ReportPlus.DataLayer.JsonUtility::GetCPJSONObject(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper Infragistics.ReportPlus.DataLayer.JsonUtility::LoadJsonObjectWrapper(System.JSDictionary, System.String)" />*/
	loadJsonObjectWrapper: function (json, name) {
		var objectValue = null;
		if ($.ig.JsonUtility.prototype.containsKey(json, name)) {
			objectValue = $.ig.NativeDataLayerUtility.prototype.unwrapJsonNull(json[name]);
		}
		if ($.ig.NativeDataLayerUtility.prototype.isJsonObject(objectValue)) {
			return new $.ig.JsonObjectWrapper(2, $.ig.JsonUtility.prototype.getCPJSONObject(objectValue));
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper Infragistics.ReportPlus.DataLayer.JsonUtility::LoadJsonObjectWrapper(System.JSDictionary, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveJsonObjectWrapper(System.JSDictionary, System.String, Infragistics.ReportPlus.DataLayer.JsonObjectWrapper)" />*/
	saveJsonObjectWrapper: function (json, name, o) {
		if (o != null) {
			json[name] = o.jSONObject().jSONObject();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.JsonUtility::SaveJsonObjectWrapper(System.JSDictionary, System.String, Infragistics.ReportPlus.DataLayer.JsonObjectWrapper)" />*/
	,
	$type: new $.ig.Type('JsonUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.JsonUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper" />*/

$.ig.util.defType('JsonObjectWrapper', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.jSONObject(new $.ig.CPJSONObject(1));
	},
	init1: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.jSONObject(other.jSONObject().cloneJSON());
	},
	init2: function (initNumber, o) {
		$.ig.Object.prototype.init.call(this);
		this.jSONObject(o);
	},
	_jSONObject: null,
	/*<BeginProperty Name="Infragistics.CPJSONObject Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::JSONObject()" />*/
	jSONObject: function (value) {
		if (arguments.length === 1) {
			this._jSONObject = value;
			return value;
		} else {
			return this._jSONObject;
		}
	}
	/*<EndProperty Name="Infragistics.CPJSONObject Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::JSONObject()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::Clone()" />*/
	clone: function () {
		return new $.ig.JsonObjectWrapper(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::ToJson()" />*/
	toJson: function () {
		return this.jSONObject().jSONObject();
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.JsonObjectWrapper::ToJson()" />*/
	,
	$type: new $.ig.Type('JsonObjectWrapper', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.JsonObjectWrapper" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.ReportPlusError" />*/

$.ig.util.defType('ReportPlusError', 'Object', {
	_errorCode: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorCode()" />*/
	errorCode: function (value) {
		if (arguments.length === 1) {
			this._errorCode = value;
			return value;
		} else {
			return this._errorCode;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorCode()" />*/
	,
	_errorMessage: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorMessage()" />*/
	errorMessage: function (value) {
		if (arguments.length === 1) {
			this._errorMessage = value;
			return value;
		} else {
			return this._errorMessage;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorMessage()" />*/
	,
	_errorDetail: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorDetail()" />*/
	errorDetail: function (value) {
		if (arguments.length === 1) {
			this._errorDetail = value;
			return value;
		} else {
			return this._errorDetail;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ErrorDetail()" />*/
	,
	_nativeError: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.ReportPlusError::NativeError()" />*/
	nativeError: function (value) {
		if (arguments.length === 1) {
			this._nativeError = value;
			return value;
		} else {
			return this._nativeError;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.ReportPlusError::NativeError()" />*/
	,
	_stackTrace: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::StackTrace()" />*/
	stackTrace: function (value) {
		if (arguments.length === 1) {
			this._stackTrace = value;
			return value;
		} else {
			return this._stackTrace;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::StackTrace()" />*/
	,
	_additionalInfo: null,
	/*<BeginProperty Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.ReportPlusError::AdditionalInfo()" />*/
	additionalInfo: function (value) {
		if (arguments.length === 1) {
			this._additionalInfo = value;
			return value;
		} else {
			return this._additionalInfo;
		}
	}
	/*<EndProperty Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.ReportPlusError::AdditionalInfo()" />*/
	,
	init: function (initNumber, code, message, detail, additionalInfo, error) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.errorCode(code);
		this.errorMessage(message);
		this.errorDetail(detail);
		this.nativeError(error);
		this.additionalInfo(additionalInfo);
	},
	init1: function (initNumber, code, message, detail, error) {
		$.ig.ReportPlusError.prototype.init.call(this, 0, code, message, detail, null, error);
	},
	init2: function (initNumber, code, message, error) {
		$.ig.ReportPlusError.prototype.init.call(this, 0, code, message, null, null, error);
	},
	init3: function (initNumber, message, detail) {
		$.ig.ReportPlusError.prototype.init.call(this, 0, $.ig.ReportPlusErrorCode.prototype.other, message, detail, null, null);
	},
	init4: function (initNumber, message) {
		$.ig.ReportPlusError.prototype.init.call(this, 0, $.ig.ReportPlusErrorCode.prototype.other, message, null, null, null);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(System.Object)" />*/
	createError1: function (error) {
		var message = error.toString();
		return new $.ig.ReportPlusError(2, $.ig.ReportPlusErrorCode.prototype.other, message, error);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(System.Object, System.String)" />*/
	createError2: function (error, message) {
		return new $.ig.ReportPlusError(2, $.ig.ReportPlusErrorCode.prototype.other, message, error);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(Infragistics.CPError)" />*/
	createError: function (error) {
		return new $.ig.ReportPlusError(1, $.ig.ReportPlusErrorCode.prototype.other, error.errorMessage(), error.errorDetail(), error.nativeError());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateError(Infragistics.CPError)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateDownloadSizeLimitReachedError()" />*/
	createDownloadSizeLimitReachedError: function () {
		return new $.ig.ReportPlusError(2, $.ig.ReportPlusErrorCode.prototype.dataSizeLimitReached_FileSize, "The data you are trying to download is too large. Please contact us if you would like to increase these limits.", null);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateDownloadSizeLimitReachedError()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateErrorFromJson(System.JSDictionary)" />*/
	createErrorFromJson: function (jsonError) {
		var errorCode = $.ig.JsonUtility.prototype.loadInt(jsonError, "errorCode");
		var errorMessage = $.ig.JsonUtility.prototype.loadString(jsonError, "errorMessage");
		var errorDetail = $.ig.JsonUtility.prototype.loadString(jsonError, "errorDetail");
		var additionalInfo = $.ig.JsonUtility.prototype.loadObject(jsonError, "additionalInfo");
		return new $.ig.ReportPlusError(0, errorCode, errorMessage, errorDetail, additionalInfo, null);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.ReportPlusError Infragistics.ReportPlus.DataLayer.ReportPlusError::CreateErrorFromJson(System.JSDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.ReportPlusError::AddAdditionalInfo(System.String, System.String)" />*/
	addAdditionalInfo: function (key, info) {
		if (info != null) {
			if (this.additionalInfo() == null) {
				this.additionalInfo({});
			}
			this.additionalInfo()[key] = info;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.ReportPlusError::AddAdditionalInfo(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.ReportPlusError::ContainsAdditionalInfo(System.String)" />*/
	containsAdditionalInfo: function (key) {
		if (this.additionalInfo() == null) {
			return false;
		}
		return this.additionalInfo()[key] != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.ReportPlusError::ContainsAdditionalInfo(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::GetAdditionalInfo(System.String)" />*/
	getAdditionalInfo: function (key) {
		return this.containsAdditionalInfo(key) ? this.additionalInfo()[key] : null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::GetAdditionalInfo(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ToString()" />*/
	toString: function () {
		var ecode;
		ecode = $.ig.ReportPlusErrorCode.prototype.getBox(this.errorCode());
		var msg = "Code " + ecode + ": " + (this.errorMessage() != null ? this.errorMessage() : "<no message>");
		if (this.errorDetail() != null) {
			msg = msg + "\n Detail: " + this.errorDetail();
		}
		if (this.nativeError() != null) {
			msg = msg + "\n" + $.ig.NativeStringUtility.prototype.nativeErrorToString(this.nativeError());
		} else if (this.stackTrace() != null) {
			msg = msg + "\n" + this.stackTrace();
		}
		return msg;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.ReportPlusError::ToString()" />*/
	,
	$type: new $.ig.Type('ReportPlusError', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.ReportPlusError" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RPExportChartObject" />*/

$.ig.util.defType('RPExportChartObject', 'Object', {
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::Title()" />*/
	,
	_seriesColors: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportChartObject::SeriesColors()" />*/
	seriesColors: function (value) {
		if (arguments.length === 1) {
			this._seriesColors = value;
			return value;
		} else {
			return this._seriesColors;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportChartObject::SeriesColors()" />*/
	,
	_visualizationSettings: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DataLayer.RPExportChartObject::VisualizationSettings()" />*/
	visualizationSettings: function (value) {
		if (arguments.length === 1) {
			this._visualizationSettings = value;
			return value;
		} else {
			return this._visualizationSettings;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DataLayer.RPExportChartObject::VisualizationSettings()" />*/
	,
	_compositeChart1FieldsCount: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.RPExportChartObject::CompositeChart1FieldsCount()" />*/
	compositeChart1FieldsCount: function (value) {
		if (arguments.length === 1) {
			this._compositeChart1FieldsCount = value;
			return value;
		} else {
			return this._compositeChart1FieldsCount;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.RPExportChartObject::CompositeChart1FieldsCount()" />*/
	,
	_xAxisTitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::XAxisTitle()" />*/
	xAxisTitle: function (value) {
		if (arguments.length === 1) {
			this._xAxisTitle = value;
			return value;
		} else {
			return this._xAxisTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::XAxisTitle()" />*/
	,
	_yAxisTitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::YAxisTitle()" />*/
	yAxisTitle: function (value) {
		if (arguments.length === 1) {
			this._yAxisTitle = value;
			return value;
		} else {
			return this._yAxisTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::YAxisTitle()" />*/
	,
	_sparklineNoticeText: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineNoticeText()" />*/
	sparklineNoticeText: function (value) {
		if (arguments.length === 1) {
			this._sparklineNoticeText = value;
			return value;
		} else {
			return this._sparklineNoticeText;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineNoticeText()" />*/
	,
	_sparklineDifferenceLabel: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineDifferenceLabel()" />*/
	sparklineDifferenceLabel: function (value) {
		if (arguments.length === 1) {
			this._sparklineDifferenceLabel = value;
			return value;
		} else {
			return this._sparklineDifferenceLabel;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineDifferenceLabel()" />*/
	,
	_sparklineRedColor: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineRedColor()" />*/
	sparklineRedColor: function (value) {
		if (arguments.length === 1) {
			this._sparklineRedColor = value;
			return value;
		} else {
			return this._sparklineRedColor;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineRedColor()" />*/
	,
	_sparklineGreenColor: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineGreenColor()" />*/
	sparklineGreenColor: function (value) {
		if (arguments.length === 1) {
			this._sparklineGreenColor = value;
			return value;
		} else {
			return this._sparklineGreenColor;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineGreenColor()" />*/
	,
	_sparklineColor: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineColor()" />*/
	sparklineColor: function (value) {
		if (arguments.length === 1) {
			this._sparklineColor = value;
			return value;
		} else {
			return this._sparklineColor;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportChartObject::SparklineColor()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		this.seriesColors($.ig.JsonUtility.prototype.loadObject(json, "SeriesColors"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "VisualizationSettings")) {
			this.visualizationSettings($.ig.VisualizationSettings.prototype.fromJson($.ig.JsonUtility.prototype.loadObject(json, "VisualizationSettings")));
		}
		this.compositeChart1FieldsCount($.ig.JsonUtility.prototype.loadOptionalInt(json, "CompositeChart1FieldsCount"));
		this.xAxisTitle($.ig.JsonUtility.prototype.loadString(json, "XAxisTitle"));
		this.yAxisTitle($.ig.JsonUtility.prototype.loadString(json, "YAxisTitle"));
		this.sparklineNoticeText($.ig.JsonUtility.prototype.loadString(json, "SparklineNoticeText"));
		this.sparklineDifferenceLabel($.ig.JsonUtility.prototype.loadString(json, "SparklineDifferenceLabel"));
		this.sparklineRedColor($.ig.JsonUtility.prototype.loadInt(json, "SparklineRedColor"));
		this.sparklineGreenColor($.ig.JsonUtility.prototype.loadInt(json, "SparklineGreenColor"));
		this.sparklineColor($.ig.JsonUtility.prototype.loadInt(json, "SparklineColor"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportChartObject::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		$.ig.JsonUtility.prototype.saveObject(json, "SeriesColors", this.seriesColors());
		if (this.visualizationSettings() != null) {
			$.ig.JsonUtility.prototype.saveJsonObject(json, "VisualizationSettings", this.visualizationSettings().toJson());
		}
		$.ig.JsonUtility.prototype.saveOptionalInt(json, "CompositeChart1FieldsCount", this.compositeChart1FieldsCount());
		$.ig.JsonUtility.prototype.saveObject(json, "XAxisTitle", this.xAxisTitle());
		$.ig.JsonUtility.prototype.saveObject(json, "YAxisTitle", this.yAxisTitle());
		$.ig.JsonUtility.prototype.saveObject(json, "SparklineNoticeText", this.sparklineNoticeText());
		$.ig.JsonUtility.prototype.saveObject(json, "SparklineDifferenceLabel", this.sparklineDifferenceLabel());
		$.ig.JsonUtility.prototype.saveInt(json, "SparklineRedColor", this.sparklineRedColor());
		$.ig.JsonUtility.prototype.saveInt(json, "SparklineGreenColor", this.sparklineGreenColor());
		$.ig.JsonUtility.prototype.saveInt(json, "SparklineColor", this.sparklineColor());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportChartObject::ToJson()" />*/
	,
	$type: new $.ig.Type('RPExportChartObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RPExportChartObject" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RPExportDataObject" />*/

$.ig.util.defType('RPExportDataObject', 'Object', {
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType Infragistics.ReportPlus.DataLayer.RPExportDataObject::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType Infragistics.ReportPlus.DataLayer.RPExportDataObject::Type()" />*/
	,
	_data: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.RPExportDataObject::Data()" />*/
	data: function (value) {
		if (arguments.length === 1) {
			this._data = value;
			return value;
		} else {
			return this._data;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.IDataTable Infragistics.ReportPlus.DataLayer.RPExportDataObject::Data()" />*/
	,
	_capture: null,
	/*<BeginProperty Name="System.Html.Element Infragistics.ReportPlus.DataLayer.RPExportDataObject::Capture()" />*/
	capture: function (value) {
		if (arguments.length === 1) {
			this._capture = value;
			return value;
		} else {
			return this._capture;
		}
	}
	/*<EndProperty Name="System.Html.Element Infragistics.ReportPlus.DataLayer.RPExportDataObject::Capture()" />*/
	,
	_captureImageAspectRatio: 0,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DataLayer.RPExportDataObject::CaptureImageAspectRatio()" />*/
	captureImageAspectRatio: function (value) {
		if (arguments.length === 1) {
			this._captureImageAspectRatio = value;
			return value;
		} else {
			return this._captureImageAspectRatio;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DataLayer.RPExportDataObject::CaptureImageAspectRatio()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDataObject::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDataObject::Title()" />*/
	,
	_subtitle: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDataObject::Subtitle()" />*/
	subtitle: function (value) {
		if (arguments.length === 1) {
			this._subtitle = value;
			return value;
		} else {
			return this._subtitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDataObject::Subtitle()" />*/
	,
	_chart: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.RPExportChartObject Infragistics.ReportPlus.DataLayer.RPExportDataObject::Chart()" />*/
	chart: function (value) {
		if (arguments.length === 1) {
			this._chart = value;
			return value;
		} else {
			return this._chart;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.RPExportChartObject Infragistics.ReportPlus.DataLayer.RPExportDataObject::Chart()" />*/
	,
	init: function (initNumber, type, title, data, capture) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.data(data);
		this.type(type);
		this.title(title);
		this.capture(capture);
	},
	init1: function (initNumber, type, title, subtitle, data, capture) {
		$.ig.RPExportDataObject.prototype.init.call(this, 0, type, title, data, capture);
		this.subtitle(subtitle);
	},
	init2: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Subtitle")) {
			this.subtitle($.ig.JsonUtility.prototype.loadString(json, "Subtitle"));
		}
		this.type($.ig.JsonUtility.prototype.loadInt(json, "Type"));
		switch (this.type()) {
			case $.ig.RPExportDataObjectType.prototype.dataTable:
				this.data($.ig.ClientDataTable.prototype.fromJSON($.ig.JsonUtility.prototype.loadObject(json, "Data")));
				break;
			case $.ig.RPExportDataObjectType.prototype.image:
				this.capture($.ig.NativeDataLayerImageUtility.prototype.convertBase64StringToImage($.ig.JsonUtility.prototype.loadObject(json, "Capture")));
				break;
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "Chart")) {
			this.chart(new $.ig.RPExportChartObject(1, $.ig.JsonUtility.prototype.loadObject(json, "Chart")));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportDataObject::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveInt(json, "Type", this.type());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		if (!$.ig.CPStringUtility.prototype.isNullOrEmpty(this.subtitle())) {
			$.ig.JsonUtility.prototype.saveObject(json, "Subtitle", this.subtitle());
		}
		switch (this.type()) {
			case $.ig.RPExportDataObjectType.prototype.dataTable:
				$.ig.JsonUtility.prototype.saveJsonObject(json, "Data", (this.data()).toJson());
				break;
			case $.ig.RPExportDataObjectType.prototype.image:
				$.ig.JsonUtility.prototype.saveObject(json, "Capture", $.ig.NativeDataLayerImageUtility.prototype.getBase64ImageData(this.capture()));
				break;
		}
		if (this.chart() != null) {
			$.ig.JsonUtility.prototype.saveJsonObject(json, "Chart", this.chart().toJson());
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportDataObject::ToJson()" />*/
	,
	$type: new $.ig.Type('RPExportDataObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RPExportDataObject" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RPExportDashboardObject" />*/

$.ig.util.defType('RPExportDashboardObject', 'Object', {
	_format: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Format()" />*/
	,
	_captures: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Captures()" />*/
	captures: function (value) {
		if (arguments.length === 1) {
			this._captures = value;
			return value;
		} else {
			return this._captures;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Captures()" />*/
	,
	_data: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Data()" />*/
	data: function (value) {
		if (arguments.length === 1) {
			this._data = value;
			return value;
		} else {
			return this._data;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Data()" />*/
	,
	_title: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Title()" />*/
	,
	_poweredBy: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::PoweredBy()" />*/
	poweredBy: function (value) {
		if (arguments.length === 1) {
			this._poweredBy = value;
			return value;
		} else {
			return this._poweredBy;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::PoweredBy()" />*/
	,
	_createdBy: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::CreatedBy()" />*/
	createdBy: function (value) {
		if (arguments.length === 1) {
			this._createdBy = value;
			return value;
		} else {
			return this._createdBy;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::CreatedBy()" />*/
	,
	_color: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Color()" />*/
	color: function (value) {
		if (arguments.length === 1) {
			this._color = value;
			return value;
		} else {
			return this._color;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Color()" />*/
	,
	_logo: null,
	/*<BeginProperty Name="System.Html.Element Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Logo()" />*/
	logo: function (value) {
		if (arguments.length === 1) {
			this._logo = value;
			return value;
		} else {
			return this._logo;
		}
	}
	/*<EndProperty Name="System.Html.Element Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::Logo()" />*/
	,
	_defaultToRevealLogo: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::DefaultToRevealLogo()" />*/
	defaultToRevealLogo: function (value) {
		if (arguments.length === 1) {
			this._defaultToRevealLogo = value;
			return value;
		} else {
			return this._defaultToRevealLogo;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::DefaultToRevealLogo()" />*/
	,
	_isLandscape: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::IsLandscape()" />*/
	isLandscape: function (value) {
		if (arguments.length === 1) {
			this._isLandscape = value;
			return value;
		} else {
			return this._isLandscape;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::IsLandscape()" />*/
	,
	_includeVisualizationExcel: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::IncludeVisualizationExcel()" />*/
	includeVisualizationExcel: function (value) {
		if (arguments.length === 1) {
			this._includeVisualizationExcel = value;
			return value;
		} else {
			return this._includeVisualizationExcel;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::IncludeVisualizationExcel()" />*/
	,
	_dataLanguage: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::DataLanguage()" />*/
	dataLanguage: function (value) {
		if (arguments.length === 1) {
			this._dataLanguage = value;
			return value;
		} else {
			return this._dataLanguage;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::DataLanguage()" />*/
	,
	_userLanguage: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::UserLanguage()" />*/
	userLanguage: function (value) {
		if (arguments.length === 1) {
			this._userLanguage = value;
			return value;
		} else {
			return this._userLanguage;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::UserLanguage()" />*/
	,
	init: function (initNumber, format, title, data) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.data(data);
		this.format(format);
		this.title(title);
		this.includeVisualizationExcel($.ig.RPExportDashboardObject.prototype.iNCLUDEVISUALIZATION_INCLUDE);
		this.isLandscape(true);
	},
	init1: function (initNumber, format, title, poweredBy, createdBy, userLanguage, captures, data) {
		$.ig.RPExportDashboardObject.prototype.init.call(this, 0, format, title, data);
		this.captures(captures);
		this.poweredBy(poweredBy);
		this.createdBy(createdBy);
		this.userLanguage(userLanguage);
	},
	init2: function (initNumber, json) {
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.title($.ig.JsonUtility.prototype.loadString(json, "Title"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "CreatedBy")) {
			this.createdBy($.ig.JsonUtility.prototype.loadString(json, "CreatedBy"));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "PoweredBy")) {
			this.poweredBy($.ig.JsonUtility.prototype.loadString(json, "PoweredBy"));
		}
		this.format($.ig.JsonUtility.prototype.loadString(json, "Format"));
		this.color($.ig.JsonUtility.prototype.loadInt(json, "Color"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Logo")) {
			var imageBase64 = $.ig.JsonUtility.prototype.loadString(json, "Logo");
			this.logo($.ig.NativeDataLayerImageUtility.prototype.convertBase64StringToImage(imageBase64));
		}
		this.defaultToRevealLogo($.ig.JsonUtility.prototype.loadBool(json, "DefaultToRevealLogo"));
		this.isLandscape($.ig.JsonUtility.prototype.loadBool(json, "IsLandscape"));
		this.includeVisualizationExcel($.ig.JsonUtility.prototype.loadInt(json, "IncludeVisualizationExcel"));
		this.dataLanguage($.ig.JsonUtility.prototype.loadString(json, "DataLanguage"));
		this.userLanguage($.ig.JsonUtility.prototype.loadString(json, "UserLanguage"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Captures")) {
			this.captures(new $.ig.Array());
			var capturesList = $.ig.JsonUtility.prototype.loadObject(json, "Captures");
			for (var i = 0; i < capturesList.length; i++) {
				this.captures().add(new $.ig.RPExportDataObject(2, capturesList[i]));
			}
		}
		this.data(new $.ig.Array());
		var dataList = $.ig.JsonUtility.prototype.loadObject(json, "Data");
		for (var i1 = 0; i1 < dataList.length; i1++) {
			this.data().add(new $.ig.RPExportDataObject(2, dataList[i1]));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Format", this.format());
		$.ig.JsonUtility.prototype.saveObject(json, "Title", this.title());
		if (!$.ig.CPStringUtility.prototype.isNullOrEmpty(this.createdBy())) {
			$.ig.JsonUtility.prototype.saveObject(json, "CreatedBy", this.createdBy());
		}
		if (!$.ig.CPStringUtility.prototype.isNullOrEmpty(this.poweredBy())) {
			$.ig.JsonUtility.prototype.saveObject(json, "PoweredBy", this.poweredBy());
		}
		$.ig.JsonUtility.prototype.saveInt(json, "Color", this.color());
		if (this.logo() != null) {
			var imageBase64 = $.ig.NativeDataLayerImageUtility.prototype.getBase64ImageData(this.logo());
			$.ig.JsonUtility.prototype.saveObject(json, "Logo", imageBase64);
		}
		$.ig.JsonUtility.prototype.saveBool(json, "DefaultToRevealLogo", this.defaultToRevealLogo());
		$.ig.JsonUtility.prototype.saveBool(json, "IsLandscape", this.isLandscape());
		$.ig.JsonUtility.prototype.saveInt(json, "IncludeVisualizationExcel", this.includeVisualizationExcel());
		$.ig.JsonUtility.prototype.saveObject(json, "DataLanguage", this.dataLanguage());
		$.ig.JsonUtility.prototype.saveObject(json, "UserLanguage", this.userLanguage());
		if (this.data() != null) {
			var dataList = new $.ig.Array();
			for (var i = 0; i < this.data().length; i++) {
				dataList.add((this.data()[i]).toJson());
			}
			$.ig.JsonUtility.prototype.saveObject(json, "Data", dataList);
		}
		if (this.captures() != null) {
			var capturesList = new $.ig.Array();
			for (var i1 = 0; i1 < this.captures().length; i1++) {
				capturesList.add((this.captures()[i1]).toJson());
			}
			$.ig.JsonUtility.prototype.saveObject(json, "Captures", capturesList);
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.RPExportDashboardObject::ToJson()" />*/
	,
	$type: new $.ig.Type('RPExportDashboardObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RPExportDashboardObject" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.SettingsConstants" />*/

$.ig.util.defType('SettingsConstants', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('SettingsConstants', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.SettingsConstants" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.DataLayerResultFeatures" />*/

$.ig.util.defType('DataLayerResultFeatures', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('DataLayerResultFeatures', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.DataLayerResultFeatures" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.TableSchemaColumn" />*/

$.ig.util.defType('TableSchemaColumn', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Name()" />*/
	,
	_label: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Label()" />*/
	,
	_tuple: null,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Tuple()" />*/
	tuple: function (value) {
		if (arguments.length === 1) {
			this._tuple = value;
			return value;
		} else {
			return this._tuple;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Tuple()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Type()" />*/
	,
	_dateAggregation: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.TableSchemaColumn::DateAggregation()" />*/
	dateAggregation: function (value) {
		if (arguments.length === 1) {
			this._dateAggregation = value;
			return value;
		} else {
			return this._dateAggregation;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.TableSchemaColumn::DateAggregation()" />*/
	,
	_dateFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::DateFormat()" />*/
	dateFormat: function (value) {
		if (arguments.length === 1) {
			this._dateFormat = value;
			return value;
		} else {
			return this._dateFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.TableSchemaColumn::DateFormat()" />*/
	,
	_isTotalColumn: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableSchemaColumn::IsTotalColumn()" />*/
	isTotalColumn: function (value) {
		if (arguments.length === 1) {
			this._isTotalColumn = value;
			return value;
		} else {
			return this._isTotalColumn;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.TableSchemaColumn::IsTotalColumn()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.TableSchemaColumn::Properties()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, columnName, columnLabel, columnType) {
		$.ig.Object.prototype.init.call(this);
		this.name(columnName);
		this.label(columnLabel);
		this.type(columnType);
	},
	$type: new $.ig.Type('TableSchemaColumn', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.TableSchemaColumn" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.DashboardModelUtils" />*/

$.ig.util.defType('DashboardModelUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalDataSource()" />*/
	getLocalDataSource: function () {
		return $.ig.DashboardModelUtils.prototype._localDataSource;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCsvDataSource()" />*/
	getCsvDataSource: function () {
		return $.ig.DashboardModelUtils.prototype._csvDataSource;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCsvDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetExcelDataSource()" />*/
	getExcelDataSource: function () {
		return $.ig.DashboardModelUtils.prototype._excelDataSource;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetExcelDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGoogleSheetDataSource()" />*/
	getGoogleSheetDataSource: function () {
		return $.ig.DashboardModelUtils.prototype._googleSheetDataSource;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGoogleSheetDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetInMemoryDataSource()" />*/
	getInMemoryDataSource: function () {
		return $.ig.DashboardModelUtils.prototype._inMemoryDataSource;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetInMemoryDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSourceFromList(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Collections.ArrayList)" />*/
	getDataSourceFromList: function (dsItem, dataSources) {
		return $.ig.DashboardModelUtils.prototype.getDataSource(dataSources, dsItem.dataSourceId());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSourceFromList(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSource(System.Collections.ArrayList, System.String)" />*/
	getDataSource: function (dataSources, dsId) {
		if (dsId == null) {
			return null;
		}
		var ds = $.ig.DashboardModelUtils.prototype.getDataSourceFromList1(dataSources, dsId);
		if (ds != null) {
			return ds;
		}
		if (dsId == $.ig.DashboardModelUtils.prototype._excelDataSource.id()) {
			return $.ig.DashboardModelUtils.prototype._excelDataSource;
		} else if (dsId == $.ig.DashboardModelUtils.prototype._googleSheetDataSource.id()) {
			return $.ig.DashboardModelUtils.prototype._googleSheetDataSource;
		} else if (dsId == $.ig.DashboardModelUtils.prototype._csvDataSource.id()) {
			return $.ig.DashboardModelUtils.prototype._csvDataSource;
		} else if (dsId == $.ig.DashboardModelUtils.prototype._localDataSource.id()) {
			return $.ig.DashboardModelUtils.prototype._localDataSource;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSource(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetWidgetIndexById(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	getWidgetIndexById: function (dashboard, widgetId) {
		var widgets = dashboard.widgets();
		var widgetCount = widgets.length;
		for (var i = 0; i < widgetCount; i++) {
			var widget = widgets[i];
			if (widget.id() == widgetId) {
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetWidgetIndexById(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsBlendedField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	isBlendedField: function (field) {
		return !$.ig.CPStringUtility.prototype.isNullOrEmpty(field.tableAlias());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsBlendedField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultFilter(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createDefaultFilter: function (field) {
		return $.ig.DashboardModelUtils.prototype.createDefaultFilterForType(field.fieldType());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultFilter(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultFilterForType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	createDefaultFilterForType: function (fieldType) {
		var filter;
		switch (fieldType) {
			case $.ig.DashboardDataType.prototype.date:
			case $.ig.DashboardDataType.prototype.dateTime:
				filter = new $.ig.DateTimeFilter(0);
				break;
			case $.ig.DashboardDataType.prototype.time:
				filter = new $.ig.TimeFilter(0);
				break;
			case $.ig.DashboardDataType.prototype.number:
				filter = new $.ig.NumberFilter(0);
				break;
			case $.ig.DashboardDataType.prototype.string1:
			default:
				filter = new $.ig.StringFilter(0);
				break;
		}
		filter.filterType($.ig.DashboardFilterEnumType.prototype.allValues);
		return filter;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Filter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultFilterForType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaElement(System.Collections.ArrayList, System.String)" />*/
	getXmlaElement: function (elements, uniqueName) {
		if (elements == null || elements.length == 0) {
			return null;
		}
		var count = elements.length;
		for (var i = 0; i < count; i++) {
			var xe = elements[i];
			if (xe.uniqueName() != null && xe.uniqueName() == uniqueName) {
				return xe;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaElement(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultXmlaFilter(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	createDefaultXmlaFilter: function (element) {
		var xmlaFilter = new $.ig.XmlaFilter(0);
		xmlaFilter.dataType(element.dimensionType() == $.ig.DashboardXmlaDimensionEnumType.prototype.date ? $.ig.DashboardDataType.prototype.date : $.ig.DashboardDataType.prototype.string1);
		xmlaFilter.uniqueName(element.uniqueName());
		if ($.ig.util.cast($.ig.XmlaSet.prototype.$type, element) !== null) {
			xmlaFilter.elementType($.ig.DashboardXmlaElementType.prototype.set);
		} else if ($.ig.util.cast($.ig.XmlaHierarchyLevel.prototype.$type, element) !== null) {
			xmlaFilter.elementType($.ig.DashboardXmlaElementType.prototype.level);
		} else if ($.ig.util.cast($.ig.XmlaHierarchy.prototype.$type, element) !== null) {
			xmlaFilter.elementType($.ig.DashboardXmlaElementType.prototype.hierarchy);
		} else {
			xmlaFilter.elementType($.ig.DashboardXmlaElementType.prototype.dimension);
		}
		if (xmlaFilter.dataType() == $.ig.DashboardDataType.prototype.date) {
			xmlaFilter.filter(new $.ig.XmlaDateFilter(0));
		} else {
			xmlaFilter.filter(new $.ig.XmlaRegularFilter(0));
		}
		xmlaFilter.filter().filterType($.ig.DashboardFilterEnumType.prototype.allValues);
		return xmlaFilter;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaFilter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateDefaultXmlaFilter(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGlobalFilter(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	getGlobalFilter: function (dashboard, globalFilterId) {
		var globalFilters = dashboard.globalFilters();
		var globalFilterCount = globalFilters.length;
		for (var i = 0; i < globalFilterCount; i++) {
			var gf = globalFilters[i];
			if (gf.id() == globalFilterId) {
				return gf;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.GlobalFilter Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGlobalFilter(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGlobalFilterRequiredFields(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	getGlobalFilterRequiredFields: function (dashboard, globalFilterId) {
		var alreadyAdded = new $.ig.Dictionary(0);
		var requiredFields = new $.ig.Array();
		var globalFilter = $.ig.DashboardModelUtils.prototype.getGlobalFilter(dashboard, globalFilterId);
		if ($.ig.util.cast($.ig.TabularGlobalFilter.prototype.$type, globalFilter) !== null) {
			var tgf = globalFilter;
			if (tgf.selectedFieldName() != null) {
				requiredFields.add(tgf.selectedFieldName());
				alreadyAdded.item(tgf.selectedFieldName(), tgf.selectedFieldName());
			}
			if ($.ig.util.cast($.ig.ParameterBasedHierarchyGlobalFilter.prototype.$type, tgf) !== null) {
				var expansionParameters = (tgf).expansionParameters();
				if (expansionParameters != null) {
					var expansionParameterCount = expansionParameters.length;
					for (var p = 0; p < expansionParameterCount; p++) {
						var expansionParameter = expansionParameters[p];
						var fieldName = expansionParameter.fieldName();
						if (fieldName != null && !$.ig.NativeDictionaryUtility.prototype.containsKey(alreadyAdded, fieldName)) {
							requiredFields.add(fieldName);
							alreadyAdded.item(fieldName, fieldName);
						}
					}
				}
			}
		} else if ($.ig.util.cast($.ig.XmlaGlobalFilter.prototype.$type, globalFilter) !== null) {
			var fieldName1 = "MEMBER_CAPTION";
			requiredFields.add(fieldName1);
			alreadyAdded.item(fieldName1, fieldName1);
			fieldName1 = "MEMBER_UNIQUE_NAME";
			requiredFields.add(fieldName1);
			alreadyAdded.item(fieldName1, fieldName1);
		}
		var widgetCount = dashboard.widgets().length;
		for (var w = 0; w < widgetCount; w++) {
			var widget = dashboard.widgets()[w];
			var dataSpec = widget.dataSpec();
			if (dataSpec == null) {
				continue;
			}
			var bindings = dataSpec.bindings();
			if (bindings == null || bindings.bindings() == null) {
				continue;
			}
			var bindingsCount = bindings.bindings().length;
			for (var b = 0; b < bindingsCount; b++) {
				var binding = bindings.bindings()[b];
				if ($.ig.util.cast($.ig.DataBasedGlobalFilterBindingTarget.prototype.$type, binding.target()) !== null) {
					var target = binding.target();
					if (target.globalFilterId() == globalFilterId) {
						var fieldName2 = target.globalFilterFieldName();
						if (fieldName2 != null) {
							if (alreadyAdded.item(fieldName2) == null) {
								requiredFields.add(fieldName2);
								alreadyAdded.item(fieldName2, fieldName2);
							}
						}
					}
				}
			}
		}
		return requiredFields.length == 0 ? null : requiredFields;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetGlobalFilterRequiredFields(Infragistics.ReportPlus.DashboardModel.DashboardModel, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsWidgetBoundToGlobalVariable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DashboardModel.GlobalVariable)" />*/
	isWidgetBoundToGlobalVariable: function (widget, globalVariable) {
		var dataSpec = widget.dataSpec();
		if (dataSpec == null) {
			return false;
		}
		var globalVariableName = globalVariable.name();
		if (globalVariableName == null) {
			return false;
		}
		var bindings = dataSpec.bindings();
		if (bindings == null || bindings.bindings() == null) {
			return false;
		}
		var bindingCount = bindings.bindings().length;
		for (var b = 0; b < bindingCount; b++) {
			var binding = bindings.bindings()[b];
			if ($.ig.util.cast($.ig.GlobalVariableBindingTarget.prototype.$type, binding.target()) !== null) {
				var target = binding.target();
				if (target.globalVariableName() == globalVariableName) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsWidgetBoundToGlobalVariable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DashboardModel.GlobalVariable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsWidgetBoundToGlobalFilter(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isWidgetBoundToGlobalFilter: function (widget, globalFilter) {
		var dataSpec = widget.dataSpec();
		if (dataSpec == null) {
			return false;
		}
		var globalFilterId = globalFilter.id();
		if (globalFilterId == null) {
			return false;
		}
		var bindings = dataSpec.bindings();
		if (bindings == null || bindings.bindings() == null) {
			return false;
		}
		var bindingCount = bindings.bindings().length;
		for (var b = 0; b < bindingCount; b++) {
			var binding = bindings.bindings()[b];
			if ($.ig.util.cast($.ig.DataBasedGlobalFilterBindingTarget.prototype.$type, binding.target()) !== null) {
				var target = binding.target();
				if (target.globalFilterId() == globalFilterId) {
					return true;
				}
			} else if ($.ig.util.cast($.ig.DateGlobalFilterBindingTarget.prototype.$type, binding.target()) !== null) {
				if ($.ig.util.cast($.ig.DateGlobalFilter.prototype.$type, globalFilter) !== null) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsWidgetBoundToGlobalFilter(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsHierarchicalGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isHierarchicalGlobalFilter: function (globalFilter) {
		if ($.ig.util.cast($.ig.HierarchicalGlobalFilter.prototype.$type, globalFilter) !== null) {
			return true;
		} else if ($.ig.util.cast($.ig.XmlaGlobalFilter.prototype.$type, globalFilter) !== null) {
			return (globalFilter).levelUniqueName() == null;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsHierarchicalGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsSearchSupportedInGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isSearchSupportedInGlobalFilter: function (globalFilter) {
		if ($.ig.util.cast($.ig.HierarchicalGlobalFilter.prototype.$type, globalFilter) !== null) {
			return false;
		} else if ($.ig.util.cast($.ig.DataSourceBasedGlobalFilter.prototype.$type, globalFilter) !== null) {
			return true;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsSearchSupportedInGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsMultipleSelectionSupportedInGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isMultipleSelectionSupportedInGlobalFilter: function (globalFilter) {
		if ($.ig.util.cast($.ig.ParameterBasedHierarchyGlobalFilter.prototype.$type, globalFilter) !== null) {
			return false;
		} else if ($.ig.util.cast($.ig.DateGlobalFilter.prototype.$type, globalFilter) !== null) {
			return false;
		} else {
			return true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsMultipleSelectionSupportedInGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsHierarchicalXmlaElement(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	isHierarchicalXmlaElement: function (element) {
		return ($.ig.util.cast($.ig.XmlaDimension.prototype.$type, element) !== null) || (($.ig.util.cast($.ig.XmlaHierarchy.prototype.$type, element) !== null) && $.ig.DashboardModelUtils.prototype.isUserDefinedHierarchy(element));
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsHierarchicalXmlaElement(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsUserDefinedHierarchy(Infragistics.ReportPlus.DashboardModel.XmlaHierarchy)" />*/
	isUserDefinedHierarchy: function (h) {
		return (h.origin() & 1) != 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsUserDefinedHierarchy(Infragistics.ReportPlus.DashboardModel.XmlaHierarchy)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDsItemResourceBased(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	isDsItemResourceBased: function (dsItem) {
		return (dsItem != null && (dsItem.resourceItem() != null || dsItem.hasAsset()));
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDsItemResourceBased(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalExcelDataSourceItem(System.String)" />*/
	getLocalExcelDataSourceItem: function (uri) {
		var localDs = $.ig.DashboardModelUtils.prototype.getLocalDataSource();
		var excelDs = $.ig.DashboardModelUtils.prototype.getExcelDataSource();
		var resourceItem = new $.ig.DataSourceItem(0);
		resourceItem.dataSourceId(localDs.id());
		resourceItem.properties().setObjectValue("URI", uri);
		var dsItem = new $.ig.DataSourceItem(0);
		dsItem.dataSourceId(excelDs.id());
		dsItem.resourceItem(resourceItem);
		dsItem.hasTabularData(true);
		return dsItem;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalExcelDataSourceItem(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalCsvDataSourceItem(System.String)" />*/
	getLocalCsvDataSourceItem: function (uri) {
		var localDs = $.ig.DashboardModelUtils.prototype.getLocalDataSource();
		var csvDs = $.ig.DashboardModelUtils.prototype.getCsvDataSource();
		var resourceItem = new $.ig.DataSourceItem(0);
		resourceItem.dataSourceId(localDs.id());
		resourceItem.properties().setObjectValue("URI", uri);
		var dsItem = new $.ig.DataSourceItem(0);
		dsItem.dataSourceId(csvDs.id());
		dsItem.resourceItem(resourceItem);
		return dsItem;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSourceItem Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLocalCsvDataSourceItem(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetPreviousCompatibleGlobalFilters(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	getPreviousCompatibleGlobalFilters: function (globalFilters, globalFilter) {
		var globalFiltersAffectingDynamicFiltering = new $.ig.Array();
		var globalFilterCount = globalFilters.length;
		for (var g = 0; g < globalFilterCount; g++) {
			var gf = globalFilters[g];
			if (gf.id() == globalFilter.id()) {
				break;
			}
			if ($.ig.DashboardModelUtils.prototype.globalFiltersHaveSameDataSourceItem(globalFilter, gf)) {
				globalFiltersAffectingDynamicFiltering.add(gf);
			}
		}
		return globalFiltersAffectingDynamicFiltering;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetPreviousCompatibleGlobalFilters(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDynamicGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isDynamicGlobalFilter: function (globalFilter) {
		return ($.ig.util.cast($.ig.DataSourceBasedGlobalFilter.prototype.$type, globalFilter) !== null) && (globalFilter).isDynamic();
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDynamicGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsAffectedGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	isAffectedGlobalFilter: function (modifiedFilter, targetFilter) {
		return $.ig.DashboardModelUtils.prototype.globalFiltersHaveSameDataSourceItem(modifiedFilter, targetFilter);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsAffectedGlobalFilter(Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(Infragistics.ReportPlus.DashboardModel.DashboardModel)" />*/
	getAllDataSourceItems: function (dashboard) {
		return $.ig.DashboardModelUtils.prototype.getAllDataSourceItems1(dashboard.widgets(), dashboard.globalFilters());
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(Infragistics.ReportPlus.DashboardModel.DashboardModel)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	getAllDataSourceItems1: function (widgets, globalFilters) {
		return $.ig.DashboardModelUtils.prototype.getAllDataSourceItems2(widgets, globalFilters, true);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(System.Collections.ArrayList, System.Collections.ArrayList, System.Boolean)" />*/
	getAllDataSourceItems2: function (widgets, globalFilters, excludeResources) {
		var dsItems = new $.ig.Array();
		var addedKeys = new $.ig.Array();
		var gfCount = globalFilters.length;
		for (var g = 0; g < gfCount; g++) {
			var dsItem = null;
			var gf = globalFilters[g];
			if ($.ig.util.cast($.ig.TabularGlobalFilter.prototype.$type, gf) !== null) {
				var tgf = gf;
				dsItem = tgf.dataSpec() == null ? null : tgf.dataSpec().dataSourceItem();
			} else if ($.ig.util.cast($.ig.XmlaGlobalFilter.prototype.$type, gf) !== null) {
				dsItem = (gf).dataSourceItem();
			}
			if (dsItem != null) {
				$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem(dsItems, dsItem, addedKeys);
			}
		}
		var widgetCount = widgets.length;
		for (var w = 0; w < widgetCount; w++) {
			var widget = widgets[w];
			if (widget.dataSpec() != null && ((excludeResources && !($.ig.util.cast($.ig.ResourceDataSpec.prototype.$type, widget.dataSpec()) !== null)) || !excludeResources) && widget.dataSpec().dataSourceItem() != null) {
				$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItems(dsItems, widget.dataSpec(), addedKeys, true);
			}
		}
		return dsItems;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItems(System.Collections.ArrayList, System.Collections.ArrayList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItemsMissingPublicLink(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	getAllDataSourceItemsMissingPublicLink: function (widgets, globalFilters, dataSources) {
		var allItems = $.ig.DashboardModelUtils.prototype.getAllDataSourceItems2(widgets, globalFilters, false);
		var itemCount = allItems.length;
		var missingLinkItems = new $.ig.Array();
		var addedKeys = new $.ig.Array();
		for (var i = 0; i < itemCount; i++) {
			var dsItem = allItems[i];
			var hasParentDataItem = false;
			if (dsItem.resourceItem() != null) {
				dsItem = dsItem.resourceItem();
				hasParentDataItem = true;
			}
			var ds = $.ig.DashboardModelUtils.prototype.getDataSourceFromList(dsItem, dataSources);
			if (ds == null || !$.ig.DataLayerUtility.prototype.hasPublicLinkSupport(ds.provider(), false) || !$.ig.DashboardModelUtils.prototype.supportsCloudSharing(ds.provider(), dsItem)) {
				continue;
			}
			if (!dsItem.properties().containsKey($.ig.EngineConstants.prototype.publicLinkId)) {
				$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem(missingLinkItems, dsItem, addedKeys);
				if (hasParentDataItem) {
					$.ig.DashboardModelUtils.prototype.setParentItem(dsItem, allItems[i], dataSources);
				}
			}
		}
		return missingLinkItems;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItemsMissingPublicLink(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SupportsCloudSharing(System.String, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	supportsCloudSharing: function (provider, dsItem) {
		if (provider == $.ig.ProviderKeys.prototype.googleDriveProviderKey) {
			var fileId = dsItem.properties().getObjectValue("Identifier");
			if (fileId != null && $.ig.GoogleFile.prototype.isInSharedDrive(fileId)) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SupportsCloudSharing(System.String, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItemsWithPublicLinkSupport(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	getAllDataSourceItemsWithPublicLinkSupport: function (widgets, globalFilters, dataSources) {
		var allItems = $.ig.DashboardModelUtils.prototype.getAllDataSourceItems2(widgets, globalFilters, false);
		var itemCount = allItems.length;
		var publicLinkItems = new $.ig.Array();
		var addedKeys = new $.ig.Array();
		for (var i = 0; i < itemCount; i++) {
			var dsItem = allItems[i];
			var hasParentDataItem = false;
			if (dsItem.resourceItem() != null) {
				dsItem = dsItem.resourceItem();
				hasParentDataItem = true;
			}
			var ds = $.ig.DashboardModelUtils.prototype.getDataSourceFromList(dsItem, dataSources);
			if (ds != null && $.ig.DataLayerUtility.prototype.hasPublicLinkSupport(ds.provider(), false) && $.ig.DashboardModelUtils.prototype.supportsCloudSharing(ds.provider(), dsItem)) {
				$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem(publicLinkItems, dsItem, addedKeys);
				if (hasParentDataItem) {
					$.ig.DashboardModelUtils.prototype.setParentItem(dsItem, allItems[i], dataSources);
				}
			}
		}
		return publicLinkItems;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAllDataSourceItemsWithPublicLinkSupport(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SetParentItem(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Collections.ArrayList)" />*/
	setParentItem: function (dsItem, parentItem, dataSources) {
		var parentDS = $.ig.DashboardModelUtils.prototype.getDataSourceFromList(parentItem, dataSources);
		dsItem.properties().setTransientValue("parent", parentItem);
		if (parentDS != null) {
			dsItem.properties().setTransientValue("parentProvider", parentDS.provider());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SetParentItem(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItem(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.CPList)" />*/
	addUniqueDataSourceItem: function (dsItems, dsItem, added) {
		$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem1(dsItems, dsItem, added, true);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItem(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItem(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.CPList, System.Boolean)" />*/
	addUniqueDataSourceItem1: function (dsItems, dsItem, added, removeDuplicates) {
		if (removeDuplicates) {
			var key = $.ig.DashboardModelUtils.prototype.getUniqueDataSourceItemIdentifier(dsItem);
			if (added.contains(key)) {
				return;
			}
			added.add(key);
		}
		dsItems.add(dsItem);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItem(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, Infragistics.CPList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItems(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.CPList, System.Boolean)" />*/
	addUniqueDataSourceItems: function (dsItems, dataSpec, addedKeys, removeDuplicates) {
		$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem1(dsItems, dataSpec.dataSourceItem(), addedKeys, removeDuplicates);
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var tds = dataSpec;
			var additionalTables = tds.additionalTables();
			var tableCount = additionalTables == null ? 0 : additionalTables.length;
			for (var t = 0; t < tableCount; t++) {
				var table = additionalTables[t];
				if (table.dataSpec() != null && table.dataSpec().dataSourceItem() != null) {
					$.ig.DashboardModelUtils.prototype.addUniqueDataSourceItem1(dsItems, table.dataSpec().dataSourceItem(), addedKeys, removeDuplicates);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddUniqueDataSourceItems(Infragistics.CPList, Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.CPList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateFiscalYears(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateFiscalYears: function (widget) {
		var ds = widget.dataSpec();
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, ds) !== null) {
			var tabularSpec = ds;
			$.ig.DashboardModelUtils.prototype.migrateFiscalYearFields(tabularSpec.fields());
			$.ig.DashboardModelUtils.prototype.migrateFiscalYearFields(tabularSpec.transposedFields());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateFiscalYears(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateFiscalYearFields(System.Collections.ArrayList)" />*/
	migrateFiscalYearFields: function (fields) {
		if (fields == null) {
			return;
		}
		var fieldCount = fields.length;
		for (var f = 0; f < fieldCount; f++) {
			var field = fields[f];
			if ($.ig.util.cast($.ig.DateTimeFilter.prototype.$type, field.filter()) !== null && field.settings() == null) {
				var dtFilter = field.filter();
				var dtSettings = new $.ig.DateTimeFieldSettings(0);
				field.settings(dtSettings);
				var startMonth = dtFilter.dateFiscalYearStartMonth();
				if (startMonth > 1 && startMonth < 13) {
					dtSettings.dateFiscalYearStartMonth(startMonth);
					dtFilter.dateFiscalYearStartMonth(0);
				}
				dtSettings.displayInLocalTimeZone(dtFilter.displayInLocalTimeZone());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateFiscalYearFields(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsValidVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	isValidVisualizationDataSpec: function (dataSpec, vizSettings) {
		if (dataSpec == null) {
			return false;
		}
		if ($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, vizSettings) !== null) {
			var chartType = (vizSettings).chartType();
			if (chartType == $.ig.DashboardChartType.prototype.composite && !($.ig.util.cast($.ig.CompositeChartVisualizationDataSpec.prototype.$type, dataSpec) !== null)) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsValidVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateProvider(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateProvider: function (widget) {
		var dataSourceItem = widget.dataSpec().dataSourceItem();
		var renderMode = dataSourceItem.parameters().getObjectValue("RPRenderMode");
		var isReport = renderMode != null && renderMode.equals("Report");
		if (dataSourceItem.properties().containsKey("Path")) {
			dataSourceItem.parameters().setObjectValue("Path", dataSourceItem.properties().getObjectValue("Path"));
			dataSourceItem.properties().removeKey("Path");
		}
		if (isReport) {
			dataSourceItem.properties().setBoolValue("IsAsset", true);
			dataSourceItem.properties().setBoolValue("IsImage", false);
			dataSourceItem.properties().setObjectValue("FileType", "PDF");
			dataSourceItem.hasAsset(true);
			dataSourceItem.hasTabularData(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateProvider(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVisualization(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateVisualization: function (widget) {
		$.ig.DashboardModelUtils.prototype.migrateFiscalYears(widget);
		$.ig.DashboardModelUtils.prototype.migrateCompositeChart(widget);
		$.ig.DashboardModelUtils.prototype.migrateReportingServices(widget);
		$.ig.DashboardModelUtils.prototype.migrateDateHierarchyIfNeeded(widget);
		var vizSettings = widget.visualizationSettings();
		if ($.ig.DashboardModelUtils.prototype.isValidVisualizationDataSpec(widget.visualizationDataSpec(), vizSettings)) {
			$.ig.DashboardModelUtils.prototype.setTabularFields(widget.visualizationDataSpec(), vizSettings, widget.dataSpec());
			$.ig.DashboardModelUtils.prototype.migrateVisualizationDrillDownElements(widget.visualizationDataSpec());
			$.ig.DashboardModelUtils.prototype.fixScatterMapVisualizationDataSpec(widget.visualizationDataSpec());
			return;
		}
		var vizType = vizSettings == null ? "GRID" : vizSettings.visualizationType();
		var dataSpec = widget.dataSpec();
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var tabularSpec = dataSpec;
			var fields = $.ig.DashboardModelUtils.prototype.getActiveFields(tabularSpec);
			var fieldCount = fields.length;
			var summarization = tabularSpec.summarizationSpec();
			if ($.ig.DashboardModelUtils.prototype.isSummarized(summarization)) {
				var vizSpec = $.ig.DashboardModelUtils.prototype.getSummarizedVisualizationDataSpec(tabularSpec, vizType, vizSettings);
				widget.visualizationDataSpec(vizSpec);
				if (vizType == "GRID") {
					var pivotVizSettings = new $.ig.PivotVisualizationSettings(0);
					pivotVizSettings.visualizationType("PIVOT");
					if ($.ig.util.cast($.ig.GridVisualizationSettings.prototype.$type, vizSettings) !== null) {
						var gridSettings = widget.visualizationSettings();
						pivotVizSettings.fontSize(gridSettings.fontSize());
						pivotVizSettings.style(gridSettings.style());
						pivotVizSettings.visualizationColumns(gridSettings.visualizationColumns());
					}
					pivotVizSettings.hideGrandTotals(($.ig.util.cast($.ig.PivotVisualizationDataSpec.prototype.$type, vizSpec) !== null) ? !(vizSpec).showGrandTotals() : true);
					widget.visualizationSettings(pivotVizSettings);
				}
			} else if (vizType == "GRID" || vizType == "JS_EXTENSION" || vizType == "SINGLE_ROW") {
				var vizSpec1 = new $.ig.GridVisualizationDataSpec(0);
				for (var i = 0; i < fieldCount; i++) {
					var field = fields[i];
					if (!field.isHidden()) {
						vizSpec1.columns().add(new $.ig.TabularColumnSpec(3, $.ig.VisualizationDataSpec.prototype.columnsSection, field));
					}
				}
				widget.visualizationDataSpec(vizSpec1);
			} else {
				widget.visualizationDataSpec($.ig.DashboardModelUtils.prototype.getVisualizationDataSpec(fields, vizType, vizSettings));
			}
		} else if ($.ig.util.cast($.ig.XmlaDataSpec.prototype.$type, dataSpec) !== null) {
			widget.visualizationDataSpec($.ig.DashboardModelUtils.prototype.getXmlaVisualizationDataSpec(dataSpec, vizType, vizSettings));
			if (vizType == "GRID") {
				var pivotVizSettings1 = new $.ig.PivotVisualizationSettings(0);
				pivotVizSettings1.visualizationType("PIVOT");
				if ($.ig.util.cast($.ig.GridVisualizationSettings.prototype.$type, vizSettings) !== null) {
					var gridSettings1 = widget.visualizationSettings();
					pivotVizSettings1.fontSize(gridSettings1.fontSize());
					pivotVizSettings1.style(gridSettings1.style());
					pivotVizSettings1.visualizationColumns(gridSettings1.visualizationColumns());
				}
				pivotVizSettings1.hideGrandTotals(!(widget.visualizationDataSpec()).showGrandTotals());
				widget.visualizationSettings(pivotVizSettings1);
			}
		}
		var newVizSettings = $.ig.DashboardModelUtils.prototype.migrateVizSettings(vizType, dataSpec, widget.visualizationSettings());
		if (newVizSettings != null) {
			widget.visualizationSettings(newVizSettings);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVisualization(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateCompositeChart(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateCompositeChart: function (widget) {
		if ($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, widget.visualizationSettings()) !== null && !$.ig.DashboardModelUtils.prototype.isValidVisualizationDataSpec(widget.visualizationDataSpec(), widget.visualizationSettings())) {
			var chartSettings = widget.visualizationSettings();
			if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.composite) {
				var type1 = chartSettings.compositeChartType1();
				var type2 = chartSettings.compositeChartType2();
				if (type1 == $.ig.DashboardChartType.prototype.column && type2 == $.ig.DashboardChartType.prototype.column) {
					chartSettings.compositeChartType2($.ig.DashboardChartType.prototype.line);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateCompositeChart(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateReportingServices(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateReportingServices: function (widget) {
		var dataSpec = widget.dataSpec();
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var dsItem = dataSpec.dataSourceItem();
			if (dsItem == null) {
				return;
			}
			var renderMode = dsItem.parameters().getObjectValue("RPRenderMode");
			if (renderMode != null && renderMode.equals("Report")) {
				var resourceSpec = new $.ig.ResourceDataSpec(2, dataSpec.toJson());
				widget.dataSpec(resourceSpec);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateReportingServices(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVisualizationDrillDownElements(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec)" />*/
	migrateVisualizationDrillDownElements: function (spec) {
		var allColumns = spec.getAllColumns();
		var columnCount = allColumns.length;
		for (var c = 0; c < columnCount; c++) {
			var column = allColumns[c];
			if ($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, column) !== null) {
				var dc = column;
				if (dc.xmlaElement() != null) {
					$.ig.DashboardModelUtils.prototype.migrateDrillDownElements(dc.xmlaElement());
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVisualizationDrillDownElements(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAdhocFieldCount(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	getAdhocFieldCount: function (spec) {
		var adhocFields = $.ig.NativeDataLayerUtility.prototype.unwrapInt1(spec.adHocFields(), 0);
		if (adhocFields > 1) {
			return Math.min(spec.rows().length, adhocFields);
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetAdhocFieldCount(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDateHierarchyIfNeeded(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	migrateDateHierarchyIfNeeded: function (widget) {
		var vs = widget.visualizationDataSpec();
		if (vs != null) {
			if (!($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, vs) !== null)) {
				return;
			}
			var hvs = vs;
			if (hvs.formatVersion() > 0) {
				return;
			}
			var rows = hvs.rows();
			var adhocFields = $.ig.NativeDataLayerUtility.prototype.unwrapInt1(hvs.adHocFields(), 0);
			var adhocExpandedElements = hvs.adHocExpandedElements();
			if (rows == null || rows.length == 0) {
				return;
			}
			var firstRow = rows[0];
			if (!($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, firstRow.summarizationField()) !== null)) {
				return;
			}
			if (!($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, widget.dataSpec()) !== null)) {
				return;
			}
			var sdf = firstRow.summarizationField();
			var tds = widget.dataSpec();
			var dateField = $.ig.DashboardModelUtils.prototype.getField($.ig.DashboardModelUtils.prototype.getActiveFields(tds), sdf.fieldName());
			if (dateField == null) {
				return;
			}
			if (adhocFields > 1 || $.ig.DashboardModelUtils.prototype.isLastDateAggregation(dateField.fieldType(), sdf.dateAggregationType()) || sdf.dateAggregationType() == $.ig.DashboardDateAggregationType.prototype.quarter || sdf.dateAggregationType() == $.ig.DashboardDateAggregationType.prototype.semester) {
				return;
			}
			$.ig.DashboardModelUtils.prototype.migrateDateHierarchy(hvs, dateField);
			hvs.formatVersion(1);
		} else {
			var dataSpec = widget.dataSpec();
			if (!($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null)) {
				return;
			}
			var tds1 = dataSpec;
			var summarization = tds1.summarizationSpec();
			var rows1 = summarization == null ? null : summarization.rows();
			if (rows1 == null || rows1.length == 0) {
				return;
			}
			var firstRow1 = rows1[0];
			if (!($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, firstRow1) !== null)) {
				return;
			}
			var sdf1 = firstRow1;
			var adhocFields1 = $.ig.DashboardModelUtils.prototype.getAdhocFieldCount(summarization);
			if (adhocFields1 >= 2 || !$.ig.DashboardModelUtils.prototype.hasAdhocOperation(summarization)) {
				return;
			}
			$.ig.DashboardModelUtils.prototype.migrateSummarizationSpecDateHierarchy(tds1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDateHierarchyIfNeeded(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::HasAdhocOperation(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	hasAdhocOperation: function (spec) {
		if (spec.rows().length == 0) {
			return false;
		}
		var firstRow = spec.rows()[0];
		if (firstRow.drillDownElements() != null && firstRow.drillDownElements().length > 0) {
			return true;
		}
		if (firstRow.expandedItems() != null && firstRow.expandedItems().length > 0) {
			return true;
		}
		if (spec.adHocExpandedElements() != null && spec.adHocExpandedElements().length > 0) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::HasAdhocOperation(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateSummarizationSpecDateHierarchy(Infragistics.ReportPlus.DashboardModel.TabularDataSpec)" />*/
	migrateSummarizationSpecDateHierarchy: function (dataSpec) {
		var sumSpec = dataSpec.summarizationSpec();
		var dateSf = sumSpec.rows()[0];
		var dateField = $.ig.DashboardModelUtils.prototype.getField($.ig.DashboardModelUtils.prototype.getActiveFields(dataSpec), dateSf.fieldName());
		if (dateField == null) {
			return;
		}
		var newRowsList = new $.ig.Array();
		newRowsList.add(dateSf);
		var agg = dateSf.dateAggregationType();
		var fieldType = dateField.fieldType();
		if (fieldType != $.ig.DashboardDataType.prototype.time) {
			while (agg != $.ig.DashboardDateAggregationType.prototype.day) {
				agg = $.ig.DashboardModelUtils.prototype.getNextMigrationDateAggregation(fieldType, agg);
				newRowsList.add($.ig.DashboardModelUtils.prototype.getDateSummarizationRowCopy(dateSf, agg));
			}
		}
		if (fieldType != $.ig.DashboardDataType.prototype.date) {
			while (agg != $.ig.DashboardDateAggregationType.prototype.minute) {
				agg = $.ig.DashboardModelUtils.prototype.getNextMigrationDateAggregation(fieldType, agg);
				newRowsList.add($.ig.DashboardModelUtils.prototype.getDateSummarizationRowCopy(dateSf, agg));
			}
		}
		sumSpec.adHocFields($.ig.NativeDataLayerUtility.prototype.wrapInt(newRowsList.length));
		var originalRowCount = sumSpec.rows().length;
		for (var i = 1; i < originalRowCount; i++) {
			newRowsList.add(sumSpec.rows()[i]);
		}
		sumSpec.rows(newRowsList);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateSummarizationSpecDateHierarchy(Infragistics.ReportPlus.DashboardModel.TabularDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDateHierarchy(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	migrateDateHierarchy: function (hvs, dateField) {
		var dateDimensionColumn = hvs.rows()[0];
		var newRowsList = new $.ig.Array();
		newRowsList.add(dateDimensionColumn);
		var agg = dateDimensionColumn.dateAggregation();
		var fieldType = dateField.fieldType();
		if (fieldType != $.ig.DashboardDataType.prototype.time && (agg == $.ig.DashboardDateAggregationType.prototype.year || agg == $.ig.DashboardDateAggregationType.prototype.month)) {
			while (agg != $.ig.DashboardDateAggregationType.prototype.day) {
				agg = $.ig.DashboardModelUtils.prototype.getNextMigrationDateAggregation(fieldType, agg);
				newRowsList.add($.ig.DashboardModelUtils.prototype.getDateDimensionColumnCopy(dateDimensionColumn, agg));
			}
		}
		if (fieldType != $.ig.DashboardDataType.prototype.date) {
			while (agg != $.ig.DashboardDateAggregationType.prototype.minute) {
				agg = $.ig.DashboardModelUtils.prototype.getNextMigrationDateAggregation(fieldType, agg);
				newRowsList.add($.ig.DashboardModelUtils.prototype.getDateDimensionColumnCopy(dateDimensionColumn, agg));
			}
		}
		hvs.adHocFields($.ig.NativeDataLayerUtility.prototype.wrapInt(newRowsList.length));
		var originalRowCount = hvs.rows().length;
		for (var i = 1; i < originalRowCount; i++) {
			newRowsList.add(hvs.rows()[i]);
		}
		hvs.rows(newRowsList);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDateHierarchy(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDateSummarizationRowCopy(Infragistics.ReportPlus.DashboardModel.SummarizationDateField, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getDateSummarizationRowCopy: function (dateSf, agg) {
		var aggRow = new $.ig.SummarizationDateField(1, dateSf);
		aggRow.dateAggregationType(agg);
		aggRow.dateFormatting(null);
		return aggRow;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDateField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDateSummarizationRowCopy(Infragistics.ReportPlus.DashboardModel.SummarizationDateField, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDateDimensionColumnCopy(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getDateDimensionColumnCopy: function (dateDimensionColumn, agg) {
		var dateSf = dateDimensionColumn.summarizationField();
		var newDim = new $.ig.DimensionColumnSpec(1, dateDimensionColumn);
		newDim.summarizationField($.ig.DashboardModelUtils.prototype.getDateSummarizationRowCopy(dateSf, agg));
		newDim.summarizationField().drillDownElements(null);
		return newDim;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDateDimensionColumnCopy(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextMigrationDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getNextMigrationDateAggregation: function (type, agg) {
		switch (agg) {
			case $.ig.DashboardDateAggregationType.prototype.year: return $.ig.DashboardDateAggregationType.prototype.month;
			case $.ig.DashboardDateAggregationType.prototype.month: return $.ig.DashboardDateAggregationType.prototype.day;
			case $.ig.DashboardDateAggregationType.prototype.day: return type == $.ig.DashboardDataType.prototype.date ? agg : $.ig.DashboardDateAggregationType.prototype.hour;
			case $.ig.DashboardDateAggregationType.prototype.hour: return $.ig.DashboardDateAggregationType.prototype.minute;
			default: return agg;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextMigrationDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::FixScatterMapVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec)" />*/
	fixScatterMapVisualizationDataSpec: function (spec) {
		if (!($.ig.util.cast($.ig.ScatterMapVisualizationDataSpec.prototype.$type, spec) !== null)) {
			return;
		}
		var scatterSpec = spec;
		if (scatterSpec.mapColor() != null && scatterSpec.mapColor().length > 0) {
			var mc = scatterSpec.mapColor()[0];
			if (mc.tabularField() == null) {
				scatterSpec.mapColor(new $.ig.Array());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::FixScatterMapVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SetTabularFields(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings, Infragistics.ReportPlus.DashboardModel.DataSpec)" />*/
	setTabularFields: function (vizSpec, vizSettings, dataSpec) {
		if (!($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null)) {
			return;
		}
		var tabularSpec = dataSpec;
		var fields = $.ig.DashboardModelUtils.prototype.getActiveFields(tabularSpec);
		var columns = vizSpec.getAllColumns();
		var columnCount = columns.length;
		for (var c = 0; c < columnCount; c++) {
			var col = columns[c];
			if ($.ig.util.cast($.ig.TabularColumnSpec.prototype.$type, col) !== null) {
				var tCol = col;
				var fieldName = tCol.fieldName();
				tCol.tabularField($.ig.DashboardModelUtils.prototype.getField(fields, fieldName));
			} else if ($.ig.util.cast($.ig.MeasureColumnSpec.prototype.$type, col) !== null) {
				var mCol = col;
				if (mCol.summarizationField() != null && mCol.summarizationField().fieldName() != null) {
					mCol.tabularField($.ig.DashboardModelUtils.prototype.getField(fields, mCol.summarizationField().fieldName()));
				}
			} else if ($.ig.util.cast($.ig.DimensionColumnSpec.prototype.$type, col) !== null) {
				var dCol = col;
				if (dCol.summarizationField() != null && dCol.summarizationField().fieldName() != null) {
					dCol.tabularField($.ig.DashboardModelUtils.prototype.getField(fields, dCol.summarizationField().fieldName()));
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SetTabularFields(Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings, Infragistics.ReportPlus.DashboardModel.DataSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsSummarized(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	isSummarized: function (summarization) {
		if (summarization == null) {
			return false;
		}
		return !$.ig.DashboardModelUtils.prototype.isEmptySummarizationFieldsArray(summarization.rows()) || !$.ig.DashboardModelUtils.prototype.isEmptySummarizationFieldsArray(summarization.columns()) || !$.ig.DashboardModelUtils.prototype.isEmptySummarizationValuesArray(summarization.values());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsSummarized(Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsEmptySummarizationFieldsArray(System.Collections.ArrayList)" />*/
	isEmptySummarizationFieldsArray: function (list) {
		return list == null || list.length == 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsEmptySummarizationFieldsArray(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsEmptySummarizationValuesArray(System.Collections.ArrayList)" />*/
	isEmptySummarizationValuesArray: function (list) {
		return list == null || list.length == 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsEmptySummarizationValuesArray(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDefaultFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getDefaultFormattingSpec: function (type) {
		return $.ig.FormattingDefaultSettings.prototype.appInstance().getDefaultFormattingSpec(type);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDefaultFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDefaultDateFormatForType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getDefaultDateFormatForType: function (type) {
		return $.ig.FormattingDefaultSettings.prototype.appInstance().getDefaultDateFormat(type);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDefaultDateFormatForType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::RemoveEmptyFilters(Infragistics.ReportPlus.DashboardModel.DataSpec)" />*/
	removeEmptyFilters: function (dataSpec) {
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var tabularSpec = dataSpec;
			var fields = tabularSpec.fields();
			var quickFilters = tabularSpec.quickFilters();
			var fieldCount = fields.length;
			var qfCount = quickFilters == null ? 0 : quickFilters.length;
			for (var f = 0; f < fieldCount; f++) {
				var field = fields[f];
				if (field.filter() != null && !$.ig.FilterUtility.prototype.fieldIsFiltered(field)) {
					field.filter(null);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::RemoveEmptyFilters(Infragistics.ReportPlus.DashboardModel.DataSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldFilters(Infragistics.ReportPlus.DashboardModel.DataSpec, System.Boolean)" />*/
	getFieldFilters: function (dataSpec, nullFilters) {
		var result = new $.ig.Array();
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var tabularSpec = dataSpec;
			var fields = tabularSpec.isTransposed() ? tabularSpec.transposedFields() : tabularSpec.fields();
			var quickFilters = tabularSpec.quickFilters();
			var fieldCount = fields.length;
			var qfCount = quickFilters == null ? 0 : quickFilters.length;
			for (var f = 0; f < fieldCount; f++) {
				var field = fields[f];
				if ((nullFilters && field.filter() != null) || $.ig.FilterUtility.prototype.fieldIsFiltered(field)) {
					var isQuickFilter = false;
					for (var qf = 0; qf < qfCount; qf++) {
						var quickFilter = quickFilters[qf];
						if (quickFilter.fieldName() != null && quickFilter.fieldName() == field.fieldName()) {
							isQuickFilter = true;
							break;
						}
					}
					if (!isQuickFilter) {
						result.add(new $.ig.TabularColumnSpec(3, $.ig.VisualizationDataSpec.prototype.filtersSection, field));
					}
				}
			}
		} else if ($.ig.util.cast($.ig.XmlaDataSpec.prototype.$type, dataSpec) !== null) {
			var xmlaSpec = dataSpec;
			$.ig.DashboardModelUtils.prototype.addXmlaElements(result, xmlaSpec.dataFilters(), xmlaSpec.filters());
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldFilters(Infragistics.ReportPlus.DashboardModel.DataSpec, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDateBasedTreeMap(Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec)" />*/
	isDateBasedTreeMap: function (treeMap) {
		var labels = treeMap.labels();
		if (labels.length == 0) {
			return false;
		}
		var col = labels[0];
		var sf = col.summarizationField();
		return sf != null && ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, sf) !== null);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDateBasedTreeMap(Infragistics.ReportPlus.DashboardModel.TreeMapVisualizationDataSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, System.Int32)" />*/
	getNextDateAggregation1: function (type, agg, count) {
		var result = agg;
		for (var i = 0; i < count; i++) {
			result = $.ig.DashboardModelUtils.prototype.getNextDateAggregation(type, result);
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getNextDateAggregation: function (type, agg) {
		switch (agg) {
			case $.ig.DashboardDateAggregationType.prototype.year: return $.ig.DashboardDateAggregationType.prototype.quarter;
			case $.ig.DashboardDateAggregationType.prototype.semester: return $.ig.DashboardDateAggregationType.prototype.quarter;
			case $.ig.DashboardDateAggregationType.prototype.quarter: return $.ig.DashboardDateAggregationType.prototype.month;
			case $.ig.DashboardDateAggregationType.prototype.month: return $.ig.DashboardDateAggregationType.prototype.day;
			case $.ig.DashboardDateAggregationType.prototype.day: return type == $.ig.DashboardDataType.prototype.date ? agg : $.ig.DashboardDateAggregationType.prototype.hour;
			case $.ig.DashboardDateAggregationType.prototype.hour: return $.ig.DashboardDateAggregationType.prototype.minute;
			default: return agg;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNextDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetPreviousDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getPreviousDateAggregation: function (type, agg) {
		if ($.ig.DashboardModelUtils.prototype.getFirstDateAggregation(type) == agg) {
			return agg;
		}
		switch (agg) {
			case $.ig.DashboardDateAggregationType.prototype.semester:
			case $.ig.DashboardDateAggregationType.prototype.quarter:
				return $.ig.DashboardDateAggregationType.prototype.year;
			case $.ig.DashboardDateAggregationType.prototype.month: return $.ig.DashboardDateAggregationType.prototype.quarter;
			case $.ig.DashboardDateAggregationType.prototype.day: return $.ig.DashboardDateAggregationType.prototype.month;
			case $.ig.DashboardDateAggregationType.prototype.hour: return $.ig.DashboardDateAggregationType.prototype.day;
			case $.ig.DashboardDateAggregationType.prototype.minute: return $.ig.DashboardDateAggregationType.prototype.hour;
			default: return agg;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetPreviousDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLevelInStandardDateHierarchy(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getLevelInStandardDateHierarchy: function (type, agg) {
		var a = $.ig.DashboardModelUtils.prototype.getFirstDateAggregation(type);
		var level = 0;
		while (a != agg) {
			level++;
			a = $.ig.DashboardModelUtils.prototype.getNextDateAggregation(type, a);
		}
		return level;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLevelInStandardDateHierarchy(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLastDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	isLastDateAggregation: function (type, agg) {
		if (type == $.ig.DashboardDataType.prototype.date) {
			return agg == $.ig.DashboardDateAggregationType.prototype.day;
		} else {
			return agg == $.ig.DashboardDateAggregationType.prototype.minute;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLastDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getFirstDateAggregation: function (type) {
		return type == $.ig.DashboardDataType.prototype.time ? $.ig.DashboardDateAggregationType.prototype.hour : $.ig.DashboardDateAggregationType.prototype.year;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLastDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getLastDateAggregation: function (type) {
		return type == $.ig.DashboardDataType.prototype.date ? $.ig.DashboardDateAggregationType.prototype.day : $.ig.DashboardDateAggregationType.prototype.minute;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetLastDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLowerDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	isLowerDateAggregation: function (type, agg, lowerThan) {
		while (!$.ig.DashboardModelUtils.prototype.isLastDateAggregation(type, lowerThan)) {
			lowerThan = $.ig.DashboardModelUtils.prototype.getNextDateAggregation(type, lowerThan);
			if (lowerThan == agg) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLowerDateAggregation(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDrilledDown(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec)" />*/
	isDrilledDown: function (colSpec) {
		if (colSpec.xmlaElement() != null) {
			var xe = colSpec.xmlaElement();
			return xe.drillDownMembers() != null && xe.drillDownMembers().length > 0;
		} else if (colSpec.summarizationField() != null) {
			var sf = colSpec.summarizationField();
			return sf.drillDownElements() != null && sf.drillDownElements().length > 0;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDrilledDown(Infragistics.ReportPlus.DashboardModel.DimensionColumnSpec)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaElements(Infragistics.CPList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addXmlaElements: function (result, elements, exceptElements) {
		var elementCount = elements == null ? 0 : elements.length;
		for (var e = 0; e < elementCount; e++) {
			var xe = elements[e];
			if ($.ig.DashboardModelUtils.prototype.getXmlaElement(exceptElements, xe.uniqueName()) == null) {
				result.add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.filtersSection, xe));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaElements(Infragistics.CPList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetVisualizationDataSpec(System.Collections.ArrayList, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getVisualizationDataSpec: function (fields, vizType, vizSettings) {
		if (vizType == "CHART") {
			if (!($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var chartSettings = vizSettings;
			var labelColumnName = chartSettings.labelField();
			var labelColumn = labelColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumnName);
			if (labelColumn == null) {
				labelColumn = $.ig.DashboardModelUtils.prototype.getFirstNonNumericColumn(fields);
				if (labelColumn == null) {
					return null;
				}
			}
			return $.ig.DashboardModelUtils.prototype.createChartVisualizationSpec(fields, chartSettings, labelColumn);
		} else if (vizType == "GAUGE") {
			if (!($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var gaugeSettings = vizSettings;
			var isLabelRequired = true;
			var needsTarget = false;
			var labelColumnName1 = gaugeSettings.labelColumnName();
			var valueColumnName = gaugeSettings.valueColumnName();
			var targetColumnName = gaugeSettings.targetColumnName();
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.bulletGraph) {
				needsTarget = true;
			} else if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				isLabelRequired = false;
			}
			var labelColumn1 = labelColumnName1 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumnName1);
			if (labelColumn1 == null) {
				labelColumn1 = $.ig.DashboardModelUtils.prototype.getFirstNonNumericColumn(fields);
			}
			if (isLabelRequired && labelColumn1 == null) {
				return null;
			}
			var valueColumn = valueColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, valueColumnName);
			if (valueColumn == null) {
				valueColumn = $.ig.DashboardModelUtils.prototype.getFirstNumericColumn(fields, labelColumn1 == null ? null : labelColumn1.fieldName());
				if (valueColumn == null) {
					return null;
				}
			}
			var targetColumn = null;
			if (needsTarget) {
				targetColumn = targetColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, targetColumnName);
				if (targetColumn == null) {
					return null;
				}
			}
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				var vizSpec = new $.ig.SingleGaugeVisualizationDataSpec(0);
				vizSpec.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.singleValueSection, valueColumn, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(valueColumn))));
				if (labelColumn1 != null) {
					vizSpec.label(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn1, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn1)));
				}
				return vizSpec;
			} else {
				var vizSpec1 = new $.ig.LinearGaugeVisualizationDataSpec(0);
				vizSpec1.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.singleValueSection, valueColumn, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(valueColumn))));
				vizSpec1.labels().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn1, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn1)));
				if (targetColumn != null) {
					vizSpec1.target($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.singleValueSection, targetColumn, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(targetColumn))));
				}
				return vizSpec1;
			}
		} else if (vizType == "MAP") {
			if (!($.ig.util.cast($.ig.MapVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var mapSettings = vizSettings;
			if (mapSettings.locationType() == $.ig.DashboardMapLocationType.prototype.latitudeLongitudeSingleField) {
				return null;
			}
			var vizSpec2 = new $.ig.ScatterMapVisualizationDataSpec(0);
			var labelColumnName2 = mapSettings.displayColumnName();
			var valueColumnName1 = mapSettings.displayValueColumnName();
			var isGeocoding = mapSettings.locationType() == $.ig.DashboardMapLocationType.prototype.geocoding;
			var locationColumnName = isGeocoding ? mapSettings.geolocationColumnName() : null;
			var latColumnName = isGeocoding ? null : mapSettings.latitudeColumnName();
			var lngColumnName = isGeocoding ? null : mapSettings.longitudeColumnName();
			var labelColumn2 = labelColumnName2 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumnName2);
			var valueColumn1 = valueColumnName1 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, valueColumnName1);
			var locationColumn = locationColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, locationColumnName);
			var latColumn = latColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, latColumnName);
			var lngColumn = lngColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, lngColumnName);
			if ((isGeocoding && locationColumn == null) || (!isGeocoding && (latColumn == null || lngColumn == null))) {
				return null;
			}
			if (locationColumn != null) {
				vizSpec2.location(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.locationSection, locationColumn, $.ig.DashboardModelUtils.prototype.createSummarizationField(locationColumn)));
			} else {
				vizSpec2.location(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.locationSection, latColumn, $.ig.DashboardModelUtils.prototype.createSummarizationField(latColumn)));
				vizSpec2.longitude(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.locationSection, lngColumn, $.ig.DashboardModelUtils.prototype.createSummarizationField(lngColumn)));
				vizSpec2.isSingleLocationField(false);
			}
			if (labelColumn2 != null) {
				vizSpec2.label(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn2, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn2)));
			}
			if (valueColumn1 != null) {
				vizSpec2.mapColor($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.valuesSection, valueColumn1, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(valueColumn1))));
			}
			return vizSpec2;
		} else if (vizType == "HEAT_MAP") {
			return null;
		} else if (vizType == "IMAGE") {
			var urlField = null;
			if ($.ig.util.cast($.ig.AssetVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var urlFieldName = (vizSettings).urlColumn();
				urlField = urlFieldName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, urlFieldName);
			}
			if (urlField == null) {
				urlField = $.ig.DashboardModelUtils.prototype.getUrlColumn(fields);
			}
			var vizSpec3 = new $.ig.AssetVisualizationDataSpec(0);
			if (urlField != null) {
				vizSpec3.urlColumn(new $.ig.TabularColumnSpec(3, $.ig.VisualizationDataSpec.prototype.columnsSection, urlField));
			}
			return vizSpec3;
		} else if (vizType == "TREE_MAP") {
			var labelColumn3 = null;
			var valueColumn2 = null;
			if ($.ig.util.cast($.ig.TreeMapVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var tmSettings = vizSettings;
				var labelColumnName3 = tmSettings.labelColumnName();
				var valueColumnName2 = tmSettings.valueColumnName();
				labelColumn3 = labelColumnName3 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumnName3);
				valueColumn2 = valueColumnName2 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, valueColumnName2);
			}
			if (labelColumn3 == null) {
				labelColumn3 = $.ig.DashboardModelUtils.prototype.getFirstNonNumericColumn(fields);
			}
			if (valueColumn2 == null) {
				valueColumn2 = $.ig.DashboardModelUtils.prototype.getFirstNumericColumn(fields, labelColumn3 == null ? null : labelColumn3.fieldName());
			}
			if (valueColumn2 == null || labelColumn3 == null) {
				return null;
			}
			var vizSpec4 = new $.ig.TreeMapVisualizationDataSpec(0);
			vizSpec4.labels().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn3, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn3)));
			vizSpec4.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.valuesSection, valueColumn2, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(valueColumn2))));
			return vizSpec4;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetVisualizationDataSpec(System.Collections.ArrayList, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVizSettings(System.String, Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	migrateVizSettings: function (vizType, dataSpec, vizSettings) {
		if (vizType == "MAP" && ($.ig.util.cast($.ig.MapVisualizationSettings.prototype.$type, vizSettings) !== null)) {
			var mapSettings = vizSettings;
			var newSettings = new $.ig.ScatterMapVisualizationSettings(0);
			newSettings.visualizationType("SCATTER_MAP");
			newSettings.region("WorldCountries");
			if (mapSettings.displayValueColumnName() != null) {
				var conditionalFormatting = null;
				if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
					var tabularSpec = dataSpec;
					var fields = tabularSpec.fields();
					var valueField = $.ig.DashboardModelUtils.prototype.getField(fields, mapSettings.displayValueColumnName());
					if (valueField != null) {
						conditionalFormatting = valueField.conditionalFormatting();
					}
				} else if ($.ig.util.cast($.ig.XmlaDataSpec.prototype.$type, dataSpec) !== null) {
					var xmlaSpec = dataSpec;
					var valueMeasure = $.ig.DashboardModelUtils.prototype.getMeasure(xmlaSpec.measures(), mapSettings.displayValueColumnName());
					if (valueMeasure != null) {
						conditionalFormatting = valueMeasure.conditionalFormatting();
					}
				}
				if (conditionalFormatting != null) {
					newSettings.conditionalFormatting(conditionalFormatting);
					newSettings.colorizationMode($.ig.DashboardScatterMapColorizationModeType.prototype.conditionalFormatting);
				}
			}
			return newSettings;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationSettings Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateVizSettings(System.String, Infragistics.ReportPlus.DashboardModel.DataSpec, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateChartVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createChartVisualizationSpec: function (fields, chartSettings, labelColumn) {
		if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.candlestick || chartSettings.chartType() == $.ig.DashboardChartType.prototype.oHLC) {
			return $.ig.DashboardModelUtils.prototype.createFinancialVisualizationSpec(fields, chartSettings, labelColumn);
		} else if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.composite) {
			return $.ig.DashboardModelUtils.prototype.createCompositeVisualizationSpec(fields, chartSettings, labelColumn);
		} else if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.bubble || chartSettings.chartType() == $.ig.DashboardChartType.prototype.scatter) {
			return $.ig.DashboardModelUtils.prototype.createScatterVisualizationSpec(fields, chartSettings, labelColumn);
		} else {
			return $.ig.DashboardModelUtils.prototype.createCategoryVisualizationSpec(fields, chartSettings, labelColumn);
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateChartVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addSeries: function (numFields, fields, series) {
		var seriesCount = series.length;
		for (var i = 0; i < seriesCount; i++) {
			var fieldName = series[i];
			var field = $.ig.DashboardModelUtils.prototype.getField(fields, fieldName);
			if (field != null) {
				numFields.add(field);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCategoryVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createCategoryVisualizationSpec: function (fields, chartSettings, labelColumn) {
		var numFields = new $.ig.Array();
		if (!chartSettings.allSeries() && chartSettings.series() != null && chartSettings.series().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSeries(numFields, fields, chartSettings.series());
		}
		if (numFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllNumericFields(numFields, fields, labelColumn);
		}
		if (numFields.length == 0) {
			return null;
		}
		var vizSpec = new $.ig.CategoryVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn)));
		$.ig.DashboardModelUtils.prototype.addValueFields(vizSpec.values(), numFields, $.ig.VisualizationDataSpec.prototype.valuesSection);
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.CategoryVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCategoryVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCompositeVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createCompositeVisualizationSpec: function (fields, chartSettings, labelColumn) {
		var leftFields = new $.ig.Array();
		var rightFields = new $.ig.Array();
		if (chartSettings.leftAxisFields() != null && chartSettings.leftAxisFields().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSeries(leftFields, fields, chartSettings.leftAxisFields());
		}
		if (chartSettings.rightAxisFields() != null && chartSettings.rightAxisFields().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSeries(rightFields, fields, chartSettings.rightAxisFields());
		}
		if (leftFields.length == 0 || rightFields.length == 0) {
			return null;
		}
		var vizSpec = new $.ig.CompositeChartVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn, $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn)));
		$.ig.DashboardModelUtils.prototype.addValueFields(vizSpec.chart1(), leftFields, $.ig.VisualizationDataSpec.prototype.chart1Section);
		$.ig.DashboardModelUtils.prototype.addValueFields(vizSpec.chart2(), rightFields, $.ig.VisualizationDataSpec.prototype.chart2Section);
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.CompositeChartVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCompositeVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddValueFields(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	addValueFields: function (target, fields, section) {
		var count = fields.length;
		for (var i = 0; i < count; i++) {
			var field = fields[i];
			target.add(new $.ig.MeasureColumnSpec(4, section, field, $.ig.DashboardModelUtils.prototype.createSummarizationValueField(field)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddValueFields(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateFinancialVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createFinancialVisualizationSpec: function (fields, chartSettings, labelColumn) {
		var numFields = new $.ig.Array();
		var financialSettings = chartSettings.financial();
		if (financialSettings != null) {
			var openField = financialSettings.financialOpenField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, financialSettings.financialOpenField());
			var highField = financialSettings.financialHighField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, financialSettings.financialHighField());
			var lowField = financialSettings.financialLowField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, financialSettings.financialLowField());
			var closeField = financialSettings.financialCloseField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, financialSettings.financialCloseField());
			if (openField != null && highField != null && lowField != null && closeField != null) {
				numFields.add(openField);
				numFields.add(highField);
				numFields.add(lowField);
				numFields.add(closeField);
			}
		}
		if (numFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllNumericFields(numFields, fields, labelColumn);
		}
		if (numFields.length == 0) {
			return null;
		}
		if (numFields.length < 4) {
			return null;
		}
		var financialSpec = new $.ig.FinancialVisualizationDataSpec(0);
		var labelSummarizationField = $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn);
		if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, labelSummarizationField) !== null) {
			(labelSummarizationField).dateAggregationType($.ig.DashboardDateAggregationType.prototype.day);
		}
		financialSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn, labelSummarizationField));
		financialSpec.open($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.openSection, numFields[0], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[0]))));
		financialSpec.high($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.highSection, numFields[1], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[1]))));
		financialSpec.low($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.lowSection, numFields[2], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[2]))));
		financialSpec.close($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.closeSection, numFields[3], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[3]))));
		return financialSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FinancialVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateFinancialVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateScatterVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createScatterVisualizationSpec: function (fields, chartSettings, labelColumn) {
		var bubble = chartSettings.chartType() == $.ig.DashboardChartType.prototype.bubble;
		var numFields = new $.ig.Array();
		var xField = chartSettings.xAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, chartSettings.xAxisField());
		var yField = chartSettings.yAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, chartSettings.yAxisField());
		var zField = chartSettings.zAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, chartSettings.zAxisField());
		if (xField != null && yField != null && (zField != null || !bubble)) {
			numFields.add(xField);
			numFields.add(yField);
			if (zField != null && bubble) {
				numFields.add(zField);
			}
		}
		if (numFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllNumericFields(numFields, fields, labelColumn);
		}
		if (numFields.length == 0) {
			return null;
		}
		if (numFields.length < (bubble ? 3 : 2)) {
			return null;
		}
		var spec = bubble ? new $.ig.BubbleVisualizationDataSpec(0) : new $.ig.ScatterVisualizationDataSpec(0);
		var labelSummarizationField = $.ig.DashboardModelUtils.prototype.createSummarizationField(labelColumn);
		if ($.ig.util.cast($.ig.SummarizationDateField.prototype.$type, labelSummarizationField) !== null) {
			(labelSummarizationField).dateAggregationType($.ig.DashboardDateAggregationType.prototype.day);
		}
		spec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelColumn, labelSummarizationField));
		spec.xAxis($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.xAxisSection, numFields[0], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[0]))));
		spec.yAxis($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.yAxisSection, numFields[1], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[1]))));
		if (bubble) {
			var bubbleSpec = spec;
			bubbleSpec.radius($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.radiusSection, numFields[2], $.ig.DashboardModelUtils.prototype.createSummarizationValueField(numFields[2]))));
		}
		return spec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateScatterVisualizationSpec(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllNumericFields(System.Collections.ArrayList, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	addAllNumericFields: function (numFields, fields, labelColumn) {
		var fieldCount = fields.length;
		for (var i = 0; i < fieldCount; i++) {
			var field = fields[i];
			if (field.fieldType() != $.ig.DashboardDataType.prototype.number || field.fieldName() == labelColumn.fieldName()) {
				continue;
			}
			numFields.add(field);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllNumericFields(System.Collections.ArrayList, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SingleMeasureList(Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec)" />*/
	singleMeasureList: function (measure) {
		var list = new $.ig.Array();
		list.add(measure);
		return list;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::SingleMeasureList(Infragistics.ReportPlus.DashboardModel.MeasureColumnSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getSummarizedVisualizationDataSpec: function (dataSpec, vizType, vizSettings) {
		var fields = $.ig.DashboardModelUtils.prototype.getActiveFields(dataSpec);
		var summarization = dataSpec.summarizationSpec();
		if (vizType == "GRID") {
			var vizSpec = new $.ig.PivotVisualizationDataSpec(0);
			$.ig.DashboardModelUtils.prototype.addSummarizationFields($.ig.VisualizationDataSpec.prototype.rowsSection, fields, vizSpec.rows(), summarization.rows());
			$.ig.DashboardModelUtils.prototype.addSummarizationFields($.ig.VisualizationDataSpec.prototype.columnsSection, fields, vizSpec.columns(), summarization.columns());
			$.ig.DashboardModelUtils.prototype.addSummarizationValues($.ig.VisualizationDataSpec.prototype.valuesSection, fields, vizSpec.values(), summarization.values());
			vizSpec.adHocExpandedElements(summarization.adHocExpandedElements());
			vizSpec.adHocFields(summarization.adHocFields());
			vizSpec.showGrandTotals(!summarization.hideGrandTotalRow());
			return vizSpec;
		} else if (vizType == "CHART") {
			if (!($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var chartSettings = vizSettings;
			return $.ig.DashboardModelUtils.prototype.getSummarizedChartVisualizationSpec(chartSettings, summarization, fields);
		} else if (vizType == "GAUGE") {
			if (!($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var gaugeSettings = vizSettings;
			var isLabelRequired = true;
			var needsTarget = false;
			var labelColumnName = gaugeSettings.labelColumnName();
			var valueColumnName = gaugeSettings.valueColumnName();
			var targetColumnName = gaugeSettings.targetColumnName();
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.bulletGraph) {
				needsTarget = true;
			} else if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				isLabelRequired = false;
			}
			var labelColumn = null;
			labelColumn = labelColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getDimensionField(summarization.rows(), fields, labelColumnName);
			if (isLabelRequired && labelColumn == null) {
				labelColumn = summarization.rows().length == 0 ? null : summarization.rows()[0];
			}
			if (isLabelRequired && labelColumn == null) {
				return null;
			}
			var valueColumn = valueColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, valueColumnName);
			if (valueColumn == null) {
				valueColumn = summarization.values().length == 0 ? null : summarization.values()[0];
				if (valueColumn == null) {
					return null;
				}
			}
			var valueField = $.ig.DashboardModelUtils.prototype.getField(fields, valueColumn.fieldName());
			var targetColumn = null;
			if (needsTarget) {
				targetColumn = targetColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, targetColumnName);
			}
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				var vizSpec1 = new $.ig.SingleGaugeVisualizationDataSpec(0);
				vizSpec1.value($.ig.DashboardModelUtils.prototype.getSingleValueList($.ig.VisualizationDataSpec.prototype.singleValueSection, summarization.values(), fields, valueColumn));
				if (labelColumn != null) {
					var labelField = $.ig.DashboardModelUtils.prototype.getField(fields, labelColumn.fieldName());
					if (labelField == null) {
						return null;
					}
					vizSpec1.label(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField, labelColumn));
				}
				return vizSpec1;
			} else {
				var labelField1 = $.ig.DashboardModelUtils.prototype.getField(fields, labelColumn.fieldName());
				if (labelField1 == null) {
					return null;
				}
				var vizSpec2 = new $.ig.LinearGaugeVisualizationDataSpec(0);
				vizSpec2.value($.ig.DashboardModelUtils.prototype.getSingleValueList($.ig.VisualizationDataSpec.prototype.singleValueSection, summarization.values(), fields, valueColumn));
				vizSpec2.labels().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField1, labelColumn));
				if (targetColumn != null) {
					var targetField = $.ig.DashboardModelUtils.prototype.getField(fields, targetColumn.fieldName());
					vizSpec2.target($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.singleValueSection, targetField, targetColumn)));
				}
				return vizSpec2;
			}
		} else if (vizType == "MAP") {
			var vizSpec3 = new $.ig.ScatterMapVisualizationDataSpec(0);
			var labelColumn1 = null;
			var valueColumn1 = null;
			if ($.ig.util.cast($.ig.MapVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var smSettings = vizSettings;
				var labelColumnName1 = smSettings.displayColumnName();
				var valueColumnName1 = smSettings.displayValueColumnName();
				labelColumn1 = labelColumnName1 == null ? null : $.ig.DashboardModelUtils.prototype.getDimensionField(summarization.rows(), fields, labelColumnName1);
				valueColumn1 = valueColumnName1 == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, valueColumnName1);
			}
			if (labelColumn1 == null) {
				labelColumn1 = summarization.rows().length == 0 ? null : summarization.rows()[0];
			}
			if (valueColumn1 == null) {
				valueColumn1 = summarization.values().length == 0 ? null : summarization.values()[0];
			}
			var valueField1 = valueColumn1 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, valueColumn1.fieldName());
			var labelField2 = labelColumn1 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumn1.fieldName());
			if (labelColumn1 == null || labelField2 == null) {
				return null;
			}
			vizSpec3.label(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField2, labelColumn1));
			if (valueColumn1 != null) {
				vizSpec3.mapColor($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.valuesSection, valueField1, valueColumn1)));
			}
			return vizSpec3;
		} else if (vizType == "HEAT_MAP") {
			return null;
		} else if (vizType == "IMAGE") {
			var urlField = null;
			if ($.ig.util.cast($.ig.AssetVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var urlFieldName = (vizSettings).urlColumn();
				urlField = urlFieldName == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, urlFieldName);
			}
			if (urlField == null) {
				urlField = $.ig.DashboardModelUtils.prototype.getUrlColumn(fields);
			}
			if (urlField == null) {
				return null;
			}
			var vizSpec4 = new $.ig.GridVisualizationDataSpec(0);
			var refColumn = new $.ig.TabularColumnSpec(3, $.ig.VisualizationDataSpec.prototype.columnsSection, urlField);
			vizSpec4.columns().add(refColumn);
			return vizSpec4;
		} else if (vizType == "TREE_MAP") {
			var labelColumn2 = null;
			var valueColumn2 = null;
			if ($.ig.util.cast($.ig.TreeMapVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var tmSettings = vizSettings;
				var labelColumnName2 = tmSettings.labelColumnName();
				var valueColumnName2 = tmSettings.valueColumnName();
				labelColumn2 = labelColumnName2 == null ? null : $.ig.DashboardModelUtils.prototype.getDimensionField(summarization.rows(), fields, labelColumnName2);
				valueColumn2 = valueColumnName2 == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, valueColumnName2);
			}
			if (labelColumn2 == null) {
				labelColumn2 = summarization.rows().length == 0 ? null : summarization.rows()[0];
			}
			if (valueColumn2 == null) {
				valueColumn2 = summarization.values().length == 0 ? null : summarization.values()[0];
			}
			var valueField2 = valueColumn2 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, valueColumn2.fieldName());
			var labelField3 = labelColumn2 == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumn2.fieldName());
			if (valueColumn2 == null || labelColumn2 == null || labelField3 == null) {
				return null;
			}
			var vizSpec5 = new $.ig.TreeMapVisualizationDataSpec(0);
			vizSpec5.labels().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField3, labelColumn2));
			vizSpec5.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.valuesSection, valueField2, valueColumn2)));
			if (summarization != null && summarization.columns().length > 0) {
				var detailColumn = summarization.columns()[0];
				var detailField = $.ig.DashboardModelUtils.prototype.getField(fields, detailColumn.fieldName());
				if (detailField != null) {
					vizSpec5.labels().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.categorySection, detailField, detailColumn));
					vizSpec5.adHocFields($.ig.util.toNullable($.ig.Number.prototype.$type, 2));
				}
			}
			return vizSpec5;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedChartVisualizationSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList)" />*/
	getSummarizedChartVisualizationSpec: function (chartSettings, summarization, fields) {
		var labelColumnName = chartSettings.labelField();
		var labelColumn = labelColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getDimensionField(summarization.rows(), fields, labelColumnName);
		if (labelColumn == null) {
			labelColumn = summarization.rows().length == 0 ? null : summarization.rows()[0];
			if (labelColumn == null) {
				return null;
			}
		}
		var labelField = labelColumn == null ? null : $.ig.DashboardModelUtils.prototype.getField(fields, labelColumn.fieldName());
		if (labelField == null) {
			return null;
		}
		if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.candlestick || chartSettings.chartType() == $.ig.DashboardChartType.prototype.oHLC) {
			return $.ig.DashboardModelUtils.prototype.getSummarizedFinancialSpec(chartSettings, summarization, fields, labelField, labelColumn);
		} else if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.composite) {
			return $.ig.DashboardModelUtils.prototype.getSummarizedCompositeSpec(chartSettings, summarization, fields, labelField, labelColumn);
		} else if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.scatter || chartSettings.chartType() == $.ig.DashboardChartType.prototype.bubble) {
			return $.ig.DashboardModelUtils.prototype.getSummarizedScatterSpec(chartSettings, summarization, fields, labelField, labelColumn);
		} else {
			return $.ig.DashboardModelUtils.prototype.getSummarizedCategorySpec(chartSettings, summarization, fields, labelField, labelColumn);
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedChartVisualizationSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedCategorySpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	getSummarizedCategorySpec: function (chartSettings, summarization, fields, labelField, labelColumn) {
		var valueFields = new $.ig.Array();
		if (!chartSettings.allSeries() && chartSettings.series() != null && chartSettings.series().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSummarizedSeries(valueFields, chartSettings.series(), fields, summarization.values());
		}
		if (valueFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllValueFields(valueFields, summarization);
			if (valueFields.length == 0) {
				return null;
			}
		}
		var vizSpec = new $.ig.CategoryVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField, labelColumn));
		$.ig.DashboardModelUtils.prototype.addSummarizedValueFields(vizSpec.values(), valueFields, fields, $.ig.VisualizationDataSpec.prototype.valuesSection);
		if (summarization.columns().length > 0) {
			var columnField = summarization.columns()[0];
			var categoryField = $.ig.DashboardModelUtils.prototype.getField(fields, columnField.fieldName());
			if (categoryField != null) {
				vizSpec.category(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.categorySection, categoryField, columnField));
			}
		}
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedCategorySpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizedSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addSummarizedSeries: function (valueFields, series, fields, values) {
		var seriesCount = series.length;
		for (var i = 0; i < seriesCount; i++) {
			var fieldName = series[i];
			var field = $.ig.DashboardModelUtils.prototype.getValueField(values, fields, fieldName);
			if (field != null) {
				valueFields.add(field);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizedSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizedValueFields(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	addSummarizedValueFields: function (measures, valueFields, fields, section) {
		var valueCount = valueFields.length;
		for (var i = 0; i < valueCount; i++) {
			var valueField = valueFields[i];
			var field = $.ig.DashboardModelUtils.prototype.getField(fields, valueField.fieldName());
			measures.add(new $.ig.MeasureColumnSpec(4, section, field, valueField));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizedValueFields(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedCompositeSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	getSummarizedCompositeSpec: function (chartSettings, summarization, fields, labelField, labelColumn) {
		var leftValueFields = new $.ig.Array();
		var rightValueFields = new $.ig.Array();
		if (chartSettings.leftAxisFields() != null && chartSettings.leftAxisFields().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSummarizedSeries(leftValueFields, chartSettings.leftAxisFields(), fields, summarization.values());
		}
		if (chartSettings.rightAxisFields() != null && chartSettings.rightAxisFields().length > 0) {
			$.ig.DashboardModelUtils.prototype.addSummarizedSeries(rightValueFields, chartSettings.rightAxisFields(), fields, summarization.values());
		}
		if (leftValueFields.length == 0 || rightValueFields.length == 0) {
			return null;
		}
		var vizSpec = new $.ig.CompositeChartVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField, labelColumn));
		$.ig.DashboardModelUtils.prototype.addSummarizedValueFields(vizSpec.chart1(), leftValueFields, fields, $.ig.VisualizationDataSpec.prototype.chart1Section);
		$.ig.DashboardModelUtils.prototype.addSummarizedValueFields(vizSpec.chart2(), rightValueFields, fields, $.ig.VisualizationDataSpec.prototype.chart2Section);
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedCompositeSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedFinancialSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	getSummarizedFinancialSpec: function (chartSettings, summarization, fields, labelField, labelColumn) {
		var valueFields = new $.ig.Array();
		var financialSettings = chartSettings.financial();
		if (financialSettings != null) {
			var openValueField = financialSettings.financialOpenField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, financialSettings.financialOpenField());
			var highValueField = financialSettings.financialHighField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, financialSettings.financialHighField());
			var lowValueField = financialSettings.financialLowField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, financialSettings.financialLowField());
			var closeValueField = financialSettings.financialCloseField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, financialSettings.financialCloseField());
			if (openValueField != null && highValueField != null && lowValueField != null && closeValueField != null) {
				valueFields.add(openValueField);
				valueFields.add(highValueField);
				valueFields.add(lowValueField);
				valueFields.add(closeValueField);
			}
		}
		if (valueFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllValueFields(valueFields, summarization);
		}
		if (valueFields.length < 4) {
			return null;
		}
		var financialSpec = new $.ig.FinancialVisualizationDataSpec(0);
		financialSpec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField, labelColumn));
		var openField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[0]).fieldName());
		var highField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[1]).fieldName());
		var lowField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[2]).fieldName());
		var closeField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[3]).fieldName());
		financialSpec.open(openField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.openSection, openField, valueFields[0])));
		financialSpec.high(highField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.highSection, highField, valueFields[1])));
		financialSpec.low(lowField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.lowSection, lowField, valueFields[2])));
		financialSpec.close(closeField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.closeSection, closeField, valueFields[3])));
		return financialSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedFinancialSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedScatterSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	getSummarizedScatterSpec: function (chartSettings, summarization, fields, labelField, labelColumn) {
		var bubble = chartSettings.chartType() == $.ig.DashboardChartType.prototype.bubble;
		var valueFields = new $.ig.Array();
		var xAxisValueField = chartSettings.xAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, chartSettings.xAxisField());
		var yAxisValueField = chartSettings.yAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, chartSettings.yAxisField());
		var zAxisValueField = chartSettings.zAxisField() == null ? null : $.ig.DashboardModelUtils.prototype.getValueField(summarization.values(), fields, chartSettings.zAxisField());
		if (xAxisValueField != null && yAxisValueField != null && (zAxisValueField != null || !bubble)) {
			valueFields.add(xAxisValueField);
			valueFields.add(yAxisValueField);
			if (zAxisValueField != null && bubble) {
				valueFields.add(zAxisValueField);
			}
		}
		if (valueFields.length == 0) {
			$.ig.DashboardModelUtils.prototype.addAllValueFields(valueFields, summarization);
		}
		if (valueFields.length < (bubble ? 3 : 2)) {
			return null;
		}
		var spec;
		if (bubble) {
			spec = new $.ig.BubbleVisualizationDataSpec(0);
		} else {
			spec = new $.ig.ScatterVisualizationDataSpec(0);
		}
		spec.rows().add(new $.ig.DimensionColumnSpec(3, $.ig.VisualizationDataSpec.prototype.labelSection, labelField, labelColumn));
		var xField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[0]).fieldName());
		var yField = $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[1]).fieldName());
		var zField = bubble ? $.ig.DashboardModelUtils.prototype.getField(fields, (valueFields[2]).fieldName()) : null;
		spec.xAxis(xField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.xAxisSection, xField, valueFields[0])));
		spec.yAxis(yField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.yAxisSection, yField, valueFields[1])));
		if (bubble) {
			var bubbleSpec = spec;
			bubbleSpec.radius(zField == null ? null : $.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(4, $.ig.VisualizationDataSpec.prototype.radiusSection, zField, valueFields[2])));
		}
		return spec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.ScatterVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSummarizedScatterSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.SummarizationSpec, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.Field, Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllValueFields(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	addAllValueFields: function (target, summarization) {
		var valueFieldCount = summarization.values().length;
		for (var i = 0; i < valueFieldCount; i++) {
			var valueField = summarization.values()[i];
			target.add(valueField);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllValueFields(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.SummarizationSpec)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSingleValueList(System.String, System.Collections.ArrayList, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.SummarizationValueField)" />*/
	getSingleValueList: function (location, values, fields, valueColumn) {
		var result = new $.ig.Array();
		var valueCount = values.length;
		for (var v = 0; v < valueCount; v++) {
			var vf = values[v];
			vf.isHidden(vf.fieldName() == null || vf.fieldName() != valueColumn.fieldName());
			var field = $.ig.DashboardModelUtils.prototype.getField(fields, vf.fieldName());
			result.add(new $.ig.MeasureColumnSpec(4, location, field, vf));
		}
		return result;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSingleValueList(System.String, System.Collections.ArrayList, System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.SummarizationValueField)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	getXmlaVisualizationDataSpec: function (dataSpec, vizType, vizSettings) {
		if (vizType == "GRID" || vizType == "SINGLE_ROW") {
			var vizSpec = new $.ig.PivotVisualizationDataSpec(0);
			$.ig.DashboardModelUtils.prototype.addXmlaDimensionElements($.ig.VisualizationDataSpec.prototype.rowsSection, vizSpec.rows(), dataSpec.rows());
			$.ig.DashboardModelUtils.prototype.addXmlaDimensionElements($.ig.VisualizationDataSpec.prototype.columnsSection, vizSpec.columns(), dataSpec.columns());
			$.ig.DashboardModelUtils.prototype.addXmlaMeasures($.ig.VisualizationDataSpec.prototype.valuesSection, vizSpec.values(), dataSpec.measures());
			if ($.ig.util.cast($.ig.GridVisualizationSettings.prototype.$type, vizSettings) !== null) {
				vizSpec.showGrandTotals(!(vizSettings).hideGrandTotals());
			} else {
				vizSpec.showGrandTotals(dataSpec.showGrandTotals());
			}
			return vizSpec;
		} else if (vizType == "CHART") {
			if (!($.ig.util.cast($.ig.ChartVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			return $.ig.DashboardModelUtils.prototype.getXmlaChartVisualizationSpec(vizSettings, dataSpec);
		} else if (vizType == "GAUGE") {
			if (!($.ig.util.cast($.ig.GaugeVisualizationSettings.prototype.$type, vizSettings) !== null)) {
				return null;
			}
			var gaugeSettings = vizSettings;
			var isLabelRequired = true;
			var needsTarget = false;
			var valueColumnName = gaugeSettings.valueColumnName();
			var targetColumnName = gaugeSettings.targetColumnName();
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.bulletGraph) {
				needsTarget = true;
			} else if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				isLabelRequired = false;
			}
			var labelElement = null;
			if (dataSpec.rows().length == 0) {
				return null;
			}
			labelElement = dataSpec.rows()[0];
			if (isLabelRequired && labelElement == null) {
				return null;
			}
			var valueMeasure = valueColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), valueColumnName);
			if (valueMeasure == null) {
				valueMeasure = dataSpec.measures().length == 0 ? null : $.ig.DashboardModelUtils.prototype.getFirstVisibleMeasure(dataSpec.measures());
				if (valueMeasure == null) {
					return null;
				}
			}
			var targetMeasure = null;
			if (needsTarget) {
				targetMeasure = targetColumnName == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), targetColumnName);
			}
			if (gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.singleValue || gaugeSettings.viewType() == $.ig.DashboardGaugeViewType.prototype.circular) {
				var vizSpec1 = new $.ig.SingleGaugeVisualizationDataSpec(0);
				vizSpec1.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.singleValueSection, valueMeasure)));
				if (labelElement != null) {
					vizSpec1.label(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement));
				}
				return vizSpec1;
			} else {
				var vizSpec2 = new $.ig.LinearGaugeVisualizationDataSpec(0);
				vizSpec2.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.singleValueSection, valueMeasure)));
				vizSpec2.labels().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement));
				if (targetMeasure != null) {
					vizSpec2.target($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.singleValueSection, targetMeasure)));
				}
				return vizSpec2;
			}
		} else if (vizType == "MAP") {
			return null;
		} else if (vizType == "HEAT_MAP") {
			return null;
		} else if (vizType == "IMAGE") {
			return null;
		} else if (vizType == "TREE_MAP") {
			if (dataSpec.rows().length == 0) {
				return null;
			}
			var labelElement1 = dataSpec.rows()[0];
			if (labelElement1 == null) {
				return null;
			}
			var measure = null;
			if ($.ig.util.cast($.ig.TreeMapVisualizationSettings.prototype.$type, vizSettings) !== null) {
				var tmSettings = vizSettings;
				var valueColumnName1 = tmSettings.valueColumnName();
				measure = valueColumnName1 == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), valueColumnName1);
			}
			if (measure == null) {
				measure = $.ig.DashboardModelUtils.prototype.getFirstVisibleMeasure(dataSpec.measures());
			}
			if (measure == null) {
				return null;
			}
			var vizSpec3 = new $.ig.TreeMapVisualizationDataSpec(0);
			vizSpec3.labels().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement1));
			vizSpec3.value($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.valuesSection, measure)));
			if (dataSpec.columns().length > 0) {
				var detailElement = dataSpec.columns()[0];
				vizSpec3.labels().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.categorySection, detailElement));
			}
			return vizSpec3;
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaVisualizationDataSpec(Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, System.String, Infragistics.ReportPlus.DashboardModel.VisualizationSettings)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaChartVisualizationSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec)" />*/
	getXmlaChartVisualizationSpec: function (chartSettings, dataSpec) {
		if (dataSpec.rows().length == 0) {
			return null;
		}
		var labelElement = dataSpec.rows()[0];
		if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.candlestick || chartSettings.chartType() == $.ig.DashboardChartType.prototype.oHLC) {
			return $.ig.DashboardModelUtils.prototype.getXmlaFinancialChartSpec(chartSettings, dataSpec, labelElement);
		} else if (chartSettings.chartType() == $.ig.DashboardChartType.prototype.composite) {
			return $.ig.DashboardModelUtils.prototype.getXmlaCompositeChartSpec(chartSettings, dataSpec, labelElement);
		} else {
			return $.ig.DashboardModelUtils.prototype.getXmlaCategoryChartSpec(chartSettings, dataSpec, labelElement);
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaChartVisualizationSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaCategoryChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	getXmlaCategoryChartSpec: function (chartSettings, dataSpec, labelElement) {
		var measures = new $.ig.Array();
		$.ig.DashboardModelUtils.prototype.addAllHiddenMeasures(measures, dataSpec.measures());
		if (!chartSettings.allSeries()) {
			$.ig.DashboardModelUtils.prototype.addMeasuresFromSeries(measures, dataSpec.measures(), chartSettings.series(), false);
		}
		if ($.ig.DashboardModelUtils.prototype.getVisibleMeasureCount(measures) == 0) {
			$.ig.DashboardModelUtils.prototype.addAllVisibleMeasures(measures, dataSpec.measures());
		}
		if (measures.length == 0) {
			return null;
		}
		var vizSpec = new $.ig.CategoryVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement));
		$.ig.DashboardModelUtils.prototype.addMeasuresFromXmlaMeasures(vizSpec.values(), measures, $.ig.VisualizationDataSpec.prototype.valuesSection);
		if (dataSpec.columns().length > 0) {
			var columnElement = dataSpec.columns()[0];
			vizSpec.category(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.categorySection, columnElement));
		}
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaCategoryChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaCompositeChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	getXmlaCompositeChartSpec: function (chartSettings, dataSpec, labelElement) {
		var leftMeasures = new $.ig.Array();
		var rightMeasures = new $.ig.Array();
		$.ig.DashboardModelUtils.prototype.addMeasuresFromSeries(leftMeasures, dataSpec.measures(), chartSettings.leftAxisFields(), true);
		$.ig.DashboardModelUtils.prototype.addMeasuresFromSeries(rightMeasures, dataSpec.measures(), chartSettings.rightAxisFields(), true);
		if (leftMeasures.length == 0 || rightMeasures.length == 0) {
			return null;
		}
		var vizSpec = new $.ig.CompositeChartVisualizationDataSpec(0);
		vizSpec.rows().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement));
		$.ig.DashboardModelUtils.prototype.addMeasuresFromXmlaMeasures(vizSpec.chart1(), leftMeasures, $.ig.VisualizationDataSpec.prototype.chart1Section);
		$.ig.DashboardModelUtils.prototype.addMeasuresFromXmlaMeasures(vizSpec.chart2(), rightMeasures, $.ig.VisualizationDataSpec.prototype.chart2Section);
		return vizSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaCompositeChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddMeasuresFromXmlaMeasures(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	addMeasuresFromXmlaMeasures: function (target, measures, section) {
		var measureCount = measures.length;
		for (var i = 0; i < measureCount; i++) {
			target.add(new $.ig.MeasureColumnSpec(3, section, measures[i]));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddMeasuresFromXmlaMeasures(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddMeasuresFromSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.Boolean)" />*/
	addMeasuresFromSeries: function (target, measures, series, includeHidden) {
		var seriesCount = series == null ? 0 : series.length;
		for (var i = 0; i < seriesCount; i++) {
			var fieldName = series[i];
			var measure = $.ig.DashboardModelUtils.prototype.getMeasure(measures, fieldName);
			if (measure != null && (includeHidden || !measure.isHidden())) {
				target.add(measure);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddMeasuresFromSeries(System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaFinancialChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	getXmlaFinancialChartSpec: function (chartSettings, dataSpec, labelElement) {
		var measures = new $.ig.Array();
		var financialSettings = chartSettings.financial();
		if (financialSettings != null) {
			var openMeasure = financialSettings.financialOpenField() == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), financialSettings.financialOpenField());
			var highMeasure = financialSettings.financialHighField() == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), financialSettings.financialHighField());
			var lowMeasure = financialSettings.financialLowField() == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), financialSettings.financialLowField());
			var closeMeasure = financialSettings.financialCloseField() == null ? null : $.ig.DashboardModelUtils.prototype.getMeasure(dataSpec.measures(), financialSettings.financialCloseField());
			if (openMeasure != null && highMeasure != null && lowMeasure != null && closeMeasure != null) {
				measures.add(openMeasure);
				measures.add(highMeasure);
				measures.add(lowMeasure);
				measures.add(closeMeasure);
			}
		}
		if ($.ig.DashboardModelUtils.prototype.getVisibleMeasureCount(measures) == 0) {
			$.ig.DashboardModelUtils.prototype.addAllVisibleMeasures(measures, dataSpec.measures());
		}
		if (measures.length < 4) {
			return null;
		}
		var financialSpec = new $.ig.FinancialVisualizationDataSpec(0);
		financialSpec.rows().add(new $.ig.DimensionColumnSpec(4, $.ig.VisualizationDataSpec.prototype.labelSection, labelElement));
		financialSpec.open($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.openSection, measures[0])));
		financialSpec.high($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.highSection, measures[1])));
		financialSpec.low($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.lowSection, measures[2])));
		financialSpec.close($.ig.DashboardModelUtils.prototype.singleMeasureList(new $.ig.MeasureColumnSpec(3, $.ig.VisualizationDataSpec.prototype.closeSection, measures[3])));
		return financialSpec;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.LabelsVisualizationDataSpec Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetXmlaFinancialChartSpec(Infragistics.ReportPlus.DashboardModel.ChartVisualizationSettings, Infragistics.ReportPlus.DashboardModel.XmlaDataSpec, Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllVisibleMeasures(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addAllVisibleMeasures: function (target, source) {
		var sourceMeasureCount = source.length;
		for (var i = 0; i < sourceMeasureCount; i++) {
			var measure = source[i];
			if (measure.isHidden()) {
				continue;
			}
			target.add(measure);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllVisibleMeasures(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllHiddenMeasures(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addAllHiddenMeasures: function (target, source) {
		var sourceMeasureCount = source.length;
		for (var i = 0; i < sourceMeasureCount; i++) {
			var measure = source[i];
			if (measure.isHidden()) {
				target.add(measure);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddAllHiddenMeasures(System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetVisibleMeasureCount(System.Collections.ArrayList)" />*/
	getVisibleMeasureCount: function (measures) {
		var measureCount = measures.length;
		var count = 0;
		for (var i = 0; i < measureCount; i++) {
			var measure = measures[i];
			if (!measure.isHidden()) {
				count++;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetVisibleMeasureCount(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetMeasure(System.Collections.ArrayList, System.String)" />*/
	getMeasure: function (measures, caption) {
		var measureCount = measures.length;
		for (var m = 0; m < measureCount; m++) {
			var measure = measures[m];
			if (measure.caption() == caption) {
				return measure;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetMeasure(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstVisibleMeasure(System.Collections.ArrayList)" />*/
	getFirstVisibleMeasure: function (measures) {
		var measureCount = measures.length;
		for (var m = 0; m < measureCount; m++) {
			var measure = measures[m];
			if (!measure.isHidden()) {
				return measure;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.XmlaMeasure Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstVisibleMeasure(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstNonNumericColumn(System.Collections.ArrayList)" />*/
	getFirstNonNumericColumn: function (fields) {
		var labelField = null;
		var fieldCount = fields.length;
		for (var i = 0; i < fieldCount; i++) {
			var field = fields[i];
			if (field.isHidden() || field.fieldType() == $.ig.DashboardDataType.prototype.number) {
				continue;
			}
			labelField = field;
			break;
		}
		if (labelField == null) {
			labelField = fieldCount == 0 ? null : fields[0];
		}
		return labelField;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstNonNumericColumn(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstNumericColumn(System.Collections.ArrayList, System.String)" />*/
	getFirstNumericColumn: function (fields, skipField) {
		var numField = null;
		var candidateField = null;
		var fieldCount = fields.length;
		for (var i = 0; i < fieldCount; i++) {
			var field = fields[i];
			if (field.isHidden()) {
				continue;
			}
			if (field.fieldType() == $.ig.DashboardDataType.prototype.number) {
				candidateField = field;
				if (field.fieldName() == skipField) {
					continue;
				}
				numField = field;
				break;
			}
		}
		return numField == null ? candidateField : numField;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFirstNumericColumn(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDimensionField(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	getDimensionField: function (dimFields, fields, fieldName) {
		var dimCount = dimFields.length;
		for (var i = 0; i < dimCount; i++) {
			var dimField = dimFields[i];
			if (dimField.fieldName() == fieldName) {
				return dimField;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDimensionField(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetValueField(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	getValueField: function (valueFields, fields, fieldName) {
		var valueCount = valueFields.length;
		for (var i = 0; i < valueCount; i++) {
			var valueField = valueFields[i];
			if ($.ig.NativeStringUtility.prototype.endsWith(fieldName, " " + valueField.fieldName()) || fieldName == valueField.fieldLabel()) {
				return valueField;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetValueField(System.Collections.ArrayList, System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUrlColumn(System.Collections.ArrayList)" />*/
	getUrlColumn: function (fields) {
		var onlyVisible = null;
		var countVisible = 0;
		var fieldCount = fields.length;
		for (var i = 0; i < fieldCount; i++) {
			var field = fields[i];
			if (field.isHidden()) {
				continue;
			}
			var lowerName = field.fieldName().toLowerCase();
			if ($.ig.NativeStringUtility.prototype.startsWith(lowerName, "url") || $.ig.NativeStringUtility.prototype.endsWith(lowerName, "url")) {
				return field;
			}
			onlyVisible = field;
			countVisible = countVisible + 1;
		}
		return countVisible == 1 ? onlyVisible : null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUrlColumn(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizationFields(System.String, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addSummarizationFields: function (location, fields, target, source) {
		var count = source.length;
		for (var i = 0; i < count; i++) {
			var sd = source[i];
			var field = $.ig.DashboardModelUtils.prototype.getField(fields, sd.fieldName());
			target.add(new $.ig.DimensionColumnSpec(3, location, field, sd));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizationFields(System.String, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizationValues(System.String, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addSummarizationValues: function (location, fields, target, source) {
		var count = source.length;
		for (var i = 0; i < count; i++) {
			var sv = source[i];
			var field = $.ig.DashboardModelUtils.prototype.getField(fields, sv.fieldName());
			target.add(new $.ig.MeasureColumnSpec(4, location, field, sv));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddSummarizationValues(System.String, System.Collections.ArrayList, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaDimensionElements(System.String, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addXmlaDimensionElements: function (location, target, source) {
		var count = source.length;
		for (var i = 0; i < count; i++) {
			var xe = source[i];
			$.ig.DashboardModelUtils.prototype.migrateDrillDownElements(xe);
			target.add(new $.ig.DimensionColumnSpec(4, location, xe));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaDimensionElements(System.String, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDrillDownElements(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	migrateDrillDownElements: function (xe) {
		if (xe.drillDownElements() == null || xe.drillDownElements().length == 0) {
			return;
		}
		if (xe.drillDownMembers() == null) {
			xe.drillDownMembers(new $.ig.Array());
		}
		var members = xe.drillDownMembers();
		var count = xe.drillDownElements().length;
		for (var i = 0; i < count; i++) {
			var uniqueName = xe.drillDownElements()[i];
			var member = new $.ig.XmlaMember(0);
			member.uniqueName(uniqueName);
			member.caption($.ig.DashboardModelUtils.prototype.getCaptionFromUniqueName(uniqueName));
			members.add(member);
		}
		xe.drillDownMembers(members);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::MigrateDrillDownElements(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCaptionFromUniqueName(System.String)" />*/
	getCaptionFromUniqueName: function (uniqueName) {
		if ($.ig.NativeStringUtility.prototype.startsWith(uniqueName, "Ancestor")) {
			return "..";
		}
		if ($.ig.NativeStringUtility.prototype.contains(uniqueName, ".&")) {
			var split = $.ig.NativeStringUtility.prototype.split(uniqueName, ".&");
			if (split.length == 2) {
				uniqueName = split[1];
				uniqueName = $.ig.NativeStringUtility.prototype.substring(uniqueName, 1, uniqueName.length - 2);
			}
		} else {
			var split1 = $.ig.NativeStringUtility.prototype.split(uniqueName, ".");
			if (split1.length > 0) {
				uniqueName = split1[split1.length - 1];
				uniqueName = $.ig.NativeStringUtility.prototype.substring(uniqueName, 1, uniqueName.length - 2);
			}
		}
		return uniqueName;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCaptionFromUniqueName(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaMeasures(System.String, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	addXmlaMeasures: function (location, target, source) {
		var count = source.length;
		for (var i = 0; i < count; i++) {
			var xm = source[i];
			target.add(new $.ig.MeasureColumnSpec(3, location, xm));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::AddXmlaMeasures(System.String, System.Collections.ArrayList, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GlobalFiltersHaveSameDataSourceItem(Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	globalFiltersHaveSameDataSourceItem: function (globalFilter1, globalFilter2) {
		var dsItem1 = null;
		var dsItem2 = null;
		if ($.ig.util.cast($.ig.TabularGlobalFilter.prototype.$type, globalFilter1) !== null && $.ig.util.cast($.ig.TabularGlobalFilter.prototype.$type, globalFilter2) !== null) {
			dsItem1 = (globalFilter1).dataSpec().dataSourceItem();
			dsItem2 = (globalFilter2).dataSpec().dataSourceItem();
		} else if ($.ig.util.cast($.ig.XmlaGlobalFilter.prototype.$type, globalFilter1) !== null && $.ig.util.cast($.ig.XmlaGlobalFilter.prototype.$type, globalFilter2) !== null) {
			dsItem1 = (globalFilter1).dataSourceItem();
			dsItem2 = (globalFilter2).dataSourceItem();
		}
		if (dsItem1 == null || dsItem2 == null) {
			return false;
		}
		var uniqueId1 = $.ig.DashboardModelUtils.prototype.getUniqueDataSourceItemIdentifier(dsItem1);
		var uniqueId2 = $.ig.DashboardModelUtils.prototype.getUniqueDataSourceItemIdentifier(dsItem2);
		return uniqueId1 == uniqueId2;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GlobalFiltersHaveSameDataSourceItem(Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	getUniqueDataSourceIdentifier: function (ds) {
		var s = "provider=" + ds.provider();
		s = s + "&properties=" + $.ig.DashboardModelUtils.prototype.getUniqueIdentifierForDictionary(ds.properties());
		return s;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceItemIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	getUniqueDataSourceItemIdentifier: function (dsItem) {
		return $.ig.DashboardModelUtils.prototype.getUniqueDataSourceItemIdentifier1(dsItem, false);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceItemIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceItemIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Boolean)" />*/
	getUniqueDataSourceItemIdentifier1: function (dsItem, skipParameters) {
		var s = "";
		if (dsItem != null && dsItem.id() != null) {
			if (dsItem.dataSourceId() != "__LOCAL") {
				s = s + "id=";
				s = s + dsItem.id();
			}
			if (dsItem.dataSourceId() != null) {
				s = s + "&dsId=";
				s = s + dsItem.dataSourceId();
			}
			s = s + "&properties=" + $.ig.DashboardModelUtils.prototype.getUniqueIdentifierForDictionary(dsItem.properties());
			if (!skipParameters) {
				s = s + "&parameters=" + $.ig.DashboardModelUtils.prototype.getUniqueIdentifierForDictionary(dsItem.parameters());
			}
			if (dsItem.resourceItem() != null) {
				s = s + "&resourceItem=" + $.ig.DashboardModelUtils.prototype.getUniqueDataSourceItemIdentifier(dsItem.resourceItem());
			}
		}
		return s;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueDataSourceItemIdentifier(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetIndexForColumnName(Infragistics.ReportPlus.DataLayer.IDataTableResult, System.String)" />*/
	getIndexForColumnName: function (data, columnName) {
		if (data == null || data.table() == null) {
			return -1;
		}
		var columns = data.table().columns();
		var columnCount = columns.length;
		for (var c = 0; c < columnCount; c++) {
			var column = columns[c];
			if (column.name() != null && column.name() == columnName) {
				return c;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetIndexForColumnName(Infragistics.ReportPlus.DataLayer.IDataTableResult, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardModel Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDashboardForAssetVisualization(Infragistics.ReportPlus.DataLayer.IDataTableResult, Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	getDashboardForAssetVisualization: function (data, widget) {
		if (data == null || data.table() == null) {
			return null;
		}
		var urlColumnName;
		if ($.ig.util.cast($.ig.AssetVisualizationDataSpec.prototype.$type, widget.visualizationDataSpec()) !== null) {
			var urlCol = (widget.visualizationDataSpec()).urlColumn();
			urlColumnName = urlCol == null ? null : urlCol.fieldName();
			if (urlColumnName == null) {
				return null;
			}
		} else {
			var assetSettings = widget.visualizationSettings();
			urlColumnName = assetSettings.urlColumn();
		}
		var urlColumn = urlColumnName == null ? -1 : $.ig.DashboardModelUtils.prototype.getIndexForColumnName(data, urlColumnName);
		if (urlColumn == -1) {
			urlColumn = $.ig.DashboardModelUtils.prototype.getUrlColumnIndex(data);
		}
		if (urlColumn != -1 && data.table().rowCount() > 0) {
			var url = data.table().getFormattedValue(0, urlColumn);
			if (url != null && url != "") {
				var ds = new $.ig.DataSource(0);
				ds.id(widget.id());
				ds.provider("WEBSERVICE");
				ds.properties().setObjectValue("Url", url);
				ds.properties().setBoolValue($.ig.EngineConstants.prototype.useAnonymousAuthentication, true);
				var resourceItem = new $.ig.DataSourceItem(0);
				resourceItem.dataSourceId(ds.id());
				resourceItem.properties().setObjectValue("Url", url);
				var assetWidget = new $.ig.Widget(0);
				assetWidget.id(widget.id());
				assetWidget.dataSpec(new $.ig.ResourceDataSpec(0));
				assetWidget.dataSpec().dataSourceItem(resourceItem);
				var dashboard = new $.ig.DashboardModel(0);
				dashboard.dataSources().add(ds);
				dashboard.widgets().add(assetWidget);
				return dashboard;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardModel Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDashboardForAssetVisualization(Infragistics.ReportPlus.DataLayer.IDataTableResult, Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUrlColumnIndex(Infragistics.ReportPlus.DataLayer.IDataTableResult)" />*/
	getUrlColumnIndex: function (data) {
		var columnsFound = 0;
		var columnIndex = -1;
		var columns = data.table().columns();
		var columnCount = columns.length;
		for (var i = 0; i < columnCount; i++) {
			var columnName = (columns[i]).name().toLowerCase();
			if ($.ig.NativeStringUtility.prototype.startsWith(columnName, "url") || $.ig.NativeStringUtility.prototype.endsWith(columnName, "url")) {
				columnsFound++;
				columnIndex = i;
			}
		}
		if (columnsFound == 1) {
			return columnIndex;
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUrlColumnIndex(Infragistics.ReportPlus.DataLayer.IDataTableResult)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueIdentifierForDictionary(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	getUniqueIdentifierForDictionary: function (dictionary) {
		if (dictionary == null) {
			return "";
		}
		var allKeys = dictionary.getAllKeys();
		$.ig.NativeDataLayerUtility.prototype.sortStringList(allKeys);
		var keyCount = allKeys.length;
		var s = "";
		for (var k = 0; k < keyCount; k++) {
			var key = allKeys[k];
			var value = dictionary.getObjectValue(key);
			if (value != null) {
				s = s + "&";
				s = s + key;
				s = s + "=";
				s = s + value.toString();
			}
		}
		return s;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueIdentifierForDictionary(Infragistics.ReportPlus.DataLayer.NativeTypedDictionary)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueIdentifierForJsonObject(Infragistics.CPJSONObject)" />*/
	getUniqueIdentifierForJsonObject: function (json) {
		if (json == null) {
			return "";
		}
		var s = "";
		var allKeys = $.ig.NativeSortUtility.prototype.sortListAlpha(new $.ig.CPObjectSortConverter(function (o) {
			return o;
		}, null, null), json.getKeys(), true);
		var keyCount = allKeys.length;
		for (var i = 0; i < keyCount; i++) {
			var key = allKeys[i];
			var value = json.resolveObjectForKey(key);
			if (value != null) {
				if (i > 0) {
					s = s + "&";
				}
				s = s + key;
				s = s + "=";
				if ($.ig.util.cast($.ig.Array.prototype.$type, value) !== null) {
					var valuesList = value;
					for (var j = 0; j < valuesList.length; j++) {
						s = s + valuesList[0].toString();
						if (j < valuesList.length - 1) {
							s = s + ",";
						}
					}
				} else {
					s = s + value.toString();
				}
			}
		}
		return s;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetUniqueIdentifierForJsonObject(Infragistics.CPJSONObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateSummarizationField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createSummarizationField: function (field) {
		switch (field.fieldType()) {
			case $.ig.DashboardDataType.prototype.date:
			case $.ig.DashboardDataType.prototype.dateTime:
				var dateField = new $.ig.SummarizationDateField(0);
				dateField.fieldName(field.fieldName());
				dateField.dateAggregationType($.ig.DashboardDateAggregationType.prototype.year);
				return dateField;
			case $.ig.DashboardDataType.prototype.time:
				var timeField = new $.ig.SummarizationDateField(0);
				timeField.fieldName(field.fieldName());
				timeField.dateAggregationType($.ig.DashboardDateAggregationType.prototype.hour);
				return timeField;
			default:
				var summField = new $.ig.SummarizationRegularField(0);
				summField.fieldName(field.fieldName());
				return summField;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateSummarizationField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateSummarizationValueField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	createSummarizationValueField: function (field) {
		var sumField = new $.ig.SummarizationValueField(0);
		sumField.fieldName(field.fieldName());
		sumField.fieldLabel(field.fieldLabel() != null ? field.fieldLabel() : field.fieldName());
		sumField.aggregationType(field.fieldType() == $.ig.DashboardDataType.prototype.number ? $.ig.DashboardAggregationType.prototype.sum : $.ig.DashboardAggregationType.prototype.countRows);
		if (field.fieldType() != $.ig.DashboardDataType.prototype.number) {
			sumField.formatting($.ig.DashboardModelUtils.prototype.getDefaultFormattingSpec($.ig.DashboardDataType.prototype.number));
			(sumField.formatting()).decimalDigits(0);
		}
		return sumField;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.SummarizationValueField Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateSummarizationValueField(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSourceFromList(System.Collections.ArrayList, System.String)" />*/
	getDataSourceFromList1: function (dataSources, dsId) {
		if (dataSources == null) {
			return null;
		}
		var dsCount = dataSources.length;
		for (var i = 0; i < dsCount; i++) {
			var ds = dataSources[i];
			if (ds.id() == dsId) {
				return ds;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDataSourceFromList(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateLocalDataSource()" />*/
	createLocalDataSource: function () {
		var ds = new $.ig.DataSource(0);
		ds.id($.ig.ProviderKeys.prototype.localDataKey);
		ds.provider($.ig.ProviderKeys.prototype.localFileProviderKey);
		return ds;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateLocalDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCsvDataSource()" />*/
	createCsvDataSource: function () {
		var ds = new $.ig.DataSource(0);
		ds.id($.ig.ProviderKeys.prototype.cSVDataSourceKey);
		ds.provider($.ig.ProviderKeys.prototype.cSVProviderKey);
		return ds;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateCsvDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateGoogleSheetDataSource()" />*/
	createGoogleSheetDataSource: function () {
		var ds = new $.ig.DataSource(0);
		ds.id($.ig.ProviderKeys.prototype.googleSheetDataSourceKey);
		ds.provider($.ig.ProviderKeys.prototype.googleSheetProviderKey);
		return ds;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateGoogleSheetDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateExcelDataSource()" />*/
	createExcelDataSource: function () {
		var ds = new $.ig.DataSource(0);
		ds.id($.ig.ProviderKeys.prototype.excelDataSourceKey);
		ds.provider($.ig.ProviderKeys.prototype.excelProviderKey);
		return ds;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateExcelDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateInMemoryDataSource()" />*/
	createInMemoryDataSource: function () {
		var ds = new $.ig.DataSource(0);
		ds.id($.ig.ProviderKeys.prototype.inMemoryDataSourceKey);
		ds.provider($.ig.ProviderKeys.prototype.inMemoryProviderKey);
		return ds;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DataSource Infragistics.ReportPlus.DataLayer.DashboardModelUtils::CreateInMemoryDataSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetField(System.Collections.ArrayList, System.String)" />*/
	getField: function (fields, name) {
		if (fields == null || fields.length == 0) {
			return null;
		}
		for (var i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field.fieldName() != null && field.fieldName() == name) {
				return field;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.Field Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetField(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldsByDataType(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getFieldsByDataType: function (fields, dataType) {
		var result = new $.ig.Array();
		if (fields == null || fields.length == 0) {
			return result;
		}
		for (var i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field.fieldType() == dataType) {
				result.add(field);
			}
		}
		return result;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldsByDataType(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetActiveFields(Infragistics.ReportPlus.DashboardModel.TabularDataSpec)" />*/
	getActiveFields: function (tabularSpec) {
		return tabularSpec.isTransposed() ? tabularSpec.transposedFields() : tabularSpec.fields();
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetActiveFields(Infragistics.ReportPlus.DashboardModel.TabularDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ReplaceBindings(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.Binding, Infragistics.ReportPlus.DashboardModel.Binding)" />*/
	replaceBindings: function (bindings, filter, binding, secondaryBinding) {
		var newBindings = $.ig.DashboardModelUtils.prototype.getBindingsExcludingFilter(bindings, filter);
		if (binding != null) {
			newBindings.add(binding);
		}
		if (secondaryBinding != null) {
			newBindings.add(secondaryBinding);
		}
		return newBindings;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ReplaceBindings(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter, Infragistics.ReportPlus.DashboardModel.Binding, Infragistics.ReportPlus.DashboardModel.Binding)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetBindingsExcludingFilter(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	getBindingsExcludingFilter: function (bindings, filter) {
		var newBindings = new $.ig.Array();
		var bindingCount = bindings.length;
		for (var i = 0; i < bindingCount; i++) {
			var b = bindings[i];
			if ($.ig.util.cast($.ig.DataBasedGlobalFilterBindingTarget.prototype.$type, b.target()) !== null) {
				var filterId = (b.target()).globalFilterId();
				if (filterId != null && filterId == filter.id()) {
					continue;
				}
			} else if ($.ig.util.cast($.ig.DateGlobalFilterBindingTarget.prototype.$type, b.target()) !== null) {
				if ($.ig.util.cast($.ig.DateGlobalFilter.prototype.$type, filter) !== null) {
					continue;
				}
			}
			newBindings.add(b);
		}
		return newBindings;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetBindingsExcludingFilter(System.Collections.ArrayList, Infragistics.ReportPlus.DashboardModel.GlobalFilter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDateBasedDataType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	isDateBasedDataType: function (type) {
		return type == $.ig.DashboardDataType.prototype.date || type == $.ig.DashboardDataType.prototype.dateTime || type == $.ig.DashboardDataType.prototype.time;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsDateBasedDataType(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ApplyNewTabularFields(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.Collections.ArrayList)" />*/
	applyNewTabularFields: function (dataSpec, newFields) {
		var oldFields = dataSpec.fields();
		var newSpecFields = new $.ig.Array();
		var newFieldCount = newFields.length;
		var addedFields = new $.ig.Array();
		for (var i = 0; i < newFieldCount; i++) {
			var newField = newFields[i];
			var oldField = $.ig.DashboardModelUtils.prototype.getField(oldFields, newField.fieldName());
			var toAddField = (oldField != null && oldField.fieldType() == newField.fieldType()) ? oldField : newField;
			if (toAddField == oldField) {
				toAddField.properties(newField.properties());
			}
			newSpecFields.add(toAddField);
			addedFields.add(toAddField.fieldName());
		}
		var specFields = dataSpec.fields();
		var specFieldCount = specFields.length;
		for (var i1 = 0; i1 < specFieldCount; i1++) {
			var field = specFields[i1];
			if (!addedFields.contains(field.fieldName()) && (field.isCalculated() || $.ig.DashboardModelUtils.prototype.isBlendedField(field))) {
				newSpecFields.add(field);
			}
		}
		dataSpec.fields(newSpecFields);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ApplyNewTabularFields(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsPostTransformationAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	isPostTransformationAvailable: function (widget, dataTable) {
		if (widget == null || dataTable == null || dataTable.rowCount() == 0) {
			return false;
		}
		if (widget.visualizationDataSpec() == null || widget.visualizationDataSpec().isEmpty()) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsPostTransformationAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNumberOfOutputDimensionColumns(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec)" />*/
	getNumberOfOutputDimensionColumns: function (hs) {
		var rowCount = hs.rows().length;
		var adhocFields = $.ig.NativeDataLayerUtility.prototype.isNullInt(hs.adHocFields()) ? 0 : Math.min(rowCount, $.ig.NativeDataLayerUtility.prototype.unwrapInt(hs.adHocFields()));
		if (adhocFields > 1) {
			return rowCount + 1 - adhocFields;
		}
		return rowCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetNumberOfOutputDimensionColumns(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsForecastingAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	isForecastingAvailable: function (widget, dataTable) {
		if (!$.ig.DashboardModelUtils.prototype.isPostTransformationAvailable(widget, dataTable)) {
			return false;
		}
		if ($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, widget.visualizationDataSpec()) !== null) {
			var hs = widget.visualizationDataSpec();
			if (hs.rows() == null || $.ig.DashboardModelUtils.prototype.getNumberOfOutputDimensionColumns(hs) != 1) {
				return false;
			}
			var rowSpec = hs.rows()[0];
			var rowSpecType = rowSpec.type();
			if (rowSpecType == $.ig.DashboardDataType.prototype.number || rowSpecType == $.ig.DashboardDataType.prototype.string1) {
				return false;
			}
			if (rowSpec.sorting() == $.ig.DashboardSortingType.prototype.desc || rowSpec.sortByField() != null) {
				return false;
			}
			var measures = hs.getAllMeasureColumns();
			if (measures == null || measures.length == 0) {
				return false;
			}
			return true;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsForecastingAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsForecastingSupportedByData(Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	isForecastingSupportedByData: function (dataTable) {
		if (dataTable == null) {
			return false;
		}
		var rowCount = dataTable.rowCount();
		if (dataTable.hasTotalsRow()) {
			rowCount--;
		}
		return rowCount >= 8;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsForecastingSupportedByData(Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLinearRegressionAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	isLinearRegressionAvailable: function (widget, dataTable) {
		if (!$.ig.DashboardModelUtils.prototype.isPostTransformationAvailable(widget, dataTable)) {
			return false;
		}
		if ($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, widget.visualizationDataSpec()) !== null) {
			var hs = widget.visualizationDataSpec();
			if ($.ig.DashboardModelUtils.prototype.getDimensionColumnCount(hs) != 1) {
				return false;
			}
			var measures = hs.getAllMeasureColumns();
			if (measures == null || measures.length == 0) {
				return false;
			}
			return true;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsLinearRegressionAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDimensionColumnCount(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec)" />*/
	getDimensionColumnCount: function (spec) {
		if (spec == null || spec.rows().length == 0) {
			return 0;
		}
		var hierarchySize;
		if ($.ig.NativeDataLayerUtility.prototype.isNullInt(spec.adHocFields())) {
			hierarchySize = 1;
		} else {
			var adHocFields = Math.max(1, $.ig.NativeDataLayerUtility.prototype.unwrapInt(spec.adHocFields()));
			hierarchySize = Math.min(spec.rows().length, adHocFields);
		}
		return spec.rows().length - hierarchySize + 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDimensionColumnCount(Infragistics.ReportPlus.DashboardModel.HierarchyVisualizationDataSpec)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsOutliersAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	isOutliersAvailable: function (widget, dataTable) {
		if (!$.ig.DashboardModelUtils.prototype.isPostTransformationAvailable(widget, dataTable)) {
			return false;
		}
		if ($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, widget.visualizationDataSpec()) !== null) {
			var hs = widget.visualizationDataSpec();
			if ($.ig.DashboardModelUtils.prototype.getDimensionColumnCount(hs) != 1) {
				return false;
			}
			var measures = hs.getAllMeasureColumns();
			if (measures == null || measures.length == 0) {
				return false;
			}
			return true;
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsOutliersAvailable(Infragistics.ReportPlus.DashboardModel.Widget, Infragistics.ReportPlus.DataLayer.IDataTable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsPreTransformationEnabled(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	isPreTransformationEnabled: function (widget) {
		var dataSpec = widget.dataSpec();
		if ($.ig.util.cast($.ig.TabularDataSpec.prototype.$type, dataSpec) !== null) {
			var ts = dataSpec;
			return ts.serviceAdditionalTables() != null && ts.serviceAdditionalTables().length > 0;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsPreTransformationEnabled(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldsExcludingAlias(System.Collections.ArrayList, System.String)" />*/
	getFieldsExcludingAlias: function (fields, alias) {
		var newFields = new $.ig.Array();
		var count = fields.length;
		for (var i = 0; i < count; i++) {
			var field = fields[i];
			var fieldAlias = field.tableAlias();
			if ((alias == null && fieldAlias == null) || (alias != null && fieldAlias != null && alias.equals(fieldAlias))) {
				continue;
			}
			newFields.add(field);
		}
		return newFields;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetFieldsExcludingAlias(System.Collections.ArrayList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsScriptingWidget(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	isScriptingWidget: function (w) {
		return $.ig.util.cast($.ig.ScriptVisualizationSettings.prototype.$type, w.visualizationSettings()) !== null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.DashboardModelUtils::IsScriptingWidget(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPath(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	getDrillDownPath: function (w) {
		if (w == null || w.visualizationDataSpec() == null) {
			return "";
		}
		var vizSpec = w.visualizationDataSpec();
		if (!($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, vizSpec) !== null)) {
			return "";
		}
		var rows = (vizSpec).rows();
		if (rows == null || rows.length == 0) {
			return "";
		}
		var dimField = rows[0];
		if (dimField.xmlaElement() != null) {
			return $.ig.DashboardModelUtils.prototype.getDrillDownPathXmla(dimField.xmlaElement());
		} else if (dimField.summarizationField() != null) {
			return $.ig.DashboardModelUtils.prototype.getDrillDownPathTabular(dimField.summarizationField());
		} else {
			return "";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPath(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathElement(System.String)" />*/
	getDrillDownPathElement: function (label) {
		return label == null ? "_null_" : label;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathElement(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCurrentDrillDownLevel(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	getCurrentDrillDownLevel: function (widget) {
		if (widget == null || widget.visualizationDataSpec() == null) {
			return 0;
		}
		var spec = widget.visualizationDataSpec();
		if ($.ig.util.cast($.ig.HierarchyVisualizationDataSpec.prototype.$type, spec) !== null) {
			var hSpec = spec;
			if (hSpec.rows() != null && hSpec.rows().length > 0) {
				var colSpec = hSpec.rows()[0];
				if (colSpec.xmlaElement() != null) {
					return colSpec.xmlaElement().drillDownMembers() == null ? 0 : colSpec.xmlaElement().drillDownMembers().length;
				} else if (colSpec.summarizationField() != null) {
					return colSpec.summarizationField().drillDownElements() == null ? 0 : colSpec.summarizationField().drillDownElements().length;
				}
			}
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetCurrentDrillDownLevel(Infragistics.ReportPlus.DashboardModel.Widget)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ApplySpecialDateFormatting(System.DateTime, System.String)" />*/
	applySpecialDateFormatting: function (value, dateFormat) {
		dateFormat = $.ig.DashboardModelUtils.prototype.processSpecialDateFormatting(dateFormat, value);
		return $.ig.NativeDateUtility.prototype.getStringForDate(value, dateFormat, true);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ApplySpecialDateFormatting(System.DateTime, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ProcessSpecialDateFormatting(System.String, System.DateTime)" />*/
	processSpecialDateFormatting: function (dateFormat, value) {
		if (dateFormat.contains("QQ")) {
			var quarterNumber = $.ig.DashboardModelUtils.prototype.getQuarterNumber(value);
			var quarterText = $.ig.NativeDataLayerLocalizeUtil.prototype.localize1("QuarterShortText", $.ig.NativeDataLayerUtility.prototype.intToString(quarterNumber));
			dateFormat = $.ig.util.replace(dateFormat, "QQ", "'" + quarterText + "'");
		}
		if (dateFormat.contains("WW")) {
			var semesterNumber = $.ig.DashboardModelUtils.prototype.getSemesterNumber(value);
			var semesterText = $.ig.NativeDataLayerLocalizeUtil.prototype.localize1("SemesterShortText", $.ig.NativeDataLayerUtility.prototype.intToString(semesterNumber));
			dateFormat = $.ig.util.replace(dateFormat, "WW", "'" + semesterText + "'");
		}
		return dateFormat;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::ProcessSpecialDateFormatting(System.String, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetQuarterNumber(System.DateTime)" />*/
	getQuarterNumber: function (value) {
		return ($.ig.intDivide(($.ig.NativeDateUtility.prototype.getMonthForDate(value, true) - 1), 3)) + 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetQuarterNumber(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSemesterNumber(System.DateTime)" />*/
	getSemesterNumber: function (value) {
		return ($.ig.intDivide(($.ig.NativeDateUtility.prototype.getMonthForDate(value, true) - 1), 6)) + 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetSemesterNumber(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathXmla(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	getDrillDownPathXmla: function (xmlaElement) {
		var dm = xmlaElement.drillDownMembers();
		if (dm == null || dm.length == 0) {
			return "";
		}
		var count = dm.length;
		var path = "";
		for (var i = 0; i < count; i++) {
			if (i > 0) {
				path = path + "_";
			}
			path = path + $.ig.DashboardModelUtils.prototype.getDrillDownPathElement((dm[i]).caption());
		}
		return path;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathXmla(Infragistics.ReportPlus.DashboardModel.XmlaDimensionElement)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathTabular(Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	getDrillDownPathTabular: function (sf) {
		var de = sf.drillDownElements();
		if (de == null || de.length == 0) {
			return "";
		}
		var path = "";
		var count = de.length;
		for (var i = 0; i < count; i++) {
			if (i > 0) {
				path = path + "_";
			}
			path = path + $.ig.DashboardModelUtils.prototype.getDrillDownPathElement(de[i]);
		}
		return path;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.DashboardModelUtils::GetDrillDownPathTabular(Infragistics.ReportPlus.DashboardModel.SummarizationDimensionField)" />*/
	,
	$type: new $.ig.Type('DashboardModelUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.DashboardModelUtils" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase" />*/

$.ig.util.defType('FormattingDefaultSettingsBase', 'Object', {
	_defaultDecimalPlaces: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDecimalPlaces()" />*/
	defaultDecimalPlaces: function (value) {
		if (arguments.length === 1) {
			this._defaultDecimalPlaces = value;
			return value;
		} else {
			return this._defaultDecimalPlaces;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDecimalPlaces()" />*/
	,
	_defaultGroupingSeparator: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultGroupingSeparator()" />*/
	defaultGroupingSeparator: function (value) {
		if (arguments.length === 1) {
			this._defaultGroupingSeparator = value;
			return value;
		} else {
			return this._defaultGroupingSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultGroupingSeparator()" />*/
	,
	_defaultCurrencySymbol: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultCurrencySymbol()" />*/
	defaultCurrencySymbol: function (value) {
		if (arguments.length === 1) {
			this._defaultCurrencySymbol = value;
			return value;
		} else {
			return this._defaultCurrencySymbol;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultCurrencySymbol()" />*/
	,
	_defaultMkFormat: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultMkFormat()" />*/
	defaultMkFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultMkFormat = value;
			return value;
		} else {
			return this._defaultMkFormat;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultMkFormat()" />*/
	,
	_defaultDateFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDateFormat()" />*/
	defaultDateFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultDateFormat = value;
			return value;
		} else {
			return this._defaultDateFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDateFormat()" />*/
	,
	_defaultDateTimeFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDateTimeFormat()" />*/
	defaultDateTimeFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultDateTimeFormat = value;
			return value;
		} else {
			return this._defaultDateTimeFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultDateTimeFormat()" />*/
	,
	_defaultTimeFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultTimeFormat()" />*/
	defaultTimeFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultTimeFormat = value;
			return value;
		} else {
			return this._defaultTimeFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultTimeFormat()" />*/
	,
	_defaultAggregationYearFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationYearFormat()" />*/
	defaultAggregationYearFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationYearFormat = value;
			return value;
		} else {
			return this._defaultAggregationYearFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationYearFormat()" />*/
	,
	_defaultAggregationSemesterFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationSemesterFormat()" />*/
	defaultAggregationSemesterFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationSemesterFormat = value;
			return value;
		} else {
			return this._defaultAggregationSemesterFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationSemesterFormat()" />*/
	,
	_defaultAggregationQuarterFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationQuarterFormat()" />*/
	defaultAggregationQuarterFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationQuarterFormat = value;
			return value;
		} else {
			return this._defaultAggregationQuarterFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationQuarterFormat()" />*/
	,
	_defaultAggregationMonthFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationMonthFormat()" />*/
	defaultAggregationMonthFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationMonthFormat = value;
			return value;
		} else {
			return this._defaultAggregationMonthFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationMonthFormat()" />*/
	,
	_defaultAggregationDayFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationDayFormat()" />*/
	defaultAggregationDayFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationDayFormat = value;
			return value;
		} else {
			return this._defaultAggregationDayFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationDayFormat()" />*/
	,
	_defaultAggregationHourFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationHourFormat()" />*/
	defaultAggregationHourFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationHourFormat = value;
			return value;
		} else {
			return this._defaultAggregationHourFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationHourFormat()" />*/
	,
	_defaultAggregationMinuteFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationMinuteFormat()" />*/
	defaultAggregationMinuteFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationMinuteFormat = value;
			return value;
		} else {
			return this._defaultAggregationMinuteFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationMinuteFormat()" />*/
	,
	_defaultAggregationTimeHourFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationTimeHourFormat()" />*/
	defaultAggregationTimeHourFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationTimeHourFormat = value;
			return value;
		} else {
			return this._defaultAggregationTimeHourFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationTimeHourFormat()" />*/
	,
	_defaultAggregationTimeMinuteFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationTimeMinuteFormat()" />*/
	defaultAggregationTimeMinuteFormat: function (value) {
		if (arguments.length === 1) {
			this._defaultAggregationTimeMinuteFormat = value;
			return value;
		} else {
			return this._defaultAggregationTimeMinuteFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::DefaultAggregationTimeMinuteFormat()" />*/
	,
	__timeFormats: null,
	__dateFormats: null,
	__dateTimeFormats: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.initDefaultFormatters();
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::InitDefaultFormatters()" />*/
	initDefaultFormatters: function () {
		this.__timeFormats = new $.ig.Array();
		this.__timeFormats.add("HH");
		this.__timeFormats.add("HH:mm");
		this.__timeFormats.add("HH:mm:ss");
		this.__timeFormats.add("hh tt");
		this.__timeFormats.add("hh:mm tt");
		this.__timeFormats.add("hh:mm:ss tt");
		this.__timeFormats.add("tt h:mm");
		this.__timeFormats.add("tt hh:mm");
		this.__dateFormats = new $.ig.Array();
		this.__dateFormats.add("dd-MMM-yyyy");
		this.__dateFormats.add("dd-MMM-yy");
		this.__dateFormats.add("dd-MMM");
		this.__dateFormats.add("MM/dd/yyyy");
		this.__dateFormats.add("MM/dd/yy");
		this.__dateFormats.add("dd/MM/yyyy");
		this.__dateFormats.add("dd/MM/yy");
		this.__dateFormats.add("MMM-dd");
		this.__dateFormats.add("MMMM-dd");
		this.__dateFormats.add("MMMM dd, yyyy");
		this.__dateFormats.add("yyyy/MM/dd");
		this.__dateFormats.add("yy/MM/dd");
		this.__dateFormats.add("yy/M/d");
		this.__dateFormats.add("yyyy/M/d");
		this.__dateFormats.add("yyyy-MM-dd");
		this.__dateFormats.add("yyyy'年'M'月'd'日'");
		this.__dateFormats.add("yyyy'年'MM'月'dd'日'");
		this.__dateFormats.add("yyyy'年'M'月'd'日' dddd");
		this.__dateTimeFormats = new $.ig.Array();
		this.__dateTimeFormats.add("dd-MMM-yyyy");
		this.__dateTimeFormats.add("dd-MMM-yy");
		this.__dateTimeFormats.add("dd-MMM");
		this.__dateTimeFormats.add("MM/dd/yyyy");
		this.__dateTimeFormats.add("MM/dd/yy");
		this.__dateTimeFormats.add("dd/MM/yyyy");
		this.__dateTimeFormats.add("dd/MM/yy");
		this.__dateTimeFormats.add("MMM-dd");
		this.__dateTimeFormats.add("MMMM-dd");
		this.__dateTimeFormats.add("MMMM dd, yyyy");
		this.__dateTimeFormats.add("yyyy/MM/dd");
		this.__dateTimeFormats.add("yy/MM/dd");
		this.__dateTimeFormats.add("yy/M/d");
		this.__dateTimeFormats.add("yyyy/M/d");
		this.__dateTimeFormats.add("yyyy-MM-dd");
		this.__dateTimeFormats.add("yyyy'年'M'月'd'日'");
		this.__dateTimeFormats.add("yyyy'年'MM'月'dd'日'");
		this.__dateTimeFormats.add("yyyy'年'M'月'd'日' dddd");
		this.__dateTimeFormats.add("dd-MMM-yyyy HH:mm:ss");
		this.__dateTimeFormats.add("dd-MMM-yyyy HH:mm");
		this.__dateTimeFormats.add("dd-MMM-yy HH:mm:ss");
		this.__dateTimeFormats.add("dd-MMM HH:mm:ss");
		this.__dateTimeFormats.add("MM/dd/yyyy HH:mm:ss");
		this.__dateTimeFormats.add("MM/dd/yy HH:mm:ss");
		this.__dateTimeFormats.add("dd/MM/yyyy HH:mm:ss");
		this.__dateTimeFormats.add("dd/MM/yy HH:mm:ss");
		this.__dateTimeFormats.add("MMM-dd HH:mm:ss");
		this.__dateTimeFormats.add("MMMM-dd HH:mm:ss");
		this.__dateTimeFormats.add("MMMM dd, yyyy HH:mm:ss");
		this.__dateTimeFormats.add("HH");
		this.__dateTimeFormats.add("HH:mm");
		this.__dateTimeFormats.add("HH:mm:ss");
		this.__dateTimeFormats.add("hh tt");
		this.__dateTimeFormats.add("hh:mm tt");
		this.__dateTimeFormats.add("hh:mm:ss tt");
		this.__dateTimeFormats.add("tt h:mm");
		this.__dateTimeFormats.add("tt hh:mm");
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::InitDefaultFormatters()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::Update()" />*/
	update: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::Update()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getDefaultDateFormat: function (type) {
		switch (type) {
			case $.ig.DashboardDataType.prototype.dateTime: return this.defaultDateTimeFormat();
			case $.ig.DashboardDataType.prototype.time: return this.defaultTimeFormat();
			default: return this.defaultDateFormat();
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getDefaultDateAggregationFormat: function (type, aggregation) {
		switch (aggregation) {
			case $.ig.DashboardDateAggregationType.prototype.year: return this.defaultAggregationYearFormat();
			case $.ig.DashboardDateAggregationType.prototype.semester: return this.defaultAggregationSemesterFormat();
			case $.ig.DashboardDateAggregationType.prototype.quarter: return this.defaultAggregationQuarterFormat();
			case $.ig.DashboardDateAggregationType.prototype.month: return this.defaultAggregationMonthFormat();
			case $.ig.DashboardDateAggregationType.prototype.day: return this.defaultAggregationDayFormat();
			case $.ig.DashboardDateAggregationType.prototype.hour: return type == $.ig.DashboardDataType.prototype.time ? this.defaultAggregationTimeHourFormat() : this.defaultAggregationHourFormat();
			case $.ig.DashboardDateAggregationType.prototype.minute: return type == $.ig.DashboardDataType.prototype.time ? this.defaultAggregationTimeMinuteFormat() : this.defaultAggregationMinuteFormat();
			default: return this.defaultDateTimeFormat();
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getDefaultFormattingSpec: function (type) {
		switch (type) {
			case $.ig.DashboardDataType.prototype.number:
				var nf = new $.ig.NumberFormattingSpec(0);
				nf.formatType($.ig.DashboardNumberFormattingType.prototype.number);
				nf.decimalDigits(this.defaultDecimalPlaces());
				nf.currencySymbol(this.defaultCurrencySymbol());
				nf.applyMkFormat(this.defaultMkFormat());
				nf.showGroupingSeparator(this.defaultGroupingSeparator());
				return nf;
			case $.ig.DashboardDataType.prototype.date:
			case $.ig.DashboardDataType.prototype.dateTime:
			case $.ig.DashboardDataType.prototype.time:
				var df = new $.ig.DateFormattingSpec(0);
				df.dateFormat(this.getDefaultDateFormat(type));
				return df;
			default: return null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getDefaultDateAggregationFormattingSpec: function (type, aggregation) {
		var df = new $.ig.DateFormattingSpec(0);
		df.dateFormat(this.getDefaultDateAggregationFormat(type, aggregation));
		return df;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormattingSpec(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormattingSpecForStandardHierarchy(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getDefaultDateAggregationFormattingSpecForStandardHierarchy: function (type, aggregation) {
		var df = new $.ig.DateFormattingSpec(0);
		switch (aggregation) {
			case $.ig.DashboardDateAggregationType.prototype.month:
				df.dateFormat("MMM");
				break;
			case $.ig.DashboardDateAggregationType.prototype.day:
				df.dateFormat("dd");
				break;
			case $.ig.DashboardDateAggregationType.prototype.hour:
				df.dateFormat("HH");
				break;
			case $.ig.DashboardDateAggregationType.prototype.minute:
				df.dateFormat("mm");
				break;
			default:
				df.dateFormat(this.getDefaultDateAggregationFormat(type, aggregation));
				break;
		}
		return df;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DateFormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultDateAggregationFormattingSpecForStandardHierarchy(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultsForFormattingSpec(Infragistics.ReportPlus.DashboardModel.FormattingSpec)" />*/
	getDefaultsForFormattingSpec: function (spec) {
		var type = $.ig.DashboardDataType.prototype.string1;
		if (spec != null) {
			if ($.ig.util.cast($.ig.DateFormattingSpec.prototype.$type, spec) !== null) {
				type = $.ig.DashboardDataType.prototype.date;
			} else if ($.ig.util.cast($.ig.NumberFormattingSpec.prototype.$type, spec) !== null) {
				type = $.ig.DashboardDataType.prototype.number;
			}
		}
		return this.getDefaultFormattingSpec(type);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.FormattingSpec Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetDefaultsForFormattingSpec(Infragistics.ReportPlus.DashboardModel.FormattingSpec)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetFieldEditorDefaultDateTimeFormats(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	getFieldEditorDefaultDateTimeFormats: function (type) {
		switch (type) {
			case $.ig.DashboardDataType.prototype.date: return this.__dateFormats;
			case $.ig.DashboardDataType.prototype.time: return this.__timeFormats;
			case $.ig.DashboardDataType.prototype.dateTime: return this.__dateFormats;
			default: return null;
		}
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetFieldEditorDefaultDateTimeFormats(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetFieldEditorDefaultAggregatedDateFormats(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	getFieldEditorDefaultAggregatedDateFormats: function (type, aggregation) {
		var list = new $.ig.Array();
		switch (aggregation) {
			case $.ig.DashboardDateAggregationType.prototype.year:
				list.add("yyyy");
				list.add("yy");
				break;
			case $.ig.DashboardDateAggregationType.prototype.semester:
				list.add("yyyy-WW");
				list.add("yy-WW");
				list.add("WW");
				break;
			case $.ig.DashboardDateAggregationType.prototype.quarter:
				list.add("yyyy-QQ");
				list.add("yy-QQ");
				list.add("QQ");
				break;
			case $.ig.DashboardDateAggregationType.prototype.month:
				list.add("MMM-yyyy");
				list.add("MMM-yy");
				list.add("MM-yyyy");
				list.add("MM-yy");
				list.add("M-yy");
				list.add("MMM");
				list.add("MM");
				list.add("M");
				list.add("yyyy'年'M'月'");
				list.add("yyyy'年'MM'月'");
				break;
			case $.ig.DashboardDateAggregationType.prototype.day:
				list.add("dd-MMM-yyyy");
				list.add("yyyy-MM-dd");
				list.add("MM/dd/yyyy");
				list.add("MM/dd/yy");
				list.add("dd/MM/yyyy");
				list.add("dd/MM/yy");
				list.add("dd-MMM");
				list.add("MMM-dd");
				list.add("MM-dd");
				list.add("dd-MM");
				list.add("yyyy'年'M'月'd'日'");
				list.add("yyyy'年'MM'月'dd'日'");
				list.add("yyyy'年'M'月'd'日' dddd");
				break;
			case $.ig.DashboardDateAggregationType.prototype.hour:
				if (type == $.ig.DashboardDataType.prototype.time) {
					list.add("HH:00");
					list.add("HH");
					list.add("hh:00 tt");
					list.add("hh tt");
					list.add("tt hh:00");
					list.add("tt hh");
				} else {
					list.add("dd-MMM-yyyy HH:00");
					list.add("dd-MMM-yy HH:00");
					list.add("dd-MMM HH:00");
					list.add("MM/dd/yyyy HH:00");
					list.add("MM/dd/yy HH:00");
					list.add("MMM-dd HH:00");
					list.add("MMMM-dd HH:00");
					list.add("MMMM dd, yyyy HH:00");
					list.add("dd-MMM-yyyy HH");
					list.add("dd-MMM-yy HH");
					list.add("dd-MMM HH");
					list.add("MM/dd/yyyy HH");
					list.add("MM/dd/yy HH");
					list.add("MMM-dd HH");
					list.add("MMMM-dd HH");
					list.add("MMMM dd, yyyy HH");
				}
				break;
			case $.ig.DashboardDateAggregationType.prototype.minute:
				if (type == $.ig.DashboardDataType.prototype.time) {
					list.add("HH:mm");
					list.add("hh:mm tt");
					list.add("tt hh:mm");
				} else {
					list.add("dd-MMM-yyyy HH:mm");
					list.add("dd-MMM-yy HH:mm");
					list.add("dd-MMM HH:mm");
					list.add("MM/dd/yyyy HH:mm");
					list.add("MM/dd/yy HH:mm");
					list.add("MMM-dd HH:mm");
					list.add("MMMM-dd HH:mm");
					list.add("MMMM dd, yyyy HH:mm");
				}
				break;
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::GetFieldEditorDefaultAggregatedDateFormats(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::SetDefaultDateFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, System.String)" />*/
	setDefaultDateFormat: function (dataType, val) {
		switch (dataType) {
			case $.ig.DashboardDataType.prototype.dateTime:
				this.defaultDateTimeFormat(val);
				break;
			case $.ig.DashboardDataType.prototype.date:
				this.defaultDateFormat(val);
				break;
			case $.ig.DashboardDataType.prototype.time:
				this.defaultTimeFormat(val);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::SetDefaultDateFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::SetDefaultDateAggregationFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, System.String)" />*/
	setDefaultDateAggregationFormat: function (dataType, dateAggregation, val) {
		switch (dateAggregation) {
			case $.ig.DashboardDateAggregationType.prototype.year:
				this.defaultAggregationYearFormat(val);
				break;
			case $.ig.DashboardDateAggregationType.prototype.semester:
				this.defaultAggregationSemesterFormat(val);
				break;
			case $.ig.DashboardDateAggregationType.prototype.quarter:
				this.defaultAggregationQuarterFormat(val);
				break;
			case $.ig.DashboardDateAggregationType.prototype.month:
				this.defaultAggregationMonthFormat(val);
				break;
			case $.ig.DashboardDateAggregationType.prototype.day:
				this.defaultAggregationDayFormat(val);
				break;
			case $.ig.DashboardDateAggregationType.prototype.hour:
				if (dataType == $.ig.DashboardDataType.prototype.time) {
					this.defaultAggregationTimeHourFormat(val);
				} else {
					this.defaultAggregationHourFormat(val);
				}
				break;
			case $.ig.DashboardDateAggregationType.prototype.minute:
				if (dataType == $.ig.DashboardDataType.prototype.time) {
					this.defaultAggregationTimeMinuteFormat(val);
				} else {
					this.defaultAggregationMinuteFormat(val);
				}
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase::SetDefaultDateAggregationFormat(Infragistics.ReportPlus.DashboardModel.DashboardDataType, Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType, System.String)" />*/
	,
	$type: new $.ig.Type('FormattingDefaultSettingsBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.RevealFormattingDefaultSettings" />*/

$.ig.util.defType('RevealFormattingDefaultSettings', 'FormattingDefaultSettingsBase', {
	init: function () {
		$.ig.FormattingDefaultSettingsBase.prototype.init.call(this);
		this.defaultDecimalPlaces(0);
		this.defaultGroupingSeparator(true);
		this.defaultCurrencySymbol("$");
		this.defaultMkFormat(false);
		this.defaultDateTimeFormat("dd-MMM-yyyy HH:mm");
		this.defaultDateFormat("dd-MMM-yyyy");
		this.defaultTimeFormat("HH:mm:ss");
		this.defaultAggregationYearFormat("yyyy");
		this.defaultAggregationSemesterFormat("yyyy-WW");
		this.defaultAggregationQuarterFormat("yyyy-QQ");
		this.defaultAggregationMonthFormat("MMM-yyyy");
		this.defaultAggregationDayFormat("dd-MMM-yyyy");
		this.defaultAggregationHourFormat("dd-MMM-yyyy HH:00");
		this.defaultAggregationMinuteFormat("dd-MMM-yyyy HH:mm");
		this.defaultAggregationTimeHourFormat("HH:00");
		this.defaultAggregationTimeMinuteFormat("HH:mm");
	},
	$type: new $.ig.Type('RevealFormattingDefaultSettings', $.ig.FormattingDefaultSettingsBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.RevealFormattingDefaultSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings" />*/

$.ig.util.defType('FormattingDefaultSettings', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::UserInstance()" />*/
	userInstance: function () {
		if ($.ig.FormattingDefaultSettings.prototype._sdkInstance != null) {
			return $.ig.FormattingDefaultSettings.prototype._sdkInstance;
		}
		if ($.ig.FormattingDefaultSettings.prototype._userInstance == null) {
			$.ig.FormattingDefaultSettings.prototype._userInstance = new $.ig.RevealFormattingDefaultSettings();
		}
		return $.ig.FormattingDefaultSettings.prototype._userInstance;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::UserInstance()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::AppInstance()" />*/
	appInstance: function () {
		if ($.ig.FormattingDefaultSettings.prototype._sdkInstance != null) {
			return $.ig.FormattingDefaultSettings.prototype._sdkInstance;
		}
		if ($.ig.FormattingDefaultSettings.prototype._appInstance == null) {
			$.ig.FormattingDefaultSettings.prototype._appInstance = new $.ig.RevealFormattingDefaultSettings();
		}
		return $.ig.FormattingDefaultSettings.prototype._appInstance;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::AppInstance()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::SetInstance(Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase)" />*/
	setInstance: function (fs) {
		$.ig.FormattingDefaultSettings.prototype._userInstance = fs;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::SetInstance(Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::SetSdkInstance(Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase)" />*/
	setSdkInstance: function (fs) {
		$.ig.FormattingDefaultSettings.prototype._sdkInstance = fs;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings::SetSdkInstance(Infragistics.ReportPlus.DataLayer.FormattingDefaultSettingsBase)" />*/
	,
	$type: new $.ig.Type('FormattingDefaultSettings', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem" />*/

$.ig.util.defType('MetadataItem', 'Object', {
	_expiration: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Expiration()" />*/
	expiration: function (value) {
		if (arguments.length === 1) {
			this._expiration = value;
			return value;
		} else {
			return this._expiration;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Expiration()" />*/
	,
	_allowAccess: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::AllowAccess()" />*/
	allowAccess: function (value) {
		if (arguments.length === 1) {
			this._allowAccess = value;
			return value;
		} else {
			return this._allowAccess;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::AllowAccess()" />*/
	,
	_serverSideAggregation: $.ig.util.toNullable($.ig.Boolean.prototype.$type, null),
	/*<BeginProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ServerSideAggregation()" />*/
	serverSideAggregation: function (value) {
		if (arguments.length === 1) {
			this._serverSideAggregation = value;
			return value;
		} else {
			return this._serverSideAggregation;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ServerSideAggregation()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.MetadataItem::InitAdditionalProperties()" />*/
	initAdditionalProperties: function () {
		this.expiration(1440);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.MetadataItem::InitAdditionalProperties()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.MetadataItem::CopyAdditionalProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	copyAdditionalProperties: function (other) {
		this.expiration(other.expiration());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.MetadataItem::CopyAdditionalProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IsServerSideAggregationOptional()" />*/
	isServerSideAggregationOptional: function () {
		return this.dataSource() == null || !this.dataSource().properties().containsKey($.ig.ProviderKeys.prototype.serverAggregationModeReadOnly) || !this.dataSource().properties().getBoolValue($.ig.ProviderKeys.prototype.serverAggregationModeReadOnly);
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IsServerSideAggregationOptional()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ServerSideAggregationDefaultValue()" />*/
	serverSideAggregationDefaultValue: function () {
		return this.dataSource() == null || !this.dataSource().properties().containsKey($.ig.ProviderKeys.prototype.serverAggregationModeDefaultValue) || this.dataSource().properties().getBoolValue($.ig.ProviderKeys.prototype.serverAggregationModeDefaultValue);
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ServerSideAggregationDefaultValue()" />*/
	,
	_id: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			this._id = value;
			return value;
		} else {
			return this._id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Id()" />*/
	,
	_dataSource: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DataSource()" />*/
	dataSource: function (value) {
		if (arguments.length === 1) {
			this._dataSource = value;
			return value;
		} else {
			return this._dataSource;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSource Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DataSource()" />*/
	,
	_dataSourceItem: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DataSourceItem()" />*/
	dataSourceItem: function (value) {
		if (arguments.length === 1) {
			this._dataSourceItem = value;
			return value;
		} else {
			return this._dataSourceItem;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DataSourceItem()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ProviderType()" />*/
	providerType: function () {
		return this.dataSource() == null ? this.id() : this.dataSource().provider();
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ProviderType()" />*/
	,
	_displayName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DisplayName()" />*/
	displayName: function (value) {
		if (arguments.length === 1) {
			this._displayName = value;
			return value;
		} else {
			return this._displayName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::DisplayName()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Description()" />*/
	,
	_itemType: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ItemType()" />*/
	itemType: function (value) {
		if (arguments.length === 1) {
			this._itemType = value;
			return value;
		} else {
			return this._itemType;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ItemType()" />*/
	,
	_iconId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IconId()" />*/
	iconId: function (value) {
		if (arguments.length === 1) {
			this._iconId = value;
			return value;
		} else {
			return this._iconId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IconId()" />*/
	,
	_groupId: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::GroupId()" />*/
	groupId: function (value) {
		if (arguments.length === 1) {
			this._groupId = value;
			return value;
		} else {
			return this._groupId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.MetadataItem::GroupId()" />*/
	,
	_isContainer: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IsContainer()" />*/
	isContainer: function (value) {
		if (arguments.length === 1) {
			this._isContainer = value;
			return value;
		} else {
			return this._isContainer;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::IsContainer()" />*/
	,
	_hasData: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasData()" />*/
	hasData: function (value) {
		if (arguments.length === 1) {
			this._hasData = value;
			return value;
		} else {
			return this._hasData;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasData()" />*/
	,
	_hasResource: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasResource()" />*/
	hasResource: function (value) {
		if (arguments.length === 1) {
			this._hasResource = value;
			return value;
		} else {
			return this._hasResource;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasResource()" />*/
	,
	_hasPreLoadSupport: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasPreLoadSupport()" />*/
	hasPreLoadSupport: function (value) {
		if (arguments.length === 1) {
			this._hasPreLoadSupport = value;
			return value;
		} else {
			return this._hasPreLoadSupport;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.MetadataItem::HasPreLoadSupport()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Properties()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.properties(new $.ig.NativeTypedDictionary());
		this.initAdditionalProperties();
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.id($.ig.JsonUtility.prototype.loadString(json, "Id"));
		this.displayName($.ig.JsonUtility.prototype.loadString(json, "DisplayName"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.itemType($.ig.JsonUtility.prototype.loadString(json, "ItemType"));
		this.iconId($.ig.JsonUtility.prototype.loadString(json, "IconId"));
		this.groupId($.ig.JsonUtility.prototype.loadString(json, "GroupId"));
		this.isContainer($.ig.JsonUtility.prototype.loadBool(json, "IsContainer"));
		this.hasData($.ig.JsonUtility.prototype.loadBool(json, "HasData"));
		this.hasResource($.ig.JsonUtility.prototype.loadBool(json, "HasResource"));
		this.hasPreLoadSupport($.ig.JsonUtility.prototype.loadBool(json, "HasPreLoadSupport"));
		this.properties($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Properties"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSource")) {
			var jsonDataSource = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSource"]);
			var instanceType = jsonDataSource["_type"];
			if (instanceType == "CompositeDataSourceType") {
				this.dataSource(new $.ig.CompositeDataSource(2, jsonDataSource));
			} else if (instanceType == "DataSourceType") {
				this.dataSource(new $.ig.DataSource(2, jsonDataSource));
			}
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSourceItem")) {
			var jsonDataSourceItem = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSourceItem"]);
			var instanceType1 = jsonDataSourceItem["_type"];
			if (instanceType1 == "CompositeDataSourceItemType") {
				this.dataSourceItem(new $.ig.CompositeDataSourceItem(2, jsonDataSourceItem));
			} else if (instanceType1 == "DataSourceItemType") {
				this.dataSourceItem(new $.ig.DataSourceItem(2, jsonDataSourceItem));
			}
		}
	},
	init2: function (initNumber, other) {
		$.ig.Object.prototype.init.call(this);
		this.id(other.id());
		this.displayName(other.displayName());
		this.description(other.description());
		this.itemType(other.itemType());
		this.iconId(other.iconId());
		this.groupId(other.groupId());
		this.isContainer(other.isContainer());
		this.hasData(other.hasData());
		this.hasResource(other.hasResource());
		this.hasPreLoadSupport(other.hasPreLoadSupport());
		this.properties($.ig.CloneUtils.prototype.cloneDictionary(other.properties()));
		this.dataSource($.ig.CloneUtils.prototype.cloneObject(other.dataSource()));
		this.dataSourceItem($.ig.CloneUtils.prototype.cloneObject(other.dataSourceItem()));
		this.copyAdditionalProperties(other);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "Id", this.id());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "DisplayName", this.displayName());
		$.ig.JsonUtility.prototype.saveObject(json, "ItemType", this.itemType());
		$.ig.JsonUtility.prototype.saveObject(json, "IconId", this.iconId());
		$.ig.JsonUtility.prototype.saveObject(json, "GroupId", this.groupId());
		$.ig.JsonUtility.prototype.saveBool(json, "IsContainer", this.isContainer());
		$.ig.JsonUtility.prototype.saveBool(json, "HasData", this.hasData());
		$.ig.JsonUtility.prototype.saveBool(json, "HasResource", this.hasResource());
		$.ig.JsonUtility.prototype.saveBool(json, "HasPreLoadSupport", this.hasPreLoadSupport());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSource", this.dataSource());
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSourceItem", this.dataSourceItem());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.MetadataItem::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Clone()" />*/
	clone: function () {
		return new $.ig.MetadataItem(2, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.MetadataItem::Clone()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Api.MetadataItem::FromJson(System.JSDictionary)" />*/
	fromJson: function (json) {
		var type = $.ig.JsonUtility.prototype.loadString(json, "_type");
		if ("DataSourceItemMetadataType" == type) {
			return new $.ig.DataSourceItemMetadata(3, json);
		} else if ("ResourceItemMetadataType" == type) {
			return new $.ig.ResourceItemMetadata(2, json);
		} else if ("ProviderMetadataType" == type) {
			return new $.ig.ProviderMetadata(1, json);
		} else if ("DataSourceItemMetadataRootType" == type) {
			return new $.ig.DataSourceItemMetadataRoot(2, json);
		} else {
			return new $.ig.MetadataItem(1, json);
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Api.MetadataItem::FromJson(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('MetadataItem', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility" />*/

$.ig.util.defType('DataLayerUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::AllProviderKeys()" />*/
	allProviderKeys: function () {
		if ($.ig.DataLayerUtility.prototype.__supportedProviders == null) {
			$.ig.DataLayerUtility.prototype.__supportedProviders = new $.ig.Array();
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.dropboxProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.oneDriveProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.boxProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.dynamicsCRMProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.googleAnalyticsProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.googleDriveProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.sharepointProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.sQLServerProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.mySQLProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.rESTProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.oDataProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.marketoProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.postgresProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.sybaseProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.oracleProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.webServiceProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.sSASProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.sSRSProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.bigQueryProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.azureSQLProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.azureSynapseProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.salesforceProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.dataDotWorldProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.azureAnalysisServicesKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.hubSpotProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.quickBooksProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.googleAdsProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.athenaProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.redshiftProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.s3ProviderKey);
			$.ig.DataLayerUtility.prototype.__supportedProviders.add($.ig.ProviderKeys.prototype.snowflakeProviderKey);
		}
		return $.ig.DataLayerUtility.prototype.__supportedProviders;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::AllProviderKeys()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::IsProviderSupported(System.String)" />*/
	isProviderSupported: function (providerKey) {
		var supportedProviders = $.ig.DataLayerUtility.prototype.allProviderKeys();
		for (var i = 0; i < supportedProviders.length; i++) {
			var key = supportedProviders[i];
			if (key == providerKey) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::IsProviderSupported(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::CloudUnsupportedProviderKeys()" />*/
	cloudUnsupportedProviderKeys: function () {
		if ($.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders == null) {
			$.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders = new $.ig.Array();
			$.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders.add($.ig.ProviderKeys.prototype.sSRSProviderKey);
			$.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders.add($.ig.ProviderKeys.prototype.sybaseProviderKey);
			$.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders.add($.ig.ProviderKeys.prototype.oracleProviderKey);
		}
		return $.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::CloudUnsupportedProviderKeys()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::IsCloudSupportedProvider(System.String)" />*/
	isCloudSupportedProvider: function (providerKey) {
		var unsupportedProviders = $.ig.DataLayerUtility.prototype.cloudUnsupportedProviderKeys();
		for (var i = 0; i < unsupportedProviders.length; i++) {
			var key = unsupportedProviders[i];
			if (key == providerKey) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::IsCloudSupportedProvider(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::HasPublicLinkSupport(System.String, System.Boolean)" />*/
	hasPublicLinkSupport: function (providerKey, isSdkEmbedded) {
		return (!isSdkEmbedded && providerKey != null && ($.ig.ProviderKeys.prototype.oneDriveProviderKey.equals(providerKey) || $.ig.ProviderKeys.prototype.dropboxProviderKey.equals(providerKey) || $.ig.ProviderKeys.prototype.googleDriveProviderKey.equals(providerKey)));
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::HasPublicLinkSupport(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::GetAccountIdForProviderTokenState(Infragistics.CloudProviderType, Infragistics.TokenState)" />*/
	getAccountIdForProviderTokenState: function (cpt, tokenState) {
		if (tokenState == null) {
			return null;
		}
		if (cpt == $.ig.CloudProviderType.prototype.google || cpt == $.ig.CloudProviderType.prototype.googleProvider || cpt == $.ig.CloudProviderType.prototype.googleAnalytics || cpt == $.ig.CloudProviderType.prototype.bigQuery || cpt == $.ig.CloudProviderType.prototype.salesForce || cpt == $.ig.CloudProviderType.prototype.googleAds) {
			return tokenState.userInfo() == null ? null : tokenState.userInfo().getEmail();
		} else if (cpt == $.ig.CloudProviderType.prototype.dropbox) {
			return tokenState.token().resolveStringForKey("account_id");
		} else if (cpt == $.ig.CloudProviderType.prototype.box) {
			return tokenState.userInfo().resolveStringForKey("login");
		} else if (cpt == $.ig.CloudProviderType.prototype.microsoft || cpt == $.ig.CloudProviderType.prototype.microsoftProvider || cpt == $.ig.CloudProviderType.prototype.azureAnalysisServices) {
			return tokenState.additionalIdentifier();
		} else if (cpt == $.ig.CloudProviderType.prototype.sharePoint) {
			return tokenState.token().resolveStringForKey("resource");
		} else if (cpt == $.ig.CloudProviderType.prototype.dataDotWorld) {
			return tokenState.additionalIdentifier();
		} else if (cpt == $.ig.CloudProviderType.prototype.hubSpot) {
			return tokenState.additionalIdentifier();
		} else if (cpt == $.ig.CloudProviderType.prototype.quickBooks) {
			return $.ig.QuickBooksOAuthProvider.prototype.accountId(tokenState.getJSON().convertToString());
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility::GetAccountIdForProviderTokenState(Infragistics.CloudProviderType, Infragistics.TokenState)" />*/
	,
	$type: new $.ig.Type('DataLayerUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.ProviderKeys" />*/

$.ig.util.defType('ProviderKeys', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('ProviderKeys', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.ProviderKeys" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.BaseDataResult" />*/

$.ig.util.defType('BaseDataResult', 'Object', {
	_isDataTruncated: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsDataTruncated()" />*/
	isDataTruncated: function (value) {
		if (arguments.length === 1) {
			this._isDataTruncated = value;
			return value;
		} else {
			return this._isDataTruncated;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsDataTruncated()" />*/
	,
	_itemType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::ItemType()" />*/
	itemType: function (value) {
		if (arguments.length === 1) {
			this._itemType = value;
			return value;
		} else {
			return this._itemType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::ItemType()" />*/
	,
	_isHierarchical: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsHierarchical()" />*/
	isHierarchical: function (value) {
		if (arguments.length === 1) {
			this._isHierarchical = value;
			return value;
		} else {
			return this._isHierarchical;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsHierarchical()" />*/
	,
	_isHierarchyLastLevel: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsHierarchyLastLevel()" />*/
	isHierarchyLastLevel: function (value) {
		if (arguments.length === 1) {
			this._isHierarchyLastLevel = value;
			return value;
		} else {
			return this._isHierarchyLastLevel;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::IsHierarchyLastLevel()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.isDataTruncated($.ig.JsonUtility.prototype.loadBool(json, "IsDataTruncated"));
		this.isHierarchical($.ig.JsonUtility.prototype.loadBool(json, "IsHierarchical"));
		this.itemType($.ig.DashboardEnumDeserialization.prototype.readDataType($.ig.JsonUtility.prototype.loadString(json, "ItemType")));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveBool(json, "IsDataTruncated", this.isDataTruncated());
		$.ig.JsonUtility.prototype.saveBool(json, "IsHierarchical", this.isHierarchical());
		$.ig.JsonUtility.prototype.saveObject(json, "ItemType", $.ig.DashboardEnumSerialization.prototype.writeDataType(this.itemType()));
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.BaseDataResult::ToJson()" />*/
	,
	$type: new $.ig.Type('BaseDataResult', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.BaseDataResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.ValuesResult" />*/

$.ig.util.defType('ValuesResult', 'BaseDataResult', {
	_values: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ValuesResult::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ValuesResult::Values()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataResult.prototype.init.call(this, 0);
		this.values(new $.ig.Array());
	},
	init1: function (initNumber, json) {
		$.ig.BaseDataResult.prototype.init1.call(this, 1, json);
		this.values(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Values");
			var jsonValueCount = jsonValues.length;
			for (var i = 0; i < jsonValueCount; i++) {
				var jv = $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i]);
				if ($.ig.JsonUtility.prototype.containsKey(jv, "_type") && $.ig.JsonUtility.prototype.loadString(jv, "_type") == "HierarchicalFilterValue") {
					this.values().add(new $.ig.HierarchicalFilterValue(1, jv));
				} else {
					this.values().add(new $.ig.FilterValue(2, jv));
				}
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ValuesResult::ToJson()" />*/
	toJson: function () {
		var json = $.ig.BaseDataResult.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ValuesResult::ToJson()" />*/
	,
	$type: new $.ig.Type('ValuesResult', $.ig.BaseDataResult.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.ValuesResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue" />*/

$.ig.util.defType('GlobalFilterValue', 'Object', {
	_label: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Label()" />*/
	,
	_values: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Values()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.values(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.label($.ig.JsonUtility.prototype.loadString(json, "Label"));
		this.values($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Values"));
	},
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Clone()" />*/
	clone: function () {
		var o = new $.ig.GlobalFilterValue(0);
		o.label(this.label());
		if (this.values() != null) {
			var newValues = new $.ig.NativeTypedDictionary();
			newValues.copyValues(this.values().getValuesDictionary());
			o.values(newValues);
		}
		return o;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Label", this.label());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue::ToJson()" />*/
	,
	$type: new $.ig.Type('GlobalFilterValue', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValue" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult" />*/

$.ig.util.defType('GlobalFilterValuesResult', 'BaseDataResult', {
	_values: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::Values()" />*/
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::Values()" />*/
	,
	_includedFields: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::IncludedFields()" />*/
	includedFields: function (value) {
		if (arguments.length === 1) {
			this._includedFields = value;
			return value;
		} else {
			return this._includedFields;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::IncludedFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BaseDataResult.prototype.init.call(this, 0);
		this.values(new $.ig.Array());
	},
	init1: function (initNumber, json) {
		$.ig.BaseDataResult.prototype.init1.call(this, 1, json);
		this.includedFields($.ig.JsonUtility.prototype.loadStringList(json, "IncludedFields"));
		this.values(new $.ig.Array());
		if ($.ig.JsonUtility.prototype.containsKey(json, "Values")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Values");
			var jsonValueCount = jsonValues.length;
			for (var i = 0; i < jsonValueCount; i++) {
				var jv = $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i]);
				if ($.ig.JsonUtility.prototype.containsKey(jv, "_type") && $.ig.JsonUtility.prototype.loadString(jv, "_type") == "HierarchicalGlobalFilterValue") {
					this.values().add(new $.ig.HierarchicalGlobalFilterValue(1, jv));
				} else {
					this.values().add(new $.ig.GlobalFilterValue(1, jv));
				}
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::ToJson()" />*/
	toJson: function () {
		var json = $.ig.BaseDataResult.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveStringList(json, "IncludedFields", this.includedFields());
		$.ig.JsonUtility.prototype.saveContainer(json, "Values", this.values());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult::ToJson()" />*/
	,
	$type: new $.ig.Type('GlobalFilterValuesResult', $.ig.BaseDataResult.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.GlobalFilterValuesResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue" />*/

$.ig.util.defType('HierarchicalFilterValue', 'FilterValue', {
	_path: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::Path()" />*/
	path: function (value) {
		if (arguments.length === 1) {
			this._path = value;
			return value;
		} else {
			return this._path;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::Path()" />*/
	,
	_levelName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::LevelName()" />*/
	levelName: function (value) {
		if (arguments.length === 1) {
			this._levelName = value;
			return value;
		} else {
			return this._levelName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::LevelName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FilterValue.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.FilterValue.prototype.init2.call(this, 2, json);
		this.levelName($.ig.JsonUtility.prototype.loadString(json, "LevelName"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Path")) {
			this.path(new $.ig.Array());
			var jsonPath = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Path");
			var jsonPathSize = jsonPath.length;
			for (var i = 0; i < jsonPathSize; i++) {
				this.path().add(new $.ig.FilterValue(2, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonPath[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::ToJson()" />*/
	toJson: function () {
		var json = $.ig.FilterValue.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveObject(json, "LevelName", this.levelName());
		$.ig.JsonUtility.prototype.saveContainer(json, "Path", this.path());
		$.ig.JsonUtility.prototype.saveObject(json, "_type", "HierarchicalFilterValue");
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue::ToJson()" />*/
	,
	$type: new $.ig.Type('HierarchicalFilterValue', $.ig.FilterValue.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.HierarchicalFilterValue" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue" />*/

$.ig.util.defType('HierarchicalGlobalFilterValue', 'GlobalFilterValue', {
	_path: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::Path()" />*/
	path: function (value) {
		if (arguments.length === 1) {
			this._path = value;
			return value;
		} else {
			return this._path;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::Path()" />*/
	,
	_levelName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::LevelName()" />*/
	levelName: function (value) {
		if (arguments.length === 1) {
			this._levelName = value;
			return value;
		} else {
			return this._levelName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::LevelName()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GlobalFilterValue.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.GlobalFilterValue.prototype.init1.call(this, 1, json);
		this.levelName($.ig.JsonUtility.prototype.loadString(json, "LevelName"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Path")) {
			this.path(new $.ig.Array());
			var jsonPath = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "Path");
			var jsonPathSize = jsonPath.length;
			for (var i = 0; i < jsonPathSize; i++) {
				this.path().add(new $.ig.GlobalFilterValue(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonPath[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::ToJson()" />*/
	toJson: function () {
		var json = $.ig.GlobalFilterValue.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveObject(json, "LevelName", this.levelName());
		$.ig.JsonUtility.prototype.saveContainer(json, "Path", this.path());
		$.ig.JsonUtility.prototype.saveObject(json, "_type", "HierarchicalGlobalFilterValue");
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue::ToJson()" />*/
	,
	$type: new $.ig.Type('HierarchicalGlobalFilterValue', $.ig.GlobalFilterValue.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.HierarchicalGlobalFilterValue" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.MetadataLayerConstants" />*/

$.ig.util.defType('MetadataLayerConstants', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('MetadataLayerConstants', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.MetadataLayerConstants" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata" />*/

$.ig.util.defType('DataSourceItemMetadata', 'MetadataItem', {
	_dataSpec: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::DataSpec()" />*/
	dataSpec: function (value) {
		if (arguments.length === 1) {
			this._dataSpec = value;
			return value;
		} else {
			return this._dataSpec;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DataSpec Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::DataSpec()" />*/
	,
	_canEditAllowAccess: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::CanEditAllowAccess()" />*/
	canEditAllowAccess: function (value) {
		if (arguments.length === 1) {
			this._canEditAllowAccess = value;
			return value;
		} else {
			return this._canEditAllowAccess;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::CanEditAllowAccess()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.MetadataItem.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.MetadataItem.prototype.init2.call(this, 2, other);
		if ($.ig.util.cast($.ig.DataSourceItemMetadata.prototype.$type, other) !== null) {
			this.dataSpec($.ig.CloneUtils.prototype.cloneObject((other).dataSpec()));
		}
	},
	init2: function (initNumber, other) {
		$.ig.MetadataItem.prototype.init2.call(this, 2, other);
	},
	init3: function (initNumber, json) {
		$.ig.MetadataItem.prototype.init1.call(this, 1, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSpec")) {
			var jsonDataSpec = $.ig.NativeDataLayerUtility.prototype.getJsonObject(json["DataSpec"]);
			var instanceType = jsonDataSpec["_type"];
			if (instanceType == "ResourceDataSpecType") {
				this.dataSpec(new $.ig.ResourceDataSpec(2, jsonDataSpec));
			} else if (instanceType == "TabularDataSpecType") {
				this.dataSpec(new $.ig.TabularDataSpec(2, jsonDataSpec));
			} else if (instanceType == "XmlaDataSpecType") {
				this.dataSpec(new $.ig.XmlaDataSpec(2, jsonDataSpec));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::ToJson()" />*/
	toJson: function () {
		var json = $.ig.MetadataItem.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "DataSpec", this.dataSpec());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::Clone()" />*/
	clone: function () {
		return new $.ig.DataSourceItemMetadata(2, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata::Clone()" />*/
	,
	$type: new $.ig.Type('DataSourceItemMetadata', $.ig.MetadataItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadata" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot" />*/

$.ig.util.defType('DataSourceItemMetadataRoot', 'DataSourceItemMetadata', {
	_isSingleItemProvider: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::IsSingleItemProvider()" />*/
	isSingleItemProvider: function (value) {
		if (arguments.length === 1) {
			this._isSingleItemProvider = value;
			return value;
		} else {
			return this._isSingleItemProvider;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::IsSingleItemProvider()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DataSourceItemMetadata.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.DataSourceItemMetadata.prototype.init1.call(this, 1, other);
		if ($.ig.util.cast($.ig.DataSourceItemMetadataRoot.prototype.$type, other) !== null) {
			this.isSingleItemProvider((other).isSingleItemProvider());
		}
	},
	init2: function (initNumber, json) {
		$.ig.DataSourceItemMetadata.prototype.init3.call(this, 3, json);
		if ($.ig.JsonUtility.prototype.containsKey(json, "IsSingleItemProvider")) {
			this.isSingleItemProvider($.ig.JsonUtility.prototype.loadBool(json, "IsSingleItemProvider"));
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::ToJson()" />*/
	toJson: function () {
		var json = $.ig.DataSourceItemMetadata.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "IsSingleItemProvider", this.isSingleItemProvider());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::Clone()" />*/
	clone: function () {
		return new $.ig.DataSourceItemMetadataRoot(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot::Clone()" />*/
	,
	$type: new $.ig.Type('DataSourceItemMetadataRoot', $.ig.DataSourceItemMetadata.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.DataSourceItemMetadataRoot" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata" />*/

$.ig.util.defType('ResourceItemMetadata', 'MetadataItem', {
	_contentType: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::ContentType()" />*/
	contentType: function (value) {
		if (arguments.length === 1) {
			this._contentType = value;
			return value;
		} else {
			return this._contentType;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::ContentType()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.MetadataItem.prototype.init.call(this, 0);
	},
	init1: function (initNumber, other) {
		$.ig.MetadataItem.prototype.init2.call(this, 2, other);
		this.contentType(other.contentType());
	},
	init2: function (initNumber, json) {
		$.ig.MetadataItem.prototype.init1.call(this, 1, json);
		this.contentType($.ig.JsonUtility.prototype.loadString(json, "ContentType"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::ToJson()" />*/
	toJson: function () {
		var json = $.ig.MetadataItem.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveJsonObject(json, "ContentType", this.contentType());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::Clone()" />*/
	clone: function () {
		return new $.ig.ResourceItemMetadata(1, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata::Clone()" />*/
	,
	$type: new $.ig.Type('ResourceItemMetadata', $.ig.MetadataItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.ResourceItemMetadata" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata" />*/

$.ig.util.defType('ProviderMetadata', 'MetadataItem', {
	_isResourceBased: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsResourceBased()" />*/
	isResourceBased: function (value) {
		if (arguments.length === 1) {
			this._isResourceBased = value;
			return value;
		} else {
			return this._isResourceBased;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsResourceBased()" />*/
	,
	_isOAuthBased: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsOAuthBased()" />*/
	isOAuthBased: function (value) {
		if (arguments.length === 1) {
			this._isOAuthBased = value;
			return value;
		} else {
			return this._isOAuthBased;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsOAuthBased()" />*/
	,
	_isAnonymousAuthenticationSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsAnonymousAuthenticationSupported()" />*/
	isAnonymousAuthenticationSupported: function (value) {
		if (arguments.length === 1) {
			this._isAnonymousAuthenticationSupported = value;
			return value;
		} else {
			return this._isAnonymousAuthenticationSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsAnonymousAuthenticationSupported()" />*/
	,
	_isWindowsCurrentUserAuthenticationSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsWindowsCurrentUserAuthenticationSupported()" />*/
	isWindowsCurrentUserAuthenticationSupported: function (value) {
		if (arguments.length === 1) {
			this._isWindowsCurrentUserAuthenticationSupported = value;
			return value;
		} else {
			return this._isWindowsCurrentUserAuthenticationSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsWindowsCurrentUserAuthenticationSupported()" />*/
	,
	_dataSourceProperties: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::DataSourceProperties()" />*/
	dataSourceProperties: function (value) {
		if (arguments.length === 1) {
			this._dataSourceProperties = value;
			return value;
		} else {
			return this._dataSourceProperties;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::DataSourceProperties()" />*/
	,
	_allowsGenericAccountType: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsGenericAccountType()" />*/
	allowsGenericAccountType: function (value) {
		if (arguments.length === 1) {
			this._allowsGenericAccountType = value;
			return value;
		} else {
			return this._allowsGenericAccountType;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsGenericAccountType()" />*/
	,
	_allowsOAuthAccountType: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsOAuthAccountType()" />*/
	allowsOAuthAccountType: function (value) {
		if (arguments.length === 1) {
			this._allowsOAuthAccountType = value;
			return value;
		} else {
			return this._allowsOAuthAccountType;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsOAuthAccountType()" />*/
	,
	_allowsAwsAccountType: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsAwsAccountType()" />*/
	allowsAwsAccountType: function (value) {
		if (arguments.length === 1) {
			this._allowsAwsAccountType = value;
			return value;
		} else {
			return this._allowsAwsAccountType;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::AllowsAwsAccountType()" />*/
	,
	_isBlendingSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsBlendingSupported()" />*/
	isBlendingSupported: function (value) {
		if (arguments.length === 1) {
			this._isBlendingSupported = value;
			return value;
		} else {
			return this._isBlendingSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsBlendingSupported()" />*/
	,
	_isMachineLearningIntegrationSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsMachineLearningIntegrationSupported()" />*/
	isMachineLearningIntegrationSupported: function (value) {
		if (arguments.length === 1) {
			this._isMachineLearningIntegrationSupported = value;
			return value;
		} else {
			return this._isMachineLearningIntegrationSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::IsMachineLearningIntegrationSupported()" />*/
	,
	_preCalculatedFieldsSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::PreCalculatedFieldsSupported()" />*/
	preCalculatedFieldsSupported: function (value) {
		if (arguments.length === 1) {
			this._preCalculatedFieldsSupported = value;
			return value;
		} else {
			return this._preCalculatedFieldsSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::PreCalculatedFieldsSupported()" />*/
	,
	_postCalculatedFieldsSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::PostCalculatedFieldsSupported()" />*/
	postCalculatedFieldsSupported: function (value) {
		if (arguments.length === 1) {
			this._postCalculatedFieldsSupported = value;
			return value;
		} else {
			return this._postCalculatedFieldsSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::PostCalculatedFieldsSupported()" />*/
	,
	_serverSideAggregationSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ServerSideAggregationSupported()" />*/
	serverSideAggregationSupported: function (value) {
		if (arguments.length === 1) {
			this._serverSideAggregationSupported = value;
			return value;
		} else {
			return this._serverSideAggregationSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ServerSideAggregationSupported()" />*/
	,
	_serverSideAggregationOptional: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ServerSideAggregationOptional()" />*/
	serverSideAggregationOptional: function (value) {
		if (arguments.length === 1) {
			this._serverSideAggregationOptional = value;
			return value;
		} else {
			return this._serverSideAggregationOptional;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ServerSideAggregationOptional()" />*/
	,
	_supportedPreCalculatedFunctions: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SupportedPreCalculatedFunctions()" />*/
	supportedPreCalculatedFunctions: function (value) {
		if (arguments.length === 1) {
			this._supportedPreCalculatedFunctions = value;
			return value;
		} else {
			return this._supportedPreCalculatedFunctions;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SupportedPreCalculatedFunctions()" />*/
	,
	_supportedPostCalculatedFunctions: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SupportedPostCalculatedFunctions()" />*/
	supportedPostCalculatedFunctions: function (value) {
		if (arguments.length === 1) {
			this._supportedPostCalculatedFunctions = value;
			return value;
		} else {
			return this._supportedPostCalculatedFunctions;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SupportedPostCalculatedFunctions()" />*/
	,
	_sameDatasourceServerSideCompositeSupported: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SameDatasourceServerSideCompositeSupported()" />*/
	sameDatasourceServerSideCompositeSupported: function (value) {
		if (arguments.length === 1) {
			this._sameDatasourceServerSideCompositeSupported = value;
			return value;
		} else {
			return this._sameDatasourceServerSideCompositeSupported;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::SameDatasourceServerSideCompositeSupported()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.MetadataItem.prototype.init.call(this, 0);
		this.allowsGenericAccountType(true);
		this.allowsOAuthAccountType(false);
		this.allowsAwsAccountType(false);
		this.isBlendingSupported(true);
		this.isMachineLearningIntegrationSupported(true);
		this.supportedPreCalculatedFunctions(new $.ig.Array());
		this.supportedPostCalculatedFunctions(new $.ig.Array());
		this.preCalculatedFieldsSupported(true);
		this.postCalculatedFieldsSupported(true);
		this.serverSideAggregationSupported(false);
		this.serverSideAggregationOptional(false);
	},
	init1: function (initNumber, json) {
		$.ig.MetadataItem.prototype.init1.call(this, 1, json);
		this.isResourceBased($.ig.JsonUtility.prototype.loadBool(json, "IsResourceBased"));
		this.isOAuthBased($.ig.JsonUtility.prototype.loadBool(json, "IsOAuthBased"));
		this.isAnonymousAuthenticationSupported($.ig.JsonUtility.prototype.loadBool(json, "IsAnonymousAuthenticationSupported"));
		this.isWindowsCurrentUserAuthenticationSupported($.ig.JsonUtility.prototype.loadBool(json, "IsWindowsCurrentUserAuthenticationSupported"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "DataSourceProperties")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "DataSourceProperties");
			this.dataSourceProperties(new $.ig.Array());
			var len = jsonValues.length;
			for (var i = 0; i < len; i++) {
				this.dataSourceProperties().add(new $.ig.PropertyDescriptor(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i])));
			}
		}
		this.allowsGenericAccountType($.ig.JsonUtility.prototype.loadBool1(json, "AllowsGenericAccountType", true));
		this.allowsOAuthAccountType($.ig.JsonUtility.prototype.loadBool1(json, "AllowsOAuthAccountType", false));
		this.allowsAwsAccountType($.ig.JsonUtility.prototype.loadBool1(json, "AllowsAwsAccountType", false));
		this.isBlendingSupported($.ig.JsonUtility.prototype.loadBool1(json, "IsBlendingSupported", false));
		this.isMachineLearningIntegrationSupported($.ig.JsonUtility.prototype.loadBool1(json, "IsMachineLearningIntegrationSupported", false));
		this.supportedPreCalculatedFunctions($.ig.JsonUtility.prototype.loadStringList(json, "SupportedPreCalculatedFunctions"));
		this.supportedPostCalculatedFunctions($.ig.JsonUtility.prototype.loadStringList(json, "SupportedPostCalculatedFunctions"));
		this.preCalculatedFieldsSupported($.ig.JsonUtility.prototype.loadBool1(json, "PreCalculatedFieldsSupported", true));
		this.postCalculatedFieldsSupported($.ig.JsonUtility.prototype.loadBool1(json, "PostCalculatedFieldsSupported", true));
		this.serverSideAggregationSupported($.ig.JsonUtility.prototype.loadBool1(json, "ServerSideAggregationSupported", false));
		this.serverSideAggregationOptional($.ig.JsonUtility.prototype.loadBool1(json, "ServerSideAggregationOptional", true));
		this.sameDatasourceServerSideCompositeSupported($.ig.JsonUtility.prototype.loadBool1(json, "SameDatasourceServerSideCompositeSupported", false));
	},
	init2: function (initNumber, other) {
		$.ig.MetadataItem.prototype.init2.call(this, 2, other);
		this.isResourceBased(other.isResourceBased());
		this.isOAuthBased(other.isOAuthBased());
		this.isAnonymousAuthenticationSupported(other.isAnonymousAuthenticationSupported());
		this.isWindowsCurrentUserAuthenticationSupported(other.isWindowsCurrentUserAuthenticationSupported());
		this.dataSourceProperties($.ig.CloneListUtils.prototype.cloneList(other.dataSourceProperties(), new $.ig.Array()));
		this.allowsGenericAccountType(other.allowsGenericAccountType());
		this.allowsOAuthAccountType(other.allowsOAuthAccountType());
		this.allowsAwsAccountType(other.allowsAwsAccountType());
		this.isBlendingSupported(other.isBlendingSupported());
		this.isMachineLearningIntegrationSupported(other.isMachineLearningIntegrationSupported());
		this.supportedPreCalculatedFunctions($.ig.CloneListUtils.prototype.cloneList(other.supportedPreCalculatedFunctions(), new $.ig.Array()));
		this.supportedPostCalculatedFunctions($.ig.CloneListUtils.prototype.cloneList(other.supportedPostCalculatedFunctions(), new $.ig.Array()));
		this.preCalculatedFieldsSupported(other.preCalculatedFieldsSupported());
		this.postCalculatedFieldsSupported(other.postCalculatedFieldsSupported());
		this.serverSideAggregationSupported(other.serverSideAggregationSupported());
		this.serverSideAggregationOptional(other.serverSideAggregationOptional());
		this.sameDatasourceServerSideCompositeSupported(other.sameDatasourceServerSideCompositeSupported());
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ToJson()" />*/
	toJson: function () {
		var json = $.ig.MetadataItem.prototype.toJson.call(this);
		$.ig.JsonUtility.prototype.saveBool(json, "IsResourceBased", this.isResourceBased());
		$.ig.JsonUtility.prototype.saveBool(json, "IsOAuthBased", this.isOAuthBased());
		$.ig.JsonUtility.prototype.saveBool(json, "IsAnonymousAuthenticationSupported", this.isAnonymousAuthenticationSupported());
		$.ig.JsonUtility.prototype.saveBool(json, "IsWindowsCurrentUserAuthenticationSupported", this.isWindowsCurrentUserAuthenticationSupported());
		$.ig.JsonUtility.prototype.saveContainer(json, "DataSourceProperties", this.dataSourceProperties());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowsGenericAccountType", this.allowsGenericAccountType());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowsOAuthAccountType", this.allowsOAuthAccountType());
		$.ig.JsonUtility.prototype.saveBool(json, "AllowsAwsAccountType", this.allowsAwsAccountType());
		$.ig.JsonUtility.prototype.saveBool(json, "IsBlendingSupported", this.isBlendingSupported());
		$.ig.JsonUtility.prototype.saveBool(json, "IsMachineLearningIntegrationSupported", this.isMachineLearningIntegrationSupported());
		$.ig.JsonUtility.prototype.saveStringList(json, "SupportedPreCalculatedFunctions", this.supportedPreCalculatedFunctions());
		$.ig.JsonUtility.prototype.saveStringList(json, "SupportedPostCalculatedFunctions", this.supportedPostCalculatedFunctions());
		$.ig.JsonUtility.prototype.saveBool(json, "PreCalculatedFieldsSupported", this.preCalculatedFieldsSupported());
		$.ig.JsonUtility.prototype.saveBool(json, "PostCalculatedFieldsSupported", this.postCalculatedFieldsSupported());
		$.ig.JsonUtility.prototype.saveBool(json, "ServerSideAggregationSupported", this.serverSideAggregationSupported());
		$.ig.JsonUtility.prototype.saveBool(json, "ServerSideAggregationOptional", this.serverSideAggregationOptional());
		$.ig.JsonUtility.prototype.saveBool(json, "SameDatasourceServerSideCompositeSupported", this.sameDatasourceServerSideCompositeSupported());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::Clone()" />*/
	clone: function () {
		return new $.ig.ProviderMetadata(2, this);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata::Clone()" />*/
	,
	$type: new $.ig.Type('ProviderMetadata', $.ig.MetadataItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.ProviderMetadata" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor" />*/

$.ig.util.defType('PropertyDescriptor', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Name()" />*/
	,
	_description: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			this._description = value;
			return value;
		} else {
			return this._description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Description()" />*/
	,
	_placeholder: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Placeholder()" />*/
	placeholder: function (value) {
		if (arguments.length === 1) {
			this._placeholder = value;
			return value;
		} else {
			return this._placeholder;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Placeholder()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Type()" />*/
	,
	_multiValued: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::MultiValued()" />*/
	multiValued: function (value) {
		if (arguments.length === 1) {
			this._multiValued = value;
			return value;
		} else {
			return this._multiValued;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::MultiValued()" />*/
	,
	_isRequired: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::IsRequired()" />*/
	isRequired: function (value) {
		if (arguments.length === 1) {
			this._isRequired = value;
			return value;
		} else {
			return this._isRequired;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::IsRequired()" />*/
	,
	_defaultValue: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::DefaultValue()" />*/
	defaultValue: function (value) {
		if (arguments.length === 1) {
			this._defaultValue = value;
			return value;
		} else {
			return this._defaultValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::DefaultValue()" />*/
	,
	_validValues: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ValidValues()" />*/
	validValues: function (value) {
		if (arguments.length === 1) {
			this._validValues = value;
			return value;
		} else {
			return this._validValues;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ValidValues()" />*/
	,
	_hasDynamicValidValues: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::HasDynamicValidValues()" />*/
	hasDynamicValidValues: function (value) {
		if (arguments.length === 1) {
			this._hasDynamicValidValues = value;
			return value;
		} else {
			return this._hasDynamicValidValues;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::HasDynamicValidValues()" />*/
	,
	_dependencies: null,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Dependencies()" />*/
	dependencies: function (value) {
		if (arguments.length === 1) {
			this._dependencies = value;
			return value;
		} else {
			return this._dependencies;
		}
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Dependencies()" />*/
	,
	_properties: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Properties()" />*/
	properties: function (value) {
		if (arguments.length === 1) {
			this._properties = value;
			return value;
		} else {
			return this._properties;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.NativeTypedDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Properties()" />*/
	,
	_scope: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Scope()" />*/
	scope: function (value) {
		if (arguments.length === 1) {
			this._scope = value;
			return value;
		} else {
			return this._scope;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Scope()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.properties(new $.ig.NativeTypedDictionary());
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.description($.ig.JsonUtility.prototype.loadString(json, "Description"));
		this.placeholder($.ig.JsonUtility.prototype.loadString(json, "Placeholder"));
		this.type($.ig.PropertyDescriptor.prototype.readDescriptorType($.ig.JsonUtility.prototype.loadString(json, "Type")));
		this.multiValued($.ig.JsonUtility.prototype.loadBool(json, "MultiValued"));
		this.isRequired($.ig.JsonUtility.prototype.loadBool(json, "IsRequired"));
		this.defaultValue($.ig.JsonUtility.prototype.loadObject(json, "DefaultValue"));
		this.hasDynamicValidValues($.ig.JsonUtility.prototype.loadBool(json, "HasDynamicValidValues"));
		this.dependencies($.ig.JsonUtility.prototype.loadStringList(json, "Dependencies"));
		this.properties($.ig.JsonUtility.prototype.loadTypedDictionary(json, "Properties"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "Scope")) {
			this.scope(new $.ig.PropertyDescriptorScope(1, json));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, "ValidValues")) {
			var jsonValues = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "ValidValues");
			this.validValues(new $.ig.Array());
			var len = jsonValues.length;
			for (var i = 0; i < len; i++) {
				this.validValues().add(new $.ig.ValueDescriptor(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(jsonValues[i])));
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "Description", this.description());
		$.ig.JsonUtility.prototype.saveObject(json, "Placeholder", this.placeholder());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", $.ig.PropertyDescriptor.prototype.writeDescriptorType(this.type()));
		$.ig.JsonUtility.prototype.saveBool(json, "MultiValued", this.multiValued());
		$.ig.JsonUtility.prototype.saveBool(json, "IsRequired", this.isRequired());
		$.ig.JsonUtility.prototype.saveObject(json, "DefaultValue", this.defaultValue());
		$.ig.JsonUtility.prototype.saveBool(json, "HasDynamicValidValues", this.hasDynamicValidValues());
		$.ig.JsonUtility.prototype.saveStringList(json, "Dependencies", this.dependencies());
		$.ig.JsonUtility.prototype.saveContainer(json, "Properties", this.properties());
		$.ig.JsonUtility.prototype.saveObject(json, "Scope", this.scope());
		$.ig.JsonUtility.prototype.saveContainer(json, "ValidValues", this.validValues());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Clone()" />*/
	clone: function () {
		var copy = new $.ig.PropertyDescriptor(0);
		copy.name(this.name());
		copy.description(this.description());
		copy.type(this.type());
		copy.multiValued(this.multiValued());
		copy.isRequired(this.isRequired());
		copy.defaultValue(this.defaultValue());
		copy.hasDynamicValidValues(this.hasDynamicValidValues());
		copy.dependencies($.ig.CloneListUtils.prototype.cloneList(this.dependencies(), new $.ig.Array()));
		copy.properties($.ig.CloneUtils.prototype.cloneDictionary(this.properties()));
		copy.scope($.ig.CloneUtils.prototype.cloneObject(this.scope()));
		copy.validValues($.ig.CloneListUtils.prototype.cloneList(this.validValues(), new $.ig.Array()));
		return copy;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::Clone()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ReadDescriptorType(System.String)" />*/
	readDescriptorType: function (value) {
		if (value == null) {
			return $.ig.PropertyDescriptorType.prototype.string1;
		} else {
			if (value == "String") {
				return $.ig.PropertyDescriptorType.prototype.string1;
			} else if (value == "Bool") {
				return $.ig.PropertyDescriptorType.prototype.bool;
			} else if (value == "Int") {
				return $.ig.PropertyDescriptorType.prototype.$int;
			} else if (value == "Double") {
				return $.ig.PropertyDescriptorType.prototype.double1;
			} else if (value == "Date") {
				return $.ig.PropertyDescriptorType.prototype.date;
			} else if (value == "DateTime") {
				return $.ig.PropertyDescriptorType.prototype.dateTime;
			} else if (value == "Time") {
				return $.ig.PropertyDescriptorType.prototype.time;
			} else if (value == "Object") {
				return $.ig.PropertyDescriptorType.prototype.object1;
			} else {
				return $.ig.PropertyDescriptorType.prototype.string1;
			}
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::ReadDescriptorType(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::WriteDescriptorType(Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType)" />*/
	writeDescriptorType: function (value) {
		switch (value) {
			case $.ig.PropertyDescriptorType.prototype.string1: return "String";
			case $.ig.PropertyDescriptorType.prototype.bool: return "Bool";
			case $.ig.PropertyDescriptorType.prototype.$int: return "Int";
			case $.ig.PropertyDescriptorType.prototype.double1: return "Double";
			case $.ig.PropertyDescriptorType.prototype.date: return "Date";
			case $.ig.PropertyDescriptorType.prototype.dateTime: return "DateTime";
			case $.ig.PropertyDescriptorType.prototype.time: return "Time";
			case $.ig.PropertyDescriptorType.prototype.object1: return "Object";
			default: return "String";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor::WriteDescriptorType(Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType)" />*/
	,
	$type: new $.ig.Type('PropertyDescriptor', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptor" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope" />*/

$.ig.util.defType('PropertyDescriptorScope', 'Object', {
	_propertyName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::PropertyName()" />*/
	propertyName: function (value) {
		if (arguments.length === 1) {
			this._propertyName = value;
			return value;
		} else {
			return this._propertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::PropertyName()" />*/
	,
	_propertyValue: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::PropertyValue()" />*/
	propertyValue: function (value) {
		if (arguments.length === 1) {
			this._propertyValue = value;
			return value;
		} else {
			return this._propertyValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::PropertyValue()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.propertyName($.ig.JsonUtility.prototype.loadString(json, "PropertyName"));
		this.propertyValue($.ig.JsonUtility.prototype.loadObject(json, "PropertyValue"));
	},
	init2: function (initNumber, name, value) {
		$.ig.Object.prototype.init.call(this);
		this.propertyName(name);
		this.propertyValue(value);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "PropertyName", this.propertyName());
		$.ig.JsonUtility.prototype.saveObject(json, "PropertyValue", this.propertyValue());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::Clone()" />*/
	clone: function () {
		var copy = new $.ig.PropertyDescriptorScope(0);
		copy.propertyName(this.propertyName());
		copy.propertyValue(this.propertyValue());
		return copy;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope::Clone()" />*/
	,
	$type: new $.ig.Type('PropertyDescriptorScope', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorScope" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor" />*/

$.ig.util.defType('ValueDescriptor', 'Object', {
	_value: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Value()" />*/
	,
	_label: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Label()" />*/
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Label()" />*/
	,
	init: function (initNumber, valueObject, labelText) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.value(valueObject);
		this.label(labelText == null ? (valueObject == null ? null : valueObject.toString()) : labelText);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.value($.ig.JsonUtility.prototype.loadObject(json, "Value"));
		this.label($.ig.JsonUtility.prototype.loadString(json, "Label"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Value", this.value());
		$.ig.JsonUtility.prototype.saveObject(json, "Label", this.label());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Clone()" />*/
	clone: function () {
		return new $.ig.ValueDescriptor(0, this.value(), this.label());
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor::Clone()" />*/
	,
	$type: new $.ig.Type('ValueDescriptor', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.ValueDescriptor" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Api.TaskHandle" />*/

$.ig.util.defType('TaskHandle', 'Object', {
	_isCancelled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.TaskHandle::IsCancelled()" />*/
	isCancelled: function (value) {
		if (arguments.length === 1) {
			this._isCancelled = value;
			return value;
		} else {
			return this._isCancelled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Api.TaskHandle::IsCancelled()" />*/
	,
	_onCancel: null,
	_internalTasks: null,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Api.TaskHandle Infragistics.ReportPlus.DataLayer.Api.TaskHandle::InternalTask()" />*/
	internalTask: function (value) {
		if (arguments.length === 1) {
			this._internalTasks = new $.ig.Array();
			this._internalTasks.add(value);
			return value;
		} else {
			return this._internalTasks == null || this._internalTasks.length == 0 ? null : this._internalTasks[0];
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Api.TaskHandle Infragistics.ReportPlus.DataLayer.Api.TaskHandle::InternalTask()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.TaskHandle.prototype.init1.call(this, 1, null);
	},
	init1: function (initNumber, cancelHandler) {
		$.ig.Object.prototype.init.call(this);
		this._onCancel = cancelHandler;
		this.isCancelled(false);
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.TaskHandle::AddInternalTask(Infragistics.ReportPlus.DataLayer.Api.TaskHandle)" />*/
	addInternalTask: function (t) {
		if (this._internalTasks == null) {
			this._internalTasks = new $.ig.Array();
		}
		this._internalTasks.add(t);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.TaskHandle::AddInternalTask(Infragistics.ReportPlus.DataLayer.Api.TaskHandle)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.TaskHandle::Cancel()" />*/
	cancel: function () {
		this.isCancelled(true);
		if (this._internalTasks != null) {
			var count = this._internalTasks.length;
			for (var i = 0; i < count; i++) {
				(this._internalTasks[i]).cancel();
			}
		}
		if (this._onCancel != null) {
			this._onCancel();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Api.TaskHandle::Cancel()" />*/
	,
	$type: new $.ig.Type('TaskHandle', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Api.TaskHandle" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.FilterUtility" />*/

$.ig.util.defType('FilterUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::SpecIsFilteredOrSorted(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.Boolean)" />*/
	specIsFilteredOrSorted: function (spec, transposed) {
		var fields = transposed ? spec.transposedFields() : spec.fields();
		var fieldCount = fields.length;
		for (var f = 0; f < fieldCount; f++) {
			var field = fields[f];
			if ($.ig.FilterUtility.prototype.fieldIsFiltered(field) || $.ig.FilterUtility.prototype.fieldIsSorted(field)) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::SpecIsFilteredOrSorted(Infragistics.ReportPlus.DashboardModel.TabularDataSpec, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldIsFiltered(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	fieldIsFiltered: function (field) {
		var filter = field.filter();
		if (filter == null || filter.filterType() == $.ig.DashboardFilterEnumType.prototype.allValues) {
			return false;
		}
		return $.ig.FilterUtility.prototype.isFilterFiltering(filter);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldIsFiltered(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetFilteredFields(System.Collections.ArrayList)" />*/
	getFilteredFields: function (fields) {
		var result = new $.ig.Array();
		var count = fields.length;
		for (var f = 0; f < count; f++) {
			var field = fields[f];
			if ($.ig.FilterUtility.prototype.fieldIsFiltered(field)) {
				result.add(field);
			}
		}
		return result;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetFilteredFields(System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldIsSorted(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	fieldIsSorted: function (field) {
		return field.sorting() != $.ig.DashboardSortingType.prototype.none;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldIsSorted(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldHasValidFiscalYearStartMonth(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	fieldHasValidFiscalYearStartMonth: function (field) {
		if ($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, field.settings()) !== null) {
			return $.ig.FilterUtility.prototype.isValidFiscalYearStartMonth((field.settings()).dateFiscalYearStartMonth());
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::FieldHasValidFiscalYearStartMonth(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsValidFiscalYearStartMonth(System.Int32)" />*/
	isValidFiscalYearStartMonth: function (startMonth) {
		return startMonth > 1 && startMonth < 13;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsValidFiscalYearStartMonth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetFiscalYearStartMonth(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	getFiscalYearStartMonth: function (field) {
		if ($.ig.util.cast($.ig.DateTimeFieldSettings.prototype.$type, field.settings()) !== null) {
			var startMonth = (field.settings()).dateFiscalYearStartMonth();
			return $.ig.FilterUtility.prototype.isValidFiscalYearStartMonth(startMonth) ? startMonth : 0;
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetFiscalYearStartMonth(Infragistics.ReportPlus.DashboardModel.Field)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetAggregationLabel(System.String, Infragistics.ReportPlus.DashboardModel.DashboardAggregationType, System.Boolean)" />*/
	getAggregationLabel: function (fieldName, aggregationType, localized) {
		if (localized) {
			return fieldName;
		}
		switch (aggregationType) {
			case $.ig.DashboardAggregationType.prototype.avg: return "Avg of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.countNonEmpty: return "Count of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.countRows: return "Count of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.countDistinct: return "Count Distinct of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.max: return "Max of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.min: return "Min of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.stDev: return "StDev of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.sum: return "Sum of " + fieldName;
			case $.ig.DashboardAggregationType.prototype.variance: return "Var of " + fieldName;
			default: return "?";
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::GetAggregationLabel(System.String, Infragistics.ReportPlus.DashboardModel.DashboardAggregationType, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsFilterFiltering(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	isFilterFiltering: function (filter) {
		switch (filter.filterType()) {
			case $.ig.DashboardFilterEnumType.prototype.selectedValues: return filter.selectedValues() != null && filter.selectedValues().length > 0;
			case $.ig.DashboardFilterEnumType.prototype.filterEmptyValues: return true;
			case $.ig.DashboardFilterEnumType.prototype.filterByRule: return $.ig.FilterUtility.prototype.isFilteredByRule(filter);
			default: return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsFilterFiltering(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsFilteredByRule(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	isFilteredByRule: function (filter) {
		if ($.ig.util.cast($.ig.StringFilter.prototype.$type, filter) !== null) {
			var strFilter = filter;
			return strFilter.ruleType() != $.ig.DashboardStringRuleType.prototype.none && strFilter.value() != null && strFilter.value().length > 0;
		} else if ($.ig.util.cast($.ig.NumberFilter.prototype.$type, filter) !== null) {
			var numFilter = filter;
			switch (numFilter.ruleType()) {
				case $.ig.DashboardNumberRuleType.prototype.aboveEqualsValue:
				case $.ig.DashboardNumberRuleType.prototype.aboveValue:
				case $.ig.DashboardNumberRuleType.prototype.belowValue:
				case $.ig.DashboardNumberRuleType.prototype.belowEqualsValue:
				case $.ig.DashboardNumberRuleType.prototype.bottomItems:
				case $.ig.DashboardNumberRuleType.prototype.bottomPercent:
				case $.ig.DashboardNumberRuleType.prototype.topItems:
				case $.ig.DashboardNumberRuleType.prototype.topPercent:
					return !$.ig.NativeDataLayerUtility.prototype.isNullDouble(numFilter.value());
				case $.ig.DashboardNumberRuleType.prototype.aboveAverage:
				case $.ig.DashboardNumberRuleType.prototype.belowAverage:
					return true;
				case $.ig.DashboardNumberRuleType.prototype.none:
				default:
					return false;
			}
		} else if ($.ig.util.cast($.ig.DateTimeFilter.prototype.$type, filter) !== null) {
			var dtFilter = filter;
			switch (dtFilter.ruleType()) {
				case $.ig.DashboardDateRuleType.prototype.customRange:
					if (dtFilter.customDateRange() == null) {
						return false;
					}
					var hasFrom = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(dtFilter.customDateRange().from());
					var hasTo = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(dtFilter.customDateRange().to());
					return hasFrom || hasTo;
				case $.ig.DashboardDateRuleType.prototype.allTime:
				case $.ig.DashboardDateRuleType.prototype.none:
					return false;
				default: return true;
			}
		} else if ($.ig.util.cast($.ig.TimeFilter.prototype.$type, filter) !== null) {
			var tFilter = filter;
			switch (tFilter.ruleType()) {
				case $.ig.DashboardTimeRuleType.prototype.customRange:
					if (tFilter.customTimeRange() == null) {
						return false;
					}
					var hasFrom1 = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(tFilter.customTimeRange().from());
					var hasTo1 = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(tFilter.customTimeRange().to());
					return hasFrom1 || hasTo1;
				default: return false;
			}
		} else if ($.ig.util.cast($.ig.XmlaDateFilter.prototype.$type, filter) !== null) {
			var xFilter = filter;
			switch (xFilter.ruleType()) {
				case $.ig.DashboardDateRuleType.prototype.customRange:
					if (xFilter.customDateRange() == null) {
						return false;
					}
					var hasFrom2 = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(xFilter.customDateRange().from());
					var hasTo2 = !$.ig.NativeDataLayerUtility.prototype.isNullDateTime(xFilter.customDateRange().to());
					return hasFrom2 || hasTo2;
				case $.ig.DashboardDateRuleType.prototype.allTime:
				case $.ig.DashboardDateRuleType.prototype.none:
					return false;
				default: return true;
			}
		} else if ($.ig.util.cast($.ig.XmlaRegularFilter.prototype.$type, filter) !== null) {
			var xFilter1 = filter;
			var rule = xFilter1.filterRule();
			if ($.ig.util.cast($.ig.XmlaStringFilterRule.prototype.$type, rule) !== null) {
				var xRule = rule;
				return xRule.ruleType() != $.ig.DashboardStringRuleType.prototype.none && xRule.value() != null && xRule.value().length > 0;
			} else if ($.ig.util.cast($.ig.XmlaNumberFilterRule.prototype.$type, rule) !== null) {
				var xRule1 = rule;
				switch (xRule1.ruleType()) {
					case $.ig.DashboardNumberRuleType.prototype.aboveEqualsValue:
					case $.ig.DashboardNumberRuleType.prototype.aboveValue:
					case $.ig.DashboardNumberRuleType.prototype.belowValue:
					case $.ig.DashboardNumberRuleType.prototype.belowEqualsValue:
					case $.ig.DashboardNumberRuleType.prototype.bottomItems:
					case $.ig.DashboardNumberRuleType.prototype.bottomPercent:
					case $.ig.DashboardNumberRuleType.prototype.topItems:
					case $.ig.DashboardNumberRuleType.prototype.topPercent:
						return !$.ig.NativeDataLayerUtility.prototype.isNullDouble(xRule1.value());
					case $.ig.DashboardNumberRuleType.prototype.aboveAverage:
					case $.ig.DashboardNumberRuleType.prototype.belowAverage:
						return true;
					case $.ig.DashboardNumberRuleType.prototype.none:
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.FilterUtility::IsFilteredByRule(Infragistics.ReportPlus.DashboardModel.Filter)" />*/
	,
	$type: new $.ig.Type('FilterUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.FilterUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.Sorter" />*/

$.ig.util.defType('Sorter', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::Sort(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, )" />*/
	sort: function (table, sortMapping) {
		var allColumnSorts = new Array(table.columnCount());
		var colCount = table.columnCount();
		var sortCount = 0;
		for (var i = 0; i < colCount; i++) {
			if (sortMapping[i] != $.ig.Sorter.prototype.sort_None) {
				allColumnSorts[sortCount] = i;
				sortCount++;
			}
		}
		var sortOrder = new Array(sortCount);
		for (var i1 = 0; i1 < sortCount; i1++) {
			sortOrder[i1] = allColumnSorts[i1];
		}
		return $.ig.Sorter.prototype.sort1(table, sortMapping, sortOrder);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::Sort(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, )" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::Sort(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, , )" />*/
	sort1: function (table, sortMapping, sortOrder) {
		var hasTotalsRow = table.hasTotalsRow();
		var columnCount = sortMapping.length;
		var rowCount = hasTotalsRow ? table.rowCount() - 1 : table.rowCount();
		for (var i = sortOrder.length - 1; i >= 0; i--) {
			var c = sortOrder[i];
			var sort = sortMapping[c];
			if (sort == $.ig.Sorter.prototype.sort_Asc || sort == $.ig.Sorter.prototype.sort_Desc) {
				var dataColumn = table.getDataColumn(c);
				var rowMapping;
				if (dataColumn._values != null) {
					rowMapping = $.ig.NativeDataLayerUtility.prototype.getDoubleArraySortMapping(dataColumn._values, sort == $.ig.Sorter.prototype.sort_Asc, rowCount);
				} else {
					rowMapping = $.ig.NativeDataLayerUtility.prototype.getObjectArraySortMapping(dataColumn._labels, sort == $.ig.Sorter.prototype.sort_Asc, rowCount);
				}
				table = $.ig.Sorter.prototype.reorderRows(table, rowMapping);
			}
		}
		return table;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::Sort(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, , )" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::ReorderRows(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, )" />*/
	reorderRows: function (table, rowMapping) {
		var rowCount = table.rowCount();
		if (table.hasTotalsRow()) {
			rowCount--;
		}
		var columnCount = table.columnCount();
		for (var c = 0; c < columnCount; c++) {
			var dataColumn = table.getDataColumn(c);
			if (dataColumn._values != null) {
				$.ig.NativeDataLayerUtility.prototype.sortDoubleArrayWithMapping(dataColumn._values, rowMapping, rowCount);
			} else {
				$.ig.NativeDataLayerUtility.prototype.sortObjectArrayWithMapping(dataColumn._labels, rowMapping, rowCount);
			}
			if (dataColumn._cells != null) {
				$.ig.NativeDataLayerUtility.prototype.sortObjectArrayWithMapping(dataColumn._cells, rowMapping, rowCount);
			}
		}
		return table;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.InMemoryDataTable Infragistics.ReportPlus.DataLayer.Engine.Sorter::ReorderRows(Infragistics.ReportPlus.DataLayer.InMemoryDataTable, )" />*/
	,
	$type: new $.ig.Type('Sorter', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.Sorter" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.Util.EngineConstants" />*/

$.ig.util.defType('EngineConstants', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('EngineConstants', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.Util.EngineConstants" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata" />*/

$.ig.util.defType('AzureServiceMetadata', 'Object', {
	_executeUrl: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::ExecuteUrl()" />*/
	executeUrl: function (value) {
		if (arguments.length === 1) {
			this._executeUrl = value;
			return value;
		} else {
			return this._executeUrl;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::ExecuteUrl()" />*/
	,
	_globalParameters: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::GlobalParameters()" />*/
	globalParameters: function (value) {
		if (arguments.length === 1) {
			this._globalParameters = value;
			return value;
		} else {
			return this._globalParameters;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::GlobalParameters()" />*/
	,
	_inputPropertyName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::InputPropertyName()" />*/
	inputPropertyName: function (value) {
		if (arguments.length === 1) {
			this._inputPropertyName = value;
			return value;
		} else {
			return this._inputPropertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::InputPropertyName()" />*/
	,
	_inputFields: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::InputFields()" />*/
	inputFields: function (value) {
		if (arguments.length === 1) {
			this._inputFields = value;
			return value;
		} else {
			return this._inputFields;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::InputFields()" />*/
	,
	_outputPropertyName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::OutputPropertyName()" />*/
	outputPropertyName: function (value) {
		if (arguments.length === 1) {
			this._outputPropertyName = value;
			return value;
		} else {
			return this._outputPropertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::OutputPropertyName()" />*/
	,
	_outputFields: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::OutputFields()" />*/
	outputFields: function (value) {
		if (arguments.length === 1) {
			this._outputFields = value;
			return value;
		} else {
			return this._outputFields;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::OutputFields()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.executeUrl($.ig.JsonUtility.prototype.loadString(json, "ExecuteUrl"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "GlobalParameters")) {
			this.globalParameters(new $.ig.Array());
			var parameters = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "GlobalParameters");
			for (var i = 0; i < parameters.length; i++) {
				var field = new $.ig.AzureServiceMetadataField(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(parameters[i]));
				this.globalParameters().add(field);
			}
		}
		this.inputPropertyName($.ig.JsonUtility.prototype.loadString(json, "InputPropertyName"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "InputFields")) {
			this.inputFields(new $.ig.Array());
			var fields = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "InputFields");
			for (var i1 = 0; i1 < fields.length; i1++) {
				var field1 = new $.ig.AzureServiceMetadataField(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(fields[i1]));
				this.inputFields().add(field1);
			}
		}
		this.outputPropertyName($.ig.JsonUtility.prototype.loadString(json, "OutputPropertyName"));
		if ($.ig.JsonUtility.prototype.containsKey(json, "OutputFields")) {
			this.outputFields(new $.ig.Array());
			var fields1 = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "OutputFields");
			for (var i2 = 0; i2 < fields1.length; i2++) {
				var field2 = new $.ig.AzureServiceMetadataField(1, $.ig.NativeDataLayerUtility.prototype.getJsonObject(fields1[i2]));
				this.outputFields().add(field2);
			}
		}
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "ExecuteUrl", this.executeUrl());
		$.ig.JsonUtility.prototype.saveObject(json, "InputPropertyName", this.inputPropertyName());
		$.ig.JsonUtility.prototype.saveObject(json, "OutputPropertyName", this.outputPropertyName());
		if (this.globalParameters() != null) {
			var jsonParams = new $.ig.Array();
			for (var i = 0; i < this.globalParameters().length; i++) {
				var param = this.globalParameters()[i];
				jsonParams.add(param.toJson());
			}
			$.ig.JsonUtility.prototype.saveObject(json, "GlobalParameters", jsonParams);
		}
		if (this.inputFields() != null) {
			var jsonFields = new $.ig.Array();
			for (var i1 = 0; i1 < this.inputFields().length; i1++) {
				var field = this.inputFields()[i1];
				jsonFields.add(field.toJson());
			}
			$.ig.JsonUtility.prototype.saveObject(json, "InputFields", jsonFields);
		}
		if (this.outputFields() != null) {
			var jsonFields1 = new $.ig.Array();
			for (var i2 = 0; i2 < this.outputFields().length; i2++) {
				var field1 = this.outputFields()[i2];
				jsonFields1.add(field1.toJson());
			}
			$.ig.JsonUtility.prototype.saveObject(json, "OutputFields", jsonFields1);
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata::ToJson()" />*/
	,
	$type: new $.ig.Type('AzureServiceMetadata', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadata" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField" />*/

$.ig.util.defType('AzureServiceMetadataField', 'Object', {
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Name()" />*/
	,
	_type: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Type()" />*/
	,
	_format: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::Format()" />*/
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		$.ig.Object.prototype.init.call(this);
		this.name($.ig.JsonUtility.prototype.loadString(json, "Name"));
		this.type($.ig.JsonUtility.prototype.loadString(json, "Type"));
		this.format($.ig.JsonUtility.prototype.loadString(json, "Format"));
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "Name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "Type", this.type());
		$.ig.JsonUtility.prototype.saveObject(json, "Format", this.format());
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField::ToJson()" />*/
	,
	$type: new $.ig.Type('AzureServiceMetadataField', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.ML.AzureServiceMetadataField" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility" />*/

$.ig.util.defType('AdHocUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility::AddHierarchyDetailsToJSON(System.JSDictionary, System.Collections.ArrayList)" />*/
	addHierarchyDetailsToJSON: function (json, hierarchyDetails) {
		var jsonRowsHierarchyRawInfo = new $.ig.Array();
		for (var i = 0; i < hierarchyDetails.length; i++) {
			jsonRowsHierarchyRawInfo.add(hierarchyDetails[i]);
		}
		json["HierarchyDetailsRaw"] = jsonRowsHierarchyRawInfo;
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility::AddHierarchyDetailsToJSON(System.JSDictionary, System.Collections.ArrayList)" />*/
	,
	/*<BeginMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility::ReadRowHierarchyDetailsFromJSON(System.JSDictionary)" />*/
	readRowHierarchyDetailsFromJSON: function (json) {
		var rowsHierarchyRawInfo = new $.ig.Array();
		var hierarchyDetailsRaw = $.ig.NativeDataLayerUtility.prototype.getJsonList(json, "HierarchyDetailsRaw");
		var count = hierarchyDetailsRaw.length;
		for (var c = 0; c < count; c++) {
			rowsHierarchyRawInfo.add(hierarchyDetailsRaw[c]);
		}
		return rowsHierarchyRawInfo;
	}
	/*<EndMethod Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility::ReadRowHierarchyDetailsFromJSON(System.JSDictionary)" />*/
	,
	$type: new $.ig.Type('AdHocUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult" />*/

$.ig.util.defType('AggregationChangeResult', 'Object', {
	init: function (initNumber, isSuccessful) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.isSuccessfull(true);
	},
	init1: function (initNumber, isSuccessful, result) {
		$.ig.Object.prototype.init.call(this);
		this.isSuccessfull(true);
		this.result(result);
	},
	_isSuccessfull: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult::IsSuccessfull()" />*/
	isSuccessfull: function (value) {
		if (arguments.length === 1) {
			this._isSuccessfull = value;
			return value;
		} else {
			return this._isSuccessfull;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult::IsSuccessfull()" />*/
	,
	_result: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult::Result()" />*/
	result: function (value) {
		if (arguments.length === 1) {
			this._result = value;
			return value;
		} else {
			return this._result;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult::Result()" />*/
	,
	$type: new $.ig.Type('AggregationChangeResult', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AggregationChangeResult" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.Expressions.NativeExprUtility" />*/

$.ig.util.defType('NativeExprUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.NativeExprUtility::ToUpperFirst(System.String)" />*/
	toUpperFirst: function (s) {
		if (s.length < 2) {
			return s.toUpperCase();
		} else {
			return s.substr(0, 1).toUpperCase() + s.substr(1).toLowerCase();
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.NativeExprUtility::ToUpperFirst(System.String)" />*/
	,
	$type: new $.ig.Type('NativeExprUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.Expressions.NativeExprUtility" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor" />*/

$.ig.util.defType('ExprFunctionDescriptor', 'Object', {
	_category: null,
	_functionName: null,
	_parameterNames: null,
	_minParameters: 0,
	_localizedParameterNames: null,
	_allowUnlimitedParameters: false,
	init: function (initNumber, category, functionName, parameterNames, minParameters, allowUnlimitedParameters) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ExprFunctionDescriptor.prototype.init1.call(this, 1, category, functionName, parameterNames, minParameters);
		this._allowUnlimitedParameters = allowUnlimitedParameters;
	},
	init1: function (initNumber, category, functionName, parameterNames, minParameters) {
		this._allowUnlimitedParameters = false;
		$.ig.Object.prototype.init.call(this);
		this._category = category;
		this._functionName = functionName;
		this._parameterNames = parameterNames;
		this._minParameters = minParameters;
		this._localizedParameterNames = new $.ig.Array();
		if (parameterNames != null) {
			for (var i = 0; i < parameterNames.length; i++) {
				var param = parameterNames[i];
				this._localizedParameterNames.add($.ig.NativeDataLayerLocalizeUtil.prototype.localize(param.toLowerCase()));
			}
		}
		this.isEnabled(true);
	},
	init2: function (initNumber, json) {
		this._allowUnlimitedParameters = false;
		$.ig.Object.prototype.init.call(this);
		this._category = $.ig.JsonUtility.prototype.loadString(json, "categoryName");
		this._functionName = $.ig.JsonUtility.prototype.loadString(json, "name");
		this._parameterNames = $.ig.JsonUtility.prototype.loadStringList(json, "parameterNames");
		this._minParameters = $.ig.JsonUtility.prototype.loadInt(json, "minParameterCount");
		this._allowUnlimitedParameters = $.ig.JsonUtility.prototype.loadBool(json, "allowUnlimitedParameters");
		this._localizedParameterNames = new $.ig.Array();
		if (this._parameterNames != null) {
			for (var i = 0; i < this._parameterNames.length; i++) {
				var param = this._parameterNames[i];
				this._localizedParameterNames.add($.ig.NativeDataLayerLocalizeUtil.prototype.localize(param.toLowerCase()));
			}
		}
		this.isEnabled(true);
	},
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::Name()" />*/
	name: function () {
		return this._functionName;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::Name()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::MinParameterCount()" />*/
	minParameterCount: function () {
		return this._minParameters;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::MinParameterCount()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::MaxParameterCount()" />*/
	maxParameterCount: function () {
		return this._parameterNames == null ? 0 : this._parameterNames.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::MaxParameterCount()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::FunctionDescription()" />*/
	functionDescription: function () {
		return $.ig.NativeDataLayerLocalizeUtil.prototype.localize("ExpHelp" + $.ig.NativeExprUtility.prototype.toUpperFirst(this._functionName));
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::FunctionDescription()" />*/
	,
	/*<BeginProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::LocalizedParameterNames()" />*/
	localizedParameterNames: function () {
		return this._localizedParameterNames;
	}
	/*<EndProperty Name="System.Collections.ArrayList Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::LocalizedParameterNames()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::CategoryName()" />*/
	categoryName: function () {
		return this._category;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::CategoryName()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::LocalizedCategoryName()" />*/
	localizedCategoryName: function () {
		return $.ig.NativeDataLayerLocalizeUtil.prototype.localize("ExpCategory" + $.ig.NativeExprUtility.prototype.toUpperFirst(this._category));
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::LocalizedCategoryName()" />*/
	,
	_isEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::IsEnabled()" />*/
	isEnabled: function (value) {
		if (arguments.length === 1) {
			this._isEnabled = value;
			return value;
		} else {
			return this._isEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::IsEnabled()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::IsParameterCountValid(System.Int32)" />*/
	isParameterCountValid: function (parameterCount) {
		if (parameterCount < this.minParameterCount() || (parameterCount > this.maxParameterCount() && this._allowUnlimitedParameters == false)) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::IsParameterCountValid(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::Clone()" />*/
	clone: function () {
		return new $.ig.ExprFunctionDescriptor(0, this._category, this._functionName, this._parameterNames, this._minParameters, this._allowUnlimitedParameters);
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::Clone()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::ToJson()" />*/
	toJson: function () {
		var json = {};
		$.ig.JsonUtility.prototype.saveObject(json, "_type", $.ig.JsonUtility.prototype.getClassTypeName(this));
		$.ig.JsonUtility.prototype.saveObject(json, "categoryName", this.categoryName());
		$.ig.JsonUtility.prototype.saveObject(json, "localizedCategoryName", this.localizedCategoryName());
		$.ig.JsonUtility.prototype.saveObject(json, "name", this.name());
		$.ig.JsonUtility.prototype.saveObject(json, "functionDescription", this.functionDescription());
		$.ig.JsonUtility.prototype.saveStringList(json, "parameterNames", this._parameterNames);
		$.ig.JsonUtility.prototype.saveInt(json, "minParameterCount", this.minParameterCount());
		$.ig.JsonUtility.prototype.saveInt(json, "maxParameterCount", this.maxParameterCount());
		$.ig.JsonUtility.prototype.saveStringList(json, "localizedParameterNames", this.localizedParameterNames());
		$.ig.JsonUtility.prototype.saveBool(json, "allowUnlimitedParameters", this._allowUnlimitedParameters);
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor::ToJson()" />*/
	,
	$type: new $.ig.Type('ExprFunctionDescriptor', $.ig.Object.prototype.$type, [$.ig.IDashboardModelObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Engine.Expressions.ExprFunctionDescriptor" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils" />*/

$.ig.util.defType('WebResourceUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	staticInit: function () {
		$.ig.WebResourceUtils.prototype.__placeholdersRegex = new $.ig.CPRegex("\\{([^\\{\\}]+)\\}");
	},
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::GetURLPlaceHolders(System.String)" />*/
	getURLPlaceHolders: function (url) {
		var matches = $.ig.WebResourceUtils.prototype.__placeholdersRegex.matches(url);
		var result = new $.ig.Array();
		for (var i = 0; i < matches.length; i++) {
			var match = matches[i];
			result.add((match.groups()[1]).value());
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::GetURLPlaceHolders(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::ReplaceURLPlaceholders(System.String, Infragistics.CPDictionary)" />*/
	replaceURLPlaceholders: function (url, values) {
		return $.ig.WebResourceUtils.prototype.__placeholdersRegex.replace(url, function (m) {
			var replacement = values.get((m.groups()[1]).value());
			return replacement != null ? replacement : m.value();
		});
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::ReplaceURLPlaceholders(System.String, Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsPathParameter(System.String, System.String, System.Int32)" />*/
	isPathParameter: function (url, param, questionMarkIndex) {
		if (questionMarkIndex == -1) {
			return true;
		}
		return $.ig.NativeStringUtility.prototype.indexOf(url, param) < questionMarkIndex;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsPathParameter(System.String, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::SplitParameter(System.String)" />*/
	splitParameter: function (stringToSplit) {
		var equalSignIndex = $.ig.NativeStringUtility.prototype.indexOf(stringToSplit, "=");
		if (equalSignIndex == -1) {
			return null;
		}
		var result = new Array(2);
		result[0] = $.ig.NativeDataLayerUtility.prototype.stringSubstring1(stringToSplit, 0, equalSignIndex);
		result[1] = $.ig.NativeDataLayerUtility.prototype.stringSubstring(stringToSplit, equalSignIndex + 1);
		return result;
	}
	/*<EndMethod Name=" Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::SplitParameter(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsDynamicsOnline(System.String)" />*/
	isDynamicsOnline: function (hostName) {
		return (hostName != null && $.ig.NativeStringUtility.prototype.contains(hostName, ".crm") && ($.ig.NativeStringUtility.prototype.endsWith(hostName, ".dynamics.com") || $.ig.NativeStringUtility.prototype.endsWith(hostName, ".dynamics.com/")));
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsDynamicsOnline(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsOnPremUnreachableHost(System.String)" />*/
	isOnPremUnreachableHost: function (host) {
		return host == null || $.ig.WebResourceUtils.prototype.isSimpleHostName(host) || $.ig.WebResourceUtils.prototype.isLocalDomain(host) || $.ig.WebResourceUtils.prototype.isInternalIpAddress(host);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsOnPremUnreachableHost(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsSimpleHostName(System.String)" />*/
	isSimpleHostName: function (host) {
		var dotIndex = $.ig.NativeDataLayerUtility.prototype.stringIndexOf(host, ".");
		if (dotIndex >= 0) {
			var s = $.ig.NativeDataLayerUtility.prototype.stringSubstring(host, dotIndex + 1);
			return $.ig.NativeDataLayerUtility.prototype.stringIndexOf(s, ".") < 0;
		} else {
			return true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsSimpleHostName(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsLocalDomain(System.String)" />*/
	isLocalDomain: function (host) {
		return $.ig.NativeStringUtility.prototype.endsWith(host.toLowerCase(), ".local");
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsLocalDomain(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsInternalIpAddress(System.String)" />*/
	isInternalIpAddress: function (host) {
		if (host.startsWith("10.") || host.startsWith("192.168.")) {
			return true;
		} else if (host.startsWith("172.")) {
			host = $.ig.NativeDataLayerUtility.prototype.stringSubstring(host, 4);
			var dotIndex = $.ig.NativeDataLayerUtility.prototype.stringIndexOf(host, ".");
			if (dotIndex > 0) {
				var component = $.ig.NativeDataLayerUtility.prototype.stringSubstring1(host, 0, dotIndex);
				if ($.ig.NativeStringUtility.prototype.isNumeric(component)) {
					var n = $.ig.NativeStringUtility.prototype.parseNumber(component);
					return n >= 16 && n <= 31;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils::IsInternalIpAddress(System.String)" />*/
	,
	$type: new $.ig.Type('WebResourceUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.Sql.SqlBaseMetadataModel" />*/

$.ig.util.defType('SqlBaseMetadataModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('SqlBaseMetadataModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.Sql.SqlBaseMetadataModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel" />*/

$.ig.util.defType('S3ProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	bucketName: function (dataSourceItem) {
		return dataSourceItem.properties().getObjectValue($.ig.S3ProviderModel.prototype._bUCKET_NAME);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketName2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	bucketName2: function (mi) {
		return mi.properties().getObjectValue($.ig.S3ProviderModel.prototype._bUCKET_NAME);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketName2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Key(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	key: function (dataSourceItem) {
		return dataSourceItem.properties().getObjectValue($.ig.S3ProviderModel.prototype._kEY);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Key(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Key2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	key2: function (mi) {
		return mi.properties().getObjectValue($.ig.S3ProviderModel.prototype._kEY);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Key2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetAWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setAWSAccount: function (ds, id) {
		ds.properties().setObjectValue($.ig.S3ProviderModel.prototype._aWS_ACCOUNT_ID, id);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetAWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::AWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	aWSAccount: function (dataSource) {
		return dataSource.properties().getObjectValue($.ig.S3ProviderModel.prototype._aWS_ACCOUNT_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::AWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetRegion(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setRegion: function (ds, region) {
		ds.properties().setObjectValue($.ig.S3ProviderModel.prototype._rEGION, region);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetRegion(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Region(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	region: function (dataSource) {
		return dataSource.properties().getObjectValue($.ig.S3ProviderModel.prototype._rEGION);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::Region(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetProperties2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	setProperties2: function (mi, bucketName, key) {
		mi.properties().setObjectValue($.ig.S3ProviderModel.prototype._bUCKET_NAME, bucketName);
		mi.properties().setObjectValue($.ig.S3ProviderModel.prototype._kEY, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetProperties2(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetProperties(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String, System.String)" />*/
	setProperties: function (dsItem, bucketName, key) {
		dsItem.properties().setObjectValue($.ig.S3ProviderModel.prototype._bUCKET_NAME, bucketName);
		dsItem.properties().setObjectValue($.ig.S3ProviderModel.prototype._kEY, key);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetProperties(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::FormattedAWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	formattedAWSAccount: function (datasource) {
		var account = $.ig.S3ProviderModel.prototype.aWSAccount(datasource);
		if (account == null) {
			return null;
		}
		var GROUP_LEN = 4;
		var parts = $.ig.intDivide(account.length, GROUP_LEN);
		var start = account.length % GROUP_LEN;
		var formatted = $.ig.NativeStringUtility.prototype.substring(account, 0, start);
		for (var i = 0; i < parts; i++) {
			if (formatted.length > 0) {
				formatted = formatted + "-";
			}
			formatted = formatted + $.ig.NativeStringUtility.prototype.substring(account, start, GROUP_LEN);
			start += GROUP_LEN;
		}
		return formatted;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::FormattedAWSAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::S3Path(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	s3Path: function (dsi) {
		return "s3://" + $.ig.S3ProviderModel.prototype.bucketName(dsi) + "/" + $.ig.S3ProviderModel.prototype.key(dsi);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::S3Path(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketNameFromS3Path(System.String)" />*/
	bucketNameFromS3Path: function (s3path) {
		return $.ig.CPStringUtility.prototype.getURLAuthority(s3path);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::BucketNameFromS3Path(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::KeyFromS3Path(System.String)" />*/
	keyFromS3Path: function (s3path) {
		var path = $.ig.CPStringUtility.prototype.getPathFromURI(s3path);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(path)) {
			return path;
		}
		return $.ig.CPStringUtility.prototype.substring(path, 1);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::KeyFromS3Path(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetPropertiesWithS3Path(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String)" />*/
	setPropertiesWithS3Path: function (dsi, path) {
		$.ig.S3ProviderModel.prototype.setProperties(dsi, $.ig.S3ProviderModel.prototype.bucketNameFromS3Path(path), $.ig.S3ProviderModel.prototype.keyFromS3Path(path));
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel::SetPropertiesWithS3Path(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String)" />*/
	,
	$type: new $.ig.Type('S3ProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel" />*/

$.ig.util.defType('QuickBooksProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::Entity(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	entity: function (item) {
		return item.properties().getObjectValue($.ig.QuickBooksProviderModel.prototype._eNTITY);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::Entity(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetEntity(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	setEntity: function (mi, entityName) {
		mi.properties().setObjectValue($.ig.QuickBooksProviderModel.prototype._eNTITY, entityName);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetEntity(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	metadataItemRoot: function (ds) {
		var root = new $.ig.MetadataItem(0);
		root.dataSource(ds);
		root.dataSourceItem(null);
		root.hasData(false);
		root.hasResource(false);
		root.isContainer(true);
		root.id(ds.id());
		root.displayName(ds.description());
		root.groupId($.ig.MetadataLayerConstants.prototype.providersGroupCustomerRelationshipManagers);
		root.iconId($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		root.itemType($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		return root;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::MetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	metadataItem: function (ds, entityName) {
		var dsItem = new $.ig.DataSourceItem(0);
		dsItem.id(entityName);
		dsItem.hasAsset(false);
		dsItem.hasTabularData(true);
		dsItem.title(entityName);
		dsItem.dataSourceId(ds.id());
		$.ig.QuickBooksProviderModel.prototype.setEntityWithItem(dsItem, entityName);
		var mi = new $.ig.MetadataItem(0);
		mi.id(dsItem.id());
		mi.dataSource(ds);
		mi.displayName(dsItem.title());
		mi.hasData(true);
		mi.dataSourceItem(dsItem);
		$.ig.QuickBooksProviderModel.prototype.setEntity(mi, entityName);
		return mi;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::MetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetEntityWithItem(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String)" />*/
	setEntityWithItem: function (dsItem, entityName) {
		dsItem.properties().setObjectValue($.ig.QuickBooksProviderModel.prototype._eNTITY, entityName);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetEntityWithItem(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::AccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	accountId: function (datasource) {
		return datasource.properties().getObjectValue($.ig.EngineConstants.prototype.accountIdPropertyName);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::AccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::RealmId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	realmId: function (dataSource) {
		return dataSource.properties().getObjectValue($.ig.QuickBooksProviderModel.prototype._rEALM_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::RealmId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetRealmId(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setRealmId: function (dataSource, realmId) {
		dataSource.properties().setObjectValue($.ig.QuickBooksProviderModel.prototype._rEALM_ID, realmId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel::SetRealmId(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	$type: new $.ig.Type('QuickBooksProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry" />*/

$.ig.util.defType('JSONMetadataEntry', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.depth($.ig.JSONMetadataEntry.prototype._dEPTH_DEFAULT);
		this.mappingType($.ig.JSONMappingType.prototype.jSONMappingTypePath);
	},
	_dateIsUnixTimestamp: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::DateIsUnixTimestamp()" />*/
	dateIsUnixTimestamp: function (value) {
		if (arguments.length === 1) {
			this._dateIsUnixTimestamp = value;
			return value;
		} else {
			return this._dateIsUnixTimestamp;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::DateIsUnixTimestamp()" />*/
	,
	_columnIndex: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::ColumnIndex()" />*/
	columnIndex: function (value) {
		if (arguments.length === 1) {
			this._columnIndex = value;
			return value;
		} else {
			return this._columnIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::ColumnIndex()" />*/
	,
	_depth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Depth()" />*/
	depth: function (value) {
		if (arguments.length === 1) {
			this._depth = value;
			return value;
		} else {
			return this._depth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Depth()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::UseDefaultDepth()" />*/
	useDefaultDepth: function () {
		return this.depth() == $.ig.JSONMetadataEntry.prototype._dEPTH_DEFAULT;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::UseDefaultDepth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::GetEffectiveDepth(System.Int32)" />*/
	getEffectiveDepth: function (iterationDepth) {
		return this.useDefaultDepth() ? iterationDepth + 1 : this.depth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::GetEffectiveDepth(System.Int32)" />*/
	,
	_key: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Key()" />*/
	key: function (value) {
		if (arguments.length === 1) {
			this._key = value;
			return value;
		} else {
			return this._key;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Key()" />*/
	,
	_uniqueName: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::UniqueName()" />*/
	uniqueName: function (value) {
		if (arguments.length === 1) {
			this._uniqueName = value;
			return value;
		} else {
			return this._uniqueName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::UniqueName()" />*/
	,
	_type: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Type()" />*/
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::Type()" />*/
	,
	_mappingType: 0,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::MappingType()" />*/
	mappingType: function (value) {
		if (arguments.length === 1) {
			this._mappingType = value;
			return value;
		} else {
			return this._mappingType;
		}
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::MappingType()" />*/
	,
	_keyComponents: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::KeyComponents()" />*/
	keyComponents: function (value) {
		if (arguments.length === 1) {
			this._keyComponents = value;
			return value;
		} else {
			return this._keyComponents;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::KeyComponents()" />*/
	,
	_dateFormat: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::DateFormat()" />*/
	dateFormat: function (value) {
		if (arguments.length === 1) {
			this._dateFormat = value;
			return value;
		} else {
			return this._dateFormat;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry::DateFormat()" />*/
	,
	$type: new $.ig.Type('JSONMetadataEntry', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig" />*/

$.ig.util.defType('TabularDataSourceConfig', 'Object', {
	_json: null,
	init: function (json) {
		$.ig.Object.prototype.init.call(this);
		this._json = json;
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetServiceURL()" />*/
	getServiceURL: function () {
		return $.ig.JsonUtility.prototype.loadString(this._json, "serviceUrl");
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetServiceURL()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetIterationDepth()" />*/
	getIterationDepth: function () {
		return $.ig.JsonUtility.prototype.loadInt1(this._json, "iterationDepth", 0);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetIterationDepth()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetGenerateRowsWithAnything()" />*/
	getGenerateRowsWithAnything: function () {
		var v = $.ig.JsonUtility.prototype.loadOptionalBool(this._json, "generateRowsWithAnything");
		return !$.ig.NativeDataLayerUtility.prototype.isNull($.ig.util.unwrapNullable(v)) ? $.ig.NativeDataLayerUtility.prototype.unwrapBool(v) : false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetGenerateRowsWithAnything()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetColumnsConfig()" />*/
	getColumnsConfig: function () {
		var columnsConfig = $.ig.JsonUtility.prototype.loadObject(this._json, "columnsConfig");
		var tmpContainer = new $.ig.Array();
		for (var i = 0; i < columnsConfig.length; i++) {
			var columnConfig = $.ig.NativeDataLayerUtility.prototype.getJsonObject(columnsConfig[i]);
			var entry = new $.ig.JSONMetadataEntry();
			entry.columnIndex(i);
			if ($.ig.JsonUtility.prototype.containsKey(columnConfig, "depth")) {
				entry.depth($.ig.JsonUtility.prototype.loadInt(columnConfig, "depth"));
			}
			var mappingType = $.ig.JsonUtility.prototype.loadOptionalInt(columnConfig, "mappingType");
			if (!$.ig.NativeDataLayerUtility.prototype.isNull($.ig.util.unwrapNullable(mappingType))) {
				entry.mappingType(this.intToMappingType($.ig.NativeDataLayerUtility.prototype.unwrapInt(mappingType)));
			}
			$.ig.TabularDataSourceConfig.prototype.setKeyFromConfig(entry, $.ig.JsonUtility.prototype.loadString(columnConfig, "key"), this.getIterationDepth());
			entry.uniqueName($.ig.JsonUtility.prototype.containsKey(columnConfig, "uniqueName") ? $.ig.JsonUtility.prototype.loadString(columnConfig, "uniqueName") : entry.key());
			entry.type($.ig.TabularDataSourceConfig.prototype.intToDashboardDataType($.ig.JsonUtility.prototype.loadInt1(columnConfig, "type", 0)));
			if (entry.type() == $.ig.DashboardDataType.prototype.date || entry.type() == $.ig.DashboardDataType.prototype.dateTime || entry.type() == $.ig.DashboardDataType.prototype.time) {
				var dateFormat = $.ig.JsonUtility.prototype.loadString(columnConfig, "dateFormat");
				if (dateFormat == null) {
					dateFormat = entry.type() == $.ig.DashboardDataType.prototype.date ? $.ig.TabularDataSourceConfig.prototype.dEFAULT_DATE_PATTERN : (entry.type() == $.ig.DashboardDataType.prototype.dateTime ? $.ig.TabularDataSourceConfig.prototype.dEFAULT_DATE_TIME_PATTERN : "HH:mm");
				}
				entry.dateFormat(dateFormat);
			}
			tmpContainer.add(entry);
		}
		return tmpContainer;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetColumnsConfig()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::IntToMappingType(System.Int32)" />*/
	intToMappingType: function (mappingType) {
		switch (mappingType) {
			case 0: return $.ig.JSONMappingType.prototype.jSONMappingTypePath;
			case 1: return $.ig.JSONMappingType.prototype.jSONMappingTypeDictionaryKey;
			case 2: return $.ig.JSONMappingType.prototype.jSONMappingTypeDictionaryValue;
			default: return $.ig.JSONMappingType.prototype.jSONMappingTypePath;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::IntToMappingType(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetIterationLevelConfig()" />*/
	getIterationLevelConfig: function () {
		var cfgList = $.ig.JsonUtility.prototype.loadObject(this._json, "iterationLevelConfig");
		if (cfgList == null) {
			return null;
		}
		var r = new $.ig.Array();
		for (var i = 0; i < cfgList.length; i++) {
			var includeRule = null;
			var level = cfgList[i];
			if (!$.ig.NativeDataLayerUtility.prototype.isNull(level)) {
				var levelRules = $.ig.NativeDataLayerUtility.prototype.getJsonObject(level);
				includeRule = levelRules["include"];
			}
			r.add($.ig.NativeDataLayerUtility.prototype.wrapNull(includeRule));
		}
		return r;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetIterationLevelConfig()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetSuggestedTitle()" />*/
	getSuggestedTitle: function () {
		return $.ig.JsonUtility.prototype.loadString(this._json, "suggestedTitle");
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::GetSuggestedTitle()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::IntToDashboardDataType(System.Int32)" />*/
	intToDashboardDataType: function (num) {
		switch (num) {
			case 0: return $.ig.DashboardDataType.prototype.string1;
			case 1: return $.ig.DashboardDataType.prototype.number;
			case 2: return $.ig.DashboardDataType.prototype.date;
			case 3: return $.ig.DashboardDataType.prototype.dateTime;
			case 4: return $.ig.DashboardDataType.prototype.time;
			default:
				$.ig.TabularDataSourceConfig.prototype._logger.info1("Unexpected dashboard type: {}", num);
				return $.ig.DashboardDataType.prototype.string1;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::IntToDashboardDataType(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::DashboardDataTypeToInt(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	dashboardDataTypeToInt: function (dataType) {
		switch (dataType) {
			case $.ig.DashboardDataType.prototype.number: return 1;
			case $.ig.DashboardDataType.prototype.date: return 2;
			case $.ig.DashboardDataType.prototype.dateTime: return 3;
			case $.ig.DashboardDataType.prototype.time: return 4;
			default: return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::DashboardDataTypeToInt(Infragistics.ReportPlus.DashboardModel.DashboardDataType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::SetKeyFromConfig(Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry, System.String, System.Int32)" />*/
	setKeyFromConfig: function (entry, key, iterationDepth) {
		if (key == null) {
			return;
		}
		var kc = new $.ig.Array();
		var tmpComps;
		if ($.ig.NativeStringUtility.prototype.startsWith(key, "/")) {
			tmpComps = $.ig.NativeStringUtility.prototype.split($.ig.NativeStringUtility.prototype.substring(key, 1, key.length - 1), "/");
		} else if ($.ig.NativeStringUtility.prototype.startsWith(key, "..")) {
			tmpComps = $.ig.NativeStringUtility.prototype.split(key, "/");
		} else {
			tmpComps = new Array(1);
			tmpComps[0] = key;
		}
		var depth = 0;
		for (var i = 0; i < tmpComps.length; i++) {
			var keyComponent = tmpComps[i];
			var intParse = $.ig.NativeStringUtility.prototype.convertToInt(keyComponent, -1);
			if (intParse >= 0) {
				kc.add(intParse);
			} else if (keyComponent == "..") {
				depth--;
			} else {
				kc.add(keyComponent);
			}
		}
		if (depth < 0) {
			entry.depth(iterationDepth + 1 + depth);
		}
		entry.key(key);
		entry.keyComponents(kc);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig::SetKeyFromConfig(Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry, System.String, System.Int32)" />*/
	,
	$type: new $.ig.Type('TabularDataSourceConfig', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel" />*/

$.ig.util.defType('JSONEditorModel', 'Object', {
	__tree: null,
	__iterationPath: null,
	__projectionInfos: null,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		this.__projectionInfos = new $.ig.Array();
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, tree) {
		this.__projectionInfos = new $.ig.Array();
		$.ig.Object.prototype.init.call(this);
		this.__tree = tree;
	},
	init2: function (initNumber, tree, projectionInfos, iterationPath, guessDT) {
		this.__projectionInfos = new $.ig.Array();
		$.ig.Object.prototype.init.call(this);
		this.__tree = new $.ig.JSONTree(1, tree.toJson());
		this.__projectionInfos = new $.ig.Array();
		for (var i = 0; i < projectionInfos.length; i++) {
			var info = projectionInfos[i];
			this.__projectionInfos.add(info.clone());
		}
		this.__iterationPath = iterationPath;
		this.guessDates(guessDT);
	},
	_guessDates: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GuessDates()" />*/
	guessDates: function (value) {
		if (arguments.length === 1) {
			this._guessDates = value;
			return value;
		} else {
			return this._guessDates;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GuessDates()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::Clone()" />*/
	clone: function () {
		return new $.ig.JSONEditorModel(2, this.__tree, this.__projectionInfos, this.__iterationPath, this.guessDates());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::Clone()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::JSONEditorModelForConfiguration(System.JSDictionary, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree)" />*/
	jSONEditorModelForConfiguration: function (flattenerConfiguration, tree) {
		var model = new $.ig.JSONEditorModel(1, tree);
		var cfg = new $.ig.TabularDataSourceConfig(flattenerConfiguration);
		var iterationPathOrRoot = $.ig.JSONEditorModel.prototype.iterationPathOrRoot(cfg);
		model.__iterationPath = iterationPathOrRoot.isRoot() ? null : iterationPathOrRoot;
		var columnsConfig = cfg.getColumnsConfig();
		for (var i = 0; i < columnsConfig.length; i++) {
			var entry = columnsConfig[i];
			var projection = new $.ig.JSONProjectionInfo();
			projection._columnType = $.ig.TabularDataSourceConfig.prototype.dashboardDataTypeToInt(entry.type());
			projection._format = entry.dateFormat();
			projection._path = $.ig.JSONEditorModel.prototype.pathExpression(entry, iterationPathOrRoot, cfg.getIterationDepth());
			projection._label = entry.key() == entry.uniqueName() ? null : entry.uniqueName();
			model.__projectionInfos.add(projection);
		}
		return model;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::JSONEditorModelForConfiguration(System.JSDictionary, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IterationPathOrRoot(Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig)" />*/
	iterationPathOrRoot: function (cfg) {
		var iterationPathBuilder = $.ig.JSONPathBuilder.prototype.root();
		var iterationLevelConfig = cfg.getIterationLevelConfig();
		var iterationDepth = cfg.getIterationDepth();
		for (var i = 0; i <= iterationDepth; i++) {
			var s = $.ig.JSONPathExpression.prototype.aNY;
			if (iterationLevelConfig != null && i < iterationLevelConfig.length) {
				var include = iterationLevelConfig[i];
				if (!$.ig.NativeDataLayerUtility.prototype.isNull(include)) {
					s = include;
				}
			}
			iterationPathBuilder.child(s);
		}
		var iterationPathOrRoot = iterationPathBuilder.pathExpression();
		return iterationPathOrRoot;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IterationPathOrRoot(Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathExpression(Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	pathExpression: function (entry, iterationPathOrRoot, iterationDepth) {
		var path = iterationPathOrRoot.pathTruncatedAtDepth(entry.getEffectiveDepth(iterationDepth));
		for (var i = 0; i < entry.keyComponents().length; i++) {
			var kc = entry.keyComponents()[i];
			if (typeof kc === 'string' && kc == "~") {
				path = path.pathByAddingSegmentWithProp();
			} else {
				path = path.pathByAddingSegmentWithValue(entry.keyComponents()[i]);
			}
		}
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathExpression(Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IterationDepth()" />*/
	iterationDepth: function () {
		return this.__iterationPath == null ? -1 : this.__iterationPath.segmentsCount() - 1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IterationDepth()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	addColumnWithRowExpansion: function (path) {
		$.ig.JSONEditorModel.prototype.__logger.debug1("AddColumnWithRowExpansion: {}", path);
		return this.addColumnWithRowExpansion1(path, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	canAddColumnWithRowExpansion: function (path) {
		return this.addColumnWithRowExpansion1(path, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	addColumnWithRowExpansion1: function (path, validateOnly) {
		var originalPath = path;
		path = this.pathPrefixedByIterationPathIfApplies(path, null);
		if (this.__iterationPath == null) {
			var pathWithAny = path.pathBySelectingAllIndexes(path.depth() - 2);
			if (pathWithAny.lastAnyDepth() == -1) {
				pathWithAny = this.pathOnAnyParent(path);
			}
			if (pathWithAny != null && this.validateProjectionPath(pathWithAny)) {
				path = pathWithAny;
			}
		} else {
			path = this.pathOnAnyParent(path);
			if (path == null) {
				return false;
			}
			var pathWithAny1 = path.pathBySelectingAllIndexes(path.depth() - 2);
			if (this.validateProjectionPath(pathWithAny1)) {
				path = pathWithAny1;
			}
		}
		if (!this.validateProjectionPath(path)) {
			return false;
		}
		if (path.lastAnyDepth() <= this.iterationDepth()) {
			return false;
		}
		if (validateOnly) {
			return true;
		}
		this.addColumn2(path, originalPath);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnWithRowExpansion(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	addColumnToCurrentRows: function (path) {
		$.ig.JSONEditorModel.prototype.__logger.debug1("AddColumnToCurrentRows: {}", path);
		return this.addColumnToCurrentRows1(path, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	canAddColumnToCurrentRows: function (path) {
		return this.addColumnToCurrentRows1(path, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	addColumnToCurrentRows1: function (path, validateOnly) {
		var originalPath = path;
		if (path.lastSegment() == $.ig.JSONPathExpression.prototype.pROP) {
			if (this.__iterationPath == null || this.__iterationPath.prefixContaining(path).depth() != path.depth() - 1) {
				return false;
			} else {
				path = path.pathByReplacingPrefix(this.__iterationPath.pathTruncatedAtDepth(path.depth() - 1));
			}
		} else {
			var missingNodes = new $.ig.BOOLWrapper();
			var pathPrefixed1 = this.pathPrefixedByIterationPathIfApplies(path, missingNodes);
			if (missingNodes.__value) {
				var pathPrefixed2;
				if (this.isInIterationPath(path)) {
					pathPrefixed2 = path.pathByReplacingPrefix(this.__iterationPath);
				} else {
					pathPrefixed2 = this.pathByAssumingSameJSONStructureUnderArrayContainers(path);
				}
				var iterationPrefixLength1 = this.__iterationPath != null ? this.__iterationPath.commonPathLength(pathPrefixed1) : 0;
				var iterationPrefixLength2 = this.__iterationPath != null ? this.__iterationPath.commonPathLength(pathPrefixed2) : 0;
				path = iterationPrefixLength2 > iterationPrefixLength1 ? pathPrefixed2 : pathPrefixed1;
			} else {
				path = pathPrefixed1;
			}
		}
		var isValid = this.validateProjectionPath(path);
		if (validateOnly || !isValid) {
			return isValid;
		}
		this.addColumn2(path, originalPath);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumnToCurrentRows(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	isColumn: function (path) {
		return this.projectionContainingPath(path) != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnIndex(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	getColumnIndex: function (path) {
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			if (projectionInfo._path.contains(path)) {
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnIndex(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetIncludeRowFilter(System.Int32)" />*/
	getIncludeRowFilter: function (depth) {
		var segmentIndex = depth - 1;
		if (this.__iterationPath == null || segmentIndex < 0 || segmentIndex >= this.__iterationPath.segmentsCount()) {
			return null;
		}
		var segment = this.__iterationPath.segment(segmentIndex);
		return segment == $.ig.JSONPathExpression.prototype.aNY ? null : segment;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetIncludeRowFilter(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilter(System.Int32, System.Object)" />*/
	setIncludeRowFilter: function (depth, include) {
		$.ig.JSONEditorModel.prototype.__logger.debug2("SetIncludeRowFilter depth: {}, include: {}", depth, include);
		if (!this.canSetIncludeRowFilterKeepingIterationDepth(depth, include)) {
			return false;
		}
		this.setIncludeRowFilterInAllPaths(depth, include);
		this.calculateIterationPathFromProjection();
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilter(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterKeepingIterationDepth(System.Int32, System.Object)" />*/
	setIncludeRowFilterKeepingIterationDepth1: function (depth, include) {
		$.ig.JSONEditorModel.prototype.__logger.debug2("SetIncludeRowFilterKeepingIterationDepth depth: {}, include: {}", depth, include);
		if (!this.canSetIncludeRowFilterKeepingIterationDepth(depth, include)) {
			return false;
		}
		this.setIncludeRowFilterInAllPaths(depth, include);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterKeepingIterationDepth(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterKeepingIterationDepth(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	setIncludeRowFilterKeepingIterationDepth: function (pathToContainer) {
		return this.setIncludeRowFilterKeepingIterationDepth1(pathToContainer.depth(), pathToContainer.lastSegment());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterKeepingIterationDepth(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RowsFoundInPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	rowsFoundInPath: function (pathToContainer) {
		if (!this.isPassingRowFilters(pathToContainer)) {
			return false;
		}
		if (pathToContainer.depth() > this.iterationDepth() + 1) {
			return false;
		}
		if (this.__tree == null) {
			return false;
		}
		var node = this.__tree.singleNode(pathToContainer, null);
		return node.cHeight() + pathToContainer.depth() > this.iterationDepth();
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RowsFoundInPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsLastSegmentIncludeRowFilter(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	isLastSegmentIncludeRowFilter: function (pathToContainer) {
		var depthFilter = this.getIncludeRowFilter(pathToContainer.depth());
		return depthFilter != null && this.jSFriendlyEquals(depthFilter, pathToContainer.lastSegment());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsLastSegmentIncludeRowFilter(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::JSFriendlyEquals(System.Object, System.Object)" />*/
	jSFriendlyEquals: function (o1, o2) {
		return o1 == o2;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::JSFriendlyEquals(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RemoveRowFilterAtDepth(System.Int32)" />*/
	removeRowFilterAtDepth: function (depth) {
		$.ig.JSONEditorModel.prototype.__logger.debug1("RemoveRowFilterAtDepth depth: {}", depth);
		if (this.__iterationPath == null || depth > this.__iterationPath.segmentsCount() || this.__iterationPath.segment(depth - 1) == $.ig.JSONPathExpression.prototype.aNY) {
			return false;
		}
		var i;
		for (i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			var path = projectionInfo._path;
			if (this.isSegmentSharedWithIterationPath(path, depth)) {
				projectionInfo._path = path.pathByReplacingSegmentWithAny(depth);
			}
		}
		this.__iterationPath = this.__iterationPath.pathByReplacingSegmentWithAny(depth);
		var toRemove = new $.ig.Array();
		for (i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo1 = this.__projectionInfos[i];
			var path1 = projectionInfo1._path;
			if (this.isInIterationPath(path1) && this.__iterationPath != null && !path1.hasPrefix(this.__iterationPath)) {
				projectionInfo1._path = path1.pathByReplacingPrefix(this.__iterationPath);
				if ($.ig.JSONEditorModel.prototype.countProjections(this.__projectionInfos, projectionInfo1._path) > 1) {
					toRemove.add(projectionInfo1);
				}
			}
		}
		this.__projectionInfos.removeAllInList(toRemove);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RemoveRowFilterAtDepth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsPassingRowFilters(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	isPassingRowFilters: function (path) {
		if (this.__iterationPath == null) {
			return true;
		}
		for (var i = 0; i < Math.min(this.__iterationPath.segmentsCount(), path.segmentsCount()); i++) {
			var sIP = this.__iterationPath.segment(i);
			if (sIP != $.ig.JSONPathExpression.prototype.aNY) {
				var sRow = path.segment(i);
				if (!this.jSFriendlyEquals(sRow, sIP)) {
					return false;
				}
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsPassingRowFilters(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RemoveColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	removeColumn: function (path) {
		$.ig.JSONEditorModel.prototype.__logger.debug1("RemoveColumn: {}", path);
		var projectionInfo = this.projectionContainingPath(path);
		if (projectionInfo == null) {
			return false;
		}
		this.__projectionInfos.removeItem(projectionInfo);
		while (this.__iterationPath != null && this.firstProjectionContainedByPrefix(this.__iterationPath) == null) {
			this.__iterationPath = this.__iterationPath.pathTruncatedAtDepth(this.__iterationPath.depth() - 1);
			if (this.__iterationPath.segmentsCount() == 0) {
				this.__iterationPath = null;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::RemoveColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnRelativePath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	columnRelativePath: function (pathOriginal) {
		var pathPrefixed = this.pathPrefixedByIterationPathIfApplies(pathOriginal, null);
		var pathBuilder = $.ig.JSONPathBuilder.prototype.root();
		for (var i = this.iterationDepth() + 1; i < pathPrefixed.segmentsCount(); i++) {
			pathBuilder.child(pathPrefixed.segment(i));
		}
		return pathBuilder.pathExpression();
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnRelativePath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnRelativePathString(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	columnRelativePathString: function (path) {
		var startingSegment = this.iterationDepth() > -1 ? this.iterationDepth() : 0;
		return $.ig.JSONEditorModel.prototype.stringPath(this.columnRelativePath(path), startingSegment, ".", false);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnRelativePathString(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnIsRestricted(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	columnIsRestricted: function (path) {
		if (this.__iterationPath == null) {
			return false;
		}
		if (this.__tree == null) {
			return false;
		}
		var projectionInfo = this.projectionContainingPath(path);
		if (projectionInfo == null) {
			return false;
		}
		var commonPathLength = this.__iterationPath.commonPathLength(projectionInfo._path);
		if (commonPathLength == this.__iterationPath.segmentsCount()) {
			return false;
		}
		if (commonPathLength == projectionInfo._path.segmentsCount() - 1 && projectionInfo._path.lastSegment() == $.ig.JSONPathExpression.prototype.pROP) {
			return false;
		}
		var iterationPathChildNode = this.__tree.singleNode(path.pathTruncatedAtDepth(commonPathLength + 1), null);
		if (iterationPathChildNode == null) {
			return false;
		}
		var iterationPathSegment = this.__iterationPath.segment(commonPathLength);
		if (iterationPathSegment == $.ig.JSONPathExpression.prototype.aNY) {
			var iterationPathProp = this.__iterationPath.pathByAddingSegmentWithProp();
			for (var i = 0; i < iterationPathChildNode.index(); i++) {
				var sibling = iterationPathChildNode.parent().child(i);
				if (sibling.singleNodeRelative(iterationPathProp, commonPathLength + 1, null) != null) {
					return true;
				}
			}
			return false;
		} else {
			var sibling1 = iterationPathChildNode.parent().childForSegment(iterationPathSegment);
			if (sibling1 == null) {
				return false;
			}
			return sibling1.index() < iterationPathChildNode.index();
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnIsRestricted(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetExplicitColumnLabel(System.Int32, System.String)" />*/
	setExplicitColumnLabel: function (columnIndex, label) {
		(this.__projectionInfos[columnIndex])._label = label;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetExplicitColumnLabel(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnDateFormat(System.Int32, System.String)" />*/
	setColumnDateFormat: function (columnIndex, format) {
		(this.__projectionInfos[columnIndex]).setDateFormat(format);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnDateFormat(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnDateTimeFormat(System.Int32, System.String)" />*/
	setColumnDateTimeFormat: function (columnIndex, format) {
		(this.__projectionInfos[columnIndex]).setDateTimeFormat(format);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnDateTimeFormat(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnTimeFormat(System.Int32, System.String)" />*/
	setColumnTimeFormat: function (columnIndex, format) {
		(this.__projectionInfos[columnIndex]).setTimeFormat(format);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnTimeFormat(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnTypeToNumber(System.Int32)" />*/
	setColumnTypeToNumber: function (columnIndex) {
		(this.__projectionInfos[columnIndex])._columnType = 1;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetColumnTypeToNumber(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnType(System.Int32)" />*/
	getColumnType: function (columnIndex) {
		return $.ig.TabularDataSourceConfig.prototype.intToDashboardDataType((this.__projectionInfos[columnIndex])._columnType);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnType(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnFormat(System.Int32)" />*/
	getColumnFormat: function (columnIndex) {
		return (this.__projectionInfos[columnIndex])._format;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetColumnFormat(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ResetColumnType(System.Int32)" />*/
	resetColumnType: function (columnIndex) {
		var projectionInfo = this.__projectionInfos[columnIndex];
		if (projectionInfo._columnType >= 2 && projectionInfo._columnType <= 4) {
			projectionInfo._columnType = 0;
			projectionInfo._format = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ResetColumnType(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	addColumn1: function (path, validateOnly) {
		var originalPath = path;
		if (this.__projectionInfos.length == 0) {
			if (path.lastSegment() != $.ig.JSONPathExpression.prototype.pROP) {
				return false;
			}
			if (validateOnly) {
				return true;
			}
			this.addColumn2(path.pathByReplacingMiddleSegmentsWithAny(), originalPath);
			return true;
		} else {
			if (validateOnly) {
				return this.canAddColumnToCurrentRows(path);
			}
			return this.addColumnToCurrentRows(path);
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	addColumn: function (path) {
		return this.addColumn1(path, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	canAddColumn: function (path) {
		return this.addColumn1(path, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanAddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathPrefixedByIterationPathIfApplies(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	pathPrefixedByIterationPathIfApplies: function (path, missingNodes) {
		if (this.__tree == null) {
			$.ig.BOOLWrapper.prototype.nullSafeSetTrue(missingNodes);
			return path;
		}
		if (this.__iterationPath != null) {
			var cad = this.__tree.commonAncestorDepth(path, this.__iterationPath, missingNodes);
			if (cad > -1) {
				path = path.pathByReplacingPrefix(this.__iterationPath.pathTruncatedAtDepth(cad));
			}
		}
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathPrefixedByIterationPathIfApplies(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathOnAnyParent(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	pathOnAnyParent: function (path) {
		return path.segmentsCount() > 1 ? path.pathByReplacingSegmentWithAny(path.segmentsCount() - 1) : null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathOnAnyParent(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ValidateProjectionPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	validateProjectionPath: function (pathToValidate) {
		if (this.__iterationPath == null) {
			return true;
		}
		if (pathToValidate.lastAnyDepth() != -1) {
			var truncatedPath = pathToValidate.pathTruncatedAtDepth(pathToValidate.lastAnyDepth() + 1);
			if (!this.__iterationPath.hasPrefix(truncatedPath) && !truncatedPath.hasPrefix(this.__iterationPath)) {
				return false;
			}
		}
		var containingProjection = this.projectionContainingPath(pathToValidate);
		if (containingProjection != null) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ValidateProjectionPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	addColumn2: function (path, clickedPath) {
		var extendsIterationPath = this.__iterationPath == null || (this.__iterationPath.commonPathLength(path) - 1 == this.iterationDepth() && path.lastAnyDepth() > this.iterationDepth());
		var projectionInfo = this.getProjectionToReplace(path);
		if (projectionInfo == null) {
			projectionInfo = new $.ig.JSONProjectionInfo();
			if (clickedPath.lastSegment() == $.ig.JSONPathExpression.prototype.pROP) {
				projectionInfo._columnType = $.ig.JSONEditorModel.prototype.columnConfigType($.ig.JSONDataType.prototype.string1);
			} else {
				var node = null;
				if (this.__tree != null) {
					node = this.__tree.singleNode(clickedPath, null);
				}
				projectionInfo._columnType = $.ig.JSONEditorModel.prototype.columnConfigType(node != null ? node.dataType() : $.ig.JSONDataType.prototype.string1);
				if (this.guessDates() && node != null && node.guessedDateTimeFormatForValue() != null) {
					projectionInfo._format = node.guessedDateTimeFormatForValue();
					projectionInfo._columnType = $.ig.TabularDataSourceConfig.prototype.dashboardDataTypeToInt(node.guessedDateTimeDataTypeForValue());
				}
			}
			this.__projectionInfos.add(projectionInfo);
		}
		projectionInfo._path = path;
		if (extendsIterationPath) {
			this.__iterationPath = path.pathTruncatedAtDepth(path.lastAnyDepth() + 1);
			if (this.__iterationPath.segmentsCount() == 0) {
				this.__iterationPath = null;
			}
			this.updateProjectionPrefixesByIterationPath();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::AddColumn(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ProjectionContainingPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	projectionContainingPath: function (path) {
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			if (projectionInfo._path.contains(path)) {
				return projectionInfo;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ProjectionContainingPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanSetIncludeRowFilterKeepingIterationDepth(System.Int32, System.Object)" />*/
	canSetIncludeRowFilterKeepingIterationDepth: function (depth, include) {
		if (!(typeof include === 'string' || typeof include === 'number')) {
			return false;
		}
		if (this.__iterationPath == null || this.__iterationPath.depth() < depth) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CanSetIncludeRowFilterKeepingIterationDepth(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterInAllPaths(System.Int32, System.Object)" />*/
	setIncludeRowFilterInAllPaths: function (depth, include) {
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			var path = projectionInfo._path;
			if (this.isSegmentSharedWithIterationPath(path, depth)) {
				projectionInfo._path = path.pathByReplacingSegmentWithValue(depth, include);
			}
		}
		this.__iterationPath = this.__iterationPath.pathByReplacingSegmentWithValue(depth, include);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SetIncludeRowFilterInAllPaths(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetProjectionToReplace(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	getProjectionToReplace: function (newPath) {
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			var existingPath = projectionInfo._path;
			if (newPath.contains(existingPath)) {
				return projectionInfo;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::GetProjectionToReplace(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CalculateIterationPathFromProjection()" />*/
	calculateIterationPathFromProjection: function () {
		this.__iterationPath = null;
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			var path = projectionInfo._path;
			var lastAnyDepth = path.lastAnyDepth();
			if ((lastAnyDepth > -1 && this.__iterationPath == null) || lastAnyDepth > this.iterationDepth()) {
				this.__iterationPath = path.pathTruncatedAtDepth(lastAnyDepth + 1);
			}
		}
		this.updateProjectionPrefixesByIterationPath();
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CalculateIterationPathFromProjection()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::UpdateProjectionPrefixesByIterationPath()" />*/
	updateProjectionPrefixesByIterationPath: function () {
		if (this.__iterationPath != null) {
			for (var i = 0; i < this.__projectionInfos.length; i++) {
				var projectionInfo = this.__projectionInfos[i];
				if (this.__tree != null) {
					projectionInfo._path = this.pathPrefixedByIterationPathIfApplies(projectionInfo._path, null);
				} else if (this.isInIterationPath(projectionInfo._path)) {
					projectionInfo._path = projectionInfo._path.pathByReplacingPrefix(this.__iterationPath);
				} else {
					projectionInfo._path = this.pathByAssumingSameJSONStructureUnderArrayContainers(projectionInfo._path);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::UpdateProjectionPrefixesByIterationPath()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsSegmentSharedWithIterationPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	isSegmentSharedWithIterationPath: function (path, depth) {
		var commonPathLength = this.__iterationPath.commonPathLength(path);
		return depth <= commonPathLength;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsSegmentSharedWithIterationPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsInIterationPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	isInIterationPath: function (path) {
		if (this.__iterationPath == null) {
			return false;
		}
		if (this.__iterationPath.depth() >= path.depth()) {
			return false;
		}
		return this.__iterationPath.prefixContaining(path).depth() == this.__iterationPath.depth();
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::IsInIterationPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::FirstProjectionContainedByPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	firstProjectionContainedByPrefix: function (prefix) {
		if (prefix == null) {
			return this.__projectionInfos.length > 0 ? this.__projectionInfos[0] : null;
		}
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			if (this.isInIterationPath(projectionInfo._path)) {
				return projectionInfo;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::FirstProjectionContainedByPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathByAssumingSameJSONStructureUnderArrayContainers(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	pathByAssumingSameJSONStructureUnderArrayContainers: function (path) {
		if (this.__iterationPath == null) {
			return path;
		}
		var newPath = path;
		for (var i = 0; i < path.segmentsCount() - 1 && i < this.__iterationPath.segmentsCount(); i++) {
			var pathSegment = path.segment(i);
			if (!(typeof pathSegment === 'number')) {
				break;
			}
			var iterPathSegment = this.__iterationPath.segment(i);
			if (iterPathSegment != $.ig.JSONPathExpression.prototype.aNY) {
				break;
			}
			newPath = newPath.pathByReplacingSegmentWithAny(i + 1);
		}
		return newPath;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::PathByAssumingSameJSONStructureUnderArrayContainers(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CountProjections(Infragistics.CPList, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	countProjections: function (projectionInfos, path) {
		var count = 0;
		for (var i = 0; i < projectionInfos.length; i++) {
			if (path.jSONPath() == (projectionInfos[i])._path.jSONPath()) {
				count++;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CountProjections(Infragistics.CPList, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::FlattenerConfiguration()" />*/
	flattenerConfiguration: function () {
		var config = {};
		var columnsConfig = new $.ig.Array();
		var iterationDepth = this.iterationDepth();
		config["iterationDepth"] = $.ig.util.unwrapNullable($.ig.NativeDataLayerUtility.prototype.wrapInt(iterationDepth));
		config["columnsConfig"] = columnsConfig;
		for (var i = 0; i < this.__projectionInfos.length; i++) {
			var projectionInfo = this.__projectionInfos[i];
			var path = projectionInfo._path;
			var commonPathLength = this.__iterationPath == null ? 0 : this.__iterationPath.commonPathLength(path);
			var columnConfig = {};
			if (commonPathLength - 1 == iterationDepth) {
				if (path.depth() - 1 > iterationDepth + 1) {
					columnConfig["key"] = this.stringPathToDescendant(path, "/", true);
					columnConfig["uniqueName"] = this.stringPathToDescendant(path, ".", false);
				} else {
					columnConfig["key"] = $.ig.JSONEditorModel.prototype.segmentToString(path, path.segmentsCount() - 1);
					if (path.lastSegment() == $.ig.JSONPathExpression.prototype.pROP) {
						columnConfig["uniqueName"] = $.ig.JSONEditorModel.prototype.uniqueNameForRowIdSegment(commonPathLength);
					}
				}
			} else if (commonPathLength - 1 < iterationDepth) {
				columnConfig["key"] = $.ig.JSONEditorModel.prototype.slashPathToAncestor(path, commonPathLength, iterationDepth + 1 - commonPathLength);
				var uniqueNameContainer = new $.ig.Array();
				uniqueNameContainer.add(this.columnConfigUniqueNameForAncestorProperty(path, commonPathLength));
				columnConfig["uniqueName"] = uniqueNameContainer;
			} else {
				$.ig.JSONEditorModel.prototype.__logger.error("commonPathLength is greater than it should be");
			}
			if (projectionInfo._label != null && projectionInfo._label.length > 0) {
				var uniqueNameContainer1 = new $.ig.Array();
				uniqueNameContainer1.add(projectionInfo._label);
				columnConfig["uniqueName"] = uniqueNameContainer1;
			}
			columnConfig["type"] = projectionInfo._columnType;
			if (projectionInfo._format != null) {
				columnConfig["dateFormat"] = projectionInfo._format;
			}
			columnsConfig.add(columnConfig);
		}
		$.ig.JSONEditorModel.prototype.checkUniqueNames(columnsConfig);
		var iterationLevelConfig = this.calculateIterationLevelConfig();
		if (iterationLevelConfig != null) {
			config["iterationLevelConfig"] = iterationLevelConfig;
		}
		return config;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::FlattenerConfiguration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CheckUniqueNames(Infragistics.CPList)" />*/
	checkUniqueNames: function (columnsConfig) {
		var uniqueNames = new $.ig.Array();
		for (var i = 0; i < columnsConfig.length; i++) {
			var cfg = columnsConfig[i];
			var uniqueNameObj = $.ig.JsonUtility.prototype.loadObject(cfg, "uniqueName");
			if (typeof uniqueNameObj === 'string') {
				uniqueNames.add(uniqueNameObj);
			}
		}
		for (var i1 = 0; i1 < columnsConfig.length; i1++) {
			var cfg1 = columnsConfig[i1];
			var uniqueNameObj1 = $.ig.JsonUtility.prototype.loadObject(cfg1, "uniqueName");
			if ($.ig.util.cast($.ig.Array.prototype.$type, uniqueNameObj1) !== null) {
				var uniqueNameTentative = (uniqueNameObj1)[0];
				if (uniqueNames.contains(uniqueNameTentative)) {
					$.ig.JSONEditorModel.prototype.__logger.debug1("Found duplicate column name {}, replacing with default.", uniqueNameTentative);
					cfg1["uniqueName"] = cfg1["key"];
				} else {
					cfg1["uniqueName"] = uniqueNameTentative;
					uniqueNames.add(uniqueNameTentative);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CheckUniqueNames(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::UniqueNameForRowIdSegment(System.Int32)" />*/
	uniqueNameForRowIdSegment: function (level) {
		return "Level " + level;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::UniqueNameForRowIdSegment(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnConfigUniqueNameForAncestorProperty(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	columnConfigUniqueNameForAncestorProperty: function (path, commonPathLength) {
		if (commonPathLength == path.segmentsCount() - 1 && path.lastSegment() == $.ig.JSONPathExpression.prototype.pROP) {
			return $.ig.JSONEditorModel.prototype.uniqueNameForRowIdSegment(commonPathLength);
		} else {
			return $.ig.JSONEditorModel.prototype.stringPath(path, commonPathLength, ".", false);
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnConfigUniqueNameForAncestorProperty(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CalculateIterationLevelConfig()" />*/
	calculateIterationLevelConfig: function () {
		if (this.__iterationPath == null) {
			return null;
		}
		var iterationLevelConfig = new $.ig.Array();
		for (var i = 0; i < this.__iterationPath.segmentsCount(); i++) {
			var s = this.__iterationPath.segment(i);
			if (typeof s === 'string' || typeof s === 'number') {
				var rule = {};
				rule["include"] = s;
				iterationLevelConfig.add(rule);
			} else {
				iterationLevelConfig.add($.ig.NativeDataLayerUtility.prototype.wrapNull(null));
			}
		}
		return iterationLevelConfig;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::CalculateIterationLevelConfig()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SlashPathToAncestor(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, System.Int32)" />*/
	slashPathToAncestor: function (pathReader, commonPathLength, depthDelta) {
		var path = $.ig.CPStringUtility.prototype.repeat("../", depthDelta);
		for (var i = commonPathLength; i < pathReader.segmentsCount(); i++) {
			if (i > commonPathLength) {
				path = path + "/";
			}
			path = path + $.ig.JSONEditorModel.prototype.segmentToString(pathReader, i);
		}
		return path;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SlashPathToAncestor(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::StringPathToDescendant(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.String, System.Boolean)" />*/
	stringPathToDescendant: function (path, separator, startWithSeparator) {
		return $.ig.JSONEditorModel.prototype.stringPath(path, this.iterationDepth() + 1, separator, startWithSeparator);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::StringPathToDescendant(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::StringPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, System.String, System.Boolean)" />*/
	stringPath: function (path, startingSegment, separator, startWithSeparator) {
		var pathStr = "";
		for (var i = startingSegment; i < path.segmentsCount(); i++) {
			pathStr = pathStr + ((i > startingSegment || startWithSeparator) ? separator : "") + $.ig.JSONEditorModel.prototype.segmentToString(path, i);
		}
		return pathStr;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::StringPath(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SegmentToString(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	segmentToString: function (path, segmentIndex) {
		var s = path.segment(segmentIndex);
		if (s == $.ig.JSONPathExpression.prototype.pROP) {
			s = "~";
		}
		return $.ig.NativeStringUtility.prototype.toString1(s);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::SegmentToString(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnConfigType(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType)" />*/
	columnConfigType: function (dataType) {
		if (dataType == $.ig.JSONDataType.prototype.boolean1 || dataType == $.ig.JSONDataType.prototype.number) {
			return 1;
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel::ColumnConfigType(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType)" />*/
	,
	$type: new $.ig.Type('JSONEditorModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo" />*/

$.ig.util.defType('JSONProjectionInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_path: null,
	_columnType: 0,
	_label: null,
	_format: null,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetDateFormat(System.String)" />*/
	setDateFormat: function (dateFormat) {
		this._columnType = 2;
		this._format = dateFormat;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetDateFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetDateTimeFormat(System.String)" />*/
	setDateTimeFormat: function (dateTimeFormat) {
		this._columnType = 3;
		this._format = dateTimeFormat;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetDateTimeFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetTimeFormat(System.String)" />*/
	setTimeFormat: function (timeFormat) {
		this._columnType = 4;
		this._format = timeFormat;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::SetTimeFormat(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::Clone()" />*/
	clone: function () {
		var clone = new $.ig.JSONProjectionInfo();
		clone._path = this._path;
		clone._columnType = this._columnType;
		clone._label = this._label;
		clone._format = this._format;
		return clone;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo::Clone()" />*/
	,
	$type: new $.ig.Type('JSONProjectionInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONProjectionInfo" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder" />*/

$.ig.util.defType('JSONPathBuilder', 'Object', {
	init: function () {
		this.__path = "$";
		$.ig.Object.prototype.init.call(this);
	},
	__path: null,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Path()" />*/
	path: function () {
		return this.__path;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Path()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::PathExpression()" />*/
	pathExpression: function () {
		return $.ig.JSONPathExpression.prototype.parse(this.__path);
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::PathExpression()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Root()" />*/
	root: function () {
		return new $.ig.JSONPathBuilder();
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Root()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::ChildWithKey(System.String)" />*/
	childWithKey: function (name) {
		this.__path = this.__path + "['" + $.ig.NativeStringUtility.prototype.replace($.ig.NativeStringUtility.prototype.replace(name, "\\", "\\\\"), "'", "\\'") + "']";
		return this;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::ChildWithKey(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::ChildWithIndex(System.Int32)" />*/
	childWithIndex: function (index) {
		this.__path = this.__path + "[" + index + "]";
		return this;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::ChildWithIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Child(System.Object)" />*/
	child: function (o) {
		if (typeof o === 'string') {
			return this.childWithKey(o);
		} else if (o == $.ig.JSONPathExpression.prototype.aNY) {
			return this.any();
		} else if (o == $.ig.JSONPathExpression.prototype.pROP) {
			return this.prop();
		} else {
			return this.childWithIndex($.ig.util.getValue(o));
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Child(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Any()" />*/
	any: function () {
		this.__path = this.__path + "[*]";
		return this;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Any()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Prop()" />*/
	prop: function () {
		this.__path = this.__path + "~";
		return this;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder::Prop()" />*/
	,
	$type: new $.ig.Type('JSONPathBuilder', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathBuilder" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.DummyObject" />*/

$.ig.util.defType('DummyObject', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('DummyObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.DummyObject" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression" />*/

$.ig.util.defType('JSONPathExpression', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__jsonPath: null,
	__segments: null,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Parse(System.String)" />*/
	parse: function (jsonPath) {
		var r = new $.ig.JSONPathExpression();
		r.jSONPath(jsonPath);
		return r;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Parse(System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::JSONPath()" />*/
	jSONPath: function (value) {
		if (arguments.length === 1) {
			this.__jsonPath = value;
			this.createComponentsFromPathStr();
			return value;
		} else {
			return this.__jsonPath;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::JSONPath()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CommonPathLength(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	commonPathLength: function (other) {
		var len = 0;
		var minLen = Math.min(this.__segments.length, other.__segments.length);
		for (var i = 0; i < minLen; i++) {
			var ol = this.__segments[i];
			var or = other.__segments[i];
			if ($.ig.NativeDataLayerUtility.prototype.isNumber(ol)) {
				if (!$.ig.NativeDataLayerUtility.prototype.isNumber(or) || $.ig.NativeDataLayerUtility.prototype.unwrapInt($.ig.util.wrapNullable($.ig.Number.prototype.$type, ol)) != $.ig.NativeDataLayerUtility.prototype.unwrapInt($.ig.util.wrapNullable($.ig.Number.prototype.$type, or))) {
					break;
				}
			} else if (typeof ol === 'string') {
				if (!ol.equals(or)) {
					break;
				}
			} else if (ol != or) {
				break;
			}
			len++;
		}
		return len;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CommonPathLength(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Depth()" />*/
	depth: function () {
		return this.__segments.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Depth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::LastAnyDepth()" />*/
	lastAnyDepth: function () {
		for (var i = this.__segments.length - 1; i >= 0; i--) {
			if (this.__segments[i] == $.ig.JSONPathExpression.prototype.aNY) {
				return i;
			}
		}
		return -1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::LastAnyDepth()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::LastSegment()" />*/
	lastSegment: function () {
		if (this.__segments.length == 0) {
			return null;
		}
		return this.__segments[this.__segments.length - 1];
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::LastSegment()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::SegmentsCount()" />*/
	segmentsCount: function () {
		return this.__segments.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::SegmentsCount()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::IsRoot()" />*/
	isRoot: function () {
		return this.__segments.length == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::IsRoot()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Segment(System.Int32)" />*/
	segment: function (i) {
		return this.__segments[i];
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Segment(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathBySelectingAllIndexes(System.Int32)" />*/
	pathBySelectingAllIndexes: function (upToDepth) {
		var pathBuilder = $.ig.JSONPathBuilder.prototype.root();
		for (var i = 0; i < this.__segments.length; i++) {
			var comp = this.__segments[i];
			if (i <= upToDepth && $.ig.NativeDataLayerUtility.prototype.isNumber(comp)) {
				pathBuilder.any();
			} else {
				pathBuilder.child(comp);
			}
		}
		return $.ig.JSONPathExpression.prototype.parse(pathBuilder.path());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathBySelectingAllIndexes(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathTruncatedAtDepth(System.Int32)" />*/
	pathTruncatedAtDepth: function (depth) {
		var pathBuilder = $.ig.JSONPathBuilder.prototype.root();
		for (var i = 0; i < depth; i++) {
			pathBuilder.child(this.__segments[i]);
		}
		return $.ig.JSONPathExpression.prototype.parse(pathBuilder.path());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathTruncatedAtDepth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::HasPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	hasPrefix: function (other) {
		if (this.__segments.length < other.__segments.length) {
			return false;
		}
		for (var i = 0; i < other.__segments.length; i++) {
			if (!this.__segments[i].equals(other.__segments[i])) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::HasPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Contains(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	contains: function (other) {
		if (this.__segments.length != other.__segments.length) {
			return false;
		}
		for (var i = 0; i < this.__segments.length; i++) {
			var s = this.__segments[i];
			var o = other.__segments[i];
			if (!$.ig.JSONPathExpression.prototype.segmentContains(s, o)) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::Contains(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::SegmentContains(System.Object, System.Object)" />*/
	segmentContains: function (segment, other) {
		if (segment != $.ig.JSONPathExpression.prototype.aNY) {
			return segment == other;
		} else {
			return other != $.ig.JSONPathExpression.prototype.pROP;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::SegmentContains(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingSegmentWithAny(System.Int32)" />*/
	pathByReplacingSegmentWithAny: function (depth) {
		var copy = $.ig.JSONPathExpression.prototype.parse(this.jSONPath());
		copy.__segments[depth - 1] = $.ig.JSONPathExpression.prototype.aNY;
		copy.createPathStrFromComponents();
		return copy;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingSegmentWithAny(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CreateComponentsFromPathStr()" />*/
	createComponentsFromPathStr: function () {
		this.__segments = new $.ig.Array();
		var stateCode = 0;
		var startBracketPos = -1;
		for (var i = 1; i < this.__jsonPath.length; i++) {
			var c = $.ig.NativeStringUtility.prototype.charAt(this.__jsonPath, i);
			if (stateCode == 0) {
				if (c == '~') {
					this.__segments.add($.ig.JSONPathExpression.prototype.pROP);
					return;
				} else if (c == '[') {
					stateCode = 1;
					startBracketPos = i;
				} else {
					throw new $.ig.Error(1, "Unexpected character at " + i + " '" + c + "'");
				}
			} else if (stateCode == 1) {
				if (c.charCodeAt(0) >= '0'.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0)) {
					stateCode = 2;
				} else if (c == '\'') {
					stateCode = 3;
				} else if (c == '*') {
					stateCode = 5;
				} else {
					throw new $.ig.Error(1, "Unexpected char " + c + " inside [] at " + startBracketPos);
				}
			} else if (stateCode == 2) {
				if (c == ']') {
					stateCode = 0;
					this.__segments.add($.ig.util.unwrapNullable($.ig.NativeDataLayerUtility.prototype.wrapInt($.ig.NativeStringUtility.prototype.convertToInt($.ig.NativeStringUtility.prototype.substringToIndex(this.__jsonPath, startBracketPos + 1, i), -1))));
				} else if (!(c.charCodeAt(0) >= '0'.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0))) {
					throw new $.ig.Error(1, "Expected digits or ] at " + i);
				}
			} else if (stateCode == 3) {
				if (c == '\'') {
					stateCode = 4;
				} else if (c == '\\') {
					stateCode = 31;
				}
			} else if (stateCode == 31) {
				if (c != '\'' && c != '\\') {
					throw new $.ig.Error(1, "Invalid escape sequence \\" + c);
				}
			} else if (stateCode == 4) {
				if (c == ']') {
					stateCode = 0;
					var str = $.ig.NativeStringUtility.prototype.substringToIndex(this.__jsonPath, startBracketPos + 2, i - 1);
					str = $.ig.util.replace($.ig.util.replace(str, "\\\\", "\\"), "\\'", "'");
					this.__segments.add(str);
				} else {
					throw new $.ig.Error(1, "expected ] at position " + i + " but found " + c);
				}
			} else if (stateCode == 5) {
				if (c == ']') {
					stateCode = 0;
					this.__segments.add($.ig.JSONPathExpression.prototype.aNY);
				} else {
					throw new $.ig.Error(1, "expected ] at position " + i + " but found " + c);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CreateComponentsFromPathStr()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CreatePathStrFromComponents()" />*/
	createPathStrFromComponents: function () {
		var pathBuilder = $.ig.JSONPathBuilder.prototype.root();
		for (var i = 0; i < this.__segments.length; i++) {
			pathBuilder.child(this.__segments[i]);
		}
		this.__jsonPath = pathBuilder.path();
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::CreatePathStrFromComponents()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingSegmentWithValue(System.Int32, System.Object)" />*/
	pathByReplacingSegmentWithValue: function (depth, include) {
		if (!(typeof include === 'string' || typeof include === 'number')) {
			return null;
		}
		var copy = $.ig.JSONPathExpression.prototype.parse(this.jSONPath());
		copy.__segments[depth - 1] = include;
		copy.createPathStrFromComponents();
		return copy;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingSegmentWithValue(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PrefixContaining(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	prefixContaining: function (other) {
		var lastMatchingSegmentIndex = -1;
		for (var i = 0; i < Math.min(this.__segments.length, other.__segments.length); i++) {
			var s = this.segment(i);
			var o = other.segment(i);
			if (!$.ig.JSONPathExpression.prototype.segmentContains(s, o)) {
				break;
			}
			lastMatchingSegmentIndex++;
		}
		return this.pathTruncatedAtDepth(lastMatchingSegmentIndex + 1);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PrefixContaining(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	pathByReplacingPrefix: function (prefix) {
		var path = new $.ig.JSONPathExpression();
		path.__segments = new $.ig.Array();
		for (var i = 0; i < prefix.segmentsCount(); i++) {
			path.__segments.add(prefix.__segments[i]);
		}
		for (var i1 = prefix.segmentsCount(); i1 < this.segmentsCount(); i1++) {
			path.__segments.add(this.__segments[i1]);
		}
		path.createPathStrFromComponents();
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingPrefix(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithValue(System.Object)" />*/
	pathByAddingSegmentWithValue: function (v) {
		if (!(typeof v === 'string' || typeof v === 'number')) {
			return null;
		}
		var path = new $.ig.JSONPathExpression();
		path.__segments = $.ig.ArrayUtility.prototype.copyCPList(this.__segments);
		path.__segments.add(v);
		path.createPathStrFromComponents();
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithValue(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithAny()" />*/
	pathByAddingSegmentWithAny: function () {
		var path = new $.ig.JSONPathExpression();
		path.__segments = $.ig.ArrayUtility.prototype.copyCPList(this.__segments);
		path.__segments.add($.ig.JSONPathExpression.prototype.aNY);
		path.createPathStrFromComponents();
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithAny()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithProp()" />*/
	pathByAddingSegmentWithProp: function () {
		var path = new $.ig.JSONPathExpression();
		path.__segments = $.ig.ArrayUtility.prototype.copyCPList(this.__segments);
		path.__segments.add($.ig.JSONPathExpression.prototype.pROP);
		path.createPathStrFromComponents();
		return path;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByAddingSegmentWithProp()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::ToString()" />*/
	toString: function () {
		return this.__jsonPath;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::ToString()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingMiddleSegmentsWithAny()" />*/
	pathByReplacingMiddleSegmentsWithAny: function () {
		var pathBuilder = $.ig.JSONPathBuilder.prototype.root();
		for (var i = 0; i < this.__segments.length - 1; i++) {
			pathBuilder.any();
		}
		if (this.__segments.length > 0) {
			pathBuilder.child(this.lastSegment());
		}
		return $.ig.JSONPathExpression.prototype.parse(pathBuilder.path());
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression::PathByReplacingMiddleSegmentsWithAny()" />*/
	,
	$type: new $.ig.Type('JSONPathExpression', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree" />*/

$.ig.util.defType('JSONTree', 'Object', {
	__root: null,
	init: function (initNumber, root) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.__root = root;
	},
	init1: function (initNumber, d) {
		$.ig.Object.prototype.init.call(this);
		this.__root = new $.ig.JSONTreeNode(1, d[$.ig.JSONTree.prototype._pROP_ROOT]);
	},
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::Root()" />*/
	root: function () {
		return this.__root;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::Root()" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::ToJson()" />*/
	toJson: function () {
		var json = {};
		json[$.ig.JSONTree.prototype._pROP_ROOT] = this.root().toJson();
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::ToJson()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::CommonAncestorDepth(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	commonAncestorDepth: function (nodeExpre, expre, missingNodes) {
		var commonPrefixDepth = expre.prefixContaining(nodeExpre).depth();
		var expreContainer = expre.pathByAddingSegmentWithAny();
		var node = this.singleNode(nodeExpre.pathTruncatedAtDepth(commonPrefixDepth), missingNodes);
		while (node != null) {
			var loopMissingNodes = new $.ig.BOOLWrapper();
			var foundNode = node.singleNodeRelative(expreContainer, commonPrefixDepth, loopMissingNodes);
			if (foundNode != null) {
				return commonPrefixDepth;
			} else if (loopMissingNodes.__value) {
				$.ig.BOOLWrapper.prototype.nullSafeSetTrue(missingNodes);
			}
			commonPrefixDepth -= 1;
			node = node.parent();
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::CommonAncestorDepth(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::SingleNode(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	singleNode: function (path, missingNodes) {
		return this.__root.singleNodeRelative(path, 0, missingNodes);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree::SingleNode(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	,
	$type: new $.ig.Type('JSONTree', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper" />*/

$.ig.util.defType('BOOLWrapper', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__value: false,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper::NullSafeSetTrue(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	nullSafeSetTrue: function (w) {
		if (w == null) {
			return;
		}
		w.__value = true;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper::NullSafeSetTrue(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	,
	$type: new $.ig.Type('BOOLWrapper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.IJSONTreeNode" />*/

$.ig.util.defType('IJSONTreeNode', 'Object', {
	$type: new $.ig.Type('IJSONTreeNode', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.IJSONTreeNode" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode" />*/

$.ig.util.defType('JSONTreeNode', 'Object', {
	__orderedEntries: null,
	__key: null,
	__index: 0,
	__parent: null,
	__jsonDataType: 0,
	__value: null,
	__lazyPath: null,
	__lazyEntriesByKey: null,
	__lazyPartialCHeight: 0,
	__childCountLazyLoad: 0,
	__guessedDateTimeFormatForValue: null,
	__guessedDateTimeDataTypeForValue: 0,
	__guessedDateTimeFormatForKey: null,
	__guessedDateTimeDataTypeForKey: 0,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__index = -1;
		this.__lazyPartialCHeight = -1;
		this.__childCountLazyLoad = -1;
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, json) {
		this.__index = -1;
		this.__lazyPartialCHeight = -1;
		this.__childCountLazyLoad = -1;
		$.ig.Object.prototype.init.call(this);
		this.__index = $.ig.JsonUtility.prototype.loadInt(json, $.ig.JSONTreeNode.prototype._pROP_INDEX);
		if ($.ig.JsonUtility.prototype.containsKey(json, $.ig.JSONTreeNode.prototype._pROP_KEY)) {
			this.__key = json[$.ig.JSONTreeNode.prototype._pROP_KEY];
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, $.ig.JSONTreeNode.prototype._pROP_VALUE)) {
			this.__value = json[$.ig.JSONTreeNode.prototype._pROP_VALUE];
		}
		this.__jsonDataType = $.ig.JSONTreeNode.prototype.deserializeDataType(json[$.ig.JSONTreeNode.prototype._pROP_DATA_TYPE]);
		this.__orderedEntries = $.ig.JSONTreeNode.prototype.deserializeChildren($.ig.NativeJSONUtility.prototype.convertJsonArrayToList($.ig.NativeDataLayerUtility.prototype.getJsonList(json, $.ig.JSONTreeNode.prototype._pROP_CHILDREN)), this);
		if ($.ig.JsonUtility.prototype.containsKey(json, $.ig.JSONTreeNode.prototype._pROP_CHILD_COUNT_LAZY_LOAD)) {
			this.__childCountLazyLoad = $.ig.JsonUtility.prototype.loadInt(json, $.ig.JSONTreeNode.prototype._pROP_CHILD_COUNT_LAZY_LOAD);
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, $.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_VALUE)) {
			this.__guessedDateTimeFormatForValue = json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_VALUE];
			this.__guessedDateTimeDataTypeForValue = $.ig.TabularDataSourceConfig.prototype.intToDashboardDataType($.ig.JsonUtility.prototype.loadInt(json, $.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_VALUE));
		}
		if ($.ig.JsonUtility.prototype.containsKey(json, $.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_KEY)) {
			this.__guessedDateTimeFormatForKey = json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_KEY];
			this.__guessedDateTimeDataTypeForKey = $.ig.TabularDataSourceConfig.prototype.intToDashboardDataType($.ig.JsonUtility.prototype.loadInt(json, $.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_KEY));
		}
	},
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ChildCount()" />*/
	childCount: function () {
		return this.__childCountLazyLoad != -1 ? this.__childCountLazyLoad : (this.__orderedEntries != null ? this.__orderedEntries.length : 0);
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ChildCount()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsFullyLoaded()" />*/
	isFullyLoaded: function () {
		return this.__childCountLazyLoad == -1 || this.__childCountLazyLoad < this.__orderedEntries.length;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsFullyLoaded()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GetOrderedChildren()" />*/
	getOrderedChildren: function () {
		return this.__orderedEntries;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GetOrderedChildren()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Path()" />*/
	path: function () {
		if (this.__lazyPath != null) {
			return this.__lazyPath;
		}
		if (this.__parent == null) {
			return $.ig.JSONPathExpression.prototype.parse($.ig.JSONPathBuilder.prototype.root().path());
		}
		var oIndex = this.__index;
		this.__lazyPath = this.__parent.path().pathByAddingSegmentWithValue(this.__key != null ? this.__key : oIndex);
		return this.__lazyPath;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Path()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsContainer()" />*/
	isContainer: function () {
		return this.__jsonDataType == $.ig.JSONDataType.prototype.dictionary || this.__jsonDataType == $.ig.JSONDataType.prototype.array;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsContainer()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsArray()" />*/
	isArray: function () {
		return this.__jsonDataType == $.ig.JSONDataType.prototype.array;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsArray()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsDictionary()" />*/
	isDictionary: function () {
		return this.__jsonDataType == $.ig.JSONDataType.prototype.dictionary;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::IsDictionary()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DataType()" />*/
	dataType: function () {
		return this.__jsonDataType;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DataType()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::NumberValue()" />*/
	numberValue: function () {
		return this.__value;
	}
	/*<EndProperty Name="System.Double Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::NumberValue()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::StringValue()" />*/
	stringValue: function () {
		return this.__value;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::StringValue()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ValueIsNull()" />*/
	valueIsNull: function () {
		return this.__jsonDataType == $.ig.JSONDataType.prototype.$null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ValueIsNull()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::BoolValue()" />*/
	boolValue: function () {
		return this.__value;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::BoolValue()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Value()" />*/
	value: function () {
		return this.__value;
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Value()" />*/
	,
	_userInfo: null,
	/*<BeginProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::UserInfo()" />*/
	userInfo: function (value) {
		if (arguments.length === 1) {
			this._userInfo = value;
			return value;
		} else {
			return this._userInfo;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::UserInfo()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Parent()" />*/
	parent: function () {
		return this.__parent;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Parent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::LoadedChildCount()" />*/
	loadedChildCount: function () {
		return this.__orderedEntries != null ? this.__orderedEntries.length : 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::LoadedChildCount()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Child(System.Int32)" />*/
	child: function (index) {
		return this.__orderedEntries[index];
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Child(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ChildForSegment(System.Object)" />*/
	childForSegment: function (segment) {
		return typeof segment === 'string' ? this.entryWithKey(segment) : this.child($.ig.util.getValue(segment));
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ChildForSegment(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ReplaceChild(System.Int32, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	replaceChild: function (index, loadedChildNode) {
		loadedChildNode.__parent = this;
		this.__orderedEntries[index] = loadedChildNode;
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ReplaceChild(System.Int32, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Index()" />*/
	index: function () {
		return this.__index;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Index()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Key()" />*/
	key: function () {
		return this.__key;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::Key()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::CHeight()" />*/
	cHeight: function () {
		if (this.__lazyPartialCHeight == -1) {
			if (!this.isContainer()) {
				return -1;
			}
			var maxCHeight = -1;
			if (this.__orderedEntries != null) {
				for (var i = 0; i < this.__orderedEntries.length; i++) {
					var node = this.__orderedEntries[i];
					if (node.isContainer()) {
						if (maxCHeight < node.cHeight()) {
							maxCHeight = node.cHeight();
						}
					}
				}
			}
			this.__lazyPartialCHeight = maxCHeight + 1;
		}
		return this.__lazyPartialCHeight;
	}
	/*<EndProperty Name="System.Int32 Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::CHeight()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeFormatForValue()" />*/
	guessedDateTimeFormatForValue: function () {
		return this.__guessedDateTimeFormatForValue;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeFormatForValue()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeDataTypeForValue()" />*/
	guessedDateTimeDataTypeForValue: function () {
		return this.__guessedDateTimeDataTypeForValue;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeDataTypeForValue()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeFormatForKey()" />*/
	guessedDateTimeFormatForKey: function () {
		return this.__guessedDateTimeFormatForKey;
	}
	/*<EndProperty Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeFormatForKey()" />*/
	,
	/*<BeginProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeDataTypeForKey()" />*/
	guessedDateTimeDataTypeForKey: function () {
		return this.__guessedDateTimeDataTypeForKey;
	}
	/*<EndProperty Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::GuessedDateTimeDataTypeForKey()" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SingleNodeRelative(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	singleNodeRelative: function (path, startingDepth, missingNodes) {
		if (startingDepth == path.depth()) {
			return this;
		}
		var segment = path.segment(startingDepth);
		if (segment == $.ig.JSONPathExpression.prototype.aNY) {
			if (this.isContainer()) {
				for (var i = 0; i < this.__orderedEntries.length; i++) {
					var child = this.__orderedEntries[i];
					var match = child.singleNodeRelative(path, startingDepth + 1, missingNodes);
					if (match != null) {
						return match;
					}
				}
				if (!this.isFullyLoaded()) {
					$.ig.BOOLWrapper.prototype.nullSafeSetTrue(missingNodes);
				}
			}
			return null;
		} else if (segment == $.ig.JSONPathExpression.prototype.pROP) {
			return this;
		} else {
			var child1 = null;
			if (typeof segment === 'string') {
				child1 = this.entryWithKey(segment);
				if (child1 == null && this.isDictionary() && !this.isFullyLoaded()) {
					$.ig.BOOLWrapper.prototype.nullSafeSetTrue(missingNodes);
				}
			} else if (this.__jsonDataType == $.ig.JSONDataType.prototype.array) {
				var index = $.ig.util.getValue(segment);
				if (index >= 0 && index < this.__orderedEntries.length) {
					child1 = this.__orderedEntries[index];
				} else if (index >= 0 && index < this.__childCountLazyLoad) {
					$.ig.BOOLWrapper.prototype.nullSafeSetTrue(missingNodes);
				}
			}
			return child1 != null ? child1.singleNodeRelative(path, startingDepth + 1, missingNodes) : null;
		}
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SingleNodeRelative(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression, System.Int32, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.BOOLWrapper)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::EntryWithKey(System.String)" />*/
	entryWithKey: function (key) {
		if (this.__lazyEntriesByKey == null) {
			if (this.__jsonDataType == $.ig.JSONDataType.prototype.dictionary) {
				var d = new $.ig.Dictionary(0);
				for (var i = 0; i < this.__orderedEntries.length; i++) {
					var node = this.__orderedEntries[i];
					d.item(node.key(), node);
				}
				this.__lazyEntriesByKey = d;
			} else {
				return null;
			}
		}
		return this.__lazyEntriesByKey.get(key);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::EntryWithKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::AddChildren(Infragistics.CPList)" />*/
	addChildren: function (children) {
		if (children != null) {
			for (var i = 0; i < children.length; i++) {
				this.addChildNode(children[i]);
			}
		}
		var node = this;
		do {
			node.__lazyPartialCHeight = -1;
			node = node.parent();
		} while (node != null);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::AddChildren(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::AddChildNode(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	addChildNode: function (child) {
		this.__orderedEntries.add(child);
		child.__parent = this;
		if (this.__lazyEntriesByKey != null) {
			this.__lazyEntriesByKey.item(child.key(), child);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::AddChildNode(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	,
	/*<BeginMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ToJson()" />*/
	toJson: function () {
		var json = {};
		json[$.ig.JSONTreeNode.prototype._pROP_INDEX] = this.__index;
		if (this.__key != null) {
			json[$.ig.JSONTreeNode.prototype._pROP_KEY] = this.__key;
		}
		json[$.ig.JSONTreeNode.prototype._pROP_DATA_TYPE] = $.ig.JSONTreeNode.prototype.serializeDataType(this.__jsonDataType);
		if (this.__value != null) {
			json[$.ig.JSONTreeNode.prototype._pROP_VALUE] = this.__value;
		}
		if (this.__orderedEntries != null) {
			json[$.ig.JSONTreeNode.prototype._pROP_CHILDREN] = $.ig.JSONTreeNode.prototype.serializeChildren(this.__orderedEntries);
		}
		if (this.__childCountLazyLoad != -1) {
			json[$.ig.JSONTreeNode.prototype._pROP_CHILD_COUNT_LAZY_LOAD] = this.__childCountLazyLoad;
		}
		if (this.__guessedDateTimeFormatForValue != null) {
			json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_VALUE] = this.__guessedDateTimeFormatForValue;
			json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_VALUE] = $.ig.TabularDataSourceConfig.prototype.dashboardDataTypeToInt(this.__guessedDateTimeDataTypeForValue);
		}
		if (this.__guessedDateTimeFormatForKey != null) {
			json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_KEY] = this.__guessedDateTimeFormatForKey;
			json[$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_KEY] = $.ig.TabularDataSourceConfig.prototype.dashboardDataTypeToInt(this.__guessedDateTimeDataTypeForKey);
		}
		return json;
	}
	/*<EndMethod Name="System.JSDictionary Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::ToJson()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SerializeDataType(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType)" />*/
	serializeDataType: function (jsonDataType) {
		switch (jsonDataType) {
			case $.ig.JSONDataType.prototype.array: return "Array";
			case $.ig.JSONDataType.prototype.boolean1: return "Boolean";
			case $.ig.JSONDataType.prototype.dictionary: return "Dictionary";
			case $.ig.JSONDataType.prototype.$null: return "Null";
			case $.ig.JSONDataType.prototype.number: return "Number";
			case $.ig.JSONDataType.prototype.string1: return "String";
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SerializeDataType(Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DeserializeDataType(System.String)" />*/
	deserializeDataType: function (str) {
		if (str == "Array") {
			return $.ig.JSONDataType.prototype.array;
		} else if (str == "Boolean") {
			return $.ig.JSONDataType.prototype.boolean1;
		} else if (str == "Dictionary") {
			return $.ig.JSONDataType.prototype.dictionary;
		} else if (str == "Null") {
			return $.ig.JSONDataType.prototype.$null;
		} else if (str == "Number") {
			return $.ig.JSONDataType.prototype.number;
		} else if (str == "String") {
			return $.ig.JSONDataType.prototype.string1;
		}
		return $.ig.JSONDataType.prototype.$null;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DeserializeDataType(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SerializeChildren(Infragistics.CPList)" />*/
	serializeChildren: function (children) {
		if (children == null) {
			return null;
		}
		var array = new $.ig.Array();
		for (var i = 0; i < children.length; i++) {
			var node = children[i];
			array.add(node.toJson());
		}
		return array;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::SerializeChildren(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DeserializeChildren(Infragistics.CPList, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	deserializeChildren: function (array, parent) {
		if (array == null) {
			return null;
		}
		var list = new $.ig.Array();
		for (var i = 0; i < array.length; i++) {
			var elem = $.ig.NativeDataLayerUtility.prototype.getJsonObject(array[i]);
			var child = new $.ig.JSONTreeNode(1, elem);
			child.__index = i;
			child.__parent = parent;
			list.add(child);
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode::DeserializeChildren(Infragistics.CPList, Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode)" />*/
	,
	$type: new $.ig.Type('JSONTreeNode', $.ig.Object.prototype.$type, [$.ig.IJSONTreeNode.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.IJSONTreeNodeList" />*/

$.ig.util.defType('IJSONTreeNodeList', 'Object', {
	$type: new $.ig.Type('IJSONTreeNodeList', null)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.IJSONTreeNodeList" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList" />*/

$.ig.util.defType('JSONTreeNodeList', 'Object', {
	_nodeList: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList::NodeList()" />*/
	nodeList: function (value) {
		if (arguments.length === 1) {
			this._nodeList = value;
			return value;
		} else {
			return this._nodeList;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList::NodeList()" />*/
	,
	init: function (nodeList) {
		$.ig.Object.prototype.init.call(this);
		this.nodeList(nodeList);
	},
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList::ToJsonList()" />*/
	toJsonList: function () {
		var jsonList = new $.ig.Array();
		for (var i = 0; i < this.nodeList().length; i++) {
			jsonList.add((this.nodeList()[i]).toJson());
		}
		return jsonList;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList::ToJsonList()" />*/
	,
	$type: new $.ig.Type('JSONTreeNodeList', $.ig.Object.prototype.$type, [$.ig.IJSONTreeNodeList.prototype.$type])
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNodeList" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAnalytics.GoogleAnalyticsProviderModel" />*/

$.ig.util.defType('GoogleAnalyticsProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('GoogleAnalyticsProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAnalytics.GoogleAnalyticsProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel" />*/

$.ig.util.defType('GoogleAdsProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::IsBlendingSupported()" />*/
	isBlendingSupported: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::IsBlendingSupported()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	copyProperties: function (fromMetadataItem, toDS) {
		if (fromMetadataItem.dataSourceItem() == null) {
			return;
		}
		var customerId = fromMetadataItem.dataSourceItem().properties().getObjectValue("customerId");
		if (customerId != null) {
			toDS.properties().setObjectValue("customerId", customerId);
		}
		var displayName = fromMetadataItem.displayName();
		var formattedCustomerId = $.ig.GoogleAdsProviderModel.prototype.formatCustomerId(customerId);
		if (formattedCustomerId != null) {
			displayName = displayName + " (" + formattedCustomerId + ")";
		}
		toDS.properties().setObjectValue("DisplayName", displayName);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::GetPropertyValue(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	getPropertyValue: function (metadataItem, property) {
		if (metadataItem.dataSourceItem() != null && metadataItem.dataSourceItem().properties().containsKey(property)) {
			return metadataItem.dataSourceItem().properties().getObjectValue(property);
		} else if (metadataItem.dataSource() != null && metadataItem.dataSource().properties().containsKey(property)) {
			return metadataItem.dataSource().properties().getObjectValue(property);
		}
		return null;
	}
	/*<EndMethod Name="System.Object Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::GetPropertyValue(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::FormatCustomerId(System.String)" />*/
	formatCustomerId: function (customerId) {
		if (customerId == null) {
			return null;
		}
		if ($.ig.NativeStringUtility.prototype.isNumeric(customerId) && customerId.length == 10) {
			return $.ig.NativeStringUtility.prototype.substring(customerId, 0, 3) + "-" + $.ig.NativeStringUtility.prototype.substring(customerId, 3, 3) + "-" + $.ig.NativeStringUtility.prototype.substring(customerId, 6, 4);
		} else {
			return customerId;
		}
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel::FormatCustomerId(System.String)" />*/
	,
	$type: new $.ig.Type('GoogleAdsProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel" />*/

$.ig.util.defType('DataDotWorldProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	datasetId: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::Owner(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	owner: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::Owner(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItemOwner(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	tableMetadataItemOwner: function (mi) {
		return mi.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItemOwner(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetMetadataItemDatasetData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	setMetadataItemDatasetData: function (mi, owner, datasetId) {
		mi.id(datasetId);
		mi.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER, owner);
		mi.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		mi.itemType($.ig.DataDotWorldProviderModel.prototype.mETADATA_ITEM_TYPE_DATASETS);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(mi.displayName())) {
			mi.displayName(datasetId);
		}
		mi.isContainer(true);
		mi.groupId($.ig.SqlBaseMetadataModel.prototype.databasesGroupId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetMetadataItemDatasetData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	tableName: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_TABLE_NAME);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetMetadataItemTableData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String, System.String, System.String)" />*/
	setMetadataItemTableData: function (mi, owner, datasetId, tableId, dsId) {
		mi.id(tableId);
		mi.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER, owner);
		mi.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		mi.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_TABLE_NAME, tableId);
		mi.itemType($.ig.DataDotWorldProviderModel.prototype.mETADATA_ITEM_TYPE_TABLE);
		mi.groupId($.ig.SqlBaseMetadataModel.prototype.tablesGroupId);
		mi.hasData(true);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(mi.displayName())) {
			mi.displayName(tableId);
		}
		var dsItem = new $.ig.DataSourceItem(0);
		dsItem.id(tableId);
		dsItem.hasAsset(false);
		dsItem.hasTabularData(true);
		dsItem.title(mi.displayName());
		dsItem.dataSourceId(dsId);
		dsItem.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER, owner);
		dsItem.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		dsItem.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_TABLE_NAME, tableId);
		mi.dataSourceItem(dsItem);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetMetadataItemTableData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	metadataItemRoot: function (ds) {
		var root = new $.ig.MetadataItem(0);
		root.dataSource(ds);
		root.dataSourceItem(null);
		root.hasData(false);
		root.hasResource(false);
		root.isContainer(true);
		root.id(ds.id());
		root.displayName(ds.description());
		root.groupId($.ig.MetadataLayerConstants.prototype.providersGroupDataStores);
		root.iconId($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		root.itemType($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		return root;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItemDatasetId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	tableMetadataItemDatasetId: function (mi) {
		return mi.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItemDatasetId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DatasetMetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	datasetMetadataItem: function (ds, title, owner, datasetId) {
		var mi = new $.ig.MetadataItem(0);
		mi.dataSource(ds);
		mi.displayName(title);
		$.ig.DataDotWorldProviderModel.prototype.setMetadataItemDatasetData(mi, owner, datasetId);
		return mi;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DatasetMetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	tableMetadataItem: function (dataSource, owner, datasetId, tableId) {
		var mi = new $.ig.MetadataItem(0);
		mi.dataSource(dataSource);
		mi.displayName(tableId);
		$.ig.DataDotWorldProviderModel.prototype.setMetadataItemTableData(mi, owner, datasetId, tableId, dataSource.id());
		return mi;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::TableMetadataItem(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::Owner_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	owner_DS: function (ds) {
		return ds.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::Owner_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	metadataItemDataset1: function (ds, dsItem) {
		return $.ig.DataDotWorldProviderModel.prototype.metadataItemDataset2(ds, $.ig.DataDotWorldProviderModel.prototype.displayName(ds), $.ig.DataDotWorldProviderModel.prototype.owner(dsItem), $.ig.DataDotWorldProviderModel.prototype.datasetId(dsItem));
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	metadataItemDataset2: function (ds, displayName, owner, datasetId) {
		var mi = new $.ig.MetadataItem(0);
		mi.dataSource(ds);
		mi.displayName(displayName);
		$.ig.DataDotWorldProviderModel.prototype.setMetadataItemDatasetData(mi, owner, datasetId);
		return mi;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DisplayName(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	displayName: function (ds) {
		return ds.properties().getObjectValue("DisplayName");
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::DisplayName(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetDataSourceRootData(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String)" />*/
	setDataSourceRootData: function (toDS, owner, datasetId) {
		toDS.properties().setObjectValue("AccountId", owner);
		toDS.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER, owner);
		toDS.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::SetDataSourceRootData(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::HasDatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	hasDatasetId: function (ds) {
		return ds.properties().containsKey($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::HasDatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	metadataItemDataset: function (ds) {
		var datasetId = ds.properties().getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
		var displayName = ds.properties().getObjectValue("DisplayName");
		return $.ig.DataDotWorldProviderModel.prototype.metadataItemDataset2(ds, displayName, $.ig.DataDotWorldProviderModel.prototype.owner_DS(ds), datasetId);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	copyProperties: function (fromMetadataItem, toDS) {
		var miProps = fromMetadataItem.properties();
		toDS.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER, miProps.getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER));
		toDS.properties().setObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID, miProps.getObjectValue($.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID));
		toDS.properties().setObjectValue("DisplayName", fromMetadataItem.displayName());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::IsBlendingSupported()" />*/
	isBlendingSupported: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel::IsBlendingSupported()" />*/
	,
	$type: new $.ig.Type('DataDotWorldProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel" />*/

$.ig.util.defType('BigQueryProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	copyProperties: function (fromMetadataItem, toDS) {
		var miProps = fromMetadataItem.properties();
		toDS.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, miProps.getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID));
		toDS.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, miProps.getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID));
		toDS.properties().setObjectValue("DisplayName", fromMetadataItem.displayName());
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::CopyProperties(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	metadataItemDataset: function (ds) {
		var projectId = ds.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID);
		var datasetId = ds.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
		var displayName = ds.properties().getObjectValue("DisplayName");
		return $.ig.BigQueryProviderModel.prototype.metadataItemDataset2(ds, displayName, projectId, datasetId);
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	metadataItemDataset1: function (ds, dsItem) {
		return $.ig.BigQueryProviderModel.prototype.metadataItemDataset2(ds, $.ig.BigQueryProviderModel.prototype.displayName(ds), $.ig.BigQueryProviderModel.prototype.projectId(dsItem), $.ig.BigQueryProviderModel.prototype.datasetId(dsItem));
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::DatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	datasetId: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::DatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	projectId: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectId(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectId_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	projectId_DS: function (ds) {
		return ds.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectId_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetProjectId_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setProjectId_DS: function (ds, projectId) {
		ds.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetProjectId_DS(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectMetadataItemProjectId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	projectMetadataItemProjectId: function (mi) {
		return mi.id();
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectMetadataItemProjectId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemProjectId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	tableMetadataItemProjectId: function (mi) {
		return mi.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemProjectId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemModelId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	tableMetadataItemModelId: function (mi) {
		return mi.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_MODEL_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemModelId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::DisplayName(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	displayName: function (ds) {
		return ds.properties().getObjectValue("DisplayName");
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::DisplayName(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	metadataItemDataset2: function (ds, displayName, projectId, datasetId) {
		var mi = new $.ig.MetadataItem(0);
		mi.dataSource(ds);
		mi.displayName(displayName);
		$.ig.BigQueryProviderModel.prototype.setMetadataItemDatasetData(mi, projectId, datasetId);
		return mi;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemDataset(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemDatasetData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	setMetadataItemDatasetData: function (mi, projectId, datasetId) {
		mi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
		mi.id(datasetId);
		mi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		mi.itemType($.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_DATASETS);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(mi.displayName())) {
			mi.displayName(datasetId);
		}
		mi.isContainer(true);
		mi.groupId($.ig.SqlBaseMetadataModel.prototype.databasesGroupId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemDatasetData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	tableName: function (dsItem) {
		return dsItem.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_TABLE_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableName(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectMetadataItem(System.String, System.String)" />*/
	projectMetadataItem: function (identifier, displayName) {
		var m = new $.ig.MetadataItem(0);
		m.id(identifier);
		m.displayName(displayName);
		m.isContainer(true);
		m.itemType($.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_PROJECT);
		return m;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::ProjectMetadataItem(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemProjectData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	setMetadataItemProjectData: function (mi, id) {
		mi.id(id);
		mi.itemType($.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_PROJECT);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(mi.displayName())) {
			mi.displayName(mi.id());
		}
		mi.isContainer(true);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemProjectData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemTableData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String, System.String, System.Boolean, System.String, System.String)" />*/
	setMetadataItemTableData: function (mi, projectId, datasetId, tableId, isView, dsId, dsItemId) {
		mi.id(tableId);
		mi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
		mi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		mi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_TABLE_ID, tableId);
		mi.itemType(isView ? $.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_VIEW : $.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_TABLE);
		mi.groupId(isView ? $.ig.SqlBaseMetadataModel.prototype.viewsGroupId : $.ig.SqlBaseMetadataModel.prototype.tablesGroupId);
		mi.hasData(true);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(mi.displayName())) {
			mi.displayName(tableId);
		}
		var dsItem = new $.ig.DataSourceItem(0);
		dsItem.id(dsItemId);
		dsItem.hasAsset(false);
		dsItem.hasTabularData(true);
		dsItem.title(mi.displayName());
		dsItem.dataSourceId(dsId);
		dsItem.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
		dsItem.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		dsItem.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_TABLE_ID, tableId);
		mi.dataSourceItem(dsItem);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetMetadataItemTableData(Infragistics.ReportPlus.DataLayer.Api.MetadataItem, System.String, System.String, System.String, System.Boolean, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::HasDatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	hasDatasetId: function (ds) {
		return ds.properties().containsKey($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::HasDatasetId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	metadataItemRoot: function (ds) {
		var root = new $.ig.MetadataItem(0);
		root.dataSource(ds);
		root.dataSourceItem(null);
		root.hasData(false);
		root.hasResource(false);
		root.isContainer(true);
		root.id(ds.id());
		root.displayName(ds.description());
		root.groupId($.ig.MetadataLayerConstants.prototype.providersGroupDataStores);
		root.iconId($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		root.itemType($.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType);
		return root;
	}
	/*<EndMethod Name="Infragistics.ReportPlus.DataLayer.Api.MetadataItem Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::MetadataItemRoot(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemDatasetId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	tableMetadataItemDatasetId: function (mi) {
		return mi.properties().getObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::TableMetadataItemDatasetId(Infragistics.ReportPlus.DataLayer.Api.MetadataItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetDataSourceRootData(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String)" />*/
	setDataSourceRootData: function (toDS, projectId, datasetId) {
		toDS.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
		toDS.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetDataSourceRootData(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetDataSourceItemData(Infragistics.ReportPlus.DashboardModel.DataSourceItem, System.String, System.String, System.String)" />*/
	setDataSourceItemData: function (dsi, projectId, datasetId, table) {
		dsi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID, projectId);
		dsi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID, datasetId);
		dsi.properties().setObjectValue($.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_TABLE_ID, table);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::SetDataSourceItemData(Infragistics.ReportPlus.DashboardModel.DataSourceItem, System.String, System.String, System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::IsBlendingSupported()" />*/
	isBlendingSupported: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel::IsBlendingSupported()" />*/
	,
	$type: new $.ig.Type('BigQueryProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel" />*/

$.ig.util.defType('AthenaProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::IsBlendingSupported()" />*/
	isBlendingSupported: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::IsBlendingSupported()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::DataCatalog(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	dataCatalog: function (dataSource) {
		var v = dataSource.properties().getObjectValue($.ig.AthenaProviderModel.prototype.dATASOURCE_DATACATALOG);
		return v != null ? v : "AwsDataCatalog";
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::DataCatalog(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetDataCatalog(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setDataCatalog: function (dataSource, dataCatalog) {
		dataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype.dATASOURCE_DATACATALOG, dataCatalog);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetDataCatalog(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Database(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	database: function (ds) {
		return ds.properties().getObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_DATABASE);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Database(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetDataBase(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setDataBase: function (dataSource, database) {
		dataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_DATABASE, database);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetDataBase(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::OutputLocation(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	outputLocation: function (ds) {
		return ds.properties().getObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_OUTPUT_LOCATION);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::OutputLocation(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetOutputLocation(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setOutputLocation: function (ds, outputLocation) {
		ds.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_OUTPUT_LOCATION, outputLocation);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetOutputLocation(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String, System.String, System.String)" />*/
	setupDataSource: function (modelDataSource, region, dataCatalog, database, outputLocation, workgroup) {
		$.ig.AthenaProviderModel.prototype.setRegion(modelDataSource, region);
		modelDataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype.dATASOURCE_DATACATALOG, dataCatalog);
		modelDataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_DATABASE, database);
		$.ig.AthenaProviderModel.prototype.setOutputLocation(modelDataSource, outputLocation);
		$.ig.AthenaProviderModel.prototype.setWorkGroup(modelDataSource, workgroup);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Table(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	table: function (modelDataSourceItem) {
		return modelDataSourceItem.properties().getObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCEITEM_TABLE);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Table(Infragistics.ReportPlus.DashboardModel.BaseDataSourceItem)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetupDataSourceItem(Infragistics.ReportPlus.DashboardModel.DataSourceItem, System.String)" />*/
	setupDataSourceItem: function (modelDataSourceItem, table) {
		modelDataSourceItem.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCEITEM_TABLE, table);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetupDataSourceItem(Infragistics.ReportPlus.DashboardModel.DataSourceItem, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Region(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	region: function (ds) {
		return ds.properties().getObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_REGION);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Region(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetRegion(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setRegion: function (modelDataSource, region) {
		modelDataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_REGION, region);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetRegion(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Workgroup(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	workgroup: function (ds) {
		return ds.properties().getObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_WORKGROUP);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::Workgroup(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetWorkGroup(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setWorkGroup: function (modelDataSource, workgroup) {
		modelDataSource.properties().setObjectValue($.ig.AthenaProviderModel.prototype._dATASOURCE_WORKGROUP, workgroup);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel::SetWorkGroup(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	$type: new $.ig.Type('AthenaProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel" />*/

$.ig.util.defType('AzureAnalysisServicesProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::IsAzureURL(System.String)" />*/
	isAzureURL: function (url) {
		return url != null && $.ig.NativeStringUtility.prototype.startsWith(url, "asazure://");
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::IsAzureURL(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	setupDataSource: function (dataSource) {
		dataSource.properties().setObjectValue($.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_CONNECTION_MODE, $.ig.AzureAnalysisServicesProviderModel.prototype._cONNECTION_MODE_HTTP);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setURL: function (dataSource, url) {
		dataSource.properties().setObjectValue($.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_URL, url);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	getURL: function (dataSource) {
		return dataSource.properties().getObjectValue($.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_URL);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetAccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ProviderBase)" />*/
	setAccountId: function (dataSource, provider) {
		dataSource.properties().setObjectValue($.ig.EngineConstants.prototype.accountIdPropertyName, $.ig.AzureAnalysisServicesOAuthProvider.prototype.accountId(provider.convertToString()));
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetAccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource, Infragistics.ProviderBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetAccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	getAccountId: function (dataSource) {
		return dataSource.properties().getObjectValue($.ig.EngineConstants.prototype.accountIdPropertyName);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetAccountId(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::HasValidURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	hasValidURL: function (dataSource) {
		var url = dataSource.properties().getObjectValue($.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_URL);
		return $.ig.AzureAnalysisServicesProviderModel.prototype.isAzureURL(url);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::HasValidURL(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.DataSource, Infragistics.ProviderBase, System.String, System.String)" />*/
	setupDataSource1: function (dataSource, provider, url, database) {
		$.ig.AzureAnalysisServicesProviderModel.prototype.setupDataSource(dataSource);
		if (provider != null) {
			$.ig.AzureAnalysisServicesProviderModel.prototype.setAccountId(dataSource, provider);
		}
		$.ig.AzureAnalysisServicesProviderModel.prototype.setURL(dataSource, url);
		dataSource.properties().setObjectValue($.ig.EngineConstants.prototype.databasePropertyName, database);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::SetupDataSource(Infragistics.ReportPlus.DashboardModel.DataSource, Infragistics.ProviderBase, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::ServerName(System.String)" />*/
	serverName: function (asazureUrl) {
		var path = $.ig.CPStringUtility.prototype.getPathFromURI(asazureUrl);
		return $.ig.CPStringUtility.prototype.isNullOrEmpty(path) ? path : $.ig.NativeStringUtility.prototype.substring(path, 1, path.length - 1);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::ServerName(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	getDatabase: function (modelDataSource) {
		return modelDataSource.properties().getObjectValue($.ig.EngineConstants.prototype.databasePropertyName);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel::GetDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	$type: new $.ig.Type('AzureAnalysisServicesProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel" />*/

/*<BeginType Name="Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel" />*/

$.ig.util.defType('SnowflakeProviderModel', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Account(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	account: function (ds) {
		return ds.properties().getObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_ACCOUNT);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Account(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setAccount: function (dataSource, account) {
		dataSource.properties().setObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_ACCOUNT, account);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	removeAccount: function (dataSource) {
		dataSource.properties().removeKey($.ig.SnowflakeProviderModel.prototype._dATASOURCE_ACCOUNT);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveAccount(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Host(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	host: function (ds) {
		return ds.properties().getObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_HOST);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Host(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetHost(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setHost: function (dataSource, host) {
		dataSource.properties().setObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_HOST, host);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetHost(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveHost(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	removeHost: function (dataSource) {
		dataSource.properties().removeKey($.ig.SnowflakeProviderModel.prototype._dATASOURCE_HOST);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveHost(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Database(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	database: function (ds) {
		return ds.properties().getObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_DATABASE);
	}
	/*<EndMethod Name="System.String Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::Database(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	setDatabase: function (dataSource, database) {
		dataSource.properties().setObjectValue($.ig.SnowflakeProviderModel.prototype._dATASOURCE_DATABASE, database);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::SetDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	removeDatabase: function (dataSource) {
		dataSource.properties().removeKey($.ig.SnowflakeProviderModel.prototype._dATASOURCE_DATABASE);
	}
	/*<EndMethod Name="System.Void Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::RemoveDatabase(Infragistics.ReportPlus.DashboardModel.BaseDataSource)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::BlendingSupported()" />*/
	blendingSupported: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel::BlendingSupported()" />*/
	,
	$type: new $.ig.Type('SnowflakeProviderModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType" />*/

$.ig.JSONDataType.prototype.string1 = 0;
$.ig.JSONDataType.prototype.number = 1;
$.ig.JSONDataType.prototype.boolean1 = 2;
$.ig.JSONDataType.prototype.$null = 3;
$.ig.JSONDataType.prototype.array = 4;
$.ig.JSONDataType.prototype.dictionary = 5;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONDataType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType" />*/

$.ig.JSONMappingType.prototype.jSONMappingTypePath = 0;
$.ig.JSONMappingType.prototype.jSONMappingTypeDictionaryKey = 1;
$.ig.JSONMappingType.prototype.jSONMappingTypeDictionaryValue = 2;
$.ig.JSONMappingType.prototype.jSONMappingTypeExpression = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMappingType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType" />*/

$.ig.PropertyDescriptorType.prototype.string1 = 0;
$.ig.PropertyDescriptorType.prototype.bool = 1;
$.ig.PropertyDescriptorType.prototype.$int = 2;
$.ig.PropertyDescriptorType.prototype.double1 = 3;
$.ig.PropertyDescriptorType.prototype.date = 4;
$.ig.PropertyDescriptorType.prototype.dateTime = 5;
$.ig.PropertyDescriptorType.prototype.time = 6;
$.ig.PropertyDescriptorType.prototype.object1 = 7;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Api.PropertyDescriptorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType" />*/

$.ig.RPExportDataObjectType.prototype.dataTable = 0;
$.ig.RPExportDataObjectType.prototype.image = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.RPExportDataObjectType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode" />*/

$.ig.ReportPlusErrorCode.prototype.unableToConnect = 0;
$.ig.ReportPlusErrorCode.prototype.authenticationNotConfigured = 1;
$.ig.ReportPlusErrorCode.prototype.authenticationFailed = 2;
$.ig.ReportPlusErrorCode.prototype.noNetworkConnection = 3;
$.ig.ReportPlusErrorCode.prototype.fileNotFound = 4;
$.ig.ReportPlusErrorCode.prototype.other = 5;
$.ig.ReportPlusErrorCode.prototype.dSNotReachableFromCloud = 6;
$.ig.ReportPlusErrorCode.prototype.filterError = 7;
$.ig.ReportPlusErrorCode.prototype.hostUnreachable = 8;
$.ig.ReportPlusErrorCode.prototype.onPremDataLoading = 9;
$.ig.ReportPlusErrorCode.prototype.cantTransposeData = 10;
$.ig.ReportPlusErrorCode.prototype.sharedFileAccessFailed = 11;
$.ig.ReportPlusErrorCode.prototype.dataSizeLimitReached_FileSize = 12;
$.ig.ReportPlusErrorCode.prototype.dataSizeLimitReached_CellCount = 13;
$.ig.ReportPlusErrorCode.prototype.dataSizeLimitReached_TotalStrings = 14;
$.ig.ReportPlusErrorCode.prototype.dataSizeLimitReached_PivotCellCount = 15;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.ReportPlusErrorCode" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType" />*/

$.ig.DashboardXmlaElementType.prototype.dimension = 0;
$.ig.DashboardXmlaElementType.prototype.level = 1;
$.ig.DashboardXmlaElementType.prototype.hierarchy = 2;
$.ig.DashboardXmlaElementType.prototype.member = 3;
$.ig.DashboardXmlaElementType.prototype.set = 4;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaElementType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType" />*/

$.ig.DashboardXmlaDimensionEnumType.prototype.regular = 0;
$.ig.DashboardXmlaDimensionEnumType.prototype.date = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardXmlaDimensionEnumType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType" />*/

$.ig.DashboardTrendlineType.prototype.none = 0;
$.ig.DashboardTrendlineType.prototype.linearFit = 1;
$.ig.DashboardTrendlineType.prototype.quadraticFit = 2;
$.ig.DashboardTrendlineType.prototype.cubicFit = 3;
$.ig.DashboardTrendlineType.prototype.quarticFit = 4;
$.ig.DashboardTrendlineType.prototype.logarithmicFit = 5;
$.ig.DashboardTrendlineType.prototype.exponentialFit = 6;
$.ig.DashboardTrendlineType.prototype.powerLawFit = 7;
$.ig.DashboardTrendlineType.prototype.simpleAverage = 8;
$.ig.DashboardTrendlineType.prototype.exponentialAverage = 9;
$.ig.DashboardTrendlineType.prototype.modifiedAverage = 10;
$.ig.DashboardTrendlineType.prototype.cumulativeAverage = 11;
$.ig.DashboardTrendlineType.prototype.weightedAverage = 12;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTrendlineType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType" />*/

$.ig.DashboardTreeMapLayoutEnumType.prototype.squarified = 0;
$.ig.DashboardTreeMapLayoutEnumType.prototype.sliceAndDice = 1;
$.ig.DashboardTreeMapLayoutEnumType.prototype.strip = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapLayoutEnumType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType" />*/

$.ig.DashboardTreeMapColorType.prototype.singleColor = 0;
$.ig.DashboardTreeMapColorType.prototype.gradient = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapColorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType" />*/

$.ig.DashboardTreeMapBoundColorType.prototype.green = 0;
$.ig.DashboardTreeMapBoundColorType.prototype.red = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTreeMapBoundColorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType" />*/

$.ig.DashboardTimeRuleType.prototype.none = 0;
$.ig.DashboardTimeRuleType.prototype.customRange = 1;
$.ig.DashboardTimeRuleType.prototype.allTime = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTimeRuleType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment" />*/

$.ig.DashboardTextAlignment.prototype.inherit = 0;
$.ig.DashboardTextAlignment.prototype.left = 1;
$.ig.DashboardTextAlignment.prototype.center = 2;
$.ig.DashboardTextAlignment.prototype.right = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardTextAlignment" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType" />*/

$.ig.DashboardStringRuleType.prototype.none = 0;
$.ig.DashboardStringRuleType.prototype.equals = 1;
$.ig.DashboardStringRuleType.prototype.notEquals = 2;
$.ig.DashboardStringRuleType.prototype.contains = 3;
$.ig.DashboardStringRuleType.prototype.notContains = 4;
$.ig.DashboardStringRuleType.prototype.startsWith = 5;
$.ig.DashboardStringRuleType.prototype.endsWith = 6;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardStringRuleType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType" />*/

$.ig.DashboardSortingType.prototype.none = 0;
$.ig.DashboardSortingType.prototype.asc = 1;
$.ig.DashboardSortingType.prototype.desc = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardSortingType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType" />*/

$.ig.DashboardShapeType.prototype.none = 0;
$.ig.DashboardShapeType.prototype.circle = 1;
$.ig.DashboardShapeType.prototype.arrowUp = 2;
$.ig.DashboardShapeType.prototype.arrowRight = 3;
$.ig.DashboardShapeType.prototype.arrowDown = 4;
$.ig.DashboardShapeType.prototype.arrowLeft = 5;
$.ig.DashboardShapeType.prototype.dash = 6;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardShapeType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType" />*/

$.ig.DashboardScatterMapColorizationModeType.prototype.single = 0;
$.ig.DashboardScatterMapColorizationModeType.prototype.range = 1;
$.ig.DashboardScatterMapColorizationModeType.prototype.conditionalFormatting = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardScatterMapColorizationModeType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType" />*/

$.ig.DashboardNumberRuleType.prototype.none = 0;
$.ig.DashboardNumberRuleType.prototype.topItems = 1;
$.ig.DashboardNumberRuleType.prototype.topPercent = 2;
$.ig.DashboardNumberRuleType.prototype.bottomItems = 3;
$.ig.DashboardNumberRuleType.prototype.bottomPercent = 4;
$.ig.DashboardNumberRuleType.prototype.aboveAverage = 5;
$.ig.DashboardNumberRuleType.prototype.aboveValue = 6;
$.ig.DashboardNumberRuleType.prototype.belowAverage = 7;
$.ig.DashboardNumberRuleType.prototype.belowValue = 8;
$.ig.DashboardNumberRuleType.prototype.aboveEqualsValue = 9;
$.ig.DashboardNumberRuleType.prototype.belowEqualsValue = 10;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberRuleType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType" />*/

$.ig.DashboardNumberFormattingType.prototype.none = 0;
$.ig.DashboardNumberFormattingType.prototype.number = 1;
$.ig.DashboardNumberFormattingType.prototype.percent = 2;
$.ig.DashboardNumberFormattingType.prototype.currency = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNumberFormattingType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType" />*/

$.ig.DashboardNegativeFormatType.prototype.empty = 0;
$.ig.DashboardNegativeFormatType.prototype.minusSign = 1;
$.ig.DashboardNegativeFormatType.prototype.parenthesis = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardNegativeFormatType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType" />*/

$.ig.DashboardMapVisualizationType.prototype.standard = 0;
$.ig.DashboardMapVisualizationType.prototype.satellite = 1;
$.ig.DashboardMapVisualizationType.prototype.hybrid = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardMapVisualizationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType" />*/

$.ig.DashboardMapLocationType.prototype.geocoding = 0;
$.ig.DashboardMapLocationType.prototype.latitudeLongitudeSingleField = 1;
$.ig.DashboardMapLocationType.prototype.latitudeLongitudeFields = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardMapLocationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode" />*/

$.ig.DashboardLabelDisplayMode.prototype.percentage = 0;
$.ig.DashboardLabelDisplayMode.prototype.value = 1;
$.ig.DashboardLabelDisplayMode.prototype.valueAndPercentage = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardLabelDisplayMode" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType" />*/

$.ig.DashboardIndicatorVisualizationType.prototype.yearToDatePreviousYear = 0;
$.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousQuarter = 1;
$.ig.DashboardIndicatorVisualizationType.prototype.quarterToDatePreviousYear = 2;
$.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousMonth = 3;
$.ig.DashboardIndicatorVisualizationType.prototype.monthToDatePreviousYear = 4;
$.ig.DashboardIndicatorVisualizationType.prototype.lastYears = 5;
$.ig.DashboardIndicatorVisualizationType.prototype.lastQuarters = 6;
$.ig.DashboardIndicatorVisualizationType.prototype.lastMonths = 7;
$.ig.DashboardIndicatorVisualizationType.prototype.lastDays = 8;
$.ig.DashboardIndicatorVisualizationType.prototype.lastHours = 9;
$.ig.DashboardIndicatorVisualizationType.prototype.lastMinutes = 10;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorVisualizationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType" />*/

$.ig.DashboardIndicatorTargetDateFilterType.prototype.allTime = 0;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.customRange = 1;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.yearToDate = 2;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.quarterToDate = 3;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.monthToDate = 4;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.previousYear = 5;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.previousQuarter = 6;
$.ig.DashboardIndicatorTargetDateFilterType.prototype.previousMonth = 7;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorTargetDateFilterType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode" />*/

$.ig.DashboardIndicatorDifferenceMode.prototype.percentage = 0;
$.ig.DashboardIndicatorDifferenceMode.prototype.value = 1;
$.ig.DashboardIndicatorDifferenceMode.prototype.valueAndPercentage = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardIndicatorDifferenceMode" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType" />*/

$.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeSingleField = 0;
$.ig.DashboardHeatMapLocationType.prototype.latitudeLongitudeFields = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardHeatMapLocationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType" />*/

$.ig.DashboardGlobalVariableValueType.prototype.string1 = 0;
$.ig.DashboardGlobalVariableValueType.prototype.number = 1;
$.ig.DashboardGlobalVariableValueType.prototype.dateTime = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalVariableValueType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType" />*/

$.ig.DashboardGlobalFilterBindingOperatorType.prototype.equals = 0;
$.ig.DashboardGlobalFilterBindingOperatorType.prototype.contains = 1;
$.ig.DashboardGlobalFilterBindingOperatorType.prototype.between = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGlobalFilterBindingOperatorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType" />*/

$.ig.DashboardGaugeViewType.prototype.circular = 0;
$.ig.DashboardGaugeViewType.prototype.linear = 1;
$.ig.DashboardGaugeViewType.prototype.singleValue = 2;
$.ig.DashboardGaugeViewType.prototype.bulletGraph = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardGaugeViewType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType" />*/

$.ig.DashboardFontSizeType.prototype.small = 0;
$.ig.DashboardFontSizeType.prototype.medium = 1;
$.ig.DashboardFontSizeType.prototype.large = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardFontSizeType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType" />*/

$.ig.DashboardFilterEnumType.prototype.allValues = 0;
$.ig.DashboardFilterEnumType.prototype.filterEmptyValues = 1;
$.ig.DashboardFilterEnumType.prototype.selectedValues = 2;
$.ig.DashboardFilterEnumType.prototype.filterByRule = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardFilterEnumType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType" />*/

$.ig.DashboardDateRuleType.prototype.none = 0;
$.ig.DashboardDateRuleType.prototype.customRange = 1;
$.ig.DashboardDateRuleType.prototype.lastWeek = 2;
$.ig.DashboardDateRuleType.prototype.lastMonth = 3;
$.ig.DashboardDateRuleType.prototype.lastYear = 4;
$.ig.DashboardDateRuleType.prototype.yearToDate = 5;
$.ig.DashboardDateRuleType.prototype.quarterToDate = 6;
$.ig.DashboardDateRuleType.prototype.monthToDate = 7;
$.ig.DashboardDateRuleType.prototype.allTime = 8;
$.ig.DashboardDateRuleType.prototype.yesterday = 9;
$.ig.DashboardDateRuleType.prototype.today = 10;
$.ig.DashboardDateRuleType.prototype.thisMonth = 11;
$.ig.DashboardDateRuleType.prototype.thisQuarter = 12;
$.ig.DashboardDateRuleType.prototype.thisYear = 13;
$.ig.DashboardDateRuleType.prototype.previousMonth = 14;
$.ig.DashboardDateRuleType.prototype.previousQuarter = 15;
$.ig.DashboardDateRuleType.prototype.previousYear = 16;
$.ig.DashboardDateRuleType.prototype.nextMonth = 17;
$.ig.DashboardDateRuleType.prototype.nextQuarter = 18;
$.ig.DashboardDateRuleType.prototype.nextYear = 19;
$.ig.DashboardDateRuleType.prototype.trailingTwelveMonths = 20;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDateRuleType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType" />*/

$.ig.DashboardDateAggregationType.prototype.year = 0;
$.ig.DashboardDateAggregationType.prototype.semester = 1;
$.ig.DashboardDateAggregationType.prototype.quarter = 2;
$.ig.DashboardDateAggregationType.prototype.month = 3;
$.ig.DashboardDateAggregationType.prototype.day = 4;
$.ig.DashboardDateAggregationType.prototype.hour = 5;
$.ig.DashboardDateAggregationType.prototype.minute = 6;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDateAggregationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType" />*/

$.ig.DashboardDataType.prototype.string1 = 0;
$.ig.DashboardDataType.prototype.number = 1;
$.ig.DashboardDataType.prototype.date = 2;
$.ig.DashboardDataType.prototype.dateTime = 3;
$.ig.DashboardDataType.prototype.time = 4;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardDataType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType" />*/

$.ig.DashboardContentModeType.prototype.aspectFit = 0;
$.ig.DashboardContentModeType.prototype.aspectFill = 1;
$.ig.DashboardContentModeType.prototype.fullSize = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardContentModeType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType" />*/

$.ig.DashboardChoroplethMapColorType.prototype.highest = 0;
$.ig.DashboardChoroplethMapColorType.prototype.lowest = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardChoroplethMapColorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType" />*/

$.ig.DashboardChartType.prototype.column = 0;
$.ig.DashboardChartType.prototype.line = 1;
$.ig.DashboardChartType.prototype.bar = 2;
$.ig.DashboardChartType.prototype.area = 3;
$.ig.DashboardChartType.prototype.spline = 4;
$.ig.DashboardChartType.prototype.splineArea = 5;
$.ig.DashboardChartType.prototype.stepArea = 6;
$.ig.DashboardChartType.prototype.stepLine = 7;
$.ig.DashboardChartType.prototype.composite = 8;
$.ig.DashboardChartType.prototype.bubble = 9;
$.ig.DashboardChartType.prototype.candlestick = 10;
$.ig.DashboardChartType.prototype.oHLC = 11;
$.ig.DashboardChartType.prototype.pie = 12;
$.ig.DashboardChartType.prototype.radialLines = 13;
$.ig.DashboardChartType.prototype.radialColumns = 14;
$.ig.DashboardChartType.prototype.radialPie = 15;
$.ig.DashboardChartType.prototype.scatter = 16;
$.ig.DashboardChartType.prototype.polarArea = 17;
$.ig.DashboardChartType.prototype.polarLines = 18;
$.ig.DashboardChartType.prototype.polarScatter = 19;
$.ig.DashboardChartType.prototype.stackedColumn = 20;
$.ig.DashboardChartType.prototype.stackedArea = 21;
$.ig.DashboardChartType.prototype.stackedBar = 22;
$.ig.DashboardChartType.prototype.doughnut = 23;
$.ig.DashboardChartType.prototype.funnel = 24;
$.ig.DashboardChartType.prototype.timeSeries = 25;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardChartType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType" />*/

$.ig.DashboardBoundValueType.prototype.numberValue = 0;
$.ig.DashboardBoundValueType.prototype.lowestValue = 1;
$.ig.DashboardBoundValueType.prototype.highestValue = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBoundValueType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType" />*/

$.ig.DashboardBandType.prototype.percentage = 0;
$.ig.DashboardBandType.prototype.numberValue = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBandType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType" />*/

$.ig.DashboardBandColorType.prototype.blue = 0;
$.ig.DashboardBandColorType.prototype.green = 1;
$.ig.DashboardBandColorType.prototype.red = 2;
$.ig.DashboardBandColorType.prototype.yellow = 3;
$.ig.DashboardBandColorType.prototype.gray = 4;
$.ig.DashboardBandColorType.prototype.white = 5;
$.ig.DashboardBandColorType.prototype.none = 6;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardBandColorType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType" />*/

$.ig.DashboardAggregationType.prototype.auto = 0;
$.ig.DashboardAggregationType.prototype.countRows = 1;
$.ig.DashboardAggregationType.prototype.countNonEmpty = 2;
$.ig.DashboardAggregationType.prototype.countDistinct = 3;
$.ig.DashboardAggregationType.prototype.min = 4;
$.ig.DashboardAggregationType.prototype.max = 5;
$.ig.DashboardAggregationType.prototype.sum = 6;
$.ig.DashboardAggregationType.prototype.avg = 7;
$.ig.DashboardAggregationType.prototype.stDev = 8;
$.ig.DashboardAggregationType.prototype.variance = 9;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardAggregationType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType" />*/

$.ig.DashboardActionTriggerType.prototype.selectRow = 0;
$.ig.DashboardActionTriggerType.prototype.maximize = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTriggerType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType" />*/

$.ig.DashboardActionTargetType.prototype.openDashboard = 0;
$.ig.DashboardActionTargetType.prototype.openUrl = 1;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionTargetType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType" />*/

$.ig.DashboardActionParameterSourceType.prototype.column = 0;
$.ig.DashboardActionParameterSourceType.prototype.literal = 1;
$.ig.DashboardActionParameterSourceType.prototype.globalFilter = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.DashboardActionParameterSourceType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.NativeTypedDictionaryType" />*/

$.ig.NativeTypedDictionaryType.prototype.boolean1 = 0;
$.ig.NativeTypedDictionaryType.prototype.$int = 1;
$.ig.NativeTypedDictionaryType.prototype.double1 = 2;
$.ig.NativeTypedDictionaryType.prototype.object1 = 3;
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.NativeTypedDictionaryType" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec" />*/

$.ig.VisualizationDataSpec.prototype.rowsSection = "Rows";
$.ig.VisualizationDataSpec.prototype.valuesSection = "Values";
$.ig.VisualizationDataSpec.prototype.columnsSection = "Columns";
$.ig.VisualizationDataSpec.prototype.gridColumnsSection = "Columns";
$.ig.VisualizationDataSpec.prototype.singleValueSection = "Value";
$.ig.VisualizationDataSpec.prototype.labelSection = "Label";
$.ig.VisualizationDataSpec.prototype.categorySection = "Category";
$.ig.VisualizationDataSpec.prototype.colorSection = "ScatterBubbleColor";
$.ig.VisualizationDataSpec.prototype.openSection = "FinancialOpen";
$.ig.VisualizationDataSpec.prototype.highSection = "FinancialHigh";
$.ig.VisualizationDataSpec.prototype.lowSection = "FinancialLow";
$.ig.VisualizationDataSpec.prototype.closeSection = "FinancialClose";
$.ig.VisualizationDataSpec.prototype.xAxisSection = "XAxis";
$.ig.VisualizationDataSpec.prototype.yAxisSection = "YAxis";
$.ig.VisualizationDataSpec.prototype.radiusSection = "Radius";
$.ig.VisualizationDataSpec.prototype.chart1Section = "Chart1";
$.ig.VisualizationDataSpec.prototype.chart2Section = "Chart2";
$.ig.VisualizationDataSpec.prototype.targetSection = "Target";
$.ig.VisualizationDataSpec.prototype.dateSection = "Date";
$.ig.VisualizationDataSpec.prototype.filtersSection = "Filters";
$.ig.VisualizationDataSpec.prototype.urlSection = "URL";
$.ig.VisualizationDataSpec.prototype.locationSection = "Location";
$.ig.VisualizationDataSpec.prototype.mapColorSection = "MapColor";
$.ig.VisualizationDataSpec.prototype.mapColorCategorySection = "MapColorCategory";
$.ig.VisualizationDataSpec.prototype.latLongSection = "LatLong";
$.ig.VisualizationDataSpec.prototype.latitudeSection = "Latitude";
$.ig.VisualizationDataSpec.prototype.longitudeSection = "Longitude";
$.ig.VisualizationDataSpec.prototype.scatterMapColorLocalizationKey = "ScatterMapColor";
/*<EndStatics Name="Infragistics.ReportPlus.DashboardModel.VisualizationDataSpec" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.TableColumn" />*/

$.ig.TableColumn.prototype._featurePrefix = "Feature.";
$.ig.TableColumn.prototype.featureForecastValue = "FeatureForecastValue";
$.ig.TableColumn.prototype.featureForecastLowerBound = "FeatureForecastLower";
$.ig.TableColumn.prototype.featureForecastUpperBound = "FeatureForecastUpper";
$.ig.TableColumn.prototype.featureOutliers = "FeatureOutliers";
$.ig.TableColumn.prototype.attributeReferencedColumn = "ReferencedColumn";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.TableColumn" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.ReportPlusError" />*/

$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_HOST = "host";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_NOT_FOUND = "not-found";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_DS_ID = "ds-id";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_CLOUD_PROVIDER_ID = "cloud-prov-id";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_CLOUD_PROVIDER_MISSING_SCOPES = "cloud-prov-scopes";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_NOT_MATCH_ACCOUNTS = "different-accounts";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_CLOUD_FILE_OWNER = "cloud-file-owner";
$.ig.ReportPlusError.prototype.aDDITIONAL_INFO_CLOUD_FILE_NAME = "cloud-file-name";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.ReportPlusError" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.RPExportDashboardObject" />*/

$.ig.RPExportDashboardObject.prototype.iNCLUDEVISUALIZATION_INCLUDE = 0;
$.ig.RPExportDashboardObject.prototype.iNCLUDEVISUALIZATION_DIFFSHEET = 1;
$.ig.RPExportDashboardObject.prototype.iNCLUDEVISUALIZATION_DONTINCLUDE = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.RPExportDashboardObject" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.SettingsConstants" />*/

$.ig.SettingsConstants.prototype.featureLocalDb = "localdb";
$.ig.SettingsConstants.prototype.featureDbCaching = "dbcaching";
$.ig.SettingsConstants.prototype.featureDbFileSystem = "dbfilesystem";
$.ig.SettingsConstants.prototype.featureDbOnPrem = "dbonprem";
$.ig.SettingsConstants.prototype.settingConnection = "ConnectionString";
$.ig.SettingsConstants.prototype.settingCachingProvider = "Provider";
$.ig.SettingsConstants.prototype.sqliteProvider = "sqlite";
$.ig.SettingsConstants.prototype.mssqlProvider = "mssql";
$.ig.SettingsConstants.prototype.rPCustomQuery = "RPCustomQuery";
$.ig.SettingsConstants.prototype.oData_Url = "Url";
$.ig.SettingsConstants.prototype.oData_EntityType = "EntityType";
$.ig.SettingsConstants.prototype.oData_FunctionQName = "FunctionQName";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.SettingsConstants" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.DataLayerResultFeatures" />*/

$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapLocation = "ScatterMapLocationColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapLongitude = "ScatterMapLongitudeColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapLabel = "ScatterMapLabelColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapValue = "ScatterMapValueColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapColor = "ScatterMapColorColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapRadius = "ScatterMapRadiusColumn";
$.ig.DataLayerResultFeatures.prototype.columnFeatureScatterMapCategoryColor = "ScatterMapCategoryColorColumn";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.DataLayerResultFeatures" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.DashboardModelUtils" />*/

$.ig.DashboardModelUtils.prototype._localDataSource = $.ig.DashboardModelUtils.prototype.createLocalDataSource();
$.ig.DashboardModelUtils.prototype._csvDataSource = $.ig.DashboardModelUtils.prototype.createCsvDataSource();
$.ig.DashboardModelUtils.prototype._excelDataSource = $.ig.DashboardModelUtils.prototype.createExcelDataSource();
$.ig.DashboardModelUtils.prototype._googleSheetDataSource = $.ig.DashboardModelUtils.prototype.createGoogleSheetDataSource();
$.ig.DashboardModelUtils.prototype._inMemoryDataSource = $.ig.DashboardModelUtils.prototype.createInMemoryDataSource();
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.DashboardModelUtils" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings" />*/

$.ig.FormattingDefaultSettings.prototype._userInstance = null;
$.ig.FormattingDefaultSettings.prototype._appInstance = new $.ig.RevealFormattingDefaultSettings();
$.ig.FormattingDefaultSettings.prototype._sdkInstance = null;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.FormattingDefaultSettings" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility" />*/

$.ig.DataLayerUtility.prototype.__supportedProviders = null;
$.ig.DataLayerUtility.prototype.__cloudUnsupportedProviders = null;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Api.DataLayerUtility" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Api.ProviderKeys" />*/

$.ig.ProviderKeys.prototype.inMemoryProviderKey = "InMemory";
$.ig.ProviderKeys.prototype.inMemoryDataSourceKey = "__INMEMORY";
$.ig.ProviderKeys.prototype.excelProviderKey = "EXCELLOCALFILEPROVIDER";
$.ig.ProviderKeys.prototype.excelDataSourceKey = "__EXCEL";
$.ig.ProviderKeys.prototype.googleSheetProviderKey = "GOOGLESHEETLOCALFILEPROVIDER";
$.ig.ProviderKeys.prototype.googleSheetDataSourceKey = "__GSheet";
$.ig.ProviderKeys.prototype.cSVDataSourceKey = "_CSV";
$.ig.ProviderKeys.prototype.cSVProviderKey = "CSVLOCALFILEPROVIDER";
$.ig.ProviderKeys.prototype.dropboxProviderKey = "DROPBOXPROVIDER";
$.ig.ProviderKeys.prototype.oneDriveProviderKey = "ONEDRIVEPROVIDER";
$.ig.ProviderKeys.prototype.boxProviderKey = "BOXPROVIDER";
$.ig.ProviderKeys.prototype.googleDriveProviderKey = "GOOGLEDRIVEPROVIDER";
$.ig.ProviderKeys.prototype.localFileProviderKey = "LOCALFILE";
$.ig.ProviderKeys.prototype.localDataKey = "__LOCAL";
$.ig.ProviderKeys.prototype.sharepointProviderKey = "SHAREPOINT";
$.ig.ProviderKeys.prototype.salesforceProviderKey = "SALESFORCE";
$.ig.ProviderKeys.prototype.dynamicsCRMProviderKey = "DYNAMICS_CRM";
$.ig.ProviderKeys.prototype.sQLServerProviderKey = "SQLSERVER";
$.ig.ProviderKeys.prototype.sSASProviderKey = "ANALYSISSERVICES";
$.ig.ProviderKeys.prototype.sSRSProviderKey = "SSRS";
$.ig.ProviderKeys.prototype.mySQLProviderKey = "MYSQL";
$.ig.ProviderKeys.prototype.oracleProviderKey = "ORACLE";
$.ig.ProviderKeys.prototype.sybaseProviderKey = "SYBASE";
$.ig.ProviderKeys.prototype.postgresProviderKey = "POSTGRES";
$.ig.ProviderKeys.prototype.hiveProviderKey = "HIVE";
$.ig.ProviderKeys.prototype.twitterProviderKey = "TWITTER";
$.ig.ProviderKeys.prototype.facebookProviderKey = "FACEBOOK";
$.ig.ProviderKeys.prototype.googleAnalyticsProviderKey = "GOOGLE_ANALYTICS";
$.ig.ProviderKeys.prototype.flurryProviderKey = "FLURRY";
$.ig.ProviderKeys.prototype.appFiguresProviderKey = "APPFIGURES";
$.ig.ProviderKeys.prototype.marketoProviderKey = "MARKETO";
$.ig.ProviderKeys.prototype.hubSpotProviderKey = "HUBSPOT";
$.ig.ProviderKeys.prototype.oDataProviderKey = "ODATAPROVIDER";
$.ig.ProviderKeys.prototype.imapProviderKey = "IMAP";
$.ig.ProviderKeys.prototype.uservoiceProviderKey = "USERVOICE";
$.ig.ProviderKeys.prototype.webServiceProviderKey = "WEBSERVICE";
$.ig.ProviderKeys.prototype.bambooProviderKey = "BAMBOO_HR";
$.ig.ProviderKeys.prototype.compositeProviderKey = "COMPOSITE";
$.ig.ProviderKeys.prototype.jsonProviderKey = "JSON";
$.ig.ProviderKeys.prototype.jsonDataKey = "__JSON";
$.ig.ProviderKeys.prototype.tFSProviderKey = "TFS";
$.ig.ProviderKeys.prototype.rESTProviderKey = "REST";
$.ig.ProviderKeys.prototype.azureSQLProviderKey = "AZURE_SQL";
$.ig.ProviderKeys.prototype.azureSynapseProviderKey = "AZURE_SYNAPSE";
$.ig.ProviderKeys.prototype.notImplementedProviderKey = "NOT_IMPLEMENTED";
$.ig.ProviderKeys.prototype.bigQueryProviderKey = "BIG_QUERY";
$.ig.ProviderKeys.prototype.dataDotWorldProviderKey = "DATA_DOT_WORLD";
$.ig.ProviderKeys.prototype.azureAnalysisServicesKey = "AZURE_ANALYSIS_SERVICES";
$.ig.ProviderKeys.prototype.quickBooksProviderKey = "QUICK_BOOKS";
$.ig.ProviderKeys.prototype.googleAdsProviderKey = "GOOGLE_ADS";
$.ig.ProviderKeys.prototype.athenaProviderKey = "AMAZON_ATHENA";
$.ig.ProviderKeys.prototype.redshiftProviderKey = "AMAZON_REDSHIFT";
$.ig.ProviderKeys.prototype.s3ProviderKey = "AMAZON_S3";
$.ig.ProviderKeys.prototype.snowflakeProviderKey = "SNOWFLAKE";
$.ig.ProviderKeys.prototype.sharepointAuthenticationMethodKey = "AuthenticationMethod";
$.ig.ProviderKeys.prototype.sharepointAuthenticationMethodO365 = "Office365";
$.ig.ProviderKeys.prototype.serverAggregationMode = "ServerAggregation";
$.ig.ProviderKeys.prototype.serverAggregationModeDefaultValue = "ServerAggregationDefault";
$.ig.ProviderKeys.prototype.serverAggregationModeReadOnly = "ServerAggregationReadOnly";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Api.ProviderKeys" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Api.MetadataLayerConstants" />*/

$.ig.MetadataLayerConstants.prototype.providerMetadataItemType = "METADATA-ITEM-TYPE-PROVIDER";
$.ig.MetadataLayerConstants.prototype.dataSourceMetadataItemType = "METADATA-ITEM-TYPE-DATASOURCE";
$.ig.MetadataLayerConstants.prototype.resourcesFolderMetadataItemType = "METADATA-ITEM-TYPE-FOLDER";
$.ig.MetadataLayerConstants.prototype.resourceFileMetadataItemType = "METADATA-ITEM-TYPE-FILE";
$.ig.MetadataLayerConstants.prototype.providersGroupContentManagers = "GROUP-CONTENT-MANAGERS";
$.ig.MetadataLayerConstants.prototype.providersGroupCustomerRelationshipManagers = "GROUP-CUSTOMER-RELATIONSHIP-MANAGERS";
$.ig.MetadataLayerConstants.prototype.providersGroupDataStores = "GROUP-DATASTORES";
$.ig.MetadataLayerConstants.prototype.providersGroupEntities = "GROUP-ENTITIES";
$.ig.MetadataLayerConstants.prototype.providersGroupSocialNetworks = "GROUP-SOCIAL-NETWORKS";
$.ig.MetadataLayerConstants.prototype.providersGroupWebAnalytics = "GROUP-WEB-ANALYTICS";
$.ig.MetadataLayerConstants.prototype.providersGroupOthers = "GROUP-OTHERS";
$.ig.MetadataLayerConstants.prototype.providersGroupMultipleDatasources = "GROUP-MULTIPLE-DATASOURCES";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Api.MetadataLayerConstants" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Engine.Sorter" />*/

$.ig.Sorter.prototype.sort_None = 0;
$.ig.Sorter.prototype.sort_Asc = 1;
$.ig.Sorter.prototype.sort_Desc = 2;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Engine.Sorter" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Engine.Util.EngineConstants" />*/

$.ig.EngineConstants.prototype.appName = "Reveal";
$.ig.EngineConstants.prototype.cacheRoot = "RevealCache";
$.ig.EngineConstants.prototype.datasetCacheCategory = "dataset";
$.ig.EngineConstants.prototype.downloadCacheCategory = "download";
$.ig.EngineConstants.prototype.dataCacheCategory = "data";
$.ig.EngineConstants.prototype.excelCacheCategory = "excel";
$.ig.EngineConstants.prototype.tempCacheCategory = "tempFiles";
$.ig.EngineConstants.prototype.cacheVersionKey = "cacheVersion";
$.ig.EngineConstants.prototype.marketoEntityItemEmails = "MARKETO-EMAILS";
$.ig.EngineConstants.prototype.marketoEntityItemFiles = "MARKETO-FILES";
$.ig.EngineConstants.prototype.marketoEntityItemFolders = "MARKETO-FOLDERS";
$.ig.EngineConstants.prototype.marketoEntityItemForms = "MARKETO-FORMS";
$.ig.EngineConstants.prototype.marketoEntityItemLists = "MARKETO-LISTS";
$.ig.EngineConstants.prototype.marketoEntityItemStaticLists = "MARKETO-STATIC-LISTS";
$.ig.EngineConstants.prototype.marketoEntityItemEmailTemplates = "MARKETO-EMAIL-TEMPLATES";
$.ig.EngineConstants.prototype.marketoEntityItemPrograms = "MARKETO-PROGRAMS";
$.ig.EngineConstants.prototype.marketoEntityItemActivities = "MARKETO-ACTIVITIES";
$.ig.EngineConstants.prototype.marketoEntityItemActivityTypes = "MARKETO-ACTIVITY-TYPES";
$.ig.EngineConstants.prototype.marketoEntityItemCampaigns = "MARKETO-CAMPAIGNS";
$.ig.EngineConstants.prototype.marketoEntityItemLeads = "MARKETO-LEADS";
$.ig.EngineConstants.prototype.athenaWorkgroups = "ATHENA-WORKGROUP";
$.ig.EngineConstants.prototype.athenaDataCatalogs = "ATHENA-DATACATALOGS";
$.ig.EngineConstants.prototype.publicLinkId = "PublicLinkId";
$.ig.EngineConstants.prototype.urlPropertyName = "Url";
$.ig.EngineConstants.prototype.hostPropertyName = "Host";
$.ig.EngineConstants.prototype.portPropertyName = "Port";
$.ig.EngineConstants.prototype.databasePropertyName = "Database";
$.ig.EngineConstants.prototype.procedurePropertyName = "Procedure";
$.ig.EngineConstants.prototype.functionPropertyName = "Function";
$.ig.EngineConstants.prototype.schemaPropertyName = "Schema";
$.ig.EngineConstants.prototype.subsiteIdPropertyName = "SubsiteId";
$.ig.EngineConstants.prototype.entityPropertyName = "Entity";
$.ig.EngineConstants.prototype.longLoadTimePropertyName = "HasLongLoadTime";
$.ig.EngineConstants.prototype.accountIdPropertyName = "AccountId";
$.ig.EngineConstants.prototype.useAnonymousAuthentication = "_rpUseAnonymousAuthentication";
$.ig.EngineConstants.prototype.servicePropertyName = "SERVICE_NAME";
$.ig.EngineConstants.prototype.sidPropertyName = "SID";
$.ig.EngineConstants.prototype.paramSeparator = "Separator";
$.ig.EngineConstants.prototype.paramEncoding = "Encoding";
$.ig.EngineConstants.prototype.paramDateFormat = "DateFormat";
$.ig.EngineConstants.prototype.paramFromDate = "From";
$.ig.EngineConstants.prototype.paramToDate = "To";
$.ig.EngineConstants.prototype.lK_ParamFromDate = "From";
$.ig.EngineConstants.prototype.lK_ParamToDate = "To";
$.ig.EngineConstants.prototype.httpMethodGet = "GET";
$.ig.EngineConstants.prototype.httpMethodPost = "POST";
$.ig.EngineConstants.prototype.httpMethodPut = "PUT";
$.ig.EngineConstants.prototype.exportFormatExcel = "xlsx";
$.ig.EngineConstants.prototype.exportFormatPowerPoint = "pptx";
$.ig.EngineConstants.prototype.exportFormatPDF = "pdf";
$.ig.EngineConstants.prototype.exportFormatImage = "img";
$.ig.EngineConstants.prototype.tRUE = "true";
$.ig.EngineConstants.prototype.fALSE = "false";
$.ig.EngineConstants.prototype.resultTypeJSON = "json";
$.ig.EngineConstants.prototype.resultTypeCSV = "csv";
$.ig.EngineConstants.prototype.resultTypeTSV = "tsv";
$.ig.EngineConstants.prototype.resultTypeXLS = "xls";
$.ig.EngineConstants.prototype.resultTypeXLSX = "xlsx";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Engine.Util.EngineConstants" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility" />*/

$.ig.AdHocUtility.prototype.hierarchyUniqueName = "__adhoc";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Engine.AdHoc.AdHocUtility" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils" />*/

$.ig.WebResourceUtils.prototype.__placeholdersRegex = null;
if ($.ig.WebResourceUtils.prototype.staticInit && !$.ig.WebResourceUtils.prototype.webResourceUtilsStaticInitCalled) { $.ig.WebResourceUtils.prototype.staticInit(); $.ig.WebResourceUtils.prototype.webResourceUtilsStaticInitCalled = true; }
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.WebResource.WebResourceUtils" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Sql.SqlBaseMetadataModel" />*/

$.ig.SqlBaseMetadataModel.prototype.databasesGroupId = "GROUP-DATABASES";
$.ig.SqlBaseMetadataModel.prototype.tablesGroupId = "GROUP-TABLES";
$.ig.SqlBaseMetadataModel.prototype.viewsGroupId = "GROUP-VIEWS";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Sql.SqlBaseMetadataModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel" />*/

$.ig.S3ProviderModel.prototype._aWS_ACCOUNT_ID = "awsAccountId";
$.ig.S3ProviderModel.prototype._rEGION = "region";
$.ig.S3ProviderModel.prototype._bUCKET_NAME = "bucketName";
$.ig.S3ProviderModel.prototype._kEY = "key";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.S3.S3ProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel" />*/

$.ig.QuickBooksProviderModel.prototype._eNTITY = "entity";
$.ig.QuickBooksProviderModel.prototype._rEALM_ID = "realm-id";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.QuickBooks.QuickBooksProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry" />*/

$.ig.JSONMetadataEntry.prototype._dEPTH_DEFAULT = -1;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.JSONMetadataEntry" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig" />*/

$.ig.TabularDataSourceConfig.prototype.dEFAULT_DATE_TIME_PATTERN = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
$.ig.TabularDataSourceConfig.prototype.dEFAULT_DATE_PATTERN = "yyyy-MM-dd";
$.ig.TabularDataSourceConfig.prototype._logger = $.ig.LoggerFactory.prototype.instance().getLogger("TabularDataSourceConfig");
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.TabularDataSourceConfig" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel" />*/

$.ig.JSONEditorModel.prototype.__logger = $.ig.LoggerFactory.prototype.instance().getLogger("JSONEditorModel");
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONEditorModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression" />*/

$.ig.JSONPathExpression.prototype.aNY = new $.ig.DummyObject();
$.ig.JSONPathExpression.prototype.pROP = new $.ig.DummyObject();
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONPathExpression" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree" />*/

$.ig.JSONTree.prototype._pROP_ROOT = "Root";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTree" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode" />*/

$.ig.JSONTreeNode.prototype._pROP_INDEX = "Index";
$.ig.JSONTreeNode.prototype._pROP_KEY = "Key";
$.ig.JSONTreeNode.prototype._pROP_DATA_TYPE = "DataType";
$.ig.JSONTreeNode.prototype._pROP_VALUE = "Value";
$.ig.JSONTreeNode.prototype._pROP_CHILDREN = "Children";
$.ig.JSONTreeNode.prototype._pROP_CHILD_COUNT_LAZY_LOAD = "ChildCountLazyLoad";
$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_VALUE = "GuessedDateTimeFormatForValue";
$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_VALUE = "GuessedDateTimeDataTypeForValue";
$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_FORMAT_FOR_KEY = "GuessedDateTimeFormatForKey";
$.ig.JSONTreeNode.prototype._pROP_GUESSED_DATETIME_DATA_TYPE_FOR_KEY = "GuessedDateTimeDataTypeForKey";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.JSON.CfgEditor.JSONTreeNode" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAnalytics.GoogleAnalyticsProviderModel" />*/

$.ig.GoogleAnalyticsProviderModel.prototype.googleAnalyticsProfilesItemType = "TYPE-PROFILES";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAnalytics.GoogleAnalyticsProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel" />*/

$.ig.GoogleAdsProviderModel.prototype.sEGMENTS_DATE = "segments.date";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.GoogleAds.GoogleAdsProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel" />*/

$.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_OWNER = "owner";
$.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_DATASET_ID = "datasetId";
$.ig.DataDotWorldProviderModel.prototype.pROPERTY_KEY_TABLE_NAME = "tableName";
$.ig.DataDotWorldProviderModel.prototype.mETADATA_ITEM_TYPE_DATASETS = "Datasets";
$.ig.DataDotWorldProviderModel.prototype.mETADATA_ITEM_TYPE_TABLE = "Table";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.DataDotWorld.DataDotWorldProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel" />*/

$.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_PROJECT_ID = "projectId";
$.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_DATASET_ID = "datasetId";
$.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_TABLE_ID = "tableId";
$.ig.BigQueryProviderModel.prototype.pROPERTY_KEY_MODEL_ID = "modelId";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_PROJECT = "Project";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_DATASETS = "Datasets";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_TABLE = "Table";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_VIEW = "View";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_MODELS = "Models";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_MODEL = "Model";
$.ig.BigQueryProviderModel.prototype.mETADATA_ITEM_TYPE_MODEL_COLUMN = "ModelColumn";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.BigQuery.BigQueryProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel" />*/

$.ig.AthenaProviderModel.prototype.dATASOURCE_DATACATALOG = "dataCatalog";
$.ig.AthenaProviderModel.prototype._dATASOURCE_DATABASE = $.ig.EngineConstants.prototype.databasePropertyName;
$.ig.AthenaProviderModel.prototype._dATASOURCE_OUTPUT_LOCATION = "outputLocation";
$.ig.AthenaProviderModel.prototype._dATASOURCE_REGION = "region";
$.ig.AthenaProviderModel.prototype._dATASOURCE_WORKGROUP = "workgroup";
$.ig.AthenaProviderModel.prototype._dATASOURCEITEM_TABLE = "Table";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Athena.AthenaProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel" />*/

$.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_CONNECTION_MODE = "Mode";
$.ig.AzureAnalysisServicesProviderModel.prototype._cONNECTION_MODE_HTTP = "HTTP";
$.ig.AzureAnalysisServicesProviderModel.prototype._pROPERTY_URL = "Url";
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Ssas.AzureAnalysisServicesProviderModel" />*/

/*<BeginStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel" />*/

$.ig.SnowflakeProviderModel.prototype._dATASOURCE_ACCOUNT = "Account";
$.ig.SnowflakeProviderModel.prototype._dATASOURCE_HOST = $.ig.EngineConstants.prototype.hostPropertyName;
$.ig.SnowflakeProviderModel.prototype._dATASOURCE_DATABASE = $.ig.EngineConstants.prototype.databasePropertyName;
/*<EndStatics Name="Infragistics.ReportPlus.DataLayer.Providers.Snowflake.SnowflakeProviderModel" />*/


} (jQuery));

