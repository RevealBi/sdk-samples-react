/*!@license
* Infragistics.Web.ClientUI ..\..\..\..\..\UI\JSNative\infragistics.ui.js <build_number>
*
* Copyright (c) 2011-<year> Infragistics Inc.
*
* http://www.infragistics.com/
*
* Depends:
*     jquery-1.4.4.js
*     jquery.ui.core.js
*     jquery.ui.widget.js
*     infragistics.util.js
*/
(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine([
"TextAlignment:a",
"Enum:b",
"ValueType:c",
"Object:d",
"Type:e",
"Boolean:f",
"IConvertible:g",
"IFormatProvider:h",
"Number:i",
"String:j",
"IComparable:k",
"Number:l",
"IComparable$1:m",
"IEquatable$1:n",
"Number:o",
"Number:p",
"Number:q",
"Number:r",
"NumberStyles:s",
"NotSupportedException:t",
"Error:u",
"Void:v",
"Number:w",
"String:x",
"StringComparison:y",
"Array:z",
"IList:aa",
"ICollection:ab",
"IEnumerable:ac",
"IEnumerator:ad",
"RegExp:ae",
"CultureInfo:af",
"DateTimeFormatInfo:ag",
"Calendar:ah",
"Date:ai",
"Number:aj",
"DayOfWeek:ak",
"DateTimeKind:al",
"CalendarWeekRule:am",
"NumberFormatInfo:an",
"CompareInfo:ao",
"CompareOptions:ap",
"IEnumerable$1:aq",
"IEnumerator$1:ar",
"IDisposable:as",
"StringSplitOptions:at",
"Number:au",
"Number:av",
"Number:aw",
"Number:ax",
"Number:ay",
"Number:az",
"Assembly:a0",
"Stream:a1",
"SeekOrigin:a2",
"RuntimeTypeHandle:a3",
"MethodInfo:a4",
"MethodBase:a5",
"MemberInfo:a6",
"ParameterInfo:a7",
"TypeCode:a8",
"ConstructorInfo:a9",
"PropertyInfo:ba",
"View:bb",
"InteractiveView:bc",
"CPTimer:bd",
"AnimationHelperBase:be",
"Timer:bf",
"window:bg",
"Callback:bh",
"MulticastDelegate:bi",
"IntPtr:bj",
"NativeDateUtility:bk",
"Script:bl",
"JSDate:bm",
"Nullable$1:bn",
"DateUtility:bo",
"NativeNullableUtility:bp",
"Array:bq",
"Array:br",
"CompareCallback:bs",
"Math:bt",
"CPStringUtility:bu",
"NativeStringUtility:bv",
"Dictionary:bw",
"Dictionary:bx",
"CPMonthInfo:by",
"CPDateTime:bz",
"CPDateTimeFormatProvider:b0",
"AnimationTickBlock:b1",
"ExecutionBlock:b2",
"IntBlock:b3",
"JQueryObject:b4",
"Element:b5",
"ElementAttributeCollection:b6",
"ElementCollection:b7",
"WebStyle:b8",
"ElementNodeType:b9",
"document:ca",
"EventListener:cb",
"IElementEventHandler:cc",
"ElementEventHandler:cd",
"ElementAttribute:ce",
"JQueryPosition:cf",
"JQueryCallback:cg",
"JQueryEvent:ch",
"JQueryTouchEventObject:ci",
"JQueryUICallback:cj",
"TouchPoints:ck",
"UIEventManager:cl",
"CPPoint:cm",
"NativeUIUtility:cn",
"ThemeManager:co",
"CPLongTermMemoryStorageUtility:cp",
"NativeLongTermStorageUtility:cq",
"CPJSONObject:cr",
"JSDictionary:cs",
"NativeJSONUtility:ct",
"CPTheme:cu",
"ColorUtility:cv",
"CPMathUtility:cw",
"CPRect:cx",
"CPSize:cy",
"NativeColorUtility:cz",
"JQuery:c0",
"JQueryDeferred:c1",
"JQueryPromise:c2",
"Action:c3",
"Action$1:c4",
"CPThemeColor:c5",
"CPThemeColorSet:c6",
"CPItemLayoutGuide:c7",
"CPButtonLayoutGuide:c8",
"NativeDictionaryUtility:c9",
"CPView:da",
"CPViewBase:db",
"CPViewCore:dc",
"NativePanel:dd",
"CPLayoutParams:de",
"CPLayoutParamsBase:df",
"CanvasElement:dg",
"CanvasContext:dh",
"AnimationHelperDelegate:di",
"FocusableElementDelegate:dj",
"CPSectionContainer:dk",
"ICPViewCore:dl",
"SizeChangeBlock:dm",
"ArrayUtility:dn",
"BoolForObjectBlock:dp",
"ObjectForObjectBlock:dq",
"AnimationHelper:dr",
"AnimationType:ds",
"ExecutionBoolBlock:dt",
"CPKeyboardEventManager:du",
"CPKeyCombo:dv",
"Key:dw",
"UIUtility:dx",
"CancellableObjectBlock:dy",
"CPLabel:dz",
"CPLabelTextStyle:d0",
"JSHelperUtility:d1",
"MultilineInputView:d2",
"InputView:d3",
"CPFocusManager:d4",
"CPKeyboardCommandListener:d5",
"CPKeyCommand:d6",
"CPKeyboardCommandBlock:d7",
"CPTextViewBase:d8",
"CPTextViewOnScreenKeyboardResizeMode:d9",
"CPTextViewKeyboardDelegate:ea",
"CPTextView:eb",
"ObjectBlock:ec",
"CPPasteEvent:ed",
"KeyboardType:ee",
"CPScrollView:ef",
"CPScrollViewBase:eg",
"ScrollEventProcessorDelegate:eh",
"CPScrollViewDelegate:ei",
"ScrollEventProcessor:ej",
"UpdateValueBlock:ek",
"CPScrollBarView:el",
"CPScrollBarThumbView:em",
"DoubleObjectBlock:en",
"CPRange:eo",
"StringBlock:ep",
"RangeBlock:eq",
"CPSection:er",
"CPWeakObject:es",
"FocusableElement:et",
"DynamicFocusableContainer:eu",
"CPInteractionView:ev",
"CPCursors:ew",
"CPPopupPosition:ex",
"CPRichLabelTooltip:ey",
"InteractiveLabel:ez",
"InterativeLabelCanvas:e0",
"DrawingViewBase:e1",
"CanvasContext:e2",
"CanvasContext2D:e3",
"TextMetrics:e4",
"ImageData:e5",
"Gradient:e6",
"CPStrokeCap:e7",
"CPStrokeJoin:e8",
"CPLinearGradientBrush:e9",
"ImageElement:fa",
"WordRenderInfo:fb",
"InteractiveLabelRenderInfo:fc",
"InteractionTrigger:fd",
"CPLabelTooltip:fe",
"CPPopupManager:ff",
"CPNavigationViewController:fg",
"CPViewController:fh",
"ViewController:fi",
"ViewControllerModalPresentationStyle:fj",
"CPNavigationBar:fk",
"CPIconLabelButton:fl",
"CPIconButton:fm",
"CPIconButtonStyle:fn",
"PathIconView:fo",
"AnimatableDrawingView:fp",
"PathIconRenderInfo:fq",
"PathIcon:fr",
"PathIconPart:fs",
"PathCommandType:ft",
"PathCommand:fu",
"CPCircleView:fv",
"UIPathIcons:fw",
"PathIconsBase:fx",
"CPNavBarButtonPanel:fy",
"PointExecutionBlock:fz",
"ViewControllerBase:f0",
"EscapeKeyCloseMode:f1",
"CPPopupManagerBase:f2",
"CPPopupViewDelegate:f3",
"CPPopupCloseDelegate:f4",
"CPPopupContainerView:f5",
"CPPopupContainerBackgroundView:f6",
"CPPopupAnimatorDelegate:f7",
"CPPopupListViewCellBase:f8",
"CPGridViewItemIconCell:f9",
"CPGridViewItemCell:ga",
"CPGridViewItemOverflowCell:gb",
"CPGridViewItemCellBase:gc",
"CPGridViewCellBase:gd",
"ListBlock:ge",
"CPGridView:gf",
"CPGridViewCellsPanel:gg",
"CPGridViewCellsPanelBase:gh",
"CPGridViewLayoutEngine:gi",
"CPGridViewCellAnimator:gj",
"CPRowPath:gk",
"GridLayoutChangeDelegate:gl",
"CPCellPath:gm",
"CPGridViewFixedColumnDirection:gn",
"CPGridViewDatasourceHelper:go",
"CPSectionSortType:gp",
"CPGridViewColumnDefinition:gq",
"CPColumnWidth:gr",
"CPGridViewCellSetupDelegate:gs",
"CreateNewCellBlock:gt",
"ResolveCellIdentifierForPathBlock:gu",
"CreateCellBlock:gv",
"CPOverflowLabel:gw",
"NativeReflectorUtility:gx",
"CPGridViewValueColumnDefinition:gy",
"CPPropertySortConverter:gz",
"CPSortConverter:g0",
"NativeSortUtility:g1",
"CustomSortComparisonBlock:g2",
"CPGridViewRowSeparatorCell:g3",
"CPGridViewItemSectionHeaderCell:g4",
"CPGridViewRowHeightBlock:g5",
"CPGridSectionInfo:g6",
"CPColumnInfo:g7",
"Console:g8",
"ItemValueChangedBlock:g9",
"GridColumnResizeHandle:ha",
"CPCellType:hb",
"CPGridViewUpdateCellAnimator:hc",
"CPGridViewSelectionType:hd",
"CPGridViewCellSectionExpansionAnimator:he",
"CPGridViewCellSectionCollapseAnimator:hf",
"CPGridRowCollapseAnimator:hg",
"CPGridRowExpansionAnimator:hh",
"CPPopupListManager:hi",
"CPLocalPopupManager:hj",
"CPPopupContentContainerView:hk",
"CPPopupContentContainerInfo:hl",
"CPPopupContentContainerNavBar:hm",
"CPPopupHeader:hn",
"CPPopupFooter:ho",
"CPPopupSeciton:hp",
"CPImageView:hq",
"ImageVerticalAlignment:hr",
"ImageHorizontalAlignment:hs",
"CPPopupBackgroundView:ht",
"CPPopupBackgroundViewInfo:hu",
"CPPopupListView:hv",
"CPPopupListViewColumn:hw",
"CPPopupListItemBase:hx",
"CPPopupListItemSelectionMode:hy",
"CPPopupListItem:hz",
"CPPopupListViewCell:h0",
"CPGridViewSingleFieldMultiColumnDataSourceHelper:h1",
"PlatformInfo:h2",
"PlatformType:h3",
"CPKeyedObject:h4",
"CPPopupListContainerView:h5",
"CPReorderCellPopupManager:h6",
"CPDroppableViewDelegate:h7",
"StringObjectBlock:h8",
"CPDroppableViewManager:h9",
"CPDroppableViewManagerListener:ia",
"CPPopupMessageBoxManager:ib",
"CPRichMessageBoxView:ic",
"CPMessageBoxView:id",
"CPMessageTextView:ie",
"CPTextProcessorView:ig",
"CPRichTextView:ih",
"CPMultilineTextView:ii",
"QuillCancellableEnterPressedBlock:ij",
"QuillWrapper:ik",
"QuillToggleTextFormatBlock:il",
"QuillSelectionChangedBlock:im",
"PendingAction:io",
"QuillTextChangedBlock:ip",
"JSDOMRect:iq",
"CPRichTextFormattingBlock:ir",
"BackingStoreObjectBase:is",
"CPRichTextStylingBlock:it",
"HybridFormattingBlock:iu",
"CPTextDetectorMatchDelegate:iv",
"CPTextTracker:iw",
"CPTextTrackerWordProcessorDelegate:ix",
"CPTextTrackerWord:iy",
"CPTextTrackerWhiteSpaceWord:iz",
"CPTextTrackerWordProcessor:i0",
"CPLiveInputProcessor:i1",
"CPTextDetectorBase:i2",
"ListBoolBlock:i3",
"CPLiveInputReplaceProcessor:i4",
"CPTextURLDetector:i5",
"CPModalDialogPopupManager:i6",
"CPModalDialogContentView:i7",
"CPContentViewController:i8",
"CPKeyboardDelegate:i9",
"CPContentPopupManager:ja",
"CPContentPopupDynamicSizingViewDelegate:jb",
"CPContentPopupViewDelegate:jc",
"CPTooltipPopupManager:jd",
"CPBubblePopupManager:je",
"CPBubblePopupView:jf",
"CPProgressIndexIndicator:jg",
"CPEditTextPopupManager:jh",
"CPEditTextPopupView:ji",
"CPGridViewItemTextBoxCell:jj",
"CPDialogTextBox:jk",
"ProgressDisplayView:jl",
"ProgressView:jm",
"CPTextViewManager:jn",
"NativeCPTextViewManager:jo",
"CPNotificationMessageView:jp",
"CPPopupNotificationMessageManager:jq",
"CPMaximizePopupManager:jr",
"CPHighlightAreaPopupManager:js",
"CPHighlightViewPopupManager:jt",
"CPProgressPopupManager:ju",
"CPExternalDropHandler:jv",
"CPDropInfo:jw",
"CPDropTargetDisplayView:jx",
"CPThemeLight:jy",
"CPThemeDark:jz",
"ProgressHelper:j0",
"WebCoreUtils:j1",
"CPHapticType:j2",
"CPImageUtility:j3",
"NativeImageUtility:j4",
"CPImage:j5",
"KeyboardKeys:j6",
"CPFile:j7",
"CPButton:j8",
"NumericInputView:j9",
"CPNumericTextView:ka",
"PasswordInputView:kb",
"CPPasswordBox:kc",
"NativeSystemThemeManager:kd",
"CPVideoPlayer:ke",
"WebHostView:kf",
"CPBucketAddCellAnimator:kg",
"CPBucketRemoveCellAnimator:kh",
"CPBucketView:ki",
"CPBucketViewScrollbar:kj",
"CPGridViewSingleRowSingleFieldDataSourceHelper:kk",
"CPBucketViewCell:kl",
"CPContentDraggableBucketViewCell:km",
"CPCheckedState:kn",
"CPCheckBox:ko",
"CPIconHeaderedLabelButton:kp",
"CPIconLabelSplitButton:kq",
"CPIIconLabelPillButton:kr",
"CPNestedButton:ks",
"CPVerticalIconLabelButton:kt",
"CPCompactMonthInteractiveView:ku",
"CPCompactMonthView:kv",
"CPCompactMonthDrawingView:kw",
"CPCompactMonthViewSnapshot:kx",
"CPMonthViewDisplayMode:ky",
"CPMonthViewSelectedState:kz",
"CPDateRangePicker:k0",
"DoubleCPDateTimeBlock:k1",
"CPDateRangePickerModeSelectorView:k2",
"CPDateRangePickerModeIndicator:k3",
"CPButtonAreaView:k4",
"CPButtonAreaViewBase:k5",
"CPDateTimeBlock:k6",
"CPCompactMonthViewAnimation:k7",
"CPColorListView:k8",
"CPColorColumn:k9",
"CPColorCell:la",
"ColorInfo:lb",
"CPContentView:lc",
"CPEditableTitle:ld",
"CPGradientView:le",
"CPModalHeaderLabel:lf",
"CPProgressBar:lg",
"CPResizerView:lh",
"Orientation:li",
"CPSearchBar:lj",
"CPSegementButton:lk",
"CPSlider:ll",
"CPSliderView:lm",
"CPSwitch:ln",
"CPTabbedView:lo",
"CPTabButton:lp",
"CPTimeEntryView:lq",
"CPTypingIndicator:lr",
"FlowLayoutDataSource:ls",
"FlowLayoutViewDataSource:lt",
"FlowLayoutItemView:lu",
"FlowlayoutItemInfo:lv",
"FlowLayoutView:lw",
"FlowLayoutViewCaptureViewDelegate:lx",
"FlowLayoutResizeHandleLocation:ly",
"FlowLayoutViewCaptureView:lz",
"FlowLayoutDefinition:l0",
"FlowLayoutDirection:l1",
"FlowLayoutManager:l2",
"FlowLayoutItemViewDelegate:l3",
"FlowLayoutViewEditDelegate:l4",
"CPHorizontalElementsContainer:l5",
"CPDynamicColumnGridView:l6",
"CPGridViewSingleFieldDynamicColumnDataSourceHelper:l7",
"CPGridViewButtonFooterCell:l8",
"CPGridViewDeleteRowAnimator:l9",
"CPGridViewExpandableCardCell:ma",
"CPGridViewItemExpandableCell:mb",
"CPGridViewItemCheckBoxCell:mc",
"CPCheckedItemStateDelegate:md",
"CPGridViewCheckBoxEditMode:me",
"CPGridViewItemExpandableType:mf",
"CPGridViewCellItemHitArea:mg",
"ObjectBoolBlock:mh",
"CPGridViewInsertRowAnimator:mi",
"CPGridViewItemDropDownCell:mj",
"CPGridViewItemTreeCell:mk",
"CPGridViewNumericTextBoxCell:ml",
"CPGridViewValueCell:mm",
"CPTriggersOnboardingBubbleDelegate:mn",
"CPIslandDialogView:mo",
"CPPopupListDrillItem:mp",
"CPPopupListViewDrillItemCell:mq",
"CPPopupListItemSpacer:mr",
"CPPopupSeparatorViewCell:ms",
"CPPopupListItemLabel:mt",
"CPPopupListDeleteItem:mu",
"CPPopupListOpenItem:mv",
"CPPopupListFooterWithTextInput:mw",
"CPPopupTextInputCell:mx",
"CPPopupListButtonItem:my",
"CPPopupListButtonCell:mz",
"CPPopupHeaderCell:m0",
"CPComplexPopupHeader:m1",
"CPPopupProgressView:m2",
"CPPopupSliderItem:m3",
"CPPopupSliderViewCell:m4",
"CPPopupSwitchItem:m5",
"CPPopupSwitchViewCell:m6",
"RoundedImageDrawingDelegate:m7",
"ZoomType:m8",
"CPFocusableTextView:m9",
"CPRichTextBoxToolBar:na",
"CPSearchBox:nb",
"CancellableStringBlock:nc",
"CPSearchPopupManager:nd",
"CPTextCurlyBraceDetector:ne",
"CPTextEmailDetector:nf",
"CPTextMetaDataDetector:ng",
"CPTextMetaData:nh",
"CPTextPhoneNumberDetector:ni",
"CPLiveInputListProcessor:nj",
"StringListCallbackBlock:nk",
"StringForObjectBlock:nl",
"CPTextTrackingRange:nm",
"SystemThemeManager:nn",
"CPTooltipListPopupManager:no",
"CPVideoView:np"]);
/*<BeginType Name="Infragistics.ViewControllerModalPresentationStyle" />*/

$.ig.util.defType('ViewControllerModalPresentationStyle', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "FullScreen";
			case 2: return "FormSheet";
			case 3: return "CurrentContext";
			case 4: return "OverCurrentContext";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ViewControllerModalPresentationStyle', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ViewControllerModalPresentationStyle" />*/

/*<BeginType Name="Infragistics.EscapeKeyCloseMode" />*/

$.ig.util.defType('EscapeKeyCloseMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Close";
			case 2: return "Ask";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('EscapeKeyCloseMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.EscapeKeyCloseMode" />*/

/*<BeginType Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode" />*/

$.ig.util.defType('CPTextViewOnScreenKeyboardResizeMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "MoveWindow";
			case 2: return "ResizeWindow";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPTextViewOnScreenKeyboardResizeMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode" />*/

/*<BeginType Name="Infragistics.ZoomType" />*/

$.ig.util.defType('ZoomType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Both";
			case 2: return "HorizontalOnly";
			case 3: return "VerticalOnly";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ZoomType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ZoomType" />*/

/*<BeginType Name="Infragistics.CPPopupListItemSelectionMode" />*/

$.ig.util.defType('CPPopupListItemSelectionMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Radial";
			case 1: return "Border";
			case 2: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPPopupListItemSelectionMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListItemSelectionMode" />*/

/*<BeginType Name="Infragistics.CPPopupPosition" />*/

$.ig.util.defType('CPPopupPosition', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Above";
			case 1: return "Below";
			case 2: return "Left";
			case 3: return "Right";
			case 4: return "Menu";
			case 5: return "Auto";
			case 6: return "Toast";
			case 7: return "Modal";
			case 8: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPPopupPosition', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupPosition" />*/

/*<BeginType Name="Infragistics.PathCommandType" />*/

$.ig.util.defType('PathCommandType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Move";
			case 1: return "Curve";
			case 2: return "End";
			case 3: return "Line";
			case 4: return "Arc";
			case 5: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('PathCommandType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathCommandType" />*/

/*<BeginType Name="Infragistics.ImageHorizontalAlignment" />*/

$.ig.util.defType('ImageHorizontalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Center";
			case 1: return "Left";
			case 2: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ImageHorizontalAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ImageHorizontalAlignment" />*/

/*<BeginType Name="Infragistics.ImageVerticalAlignment" />*/

$.ig.util.defType('ImageVerticalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Center";
			case 1: return "Top";
			case 2: return "Bottom";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ImageVerticalAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ImageVerticalAlignment" />*/

/*<BeginType Name="Infragistics.CPGridViewSelectionType" />*/

$.ig.util.defType('CPGridViewSelectionType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Cell";
			case 1: return "Row";
			case 2: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPGridViewSelectionType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewSelectionType" />*/

/*<BeginType Name="Infragistics.CPGridViewItemExpandableType" />*/

$.ig.util.defType('CPGridViewItemExpandableType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Tree";
			case 1: return "Header";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPGridViewItemExpandableType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemExpandableType" />*/

/*<BeginType Name="Infragistics.CPGridViewCheckBoxEditMode" />*/

$.ig.util.defType('CPGridViewCheckBoxEditMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "CheckBoxHitArea";
			case 2: return "EntireCellIsHitArea";
			case 3: return "ReadOnly";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPGridViewCheckBoxEditMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCheckBoxEditMode" />*/

/*<BeginType Name="Infragistics.CPGridViewCellItemHitArea" />*/

$.ig.util.defType('CPGridViewCellItemHitArea', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "ItemOnly";
			case 1: return "EntireCell";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPGridViewCellItemHitArea', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellItemHitArea" />*/

/*<BeginType Name="Infragistics.CPGridViewFixedColumnDirection" />*/

$.ig.util.defType('CPGridViewFixedColumnDirection', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Left";
			case 2: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPGridViewFixedColumnDirection', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewFixedColumnDirection" />*/

/*<BeginType Name="Infragistics.CPSectionSortType" />*/

$.ig.util.defType('CPSectionSortType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Asc";
			case 1: return "Desc";
			case 2: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPSectionSortType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSectionSortType" />*/

/*<BeginType Name="Infragistics.CPCellType" />*/

$.ig.util.defType('CPCellType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Cell";
			case 1: return "FixedLeftCell";
			case 2: return "HeaderCell";
			case 3: return "FixedLeftHeaderCell";
			case 4: return "RowSeparatorCell";
			case 5: return "SectionHeaderCell";
			case 6: return "SectionFooterCell";
			case 7: return "FixedRightCell";
			case 8: return "FixedRightHeaderCell";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPCellType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCellType" />*/

/*<BeginType Name="Infragistics.FlowLayoutResizeHandleLocation" />*/

$.ig.util.defType('FlowLayoutResizeHandleLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Right";
			case 1: return "Bottom";
			case 2: return "BottomRight";
			case 3: return "None";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FlowLayoutResizeHandleLocation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowLayoutResizeHandleLocation" />*/

/*<BeginType Name="Infragistics.FlowLayoutDirection" />*/

$.ig.util.defType('FlowLayoutDirection', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Landscape";
			case 1: return "Portrait";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FlowLayoutDirection', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowLayoutDirection" />*/

/*<BeginType Name="Infragistics.CPStrokeJoin" />*/

$.ig.util.defType('CPStrokeJoin', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Bevel";
			case 1: return "Round";
			case 2: return "Miter";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPStrokeJoin', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPStrokeJoin" />*/

/*<BeginType Name="Infragistics.CPStrokeCap" />*/

$.ig.util.defType('CPStrokeCap', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Butt";
			case 1: return "Round";
			case 2: return "Square";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPStrokeCap', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPStrokeCap" />*/

/*<BeginType Name="Infragistics.CPHapticType" />*/

$.ig.util.defType('CPHapticType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "DragStart";
			case 1: return "DragSwap";
			case 2: return "DragLeave";
			case 3: return "DragEnter";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPHapticType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPHapticType" />*/

/*<BeginType Name="Infragistics.CPCursors" />*/

$.ig.util.defType('CPCursors', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Default";
			case 1: return "Clickable";
			case 2: return "Text";
			case 3: return "Grab";
			case 4: return "Grabbing";
			case 5: return "ResizeLeftRight";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPCursors', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCursors" />*/

/*<BeginType Name="Infragistics.CPCompactMonthViewAnimation" />*/

$.ig.util.defType('CPCompactMonthViewAnimation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NotAnimating";
			case 1: return "InitializeForPreviousMonth";
			case 2: return "InitializeForNextMonth";
			case 3: return "PreviousMonth";
			case 4: return "NextMonth";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPCompactMonthViewAnimation', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCompactMonthViewAnimation" />*/

/*<BeginType Name="Infragistics.CPMonthViewSelectedState" />*/

$.ig.util.defType('CPMonthViewSelectedState', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "NotSelected";
			case 1: return "IsSelectionStart";
			case 2: return "IsSelectionEnd";
			case 3: return "IsBetweenSelectionStartAndEnd";
			case 4: return "IsSelected";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPMonthViewSelectedState', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMonthViewSelectedState" />*/

/*<BeginType Name="Infragistics.CPMonthViewDisplayMode" />*/

$.ig.util.defType('CPMonthViewDisplayMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Day";
			case 1: return "Month";
			case 2: return "Year";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPMonthViewDisplayMode', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMonthViewDisplayMode" />*/

/*<BeginType Name="Infragistics.CPIconButtonStyle" />*/

$.ig.util.defType('CPIconButtonStyle', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Standard";
			case 1: return "Bordered";
			case 2: return "Accent";
			case 3: return "AccentSmall";
			case 4: return "Minimal";
			case 5: return "Link";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPIconButtonStyle', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIconButtonStyle" />*/

/*<BeginType Name="Infragistics.CPCheckedState" />*/

$.ig.util.defType('CPCheckedState', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Checked";
			case 1: return "NotChecked";
			case 2: return "NotSet";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CPCheckedState', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCheckedState" />*/

/*<BeginType Name="Infragistics.KeyboardType" />*/

$.ig.util.defType('KeyboardType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Default";
			case 1: return "Email";
			case 2: return "Numeric";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('KeyboardType', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="Infragistics.KeyboardType" />*/

/*<BeginType Name="System.Windows.TextAlignment" />*/

$.ig.util.defType('TextAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Center";
			case 1: return "Left";
			case 2: return "Right";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TextAlignment', $.ig.Enum.prototype.$type)
}, true);

/*<EndType Name="System.Windows.TextAlignment" />*/

/*<BeginType Name="Infragistics.InteractiveView" />*/

$.ig.util.defType('InteractiveView', 'Object', {
	_element: null,
	__mouseClickedHandler: null,
	__startTouchX: 0,
	__startTouchY: 0,
	__mouseDown: false,
	__isDragging: false,
	__isOver: false,
	__mouseDownDelayed: false,
	__disabled: false,
	__delayedMouseDown: null,
	__prevX: 0,
	__prevY: 0,
	__interactiveParent: null,
	__allowDrop: false,
	__allowDragOver: false,
	__dropHandler: null,
	__dragEnterHandler: null,
	__dragLeaveHandler: null,
	init: function () {
		this._actualWidth = -1;
		this._actualHeight = -1;
		this.__shouldStealFocusFromTextEditors = true;
		this.__secondsBetweenClicks = 0.4;
		$.ig.Object.prototype.init.call(this);
		this.__delayedMouseDown = new $.ig.CPTimer();
		this.__disabled = false;
		this._element = this.createElement();
	},
	_actualWidth: 0,
	_actualHeight: 0,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.InteractiveView::CreateElement()" />*/
	createElement: function () {
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.InteractiveView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::SetParent(Infragistics.InteractiveView)" />*/
	setParent: function (parent) {
		this.__interactiveParent = parent;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::SetParent(Infragistics.InteractiveView)" />*/
	,
	_isCaptureView: false,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::IsCaptureView()" />*/
	isCaptureView: function (value) {
		if (arguments.length === 1) {
			this._isCaptureView = value;
			return value;
		} else {
			return this._isCaptureView;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::IsCaptureView()" />*/
	,
	__shouldStealFocusFromTextEditors: false,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::ShouldSteaFocusFromTextEditors()" />*/
	shouldSteaFocusFromTextEditors: function (value) {
		if (arguments.length === 1) {
			this.__shouldStealFocusFromTextEditors = value;
			return value;
		} else {
			return this.__shouldStealFocusFromTextEditors;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::ShouldSteaFocusFromTextEditors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AttachEvents()" />*/
	attachEvents: function () {
		var $self = this;
		var isMobile = /Mobi/i.test(navigator.userAgent);
		if (this.handlesUIInteraction()) {
			if (this.handlesMouseEvents() && !isMobile) {
				this._element.unbind("mousedown");
				this._element.mousedown(function (e) {
					$self.onMouseDown(e);
				});
				this._element.unbind("mouseup");
				this._element.mouseup(function (e) {
					$self.onMouseUp(e);
				});
				this._element.unbind("mouseenter");
				this._element.mouseenter(function (e) {
					$self.onMouseEnter(e);
				});
				this._element.unbind("mouseleave");
				this._element.mouseleave(function (e) {
					$self.onMouseLeave(e);
				});
				this._element.unbind("mousemove");
				this._element.mousemove(function (e) {
					$self.elementOnMouseMove(e);
				});
			}
			if (this.handlesTouchEvents()) {
				this._element.unbind("touchstart");
				this._element.bind("touchstart", function (e) {
					$self.onTouchStart(e);
				});
				this._element.unbind("touchend");
				this._element.bind("touchend", function (e) {
					$self.onTouchEnd(e);
				});
				this._element.unbind("touchmove");
				this._element.bind("touchmove", function (e) {
					$self.onTouchMove(e);
				});
				this._element.unbind("touchcancel");
				this._element.bind("touchcancel", function (e) {
					$self.onTouchCancel(e);
				});
			} else if ((this.handlesMouseEvents())) {
				this._element.unbind("touchstart");
				this._element.bind("touchstart", function (e) {
					$self.onPointerDown(e);
				});
				this._element.unbind("touchend");
				this._element.bind("touchend", function (e) {
					$self.onPointerUp(e);
				});
				this._element.unbind("touchmove");
				this._element.bind("touchmove", function (e) {
					$self.onPointerMove(e);
				});
				this._element.unbind("touchcancel");
				this._element.bind("touchcancel", function (e) {
					$self.onPointerCanceled(e);
				});
			}
			if (this.handlesScrollWheelEvents() && !isMobile) {
				this._element.unbind("mousewheel wheel DOMMouseScroll");
				this._element.bind("mousewheel wheel DOMMouseScroll", function (e) {
					$self.onScrollWheel(e);
				});
			}
		} else {
			if (!isMobile) {
				this._element.unbind("mousedown");
				this._element.mousedown(function (e) {
					$self.clearFocus();
				});
			} else {
				this._element.unbind("touchstart");
				this._element.bind("touchstart", function (e) {
					$self.clearFocus();
				});
			}
		}
		if (this.__allowDrop) {
			this.bindDragEvents();
			this.bindDropEvents();
		} else if (this.__allowDragOver) {
			this.bindDragEvents();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AttachEvents()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InteractiveView::GetX(System.JQuery.JQueryEvent, System.JQuery.JQueryPosition)" />*/
	getX: function (e, pos) {
		return $.ig.truncate((e.pageX - pos.left));
	}
	/*<EndMethod Name="System.Int32 Infragistics.InteractiveView::GetX(System.JQuery.JQueryEvent, System.JQuery.JQueryPosition)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InteractiveView::GetY(System.JQuery.JQueryEvent, System.JQuery.JQueryPosition)" />*/
	getY: function (e, pos) {
		return $.ig.truncate((e.pageY - pos.top));
	}
	/*<EndMethod Name="System.Int32 Infragistics.InteractiveView::GetY(System.JQuery.JQueryEvent, System.JQuery.JQueryPosition)" />*/
	,
	/*<BeginMethod Name="Infragistics.TouchPoints Infragistics.InteractiveView::ResolveTouchPoints(System.JQuery.JQueryEvent)" />*/
	resolveTouchPoints: function (e) {
		if (e.originalEvent != null) {
			var count = e.originalEvent.touches.length;
			if (count > 0) {
				var x = new Array(count);
				var y = new Array(count);
				for (var i = 0; i < count; i++) {
					var touch = e.originalEvent.touches[i];
					x[i] = touch.clientX - this._element.offset().left;
					y[i] = touch.clientY - this._element.offset().top;
				}
				var pts = new $.ig.TouchPoints();
				pts._x = x;
				pts._y = y;
				return pts;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.TouchPoints Infragistics.InteractiveView::ResolveTouchPoints(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnTouchStart(System.JQuery.JQueryEvent)" />*/
	onTouchStart: function (e) {
		this.clearFocus();
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		e.preventDefault();
		this.__mouseDown = true;
		var pts = this.resolveTouchPoints(e);
		if (pts != null) {
			if (this.handleTouchesStart(pts._x, pts._y, false)) {
				$.ig.UIEventManager.prototype.registerView(this);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnTouchStart(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnTouchMove(System.JQuery.JQueryEvent)" />*/
	onTouchMove: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		if (this.__mouseDown) {
			e.preventDefault();
			var pts = this.resolveTouchPoints(e);
			if (pts != null) {
				if ($.ig.UIEventManager.prototype.isDragCaptureView(this)) {
					if (this.handleTouchesMove(pts._x, pts._y)) {
						$.ig.UIEventManager.prototype.captureDrag(this);
					}
				} else {
					this.endTouchDrag();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnTouchMove(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnTouchEnd(System.JQuery.JQueryEvent)" />*/
	onTouchEnd: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.endTouchDrag();
		$.ig.UIEventManager.prototype.clear();
		var count = (e.originalEvent != null) ? e.originalEvent.touches.length : 0;
		this.handleTouchesEnd(count);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnTouchEnd(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::EndTouchDrag()" />*/
	endTouchDrag: function () {
		this.__mouseDown = false;
		this.__isOver = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::EndTouchDrag()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnTouchCancel(System.JQuery.JQueryEvent)" />*/
	onTouchCancel: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.handleTouchCancel();
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnTouchCancel(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.InteractiveView::DelayMouseDuration()" />*/
	delayMouseDuration: function () {
		return 0.15;
	}
	/*<EndProperty Name="System.Double Infragistics.InteractiveView::DelayMouseDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnPointerDown(System.JQuery.JQueryEvent)" />*/
	onPointerDown: function (e) {
		var pts = this.resolveTouchPoints(e);
		if (pts != null) {
			var x = $.ig.truncate(pts._x[0]);
			var y = $.ig.truncate(pts._y[0]);
			e.preventDefault();
			this.processDown(x, y, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnPointerDown(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnMouseDown(System.JQuery.JQueryEvent)" />*/
	onMouseDown: function (e) {
		if (e.button != 2) {
			var pos = this._element.offset();
			var x = this.getX(e, pos);
			var y = this.getY(e, pos);
			e.preventDefault();
			this.processDown(x, y, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnMouseDown(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ProcessDown(System.Int32, System.Int32, System.Boolean)" />*/
	processDown: function (x, y, isTouch) {
		var $self = this;
		if (this.shouldClearFocusOnClick()) {
			$.ig.NativeUIUtility.prototype.utility().clearFocus();
			this.clearFocus();
		}
		if (this.__disabled || !this.handlesUIInteraction() || !this.canClickAgain()) {
			return;
		}
		this.__mouseDownDelayed = false;
		this.__delayedMouseDown.stop();
		this.__startTouchX = this.__prevX = x;
		this.__startTouchY = this.__prevY = y;
		$.ig.UIEventManager.prototype.registerView(this);
		if (!$.ig.UIEventManager.prototype.isMouseDownCaptured()) {
			this.checkMouseDown(x, y, isTouch, false);
			if (this.usesMouseDownDelayed()) {
				this.__delayedMouseDown.start(this.delayMouseDuration(), function (percent) {
					if (percent == 1) {
						if (isTouch) {
							$self.__mouseDownDelayed = $self.handleTouchDownDelayed(x, y);
						} else {
							$self.__mouseDownDelayed = $self.handleMouseDownDelayed(x, y);
						}
						if ($self.handlePointerDownDelayed(x, y)) {
							$self.__mouseDownDelayed = true;
						}
						if ($self.__mouseDownDelayed) {
							$self.__mouseDownDelayed = true;
							$self.__mouseDown = true;
							$self.__isOver = true;
						}
					}
				});
				this.registerMouseDown();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ProcessDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnPointerMove(System.JQuery.JQueryEvent)" />*/
	onPointerMove: function (e) {
		if (this.__mouseDown) {
			e.preventDefault();
		}
		var pts = this.resolveTouchPoints(e);
		if (pts != null) {
			var x = $.ig.truncate(pts._x[0]);
			var y = $.ig.truncate(pts._y[0]);
			this.processMoving(x, y, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnPointerMove(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ElementOnMouseMove(System.JQuery.JQueryEvent)" />*/
	elementOnMouseMove: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		var pos = this._element.offset();
		var x = this.getX(e, pos);
		var y = this.getY(e, pos);
		if (!this.__isOver && !this.__mouseDown) {
			this.checkIsOver(false, x, y, false);
		}
		this.handleMouseMoveWhileNotDown(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ElementOnMouseMove(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnMouseMove(System.JQuery.JQueryEvent)" />*/
	onMouseMove: function (e) {
		if (this.__mouseDown) {
			e.preventDefault();
		}
		var pos = this._element.offset();
		var x = this.getX(e, pos);
		var y = this.getY(e, pos);
		this.processMoving(x, y, false);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnMouseMove(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ProcessMoving(System.Int32, System.Int32, System.Boolean)" />*/
	processMoving: function (x, y, isTouch) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.__delayedMouseDown.stop();
		if (this.__mouseDown) {
			if (this.__prevX != x || this.__prevY != y) {
				this.__prevX = x;
				this.__prevY = y;
				if ($.ig.UIEventManager.prototype.isDragCaptureView(this)) {
					if (this.checkMove(x, y, isTouch)) {
						this.checkIsOver(false, x, y, isTouch);
					}
				} else {
					this.endDrag(false, -100, -100, isTouch);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ProcessMoving(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnPointerCanceled(System.JQuery.JQueryEvent)" />*/
	onPointerCanceled: function (e) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnPointerCanceled(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnMouseLeave(System.JQuery.JQueryEvent)" />*/
	onMouseLeave: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.__isOver = false;
		var pos = this._element.offset();
		var x = this.getX(e, pos);
		var y = this.getY(e, pos);
		this.handleMouseLeave(x, y);
		this.handlePointerLeave(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnMouseLeave(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnMouseEnter(System.JQuery.JQueryEvent)" />*/
	onMouseEnter: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.__isOver = true;
		var pos = this._element.offset();
		var x = this.getX(e, pos);
		var y = this.getY(e, pos);
		this.handleMouseEnter(x, y);
		this.handlePointerEnter(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnMouseEnter(System.JQuery.JQueryEvent)" />*/
	,
	__supportsRapidClicks: false,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::SupportsRapidClicks()" />*/
	supportsRapidClicks: function (value) {
		if (arguments.length === 1) {
			this.__supportsRapidClicks = value;
			return value;
		} else {
			return this.__supportsRapidClicks;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::SupportsRapidClicks()" />*/
	,
	__lastClickTimestamp: 0,
	__secondsBetweenClicks: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::CanClickAgain()" />*/
	canClickAgain: function () {
		if (this.supportsRapidClicks()) {
			return true;
		}
		var currentTimeStamp = $.ig.NativeDateUtility.prototype.getCurrentTimeInSeconds();
		if (this.__lastClickTimestamp == 0 || currentTimeStamp - this.__lastClickTimestamp > this.__secondsBetweenClicks) {
			this.__lastClickTimestamp = currentTimeStamp;
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::CanClickAgain()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ClearFocus()" />*/
	clearFocus: function () {
		if (this.shouldSteaFocusFromTextEditors()) {
			var focusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
			if (focusManager != null) {
				focusManager.setCurrentActiveElement(null, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::ShouldClearFocusOnClick()" />*/
	shouldClearFocusOnClick: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::ShouldClearFocusOnClick()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::CheckMouseDown(System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	checkMouseDown: function (x, y, isTouch, quietly) {
		if (isTouch) {
			this.__mouseDown = this.handleTouchDown(x, y, quietly);
		} else {
			this.__mouseDown = this.handleMouseDown(x, y, quietly);
		}
		if (this.handlePointerDown(x, y, quietly)) {
			this.__mouseDown = true;
		}
		if (this.__mouseDown) {
			$.ig.UIEventManager.prototype.captureMouseDown(this);
			this.__isOver = true;
			this.registerMouseDown();
		}
		return this.__mouseDown;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::CheckMouseDown(System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::CheckMove(System.Int32, System.Int32, System.Boolean)" />*/
	checkMove: function (x, y, isTouch) {
		var canceled = false;
		if (this.__isDragging || this.canMove(x, y, isTouch)) {
			if (!this.processMove(x, y, isTouch)) {
				canceled = $.ig.UIEventManager.prototype.intercept(x, y, this, isTouch);
				if (canceled) {
					this.cleanUpEvents(isTouch);
				}
			}
		}
		return !canceled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::CheckMove(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::CanMove(System.Int32, System.Int32, System.Boolean)" />*/
	canMove: function (x, y, isTouch) {
		var slop = (isTouch || this.requiresTouchSlopForMove()) ? $.ig.InteractiveView.prototype.touchSlop : 1;
		var distanceX = Math.abs(x - this.__startTouchX);
		var distanceY = Math.abs(y - this.__startTouchY);
		return distanceX > slop || distanceY > slop;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::CanMove(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::InterceptMouseMove(System.Int32, System.Int32, System.Boolean)" />*/
	interceptMouseMove: function (x, y, isTouch) {
		if (this.canMove(x, y, isTouch)) {
			this.checkMouseDown(this.__startTouchX, this.__startTouchY, isTouch, true);
			if (!this.processMove(x, y, isTouch)) {
				this.cleanUpEvents(isTouch);
				return false;
			}
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::InterceptMouseMove(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::RegisterMouseDown()" />*/
	registerMouseDown: function () {
		var $self = this;
		var doc = $(window);
		doc.mouseup(function (me) {
			$self.onMouseUp(me);
		});
		doc.mousemove(function (me) {
			$self.onMouseMove(me);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::RegisterMouseDown()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::ProcessMove(System.Int32, System.Int32, System.Boolean)" />*/
	processMove: function (x, y, isTouch) {
		if (isTouch) {
			this.__isDragging = this.handleTouchMove(x, y);
		} else {
			this.__isDragging = this.handleMouseMove(x, y);
		}
		if (this.handlePointerMove(x, y)) {
			this.__isDragging = true;
		}
		if (this.__isDragging) {
			$.ig.UIEventManager.prototype.captureDrag(this);
		}
		return this.__isDragging;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::ProcessMove(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnMouseUp(System.JQuery.JQueryEvent)" />*/
	onMouseUp: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.__delayedMouseDown.stop();
		if (this.__mouseDown) {
			$(window).unbind('mouseup');
			$(window).unbind('mousemove');
			var pos = this._element.offset();
			var x = this.getX(e, pos);
			var y = this.getY(e, pos);
			this.checkIsOver(true, x, y, false);
			$.ig.UIEventManager.prototype.clear();
			this.__mouseDown = false;
		}
		this.__mouseDownDelayed = false;
		this.__isDragging = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnMouseUp(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnPointerUp(System.JQuery.JQueryEvent)" />*/
	onPointerUp: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		this.__delayedMouseDown.stop();
		if (this.__mouseDown) {
			this.checkIsOver(true, this.__prevX, this.__prevY, true);
			$.ig.UIEventManager.prototype.clear();
			this.__mouseDown = false;
		}
		this.__mouseDownDelayed = false;
		this.__isDragging = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnPointerUp(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::CheckIsOver(System.Boolean, System.Int32, System.Int32, System.Boolean)" />*/
	checkIsOver: function (isUP, x, y, isTouch) {
		var val = true;
		if (isUP) {
			if (isTouch) {
				val = this.handleTouchUp(x, y);
			} else {
				val = this.handleMouseUp(x, y);
			}
			if (this.handlePointerUp(x, y)) {
				val = true;
			}
		}
		if (x < 0 || y < 0 || x > this._actualWidth || y > this._actualHeight) {
			if (this.__isOver) {
				if (isTouch) {
					this.handleTouchLeave(x, y);
				} else {
					this.handleMouseLeave(x, y);
				}
				this.handlePointerLeave(x, y);
			}
			this.__isOver = false;
		} else {
			if (!isUP) {
				if (!this.__isOver) {
					if (isTouch) {
						this.handleTouchEnter(x, y);
					} else {
						this.handleMouseEnter(x, y);
					}
					this.handlePointerEnter(x, y);
				}
			}
			this.__isOver = true;
			if (isUP && !this.__mouseDownDelayed && !this.__isDragging) {
				this.handleClick(x, y);
			}
		}
		return val;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::CheckIsOver(System.Boolean, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::CleanUpEvents(System.Boolean)" />*/
	cleanUpEvents: function (isTouch) {
		if (this.__isDragging || this.__mouseDown) {
			this.checkIsOver(false, -100, -100, isTouch);
			this.__mouseDown = false;
			this.__isDragging = false;
			this.__isOver = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::CleanUpEvents(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::RemoveEvents()" />*/
	removeEvents: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::RemoveEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::EndDrag(System.Boolean, System.Int32, System.Int32, System.Boolean)" />*/
	endDrag: function (isUp, x, y, isTouch) {
		if (this.__mouseDown && this.__isDragging) {
			this.checkIsOver(isUp, x, y, isTouch);
			this.__isOver = false;
			this.__mouseDown = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::EndDrag(System.Boolean, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnScrollWheel(System.JQuery.JQueryEvent)" />*/
	onScrollWheel: function (e) {
		if (this.__disabled || !this.handlesUIInteraction()) {
			return;
		}
		var deltaY = 0;
		var deltaX = 0;
		var deltaDivider = 1;
		if (e.originalEvent && e.originalEvent.deltaY){ deltaDivider = e.originalEvent.deltaMode == 0 ? 60 : 10; deltaY = -e.originalEvent.deltaY / deltaDivider;};
		if (e.originalEvent && e.originalEvent.deltaX){ deltaDivider = e.originalEvent.deltaMode == 0 ? 60 : 10; deltaX = -e.originalEvent.deltaX / deltaDivider;};
		if (e.wheelDelta) {
			deltaY = e.wheelDelta / 120;
		}
		;
		if (e.originalEvent && e.originalEvent.wheelDelta) {
			if (e.originalEvent && e.originalEvent.wheelDeltaY) deltaY = e.originalEvent.wheelDeltaY / 120;
			if (e.originalEvent && e.originalEvent.wheelDeltaX) deltaX = e.originalEvent.wheelDeltaX / 120;
		}
		;
		if (e.detail) {
			deltaY = -e.detail / 3;
		}
		;
		if (e.originalEvent && e.originalEvent.detail) {
			deltaY = -e.originalEvent.detail / 3;
		}
		;
		deltaY = deltaY / 30;
		deltaX = deltaX / 30;
		var pos = this._element.offset();
		var x = this.getX(e.originalEvent, pos);
		var y = this.getY(e.originalEvent, pos);
		if (this.handleScrollWheel(x, y, deltaX, deltaY)) {
			e.stopPropagation();
			e.preventDefault();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnScrollWheel(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandlesUIInteraction()" />*/
	,
	_canTakeControlOfMouseCursor: false,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::CanTakeControlOfMouseCursor()" />*/
	canTakeControlOfMouseCursor: function (value) {
		if (arguments.length === 1) {
			this._canTakeControlOfMouseCursor = value;
			return value;
		} else {
			return this._canTakeControlOfMouseCursor;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::CanTakeControlOfMouseCursor()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::HandlesMouseEvents()" />*/
	handlesMouseEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::HandlesMouseEvents()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::HandlesTouchEvents()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::HandlesScrollWheelEvents()" />*/
	handlesScrollWheelEvents: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::HandlesScrollWheelEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AddClickHandler(Infragistics.PointExecutionBlock)" />*/
	addClickHandler: function (action) {
		this.__mouseClickedHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AddClickHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::IsMouseDown()" />*/
	isMouseDown: function () {
		return this.__mouseDown;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::IsMouseDown()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::UsesMouseDownDelayed()" />*/
	usesMouseDownDelayed: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::UsesMouseDownDelayed()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerDownDelayed(System.Int32, System.Int32)" />*/
	handlePointerDownDelayed: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandlePointerEnter(System.Int32, System.Int32)" />*/
	handlePointerEnter: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandlePointerEnter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandlePointerLeave(System.Int32, System.Int32)" />*/
	handlePointerLeave: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandlePointerLeave(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	handleTouchDownDelayed: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchUp(System.Int32, System.Int32)" />*/
	handleTouchUp: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleTouchEnter(System.Int32, System.Int32)" />*/
	handleTouchEnter: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleTouchEnter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleTouchLeave(System.Int32, System.Int32)" />*/
	handleTouchLeave: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleTouchLeave(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchMove(System.Int32, System.Int32)" />*/
	handleTouchMove: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseDownDelayed(System.Int32, System.Int32)" />*/
	handleMouseDownDelayed: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleMouseDown: function (x, y, quietly) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseUp(System.Int32, System.Int32)" />*/
	handleMouseUp: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	handleMouseEnter: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	handleMouseLeave: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseMove(System.Int32, System.Int32)" />*/
	handleMouseMove: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleMouseMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		if (this.__mouseClickedHandler != null) {
			this.__mouseClickedHandler(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchesStart(, , System.Boolean)" />*/
	handleTouchesStart: function (x, y, quietly) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchesStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleTouchesEnd(System.Int32)" />*/
	handleTouchesEnd: function (count) {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleTouchesEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::HandleTouchCancel()" />*/
	handleTouchCancel: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::HandleTouchCancel()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	handleScrollWheel: function (x, y, deltaX, deltaY) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.KeyboardKeys Infragistics.InteractiveView::ConvertNativeKey(System.Int32)" />*/
	convertNativeKey: function (key) {
		switch (key) {
			case 8: return $.ig.KeyboardKeys.prototype.backspace;
			case 46: return $.ig.KeyboardKeys.prototype.del;
			default: return $.ig.KeyboardKeys.prototype.none;
		}
	}
	/*<EndMethod Name="Infragistics.KeyboardKeys Infragistics.InteractiveView::ConvertNativeKey(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::Enable()" />*/
	enable: function () {
		this.__disabled = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::Enable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::Disable()" />*/
	disable: function () {
		this.__disabled = true;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::Disable()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveView::IsDisabled()" />*/
	isDisabled: function () {
		return this.__disabled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveView::IsDisabled()" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.InteractiveView::TranslatePoint(Infragistics.NativePoint, Infragistics.InteractiveView)" />*/
	translatePoint: function (p, relativeTo) {
		return $.ig.NativeUIUtility.prototype.utility().translatePoint(p, this._element, relativeTo._element);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.InteractiveView::TranslatePoint(Infragistics.NativePoint, Infragistics.InteractiveView)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.InteractiveView::RequiresTouchSlopForMove()" />*/
	requiresTouchSlopForMove: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InteractiveView::RequiresTouchSlopForMove()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::EnableDrop()" />*/
	enableDrop: function () {
		this.__allowDrop = true;
		this.bindDragEvents();
		this.bindDropEvents();
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::EnableDrop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::DisableDrop()" />*/
	disableDrop: function () {
		this.__allowDrop = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::DisableDrop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AddDropHandler(Infragistics.ObjectBlock)" />*/
	addDropHandler: function (o) {
		if (this.__allowDrop) {
			this.__dropHandler = o;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AddDropHandler(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::EnableDragOver()" />*/
	enableDragOver: function () {
		this.bindDragEvents();
		this.__allowDragOver = true;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::EnableDragOver()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::DisableDragOver()" />*/
	disableDragOver: function () {
		this.__allowDragOver = false;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::DisableDragOver()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AddDragEnterHandler(Infragistics.ExecutionBlock)" />*/
	addDragEnterHandler: function (e) {
		this.__dragEnterHandler = e;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AddDragEnterHandler(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AddDragLeaveHandler(Infragistics.PointExecutionBlock)" />*/
	addDragLeaveHandler: function (e) {
		this.__dragLeaveHandler = e;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AddDragLeaveHandler(Infragistics.PointExecutionBlock)" />*/
	,
	__draggingOverHandler: null,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::AddDraggingOverHanlder(Infragistics.ExecutionBlock)" />*/
	addDraggingOverHanlder: function (action) {
		this.__draggingOverHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::AddDraggingOverHanlder(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnDragEnter(System.JQuery.JQueryEvent)" />*/
	onDragEnter: function (e) {
		if (this.__allowDragOver) {
			e.preventDefault();
			e.stopPropagation();
			if (!this.__allowDrop) {
				e.originalEvent.dataTransfer.dropEffect = 'none';
			}
			if (this.__dragEnterHandler != null) {
				this.__dragEnterHandler();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnDragEnter(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnDragOver(System.JQuery.JQueryEvent)" />*/
	onDragOver: function (e) {
		if (this.__allowDragOver) {
			e.preventDefault();
			e.stopPropagation();
			if (!this.__allowDrop) {
				e.originalEvent.dataTransfer.dropEffect = 'none';
			}
			if (this.__draggingOverHandler != null) {
				this.__draggingOverHandler();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnDragOver(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnDragLeave(System.JQuery.JQueryEvent)" />*/
	onDragLeave: function (e) {
		if (this.__allowDragOver) {
			e.preventDefault();
			e.stopPropagation();
			if (this.__dragLeaveHandler != null) {
				var x = $.ig.truncate((e.clientX - this._element.offset().left));
				var y = $.ig.truncate((e.clientY - this._element.offset().top));
				if (y > this._actualHeight || x > this._actualWidth || x < 0 || y < 0) {
					this.__dragLeaveHandler(x, y);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnDragLeave(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::OnDrop(System.JQuery.JQueryEvent)" />*/
	onDrop: function (e) {
		e.preventDefault();
		e.stopPropagation();
		if (this.__allowDrop) {
			var droppedFiles = e.originalEvent.dataTransfer.files;
			if (droppedFiles != null && droppedFiles.length > 0) {
				this.processDroppedFiles(droppedFiles);
			} else {
				var html = e.originalEvent.dataTransfer.getData('text/html');
				var url = "";
				if (html != null && html.length > 0) {
					var matches = html.match(/<a([^>]*?)href\s*=\s*(['"])([^'"]+)(['"])([^>]*?)>/i);
					if (matches != null && matches.length > 3) {
						url = matches[3];
					}
				} else {
					url = e.originalEvent.dataTransfer.getData('Text');
				}
				if (url != null && url.length > 0) {
					this.processDroppedLink(url);
				} else {
					e.originalEvent.dataTransfer.dropEffect = 'none';
					this.discardDrop();
				}
			}
		} else {
			e.originalEvent.dataTransfer.dropEffect = 'none';
			this.discardDrop();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::OnDrop(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ProcessDroppedFiles(Infragistics.CPList)" />*/
	processDroppedFiles: function (droppedFiles) {
		var files = new $.ig.Array();
		var count = droppedFiles.length;
		for (var i = 0; i < count; i++) {
			var fileJson = $.ig.CPJSONObject.prototype.createFromJSONObject(droppedFiles[i]);
			var fileDropped = new $.ig.CPFile();
			var name = fileJson.resolveStringForKey("name");
			if (name != null) {
				fileDropped.name(name);
			}
			var size = fileJson.resolveLongForKey("size");
			if (size > 0) {
				fileDropped.size(size);
			}
			var type = fileJson.resolveStringForKey("type");
			if (type != null) {
				fileDropped.mimeType(type);
			}
			fileDropped.data(droppedFiles[i]);
			files.add(fileDropped);
		}
		if (this.__dropHandler != null) {
			var dropInfo = new $.ig.CPDropInfo(1, files);
			this.__dropHandler(dropInfo);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ProcessDroppedFiles(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::ProcessDroppedLink(System.String)" />*/
	processDroppedLink: function (url) {
		var dropInfo = new $.ig.CPDropInfo(1, null);
		dropInfo.webURL(url);
		this.__dropHandler(dropInfo);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::ProcessDroppedLink(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::DiscardDrop()" />*/
	discardDrop: function () {
		if (this.__dropHandler != null) {
			this.__dropHandler(null);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::DiscardDrop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::BindDragEvents()" />*/
	bindDragEvents: function () {
		var $self = this;
		this._element.unbind("dragenter");
		this._element.bind("dragenter", function (e) {
			$self.onDragEnter(e);
		});
		this._element.unbind("dragover");
		this._element.bind("dragover", function (e) {
			$self.onDragOver(e);
		});
		this._element.unbind("dragleave");
		this._element.bind("dragleave", function (e) {
			$self.onDragLeave(e);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::BindDragEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveView::BindDropEvents()" />*/
	bindDropEvents: function () {
		var $self = this;
		this._element.unbind("drop");
		this._element.bind("drop", function (e) {
			$self.onDrop(e);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveView::BindDropEvents()" />*/
	,
	$type: new $.ig.Type('InteractiveView', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InteractiveView" />*/

/*<BeginType Name="System.Windows.View" />*/

$.ig.util.defType('View', 'InteractiveView', {
	__bgColor: null,
	__isHidden: false,
	__clipToBounds: false,
	_params: null,
	__currentZindex: 0,
	__parent: null,
	__opacity: 0,
	__children: null,
	init: function () {
		this.__previousXVal = -1;
		this.__previousYVal = -1;
		$.ig.InteractiveView.prototype.init.call(this);
		this.__isHidden = false;
		this._params = new $.ig.CPLayoutParams(0, 0, 0);
		this.__currentZindex = 0;
		this.__parent = null;
		this.__opacity = 1;
		this.__children = new $.ig.Array();
		this._element[0].style.position = this.resolvePosition();
		this._element[0].style.width = "0px";
		this._element[0].style.height = "0px";
	},
	/*<BeginProperty Name="System.JQuery.JQueryObject System.Windows.View::ParentElement()" />*/
	parentElement: function () {
		return this._element;
	}
	/*<EndProperty Name="System.JQuery.JQueryObject System.Windows.View::ParentElement()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::SetCursor(Infragistics.CPCursors)" />*/
	setCursor: function (cursor) {
		if (cursor == $.ig.CPCursors.prototype.$default) {
			this._element[0].style.cursor = "default";
		} else if (cursor == $.ig.CPCursors.prototype.clickable) {
			this._element[0].style.cursor = "pointer";
		} else if (cursor == $.ig.CPCursors.prototype.text) {
			this._element[0].style.cursor = "text";
		} else if (cursor == $.ig.CPCursors.prototype.grab) {
			this._element[0].style.cursor = "grab";
		} else if (cursor == $.ig.CPCursors.prototype.grabbing) {
			this._element[0].style.cursor = "grabbing";
		} else if (cursor == $.ig.CPCursors.prototype.resizeLeftRight) {
			this._element[0].style.cursor = "ew-resize";
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::SetCursor(Infragistics.CPCursors)" />*/
	,
	/*<BeginMethod Name="System.Int32 System.Windows.View::GetChildCount()" />*/
	getChildCount: function () {
		return this.__children.length;
	}
	/*<EndMethod Name="System.Int32 System.Windows.View::GetChildCount()" />*/
	,
	/*<BeginMethod Name="System.Windows.View System.Windows.View::GetChildAt(System.Int32)" />*/
	getChildAt: function (index) {
		return this.__children[index];
	}
	/*<EndMethod Name="System.Windows.View System.Windows.View::GetChildAt(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.JQuery.JQueryObject System.Windows.View::CreateElement()" />*/
	createElement: function () {
		return $("<div></div>");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject System.Windows.View::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		if (color != this.__bgColor) {
			this.__bgColor = color;
			this._element[0].style.backgroundColor = this.__bgColor;
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.String System.Windows.View::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		return this._element[0].style.backgroundColor;
	}
	/*<EndMethod Name="System.String System.Windows.View::GetBackgroundColor()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this._element[0].style.width = this._element[0].style.height = null;
	}
	/*<EndMethod Name="System.Void System.Windows.View::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 System.Windows.View::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 System.Windows.View::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 System.Windows.View::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 System.Windows.View::GetCalculatedHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean System.Windows.View::ClipToBounds()" />*/
	clipToBounds: function (value) {
		if (arguments.length === 1) {
			this.__clipToBounds = value;
			this.clipElement(this.__clipToBounds);
			return value;
		} else {
			return this.__clipToBounds;
		}
	}
	/*<EndProperty Name="System.Boolean System.Windows.View::ClipToBounds()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::ClipElement(System.Boolean)" />*/
	clipElement: function (clip) {
		if (clip) {
			this._element[0].style.overflow = "hidden";
		} else {
			this._element[0].style.overflow = "";
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::ClipElement(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Double System.Windows.View::Opacity()" />*/
	opacity: function (value) {
		if (arguments.length === 1) {
			this._element.css("opacity", value.toString());
			this.__opacity = value;
			return value;
		} else {
			return this.__opacity;
		}
	}
	/*<EndProperty Name="System.Double System.Windows.View::Opacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean System.Windows.View::IsHidden()" />*/
	isHidden: function (value) {
		if (arguments.length === 1) {
			this.__isHidden = value;
			if (this.__isHidden) {
				this._element[0].style.display = "none";
			} else {
				this._element[0].style.display = "";
			}
			this.onIsHiddenChanged(this.__isHidden);
			return value;
		} else {
			return this.__isHidden;
		}
	}
	/*<EndProperty Name="System.Boolean System.Windows.View::IsHidden()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::OnIsHiddenChanged(System.Boolean)" />*/
	onIsHiddenChanged: function (value) {
	}
	/*<EndMethod Name="System.Void System.Windows.View::OnIsHiddenChanged(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String System.Windows.View::ResolvePosition()" />*/
	resolvePosition: function () {
		return "absolute";
	}
	/*<EndMethod Name="System.String System.Windows.View::ResolvePosition()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::SetFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setFrame: function (x, y, w, h) {
		this.setFrameAsDouble(x, y, w, h);
	}
	/*<EndMethod Name="System.Void System.Windows.View::SetFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	__previousXVal: 0,
	__previousYVal: 0,
	/*<BeginMethod Name="System.Void System.Windows.View::SetFrameAsDouble(System.Double, System.Double, System.Double, System.Double)" />*/
	setFrameAsDouble: function (x, y, w, h) {
		if (x != this.__previousXVal || y != this.__previousYVal || w != this._actualWidth || h != this._actualHeight) {
			this._actualWidth = $.ig.truncate(w);
			this._actualHeight = $.ig.truncate(h);
			this.__previousXVal = x;
			this.__previousYVal = y;
			this._element[0].style.left = x + "px";
			this._element[0].style.top = y + "px";
			if (this.shouldSetWidth()) {
				this._element[0].style.width = w + "px";
			}
			if (this.shouldSetHeight()) {
				this._element[0].style.height = h + "px";
			} else {
				this._element[0].style.height = "";
			}
			this.measureChildren($.ig.truncate(w), $.ig.truncate(h));
			this.layoutChildren();
		} else {
			if (this.shouldSetWidth() && this._element[0].style.width.length == 0) {
				this._element[0].style.width = w + "px";
			}
			if (this.shouldSetHeight() && this._element[0].style.height.length == 0) {
				this._element[0].style.height = h + "px";
			}
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::SetFrameAsDouble(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginProperty Name="System.Boolean System.Windows.View::ShouldSetWidth()" />*/
	shouldSetWidth: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean System.Windows.View::ShouldSetWidth()" />*/
	,
	/*<BeginProperty Name="System.Boolean System.Windows.View::ShouldSetHeight()" />*/
	shouldSetHeight: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean System.Windows.View::ShouldSetHeight()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::MeasureChildren(System.Int32, System.Int32)" />*/
	measureChildren: function (w, h) {
	}
	/*<EndMethod Name="System.Void System.Windows.View::MeasureChildren(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::LayoutChildren()" />*/
	layoutChildren: function () {
	}
	/*<EndMethod Name="System.Void System.Windows.View::LayoutChildren()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::SetParent(Infragistics.InteractiveView)" />*/
	setParent: function (parent) {
		$.ig.InteractiveView.prototype.setParent.call(this, parent);
		this.__parent = parent;
	}
	/*<EndMethod Name="System.Void System.Windows.View::SetParent(Infragistics.InteractiveView)" />*/
	,
	/*<BeginMethod Name="System.Windows.View System.Windows.View::GetParent()" />*/
	getParent: function () {
		return this.__parent;
	}
	/*<EndMethod Name="System.Windows.View System.Windows.View::GetParent()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		subView.setParent(this);
		this.__children.add(subView);
		this.parentElement().append(subView._element);
		subView.onAdded();
	}
	/*<EndMethod Name="System.Void System.Windows.View::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::BringToFront()" />*/
	bringToFront: function () {
		if (this.__parent != null) {
			var parent = this.__parent;
			parent.removeSubview(this);
			parent.addSubview(this);
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::BringToFront()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::RemoveSubview(System.Windows.View)" />*/
	removeSubview: function (subView) {
		subView.setParent(null);
		this.__children.removeItem(subView);
		subView.onRemoved();
		subView.parentElement().remove();
	}
	/*<EndMethod Name="System.Void System.Windows.View::RemoveSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::OnAdded()" />*/
	onAdded: function () {
		this.attachEvents();
		var count = this.__children.length;
		for (var i = 0; i < count; i++) {
			var child = this.__children[i];
			child.onAdded();
		}
	}
	/*<EndMethod Name="System.Void System.Windows.View::OnAdded()" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.View::OnRemoved()" />*/
	onRemoved: function () {
	}
	/*<EndMethod Name="System.Void System.Windows.View::OnRemoved()" />*/
	,
	/*<BeginProperty Name="System.String System.Windows.View::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._element[0].setAttribute("id", value);
			return value;
		} else {
			return this._element[0].getAttribute("id");
		}
	}
	/*<EndProperty Name="System.String System.Windows.View::Name()" />*/
	,
	$type: new $.ig.Type('View', $.ig.InteractiveView.prototype.$type)
}, true);

/*<EndType Name="System.Windows.View" />*/

/*<BeginType Name="System.Windows.Controls.NativePanel" />*/

$.ig.util.defType('NativePanel', 'View', {
	init: function () {
		$.ig.View.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChild(System.Windows.View, System.Int32, System.Int32)" />*/
	measureChild: function (child, w, h) {
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChild(System.Windows.View, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChild(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureChild1: function (child, x, y, w, h, opacity) {
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChild(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChild(System.Windows.View, Infragistics.CPLayoutParams, System.Double)" />*/
	layoutChild: function (child, p, percent) {
		if (p.isAnimating()) {
			child.setFrameAsDouble(p.getXAsDouble(percent), p.getYAsDouble(percent), p.getWAsDouble(percent), p.getHAsDouble(percent));
		} else {
			child.setFrame(p.getX(percent), p.getY(percent), p.getW(percent), p.getH(percent));
		}
		child.opacity(p.getOpacity(percent));
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChild(System.Windows.View, Infragistics.CPLayoutParams, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChildren(System.Int32, System.Int32)" />*/
	measureChildren: function (w, h) {
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::MeasureChildren(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChildRecursive(System.Windows.View, Infragistics.CPLayoutParams, System.Double)" />*/
	layoutChildRecursive: function (child, p, percent) {
		this.layoutChild(child, p, percent);
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChildRecursive(System.Windows.View, Infragistics.CPLayoutParams, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChildren()" />*/
	layoutChildren: function () {
	}
	/*<EndMethod Name="System.Void System.Windows.Controls.NativePanel::LayoutChildren()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPLayoutParams System.Windows.Controls.NativePanel::GetParams(System.Windows.View)" />*/
	getParams: function (view) {
		return view._params;
	}
	/*<EndMethod Name="Infragistics.CPLayoutParams System.Windows.Controls.NativePanel::GetParams(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Html.Element System.Windows.Controls.NativePanel::CaptureImage()" />*/
	captureImage: function () {
		var clonedElement = this._element[0].cloneNode(true);
		clonedElement.style.left = "0px";
		clonedElement.style.top = "0px";
		var clonedObj = $(clonedElement);
		var originalCanvases = this._element.find("canvas");
		var clonedCanvases = clonedObj.find("canvas");
		var count = originalCanvases.length;
		for (var i = 0; i < count; i++) {
			var originalCanvas = originalCanvases[i];
			var clonedCanvas = clonedCanvases[i];
			var context = clonedCanvas.getContext("2d");
			try {
				context.drawImage(originalCanvas, 0, 0);
			}
			catch (e) {
			}
		}
		return clonedElement;
	}
	/*<EndMethod Name="System.Html.Element System.Windows.Controls.NativePanel::CaptureImage()" />*/
	,
	$type: new $.ig.Type('NativePanel', $.ig.View.prototype.$type)
}, true);

/*<EndType Name="System.Windows.Controls.NativePanel" />*/

/*<BeginType Name="System.Windows.Input.Key" />*/

$.ig.util.defType('Key', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('Key', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="System.Windows.Input.Key" />*/

/*<BeginType Name="Infragistics.CPButton" />*/

$.ig.util.defType('CPButton', 'View', {
	init: function () {
		$.ig.View.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPButton::SetText(System.String)" />*/
	setText: function (text) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPButton::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButton::AddClickHandler(Infragistics.ExecutionBlock)" />*/
	addClickHandler1: function (action) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPButton::AddClickHandler(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButton::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPButton::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButton::SetTextColor(System.String)" />*/
	setTextColor: function (textColor) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPButton::SetTextColor(System.String)" />*/
	,
	$type: new $.ig.Type('CPButton', $.ig.View.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPButton" />*/

/*<BeginType Name="Infragistics.FocusableElementDelegate" />*/

$.ig.util.defType('FocusableElementDelegate', 'Object', {
	$type: new $.ig.Type('FocusableElementDelegate', null)
}, true);

/*<EndType Name="Infragistics.FocusableElementDelegate" />*/

/*<BeginType Name="Infragistics.CPSectionContainer" />*/

$.ig.util.defType('CPSectionContainer', 'Object', {
	$type: new $.ig.Type('CPSectionContainer', null)
}, true);

/*<EndType Name="Infragistics.CPSectionContainer" />*/

/*<BeginType Name="Infragistics.CPViewCore" />*/

$.ig.util.defType('CPViewCore', 'NativePanel', {
	__isInit: false,
	__prevW: 0,
	__prevH: 0,
	__percent: 0,
	__duration: 0,
	__finishAnimationBlock: null,
	__sizeChangedBlocks: null,
	__afterSizeChangedBlocks: null,
	__animator: null,
	_focusElements: null,
	__sectionId: null,
	__dynamicContainerId: null,
	__parnetDynamicContainerId: null,
	__isFocusable: false,
	init: function () {
		this.__percent = 1;
		this.__isFocusManagerRegistered = false;
		$.ig.NativePanel.prototype.init.call(this);
		this._focusElements = new $.ig.Array();
		this.internalSetup();
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::CurrentX()" />*/
	currentX: function () {
		var p = this.getParams(this);
		return p == null ? 0 : p.getX(1);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::CurrentX()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::CurrentY()" />*/
	currentY: function () {
		var p = this.getParams(this);
		return p == null ? 0 : p.getY(1);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::CurrentY()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::CurrentWidth()" />*/
	currentWidth: function () {
		return this.__prevW;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::CurrentWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::CurrentHeight()" />*/
	currentHeight: function () {
		return this.__prevH;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::CurrentHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewCore::IsFocusable()" />*/
	isFocusable: function (value) {
		if (arguments.length === 1) {
			this.__isFocusable = value;
			return value;
		} else {
			return this.__isFocusable;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewCore::IsFocusable()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPViewCore::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			this.name(value);
			return value;
		} else {
			return this.name();
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPViewCore::AccessibilityName()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::MeasureChildren(System.Int32, System.Int32)" />*/
	measureChildren: function (w, h) {
		if (this.__prevW != w || this.__prevH != h || this.__sizeIsDirty) {
			this.__sizeIsDirty = false;
			this.__prevW = w;
			this.__prevH = h;
			this.sizeChanged(this.__prevW, this.__prevH);
			this.notifySizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::MeasureChildren(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::NotifySizeChanged()" />*/
	notifySizeChanged: function () {
		if (this.__prevH > 0 && this.__prevW > 0) {
			var sizeBlockCount = this.__sizeChangedBlocks.length;
			for (var i = 0; i < sizeBlockCount; i++) {
				var block = this.__sizeChangedBlocks[i];
				block(this.__prevW, this.__prevH);
			}
		}
		this.notifyAfterSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::NotifySizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::NotifyAfterSizeChanged()" />*/
	notifyAfterSizeChanged: function () {
		if (this.__prevH > 0 && this.__prevW > 0) {
			var sizeBlockCount = this.__afterSizeChangedBlocks.length;
			var blocks = $.ig.ArrayUtility.prototype.copyCPList(this.__afterSizeChangedBlocks);
			for (var i = 0; i < sizeBlockCount; i++) {
				var block = blocks[i];
				block(this.__prevW, this.__prevH);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::NotifyAfterSizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ForceFullLayoutOfChildren()" />*/
	forceFullLayoutOfChildren: function () {
		var w = this.__prevW;
		var h = this.__prevH;
		this.__prevW = this.__prevH = 0;
		this.measureChildren(w, h);
		this.layoutChildren();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ForceFullLayoutOfChildren()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::LayoutChildren()" />*/
	layoutChildren: function () {
		this.layoutChildren1(this.__percent, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::LayoutChildren()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::LayoutChildren(System.Double, System.Boolean)" />*/
	layoutChildren1: function (percent, invokedFromAnimation) {
		var count = this.getChildCount();
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			var p = this.getParams(child);
			if (p.isAnimating()) {
				if (invokedFromAnimation) {
					this.layoutChildRecursive(child, p, percent);
				}
			} else {
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::LayoutChildren(System.Double, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::LayoutChildrenRecursive(System.Double)" />*/
	layoutChildrenRecursive: function (percent) {
		var count = this.getChildCount();
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			var p = this.getParams(child);
			this.layoutChildRecursive(child, p, percent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::LayoutChildrenRecursive(System.Double)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewCore::Scalable()" />*/
	scalable: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewCore::Scalable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::InternalSetup()" />*/
	internalSetup: function () {
		if (!this.__isInit) {
			this.__isInit = true;
			this.__animator = new $.ig.AnimationHelper(1, this);
			this.__sizeChangedBlocks = new $.ig.Array();
			this.__afterSizeChangedBlocks = new $.ig.Array();
			this.setup();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::InternalSetup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ChangeAnimationType(Infragistics.AnimationType)" />*/
	changeAnimationType: function (type) {
		this.__animator.setAnimationType(type);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ChangeAnimationType(Infragistics.AnimationType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::Setup()" />*/
	setup: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::Animate(System.Double, Infragistics.ExecutionBlock, Infragistics.ExecutionBoolBlock)" />*/
	animate: function (duration, animate, completed) {
		this.__finishAnimationBlock = completed;
		var count = this.getChildCount();
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			var p = this.getParams(child);
			p.prepareForAnimation();
		}
		this.__duration = duration * 1000;
		animate();
		this.__percent = 0;
		this.__animator.start();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::Animate(System.Double, Infragistics.ExecutionBlock, Infragistics.ExecutionBoolBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::StopAnimation(System.Boolean)" />*/
	stopAnimation: function (moveToFinalPosition) {
		if (this.__animator != null) {
			this.__animator.stop();
			var count = this.getChildCount();
			for (var i = 0; i < count; i++) {
				var child = this.getChildAt(i);
				var p = this.getParams(child);
				p.finishedAnimating(moveToFinalPosition);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::StopAnimation(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CPViewCore::AnimationDuration()" />*/
	animationDuration: function () {
		return this.__duration;
	}
	/*<EndMethod Name="System.Double Infragistics.CPViewCore::AnimationDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::AnimationTick(System.Double)" />*/
	animationTick: function (percent) {
		this.__percent = percent;
		var count = this.getChildCount();
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			var p = this.getParams(child);
			this.measureChild(child, p.getW(percent), p.getH(percent));
		}
		this.layoutChildren1(percent, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::AnimationTick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::AnimationFinished()" />*/
	animationFinished: function () {
		this.__percent = 1;
		var count = this.getChildCount();
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			var p = this.getParams(child);
			p.finishedAnimating(true);
		}
		this.layoutChildren1(1, false);
		if (this.__finishAnimationBlock != null) {
			var action = this.__finishAnimationBlock;
			this.__finishAnimationBlock = null;
			action(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::AnimationFinished()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureView: function (elem, x, y, w, h) {
		this.measureView1(elem, x, y, w, h, this.opacity());
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureView1: function (elem, x, y, w, h, opacity) {
		var p = this.getParams(elem);
		if (w < 0) {
			w = 0;
		}
		if (h < 0) {
			h = 0;
		}
		p.set(x, y, w, h, opacity);
		if (!p.isAnimating()) {
			this.measureChild(elem, w, h);
			this.layoutChild(elem, p, 1);
			if ($.ig.util.cast($.ig.CPViewCore.prototype.$type, elem) !== null) {
				var child = (elem);
				if (child.__sizeIsDirty) {
					child.measureChildren(w, h);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::RegisterAfterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	registerAfterSizeChangedListener: function (block) {
		this.__afterSizeChangedBlocks.add(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::RegisterAfterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::UnregisterAfterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	unregisterAfterSizeChangedListener: function (block) {
		this.__afterSizeChangedBlocks.removeItem(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::UnregisterAfterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::RegisterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	registerSizeChangedListener: function (block) {
		this.__sizeChangedBlocks.add(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::RegisterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::UnregisterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	unregisterSizeChangedListener: function (block) {
		this.__sizeChangedBlocks.removeItem(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::UnregisterSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	,
	__sizeIsDirty: false,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.__sizeIsDirty = true;
		$.ig.NativePanel.prototype.calculateSizeToFit.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::MarkSizeDirty()" />*/
	markSizeDirty: function () {
		this.__sizeIsDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::MarkSizeDirty()" />*/
	,
	__isUnloaded: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewCore::IsUnloaded()" />*/
	isUnloaded: function () {
		return this.__isUnloaded;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewCore::IsUnloaded()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::UnregisterFocus()" />*/
	unregisterFocus: function () {
		if (this.__isFocusManagerRegistered) {
			var manager = $.ig.CPKeyboardEventManager.prototype.getFocusManagerWithSectionId(this.sectionId());
			if (manager != null) {
				manager.unregisterFocusElement(this, this.sectionId());
			}
		}
		for (var i = 0; i < this._focusElements.length; i++) {
			var elem = this._focusElements[i];
			var elemItem = elem.getElement();
			if (elemItem != null && $.ig.util.cast($.ig.CPViewCore.prototype.$type, elemItem) !== null) {
				var view = elemItem;
				view.unregisterFocus();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::UnregisterFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::Unload()" />*/
	unload: function () {
		this.__isUnloaded = true;
		this.unregisterFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::Unload()" />*/
	,
	__isFocusManagerRegistered: false,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::FocusManagerRegistered(System.String)" />*/
	focusManagerRegistered: function (sectionId) {
		this.__sectionId = sectionId;
		if (this._focusElements.length > 0 && sectionId != null) {
			var manager = $.ig.CPKeyboardEventManager.prototype.getFocusManagerWithSectionId(this.__sectionId);
			if (manager != null) {
				manager.registerFocusableElements(this._focusElements, this.__sectionId);
				this.__isFocusManagerRegistered = true;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::FocusManagerRegistered(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::OnIsHiddenChanged(System.Boolean)" />*/
	onIsHiddenChanged: function (value) {
		this.toggleFocusElements(value == false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::OnIsHiddenChanged(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ToggleFocusElements(System.Boolean)" />*/
	toggleFocusElements: function (isFocusable) {
		if (isFocusable && (this.isHidden() || this.isDisabled())) {
			return;
		}
		for (var i = 0; i < this._focusElements.length; i++) {
			var elem = this._focusElements[i];
			var elemItem = elem.getElement();
			if (elemItem != null && $.ig.util.cast($.ig.CPViewBase.prototype.$type, elemItem) !== null) {
				var subView = elemItem;
				subView.toggleFocusElements(isFocusable);
			}
			elem.isFocusable(isFocusable);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ToggleFocusElements(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPViewCore::SectionId()" />*/
	sectionId: function () {
		return this.__sectionId;
	}
	/*<EndProperty Name="System.String Infragistics.CPViewCore::SectionId()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPViewCore::ParentDynamicContainerId()" />*/
	parentDynamicContainerId: function (value) {
		if (arguments.length === 1) {
			this.__parnetDynamicContainerId = value;
			return value;
		} else {
			return this.__parnetDynamicContainerId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPViewCore::ParentDynamicContainerId()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPViewCore::GetDynamicContainerId()" />*/
	getDynamicContainerId: function () {
		if (this.__dynamicContainerId == null || this.__dynamicContainerId.equals("")) {
			this.__dynamicContainerId = $.ig.NativeStringUtility.prototype.generateUID();
		}
		return this.__dynamicContainerId;
	}
	/*<EndMethod Name="System.String Infragistics.CPViewCore::GetDynamicContainerId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::RegisterElementInDynamicContainer(Infragistics.CPViewBase)" />*/
	registerElementInDynamicContainer: function (element) {
		element.parentDynamicContainerId(this.getDynamicContainerId());
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::RegisterElementInDynamicContainer(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ElementGotFocus()" />*/
	elementGotFocus: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ElementLostFocus()" />*/
	elementLostFocus: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		return new $.ig.Array();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetSupportedSectionKeyCommands()" />*/
	getSupportedSectionKeyCommands: function () {
		return new $.ig.Array();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetSupportedSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPViewCore::SupportsSectionKeyCommands()" />*/
	supportsSectionKeyCommands: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPViewCore::SupportsSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetPagingKeyCommands()" />*/
	getPagingKeyCommands: function () {
		return new $.ig.Array();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPViewCore::GetPagingKeyCommands()" />*/
	,
	/*<BeginMethod Name="Infragistics.FocusableElementDelegate Infragistics.CPViewCore::GetSectionView()" />*/
	getSectionView: function () {
		return this;
	}
	/*<EndMethod Name="Infragistics.FocusableElementDelegate Infragistics.CPViewCore::GetSectionView()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPViewCore::CanSectionGetFocus()" />*/
	canSectionGetFocus: function () {
		return !this.isHidden();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPViewCore::CanSectionGetFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		$.ig.NativePanel.prototype.addSubview.call(this, subView);
		if ($.ig.util.cast($.ig.CPViewBase.prototype.$type, subView) !== null) {
			this.addFocusableElement(subView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::AddFocusableElement(Infragistics.FocusableElementDelegate)" />*/
	addFocusableElement: function (view) {
		var element = new $.ig.FocusableElement(new $.ig.CPWeakObject(view));
		if (this.__isFocusManagerRegistered && !this.__isUnloaded) {
			if (this.sectionId() != null) {
				element._sectionId = this.sectionId();
				var items = new $.ig.Array();
				items.add(element);
				var focusManager = $.ig.CPKeyboardEventManager.prototype.getFocusManagerWithSectionId(this.sectionId());
				if (focusManager != null) {
					focusManager.registerFocusableElements(items, this.sectionId());
				}
			}
		}
		this._focusElements.add(element);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::AddFocusableElement(Infragistics.FocusableElementDelegate)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::TriggerSizeChanged()" />*/
	triggerSizeChanged: function () {
		if (this.currentHeight() > 0 && this.currentWidth() > 0) {
			this.sizeChanged(this.currentWidth(), this.currentHeight());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::TriggerSizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewCore::ViewInsetsChanged()" />*/
	viewInsetsChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewCore::ViewInsetsChanged()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::BottomInset()" />*/
	bottomInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::BottomInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewCore::TopInset()" />*/
	topInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewCore::TopInset()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewCore::SupportsInsets()" />*/
	supportsInsets: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewCore::SupportsInsets()" />*/
	,
	$type: new $.ig.Type('CPViewCore', $.ig.NativePanel.prototype.$type, [$.ig.AnimationHelperDelegate.prototype.$type, $.ig.FocusableElementDelegate.prototype.$type, $.ig.CPSectionContainer.prototype.$type, $.ig.ICPViewCore.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPViewCore" />*/

/*<BeginType Name="Infragistics.CPViewBase" />*/

$.ig.util.defType('CPViewBase', 'CPViewCore', {
	init: function () {
		$.ig.CPViewCore.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::Capture(Infragistics.ObjectBlock)" />*/
	capture: function (success) {
		$.ig.NativeUIUtility.prototype.utility().takeScreenshot(this, true, success);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::Capture(Infragistics.ObjectBlock)" />*/
	,
	__dirtyListener: null,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::AddDirtyListener(Infragistics.ExecutionBlock)" />*/
	addDirtyListener: function (listener) {
		this.__dirtyListener = listener;
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::AddDirtyListener(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::MarkViewAsDirty()" />*/
	markViewAsDirty: function () {
		if (this.__dirtyListener != null) {
			this.__dirtyListener();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::MarkViewAsDirty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::RemoveDirtyListener()" />*/
	removeDirtyListener: function () {
		this.__dirtyListener = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::RemoveDirtyListener()" />*/
	,
	_smallDraggingMode: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewBase::SmallDraggingMode()" />*/
	smallDraggingMode: function (value) {
		if (arguments.length === 1) {
			this._smallDraggingMode = value;
			return value;
		} else {
			return this._smallDraggingMode;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewBase::SmallDraggingMode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::EnableExternalDropSupport()" />*/
	enableExternalDropSupport: function () {
		var $self = this;
		if (this.__dropTargetViews == null) {
			this.__dropTargetViews = new $.ig.Array();
			this.__dropTargetLookup = new $.ig.Dictionary(0);
			this.enableDrop();
			this.enableDragOver();
			this.addDragEnterHandler(function () {
				$self.externalDragEnter();
			});
			this.addDragLeaveHandler(function (x, y) {
				$self.externalDragLeave(x, y);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::EnableExternalDropSupport()" />*/
	,
	__dropTargetLookup: null,
	__dropTargetViews: null,
	/*<BeginMethod Name="System.String Infragistics.CPViewBase::RegisterExternalDropTargetView(System.String, Infragistics.CPExternalDropHandler)" />*/
	registerExternalDropTargetView: function (title, dropHandler) {
		return this.registerExternalDropTargetView1(null, null, title, dropHandler);
	}
	/*<EndMethod Name="System.String Infragistics.CPViewBase::RegisterExternalDropTargetView(System.String, Infragistics.CPExternalDropHandler)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPViewBase::RegisterExternalDropTargetView(System.String, Infragistics.PathIcon, System.String, Infragistics.CPExternalDropHandler)" />*/
	registerExternalDropTargetView1: function (identifer, normal, title, dropHandler) {
		var $self = this;
		if (this.__dropTargetViews == null) {
			this.enableExternalDropSupport();
		}
		var targetView = new $.ig.CPDropTargetDisplayView(identifer, normal, title);
		targetView.dropHandler(dropHandler);
		var dropId = targetView.identifier();
		this.__dropTargetLookup.item(dropId, targetView);
		this.__dropTargetViews.add(dropId);
		targetView.isHidden(true);
		targetView.enableDrop();
		targetView.enableDragOver();
		targetView.addDropHandler(function (o) {
			$self.externalDrop(dropId, o);
		});
		targetView.addDragLeaveHandler(function (x, y) {
			$self.dropTargetViewLeave(dropId, x, y);
		});
		targetView.addDraggingOverHanlder(function () {
			$self.dropTargetViewEnter(dropId);
		});
		this.externalDropTargetViewParent().addSubview(targetView);
		return dropId;
	}
	/*<EndMethod Name="System.String Infragistics.CPViewBase::RegisterExternalDropTargetView(System.String, Infragistics.PathIcon, System.String, Infragistics.CPExternalDropHandler)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::DropTargetViewLeave(System.String, System.Int32, System.Int32)" />*/
	dropTargetViewLeave: function (dropId, x, y) {
		this.externalDragLeave(x, y);
		this.setIsOverForDropTargetView(dropId, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::DropTargetViewLeave(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::DropTargetViewEnter(System.String)" />*/
	dropTargetViewEnter: function (dropId) {
		this.stopDragLeaveTimer();
		this.setIsOverForDropTargetView(dropId, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::DropTargetViewEnter(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::SetIsOverForDropTargetView(System.String, System.Boolean)" />*/
	setIsOverForDropTargetView: function (dropId, isOver) {
		var target = this.__dropTargetLookup.item(dropId);
		target.setIsOver(isOver);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::SetIsOverForDropTargetView(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::UnregisterDropTargetView(System.String)" />*/
	unregisterDropTargetView: function (identifier) {
		if (this.__dropTargetLookup != null && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__dropTargetLookup, identifier)) {
			this.__dropTargetViews.removeItem(identifier);
			var targetView = this.__dropTargetLookup.item(identifier);
			$.ig.NativeDictionaryUtility.prototype.removeValue(this.__dropTargetLookup, identifier);
			this.externalDropTargetViewParent().removeSubview(targetView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::UnregisterDropTargetView(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDragEnter()" />*/
	externalDragEnter: function () {
		this.externalDragEntered();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDragEnter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDragLeave(System.Int32, System.Int32)" />*/
	externalDragLeave: function (x, y) {
		this.externalDragLeft();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDragLeave(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDrop(System.String, System.Object)" />*/
	externalDrop: function (dropId, o) {
		var dropTarget = this.__dropTargetLookup.item(dropId);
		if (dropTarget != null) {
			this.externalDropped(dropTarget, o);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDrop(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::SetDropTargetsHidden(System.Boolean)" />*/
	setDropTargetsHidden: function (hidden) {
		for (var i = 0; i < this.__dropTargetViews.length; i++) {
			var dropId = this.__dropTargetViews[i];
			var target = this.__dropTargetLookup.item(dropId);
			target.isHidden(hidden);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::SetDropTargetsHidden(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::BringDropTargetsToFront()" />*/
	bringDropTargetsToFront: function () {
		if (this.__dropTargetViews != null) {
			for (var i = 0; i < this.__dropTargetViews.length; i++) {
				var dropId = this.__dropTargetViews[i];
				var target = this.__dropTargetLookup.item(dropId);
				target.bringToFront();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::BringDropTargetsToFront()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDragEntered()" />*/
	externalDragEntered: function () {
		this.stopDragLeaveTimer();
		this.setDropTargetsHidden(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDragEntered()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::StopDragLeaveTimer()" />*/
	stopDragLeaveTimer: function () {
		if (this.__delayDragHideTimer != null) {
			this.__delayDragHideTimer.stop();
			this.__delayDragHideTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::StopDragLeaveTimer()" />*/
	,
	__delayDragHideTimer: null,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDragLeft()" />*/
	externalDragLeft: function () {
		var $self = this;
		if (this.__delayDragHideTimer == null) {
			this.__delayDragHideTimer = new $.ig.CPTimer();
			this.__delayDragHideTimer.startAndFireOnce(0.1, function () {
				$self.setDropTargetsHidden(true);
				$self.stopDragLeaveTimer();
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDragLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::ExternalDropped(Infragistics.CPDropTargetDisplayView, System.Object)" />*/
	externalDropped: function (dropTarget, o) {
		this.setDropTargetsHidden(true);
		if (dropTarget != null && dropTarget.dropHandler() != null && o != null) {
			dropTarget.dropHandler().handleDroppedObject(dropTarget.identifier(), o);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::ExternalDropped(Infragistics.CPDropTargetDisplayView, System.Object)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewBase::CustomLayoutExteranlDropTargetView()" />*/
	customLayoutExteranlDropTargetView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewBase::CustomLayoutExteranlDropTargetView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPViewBase::ExternalDropTargetViewParent()" />*/
	externalDropTargetViewParent: function () {
		return this;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPViewBase::ExternalDropTargetViewParent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewCore.prototype.sizeChanged.call(this, w, h);
		if (!this.customLayoutExteranlDropTargetView() && this.__dropTargetViews != null) {
			this.layoutDropTargetView(0, 0, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::LayoutDropTargetView(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutDropTargetView: function (x, y, w, h) {
		if (this.__dropTargetViews != null && this.__dropTargetViews.length > 0) {
			var partHeight = ($.ig.intDivide(h, this.__dropTargetViews.length));
			for (var i = 0; i < this.__dropTargetViews.length; i++) {
				var dropId = this.__dropTargetViews[i];
				var target = this.__dropTargetLookup.item(dropId);
				this.externalDropTargetViewParent().measureView1(target, x, y, w, partHeight, 0.9);
				y += partHeight;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::LayoutDropTargetView(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewBase::SetDropTargetCornerRadius(System.Double)" />*/
	setDropTargetCornerRadius: function (cornerRadius) {
		if (this.__dropTargetViews != null && this.__dropTargetViews.length > 0) {
			for (var i = 0; i < this.__dropTargetViews.length; i++) {
				var dropId = this.__dropTargetViews[i];
				var target = this.__dropTargetLookup.item(dropId);
				target.setCornerRadius(cornerRadius);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewBase::SetDropTargetCornerRadius(System.Double)" />*/
	,
	$type: new $.ig.Type('CPViewBase', $.ig.CPViewCore.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPViewBase" />*/

/*<BeginType Name="Infragistics.CPImageView" />*/

$.ig.util.defType('CPImageView', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.CPImageView::CreateElement()" />*/
	createElement: function () {
		return $("<div></div>");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.CPImageView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImageView::SetImage(System.Html.Element)" />*/
	setImage: function (element) {
		while (this._element[0].firstChild != null) {
			this._element[0].removeChild(this._element[0].firstChild);
		}
		if (element != null) {
			if ($.ig.CPStringUtility.prototype.areStringsEqual(element.tagName, "IMG")) {
				var clonedElement = element.cloneNode(true);
				this._element[0].appendChild(clonedElement);
			} else {
				this._element[0].appendChild(element);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPImageView::SetImage(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImageView::SetImageVerticalAlignment(Infragistics.ImageVerticalAlignment)" />*/
	setImageVerticalAlignment: function (alignment) {
		if (alignment == $.ig.ImageVerticalAlignment.prototype.center) {
		} else if (alignment == $.ig.ImageVerticalAlignment.prototype.top) {
		} else if (alignment == $.ig.ImageVerticalAlignment.prototype.bottom) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPImageView::SetImageVerticalAlignment(Infragistics.ImageVerticalAlignment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImageView::SetImageHorizontalAlignment(Infragistics.ImageHorizontalAlignment)" />*/
	setImageHorizontalAlignment: function (alignment) {
		if (alignment == $.ig.ImageHorizontalAlignment.prototype.center) {
		} else if (alignment == $.ig.ImageHorizontalAlignment.prototype.left) {
		} else if (alignment == $.ig.ImageHorizontalAlignment.prototype.right) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPImageView::SetImageHorizontalAlignment(Infragistics.ImageHorizontalAlignment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImageView::StopImageAnimation(System.Boolean)" />*/
	stopImageAnimation: function (moveToFinalPosition) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPImageView::StopImageAnimation(System.Boolean)" />*/
	,
	$type: new $.ig.Type('CPImageView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPImageView" />*/

/*<BeginType Name="Infragistics.CPLabel" />*/

$.ig.util.defType('CPLabel', 'NativePanel', {
	__font: null,
	__fontSize: 0,
	__text: null,
	__wrap: false,
	__labelCw: 0,
	__labelCh: 0,
	__textAlignSet: false,
	__preserveWhitespace: false,
	init: function () {
		$.ig.NativePanel.prototype.init.call(this);
		this.__clip = false;
		this.__wrap = false;
		this.__numberOfLinesToClipBy = 2;
		this.__textAlignSet = false;
		this.__fontSize = 12;
		this._element[0].style.display = "inline-block";
		this.ensureWhitespace();
		this._element.css("pointer-events", "none");
		this.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
	},
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::AttachEvents()" />*/
	attachEvents: function () {
		$.ig.NativePanel.prototype.attachEvents.call(this);
		this._element.attr('unselectable', 'on').css({ 'user-select': 'none', 'MozUserSelect': 'none' }).on('selectstart', false).css( 'cursor', 'default' );
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::AttachEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetText(System.String)" />*/
	setText: function (text) {
		this.__hasStyledText = false;
		this.__styledInnerHtml = null;
		this.__text = text;
		if (text == null) {
			text = "";
		}
		this._element[0].innerText = text;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetText(System.String)" />*/
	,
	__hasStyledText: false,
	__styledInnerHtml: null,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetStyledText(Infragistics.CPList)" />*/
	setStyledText: function (text) {
		this.__text = null;
		this._element[0].innerText = null;
		this.__styledInnerHtml = null;
		if (text != null && text.length > 0) {
			var innerHMTL = "";
			for (var i = 0; i < text.length; i++) {
				var block = text[i];
				innerHMTL += "<span";
				if (block.hasStyle()) {
					innerHMTL += " style=\"";
					if (block.font() != null) {
						innerHMTL += "font-family:" + block.font() + ";";
					}
					if (block.foreground() != 0) {
						innerHMTL += "color:" + $.ig.ColorUtility.prototype.convertToNative(block.foreground()) + ";";
					}
					if (block.background() != 0) {
						innerHMTL += "background-color:" + $.ig.ColorUtility.prototype.convertToNative(block.foreground()) + ";";
					}
					innerHMTL += "\"";
				}
				innerHMTL += "/>" + block.text() + "</span>";
			}
			this.__styledInnerHtml = innerHMTL;
			this._element[0].innerHTML = innerHMTL;
			this.__hasStyledText = true;
		} else {
			this.__hasStyledText = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetStyledText(Infragistics.CPList)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLabel::PreserveWhitespace()" />*/
	preserveWhitespace: function (value) {
		if (arguments.length === 1) {
			this.__preserveWhitespace = value;
			this.ensureWhitespace();
			return value;
		} else {
			return this.__preserveWhitespace;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLabel::PreserveWhitespace()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::EnsureWhitespace()" />*/
	ensureWhitespace: function () {
		if (!this.__wrap) {
			if (this.__preserveWhitespace) {
				this._element[0].style.whiteSpace = "pre";
			} else {
				this._element[0].style.whiteSpace = "nowrap";
			}
		} else {
			this._element[0].style.whiteSpace = "pre-wrap";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::EnsureWhitespace()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPLabel::GetText()" />*/
	getText: function () {
		return this.__text == null ? "" : this.__text;
	}
	/*<EndMethod Name="System.String Infragistics.CPLabel::GetText()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPLabel::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			this.name(value);
			return value;
		} else {
			return this.name();
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPLabel::AccessibilityName()" />*/
	,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.CPLabel::CreateElement()" />*/
	createElement: function () {
		return $("<span></span>");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.CPLabel::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.__font = font;
		this.__fontSize = fontSize;
		this._element[0].style.font = fontSize + "px " + font;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setFrame: function (x, y, w, h) {
		$.ig.NativePanel.prototype.setFrame.call(this, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLabel::ShouldSetWidth()" />*/
	shouldSetWidth: function () {
		return this.clipToBounds() || this.__clip || this.__wrap || this.__textAlignSet;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLabel::ShouldSetWidth()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLabel::ShouldSetHeight()" />*/
	shouldSetHeight: function () {
		if (this.__clip && this.__wrap) {
			return false;
		}
		return this.clipToBounds() || (!this.__wrap && !this.__textAlignSet);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLabel::ShouldSetHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetTextColor(System.String)" />*/
	setTextColor: function (textColor) {
		this._element[0].style.color = textColor;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPLabel::GetTextColor()" />*/
	getTextColor: function () {
		return this._element[0].style.color;
	}
	/*<EndMethod Name="System.String Infragistics.CPLabel::GetTextColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetTextAlignment(System.Windows.TextAlignment)" />*/
	setTextAlignment: function (alignment) {
		this.__textAlignSet = false;
		var textAlign = "left";
		if (alignment == $.ig.TextAlignment.prototype.center) {
			textAlign = "center";
			this.__textAlignSet = true;
		} else if (alignment == $.ig.TextAlignment.prototype.right) {
			textAlign = "right";
			this.__textAlignSet = true;
		}
		this._element[0].style.textAlign = textAlign;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetTextAlignment(System.Windows.TextAlignment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetOverflow(System.Boolean)" />*/
	setOverflow: function (isHidden) {
		this._element[0].style.overflow = isHidden ? "hidden" : "visible";
		this._element.css("text-overflow", isHidden ? "ellipsis" : "clip");
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetOverflow(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLabel::GetMeasuredWidth()" />*/
	getMeasuredWidth: function () {
		return this.__clip ? $.ig.JSHelperUtility.prototype.utility().measureCeilWidth() : $.ig.JSHelperUtility.prototype.utility().measuredWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLabel::GetMeasuredWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		$.ig.JSHelperUtility.prototype.utility().measureText1(this.__text, this.__styledInnerHtml, this.__font, this.__fontSize, limitWidth);
		this.__labelCw = this.getMeasuredWidth();
		this.__labelCw = Math.min(this.__labelCw, limitWidth);
		this.__labelCh = $.ig.JSHelperUtility.prototype.utility().measuredHeight();
		this.__lastMeasuredText = "";
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit(System.Int32, System.Int32)" />*/
	calculateSizeToFit2: function (limitWidth, limitHeight) {
		$.ig.JSHelperUtility.prototype.utility().measureText2(this.__text, this.__styledInnerHtml, this.__font, this.__fontSize, limitWidth, this.__numberOfLinesToClipBy);
		this.__labelCw = this.getMeasuredWidth();
		this.__labelCw = Math.min(this.__labelCw, limitWidth);
		this.__labelCh = $.ig.JSHelperUtility.prototype.utility().measuredHeight();
		this.__labelCh = Math.min(this.__labelCh, limitHeight);
		this.__lastMeasuredText = "";
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit(System.Int32, System.Int32)" />*/
	,
	__lastInnerHTML: null,
	__lastMeasuredFont: null,
	__lastMeasuredText: null,
	__lastMeasuredFontSize: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		if (this.__lastMeasuredFont != this.__font || (this.__hasStyledText && this.__lastInnerHTML != this.__styledInnerHtml) || (!this.__hasStyledText && this.__lastMeasuredText != this.__text) || this.__lastMeasuredFontSize != this.__fontSize) {
			$.ig.JSHelperUtility.prototype.utility().measureText(this.__text, this.__styledInnerHtml, this.__font, this.__fontSize);
			this.__labelCw = this.getMeasuredWidth();
			this.__labelCh = $.ig.JSHelperUtility.prototype.utility().measuredHeight();
			this.__lastMeasuredFont = this.__font;
			this.__lastMeasuredFontSize = this.__fontSize;
			if (this.__hasStyledText) {
				this.__lastMeasuredText = null;
				this.__lastInnerHTML = this.__styledInnerHtml;
			} else {
				this.__lastMeasuredText = this.__text;
				this.__lastInnerHTML = null;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLabel::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__labelCh;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLabel::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLabel::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__labelCw;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLabel::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPLabel::ResolvePosition()" />*/
	resolvePosition: function () {
		return "absolute";
	}
	/*<EndMethod Name="System.String Infragistics.CPLabel::ResolvePosition()" />*/
	,
	__clip: false,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetTextClipping(System.Boolean)" />*/
	setTextClipping: function (clip) {
		this.__clip = clip;
		if (this.__clip) {
			this.clipToBounds(true);
			this._element.css("text-overflow", "ellipsis");
		} else {
			this._element.css("text-overflow", "initial");
		}
		this.ensureClippingAndWrapping();
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetTextClipping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetStrikethrough(System.Boolean)" />*/
	setStrikethrough: function (val) {
		if (val) {
			this._element.css("text-decoration", "line-through");
		} else {
			this._element.css("text-decoration", "");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetStrikethrough(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetTextWrapping(System.Boolean)" />*/
	setTextWrapping: function (wrap) {
		this.__wrap = wrap;
		if (this.__wrap) {
			this._element.css("overflow-wrap", "break-word");
			this._element.css("word-wrap", "break-word");
		} else {
			this._element.css("overflow-wrap", "initial");
			this._element.css("word-wrap", "initial");
		}
		this.ensureWhitespace();
		this.ensureClippingAndWrapping();
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetTextWrapping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::EnsureClippingAndWrapping()" />*/
	ensureClippingAndWrapping: function () {
		if (this.__wrap && this.__clip) {
			this._element[0].style.display = "-webkit-box";
			this._element.css("-webkit-line-clamp", this.__numberOfLinesToClipBy.toString());
			this._element.css("-webkit-box-orient", "vertical");
		} else {
			this._element[0].style.display = "inline-block";
			this._element.css("-webkit-line-clamp", "");
			this._element.css("-webkit-box-orient", "");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::EnsureClippingAndWrapping()" />*/
	,
	__numberOfLinesToClipBy: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPLabel::SetNumberOfLinesToClipBy(System.Int32)" />*/
	setNumberOfLinesToClipBy: function (val) {
		this.__numberOfLinesToClipBy = val;
		this.ensureClippingAndWrapping();
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabel::SetNumberOfLinesToClipBy(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPLabel', $.ig.NativePanel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLabel" />*/

/*<BeginType Name="Infragistics.InputView" />*/

$.ig.util.defType('InputView', 'NativePanel', {
	init: function () {
		$.ig.NativePanel.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.InputView::CreateElement()" />*/
	createElement: function () {
		return $(this.createElementHtml());
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.InputView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.InputView::CreateElementHtml()" />*/
	createElementHtml: function () {
		var focusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
		if (focusManager != null) {
			return "<input type='text' style='outline:none' tabIndex='-1'></input>";
		}
		return "<input type='text' style='outline:none'></input>";
	}
	/*<EndMethod Name="System.String Infragistics.InputView::CreateElementHtml()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetType(System.String)" />*/
	setType: function (type) {
		this._element[0].type = type;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetType(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (val) {
		this._element[0].setAttribute("readOnly", val);
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this._element[0].style.font = fontSize + "px " + font;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetTextColor(System.String)" />*/
	setTextColor: function (textColor) {
		this._element[0].style.color = textColor;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetTextAlignment(System.String)" />*/
	setTextAlignment: function (textAlign) {
		this._element[0].style.textAlign = textAlign;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetTextAlignment(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetText(System.String)" />*/
	setText: function (text) {
		this._element[0].value = text;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::MoveCaretToTheEnd()" />*/
	moveCaretToTheEnd: function () {
		this._element[0].setSelectionRange(this._element[0].value.length, this._element[0].value.length);
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::MoveCaretToTheEnd()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.InputView::GetText()" />*/
	getText: function () {
		return this._element.val();
	}
	/*<EndMethod Name="System.String Infragistics.InputView::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		this._element[0].style.backgroundColor = color;
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InputView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this._element[0].offsetHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InputView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InputView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this._element[0].offsetWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InputView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SelectAllText()" />*/
	selectAllText: function () {
		this._element[0].setSelectionRange(0, this._element[0].value.length);
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SelectAllText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InputView::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
		this._element[0].setSelectionRange(startIndex, startIndex + length);
	}
	/*<EndMethod Name="System.Void Infragistics.InputView::SelectText(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InputView::GetSelectionStart()" />*/
	getSelectionStart: function () {
		return this._element[0].selectionStart;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InputView::GetSelectionStart()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InputView::GetSelectionEnd()" />*/
	getSelectionEnd: function () {
		return this._element[0].selectionEnd;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InputView::GetSelectionEnd()" />*/
	,
	$type: new $.ig.Type('InputView', $.ig.NativePanel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InputView" />*/

/*<BeginType Name="Infragistics.MultilineInputView" />*/

$.ig.util.defType('MultilineInputView', 'InputView', {
	init: function () {
		$.ig.InputView.prototype.init.call(this);
	},
	__quillWrapper: null,
	__editorContainer: null,
	__editor: null,
	__editorContainerId: null,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.MultilineInputView::CreateElement()" />*/
	createElement: function () {
		if (null == this.__quillWrapper) {
			this.__quillWrapper = new $.ig.QuillWrapper();
		}
		if (null == this.__editorContainer) {
			this.__editorContainer = $(this.createElementHtml());
			this.__editorContainer[0].style.overflow = "auto";
			this.__editorContainer.css("margin", "0px");
			this.__editorContainer.css("white-space", "pre-wrap");
			this.__editorContainer.css("cursor", "text");
			this.__editorContainer.css("overflow-y", "hidden");
		} else {
			console.log('Quill editor container already exists!!!');
		}
		return this.__editorContainer;
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.MultilineInputView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.MultilineInputView::CreateElementHtml()" />*/
	createElementHtml: function () {
		if (null == this.__editorContainerId || "" == this.__editorContainerId) {
			this.__editorContainerId = "Q" + $.ig.NativeStringUtility.prototype.generateUID();
		} else {
			console.log('Quill editor container ID already created!!!');
		}
		return $.ig.NativeStringUtility.prototype.replace("<div id='{id}'></div>", "{id}", this.__editorContainerId);
	}
	/*<EndMethod Name="System.String Infragistics.MultilineInputView::CreateElementHtml()" />*/
	,
	/*<BeginProperty Name="System.JQuery.JQueryObject Infragistics.MultilineInputView::QuillEditor()" />*/
	quillEditor: function () {
		if (null == this.__editor) {
			this.ensureQuill();
			this.__editor = this.__editorContainer.find(".ql-editor");
			this.initializeEditorElement();
		}
		return this.__editor;
	}
	/*<EndProperty Name="System.JQuery.JQueryObject Infragistics.MultilineInputView::QuillEditor()" />*/
	,
	/*<BeginProperty Name="System.Html.Element Infragistics.MultilineInputView::QuillEditorElement()" />*/
	quillEditorElement: function () {
		return this.quillEditor()[0];
	}
	/*<EndProperty Name="System.Html.Element Infragistics.MultilineInputView::QuillEditorElement()" />*/
	,
	/*<BeginProperty Name="System.Html.Element Infragistics.MultilineInputView::QuillEditorContainerElement()" />*/
	quillEditorContainerElement: function () {
		this.ensureQuill();
		return this.__editorContainer[0];
	}
	/*<EndProperty Name="System.Html.Element Infragistics.MultilineInputView::QuillEditorContainerElement()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.MultilineInputView::QuillEditorContainerId()" />*/
	quillEditorContainerId: function () {
		this.ensureQuill();
		return this.__editorContainerId;
	}
	/*<EndProperty Name="System.String Infragistics.MultilineInputView::QuillEditorContainerId()" />*/
	,
	/*<BeginProperty Name="Infragistics.QuillWrapper Infragistics.MultilineInputView::Quill()" />*/
	quill: function () {
		this.ensureQuill();
		return this.__quillWrapper;
	}
	/*<EndProperty Name="Infragistics.QuillWrapper Infragistics.MultilineInputView::Quill()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::EnsureQuill()" />*/
	ensureQuill: function () {
		this.__quillWrapper.initializeQuill(this.__editorContainer[0], this.__editorContainerId);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::EnsureQuill()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::InitializeEditorElement()" />*/
	initializeEditorElement: function () {
		if (null != this.__editor) {
			this.__editor[0].style.padding = "0px";
			this.__editor[0].style.overflowY = "hidden";
			this.__editor[0].setAttribute("tabIndex", 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::InitializeEditorElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (val) {
		this.ensureQuill();
		this.__quillWrapper.setReadOnly(val);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this._element[0].style.font = fontSize + "px " + font;
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetTextColor(System.String)" />*/
	setTextColor: function (textColor) {
		this._element[0].style.color = textColor;
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetTextAlignment(System.String)" />*/
	setTextAlignment: function (textAlign) {
		this.ensureQuill();
		this.__quillWrapper.setTextAlignment(textAlign);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetTextAlignment(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetText(System.String)" />*/
	setText: function (text) {
		this.ensureQuill();
		this.__quillWrapper.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::MoveCaretToTheEnd()" />*/
	moveCaretToTheEnd: function () {
		this.ensureQuill();
		this.__quillWrapper.moveCaretToTheEnd();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::MoveCaretToTheEnd()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.MultilineInputView::GetText()" />*/
	getText: function () {
		this.ensureQuill();
		return this.__quillWrapper.getText();
	}
	/*<EndMethod Name="System.String Infragistics.MultilineInputView::GetText()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.MultilineInputView::GetTextInRange(System.Int32, System.Int32)" />*/
	getTextInRange: function (startIndex, length) {
		this.ensureQuill();
		return this.__quillWrapper.getTextInRange(startIndex, length);
	}
	/*<EndMethod Name="System.String Infragistics.MultilineInputView::GetTextInRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SelectAllText()" />*/
	selectAllText: function () {
		this.ensureQuill();
		this.__quillWrapper.selectAllText();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SelectAllText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
		this.ensureQuill();
		this.__quillWrapper.selectText(startIndex, length);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SelectText(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.MultilineInputView::GetSelectionStart()" />*/
	getSelectionStart: function () {
		this.ensureQuill();
		return this.__quillWrapper.getSelectionStart();
	}
	/*<EndMethod Name="System.Int32 Infragistics.MultilineInputView::GetSelectionStart()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.MultilineInputView::GetSelectionEnd()" />*/
	getSelectionEnd: function () {
		this.ensureQuill();
		return this.__quillWrapper.getSelectionEnd();
	}
	/*<EndMethod Name="System.Int32 Infragistics.MultilineInputView::GetSelectionEnd()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetHintText(System.String)" />*/
	setHintText: function (text) {
		this.ensureQuill();
		this.__quillWrapper.setPlaceholderText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetHintText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.MultilineInputView::GetDoesSelectionContainFormat(System.String)" />*/
	getDoesSelectionContainFormat: function (format) {
		this.ensureQuill();
		return this.__quillWrapper.getDoesSelectionContainFormat(format);
	}
	/*<EndMethod Name="System.Boolean Infragistics.MultilineInputView::GetDoesSelectionContainFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.MultilineInputView::GetDoesSelectionContainFormat(System.String, System.Int32, System.Int32)" />*/
	getDoesSelectionContainFormat1: function (format, startIndex, length) {
		this.ensureQuill();
		return this.__quillWrapper.getDoesSelectionContainFormat1(format, startIndex, length);
	}
	/*<EndMethod Name="System.Boolean Infragistics.MultilineInputView::GetDoesSelectionContainFormat(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.MultilineInputView::GetFormatsInSelection()" />*/
	getFormatsInSelection: function () {
		this.ensureQuill();
		return this.__quillWrapper.getFormatsInSelection();
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.MultilineInputView::GetFormatsInSelection()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.MultilineInputView::GetFormatsInSelection(System.Int32, System.Int32)" />*/
	getFormatsInSelection1: function (startIndex, length) {
		this.ensureQuill();
		return this.__quillWrapper.getFormatsInSelection1(startIndex, length);
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.MultilineInputView::GetFormatsInSelection(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::ToggleFormatInSelection(System.String)" />*/
	toggleFormatInSelection: function (format) {
		this.ensureQuill();
		this.__quillWrapper.toggleFormatInSelection(format);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::ToggleFormatInSelection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::Focus()" />*/
	focus: function () {
		this.ensureQuill();
		this.__quillWrapper.focus();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::Focus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::Blur()" />*/
	blur: function () {
		this.ensureQuill();
		this.__quillWrapper.blur();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::Blur()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.MultilineInputView::HasFocus()" />*/
	hasFocus: function () {
		this.ensureQuill();
		return this.__quillWrapper.hasFocus();
	}
	/*<EndMethod Name="System.Boolean Infragistics.MultilineInputView::HasFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.MultilineInputView::GetIsEnabled()" />*/
	getIsEnabled: function () {
		this.ensureQuill();
		return this.__quillWrapper.getIsEnabled();
	}
	/*<EndMethod Name="System.Boolean Infragistics.MultilineInputView::GetIsEnabled()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::UpdateQuill()" />*/
	updateQuill: function () {
		this.ensureQuill();
		this.__quillWrapper.update();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::UpdateQuill()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.MultilineInputView::GetRichTextFormattingBlocks()" />*/
	getRichTextFormattingBlocks: function () {
		this.ensureQuill();
		return this.__quillWrapper.getRichTextFormattingBlocks();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.MultilineInputView::GetRichTextFormattingBlocks()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetTextFormatsAndAttributes(Infragistics.CPList, Infragistics.CPDictionary, System.Int32, System.Int32)" />*/
	setTextFormatsAndAttributes: function (formats, attributes, offset, length) {
		this.ensureQuill();
		this.__quillWrapper.setTextFormatsAndAttributes(formats, attributes, offset, length);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetTextFormatsAndAttributes(Infragistics.CPList, Infragistics.CPDictionary, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::RemoveAllFormatting()" />*/
	removeAllFormatting: function () {
		this.ensureQuill();
		this.__quillWrapper.removeAllFormatting();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::RemoveAllFormatting()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::RemoveFormattingInRange(System.Int32, System.Int32)" />*/
	removeFormattingInRange: function (startIndex, length) {
		this.ensureQuill();
		this.__quillWrapper.removeFormattingInRange(startIndex, length);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::RemoveFormattingInRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::RemoveFormat(System.String, System.Int32, System.Int32)" />*/
	removeFormat: function (format, startIndex, length) {
		this.ensureQuill();
		this.__quillWrapper.removeFormat(format, startIndex, length);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::RemoveFormat(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsInSelection(Infragistics.CPDictionary, System.Boolean)" />*/
	setFormatsInSelection: function (formats, removeExistingFormats) {
		this.ensureQuill();
		this.__quillWrapper.setFormatsInSelection(formats, removeExistingFormats);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsInSelection(Infragistics.CPDictionary, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsInSelection(System.Int32, System.Int32, Infragistics.CPDictionary, System.Boolean)" />*/
	setFormatsInSelection1: function (startIndex, length, formats, removeExistingFormats) {
		this.ensureQuill();
		this.__quillWrapper.setFormatsInSelection1(startIndex, length, formats, removeExistingFormats);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsInSelection(System.Int32, System.Int32, Infragistics.CPDictionary, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsAtCaret(Infragistics.CPDictionary)" />*/
	setFormatsAtCaret: function (formats) {
		this.ensureQuill();
		this.__quillWrapper.setFormatsAtCaret(formats);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetFormatsAtCaret(Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::SetScrollingContainer(System.Html.Element)" />*/
	setScrollingContainer: function (quillScrollingContainer) {
		this.__editor = null;
		this.__quillWrapper.setScrollingContainer(quillScrollingContainer);
		this.initializeEditorElement();
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::SetScrollingContainer(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::AttachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	attachTextChangedEvent: function (textChangedBlock) {
		this.ensureQuill();
		this.__quillWrapper.attachTextChangedEvent(textChangedBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::AttachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::DetachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	detachTextChangedEvent: function (textChangedBlock) {
		this.ensureQuill();
		this.__quillWrapper.detachTextChangedEvent(textChangedBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::DetachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::AttachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	attachSelectionChangedEvent: function (selectionChangedBlock) {
		this.ensureQuill();
		this.__quillWrapper.attachSelectionChangedEvent(selectionChangedBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::AttachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::DetachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	detachSelectionChangedEvent: function (selectionChangedBlock) {
		this.ensureQuill();
		this.__quillWrapper.detachSelectionChangedEvent(selectionChangedBlock);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::DetachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::RegisterEnterKeyPressed(Infragistics.QuillCancellableEnterPressedBlock)" />*/
	registerEnterKeyPressed: function (block) {
		this.__quillWrapper.registerEnterKeyPressed(block);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::RegisterEnterKeyPressed(Infragistics.QuillCancellableEnterPressedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.MultilineInputView::RegisterToggleTextFormat(Infragistics.QuillToggleTextFormatBlock)" />*/
	registerToggleTextFormat: function (block) {
		this.__quillWrapper.registerToggleTextFormat(block);
	}
	/*<EndMethod Name="System.Void Infragistics.MultilineInputView::RegisterToggleTextFormat(Infragistics.QuillToggleTextFormatBlock)" />*/
	,
	$type: new $.ig.Type('MultilineInputView', $.ig.InputView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.MultilineInputView" />*/

/*<BeginType Name="Infragistics.CPTextViewBase" />*/

$.ig.util.defType('CPTextViewBase', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__keyboardDelegate: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::Setup()" />*/
	setup: function () {
		$.ig.CPViewBase.prototype.setup.call(this);
		this.textBoxPadding($.ig.ThemeManager.prototype.theme().padding5());
		this.keyboardResizeMode($.ig.CPTextViewOnScreenKeyboardResizeMode.prototype.moveWindow);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::ArrowKeyPressed()" />*/
	arrowKeyPressed: function () {
		if (null != this.__selectionChangedBlock) {
			this.__selectionChangedBlock(this.__currentRange);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::ArrowKeyPressed()" />*/
	,
	_textViewRegistrationId: null,
	/*<BeginProperty Name="System.String Infragistics.CPTextViewBase::TextViewRegistrationId()" />*/
	textViewRegistrationId: function (value) {
		if (arguments.length === 1) {
			this._textViewRegistrationId = value;
			return value;
		} else {
			return this._textViewRegistrationId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextViewBase::TextViewRegistrationId()" />*/
	,
	_textViewGroup: null,
	/*<BeginProperty Name="System.String Infragistics.CPTextViewBase::TextViewGroup()" />*/
	textViewGroup: function (value) {
		if (arguments.length === 1) {
			this._textViewGroup = value;
			return value;
		} else {
			return this._textViewGroup;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextViewBase::TextViewGroup()" />*/
	,
	_keyboardResizeMode: 0,
	/*<BeginProperty Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode Infragistics.CPTextViewBase::KeyboardResizeMode()" />*/
	keyboardResizeMode: function (value) {
		if (arguments.length === 1) {
			this._keyboardResizeMode = value;
			return value;
		} else {
			return this._keyboardResizeMode;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode Infragistics.CPTextViewBase::KeyboardResizeMode()" />*/
	,
	_textBoxPadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextViewBase::TextBoxPadding()" />*/
	textBoxPadding: function (value) {
		if (arguments.length === 1) {
			this._textBoxPadding = value;
			return value;
		} else {
			return this._textBoxPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextViewBase::TextBoxPadding()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTextViewKeyboardDelegate Infragistics.CPTextViewBase::KeyboardDelegate()" />*/
	keyboardDelegate: function (value) {
		if (arguments.length === 1) {
			this.__keyboardDelegate = value;
			return value;
		} else {
			return this.__keyboardDelegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextViewKeyboardDelegate Infragistics.CPTextViewBase::KeyboardDelegate()" />*/
	,
	__isReadOnly: false,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (val) {
		this.__isReadOnly = val;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextViewBase::GetIsReadOnly()" />*/
	getIsReadOnly: function () {
		return this.__isReadOnly;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextViewBase::GetIsReadOnly()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::SelectText(System.Int32, System.Int32)" />*/
	,
	__selectionChangedBlock: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::RegisterSelectionChanged(Infragistics.RangeBlock)" />*/
	registerSelectionChanged: function (block) {
		this.__selectionChangedBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::RegisterSelectionChanged(Infragistics.RangeBlock)" />*/
	,
	__editorParentScrollView: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::RegisterScrollView(Infragistics.CPScrollView)" />*/
	registerScrollView: function (scrollView) {
		this.__editorParentScrollView = scrollView;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::RegisterScrollView(Infragistics.CPScrollView)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPScrollView Infragistics.CPTextViewBase::EditorParentScrollView()" />*/
	editorParentScrollView: function () {
		return this.__editorParentScrollView;
	}
	/*<EndProperty Name="Infragistics.CPScrollView Infragistics.CPTextViewBase::EditorParentScrollView()" />*/
	,
	__prevLoc: 0,
	__prevLen: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::HandleSelectionChangeForScrollView(System.Int32, System.Int32)" />*/
	handleSelectionChangeForScrollView: function (loc, length) {
		if (this.__editorParentScrollView != null && this.__editorParentScrollView.currentHeight() > 0) {
			var parent = this.__editorParentScrollView.getParent();
			var p;
			if (loc == this.__prevLoc && length > this.__prevLen) {
				p = this.translatePointOfCursorToView(loc + length, parent);
			} else {
				p = this.translatePointOfCurrentCurrsorToView(parent);
			}
			this.__prevLoc = loc;
			this.__prevLen = length;
			if (p._y > (this.__editorParentScrollView.currentY() + this.__editorParentScrollView.currentHeight())) {
				var diff = (this.__editorParentScrollView.currentY() + this.__editorParentScrollView.currentHeight()) - $.ig.truncate(p._y);
				this.__editorParentScrollView.scrollTo(0, this.__editorParentScrollView.getContentOffsetY() - diff + $.ig.NativeUIUtility.prototype.utility().densify(10));
			} else if (p._y < this.__editorParentScrollView.currentY()) {
				var diff1 = this.__editorParentScrollView.currentY() - $.ig.truncate(p._y);
				this.__editorParentScrollView.scrollTo(0, this.__editorParentScrollView.getContentOffsetY() - diff1 - $.ig.NativeUIUtility.prototype.utility().densify(10));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::HandleSelectionChangeForScrollView(System.Int32, System.Int32)" />*/
	,
	__currentRange: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::NotifiSelectionChanged(System.Int32, System.Int32)" />*/
	notifiSelectionChanged: function (loc, length) {
		var newRange = false;
		if (this.__currentRange == null) {
			this.__currentRange = new $.ig.CPRange(loc, length);
			newRange = true;
		} else {
			if (this.__currentRange._location != loc || this.__currentRange._length != length) {
				this.__currentRange._location = loc;
				this.__currentRange._length = length;
				newRange = true;
			}
		}
		if (newRange) {
			this.handleSelectionChangeForScrollView(loc, length);
			if (this.__selectionChangedBlock != null) {
				this.__selectionChangedBlock(this.__currentRange);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::NotifiSelectionChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPRange Infragistics.CPTextViewBase::CurrentSelectionRange()" />*/
	currentSelectionRange: function () {
		return this.__currentRange;
	}
	/*<EndProperty Name="Infragistics.CPRange Infragistics.CPTextViewBase::CurrentSelectionRange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::ResetCachedCurrentRange()" />*/
	resetCachedCurrentRange: function () {
		this.__currentRange = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::ResetCachedCurrentRange()" />*/
	,
	__characterListeners: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::RegisterCharacterListener(System.String, Infragistics.StringBlock)" />*/
	registerCharacterListener: function (character, callback) {
		if (this.__characterListeners == null) {
			this.__characterListeners = new $.ig.Dictionary(0);
		}
		this.__characterListeners.item(character, callback);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::RegisterCharacterListener(System.String, Infragistics.StringBlock)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextViewBase::HasCharacterListener()" />*/
	hasCharacterListener: function () {
		return this.__everyCharacterListener != null || (this.__characterListeners != null && this.__characterListeners.count() > 0);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextViewBase::HasCharacterListener()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::CharacterPressed(System.String)" />*/
	characterPressed: function (character) {
		if (this.__everyCharacterListener != null) {
			this.__everyCharacterListener(character);
		}
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__characterListeners, character)) {
			var action = this.__characterListeners.item(character);
			action(character);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::CharacterPressed(System.String)" />*/
	,
	__everyCharacterListener: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::RegisterEveryCharacterPressed(Infragistics.StringBlock)" />*/
	registerEveryCharacterPressed: function (callback) {
		this.__everyCharacterListener = callback;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::RegisterEveryCharacterPressed(Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::UnregisterEveryCharacterPressed()" />*/
	unregisterEveryCharacterPressed: function () {
		this.__everyCharacterListener = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::UnregisterEveryCharacterPressed()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextViewBase::CapturesKey(Infragistics.CPKeyCombo)" />*/
	capturesKey: function (combo) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextViewBase::CapturesKey(Infragistics.CPKeyCombo)" />*/
	,
	__externalCommands: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::SetKeyboardCommands(Infragistics.CPList)" />*/
	setKeyboardCommands: function (commands) {
		this.__externalCommands = commands;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::SetKeyboardCommands(Infragistics.CPList)" />*/
	,
	_allowOutsideKeyCommandsAtSameLevel: false,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextViewBase::GetSupportedKeyCommands(System.Boolean)" />*/
	getSupportedKeyCommands1: function (isTopMostManager) {
		if (this.__externalCommands != null) {
			return this.__externalCommands;
		}
		return new $.ig.Array();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextViewBase::GetSupportedKeyCommands(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPTextViewBase::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	translatePointOfCursorToView: function (cursorPosition, view) {
		return new $.ig.CPPoint(0, 0);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPTextViewBase::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPTextViewBase::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	translatePointOfCurrentCurrsorToView: function (view) {
		return new $.ig.CPPoint(0, 0);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPTextViewBase::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewBase::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		this.__editorParentScrollView = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewBase::Unload()" />*/
	,
	$type: new $.ig.Type('CPTextViewBase', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextViewBase" />*/

/*<BeginType Name="Infragistics.CPTextView" />*/

$.ig.util.defType('CPTextView', 'CPTextViewBase', {
	init: function () {
		$.ig.CPTextViewBase.prototype.init.call(this);
	},
	__label: null,
	__textBox: null,
	__textChangedBlock: null,
	__gotFocusBlock: null,
	__lostFocusBlock: null,
	__enterKeyPressed: null,
	__escKeyPressed: null,
	__pasteEventBlock: null,
	__font: null,
	__fontSize: 0,
	__hasFocus: false,
	__isTextDirty: false,
	__valueTrimming: false,
	__background: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::Setup()" />*/
	setup: function () {
		$.ig.CPTextViewBase.prototype.setup.call(this);
		this.__hasFocus = false;
		this.__valueTrimming = false;
		this.isFocusable(true);
		this.__background = new $.ig.CPViewBase();
		this.addSubview(this.__background);
		this.addChildViews();
		this.__textBox = this.createInputView();
		this.__textBox.setBackgroundColor("transparent");
		this.__textBox._element[0].style.border = "0";
		this.addSubview(this.__textBox);
		this.__label.bringToFront();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetOnLongPressBlock(Infragistics.ExecutionBlock)" />*/
	setOnLongPressBlock: function (value) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetOnLongPressBlock(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (val) {
		this.__textBox.setReadOnly(val);
		$.ig.CPTextViewBase.prototype.setReadOnly.call(this, val);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::TurnOnValueTrimming()" />*/
	turnOnValueTrimming: function () {
		this.__valueTrimming = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::TurnOnValueTrimming()" />*/
	,
	/*<BeginProperty Name="System.JQuery.JQueryObject Infragistics.CPTextView::ElementForFocus()" />*/
	elementForFocus: function () {
		return this.__textBox._element;
	}
	/*<EndProperty Name="System.JQuery.JQueryObject Infragistics.CPTextView::ElementForFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::AttachEvents()" />*/
	attachEvents: function () {
		var $self = this;
		$.ig.CPTextViewBase.prototype.attachEvents.call(this);
		this.elementForFocus().unbind("focus");
		this.elementForFocus().focus(function (e) {
			$self.textBox_GotFocus();
			$self.selectionChanged();
		});
		this.elementForFocus().unbind("focusout");
		this.elementForFocus().focusout(function (e) {
			$self.textBox_LostFocus();
		});
		this.attachTextChangedEvent();
		this.__textBox._element.unbind("paste");
		this.__textBox._element.on("paste", function (e) {
			$self.onPaste(e);
		});
		this.__textBox._element.unbind("keydown");
		this.__textBox._element.keydown(function (e) {
			var key = e.which;
			if (key == 13 && !e.shiftKey) {
				e.stopPropagation();
				e.preventDefault();
				$self.enterPressed();
			}
			if ($self.hasCharacterListener()) {
				$self.__lastKeyDownChar = e.key;
			}
		});
		this.__textBox._element.unbind("keyup");
		this.__textBox._element.keyup(function (e) {
			var key = e.which;
			$self.__isTextDirty = true;
			if (key == 27) {
				if ($self.__escKeyPressed != null) {
					$self.__escKeyPressed();
				}
			}
			if (key == 37 || key == 38 || key == 39 || key == 40) {
				$self.arrowKeyPressed();
			}
			if ($self.hasCharacterListener()) {
				var character = $self.__lastKeyDownChar;
				$self.characterPressed(character);
			}
		});
		this._element.unbind("mousedown");
		this._element.mousedown(function (e) {
			e.stopPropagation();
		});
		this._element.unbind("mouseup");
		this._element.mouseup(function (e) {
			$self.selectionChanged();
		});
		this.attachSelectionChangedEvent();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::AttachEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::AttachTextChangedEvent()" />*/
	attachTextChangedEvent: function () {
		var $self = this;
		this.__textBox._element.unbind("input");
		this.__textBox._element.on("input", function (e) {
			$self.textChanged();
			$self.selectionChanged();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::AttachTextChangedEvent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::AttachSelectionChangedEvent()" />*/
	attachSelectionChangedEvent: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::AttachSelectionChangedEvent()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextView::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPTextViewBase.prototype.getSupportedKeyCommands.call(this);
		if (this.disableNewLines()) {
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, null, $.ig.Key.prototype.enter, false, true, false), function (k) {
				$self.enterPressed();
			}));
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, null, $.ig.Key.prototype.enter, true, false, false), function (k) {
				$self.enterPressed();
			}));
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, null, $.ig.Key.prototype.enter, true, true, false), function (k) {
				$self.enterPressed();
			}));
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, null, $.ig.Key.prototype.enter, false, false, true), function (k) {
				$self.enterPressed();
			}));
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextView::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::EnterPressed()" />*/
	enterPressed: function () {
		if (this.__enterKeyPressed != null) {
			this.__enterKeyPressed();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::EnterPressed()" />*/
	,
	__lastKeyDownChar: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::OnPaste(System.JQuery.JQueryEvent)" />*/
	onPaste: function (e) {
		
			var clipboardData = e.originalEvent.clipboardData
			if (clipboardData)
			{
				items = clipboardData.items
				var foundImage = false;

                // [JM] 10-29-20 Changed this logic around to look for Text formats before Image formats.  This corrects a problem 
                // where text pasted from Powerpoint was pasted as an image rather than text since the list of formats being pasted
                // contained both Text and Image in the Powerpoint scenario.  No one seems to remember if there was a reason why the 
                // logic was originally looking for Image formats before Text formats so hopefully this change doesn't mess up  
                // Image pasting scenarios.  Everything looked OK in the limted Image pasting testing I did.

				// If there is both html and plain text on the clipboard, only paste the plain text
				// by calling our onTextPasted virtual method to 'manually' paste the text and then
				// canceling the paste event
				var plainText = clipboardData.getData('text/plain');
				if (plainText != '')
				{
                    if (this.processPastedText(plainText))
                    {
					    e.stopPropagation();
					    e.preventDefault();
                    }

					return;
				}
	 
				if (this.__pasteEventBlock)
				{
					for (var i = 0; i < items.length; i++)
					{
						// Skip content if not image
						if (items[i].type.indexOf('image') >= 0) {
							file = items[i].getAsFile();

                            //Clipboard items can be sneaky. It might say it's an image file, but it could be a non-image file.
                            if (file != null) {
							    var pasteEventBlock = this.__pasteEventBlock;

							    var reader = new FileReader();
							    reader.onload = function(event) {
								    var pasteEvent = new $.ig.CPPasteEvent();
								    pasteEvent._eventType = $.ig.CPPasteEvent.prototype.imageEventType;
								    pasteEvent._data = reader.result;
								    pasteEventBlock(pasteEvent);
							    };
							    reader.readAsDataURL(file);
							    foundImage = true;
                            }
						} 
					}

					//Check if we are copying image address that contains the actual image
					if (!foundImage) {
						var text = clipboardData.getData('Text'); 
						if (text.startsWith('data:image/')) {
							var pasteEvent = new $.ig.CPPasteEvent();
							pasteEvent._eventType = $.ig.CPPasteEvent.prototype.imageEventType;
							pasteEvent._data = text;
							this.__pasteEventBlock(pasteEvent);
							foundImage = true;
						}
					}

					if (foundImage) {
						e.stopPropagation();
						e.preventDefault();
					}
				}
			};

;
		this.textChanged();
		this.selectionChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::OnPaste(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::ProcessPastedText(System.String)" />*/
	processPastedText: function (plainTextPasted) {
		var handled = false;
		if (this.__pasteEventBlock != null) {
			var pasteEvent = new $.ig.CPPasteEvent();
			pasteEvent.eventType($.ig.CPPasteEvent.prototype.textEventType);
			pasteEvent.text(plainTextPasted);
			this.__pasteEventBlock(pasteEvent);
			handled = pasteEvent.handled();
		}
		return handled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::ProcessPastedText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPTextViewBase.prototype.handleClick.call(this, x, y);
		this.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SelectionChanged()" />*/
	selectionChanged: function () {
		var selectionStart = this.__textBox.getSelectionStart();
		var selectionEnd = this.__textBox.getSelectionEnd();
		this.notifiSelectionChanged(selectionStart, selectionEnd - selectionStart);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SelectionChanged()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::ShouldClearFocusOnClick()" />*/
	shouldClearFocusOnClick: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::ShouldClearFocusOnClick()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::IsTextDirty()" />*/
	isTextDirty: function () {
		return this.__isTextDirty;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::IsTextDirty()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::HasFocus()" />*/
	hasFocus: function () {
		return this.__hasFocus;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::HasFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetFocus()" />*/
	setFocus: function () {
		if (!this.__hasFocus) {
			var e = this.elementForFocus()[0];
			if (null != e) {
				e.tabIndex = 0;
				e.focus();
				this.__hasFocus = true;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::ClearFocus()" />*/
	clearFocus: function () {
		this.__hasFocus = false;
		var e = this.elementForFocus()[0];
		if (null != e) {
			e.blur();
			e.tabIndex = -1;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::AddChildViews()" />*/
	addChildViews: function () {
		this.__label = new $.ig.CPLabel();
		this.addSubview(this.__label);
		if (false == this.needPlaceholderLabel()) {
			this.__label.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::AddChildViews()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextView::NeedPlaceholderLabel()" />*/
	needPlaceholderLabel: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextView::NeedPlaceholderLabel()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextView::HasText()" />*/
	hasText: function () {
		return this.getText().length > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextView::HasText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::TextChanged()" />*/
	textChanged: function () {
		if (this.__valueTrimming && this.getText() != null && this.getText() != this.getText().trim([])) {
			this.setText(this.getText().trim([]));
			return;
		}
		if (this.__textChangedBlock != null) {
			this.__textChangedBlock();
		}
		if (this.needPlaceholderLabel()) {
			if (this.hasText()) {
				this.__label.isHidden(true);
			} else {
				this.__label.isHidden(false);
			}
		} else {
			this.__label.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::TextChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterTextChanged(Infragistics.ExecutionBlock)" />*/
	registerTextChanged: function (block) {
		this.__textChangedBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterTextChanged(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterGotFocus(Infragistics.ExecutionBlock)" />*/
	registerGotFocus: function (block) {
		this.__gotFocusBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterGotFocus(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterLostFocus(Infragistics.ExecutionBlock)" />*/
	registerLostFocus: function (block) {
		this.__lostFocusBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterLostFocus(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterEnterKeyPressed(Infragistics.ExecutionBlock)" />*/
	registerEnterKeyPressed: function (block) {
		this.__enterKeyPressed = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterEnterKeyPressed(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterEscapeKeyPressed(Infragistics.ExecutionBlock)" />*/
	registerEscapeKeyPressed: function (block) {
		this.__escKeyPressed = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterEscapeKeyPressed(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::RegisterPasteEvent(Infragistics.ObjectBlock)" />*/
	registerPasteEvent: function (block) {
		this.__pasteEventBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::RegisterPasteEvent(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.InputView Infragistics.CPTextView::CreateInputView()" />*/
	createInputView: function () {
		return new $.ig.InputView();
	}
	/*<EndMethod Name="Infragistics.InputView Infragistics.CPTextView::CreateInputView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::TextBox_GotFocus()" />*/
	textBox_GotFocus: function () {
		this.__hasFocus = true;
		if (this.__gotFocusBlock != null) {
			this.__gotFocusBlock();
		}
		if (!this.getIsReadOnly()) {
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this, false);
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setFocusedTextBox(this);
		}
		this.gotFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::TextBox_GotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::TextBox_LostFocus()" />*/
	textBox_LostFocus: function () {
		this.__hasFocus = false;
		if (this.__lostFocusBlock != null) {
			this.__lostFocusBlock();
		}
		$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setFocusedTextBox(null);
		this.lostFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::TextBox_LostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::ElementGotFocus()" />*/
	elementGotFocus: function () {
		this.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::ElementLostFocus()" />*/
	elementLostFocus: function () {
		this.clearFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPTextViewBase.prototype.sizeChanged.call(this, w, h);
		var padding = this.textBoxPadding();
		var itemWidth = w - padding * 2;
		this.__label.calculateSizeToFit();
		var labelHeight = this.__label.getCalculatedHeight();
		this.measureView1(this.__background, 0, 0, w, h, 1);
		this.measureView1(this.__label, padding, this.resolveLabelTop(labelHeight, h), itemWidth, labelHeight, 1);
		this.measureTextArea(padding, 0, itemWidth, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::MeasureTextArea(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureTextArea: function (x, y, w, h) {
		this.measureView1(this.__textBox, x, y, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::MeasureTextArea(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTextView::ResolveLabelTop(System.Int32, System.Int32)" />*/
	resolveLabelTop: function (labelHeight, h) {
		return $.ig.intDivide(h, 2) - $.ig.intDivide(labelHeight, 2);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTextView::ResolveLabelTop(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.__font = font;
		this.__fontSize = fontSize;
		this.__textBox.setFont(fontSize, font);
		this.__label.setFont(fontSize, font);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		this.__background.setBackgroundColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetTextColor(System.String)" />*/
	setTextColor: function (textColor) {
		this.__textBox.setTextColor(textColor);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetHintTextColor(System.String)" />*/
	setHintTextColor: function (color) {
		this.__label.setTextColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetHintTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetText(System.String)" />*/
	setText: function (text) {
		this.__textBox.setText(text);
		this.internalSetText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::InternalSetText(System.String)" />*/
	internalSetText: function (text) {
		this.__label.isHidden(this.__hasFocus || (text != null && text.length > 0));
		this.textChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::InternalSetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetTextAlignment(System.Windows.TextAlignment)" />*/
	setTextAlignment: function (alignment) {
		var textAlign = "left";
		if (alignment == $.ig.TextAlignment.prototype.center) {
			textAlign = "center";
		} else if (alignment == $.ig.TextAlignment.prototype.right) {
			textAlign = "right";
		}
		this.__textBox.setTextAlignment(textAlign);
		this.__label.setTextAlignment(alignment);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetTextAlignment(System.Windows.TextAlignment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::MoveCaretToTheEnd()" />*/
	moveCaretToTheEnd: function () {
		this.__textBox.moveCaretToTheEnd();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::MoveCaretToTheEnd()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetHintText(System.String)" />*/
	setHintText: function (text) {
		this.__label.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetHintText(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPTextView::GetText()" />*/
	getText: function () {
		return this.__textBox.getText();
	}
	/*<EndMethod Name="System.String Infragistics.CPTextView::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.__textBox.calculateSizeToFit();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		this.__textBox._element[0].style.width = limitWidth + "px";
		this.__textBox._element[0].style.height = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTextView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__textBox.getCalculatedWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTextView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTextView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__textBox.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTextView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::TurnOffAutoCapitalization()" />*/
	turnOffAutoCapitalization: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::TurnOffAutoCapitalization()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::UseAutoCorrect(System.Boolean)" />*/
	useAutoCorrect: function (val) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::UseAutoCorrect(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::GotFocus()" />*/
	gotFocus: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::GotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::LostFocus()" />*/
	lostFocus: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::LostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SetKeyboardType(Infragistics.KeyboardType)" />*/
	setKeyboardType: function (type) {
		var strType = "text";
		if (type == $.ig.KeyboardType.prototype.numeric) {
			strType = "number";
		} else if (type == $.ig.KeyboardType.prototype.email) {
			strType = "email";
		}
		this.__textBox.setType(strType);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SetKeyboardType(Infragistics.KeyboardType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SelectAllText()" />*/
	selectAllText: function () {
		this.__textBox.selectAllText();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SelectAllText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::Enable()" />*/
	enable: function () {
		this.__textBox._element[0].disabled = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::Enable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::Disable()" />*/
	disable: function () {
		this.__textBox._element[0].disabled = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
		this.__textBox.selectText(startIndex, length);
		this.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::SelectText(System.Int32, System.Int32)" />*/
	,
	_shiftEnterMode: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextView::ShiftEnterMode()" />*/
	shiftEnterMode: function (value) {
		if (arguments.length === 1) {
			this._shiftEnterMode = value;
			return value;
		} else {
			return this._shiftEnterMode;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextView::ShiftEnterMode()" />*/
	,
	_disableNewLines: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextView::DisableNewLines()" />*/
	disableNewLines: function (value) {
		if (arguments.length === 1) {
			this._disableNewLines = value;
			return value;
		} else {
			return this._disableNewLines;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextView::DisableNewLines()" />*/
	,
	_disableCloseButtonOnPhoneKeyboards: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextView::DisableCloseButtonOnPhoneKeyboards()" />*/
	disableCloseButtonOnPhoneKeyboards: function (value) {
		if (arguments.length === 1) {
			this._disableCloseButtonOnPhoneKeyboards = value;
			return value;
		} else {
			return this._disableCloseButtonOnPhoneKeyboards;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextView::DisableCloseButtonOnPhoneKeyboards()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextView::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	replaceText: function (replacementText, replacementOffset, replacementLength) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextView::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPTextView::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	translatePointOfCursorToView: function (cursorPosition, view) {
		return this.translatePoint(new $.ig.CPPoint(0, 0), view);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPTextView::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPTextView::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	translatePointOfCurrentCurrsorToView: function (view) {
		return $.ig.CPTextViewBase.prototype.translatePointOfCursorToView.call(this, 0, view);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPTextView::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	,
	$type: new $.ig.Type('CPTextView', $.ig.CPTextViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextView" />*/

/*<BeginType Name="Infragistics.CPMultilineTextView" />*/

$.ig.util.defType('CPMultilineTextView', 'CPTextView', {
	init: function () {
		$.ig.CPTextView.prototype.init.call(this);
	},
	__editorContainerId: null,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::Setup()" />*/
	setup: function () {
		var $self = this;
		$.ig.CPTextView.prototype.setup.call(this);
		if (null == this.__editorContainerId || "" == this.__editorContainerId) {
			this.__editorContainerId = this.quillTextBox().quillEditorContainerId();
		} else if (this.__editorContainerId != this.quillTextBox().quillEditorContainerId()) {
			console.log('Quill editor container Id is not in sync!!!');
			this.__editorContainerId = this.quillTextBox().quillEditorContainerId();
		}
		this.quillTextBox().registerEnterKeyPressed(function (shift) {
			if ($self.shiftEnterMode() || $self.__enterKeyPressed != null) {
				var inChatMessageEditor = false;
				var quill = $self.quillTextBox().quillEditorElement().firstChild;
				
							var mbe = quill.closest('#chat_message_box_editor');
							if (null != mbe)
							{
								inChatMessageEditor = true;
							}
						;
				if ($self.__enterKeyPressed != null) {
					if (inChatMessageEditor && shift == true) {
						return false;
					}
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.InputView Infragistics.CPMultilineTextView::CreateInputView()" />*/
	createInputView: function () {
		if (null != this.__textBox) {
			return this.__textBox;
		}
		return new $.ig.MultilineInputView();
	}
	/*<EndMethod Name="Infragistics.InputView Infragistics.CPMultilineTextView::CreateInputView()" />*/
	,
	/*<BeginProperty Name="System.JQuery.JQueryObject Infragistics.CPMultilineTextView::ElementForFocus()" />*/
	elementForFocus: function () {
		return this.quillTextBox().quillEditor();
	}
	/*<EndProperty Name="System.JQuery.JQueryObject Infragistics.CPMultilineTextView::ElementForFocus()" />*/
	,
	/*<BeginProperty Name="Infragistics.MultilineInputView Infragistics.CPMultilineTextView::QuillTextBox()" />*/
	quillTextBox: function () {
		return this.__textBox;
	}
	/*<EndProperty Name="Infragistics.MultilineInputView Infragistics.CPMultilineTextView::QuillTextBox()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::RegisterScrollView(Infragistics.CPScrollView)" />*/
	registerScrollView: function (scrollView) {
		$.ig.CPTextView.prototype.registerScrollView.call(this, scrollView);
		this.quillTextBox().setScrollingContainer(scrollView._element[0]);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::RegisterScrollView(Infragistics.CPScrollView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::SetHintText(System.String)" />*/
	setHintText: function (text) {
		$.ig.CPTextView.prototype.setHintText.call(this, text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::SetHintText(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPMultilineTextView::NeedPlaceholderLabel()" />*/
	needPlaceholderLabel: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPMultilineTextView::NeedPlaceholderLabel()" />*/
	,
	__measuredTextHeight: 0,
	__measuredTextWidth: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		var text = this.getText();
		var measureWidth = limitWidth - this.textBoxPadding() * 2;
		if (text == null || text.length == 0) {
			var placeholder = this.__label.getText();
			if (placeholder == null || placeholder.length == 0) {
				placeholder = "_";
			}
			var textBoxClone = this.quillTextBox().quillEditor().clone();
			textBoxClone[0].innerText = placeholder;
			$.ig.JSHelperUtility.prototype.utility().measureMultilineText(measureWidth, textBoxClone, this.__font, this.__fontSize);
		} else {
			if (null == this.quillTextBox().quillEditorElement()) {
				this.__measuredTextWidth = 0;
				this.__measuredTextHeight = 0;
				return;
			}
			var textBoxClone1 = this.quillTextBox().quillEditor().clone();
			$.ig.JSHelperUtility.prototype.utility().measureMultilineText(measureWidth, textBoxClone1, this.__font, this.__fontSize);
		}
		this.__measuredTextWidth = Math.min(limitWidth, $.ig.JSHelperUtility.prototype.utility().measuredWidth() + this.textBoxPadding() * 2 + 1);
		this.__measuredTextHeight = $.ig.JSHelperUtility.prototype.utility().measuredHeight() + this.textBoxPadding() * 2;
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPMultilineTextView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__measuredTextWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPMultilineTextView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPMultilineTextView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__measuredTextHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPMultilineTextView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPMultilineTextView::ResolveLabelTop(System.Int32, System.Int32)" />*/
	resolveLabelTop: function (labelHeight, h) {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPMultilineTextView::ResolveLabelTop(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPMultilineTextView::GetText()" />*/
	getText: function () {
		return this.quillTextBox().quill().getText();
	}
	/*<EndMethod Name="System.String Infragistics.CPMultilineTextView::GetText()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPMultilineTextView::HasText()" />*/
	hasText: function () {
		var text = this.getText();
		while ($.ig.NativeStringUtility.prototype.endsWith(text, "\n")) {
			text = $.ig.NativeStringUtility.prototype.substring(text, 0, text.length - 1);
		}
		return text.length > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPMultilineTextView::HasText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::SetText(System.String)" />*/
	setText: function (text) {
		var t = text;
		if (null == t) {
			t = "";
		}
		this.quillTextBox().quill().setText(t);
		this.internalSetText(t);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::MeasureTextArea(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureTextArea: function (x, y, w, h) {
		$.ig.CPTextView.prototype.measureTextArea.call(this, x, y, w, h);
		var quillEditorContainerElement = this.quillTextBox().quillEditorContainerElement();
		quillEditorContainerElement.style.width = w + "px";
		quillEditorContainerElement.style.height = h + "px";
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::MeasureTextArea(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::SetFocus()" />*/
	setFocus: function () {
		this.quillTextBox().focus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::SetFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::ClearFocus()" />*/
	clearFocus: function () {
		this.quillTextBox().blur();
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPMultilineTextView::HasFocus()" />*/
	hasFocus: function () {
		return this.quillTextBox().hasFocus();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPMultilineTextView::HasFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPMultilineTextView::GetIsReadOnly()" />*/
	getIsReadOnly: function () {
		return false == this.quillTextBox().getIsEnabled();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPMultilineTextView::GetIsReadOnly()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::SelectAllText()" />*/
	selectAllText: function () {
		this.quillTextBox().quill().selectAllText();
		this.selectionChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::SelectAllText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
		this.quillTextBox().quill().selectText(startIndex, length);
		this.selectionChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::SelectText(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	replaceText: function (replacementText, replacementOffset, replacementLength) {
		this.quillTextBox().focus();
		var replacingMention = "@" == this.quillTextBox().getTextInRange(replacementOffset, 1);
		var formatsAtReplacementOffset = this.quillTextBox().getFormatsInSelection1(replacementOffset, 0);
		var formatsExistAtReplacementOffset = this.containsFormatting(formatsAtReplacementOffset);
		var textDeleted = false;
		var textInserted = false;
		if (replacementLength > 0) {
			this.quillTextBox().quill().deleteText(replacementOffset, replacementLength);
			textDeleted = true;
		}
		var insertOffset = replacementOffset;
		if (replacementText.length > 0) {
			this.quillTextBox().quill().insertText(insertOffset, replacementText);
			textInserted = true;
			var endOffset = insertOffset + replacementText.length;
			if (replacingMention) {
				if (formatsExistAtReplacementOffset) {
					if (false == $.ig.NativeStringUtility.prototype.endsWith(replacementText, " ")) {
						this.applyFormatsAsync(formatsAtReplacementOffset, endOffset);
						return;
					} else {
						this.quillTextBox().setFormatsAtCaret(formatsAtReplacementOffset);
					}
				} else {
					if (false == $.ig.NativeStringUtility.prototype.endsWith(replacementText, " ")) {
						this.applyFormatsAsync(formatsAtReplacementOffset, endOffset);
						return;
					}
				}
			} else {
				if (formatsExistAtReplacementOffset) {
					this.quillTextBox().setFormatsAtCaret(formatsAtReplacementOffset);
				}
			}
			
							var self = this;
							setTimeout(function() 
								{
									self.quillTextBox().selectText(endOffset,0);
								}, 0);
						;
		}
		if (textDeleted && !textInserted) {
			
							var self = this;
							setTimeout(function() 
								{
									self.quillTextBox().selectText(replacementOffset,0);
								}, 0);
						;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::ApplyFormatsAsync(Infragistics.CPDictionary, System.Int32)" />*/
	applyFormatsAsync: function (formats, offset) {
		
				var self = this;
				setTimeout(function() 
					{
						self.quillTextBox().selectText(offset,0);
						setTimeout(function() 
							{
								self.quillTextBox().setFormatsAtCaret(formats);
							}, 0);
					}, 0);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::ApplyFormatsAsync(Infragistics.CPDictionary, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPMultilineTextView::ContainsFormatting(Infragistics.CPDictionary)" />*/
	containsFormatting: function (formats) {
		if (null == formats) {
			return false;
		}
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(formats);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			
					if (formats.item(key) != false)
						return true;
					;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPMultilineTextView::ContainsFormatting(Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPMultilineTextView::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	translatePointOfCursorToView: function (cursorPosition, view) {
		var r = null;
		if (cursorPosition >= 0) {
			
							try
							{
								r = $.ig.util.getCaretRectForPosition(this.quillTextBox().quillEditorElement(), cursorPosition);
							}
							catch (err)
							{
								r = null;
							}
							;
		} else {
			r = $.ig.util.getCurrentSelectionRect();
		}
		if (r != null) {
			var doc = $(window.document.body);
			var tb = this.quillTextBox().quillEditor();
			var p1 = $.ig.NativeUIUtility.prototype.utility().translatePoint(new $.ig.CPPoint(r.x, r.y + r.height / 2), doc, tb);
			var p2 = $.ig.NativeUIUtility.prototype.utility().translatePoint(p1, tb, view._element);
			return p2;
		} else {
			return $.ig.CPTextView.prototype.translatePointOfCursorToView.call(this, cursorPosition, view);
		}
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPMultilineTextView::TranslatePointOfCursorToView(System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.CPMultilineTextView::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	translatePointOfCurrentCurrsorToView: function (view) {
		return this.translatePointOfCursorToView(-1, view);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.CPMultilineTextView::TranslatePointOfCurrentCurrsorToView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::AttachTextChangedEvent()" />*/
	attachTextChangedEvent: function () {
		var $self = this;
		this.quillTextBox().attachTextChangedEvent(function (d, o, s) {
			$self.textChanged();
			$self.selectionChanged();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::AttachTextChangedEvent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMultilineTextView::AttachSelectionChangedEvent()" />*/
	attachSelectionChangedEvent: function () {
		var $self = this;
		this.quillTextBox().attachSelectionChangedEvent(function (r, o, s) {
			$self.selectionChanged();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPMultilineTextView::AttachSelectionChangedEvent()" />*/
	,
	$type: new $.ig.Type('CPMultilineTextView', $.ig.CPTextView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMultilineTextView" />*/

/*<BeginType Name="Infragistics.NumericInputView" />*/

$.ig.util.defType('NumericInputView', 'InputView', {
	init: function () {
		$.ig.InputView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.NumericInputView::CreateElementHtml()" />*/
	createElementHtml: function () {
		var focusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
		if (focusManager != null) {
			return "<input type='number' style='outline:none' tabIndex='-1'></input>";
		}
		return "<input type='number' style='outline:none'></input>";
	}
	/*<EndMethod Name="System.String Infragistics.NumericInputView::CreateElementHtml()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NumericInputView::SelectAllText()" />*/
	selectAllText: function () {
		this._element[0].select();
	}
	/*<EndMethod Name="System.Void Infragistics.NumericInputView::SelectAllText()" />*/
	,
	$type: new $.ig.Type('NumericInputView', $.ig.InputView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NumericInputView" />*/

/*<BeginType Name="Infragistics.CPNumericTextView" />*/

$.ig.util.defType('CPNumericTextView', 'CPTextView', {
	/*<BeginMethod Name="Infragistics.InputView Infragistics.CPNumericTextView::CreateInputView()" />*/
	createInputView: function () {
		return new $.ig.NumericInputView();
	}
	/*<EndMethod Name="Infragistics.InputView Infragistics.CPNumericTextView::CreateInputView()" />*/
	,
	__allowNegatives: false,
	__minValue: $.ig.util.toNullable(Number, null),
	__maxValue: $.ig.util.toNullable(Number, null),
	__minDigits: 0,
	__maxDigits: 0,
	init: function () {
		this.__allowNegatives = true;
		this.__minDigits = 0;
		this.__maxDigits = 0x7FFFFFFF;
		$.ig.CPTextView.prototype.init.call(this);
		this.setKeyboardType($.ig.KeyboardType.prototype.numeric);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPNumericTextView::AllowNegatives()" />*/
	allowNegatives: function (value) {
		if (arguments.length === 1) {
			this.__allowNegatives = value;
			return value;
		} else {
			return this.__allowNegatives;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPNumericTextView::AllowNegatives()" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.CPNumericTextView::MinValue()" />*/
	minValue: function (value) {
		if (arguments.length === 1) {
			this.__minValue = value;
			return value;
		} else {
			return this.__minValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.CPNumericTextView::MinValue()" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.CPNumericTextView::MaxValue()" />*/
	maxValue: function (value) {
		if (arguments.length === 1) {
			this.__maxValue = value;
			return value;
		} else {
			return this.__maxValue;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.CPNumericTextView::MaxValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPNumericTextView::MinNumberOfDigits()" />*/
	minNumberOfDigits: function (value) {
		if (arguments.length === 1) {
			this.__minDigits = value;
			return value;
		} else {
			return this.__minDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPNumericTextView::MinNumberOfDigits()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPNumericTextView::MaxNumberOfDigits()" />*/
	maxNumberOfDigits: function (value) {
		if (arguments.length === 1) {
			this.__maxDigits = value;
			return value;
		} else {
			return this.__maxDigits;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPNumericTextView::MaxNumberOfDigits()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNumericTextView::TextChanged()" />*/
	textChanged: function () {
		var currentText = this.getText();
		if (currentText != null && currentText.length > 0) {
			if ((this.isValidValue(currentText) || currentText.equals("-")) && (this.__allowNegatives || !$.ig.NativeStringUtility.prototype.contains(currentText, "-")) && currentText.length <= this.__maxDigits) {
				$.ig.CPTextView.prototype.textChanged.call(this);
			} else {
				var revertValue = $.ig.CPStringUtility.prototype.substring1(currentText, 0, currentText.length - 1);
				this.setText(revertValue);
				this.moveCaretToTheEnd();
			}
		} else if (currentText != null && currentText.equals("")) {
			$.ig.CPTextView.prototype.textChanged.call(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNumericTextView::TextChanged()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPNumericTextView::IsValidValue(System.String)" />*/
	isValidValue: function (numericString) {
		var isNumeric = $.ig.CPStringUtility.prototype.isNumeric(numericString);
		var valid = true;
		if (isNumeric) {
			var val = $.ig.NativeStringUtility.prototype.parseNumber(numericString);
			if (!$.ig.NativeNullableUtility.prototype.isNullDouble(this.__minValue) && $.ig.NativeNullableUtility.prototype.unwrapDouble(this.__minValue) > val) {
				valid = false;
			}
			if (!$.ig.NativeNullableUtility.prototype.isNullDouble(this.__maxValue) && $.ig.NativeNullableUtility.prototype.unwrapDouble(this.__maxValue) < val) {
				valid = false;
			}
			return valid;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPNumericTextView::IsValidValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNumericTextView::SetValue(System.Nullable)" />*/
	setValue: function (value) {
		if ($.ig.NativeNullableUtility.prototype.isNull($.ig.util.unwrapNullable(value))) {
			this.setText("");
		} else {
			var currentText = $.ig.NativeStringUtility.prototype.convertNumberToString($.ig.NativeNullableUtility.prototype.unwrapDouble(value));
			if (currentText.length < this.__minDigits) {
				for (var i = 0; i < this.__minDigits - currentText.length; i++) {
					currentText = "0" + currentText;
				}
			}
			this.setText(currentText);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNumericTextView::SetValue(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.CPNumericTextView::GetValue()" />*/
	getValue: function () {
		var currentText = this.getText();
		if (currentText != null && currentText.length > 0) {
			if ($.ig.CPStringUtility.prototype.isNumeric(currentText)) {
				return $.ig.NativeNullableUtility.prototype.wrapDouble($.ig.NativeStringUtility.prototype.parseNumber(currentText));
			}
		}
		return $.ig.util.toNullable(Number, null);
	}
	/*<EndMethod Name="System.Nullable Infragistics.CPNumericTextView::GetValue()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNumericTextView::LostFocus()" />*/
	lostFocus: function () {
		var currentText = this.getText();
		if (currentText != null && currentText.length > 0) {
			if (!$.ig.CPStringUtility.prototype.isNumeric(currentText)) {
				this.setText("");
			} else if (currentText.length < this.__minDigits) {
				for (var i = 0; i < this.__minDigits - currentText.length; i++) {
					currentText = "0" + currentText;
				}
				this.setText(currentText);
			}
		}
		$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setFocusedTextBox(null);
		$.ig.CPTextView.prototype.lostFocus.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNumericTextView::LostFocus()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPNumericTextView::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPTextView.prototype.getSupportedKeyCommands.call(this);
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.up), function (k) {
			var cur = $self.getValue();
			if (!$.ig.NativeNullableUtility.prototype.isNullDouble(cur)) {
				var unwrappedValue = $.ig.NativeNullableUtility.prototype.unwrapDouble(cur);
				unwrappedValue = unwrappedValue + 1;
				if (!$.ig.NativeNullableUtility.prototype.isNullDouble($self.__maxValue) && unwrappedValue > $.ig.NativeNullableUtility.prototype.unwrapDouble($self.__maxValue)) {
					unwrappedValue = $.ig.NativeNullableUtility.prototype.unwrapDouble($self.__minValue);
				}
				$self.setValue($.ig.NativeNullableUtility.prototype.wrapDouble(unwrappedValue));
			}
		}));
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.down), function (k) {
			var cur = $self.getValue();
			if (!$.ig.NativeNullableUtility.prototype.isNullDouble(cur)) {
				var unwrappedValue = $.ig.NativeNullableUtility.prototype.unwrapDouble(cur);
				unwrappedValue = unwrappedValue - 1;
				if (!$.ig.NativeNullableUtility.prototype.isNullDouble($self.__minValue) && unwrappedValue < $.ig.NativeNullableUtility.prototype.unwrapDouble($self.__minValue)) {
					unwrappedValue = $.ig.NativeNullableUtility.prototype.unwrapDouble($self.__maxValue);
				}
				$self.setValue($.ig.NativeNullableUtility.prototype.wrapDouble(unwrappedValue));
			}
		}));
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPNumericTextView::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('CPNumericTextView', $.ig.CPTextView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPNumericTextView" />*/

/*<BeginType Name="Infragistics.PasswordInputView" />*/

$.ig.util.defType('PasswordInputView', 'InputView', {
	init: function () {
		$.ig.InputView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.PasswordInputView::CreateElementHtml()" />*/
	createElementHtml: function () {
		return "<input type='password' style='outline:none'></input>";
	}
	/*<EndMethod Name="System.String Infragistics.PasswordInputView::CreateElementHtml()" />*/
	,
	$type: new $.ig.Type('PasswordInputView', $.ig.InputView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PasswordInputView" />*/

/*<BeginType Name="Infragistics.CPPasswordBox" />*/

$.ig.util.defType('CPPasswordBox', 'CPTextView', {
	init: function () {
		$.ig.CPTextView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPasswordBox::Setup()" />*/
	setup: function () {
		$.ig.CPTextView.prototype.setup.call(this);
		this.useShowHideButton(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPasswordBox::Setup()" />*/
	,
	/*<BeginMethod Name="Infragistics.InputView Infragistics.CPPasswordBox::CreateInputView()" />*/
	createInputView: function () {
		return new $.ig.PasswordInputView();
	}
	/*<EndMethod Name="Infragistics.InputView Infragistics.CPPasswordBox::CreateInputView()" />*/
	,
	_showText: null,
	/*<BeginProperty Name="System.String Infragistics.CPPasswordBox::ShowText()" />*/
	showText: function (value) {
		if (arguments.length === 1) {
			this._showText = value;
			return value;
		} else {
			return this._showText;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPasswordBox::ShowText()" />*/
	,
	_hideText: null,
	/*<BeginProperty Name="System.String Infragistics.CPPasswordBox::HideText()" />*/
	hideText: function (value) {
		if (arguments.length === 1) {
			this._hideText = value;
			return value;
		} else {
			return this._hideText;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPasswordBox::HideText()" />*/
	,
	_useShowHideButton: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPasswordBox::UseShowHideButton()" />*/
	useShowHideButton: function (value) {
		if (arguments.length === 1) {
			this._useShowHideButton = value;
			return value;
		} else {
			return this._useShowHideButton;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPasswordBox::UseShowHideButton()" />*/
	,
	$type: new $.ig.Type('CPPasswordBox', $.ig.CPTextView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPasswordBox" />*/

/*<BeginType Name="Infragistics.CPRichTextView" />*/

$.ig.util.defType('CPRichTextView', 'CPMultilineTextView', {
	__currentStyledBlocks: null,
	__richTextFormattingBlocks: null,
	init: function () {
		$.ig.CPMultilineTextView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::Setup()" />*/
	setup: function () {
		$.ig.CPMultilineTextView.prototype.setup.call(this);
		this.__currentStyledBlocks = new $.ig.Array();
		this.__richTextFormattingBlocks = new $.ig.Array();
		this.quillTextBox().registerToggleTextFormat(this.toggleTextFormat.runOn(this));
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::ApplyStylingToBlocks(Infragistics.CPList)" />*/
	applyStylingToBlocks: function (blocks) {
		this.clearStyling();
		this.__currentStyledBlocks = blocks;
		this.updateRichTextFormattingBlocks();
		this.applyRichTextFormattingAndStyling();
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::ApplyStylingToBlocks(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::ClearStyling()" />*/
	clearStyling: function () {
		if (this.__currentStyledBlocks.length <= 0) {
			return;
		}
		var sortedBlocks = this.__currentStyledBlocks;
		var count = sortedBlocks.length;
		for (var i = 0; i < sortedBlocks.length; i++) {
			var stylingBlock = $.ig.util.cast($.ig.CPRichTextStylingBlock.prototype.$type, sortedBlocks[i]);
			var start = stylingBlock.startOffset();
			var length = stylingBlock.end() - stylingBlock.start();
			if (stylingBlock.underline()) {
				this.quillTextBox().removeFormat("u", start, length);
			}
			if (stylingBlock.bold()) {
				this.quillTextBox().removeFormat("b", start, length);
			}
			if (stylingBlock.backgroundColor() != 0) {
				this.quillTextBox().removeFormat("background", start, length);
			}
			if (stylingBlock.textColor() != 0) {
				this.quillTextBox().removeFormat("color", start, length);
			}
			if (null != stylingBlock.hREFVal()) {
				this.quillTextBox().removeFormat("link", start, length);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::ClearStyling()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainFormat(System.String)" />*/
	getDoesSelectionContainFormat: function (format) {
		return this.quillTextBox().getDoesSelectionContainFormat(format);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainBoldFormatting()" />*/
	getDoesSelectionContainBoldFormatting: function () {
		return this.getDoesSelectionContainFormat("bold");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainBoldFormatting()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainItalicFormatting()" />*/
	getDoesSelectionContainItalicFormatting: function () {
		return this.getDoesSelectionContainFormat("italic");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainItalicFormatting()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainUnderlineFormatting()" />*/
	getDoesSelectionContainUnderlineFormatting: function () {
		return this.getDoesSelectionContainFormat("underline");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainUnderlineFormatting()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainStrikethroughFormatting()" />*/
	getDoesSelectionContainStrikethroughFormatting: function () {
		return this.getDoesSelectionContainFormat("strikeThrough");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextView::GetDoesSelectionContainStrikethroughFormatting()" />*/
	,
	__richTextFormattingChangedBlock: null,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::RegisterRichTextFormattingChanged(Infragistics.ExecutionBlock)" />*/
	registerRichTextFormattingChanged: function (block) {
		this.__richTextFormattingChangedBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::RegisterRichTextFormattingChanged(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::ToggleTextFormat(System.String)" />*/
	toggleTextFormat: function (format) {
		switch (format) {
			case "b":
				this.toggleTextFormattingInSelection(true, false, false, false);
				break;
			case "i":
				this.toggleTextFormattingInSelection(false, true, false, false);
				break;
			case "u":
				this.toggleTextFormattingInSelection(false, false, true, false);
				break;
			case "s":
				this.toggleTextFormattingInSelection(false, false, false, true);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::ToggleTextFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::ToggleTextFormattingInSelection(System.Boolean, System.Boolean, System.Boolean, System.Boolean)" />*/
	toggleTextFormattingInSelection: function (toggleBold, toggleItalic, toggleUnderline, toggleStrikethrough) {
		if (toggleStrikethrough) {
			this.quillTextBox().toggleFormatInSelection("strikeThrough");
		}
		if (toggleUnderline) {
			this.quillTextBox().toggleFormatInSelection("underline");
		}
		if (toggleBold) {
			this.quillTextBox().toggleFormatInSelection("bold");
		}
		if (toggleItalic) {
			this.quillTextBox().toggleFormatInSelection("italic");
		}
		this.updateRichTextFormattingBlocks();
		if (null != this.__richTextFormattingChangedBlock) {
			this.__richTextFormattingChangedBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::ToggleTextFormattingInSelection(System.Boolean, System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPRichTextView::GetRichTextFormattingBlocks()" />*/
	getRichTextFormattingBlocks: function () {
		return this.__richTextFormattingBlocks;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPRichTextView::GetRichTextFormattingBlocks()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::SetRichTextFormattingBlocks(Infragistics.CPList)" />*/
	setRichTextFormattingBlocks: function (blocks) {
		this.__richTextFormattingBlocks = blocks;
		this.applyRichTextFormattingAndStyling();
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::SetRichTextFormattingBlocks(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::Select(System.Int32, System.Int32)" />*/
	select: function (offset, length) {
		this.quillTextBox().focus();
		this.quillTextBox().selectText(offset, length);
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::Select(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::UpdateRichTextFormattingBlocks()" />*/
	updateRichTextFormattingBlocks: function () {
		this.__richTextFormattingBlocks = this.quillTextBox().getRichTextFormattingBlocks();
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::UpdateRichTextFormattingBlocks()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextView::ApplyRichTextFormattingAndStyling()" />*/
	applyRichTextFormattingAndStyling: function () {
		var blocks = this.combineRichTextFormattingAndStylingBlocks(this.__richTextFormattingBlocks, this.__currentStyledBlocks);
		if (null == this.__currentStyledBlocks || blocks.length == 0) {
			return;
		}
		var sortedBlocks = this.sortByOffsetAndLength(blocks);
		var count = sortedBlocks.length;
		var isReadOnly = this.getIsReadOnly();
		if (isReadOnly) {
			this.quillTextBox().setReadOnly(false);
		}
		for (var i = 0; i < sortedBlocks.length; i++) {
			var block = $.ig.util.cast($.ig.HybridFormattingBlock.prototype.$type, sortedBlocks[i]);
			if (null == block.stylingBlock()) {
				var formats = block.formats();
				this.quillTextBox().setTextFormatsAndAttributes(formats, null, block.offset(), block.length());
			} else {
				var stylingBlock = block.stylingBlock();
				var formats1 = new $.ig.Array();
				if (stylingBlock.underline()) {
					formats1.add("u");
				}
				if (stylingBlock.bold()) {
					formats1.add("b");
				}
				var attributes = new $.ig.Dictionary(0);
				if (stylingBlock.backgroundColor() != 0) {
					attributes.item("background", $.ig.ColorUtility.prototype.convertToNative(stylingBlock.backgroundColor()));
				}
				if (stylingBlock.textColor() != 0) {
					attributes.item("color", $.ig.ColorUtility.prototype.convertToNative(stylingBlock.textColor()));
				}
				if (null != stylingBlock.hREFVal()) {
					attributes.item("link", stylingBlock.hREFVal());
				}
				if (attributes.count() > 0 || formats1.length > 0) {
					var start = this.quillTextBox().getSelectionStart();
					var end = this.quillTextBox().getSelectionEnd();
					this.quillTextBox().setTextFormatsAndAttributes(formats1, attributes, block.offset(), block.length());
					var newStart = this.quillTextBox().getSelectionStart();
					var newEnd = this.quillTextBox().getSelectionEnd();
					if (start != newStart || end != newEnd) {
						var textLen = this.quillTextBox().getText().length;
						if (start > textLen - 1) {
							start = textLen - 1;
						}
						if (start != -1) {
							this.selectText(start, 0);
						}
					}
				}
			}
		}
		if (isReadOnly) {
			this.quillTextBox().setReadOnly(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextView::ApplyRichTextFormattingAndStyling()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPRichTextView::SortByOffsetAndLength(Infragistics.CPList)" />*/
	sortByOffsetAndLength: function (blocks) {
		var blocksSortedByOffset = $.ig.NativeSortUtility.prototype.sortListNumericLong(new $.ig.CPPropertySortConverter("offset"), blocks, true);
		var blocksSortedByOffsetAscLengthDesc = new $.ig.Array();
		for (var i = 0; i < blocksSortedByOffset.length; i++) {
			var currentBlock = $.ig.util.cast($.ig.HybridFormattingBlock.prototype.$type, blocksSortedByOffset[i]);
			if (false == (i + 1) < blocksSortedByOffset.length) {
				blocksSortedByOffsetAscLengthDesc.add(currentBlock);
				break;
			}
			var nextBlock = $.ig.util.cast($.ig.HybridFormattingBlock.prototype.$type, blocksSortedByOffset[i + 1]);
			if (nextBlock.offset() == currentBlock.offset()) {
				var tempList = new $.ig.Array();
				tempList.add(currentBlock);
				tempList.add(nextBlock);
				var j = i + 2;
				while (j < blocksSortedByOffset.length) {
					var block = $.ig.util.cast($.ig.HybridFormattingBlock.prototype.$type, blocksSortedByOffset[j]);
					if (block.offset() == currentBlock.offset()) {
						tempList.add(block);
						j++;
					} else {
						break;
					}
				}
				var tempListSortedByLength = $.ig.NativeSortUtility.prototype.sortListNumericLong(new $.ig.CPPropertySortConverter("length"), tempList, false);
				for (var x = 0; x < tempListSortedByLength.length; x++) {
					blocksSortedByOffsetAscLengthDesc.add(tempListSortedByLength[x]);
				}
				i = i + tempListSortedByLength.length - 1;
			} else {
				blocksSortedByOffsetAscLengthDesc.add(currentBlock);
			}
		}
		return blocksSortedByOffsetAscLengthDesc;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPRichTextView::SortByOffsetAndLength(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPRichTextView::CombineRichTextFormattingAndStylingBlocks(Infragistics.CPList, Infragistics.CPList)" />*/
	combineRichTextFormattingAndStylingBlocks: function (richTextFormattingBlocks, richTextStylingBlocks) {
		var combinedList = new $.ig.Array();
		for (var i = 0; i < richTextFormattingBlocks.length; i++) {
			var block = $.ig.util.cast($.ig.CPRichTextFormattingBlock.prototype.$type, richTextFormattingBlocks[i]);
			combinedList.add($.ig.HybridFormattingBlock.prototype.fromCPRichTextFormattingBlock(block));
		}
		for (var i1 = 0; i1 < richTextStylingBlocks.length; i1++) {
			var block1 = $.ig.util.cast($.ig.CPRichTextStylingBlock.prototype.$type, richTextStylingBlocks[i1]);
			combinedList.add($.ig.HybridFormattingBlock.prototype.fromCPRichTextStylingBlock(block1));
		}
		return combinedList;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPRichTextView::CombineRichTextFormattingAndStylingBlocks(Infragistics.CPList, Infragistics.CPList)" />*/
	,
	$type: new $.ig.Type('CPRichTextView', $.ig.CPMultilineTextView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichTextView" />*/

/*<BeginType Name="Infragistics.CPRichTextFormattingBlock" />*/

$.ig.util.defType('CPRichTextFormattingBlock', 'BackingStoreObjectBase', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BackingStoreObjectBase.prototype.init.call(this, 0);
	},
	init1: function (initNumber, json) {
		$.ig.BackingStoreObjectBase.prototype.init1.call(this, 1, json);
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::Offset()" />*/
	offset: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("o", value);
			return value;
		} else {
			return this.resolveIntegerForKey("o");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::Offset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::Length()" />*/
	length: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("l", value);
			return value;
		} else {
			return this.resolveIntegerForKey("l");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::Length()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::End()" />*/
	end: function () {
		return this.offset() + this.length();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextFormattingBlock::End()" />*/
	,
	__formats: null,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPRichTextFormattingBlock::Formats()" />*/
	formats: function (value) {
		if (arguments.length === 1) {
			this.__formats = value;
			this.setValueForKey("f", this.__formats);
			return value;
		} else {
			if (this.__formats == null) {
				this.__formats = this.resolveListForKey("f");
			}
			return this.__formats;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPRichTextFormattingBlock::Formats()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPRichTextFormattingBlock::IsEqualTo(Infragistics.CPRichTextFormattingBlock)" />*/
	isEqualTo: function (other) {
		return (this.offset() == other.offset() && this.length() == other.length() && $.ig.ArrayUtility.prototype.compareListOfStrings(this.formats(), other.formats()));
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRichTextFormattingBlock::IsEqualTo(Infragistics.CPRichTextFormattingBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextFormattingBlock Infragistics.CPRichTextFormattingBlock::Create(System.Int32, System.Int32, System.String)" />*/
	create: function (offset, length, formats) {
		var richTextFormattingBlock = new $.ig.CPRichTextFormattingBlock(0);
		richTextFormattingBlock.offset(offset);
		richTextFormattingBlock.length(length);
		var fmtsArray = $.ig.NativeStringUtility.prototype.split(formats, ",");
		var fmtsList = new $.ig.Array();
		for (var i = 0; i < fmtsArray.length; i++) {
			fmtsList.add(fmtsArray[i]);
		}
		richTextFormattingBlock.formats(fmtsList);
		return richTextFormattingBlock;
	}
	/*<EndMethod Name="Infragistics.CPRichTextFormattingBlock Infragistics.CPRichTextFormattingBlock::Create(System.Int32, System.Int32, System.String)" />*/
	,
	$type: new $.ig.Type('CPRichTextFormattingBlock', $.ig.BackingStoreObjectBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichTextFormattingBlock" />*/

/*<BeginType Name="Infragistics.HybridFormattingBlock" />*/

$.ig.util.defType('HybridFormattingBlock', 'CPRichTextFormattingBlock', {
	init: function () {
		this._textColor = new $.ig.Number();
		this._backgroundColor = new $.ig.Number();
		$.ig.CPRichTextFormattingBlock.prototype.init.call(this, 0);
	},
	_textColor: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.HybridFormattingBlock::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			this._textColor = value;
			return value;
		} else {
			return this._textColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.HybridFormattingBlock::TextColor()" />*/
	,
	_backgroundColor: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.HybridFormattingBlock::BackgroundColor()" />*/
	backgroundColor: function (value) {
		if (arguments.length === 1) {
			this._backgroundColor = value;
			return value;
		} else {
			return this._backgroundColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.HybridFormattingBlock::BackgroundColor()" />*/
	,
	_stylingBlock: null,
	/*<BeginProperty Name="Infragistics.CPRichTextStylingBlock Infragistics.HybridFormattingBlock::StylingBlock()" />*/
	stylingBlock: function (value) {
		if (arguments.length === 1) {
			this._stylingBlock = value;
			return value;
		} else {
			return this._stylingBlock;
		}
	}
	/*<EndProperty Name="Infragistics.CPRichTextStylingBlock Infragistics.HybridFormattingBlock::StylingBlock()" />*/
	,
	/*<BeginMethod Name="Infragistics.HybridFormattingBlock Infragistics.HybridFormattingBlock::FromCPRichTextFormattingBlock(Infragistics.CPRichTextFormattingBlock)" />*/
	fromCPRichTextFormattingBlock: function (richTextFormattingBlock) {
		var hybridFormattingBlock = new $.ig.HybridFormattingBlock();
		hybridFormattingBlock.offset(richTextFormattingBlock.offset());
		hybridFormattingBlock.length(richTextFormattingBlock.length());
		hybridFormattingBlock.formats(richTextFormattingBlock.formats());
		return hybridFormattingBlock;
	}
	/*<EndMethod Name="Infragistics.HybridFormattingBlock Infragistics.HybridFormattingBlock::FromCPRichTextFormattingBlock(Infragistics.CPRichTextFormattingBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.HybridFormattingBlock Infragistics.HybridFormattingBlock::FromCPRichTextStylingBlock(Infragistics.CPRichTextStylingBlock)" />*/
	fromCPRichTextStylingBlock: function (richTextStylingBlock) {
		var hybridFormattingBlock = new $.ig.HybridFormattingBlock();
		hybridFormattingBlock.offset(richTextStylingBlock.start());
		hybridFormattingBlock.length(richTextStylingBlock.end() - richTextStylingBlock.start());
		hybridFormattingBlock.textColor(richTextStylingBlock.textColor());
		hybridFormattingBlock.backgroundColor(richTextStylingBlock.backgroundColor());
		hybridFormattingBlock.stylingBlock(richTextStylingBlock);
		return hybridFormattingBlock;
	}
	/*<EndMethod Name="Infragistics.HybridFormattingBlock Infragistics.HybridFormattingBlock::FromCPRichTextStylingBlock(Infragistics.CPRichTextStylingBlock)" />*/
	,
	$type: new $.ig.Type('HybridFormattingBlock', $.ig.CPRichTextFormattingBlock.prototype.$type)
}, true);

/*<EndType Name="Infragistics.HybridFormattingBlock" />*/

/*<BeginType Name="Infragistics.ScrollEventProcessorDelegate" />*/

$.ig.util.defType('ScrollEventProcessorDelegate', 'Object', {
	$type: new $.ig.Type('ScrollEventProcessorDelegate', null)
}, true);

/*<EndType Name="Infragistics.ScrollEventProcessorDelegate" />*/

/*<BeginType Name="Infragistics.CPScrollViewBase" />*/

$.ig.util.defType('CPScrollViewBase', 'CPViewBase', {
	init: function () {
		this.__prevZoomScale = 1;
		$.ig.CPViewBase.prototype.init.call(this);
	},
	_scrollDelegate: null,
	/*<BeginProperty Name="Infragistics.CPScrollViewDelegate Infragistics.CPScrollViewBase::ScrollDelegate()" />*/
	scrollDelegate: function (value) {
		if (arguments.length === 1) {
			this._scrollDelegate = value;
			return value;
		} else {
			return this._scrollDelegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPScrollViewDelegate Infragistics.CPScrollViewBase::ScrollDelegate()" />*/
	,
	__scrollHelper: null,
	__verticalScrollBarView: null,
	__horizontalScrollBarView: null,
	__verticalScrollBarIsHidden: false,
	__horizontalScrollBarIsHidden: false,
	__scrollBarOpacityTimer: null,
	__animateScrollTimer: null,
	__prevZoomScale: 0,
	__horizontalAlwaysVisible: false,
	__verticalAlwaysVisible: false,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::Setup()" />*/
	setup: function () {
		var $self = this;
		$.ig.CPViewBase.prototype.setup.call(this);
		this.__scrollHelper = new $.ig.ScrollEventProcessor();
		this.__scrollHelper._scrollHelperDelegate = this;
		this.clipToBounds(true);
		this.__verticalScrollBarView = new $.ig.CPScrollBarView(true);
		this.__verticalScrollBarView._thumbMoved = function (drag, newLocation) {
			$self.verticalThumbMoved(drag, $.ig.util.getValue(newLocation));
		};
		this.__verticalScrollBarView._thumbReleased = function () {
			$self.verticalThumbReleased();
		};
		this.addSubview(this.__verticalScrollBarView);
		this.__horizontalScrollBarView = new $.ig.CPScrollBarView(false);
		this.__horizontalScrollBarView._thumbMoved = function (drag, newLocation) {
			$self.horizontalThumbMoved(drag, $.ig.util.getValue(newLocation));
		};
		this.__horizontalScrollBarView._thumbReleased = function () {
			$self.horizontalThumbReleased();
		};
		this.addSubview(this.__horizontalScrollBarView);
		this.__scrollBarOpacityTimer = new $.ig.CPTimer();
		this.__animateScrollTimer = new $.ig.CPTimer();
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__verticalScrollBarView, "verticalScrollBarView");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__horizontalScrollBarView, "horizontalScrollBarView");
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetCanScroll(System.Boolean)" />*/
	setCanScroll: function (canScroll) {
		if (canScroll) {
			this.enable();
		} else {
			this.disable();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetCanScroll(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetScrollbarsAlwaysVisible(System.Boolean, System.Boolean)" />*/
	setScrollbarsAlwaysVisible: function (horizontalAlwaysVisible, verticalAlwaysVisible) {
		this.__horizontalAlwaysVisible = horizontalAlwaysVisible;
		this.__verticalAlwaysVisible = verticalAlwaysVisible;
		this.__horizontalScrollBarView._alwaysVisible = this.__horizontalAlwaysVisible;
		this.__verticalScrollBarView._alwaysVisible = this.__verticalAlwaysVisible;
		this.updateScrollBars(!this.__horizontalAlwaysVisible, !this.__verticalAlwaysVisible);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetScrollbarsAlwaysVisible(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPScrollViewBase::GetPagingKeyCommands()" />*/
	getPagingKeyCommands: function () {
		var $self = this;
		var commands = new $.ig.Array();
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.home(), function (k) {
			$self.scrollTo(0, 0);
		}));
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.end(), function (k) {
			$self.scrollTo(0, $self.getContentHeight() - $self.currentHeight());
		}));
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.pageUp), function (k) {
			$self.animateScrollTo(0, Math.max(0, $self.getContentOffsetY() - $self.currentHeight()));
		}));
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.pageDown), function (k) {
			$self.animateScrollTo(0, Math.min($self.getContentHeight() - $self.currentHeight(), $self.getContentOffsetY() + $self.currentHeight()));
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPScrollViewBase::GetPagingKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::HorizontalThumbReleased()" />*/
	horizontalThumbReleased: function () {
		if (this.__scrollHelper._interceptHPosAction != null) {
			var currentOffsetX = this.getContentOffsetX();
			var updatedOffsetX = this.getAdjustedHorizontalOffset(currentOffsetX);
			if (currentOffsetX != updatedOffsetX) {
				this.animateScrollTo(updatedOffsetX, this.getContentOffsetY());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::HorizontalThumbReleased()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::VerticalThumbReleased()" />*/
	verticalThumbReleased: function () {
		if (this.__scrollHelper._interceptVPosAction != null) {
			var currentOffsetY = this.getContentOffsetY();
			var updatedOffsetY = this.getAdjustedVerticalOffset(currentOffsetY);
			if (currentOffsetY != updatedOffsetY) {
				this.animateScrollTo(this.getContentOffsetX(), updatedOffsetY);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::VerticalThumbReleased()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetAdjustedHorizontalOffset(System.Int32)" />*/
	getAdjustedHorizontalOffset: function (offset) {
		if (this.__scrollHelper._interceptHPosAction != null) {
			return $.ig.truncate(this.__scrollHelper._interceptHPosAction(offset));
		}
		return offset;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetAdjustedHorizontalOffset(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetAdjustedVerticalOffset(System.Int32)" />*/
	getAdjustedVerticalOffset: function (offset) {
		if (this.__scrollHelper._interceptVPosAction != null) {
			return $.ig.truncate(this.__scrollHelper._interceptVPosAction(offset));
		}
		return offset;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetAdjustedVerticalOffset(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::VerticalThumbMoved(System.Boolean, System.Int32)" />*/
	verticalThumbMoved: function (drag, newLocation) {
		if (drag) {
			this.__scrollHelper.scrollTo(this.getContentOffsetX(), newLocation);
		} else {
			this.animateScrollTo(this.getContentOffsetX(), this.getAdjustedVerticalOffset(newLocation));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::VerticalThumbMoved(System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::HorizontalThumbMoved(System.Boolean, System.Int32)" />*/
	horizontalThumbMoved: function (drag, newLocation) {
		if (drag) {
			this.__scrollHelper.scrollTo(newLocation, this.getContentOffsetY());
		} else {
			this.animateScrollTo(this.getAdjustedHorizontalOffset(newLocation), this.getContentOffsetY());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::HorizontalThumbMoved(System.Boolean, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::RequiresTouchSlopForMove()" />*/
	requiresTouchSlopForMove: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::RequiresTouchSlopForMove()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::HandlesTouchEvents()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetContentSize(System.Int32, System.Int32)" />*/
	setContentSize: function (width, height) {
		this.__scrollHelper.setContentSize(width, height);
		this.updateScrollBars(!this.__horizontalAlwaysVisible, !this.__verticalAlwaysVisible);
		this.positionChildren();
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetContentSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentOffsetX()" />*/
	getContentOffsetX: function () {
		return this.__prevOffsetX;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentOffsetX()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentOffsetY()" />*/
	getContentOffsetY: function () {
		return this.__prevOffsetY;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentOffsetY()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentWidth()" />*/
	getContentWidth: function () {
		return $.ig.truncate(this.__scrollHelper.contentWidth());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentHeight()" />*/
	getContentHeight: function () {
		return $.ig.truncate(this.__scrollHelper.contentHeight());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollViewBase::GetContentHeight()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPScrollViewBase::ZoomScale()" />*/
	zoomScale: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.zoomScale(value);
			return value;
		} else {
			return this.__scrollHelper.zoomScale();
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPScrollViewBase::ZoomScale()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPScrollViewBase::MaximumZoomScale()" />*/
	maximumZoomScale: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.maximumZoomScale(value);
			return value;
		} else {
			return this.__scrollHelper.maximumZoomScale();
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPScrollViewBase::MaximumZoomScale()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPScrollViewBase::MinimumZoomScale()" />*/
	minimumZoomScale: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.minimumZoomScale(value);
			return value;
		} else {
			return this.__scrollHelper.minimumZoomScale();
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPScrollViewBase::MinimumZoomScale()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollTo(System.Int32, System.Int32)" />*/
	scrollTo: function (x, y) {
		this.__scrollHelper.scrollTo(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollTo(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::AnimateScrollTo(System.Int32, System.Int32)" />*/
	animateScrollTo: function (x, y) {
		var $self = this;
		var fx = this.getContentOffsetX();
		var fy = this.getContentOffsetY();
		this.__animateScrollTimer.start(0.2, function (percent) {
			$self.animateScrollTick(fx, fy, x, y, percent);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::AnimateScrollTo(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::AnimateScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	animateScrollTick: function (fx, fy, tx, ty, p) {
		this.scrollTo($.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fx, tx, p)), $.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fy, ty, p)));
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::AnimateScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::OnScrollChanged(System.Int32, System.Int32)" />*/
	onScrollChanged: function (x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::OnScrollChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::ForceMeasureAndLayout()" />*/
	forceMeasureAndLayout: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::ForceMeasureAndLayout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetScrollBarVisiblitity(System.Boolean, System.Boolean)" />*/
	setScrollBarVisiblitity: function (horizontal, vertical) {
		this.__horizontalScrollBarIsHidden = !horizontal;
		this.__verticalScrollBarIsHidden = !vertical;
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetScrollBarVisiblitity(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::AlwaysBounceVertical()" />*/
	alwaysBounceVertical: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.alwaysBounceVertical(value);
			return value;
		} else {
			return this.__scrollHelper.alwaysBounceVertical();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::AlwaysBounceVertical()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::DirectionalLockEnabled()" />*/
	directionalLockEnabled: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.directionalLockEnabled(value);
			return value;
		} else {
			return this.__scrollHelper.directionalLockEnabled();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::DirectionalLockEnabled()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::AllowMouseDrag()" />*/
	allowMouseDrag: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.allowMouseDrag(value);
			return value;
		} else {
			return this.__scrollHelper.allowMouseDrag();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::AllowMouseDrag()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::AlwaysBounceHorizontal()" />*/
	alwaysBounceHorizontal: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.alwaysBounceHorizontal(value);
			return value;
		} else {
			return this.__scrollHelper.alwaysBounceHorizontal();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::AlwaysBounceHorizontal()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::PagingEnabled()" />*/
	pagingEnabled: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.pagingEnabled(value);
			return value;
		} else {
			return this.__scrollHelper.pagingEnabled();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::PagingEnabled()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPScrollViewBase::ViewportWidth()" />*/
	viewportWidth: function () {
		return this.currentWidth();
	}
	/*<EndProperty Name="System.Double Infragistics.CPScrollViewBase::ViewportWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPScrollViewBase::ViewportHeight()" />*/
	viewportHeight: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Double Infragistics.CPScrollViewBase::ViewportHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollViewBase::PinchGestureEnabled()" />*/
	pinchGestureEnabled: function (value) {
		if (arguments.length === 1) {
			this.__scrollHelper.pinchGestureIsEnabled(value);
			return value;
		} else {
			return this.__scrollHelper.isPinchGestureEnabled();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollViewBase::PinchGestureEnabled()" />*/
	,
	__prevOffsetX: 0,
	__prevOffsetY: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollPositionUpdated()" />*/
	scrollPositionUpdated: function () {
		var newOffsetX = $.ig.truncate(this.__scrollHelper.contentOffsetX());
		var newOffsetY = $.ig.truncate(this.__scrollHelper.contentOffsetY());
		if (newOffsetX != this.__prevOffsetX || newOffsetY != this.__prevOffsetY) {
			this.__prevOffsetY = newOffsetY;
			this.__prevOffsetX = newOffsetX;
			this.positionChildren();
			this.onScrollChanged(newOffsetX, newOffsetY);
			this.updateScrollBars(false, false);
			if (this.__prevZoomScale != this.__scrollHelper.zoomScale()) {
				this.__prevZoomScale = this.__scrollHelper.zoomScale();
				if (this.scrollDelegate() != null) {
					this.scrollDelegate().scrollViewDidZoom(this);
				}
			}
			if (this.scrollDelegate() != null) {
				this.scrollDelegate().scrollViewDidScroll(this);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollPositionUpdated()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::UpdateScrollBars(System.Boolean, System.Boolean)" />*/
	updateScrollBars: function (hideHorizontal, hideVertical) {
		if (!this.__verticalScrollBarIsHidden) {
			if (this.getContentHeight() >= this.currentHeight()) {
				if (this.__verticalScrollBarView._isScrollBarVisible && !hideVertical) {
					this.startScrollBarOpacityTimer();
				}
				this.__verticalScrollBarView.updateScrollBar(this.getContentOffsetY() + this.topInset(), this.currentHeight(), this.getContentHeight() + this.topInset(), hideVertical);
			}
		} else {
			this.__verticalScrollBarView.updateScrollBar(0, this.currentHeight(), 0, true);
		}
		if (!this.__horizontalScrollBarIsHidden) {
			if (this.getContentWidth() >= this.currentWidth()) {
				if (this.__horizontalScrollBarView._isScrollBarVisible && !hideHorizontal) {
					this.startScrollBarOpacityTimer();
				}
				this.__horizontalScrollBarView.updateScrollBar(this.getContentOffsetX() + this.leftInset(), this.currentWidth(), this.getContentWidth() + this.leftInset(), hideHorizontal);
			}
		} else {
			this.__horizontalScrollBarView.updateScrollBar(0, this.currentWidth(), 0, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::UpdateScrollBars(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::StartScrollBarOpacityTimer()" />*/
	startScrollBarOpacityTimer: function () {
		var $self = this;
		this.__scrollBarOpacityTimer.stop();
		this.__scrollBarOpacityTimer.start($.ig.ThemeManager.prototype.theme().animationDuration(), function (percent) {
			if (percent == 1) {
				$self.__verticalScrollBarView.animateUpdateScrollBar($self.getContentOffsetY() + $self.topInset(), $self.currentHeight(), $self.getContentHeight() + $self.topInset(), true);
				$self.__horizontalScrollBarView.animateUpdateScrollBar($self.getContentOffsetX() + $self.leftInset(), $self.currentWidth(), $self.getContentWidth() + $self.leftInset(), true);
				$self.__scrollBarOpacityTimer.stop();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::StartScrollBarOpacityTimer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		$.ig.CPViewBase.prototype.addSubview.call(this, subView);
		this.__subviewAddedSinceLastCheck = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::PositionChildren()" />*/
	positionChildren: function () {
		var count = this.getChildCount();
		var zoomView = this.scrollDelegate() != null ? this.scrollDelegate().viewForZoomingInScrollView(this) : null;
		for (var i = 0; i < count; i++) {
			var child = this.getChildAt(i);
			if (child != this.__verticalScrollBarView && child != this.__horizontalScrollBarView) {
				if (child == zoomView) {
					this.measureView1(child, -this.__prevOffsetX, -this.__prevOffsetY, $.ig.truncate(this.__scrollHelper.contentWidth()), $.ig.truncate(this.__scrollHelper.contentHeight()), 1);
				} else if (child.scalable()) {
					this.measureView1(child, -this.__prevOffsetX, -this.__prevOffsetY, $.ig.truncate(this.__scrollHelper.contentWidth()), $.ig.truncate(this.__scrollHelper.contentHeight()), 1);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::PositionChildren()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollAnimationComplete()" />*/
	scrollAnimationComplete: function () {
		if (this.scrollDelegate() != null) {
			this.scrollDelegate().scrollViewDidEndDecelerating(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::ScrollAnimationComplete()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.__scrollHelper.handleMouseDown(x, y);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		var isScrolling = this.__scrollHelper.handleMouseMove(x, y);
		if (this.scrollDelegate() != null) {
			this.scrollDelegate().scrollViewDidScroll(this);
		}
		return isScrolling;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this.__scrollHelper.handleMouseUp();
		if (this.scrollDelegate() != null) {
			var decelerate = this.__scrollHelper.isScrollAnimationRunning();
			this.scrollDelegate().scrollViewDidEndDragging(this, decelerate);
			if (decelerate) {
				this.scrollDelegate().scrollViewWillBeginDecelerating(this);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandleTouchesStart(, , System.Boolean)" />*/
	handleTouchesStart: function (x, y, quietly) {
		if (this.handlesTouchEvents()) {
			this.__scrollHelper.handleTouchStart(x, y);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandleTouchesStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		if (this.handlesTouchEvents()) {
			return this.__scrollHelper.handleTouchMove(x, y);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::HandleTouchesEnd(System.Int32)" />*/
	handleTouchesEnd: function (count) {
		if (this.handlesTouchEvents()) {
			this.__scrollHelper.handleTouchEnd(count);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::HandleTouchesEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::BeginTouchStart(, , System.Boolean)" />*/
	beginTouchStart: function (x, y, quietly) {
		return this.handleTouchesStart(x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::BeginTouchStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollViewBase::BeginTouchMove(, )" />*/
	beginTouchMove: function (x, y) {
		return this.handleTouchesMove(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollViewBase::BeginTouchMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::BeginTouchEnd(System.Int32)" />*/
	beginTouchEnd: function (count) {
		this.handleTouchesEnd(count);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::BeginTouchEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetInsets(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setInsets: function (top, left, bottom, right) {
		if (this.__scrollHelper.setInsets(top, left, bottom, right)) {
			this.__prevOffsetX = -left;
			this.__prevOffsetY = -top;
			this.__verticalScrollBarView._frontInset = top;
			this.__horizontalScrollBarView._frontInset = left;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetInsets(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollViewBase::TopInset()" />*/
	topInset: function () {
		return $.ig.truncate(this.__scrollHelper._topInset);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollViewBase::TopInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollViewBase::LeftInset()" />*/
	leftInset: function () {
		return $.ig.truncate(this.__scrollHelper._leftInset);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollViewBase::LeftInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollViewBase::BottomInset()" />*/
	bottomInset: function () {
		return $.ig.truncate(this.__scrollHelper._bottomInset);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollViewBase::BottomInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollViewBase::RightInset()" />*/
	rightInset: function () {
		return $.ig.truncate(this.__scrollHelper._rightInset);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollViewBase::RightInset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetInterceptHorizontalScroll(Infragistics.UpdateValueBlock)" />*/
	setInterceptHorizontalScroll: function (block) {
		this.__scrollHelper.setInterceptHorizontalScroll(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetInterceptHorizontalScroll(Infragistics.UpdateValueBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SetInterceptVerticalScroll(Infragistics.UpdateValueBlock)" />*/
	setInterceptVerticalScroll: function (block) {
		this.__scrollHelper.setInterceptVerticalScroll(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SetInterceptVerticalScroll(Infragistics.UpdateValueBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::MeasureHorizontalScrollBar(System.Int32)" />*/
	measureHorizontalScrollBar: function (viewPortWidth) {
		var scrollbarThickness = $.ig.ThemeManager.prototype.theme().padding15();
		this.measureView1(this.__horizontalScrollBarView, 0, this.currentHeight() - scrollbarThickness, viewPortWidth, scrollbarThickness, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::MeasureHorizontalScrollBar(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::MeasureVerticalScrollBar(System.Int32)" />*/
	measureVerticalScrollBar: function (viewPortHeight) {
		var scrollbarThickness = $.ig.ThemeManager.prototype.theme().padding15();
		this.measureView1(this.__verticalScrollBarView, this.currentWidth() - scrollbarThickness, 0, scrollbarThickness, viewPortHeight, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::MeasureVerticalScrollBar(System.Int32)" />*/
	,
	__subviewAddedSinceLastCheck: false,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureHorizontalScrollBar(w);
		this.measureVerticalScrollBar(h);
		if (this.__horizontalScrollBarView != null && this.__subviewAddedSinceLastCheck) {
			this.__horizontalScrollBarView.bringToFront();
		}
		if (this.__verticalScrollBarView != null && this.__subviewAddedSinceLastCheck) {
			this.__verticalScrollBarView.bringToFront();
		}
		this.__subviewAddedSinceLastCheck = false;
		this.updateScrollBars(true, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPScrollViewBase', $.ig.CPViewBase.prototype.$type, [$.ig.ScrollEventProcessorDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPScrollViewBase" />*/

/*<BeginType Name="Infragistics.CPScrollView" />*/

$.ig.util.defType('CPScrollView', 'CPScrollViewBase', {
	init: function () {
		$.ig.CPScrollViewBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPScrollView::Setup()" />*/
	setup: function () {
		$.ig.CPScrollViewBase.prototype.setup.call(this);
		this._element[0].setAttribute("ViewType", "ScrollView");
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollView::AttachEvents()" />*/
	attachEvents: function () {
		var $self = this;
		$.ig.CPScrollViewBase.prototype.attachEvents.call(this);
		this._element.unbind("scroll");
		this._element.bind("scroll", function (e) {
			$self.onScrollFired(e);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollView::AttachEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollView::OnScrollFired(System.JQuery.JQueryEvent)" />*/
	onScrollFired: function (e) {
		this._element[0].scrollTop = 0;
		this._element[0].scrollLeft = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollView::OnScrollFired(System.JQuery.JQueryEvent)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollView::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollView::HandlesTouchEvents()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollView::HandlesScrollWheelEvents()" />*/
	handlesScrollWheelEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollView::HandlesScrollWheelEvents()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollView::HandlesMouseEvents()" />*/
	handlesMouseEvents: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollView::HandlesMouseEvents()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	handleScrollWheel: function (x, y, deltaX, deltaY) {
		return this.__scrollHelper.handleMouseWheel(x, y, 0, deltaY);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollView::HandleScrollWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollView::HandleTouchesStart(, , System.Boolean)" />*/
	handleTouchesStart: function (x, y, quietly) {
		this.__scrollHelper.handleTouchStart(x, y);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollView::HandleTouchesStart(, , System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollView::HandleTouchesMove(, )" />*/
	handleTouchesMove: function (x, y) {
		return this.__scrollHelper.handleTouchMove(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollView::HandleTouchesMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollView::HandleTouchesEnd(System.Int32)" />*/
	handleTouchesEnd: function (count) {
		this.__scrollHelper.handleTouchEnd(count);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollView::HandleTouchesEnd(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPScrollView', $.ig.CPScrollViewBase.prototype.$type, [$.ig.ScrollEventProcessorDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPScrollView" />*/

/*<BeginType Name="Infragistics.CPView" />*/

$.ig.util.defType('CPView', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__bw: 0,
	__bc: null,
	__border: null,
	/*<BeginMethod Name="System.Void Infragistics.CPView::SetupBorder()" />*/
	setupBorder: function () {
		this.__border = new $.ig.CPViewBase();
		this.__border._element.css("pointer-events", "none");
		$.ig.CPViewBase.prototype.addSubview.call(this, this.__border);
		if (this.__cornerRadius > 0) {
			this.ensureBorderCornerRadius();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::SetupBorder()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::EnsureBorder()" />*/
	ensureBorder: function () {
		if (this.__border == null) {
			this.setupBorder();
			if (this.currentWidth() != 0 && this.currentHeight() != 0) {
				this.sizeChanged(this.currentWidth(), this.currentHeight());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::EnsureBorder()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		$.ig.CPViewBase.prototype.addSubview.call(this, subView);
		if (this.__border != null && subView != this.__border) {
			this.__border.bringToFront();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPView::GetBorderWidth()" />*/
	getBorderWidth: function () {
		return this.__bw;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPView::GetBorderWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::SetBorderWidth(System.Int32)" />*/
	setBorderWidth: function (width) {
		this.ensureBorder();
		this.__bw = width;
		this.__border._element[0].style.border = width + "px solid";
		this.__border._element.css("-webkit-box-sizing", "border-box");
		this.__border._element.css("-moz-box-sizing", "border-box");
		this.__border._element.css("box-sizing", "border-box");
		if (this.__bc != null) {
			this.__border._element[0].style.borderColor = this.__bc;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::SetBorderWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::SetBorderColor(System.String)" />*/
	setBorderColor: function (color) {
		this.ensureBorder();
		this.__bc = color;
		this.__border._element[0].style.borderColor = color;
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::SetBorderColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::AddShadow(System.ColorInt, System.Int32, System.Int32)" />*/
	addShadow: function (color, y, blur) {
		this._element.css("box-shadow", "0px " + y + "px " + blur + "px " + $.ig.ColorUtility.prototype.convertToNative(color));
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::AddShadow(System.ColorInt, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPView::GetBorderColor()" />*/
	getBorderColor: function () {
		return this.__bc;
	}
	/*<EndMethod Name="System.String Infragistics.CPView::GetBorderColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::ClipElement(System.Boolean)" />*/
	clipElement: function (clip) {
		$.ig.CPViewBase.prototype.clipElement.call(this, clip);
		if (clip) {
			this._element.css("-webkit-clip-path", "border-box");
		} else {
			this._element.css("-webkit-clip-path", "");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::ClipElement(System.Boolean)" />*/
	,
	__cornerRadius: 0,
	/*<BeginMethod Name="System.Double Infragistics.CPView::GetCornerRadius()" />*/
	getCornerRadius: function () {
		return this.__cornerRadius;
	}
	/*<EndMethod Name="System.Double Infragistics.CPView::GetCornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::SetCornerRadius(System.Double)" />*/
	setCornerRadius: function (cornerRadius) {
		this.__cornerRadius = cornerRadius;
		this.ensureBorderCornerRadius();
		this._element[0].style.borderRadius = cornerRadius + "px";
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::SetCornerRadius(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::EnsureBorderCornerRadius()" />*/
	ensureBorderCornerRadius: function () {
		if (this.__border != null) {
			this.__border._element[0].style.borderRadius = this.__cornerRadius + "px";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::EnsureBorderCornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		if (this.__border != null) {
			this.measureView1(this.__border, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPView" />*/

/*<BeginType Name="Infragistics.DrawingViewBase" />*/

$.ig.util.defType('DrawingViewBase', 'CPViewBase', {
	init: function () {
		this._pI = Math.PI;
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__context: null,
	__scaleFactor: 0,
	_pI: 0,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::Setup()" />*/
	setup: function () {
		var canvas = this._element[0];
		this.__context = canvas.getContext("2d");
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::Setup()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.DrawingViewBase::SupportsGlyphs()" />*/
	supportsGlyphs: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.DrawingViewBase::SupportsGlyphs()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.DrawingViewBase::BackingScale()" />*/
	backingScale: function () {
		if (('devicePixelRatio' in window) && (window.devicePixelRatio > 1)) return window.devicePixelRatio;
		return 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.DrawingViewBase::BackingScale()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::ApplyScaling(System.Int32, System.Int32)" />*/
	applyScaling: function (w, h) {
		var scaleFactor = this.backingScale();
		this.__scaleFactor = scaleFactor;
		var canvas = this._element[0];
		var oldWidth = w;
		var oldHeight = h;
		canvas.width = oldWidth * scaleFactor;
		canvas.height = oldHeight * scaleFactor;
		canvas.style.width = oldWidth + "px";
		canvas.style.height = oldHeight + "px";
		this.__context.scale(scaleFactor, scaleFactor);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::ApplyScaling(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.DrawingViewBase::CreateElement()" />*/
	createElement: function () {
		return $("<canvas></canvas>");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.DrawingViewBase::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.applyScaling(w, h);
		this.render1(false);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::AttachEvents()" />*/
	attachEvents: function () {
		$.ig.CPViewBase.prototype.attachEvents.call(this);
		this._element.on('dragstart', function(event) { event.preventDefault(); });;
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::AttachEvents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::RenderInternal(System.Int32, System.Int32, System.Object)" />*/
	renderInternal: function (width, height, info) {
		if (width > 0 && height > 0) {
			this.__context.clearRect(0, 0, width, height);
			this.__context.save();
			this.draw(this.__context, width, height, info);
			this.__context.restore();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::RenderInternal(System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::Render(System.Boolean)" />*/
	render1: function (async) {
		this.renderInternal(this.currentWidth(), this.currentHeight(), this.resolveDrawingInfo());
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::Render(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.DrawingViewBase::Render(System.Int32, System.Int32, System.Object)" />*/
	render: function (width, height, info) {
		if (width > 0 && height > 0) {
			var canvas = this._element[0];
			this.renderInternal(width, height, info);
			return canvas.toDataURL();
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.DrawingViewBase::Render(System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.DrawingViewBase::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		return null;
	}
	/*<EndMethod Name="System.Object Infragistics.DrawingViewBase::ResolveDrawingInfo()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.DrawingViewBase::GetColor(System.ColorInt)" />*/
	getColor: function (color) {
		if (typeof color == "string") return color;
		var r = $.ig.ColorUtility.prototype.getRed(color);
		var g = $.ig.ColorUtility.prototype.getGreen(color);
		var b = $.ig.ColorUtility.prototype.getBlue(color);
		var a = $.ig.ColorUtility.prototype.getAlpha(color) / 255;
		return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
	}
	/*<EndMethod Name="System.String Infragistics.DrawingViewBase::GetColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::FillShape(System.CanvasContext, System.ColorInt, System.ColorInt, System.Single)" />*/
	fillShape: function (context, fillColor, strokeColor, strokeWidth) {
		this.fillShape1(context, fillColor, strokeColor, strokeWidth, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.miter);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::FillShape(System.CanvasContext, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::FillShape(System.CanvasContext, System.ColorInt, System.ColorInt, System.Single, Infragistics.CPStrokeCap, Infragistics.CPStrokeJoin)" />*/
	fillShape1: function (context, fillColor, strokeColor, strokeWidth, cap, join) {
		if (fillColor != 0) {
			context.fillStyle = this.getColor(fillColor);
			context.fill();
		}
		if (strokeColor != 0 && strokeWidth > 0) {
			if (cap == $.ig.CPStrokeCap.prototype.butt) {
				context.lineCap = "butt";
			} else if (cap == $.ig.CPStrokeCap.prototype.round) {
				context.lineCap = "round";
			} else if (cap == $.ig.CPStrokeCap.prototype.square) {
				context.lineCap = "square";
			}
			if (join == $.ig.CPStrokeJoin.prototype.bevel) {
				context.lineJoin = "bevel";
			} else if (join == $.ig.CPStrokeJoin.prototype.miter) {
				context.lineJoin = "miter";
			} else if (join == $.ig.CPStrokeJoin.prototype.round) {
				context.lineJoin = "round";
			}
			context.lineWidth = strokeWidth;
			context.strokeStyle = this.getColor(strokeColor);
			context.stroke();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::FillShape(System.CanvasContext, System.ColorInt, System.ColorInt, System.Single, Infragistics.CPStrokeCap, Infragistics.CPStrokeJoin)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::FillGradientShape(System.CanvasContext, Infragistics.CPLinearGradientBrush, System.Single, System.Single)" />*/
	fillGradientShape: function (context, brush, w, h) {
		if (brush != null) {
			var x1 = brush._start._x / 100 * w;
			var y1 = brush._start._y / 100 * h;
			var x2 = brush._end._x / 100 * w;
			var y2 = brush._end._y / 100 * h;
			var gradient = context.createLinearGradient(x1, y1, x2, y2);
			for (var i = 0; i < brush.colors().length; i++) {
				gradient.addColorStop(brush.stops()[i] / 100, this.getColor(brush.colors()[i]));
			}
			context.fillStyle = gradient;
			context.fill();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::FillGradientShape(System.CanvasContext, Infragistics.CPLinearGradientBrush, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawImage(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single)" />*/
	drawImage1: function (context, image, x, y, w, h) {
		var img = $("<img/>");
		img.attr("src", image);
		img.on("load", function (e) {
			context.save();
			context.drawImage(img[0], x, y, w, h);
			context.restore();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawImage(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawImage(System.CanvasContext, System.Html.ImageElement, System.Single, System.Single, System.Single, System.Single)" />*/
	drawImage: function (context, image, x, y, w, h) {
		context.save();
		context.drawImage(image, x, y, w, h);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawImage(System.CanvasContext, System.Html.ImageElement, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawLine(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	drawLine: function (context, x1, y1, x2, y2, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		this.fillShape(context, 0, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawLine(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawComplexLine(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	drawComplexLine: function (context, x1, y1, x2, y2, x3, y3, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		context.lineTo(x3, y3);
		this.fillShape(context, 0, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawComplexLine(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawRect(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawRect: function (context, x, y, w, h, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		var offset = strokeWidth / 2;
		context.rect(x + offset, y + offset, w - strokeWidth, h - strokeWidth);
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.closePath();
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawRect(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawRoundedRect(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawRoundedRect: function (context, x, y, w, h, r, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x + r, y);
		context.arcTo(x + w, y, x + w, y + h, r);
		context.arcTo(x + w, y + h, x, y + h, r);
		context.arcTo(x, y + h, x, y, r);
		context.arcTo(x, y, x + w, y, r);
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.closePath();
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawRoundedRect(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCircle(System.CanvasContext, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCircle: function (context, x, y, radius, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.arc(x, y, radius, 0, 2 * this._pI, false);
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCircle(System.CanvasContext, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawEllipse(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawEllipse: function (context, x1, y1, x2, y2, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		var offset = strokeWidth / 2;
		x1 += offset;
		y1 += offset;
		x2 -= offset;
		y2 -= offset;
		var centerX = (x1 + x2) / 2;
		var centerY = (y1 + y2) / 2;
		var radiusX = Math.abs(centerX - x1);
		var radiusY = Math.abs(centerY - y1);
		context.translate(centerX - radiusX, centerY - radiusY);
		context.scale(radiusX, radiusY);
		context.arc(1, 1, 1, 0, 2 * this._pI, false);
		context.restore();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawEllipse(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::AddShadow(System.CanvasContext, System.ColorInt, System.Single, System.Single, System.Single)" />*/
	addShadow: function (context, shadowColor, offsetX, offsetY, blur) {
		context.shadowBlur = blur;
		context.shadowOffsetX = offsetX;
		context.shadowOffsetY = offsetY;
		context.shadowColor = this.getColor(shadowColor);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::AddShadow(System.CanvasContext, System.ColorInt, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::ResetPath(System.CanvasContext)" />*/
	resetPath: function (canvas) {
		canvas.beginPath();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::ResetPath(System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::ClosePath(System.CanvasContext)" />*/
	closePath: function (canvas) {
		canvas.closePath();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::ClosePath(System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::SaveCanvas(System.CanvasContext)" />*/
	saveCanvas: function (canvas) {
		canvas.save();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::SaveCanvas(System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::RestoreCanvas(System.CanvasContext)" />*/
	restoreCanvas: function (canvas) {
		canvas.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::RestoreCanvas(System.CanvasContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::MoveTo(System.CanvasContext, System.Single, System.Single)" />*/
	moveTo: function (canvas, x, y) {
		canvas.moveTo(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::MoveTo(System.CanvasContext, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::LineTo(System.CanvasContext, System.Single, System.Single)" />*/
	lineTo: function (canvas, x, y) {
		canvas.lineTo(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::LineTo(System.CanvasContext, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::CubicTo(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	cubicTo: function (canvas, x0, y0, x1, y1, x2, y2) {
		canvas.bezierCurveTo(x0, y0, x1, y1, x2, y2);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::CubicTo(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::TranslateCanvas(System.CanvasContext, System.Single, System.Single)" />*/
	translateCanvas: function (canvas, x, y) {
		canvas.translate(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::TranslateCanvas(System.CanvasContext, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::RotateCanvas(System.CanvasContext, System.Single)" />*/
	rotateCanvas: function (canvas, radians) {
		canvas.rotate(radians);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::RotateCanvas(System.CanvasContext, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCustomShape1: function (context, x1, y1, x2, y2, x3, y3, x4, y4, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		context.lineTo(x3, y3);
		context.lineTo(x4, y4);
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawSlice(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawSlice: function (context, x, y, w, h, startDegrees, endDegrees, innerExtent, outerExtent, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		var radius = Math.min(w, h) / 2;
		var centerX = x + w / 2;
		var centerY = y + h / 2;
		var startRadians = this.convertDegreesToRadians(startDegrees);
		var endRadians = this.convertDegreesToRadians(endDegrees);
		context.arc(centerX, centerY, radius * outerExtent, startRadians, endRadians, false);
		var localX = this.translateX(centerX, radius * innerExtent, endRadians);
		var localY = this.translateY(centerY, radius * innerExtent, endRadians);
		context.lineTo(localX, localY);
		context.arc(centerX, centerY, radius * innerExtent, endRadians, startRadians, true);
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawSlice(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawPentagram(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32)" />*/
	drawPentagram: function (context, centerX, centerY, outerRadius, innerRadius, fillColor, strokeColor, strokeWidth) {
		context.save();
		var angle = 0;
		var x1, x2, y1, y2;
		context.moveTo(centerX, centerY - outerRadius);
		for (var i = 0; i < 5; i++) {
			x1 = centerX + outerRadius * Math.sin(angle);
			y1 = centerY - outerRadius * Math.cos(angle);
			x2 = centerX + innerRadius * Math.sin(angle + Math.PI / 5);
			y2 = centerY - innerRadius * Math.cos(angle + Math.PI / 5);
			context.lineTo(x1, y1);
			context.lineTo(x2, y2);
			angle += 2 * Math.PI / 5;
		}
		;
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawPentagram(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.DrawingViewBase::ConvertDegreesToRadians(System.Single)" />*/
	convertDegreesToRadians: function (degrees) {
		return degrees * (Math.PI / 180);
	}
	/*<EndMethod Name="System.Single Infragistics.DrawingViewBase::ConvertDegreesToRadians(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.DrawingViewBase::TranslateX(System.Single, System.Single, System.Single)" />*/
	translateX: function (x, distance, radians) {
		return x + (distance * Math.cos(radians));
	}
	/*<EndMethod Name="System.Single Infragistics.DrawingViewBase::TranslateX(System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.DrawingViewBase::TranslateY(System.Single, System.Single, System.Single)" />*/
	translateY: function (y, distance, radians) {
		return y + (distance * Math.sin(radians));
	}
	/*<EndMethod Name="System.Single Infragistics.DrawingViewBase::TranslateY(System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single)" />*/
	drawText1: function (context, text, w, h, textColor, font, fontSize) {
		context.fillStyle = $.ig.ColorUtility.prototype.convertToNative(textColor);
		context.font = fontSize + "px " + font;
		this.measureText(text, font, fontSize);
		context.fillText(text, w / 2 - this.__measuredTextWidth / 2, h / 2 - this.__measuredTextHeight / 2);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.String, System.Single)" />*/
	drawText2: function (context, text, x, y, w, h, textColor, font, fontSize) {
		context.fillStyle = $.ig.ColorUtility.prototype.convertToNative(textColor);
		context.font = fontSize + "px " + font;
		context.fillText(text, x, y + h * 0.75);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.String, System.Single)" />*/
	drawText3: function (context, text, x, y, baseLine, textHeight, textColor, strokeWidth, strokeColor, font, fontSize) {
		context.font = fontSize + "px " + font;
		context.textBaseline = "middle";
		if (strokeWidth > 0) {
			context.strokeStyle = $.ig.ColorUtility.prototype.convertToNative(strokeColor);
			context.lineWidth = strokeWidth;
			context.strokeText(text, x, y + textHeight / 2);
		}
		context.fillStyle = $.ig.ColorUtility.prototype.convertToNative(textColor);
		context.lineWidth = 0;
		context.fillText(text, x, y + textHeight / 2);
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.String, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.DrawingViewBase::GetTextBaseline(System.String, System.String, System.Single)" />*/
	getTextBaseline: function (text, fontName, fontSize) {
		return 0;
	}
	/*<EndMethod Name="System.Single Infragistics.DrawingViewBase::GetTextBaseline(System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.Single, System.Single, System.Single, System.String, System.ColorInt, System.Single, System.String, System.Single)" />*/
	drawText: function (context, x, y, degrees, text, color, fontSize, fontName, fontHeight) {
		context.fillStyle = $.ig.ColorUtility.prototype.convertToNative(color);
		context.font = fontSize + "px " + fontName;
		context.textBaseline = "middle";
		if (degrees != 0) {
			context.save();
			context.translate(x - fontHeight / 2, y);
			context.rotate(degrees * Math.PI / 180);
			context.fillText(text, 0, 0);
			context.restore();
		} else {
			context.fillText(text, x, y + fontHeight / 2);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawText(System.CanvasContext, System.Single, System.Single, System.Single, System.String, System.ColorInt, System.Single, System.String, System.Single)" />*/
	,
	__measuredTextWidth: 0,
	__measuredTextHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::MeasureText(System.String, System.String, System.Single)" />*/
	measureText: function (text, fontName, fontSize) {
		$.ig.JSHelperUtility.prototype.utility().measureText(text, null, fontName, fontSize);
		this.__measuredTextHeight = $.ig.JSHelperUtility.prototype.utility().measuredHeight();
		this.__measuredTextWidth = $.ig.JSHelperUtility.prototype.utility().measuredWidth();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::MeasureText(System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::ClipCanvas(System.CanvasContext, System.Single, System.Single, System.Single, System.Single)" />*/
	clipCanvas: function (context, x, y, width, height) {
		context.beginPath();
		context.rect(x, y, width, height);
		context.clip();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::ClipCanvas(System.CanvasContext, System.Single, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.DrawingViewBase::MeasuredTextWidth()" />*/
	measuredTextWidth: function () {
		return this.__measuredTextWidth;
	}
	/*<EndProperty Name="System.Single Infragistics.DrawingViewBase::MeasuredTextWidth()" />*/
	,
	/*<BeginProperty Name="System.Single Infragistics.DrawingViewBase::MeasuredTextHeight()" />*/
	measuredTextHeight: function () {
		return this.__measuredTextHeight;
	}
	/*<EndProperty Name="System.Single Infragistics.DrawingViewBase::MeasuredTextHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::Lock()" />*/
	lock: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::Lock()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::Unlock()" />*/
	unlock: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::Unlock()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, , , System.Boolean, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCustomShape: function (context, x, y, closePath, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		var count = x.length;
		context.moveTo(x[0], y[0]);
		for (var i = 1; i < count; i++) {
			context.lineTo(x[i], y[i]);
		}
		if (closePath) {
			context.closePath();
		}
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, , , System.Boolean, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomPolarShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCustomPolarShape: function (context, centerX, centerY, x1, y1, x2, y2, bx1, by1, bx2, by2, radius, startAngle, endAngle, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		context.lineTo(bx1, by1);
		context.arc(centerX, centerY, radius, startAngle * this._pI / 180, endAngle * this._pI / 180, true);
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomPolarShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawSplineAreaWithCurvedBase(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawSplineAreaWithCurvedBase: function (canvas, centerX, centerY, x1, y1, x2, y2, cx1, cy1, cx2, cy2, bx1, by1, bx2, by2, radius, startAngle, endAngle, fillColor, strokeColor, strokeWidth) {
		canvas.save();
		canvas.beginPath();
		canvas.moveTo(x1, y1);
		canvas.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);
		canvas.lineTo(bx1, by1);
		canvas.arc(centerX, centerY, radius, startAngle * this._pI / 180, endAngle * this._pI / 180, true);
		canvas.closePath();
		this.fillShape(canvas, fillColor, strokeColor, strokeWidth);
		canvas.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawSplineAreaWithCurvedBase(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCurve(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	drawCurve: function (context, x1, y1, x2, y2, cx1, cy1, cx2, cy2, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);
		this.fillShape(context, 0, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCurve(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomCurvedShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCustomCurvedShape: function (context, x1, y1, x2, y2, cx1, cy1, cx2, cy2, x3, y3, x4, y4, cx3, cy3, cx4, cy4, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);
		context.lineTo(x3, y3);
		context.bezierCurveTo(cx3, cy3, cx4, cy4, x4, y4);
		context.lineTo(x1, y1);
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomCurvedShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawCustomShape2: function (context, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		context.lineTo(x3, y3);
		context.lineTo(x4, y4);
		context.lineTo(x5, y5);
		context.lineTo(x6, y6);
		context.closePath();
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCustomShape(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCenteredArcText(System.CanvasContext, System.Single, System.Single, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single, System.Boolean)" />*/
	drawCenteredArcText: function (canvas, centerX, centerY, text, radius, angle, color, fontName, fontSize, clockwise) {
		var length = text.length;
		var characters = new $.ig.Array();
		var arcs = new $.ig.Array();
		var totalArc = 0;
		for (var i = 0; i < length; ++i) {
			var character = text.charAt(i);
			characters.add(character);
			this.measureText(character, fontName, fontSize);
			var characterWidth = this.__measuredTextWidth;
			var chordToArcValue = (2 * Math.asin(characterWidth / (2 * radius)));
			arcs.add(chordToArcValue);
			totalArc += arcs[i];
		}
		var direction = clockwise ? -1 : 1;
		if (!clockwise) {
			canvas.textBaseline = "bottom";
		}
		var slantCorrection = clockwise ? -(Math.PI / 2) : (Math.PI / 2);
		var angleI = angle - direction * totalArc / 2;
		for (var j = 0; j < length; j++) {
			angleI += direction * arcs[j] / 2;
			this.drawCenteredCharacter(canvas, centerX, centerY, characters[j], radius, angleI, color, fontName, fontSize, (angleI + slantCorrection));
			angleI += direction * arcs[j] / 2;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCenteredArcText(System.CanvasContext, System.Single, System.Single, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawCenteredCharacter(System.CanvasContext, System.Single, System.Single, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single, System.Single)" />*/
	drawCenteredCharacter: function (canvas, centerX, centerY, text, radius, angle, color, fontName, fontSize, slantAngle) {
		var x = (centerX + radius * Math.cos(angle));
		var y = (centerY - (radius * Math.sin(angle)));
		this.measureText(text, fontName, fontSize);
		canvas.fillStyle = $.ig.ColorUtility.prototype.convertToNative(color);
		canvas.font = fontSize + "px " + fontName;
		canvas.save();
		canvas.translate(x, y);
		canvas.rotate(-slantAngle);
		canvas.translate(-this.__measuredTextWidth / 2, this.__measuredTextHeight / 2);
		canvas.fillText(text, 0, 0);
		canvas.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawCenteredCharacter(System.CanvasContext, System.Single, System.Single, System.String, System.Single, System.Single, System.ColorInt, System.String, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.DrawingViewBase::DrawHollowCircle(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	drawHollowCircle: function (context, centerX, centerY, radius, innerExtent, outerExtent, fillColor, strokeColor, strokeWidth) {
		context.save();
		context.beginPath();
		var innerRadius = radius * innerExtent;
		var outerRadius = radius * outerExtent;
		context.arc(centerX, centerY, outerRadius, 0, 2 * this._pI, false);
		context.arc(centerX, centerY, innerRadius, 2 * this._pI, 0, true);
		this.fillShape(context, fillColor, strokeColor, strokeWidth);
		context.restore();
	}
	/*<EndMethod Name="System.Void Infragistics.DrawingViewBase::DrawHollowCircle(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, System.ColorInt, System.ColorInt, System.Single)" />*/
	,
	$type: new $.ig.Type('DrawingViewBase', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.DrawingViewBase" />*/

/*<BeginType Name="Infragistics.JSHelperUtility" />*/

$.ig.util.defType('JSHelperUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.JSHelperUtility Infragistics.JSHelperUtility::Utility()" />*/
	utility: function () {
		if ($.ig.JSHelperUtility.prototype.__utility == null) {
			$.ig.JSHelperUtility.prototype.__utility = new $.ig.JSHelperUtility();
		}
		return $.ig.JSHelperUtility.prototype.__utility;
	}
	/*<EndMethod Name="Infragistics.JSHelperUtility Infragistics.JSHelperUtility::Utility()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::RegisterRootElement(System.String)" />*/
	registerRootElement: function (element) {
		if ($.ig.JSHelperUtility.prototype.__rootElement != null) {
			$.ig.JSHelperUtility.prototype.utility().cleanUpTempSpans();
		}
		$.ig.JSHelperUtility.prototype.__rootElement = element;
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::RegisterRootElement(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::CleanUpTempSpans()" />*/
	cleanUpTempSpans: function () {
		if (this.__tempWrapSpan != null) {
			this.__tempWrapSpan.remove();
		}
		if (this.__tempMultiLineWrapSpan != null) {
			this.__tempMultiLineWrapSpan.remove();
		}
		if (this.__tempSpan != null) {
			this.__tempSpan.remove();
		}
		this.__tempWrapSpan = this.__tempMultiLineWrapSpan = this.__tempSpan = null;
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::CleanUpTempSpans()" />*/
	,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.JSHelperUtility::GetRootElement()" />*/
	getRootElement: function () {
		if ($.ig.JSHelperUtility.prototype.__rootElement != null) {
			var elemId = $.ig.JSHelperUtility.prototype.__rootElement;
			var elem = $(elemId);
			if (elem != null && elem.length > 0) {
				return elem;
			}
		}
		return $('body');
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.JSHelperUtility::GetRootElement()" />*/
	,
	__cw: 0,
	__ch: 0,
	__ceilWidth: 0,
	__nonRoundedHeight: 0,
	__tempWrapSpan: null,
	__tempMultiLineWrapSpan: null,
	__tempSpan: null,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single)" />*/
	measureText: function (text, innerHTML, fontName, fontSize) {
		if (this.__tempSpan == null) {
			var doc = $.ig.JSHelperUtility.prototype.getRootElement();
			this.__tempSpan = $("<span style='visibility:hidden;white-space:pre;position:absolute;height:auto;width:auto;'></span>");
			doc.append(this.__tempSpan);
		}
		if (innerHTML != null) {
			this.__tempSpan.text("");
			this.__tempSpan[0].innerHTML = innerHTML;
		} else {
			this.__tempSpan.text(text);
		}
		this.__tempSpan.css("font", fontSize + "px " + fontName);
		this.__ch = this.__tempSpan[0].offsetHeight;
		this.__nonRoundedHeight = this.__tempSpan[0].getBoundingClientRect().height;
		var actualWidth = this.__tempSpan[0].getBoundingClientRect().width;
		this.__cw = Math.round(actualWidth);
		this.__ceilWidth = Math.ceil(actualWidth);
		if (fontSize == 1) {
			var browserFontSize = window.getComputedStyle(this.__tempSpan[0]).getPropertyValue("font-size");
			browserFontSize = $.ig.NativeStringUtility.prototype.replace(browserFontSize, "px", "");
			var browserFont = $.ig.NativeStringUtility.prototype.convertToInt(browserFontSize, 0);
			if (browserFont > fontSize) {
				this.__ch = Math.round(this.__ch / browserFont);
				this.__nonRoundedHeight = this.__nonRoundedHeight / browserFont;
				this.__cw = Math.round(this.__cw / browserFont);
				this.__ceilWidth = Math.ceil(this.__ceilWidth / browserFont);
			}
		}
		if (innerHTML != null) {
			this.__tempSpan[0].innerHTML = "";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single, System.Single)" />*/
	measureText1: function (text, innerHTML, fontName, fontSize, limitingWidth) {
		this.ensureTempWrapSpan();
		this.measureTextWithSpan(this.__tempWrapSpan, text, innerHTML, fontName, fontSize, limitingWidth, true);
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::EnsureTempWrapSpan()" />*/
	ensureTempWrapSpan: function () {
		if (this.__tempWrapSpan == null) {
			var doc = $.ig.JSHelperUtility.prototype.getRootElement();
			this.__tempWrapSpan = $("<span style='visibility:hidden; overflow-wrap:break-word; word-wrap:break-word;position:absolute;white-space:pre-wrap; display:inline-block;'></span>");
			doc.append(this.__tempWrapSpan);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::EnsureTempWrapSpan()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::MeasureTextWithSpan(System.JQuery.JQueryObject, System.String, System.String, System.String, System.Single, System.Single, System.Boolean)" />*/
	measureTextWithSpan: function (span, text, innerHTML, fontName, fontSize, limitingWidth, resetWidth) {
		if (text != null && text.length > 0) {
			var lastChar = text.charAt(text.length - 1);
			if (lastChar == '\n' || lastChar == ' ') {
				text = text + "_";
			}
		} else if (innerHTML == null || innerHTML.length == 0) {
			this.__cw = 0;
			this.__ch = 0;
			this.__ceilWidth = 0;
			return;
		}
		if (innerHTML != null) {
			span.text("");
			span[0].innerHTML = innerHTML;
		} else {
			span.text(text);
		}
		span.css("font", fontSize + "px " + fontName);
		if (resetWidth && span[0].style.width != null) {
			span[0].style.width = null;
		}
		var actualWidth = span[0].getBoundingClientRect().width;
		this.__cw = this.__ceilWidth = Math.ceil(actualWidth);
		if (this.__cw > limitingWidth && limitingWidth > 0) {
			span.css("width", limitingWidth + "px");
			this.__cw = this.__ceilWidth = limitingWidth;
		}
		this.__ch = span[0].offsetHeight;
		if (innerHTML != null) {
			span[0].innerHTML = "";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::MeasureTextWithSpan(System.JQuery.JQueryObject, System.String, System.String, System.String, System.Single, System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single, System.Single, System.Int32)" />*/
	measureText2: function (text, innerHTML, fontName, fontSize, limitingWidth, numberOfLines) {
		if (this.__tempMultiLineWrapSpan == null) {
			var doc = $.ig.JSHelperUtility.prototype.getRootElement();
			this.__tempMultiLineWrapSpan = $("<span style='visibility:hidden; overflow-wrap:break-word; word-wrap:break-word;position:absolute; white-space:pre-wrap; display:-webkit-box; -webkit-box-orient:vertical; '></span>");
			doc.append(this.__tempMultiLineWrapSpan);
		}
		this.ensureTempWrapSpan();
		this.measureTextWithSpan(this.__tempWrapSpan, text, innerHTML, fontName, fontSize, 0, true);
		if (this.__cw > limitingWidth) {
			this.__tempMultiLineWrapSpan.css("-webkit-line-clamp", numberOfLines.toString());
			this.__tempMultiLineWrapSpan.css("visibility", "visible");
			this.__tempMultiLineWrapSpan.css("width", limitingWidth + "px");
			this.measureTextWithSpan(this.__tempMultiLineWrapSpan, text, innerHTML, fontName, fontSize, limitingWidth, false);
			this.__tempMultiLineWrapSpan.css("visibility", "hidden");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::MeasureText(System.String, System.String, System.String, System.Single, System.Single, System.Int32)" />*/
	,
	__multilineInput: null,
	/*<BeginMethod Name="System.Void Infragistics.JSHelperUtility::MeasureMultilineText(System.Single, System.JQuery.JQueryObject, System.String, System.Single)" />*/
	measureMultilineText: function (limitingWidth, qlEditor, fontName, fontSize) {
		if (null == qlEditor) {
			this.__cw = 0;
			this.__ch = 0;
			return;
		}
		if (this.__multilineInput == null) {
			var doc = $.ig.JSHelperUtility.prototype.getRootElement();
			var multiLineView = new $.ig.CPMultilineTextView();
			this.__multilineInput = multiLineView.createInputView();
			doc.append(this.__multilineInput._element);
		}
		while (null != this.__multilineInput._element[0].lastChild) {
			this.__multilineInput._element[0].removeChild(this.__multilineInput._element[0].lastChild);
		}
		this.__multilineInput._element[0].style.width = limitingWidth + "px";
		this.__multilineInput._element.css("font", fontSize + "px " + fontName);
		var qlEditorElement = qlEditor[0];
		qlEditorElement.style.height = null;
		qlEditorElement.style.width = null;
		qlEditorElement.style.display = "inline-block";
		this.__multilineInput._element[0].appendChild(qlEditorElement);
		var actualWidth = qlEditorElement.getBoundingClientRect().width;
		if (limitingWidth > 0 && actualWidth > limitingWidth) {
			qlEditorElement.style.width = limitingWidth + "px";
			actualWidth = qlEditorElement.getBoundingClientRect().width;
		}
		this.__cw = this.__ceilWidth = Math.ceil(actualWidth);
		this.__ch = qlEditorElement.scrollHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.JSHelperUtility::MeasureMultilineText(System.Single, System.JQuery.JQueryObject, System.String, System.Single)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasuredWidth()" />*/
	measuredWidth: function () {
		return $.ig.truncate(this.__cw);
	}
	/*<EndProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasuredWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasureCeilWidth()" />*/
	measureCeilWidth: function () {
		return $.ig.truncate(this.__ceilWidth);
	}
	/*<EndProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasureCeilWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.JSHelperUtility::NonRoundedHeight()" />*/
	nonRoundedHeight: function () {
		return this.__nonRoundedHeight;
	}
	/*<EndProperty Name="System.Double Infragistics.JSHelperUtility::NonRoundedHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasuredHeight()" />*/
	measuredHeight: function () {
		return $.ig.truncate(this.__ch);
	}
	/*<EndProperty Name="System.Int32 Infragistics.JSHelperUtility::MeasuredHeight()" />*/
	,
	$type: new $.ig.Type('JSHelperUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.JSHelperUtility" />*/

/*<BeginType Name="Infragistics.NativeColorUtility" />*/

$.ig.util.defType('NativeColorUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.ColorInt Infragistics.NativeColorUtility::ConvertNativeColorToInt(System.String)" />*/
	convertNativeColorToInt: function (color) {
		if (color == null) {
			return 0;
		}
		var result = new Array(1);
		var hex = color;
		if (color.charAt(0) != '#') {
			if (color.charAt(0) == 'r' && color.charAt(1) == 'g') {
				color = $.ig.util.replace(color, "rgb(", "");
				color = $.ig.util.replace(color, "rgba(", "");
				color = $.ig.util.replace(color, ")", "");
				var colors = color.split(",");
				var r = parseInt(colors[0]);
				var g = parseInt(colors[1]);
				var b = parseInt(colors[2]);
				var a = 255;
				if (colors.length == 4) {
					a = $.ig.truncate((parseFloat(colors[3]) * 255));
				}
				return (a << 24) | (r << 16) | (g << 8) | b;
			} else {
				var tempDiv = $("<div style=\"color:" + color + "\"</div>");
				var doc = $('body');
				doc.append(tempDiv);
				hex = window.getComputedStyle(tempDiv).color;
				tempDiv.remove();
			}
		}
		var regexp = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
		result = regexp.exec(hex);
		if (result != null) {
			var r1 = parseInt(result[1], 16);
			var g1 = parseInt(result[2], 16);
			var b1 = parseInt(result[3], 16);
			return 255 << 24 | r1 << 16 | g1 << 8 | b1;
		}
		return 0;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.NativeColorUtility::ConvertNativeColorToInt(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeColorUtility::ConvertByteToHex(System.Byte)" />*/
	convertByteToHex: function (byteValue) {
		var str = byteValue.toString(16);
		if (str.length == 1) {
			str = "0" + str;
		}
		return str;
	}
	/*<EndMethod Name="System.String Infragistics.NativeColorUtility::ConvertByteToHex(System.Byte)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeColorUtility::ConvertIntToNativeColor(System.ColorInt)" />*/
	convertIntToNativeColor: function (color) {
		return $.ig.NativeColorUtility.prototype.getColor(color);
	}
	/*<EndMethod Name="System.String Infragistics.NativeColorUtility::ConvertIntToNativeColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeColorUtility::GetColor(System.Int32)" />*/
	getColor: function (color) {
		if (typeof color == "string") return color;
		var r = $.ig.ColorUtility.prototype.getRed(color);
		var g = $.ig.ColorUtility.prototype.getGreen(color);
		var b = $.ig.ColorUtility.prototype.getBlue(color);
		var a = $.ig.ColorUtility.prototype.getAlpha(color) / 255;
		return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
	}
	/*<EndMethod Name="System.String Infragistics.NativeColorUtility::GetColor(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeColorUtility::ColorsAreEqual(System.Int32, System.Int32)" />*/
	colorsAreEqual: function (color, compareTo) {
		return color == compareTo;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeColorUtility::ColorsAreEqual(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeColorUtility::ConvertColorIntToRGBHexString(System.Int32)" />*/
	convertColorIntToRGBHexString: function (color) {
		return "#" + $.ig.NativeColorUtility.prototype.convertByteToHex($.ig.ColorUtility.prototype.getRed(color)) + $.ig.NativeColorUtility.prototype.convertByteToHex($.ig.ColorUtility.prototype.getGreen(color)) + $.ig.NativeColorUtility.prototype.convertByteToHex($.ig.ColorUtility.prototype.getBlue(color));
	}
	/*<EndMethod Name="System.String Infragistics.NativeColorUtility::ConvertColorIntToRGBHexString(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.NativeColorUtility::ConvertHexStringToColorInt(System.String)" />*/
	convertHexStringToColorInt: function (hex) {
		return $.ig.NativeColorUtility.prototype.convertNativeColorToInt(hex);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.NativeColorUtility::ConvertHexStringToColorInt(System.String)" />*/
	,
	$type: new $.ig.Type('NativeColorUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeColorUtility" />*/

/*<BeginType Name="Infragistics.NativeCPTextViewManager" />*/

$.ig.util.defType('NativeCPTextViewManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.NativeCPTextViewManager::Setup()" />*/
	setup: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeCPTextViewManager::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeCPTextViewManager::TextViewGotFocus(Infragistics.CPTextView)" />*/
	textViewGotFocus: function (textView) {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeCPTextViewManager::TextViewGotFocus(Infragistics.CPTextView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeCPTextViewManager::TextViewLostFocus(Infragistics.CPTextView)" />*/
	textViewLostFocus: function (textView) {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeCPTextViewManager::TextViewLostFocus(Infragistics.CPTextView)" />*/
	,
	$type: new $.ig.Type('NativeCPTextViewManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeCPTextViewManager" />*/

/*<BeginType Name="Infragistics.NativeImageUtility" />*/

$.ig.util.defType('NativeImageUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBase64StringToImage(System.String)" />*/
	convertBase64StringToImage: function (imageData) {
		return $.ig.NativeImageUtility.prototype.convertBase64StringToImage1(imageData, false);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBase64StringToImage(System.String)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBase64StringToImage(System.String, System.Boolean)" />*/
	convertBase64StringToImage1: function (imageData, cropToSquare) {
		return $.ig.NativeImageUtility.prototype.getImageFromImageData1($.ig.NativeImageUtility.prototype.appendBase64Prefix(imageData), cropToSquare);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBase64StringToImage(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeImageUtility::Base64EncodeByteArray(System.Array)" />*/
	base64EncodeByteArray: function (val) {
		if (Array.isArray(val)) {
			if (val.length > 64000) {
				return btoa((new Uint8Array(val)).reduce(function(data, byte) { return data + String.fromCharCode(byte); }, ''));
			}
			return btoa(String.fromCharCode.apply(null, new Uint8Array(val)));
		} else if (val.constructor === Uint8Array) {
			return btoa(val.reduce(function(data, byte) { return data + String.fromCharCode(byte); }, ''));
		} else {
			return btoa(val);
		}
	}
	/*<EndMethod Name="System.String Infragistics.NativeImageUtility::Base64EncodeByteArray(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Array Infragistics.NativeImageUtility::ByteArrayToBase64(System.String)" />*/
	byteArrayToBase64: function (base64) {
		if ($.ig.NativeStringUtility.prototype.startsWith(base64, "data:")) {
			var startPosition = $.ig.NativeStringUtility.prototype.indexOf(base64, ",");
			base64 = base64.substr(startPosition + 1);
		}
		var binary_string = atob(base64);
		var len = binary_string.length;
		var bytes = new Uint8Array(len);
		for (var i = 0; i < len; i++) {
			bytes[i] = binary_string.charCodeAt(i);
		}
		return bytes;
	}
	/*<EndMethod Name="System.Array Infragistics.NativeImageUtility::ByteArrayToBase64(System.String)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.NativeImageUtility::AppendBase64Prefix(System.String)" />*/
	appendBase64Prefix: function (imageData) {
		if (imageData != null && !$.ig.NativeStringUtility.prototype.startsWith(imageData, "data:")) {
			return $.ig.NativeImageUtility.prototype.getBase64Prefix(imageData) + imageData;
		}
		return imageData;
	}
	/*<EndMethod Name="System.Object Infragistics.NativeImageUtility::AppendBase64Prefix(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeImageUtility::GetBase64Prefix(System.String)" />*/
	getBase64Prefix: function (imageData) {
		if ($.ig.NativeImageUtility.prototype.isPNGString(imageData)) {
			return $.ig.NativeImageUtility.prototype.base64PrefixPNG;
		} else if ($.ig.NativeImageUtility.prototype.isGIFString(imageData)) {
			return $.ig.NativeImageUtility.prototype.base64PrefixGIF;
		} else if ($.ig.NativeImageUtility.prototype.isBMPString(imageData)) {
			return "data:image/bmp;base64, ";
		} else {
			return $.ig.NativeImageUtility.prototype.base64PrefixJPG;
		}
	}
	/*<EndMethod Name="System.String Infragistics.NativeImageUtility::GetBase64Prefix(System.String)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromData(System.Array)" />*/
	getImageFromData: function (imageData) {
		var element = $("<img style='height:100%;width:100%;object-fit:contain;'/>")[0];
		element.setAttribute("src", imageData);
		return element;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromData(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::CreateThumbnail(System.Html.Element, System.Int32, System.Int32)" />*/
	createThumbnail: function (image, w, h) {
		if (w > image.width && h > image.height) {
			return image;
		}
		var width = image.width;
		var height = image.height;
		if (width > w) {
			width = w;
			height = width * image.height / image.width;
		}
		if (height > h) {
			height = h;
			width = height * image.width / image.height;
		}
		
			var canvas = document.createElement('canvas');
			canvas.width = width;
            canvas.height = height;
			var context = canvas.getContext('2d');
			context.drawImage(image, 0, 0, width, height);
		var imageData =  canvas.toDataURL('image/png') ;
		return $.ig.NativeImageUtility.prototype.getImageFromImageData(imageData);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::CreateThumbnail(System.Html.Element, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeImageUtility::GetImageData(System.Html.Element)" />*/
	getImageData: function (image) {
		var element = image;
		var data = element.getAttribute("src");
		if (data == null) {
			data = element.getAttribute("srcData");
		}
		return data;
	}
	/*<EndMethod Name="System.String Infragistics.NativeImageUtility::GetImageData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeImageUtility::GetBase64ImageData(System.Html.Element)" />*/
	getBase64ImageData: function (image) {
		var result = $.ig.NativeImageUtility.prototype.getImageData(image);
		if (result != null && $.ig.NativeStringUtility.prototype.startsWith(result, "data:image/")) {
			var startPosition = $.ig.NativeStringUtility.prototype.indexOf(result, ",");
			result = result.substr(startPosition + 1);
		}
		return result;
	}
	/*<EndMethod Name="System.String Infragistics.NativeImageUtility::GetBase64ImageData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromImageData(System.String)" />*/
	getImageFromImageData: function (imageData) {
		var data = imageData;
		return $.ig.NativeImageUtility.prototype.getImageFromData(data);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromImageData(System.String)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromImageData(System.String, System.Boolean)" />*/
	getImageFromImageData1: function (imageData, cropToSquare) {
		var html = "<img style='height:100%;width:100%;object-fit:contain;'/>";
		if (cropToSquare) {
			html = "<img style='height:100%;width:100%;object-fit:cover;'/>";
		}
		var element = $(html)[0];
		if ($.ig.util.isFirefox()) {
			element.setAttribute("src", imageData);
		} else {
			if ($.ig.NativeImageUtility.prototype.__imageCache == null) {
				$.ig.NativeImageUtility.prototype.__imageCache = new $.ig.Dictionary(0);
			}
			var className = null;
			if ($.ig.NativeDictionaryUtility.prototype.containsKey($.ig.NativeImageUtility.prototype.__imageCache, imageData)) {
				className = $.ig.NativeImageUtility.prototype.__imageCache.item(imageData);
			} else {
				var imgSrc = "content:url('" + imageData + "');";
				className = "img_" + $.ig.NativeStringUtility.prototype.replace($.ig.NativeStringUtility.prototype.generateUID(), "-", "");
				$.ig.NativeImageUtility.prototype.addSheetForClassName(className, imgSrc);
				$.ig.NativeImageUtility.prototype.__imageCache.item(imageData, className);
			}
			element.setAttribute("srcData", imageData);
			element.className = className;
		}
		return element;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetImageFromImageData(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::AddSheetForClassName(System.String, System.String)" />*/
	addSheetForClassName: function (className, imgSrc) {
		var style = document.createElement('style');
		style.type = 'text/css';
		document.getElementsByTagName('head')[0].appendChild(style);
		var sheet = (style.styleSheet || style.sheet);
		sheet.addRule("." + className, imgSrc);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::AddSheetForClassName(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Array Infragistics.NativeImageUtility::GetImageFileData(System.Html.Element)" />*/
	getImageFileData: function (image) {
		var element = image;
		var data = element.getAttribute("src");
		if (data == null) {
			data = element.getAttribute("srcData");
		}
		if (data != null && $.ig.NativeStringUtility.prototype.startsWith(data, "data:image/")) {
			var startPosition = $.ig.NativeStringUtility.prototype.indexOf(data, ",");
			data = data.substr(startPosition + 1);
		}
		return  atob(data);
	}
	/*<EndMethod Name="System.Array Infragistics.NativeImageUtility::GetImageFileData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::CopyImageToClipboard(System.Html.Element)" />*/
	copyImageToClipboard: function (image) {
		var decodedImageData = $.ig.NativeImageUtility.prototype.getImageFileData(image);
		var count = decodedImageData.length;
		var bytes = new Array(count);
		for (var i = 0; i < count; i++) {
			bytes[i] = decodedImageData.charCodeAt(i);
		}
		$.ig.NativeImageUtility.prototype.copyImageDataToClipboard(bytes);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::CopyImageToClipboard(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::CopyImageDataToClipboard(System.Array)" />*/
	copyImageDataToClipboard: function (bytes) {
		var byteArr = new Uint8Array(bytes);
		var blob = new Blob([byteArr], { type: 'image/png'});
		navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::CopyImageDataToClipboard(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Array Infragistics.NativeImageUtility::GetWebImageSrc(System.Html.Element)" />*/
	getWebImageSrc: function (image) {
		var element = image;
		var data = element.getAttribute("src");
		if (data == null) {
			data = element.getAttribute("srcData");
		}
		return data;
	}
	/*<EndMethod Name="System.Array Infragistics.NativeImageUtility::GetWebImageSrc(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsBMPString(System.String)" />*/
	isBMPString: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "Qk");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsBMPString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsPNGString(System.String)" />*/
	isPNGString: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "iVBORw0K");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsPNGString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsJPGString(System.String)" />*/
	isJPGString: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "/9j/4AAQSkZJ");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsJPGString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsGIFString(System.String)" />*/
	isGIFString: function (imageData) {
		return $.ig.NativeStringUtility.prototype.startsWith(imageData, "R0lG");
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsGIFString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsGIF(System.Array)" />*/
	isGIF: function (imageData) {
		var isString = imageData.startsWith != undefined;
		if (isString) {
			var val = imageData;
			return $.ig.NativeStringUtility.prototype.startsWith(val, $.ig.NativeImageUtility.prototype.base64PrefixGIF);
		}
		if (imageData.length > 3) {
			return ($.ig.util.getValue(imageData[0]) == 71 || $.ig.util.getValue(imageData[1]) == 73 || $.ig.util.getValue(imageData[2]) == 70);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsGIF(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsPNG(System.Array)" />*/
	isPNG: function (imageData) {
		var isString = imageData.startsWith != undefined;
		if (isString) {
			var val = imageData;
			return $.ig.NativeStringUtility.prototype.startsWith(val, $.ig.NativeImageUtility.prototype.base64PrefixPNG);
		}
		if (imageData.length > 4) {
			return ($.ig.util.getValue(imageData[1]) == 80 || $.ig.util.getValue(imageData[2]) == 78 || $.ig.util.getValue(imageData[3]) == 71);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsPNG(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeImageUtility::IsJPG(System.Array)" />*/
	isJPG: function (imageData) {
		var isString = imageData.startsWith != undefined;
		if (isString) {
			var val = imageData;
			return $.ig.NativeStringUtility.prototype.startsWith(val, $.ig.NativeImageUtility.prototype.base64PrefixJPG);
		}
		if (imageData.length > 3) {
			return ($.ig.util.getValue(imageData[0]) == 255 || $.ig.util.getValue(imageData[1]) == 216 || $.ig.util.getValue(imageData[2]) == 255);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeImageUtility::IsJPG(System.Array)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::OnLoad(System.Html.Element, Infragistics.ObjectBlock)" />*/
	onLoad: function (image, onLoadBlock) {
		
				if (image.complete) {
					onLoadBlock(image);
				} else {
					image.onload = function () {
						image.onload = null;
						onLoadBlock(image);
					}
				};
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::OnLoad(System.Html.Element, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::OnLoad(System.Html.Element, Infragistics.ObjectBlock, Infragistics.ExecutionBlock)" />*/
	onLoad1: function (image, onLoadBlock, errorBlock) {
		
				if (image.complete) {
					onLoadBlock(image);
				} else {
					image.onload = function () {
						image.onload = null;
						onLoadBlock(image);
                    }
                    image.onerror = function() {
                        image.onerror = null;
                        errorBlock();
					}
				};
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::OnLoad(System.Html.Element, Infragistics.ObjectBlock, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertImageToBitmap(System.Html.Element)" />*/
	convertImageToBitmap: function (image) {
		return image;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertImageToBitmap(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBitmapToImage(System.Html.Element)" />*/
	convertBitmapToImage: function (image) {
		return image;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::ConvertBitmapToImage(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeImageUtility::AfterImageHasLoaded(System.Html.Element, System.Int32, System.Int32, Infragistics.ObjectBlock)" />*/
	afterImageHasLoaded: function (imageToLoad, imgWidth, imgHeight, imageLoadedBlock) {
		var imageDataAsArray = $.ig.CPImageUtility.prototype.convertImageToNativeData(imageToLoad);
		var resultImage = $.ig.NativeImageUtility.prototype.getImageFromData(imageDataAsArray);
		if (resultImage != null) {
			$.ig.NativeImageUtility.prototype.onLoad(resultImage, function (o) {
				(o).width = imgWidth;
				(o).height = imgHeight;
				imageLoadedBlock(o);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NativeImageUtility::AfterImageHasLoaded(System.Html.Element, System.Int32, System.Int32, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetThumbnailFromVideoURL(System.String)" />*/
	getThumbnailFromVideoURL: function (videoURL) {
		var video = document.createElement("video");
		video.setAttribute("src", videoURL);
		video.width = 150;
		video.height = 150;
		var canvas = document.createElement("canvas");
		canvas.width = 150;
		canvas.height = 150;
		var context = canvas.getContext("2d");
		context.drawImage(video, 0, 0, canvas.width, canvas.height);
		var imageData = canvas.toDataURL('image/png');
		return $.ig.NativeImageUtility.prototype.getImageFromImageData(imageData);
	}
	/*<EndMethod Name="System.Html.Element Infragistics.NativeImageUtility::GetThumbnailFromVideoURL(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeImageUtility::ResolveImageWidth(System.Html.Element)" />*/
	resolveImageWidth: function (image) {
		return $.ig.util.getValue(image.naturalWidth != 0 ? image.naturalWidth : image.clientWidth);
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeImageUtility::ResolveImageWidth(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeImageUtility::ResolveImageHeight(System.Html.Element)" />*/
	resolveImageHeight: function (image) {
		return $.ig.util.getValue(image.naturalHeight != 0 ? image.naturalHeight : image.clientHeight);
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeImageUtility::ResolveImageHeight(System.Html.Element)" />*/
	,
	$type: new $.ig.Type('NativeImageUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeImageUtility" />*/

/*<BeginType Name="Infragistics.NativeSystemThemeManager" />*/

$.ig.util.defType('NativeSystemThemeManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__themeChangedBlock: null,
	__eventblock: null,
	__mediaQueryList: null,
	/*<BeginProperty Name="System.Boolean Infragistics.NativeSystemThemeManager::IsRegistered()" />*/
	isRegistered: function () {
		return this.__themeChangedBlock == null ? false : true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.NativeSystemThemeManager::IsRegistered()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeSystemThemeManager::ResolveSystemTheme(Infragistics.StringBlock)" />*/
	resolveSystemTheme: function (themeChangedBlock) {
		this.__themeChangedBlock = themeChangedBlock;
	}
	/*<EndMethod Name="System.Void Infragistics.NativeSystemThemeManager::ResolveSystemTheme(Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeSystemThemeManager::EventsDetected(System.Object)" />*/
	eventsDetected: function (e) {
		var darkTheme=false; if(e.matches){ darkTheme=true; };
		this.updateTheme(darkTheme);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeSystemThemeManager::EventsDetected(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeSystemThemeManager::StartListening()" />*/
	startListening: function () {
		if (this.__mediaQueryList == null) {
			this.__eventblock = this.eventsDetected.runOn(this);
			this.__mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');
			this.__mediaQueryList.addListener(this.__eventblock);
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			this.updateTheme(true);
		} else if (window.matchMedia('(prefers-color-scheme: light)').matches) {
			this.updateTheme(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NativeSystemThemeManager::StartListening()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeSystemThemeManager::StopListening()" />*/
	stopListening: function () {
		if (this.__mediaQueryList != null) {
			this.__mediaQueryList.removeListener(this.__eventblock);
			this.__mediaQueryList = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NativeSystemThemeManager::StopListening()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeSystemThemeManager::SupportsSystemTheme()" />*/
	supportsSystemTheme: function () {
		if (window.matchMedia('(prefers-color-scheme: dark)').matches || window.matchMedia('(prefers-color-scheme: light)').matches) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeSystemThemeManager::SupportsSystemTheme()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeSystemThemeManager::UpdateTheme(System.Boolean)" />*/
	updateTheme: function (isDarkTheme) {
		if (this.__themeChangedBlock != null) {
			if (isDarkTheme) {
				this.__themeChangedBlock($.ig.ThemeManager.prototype.darkTheme);
			} else {
				this.__themeChangedBlock($.ig.ThemeManager.prototype.lightTheme);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NativeSystemThemeManager::UpdateTheme(System.Boolean)" />*/
	,
	$type: new $.ig.Type('NativeSystemThemeManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeSystemThemeManager" />*/

/*<BeginType Name="Infragistics.NativeUIUtility" />*/

$.ig.util.defType('NativeUIUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.NativeUIUtility Infragistics.NativeUIUtility::Utility()" />*/
	utility: function () {
		if ($.ig.NativeUIUtility.prototype.__utility == null) {
			$.ig.NativeUIUtility.prototype.__utility = new $.ig.NativeUIUtility();
		}
		return $.ig.NativeUIUtility.prototype.__utility;
	}
	/*<EndMethod Name="Infragistics.NativeUIUtility Infragistics.NativeUIUtility::Utility()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUIUtility::Equals(System.Object, System.Object)" />*/
	equals: function (obj1, obj2) {
		return obj1 == obj2;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUIUtility::Equals(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeUIUtility::Densify(System.Int32)" />*/
	densify: function (val) {
		return $.ig.truncate((val * $.ig.ThemeManager.prototype.theme().appScaling()));
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeUIUtility::Densify(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeUIUtility::Dedensify(System.Int32)" />*/
	dedensify: function (val) {
		return $.ig.truncate((val / $.ig.ThemeManager.prototype.theme().appScaling()));
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeUIUtility::Dedensify(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeUIUtility::DensifyFont(System.Int32)" />*/
	densifyFont: function (fontSize) {
		return $.ig.truncate((fontSize * $.ig.ThemeManager.prototype.theme().appScaling()));
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeUIUtility::DensifyFont(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.NativeUIUtility::DensifyDontScale(System.Int32)" />*/
	densifyDontScale: function (val) {
		return val;
	}
	/*<EndMethod Name="System.Int32 Infragistics.NativeUIUtility::DensifyDontScale(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::GetCellPathIdentifier(Infragistics.CPCellPath)" />*/
	getCellPathIdentifier: function (path) {
		var fc = 0;
		if (path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.left) {
			fc = 1;
		}
		return path._rowIndex + ":" + path._columnIndex + ":" + path._sectionIndex + ":" + fc;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::GetCellPathIdentifier(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name=" Infragistics.NativeUIUtility::GetChartArrayFromString(System.String)" />*/
	getChartArrayFromString: function (val) {
		return val.split("");
	}
	/*<EndMethod Name=" Infragistics.NativeUIUtility::GetChartArrayFromString(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::AddCharToString(System.String, System.Char)" />*/
	addCharToString: function (val, c) {
		return val + c;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::AddCharToString(System.String, System.Char)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::ResolveNativeFont(System.String)" />*/
	resolveNativeFont: function (fontName) {
		fontName = $.ig.util.replace(fontName, " ", "");
		return fontName;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::ResolveNativeFont(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::ResolveNativeDrawingFont(System.String)" />*/
	resolveNativeDrawingFont: function (fontName) {
		fontName = $.ig.util.replace(fontName, " ", "");
		return fontName;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::ResolveNativeDrawingFont(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUIUtility::IsAndroid()" />*/
	isAndroid: function () {
		var userAgent = this.getUserAgent();
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(userAgent) == false) {
			userAgent = userAgent.toLowerCase();
			return userAgent.contains("android");
		}
		var platform = this.getPlatform();
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(platform) == false) {
			platform = platform.toLowerCase();
			return platform.startsWith("linux");
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUIUtility::IsAndroid()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUIUtility::IsMobileOSX()" />*/
	isMobileOSX: function () {
		var platform = this.getPlatform();
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(platform) == false) {
			platform = platform.toLowerCase();
			if ($.ig.CPStringUtility.prototype.areStringsEqual(platform, "iphone") || $.ig.CPStringUtility.prototype.areStringsEqual(platform, "ipad")) {
				return true;
			}
		}
		var userAgent = this.getUserAgent();
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(userAgent) == false) {
			userAgent = userAgent.toLowerCase();
			return userAgent.contains("iphone") || userAgent.contains("ipad");
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUIUtility::IsMobileOSX()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::GetPlatform()" />*/
	getPlatform: function () {
		return navigator.platform;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::GetPlatform()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.NativeUIUtility::GetUserAgent()" />*/
	getUserAgent: function () {
		return navigator.userAgent;
	}
	/*<EndMethod Name="System.String Infragistics.NativeUIUtility::GetUserAgent()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUIUtility::IsPhone()" />*/
	isPhone: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUIUtility::IsPhone()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParent(Infragistics.CPViewBase)" />*/
	getRootParent: function (startView) {
		var currentParent = startView;
		var parent = currentParent.getParent();
		while (parent != null && $.ig.util.cast($.ig.CPViewBase.prototype.$type, parent) !== null) {
			currentParent = parent;
			parent = currentParent.getParent();
		}
		return currentParent;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParent(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParent(Infragistics.CPViewBase, System.Boolean)" />*/
	getRootParent1: function (startView, acceptsInput) {
		return this.getRootParent(startView);
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParent(Infragistics.CPViewBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParentAndRegisterViewController(Infragistics.CPViewBase, Infragistics.ViewController, System.Boolean)" />*/
	getRootParentAndRegisterViewController: function (startView, viewController, acceptsInput) {
		return this.getRootParent(startView);
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.NativeUIUtility::GetRootParentAndRegisterViewController(Infragistics.CPViewBase, Infragistics.ViewController, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::CleanUpRoot(Infragistics.CPViewBase)" />*/
	cleanUpRoot: function (root) {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::CleanUpRoot(Infragistics.CPViewBase)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.NativeUIUtility::ScrollingTouchSlop()" />*/
	scrollingTouchSlop: function () {
		return $.ig.InteractiveView.prototype.touchSlop;
	}
	/*<EndProperty Name="System.Double Infragistics.NativeUIUtility::ScrollingTouchSlop()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.NativeUIUtility::CanOpenUrl(System.String)" />*/
	canOpenUrl: function (url) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.NativeUIUtility::CanOpenUrl(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::OpenUrl(System.String)" />*/
	openUrl: function (url) {
		window.open(url, '_blank');
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::OpenUrl(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::DownloadUrl(System.String)" />*/
	downloadUrl: function (url) {
		window.open(url, '_self');
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::DownloadUrl(System.String)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenBottomInset()" />*/
	screenBottomInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenBottomInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenTopInset()" />*/
	screenTopInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenTopInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenRightInset()" />*/
	screenRightInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenRightInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenLeftInset()" />*/
	screenLeftInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.NativeUIUtility::ScreenLeftInset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::ClearFocus()" />*/
	clearFocus: function () {
		if(document.activeElement != null){document.activeElement.blur();};
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::CopyTextToClipboard(System.String)" />*/
	copyTextToClipboard: function (text) {
		var textArea = document.createElement("textarea");
		textArea.value = text;
		document.body.appendChild(textArea);
		textArea.focus();
		textArea.select();
		document.execCommand('copy');
		document.body.removeChild(textArea);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::CopyTextToClipboard(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::TakeAppScreenshot(Infragistics.CPViewBase, Infragistics.ObjectBlock)" />*/
	takeAppScreenshot: function (rootView, successHandler) {
		this.takeScreenshotHelper(rootView, true, successHandler);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::TakeAppScreenshot(Infragistics.CPViewBase, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::TakeScreenshot(Infragistics.CPViewBase, System.Boolean, Infragistics.ObjectBlock)" />*/
	takeScreenshot: function (rootView, includeLayers, successHandler) {
		this.takeScreenshotHelper(rootView, includeLayers, successHandler);
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::TakeScreenshot(Infragistics.CPViewBase, System.Boolean, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::TakeScreenshotHelper(Infragistics.CPViewBase, System.Boolean, Infragistics.ObjectBlock)" />*/
	takeScreenshotHelper: function (rootView, includeLayers, successHandler) {
		var screenshotSuccess = function (o) {
			$.ig.ProgressHelper.prototype.hideProgress(rootView, false);
			if (successHandler != null) {
				successHandler(o);
			}
		};
		$.ig.ProgressHelper.prototype.showProgress1(rootView);
		var rootElement = rootView._element[0];
		var width = rootView.currentWidth();
		var height = rootView.currentHeight();
		if (rootElement.offsetParent != null) {
			width = rootElement.offsetParent.offsetWidth;
			height = rootElement.offsetParent.offsetHeight;
		}
		var clonedElement = rootElement.parentElement.cloneNode(true);
		clonedElement.style.left = "0px";
		clonedElement.style.top = "0px";
		clonedElement.style.width = width + "px";
		clonedElement.style.height = height + "px";
		var clonedElementChild = clonedElement.children[0];
		clonedElementChild.style.left = "0px";
		clonedElementChild.style.top = "0px";
		clonedElementChild.style.width = width + "px";
		clonedElementChild.style.height = height + "px";
		var clonedObj = $(clonedElement);
		var originalCanvases = $(rootElement.parentElement).find("canvas");
		var clonedCanvases = clonedObj.find("canvas");
		var count = originalCanvases.length;
		for (var i = 0; i < count; i++) {
			var originalCanvas = originalCanvases[i];
			var clonedCanvas = clonedCanvases[i];
			var data = originalCanvas.toDataURL();
			clonedCanvas.outerHTML = clonedCanvas.outerHTML.replace("<canvas", "<canvas imgsrc='" + data + "' ");
		}
		var originalInputs = $(rootElement.parentElement).find("input");
		var clonedInputs = clonedObj.find("input");
		count = originalInputs.length;
		for (var i1 = 0; i1 < count; i1++) {
			var originalInput = originalInputs[i1];
			var clonedInput = clonedInputs[i1];
			var val = originalInput.value;
			clonedInput.outerHTML = clonedInput.outerHTML.replace("<input", "<input value='" + val + "' ");
		}
		clonedObj.find("textarea").each(function(){this.innerHTML = this.value});
		var html = clonedElement.outerHTML;
		var baseUrl = $.ig.InfragisticsAPIRequestBase.prototype.baseInfragisticsAPIURL();
		var ajaxUrl = baseUrl + "tools/renderhtml/";
		var extraHeaders = $.ig.WebCoreUtils.prototype.getExtraHeaders(ajaxUrl);
		var addHeadersBlock = function (xhr, headers) {
			if (headers != null) {
				$.ig.WebCoreUtils.prototype.addHeaders(xhr, headers);
			}
		};
		
				$.ajax({
                    url: ajaxUrl, 
                    type: 'POST',
                    contentType: 'text/plain',
                    dataType: 'text',
                    data: html,
                    beforeSend: function (xhr) {
                        addHeadersBlock(xhr, extraHeaders);
                    },
					success: function(result) {
						var img = document.createElement('img');
						img.src = 'data:image/png;base64,' + result;
						img.style.width = '100%';
						img.style.height = '100%';
						screenshotSuccess(img);
					},
                    error: function(_, _a, err) {
                        console.error('unable to take screenshot: ' + err);
                    }});
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::TakeScreenshotHelper(Infragistics.CPViewBase, System.Boolean, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::TriggerHaptic(Infragistics.CPHapticType)" />*/
	triggerHaptic: function (hapticType) {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::TriggerHaptic(Infragistics.CPHapticType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::PrepareHaptic(Infragistics.CPHapticType)" />*/
	prepareHaptic: function (hapticType) {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::PrepareHaptic(Infragistics.CPHapticType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::EndHaptic()" />*/
	endHaptic: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::EndHaptic()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.NativeUIUtility::SaveOrShareFile(Infragistics.CPViewBase, System.Object, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock)" />*/
	saveOrShareFile: function (relativeView, output, name, extension, completedBlock, failedBlock, cancelledBlock) {
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(name)) {
			name = "Download";
		}
		if (extension.equals(".rdash")) {
			var decoded = atob(output);
			var bytes = new Array(decoded.length);
			for (var i = 0; i < decoded.length; i++){ bytes[i] = decoded.charCodeAt(i); } var byteArr = new Uint8Array(bytes);
			var doc = document.createElement('a');
			var blob;
			if (extension.equals(".xlsx")) {
				blob = new Blob([byteArr], {type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'});
			} else if (extension.equals(".pptx")) {
				blob = new Blob([byteArr], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
			} else if (extension.equals(".pdf")) {
				blob = new Blob([byteArr], {type: 'application/pdf'});
			} else {
				blob = new Blob([byteArr], {type: 'application/octet-stream'});
			}
			doc.href = window.URL.createObjectURL(blob);
			doc.download = name+extension;
		} else if ($.ig.CPImageUtility.prototype.isImageExtension(extension)) {
			var mimetype = "'image/" + $.ig.CPStringUtility.prototype.substring1(extension, 1, extension.length - 1) + "'";
			var base64Img = null;
			if ($.ig.util.cast($.ig.CPImage.prototype.$type, output) !== null) {
				base64Img = (output).base64Data();
			} else {
				base64Img = $.ig.NativeImageUtility.prototype.getImageData(output);
				base64Img = $.ig.NativeStringUtility.prototype.split(base64Img, ",")[1];
			}
			if (!$.ig.NativeStringUtility.prototype.endsWith(name, extension)) {
				name = name + extension;
			}
			var decoded = atob(base64Img);
			var bytes = new Array(decoded.length);
			for (var i = 0; i < decoded.length; i++){ bytes[i] = decoded.charCodeAt(i);} var byteArr = new Uint8Array(bytes);
			var doc = document.createElement('a');
			var blob = new Blob([byteArr], {type: mimetype});
			doc.href = window.URL.createObjectURL(blob);
			doc.download = name;
		} else {
			var doc = document.createElement('a');
			var blob = new Blob([output], {type: 'application/octet-stream'});
			doc.href = window.URL.createObjectURL(blob);
			doc.download = name+extension;
		}
		try {
			doc.click();
		}
		catch (e) {
			if (failedBlock != null) {
				failedBlock();
			}
			return;
		}
		if (completedBlock != null) {
			completedBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.NativeUIUtility::SaveOrShareFile(Infragistics.CPViewBase, System.Object, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.NativePoint Infragistics.NativeUIUtility::TranslatePoint(Infragistics.NativePoint, System.JQuery.JQueryObject, System.JQuery.JQueryObject)" />*/
	translatePoint: function (p, from, to) {
		var toPos = to.offset();
		var fromPos = from.offset();
		var fronLeft = 0;
		var fromTop = 0;
		if (fromPos != null) {
			fronLeft = fromPos.left;
			fromTop = fromPos.top;
		}
		var toLeft = 0;
		var toTop = 0;
		if (toPos != null) {
			toLeft = toPos.left;
			toTop = toPos.top;
		}
		return new $.ig.CPPoint(fronLeft - toLeft + p._x, fromTop - toTop + p._y);
	}
	/*<EndMethod Name="Infragistics.NativePoint Infragistics.NativeUIUtility::TranslatePoint(Infragistics.NativePoint, System.JQuery.JQueryObject, System.JQuery.JQueryObject)" />*/
	,
	$type: new $.ig.Type('NativeUIUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.NativeUIUtility" />*/

/*<BeginType Name="Infragistics.UIEventManager" />*/

$.ig.util.defType('UIEventManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.UIEventManager::Clear()" />*/
	clear: function () {
		$.ig.UIEventManager.prototype.__mouseDownCaptureView = null;
		$.ig.UIEventManager.prototype.__dragCaptureView = null;
		$.ig.UIEventManager.prototype.__panels.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.UIEventManager::Clear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIEventManager::CaptureDrag(Infragistics.InteractiveView)" />*/
	captureDrag: function (view) {
		if ($.ig.UIEventManager.prototype.__dragCaptureView == null) {
			$.ig.UIEventManager.prototype.__dragCaptureView = view;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIEventManager::CaptureDrag(Infragistics.InteractiveView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIEventManager::CaptureMouseDown(Infragistics.InteractiveView)" />*/
	captureMouseDown: function (view) {
		if ($.ig.UIEventManager.prototype.__mouseDownCaptureView == null) {
			$.ig.UIEventManager.prototype.__mouseDownCaptureView = view;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIEventManager::CaptureMouseDown(Infragistics.InteractiveView)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.UIEventManager::IsMouseDownCaptured()" />*/
	isMouseDownCaptured: function () {
		return $.ig.UIEventManager.prototype.__mouseDownCaptureView != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.UIEventManager::IsMouseDownCaptured()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIEventManager::ReleaseMouseDownCapture()" />*/
	releaseMouseDownCapture: function () {
		$.ig.UIEventManager.prototype.__mouseDownCaptureView = null;
	}
	/*<EndMethod Name="System.Void Infragistics.UIEventManager::ReleaseMouseDownCapture()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.UIEventManager::Intercept(System.Int32, System.Int32, Infragistics.InteractiveView, System.Boolean)" />*/
	intercept: function (x, y, view, isTouch) {
		var handled = false;
		var count = $.ig.UIEventManager.prototype.__panels.length;
		var vp = new $.ig.CPPoint(x, y);
		for (var i = 0; i < count; i++) {
			var v = $.ig.UIEventManager.prototype.__panels[i];
			if (v != view) {
				var p = view.translatePoint(vp, v);
				if (v.interceptMouseMove($.ig.truncate(p._x), $.ig.truncate(p._y), isTouch)) {
					handled = true;
					break;
				}
			}
		}
		if (handled) {
			$.ig.UIEventManager.prototype.clear();
		}
		return handled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.UIEventManager::Intercept(System.Int32, System.Int32, Infragistics.InteractiveView, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIEventManager::RegisterView(Infragistics.InteractiveView)" />*/
	registerView: function (view) {
		$.ig.UIEventManager.prototype.__panels.add(view);
	}
	/*<EndMethod Name="System.Void Infragistics.UIEventManager::RegisterView(Infragistics.InteractiveView)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.UIEventManager::IsDragCaptureView(Infragistics.InteractiveView)" />*/
	isDragCaptureView: function (view) {
		return $.ig.UIEventManager.prototype.__dragCaptureView == null || view == $.ig.UIEventManager.prototype.__dragCaptureView;
	}
	/*<EndMethod Name="System.Boolean Infragistics.UIEventManager::IsDragCaptureView(Infragistics.InteractiveView)" />*/
	,
	$type: new $.ig.Type('UIEventManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.UIEventManager" />*/

/*<BeginType Name="Infragistics.CPVideoPlayer" />*/

$.ig.util.defType('CPVideoPlayer', 'CPViewBase', {
	__player: null,
	__paused: false,
	__timer: null,
	__finishedLoading: null,
	init: function (uriString, finishedLoading, positionUpdated, finishedPlaying) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__finishedLoading = finishedLoading;
		this.__timer = new $.ig.CPTimer();
		this.__player = document.createElement("video");
		this.__player.onerror = function () {
	$self.__timer.stop();
	if (finishedPlaying != null) {
		finishedPlaying();
	}
};
		this.__player.onended = function () {
	$self.__timer.stop();
	if (finishedPlaying != null) {
		finishedPlaying();
	}
};
		this.__player.oncanplay = function () {
	$self.__player.muted = false;
	if (finishedLoading != null) {
		finishedLoading();
	}
};
		this.__player.src = uriString;
		this.__player.autoplay = false;
		this.__player.muted = true;
		this.__player.load();
		this.__timer.start2(1, true, function (tick) {
			if (!$self.__paused) {
				var pos = $self.currentPosition();
				var dur = $self.duration();
				if (positionUpdated != null) {
					positionUpdated(pos, dur);
				}
			}
		});
		this._element[0].appendChild(this.__player);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::Play()" />*/
	play: function () {
		this.__paused = false;
		this.__player.play();
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::Play()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::Pause()" />*/
	pause: function () {
		this.__paused = true;
		this.__player.pause();
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::Pause()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::Stop()" />*/
	stop: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::Stop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::Dismiss()" />*/
	dismiss: function () {
		this.__timer.stop();
		this.__timer = null;
		this.__player = null;
		if (this.__finishedLoading != null) {
			this.__finishedLoading();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::Dismiss()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::SetPosition(System.Double)" />*/
	setPosition: function (percent) {
		var seconds = percent > 0 ? this.duration() / percent : 0;
		this.__player.currentTime = seconds;
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::SetPosition(System.Double)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPVideoPlayer::CurrentPosition()" />*/
	currentPosition: function () {
		return this.__player.currentTime;
	}
	/*<EndProperty Name="System.Double Infragistics.CPVideoPlayer::CurrentPosition()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPVideoPlayer::Duration()" />*/
	duration: function () {
		return this.__player.duration;
	}
	/*<EndProperty Name="System.Double Infragistics.CPVideoPlayer::Duration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoPlayer::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.__player.width = w;
		this.__player.height = h;
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoPlayer::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPVideoPlayer', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPVideoPlayer" />*/

/*<BeginType Name="Infragistics.WebHostView" />*/

$.ig.util.defType('WebHostView', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__url: null,
	/*<BeginMethod Name="System.JQuery.JQueryObject Infragistics.WebHostView::CreateElement()" />*/
	createElement: function () {
		return $("<iframe />");
	}
	/*<EndMethod Name="System.JQuery.JQueryObject Infragistics.WebHostView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.WebHostView::SetURL(System.String)" />*/
	setURL: function (url) {
		this.__url = url;
		this._element.attr("src", url);
	}
	/*<EndMethod Name="System.Void Infragistics.WebHostView::SetURL(System.String)" />*/
	,
	$type: new $.ig.Type('WebHostView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.WebHostView" />*/

/*<BeginType Name="Infragistics.QuillWrapper" />*/

$.ig.util.defType('QuillWrapper', 'Object', {
	__quill: null,
	__quillContainerId: null,
	__quillContainerElement: null,
	__quillScrollingContainer: null,
	__placeholderText: null,
	__pendingActions: null,
	__enterKeyPressedBlock: null,
	__toggleTextFormatBlock: null,
	__selectionChangedBlock: null,
	__textChangedBlock: null,
	__selectionStart: 0,
	__selectionLength: 0,
	__selectionEnd: 0,
	__inQuillFormatText: false,
	init: function () {
		this.__placeholderText = "Some placeholder text...";
		this.__selectionStart = 0;
		this.__selectionLength = 0;
		this.__selectionEnd = 0;
		$.ig.Object.prototype.init.call(this);
		this.__pendingActions = new $.ig.Array();
	},
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::InitializeQuill(System.Html.Element, System.String)" />*/
	initializeQuill: function (quillContainerElement, quillContainerId) {
		var $self = this;
		if (null == this.__quill) {
			this.__quillContainerElement = quillContainerElement;
			this.__quillContainerId = quillContainerId;
			var placeholderText = this.__placeholderText;
			if (this.isActionPending($.ig.QuillWrapper.prototype.__setPlaceholderText)) {
				placeholderText = this.getPendingActionStringValue($.ig.QuillWrapper.prototype.__setPlaceholderText, "Enter text here...");
				this.removePendingAction($.ig.QuillWrapper.prototype.__setPlaceholderText);
			}
			var readOnly = false;
			if (this.isActionPending($.ig.QuillWrapper.prototype.__setReadOnly)) {
				readOnly = this.getPendingActionBoolValue($.ig.QuillWrapper.prototype.__setReadOnly, false);
				this.removePendingAction($.ig.QuillWrapper.prototype.__setReadOnly);
			}
			var handleTabBlock = function () { $self.handleTab(); };
			var handleToggleTextFormatBlock = function (f) { $self.handleToggleTextFormat(f); };
			
					var containerId = '#' + quillContainerId;

					// Options
					var jsonOptions = {};
					//jsonOptions['placeholder'] = placeholderText;
					jsonOptions['readOnly'] = readOnly;
					//jsonOptions['debug'] = 'info';

					if (null != this.__quillScrollingContainer)
					{
						jsonOptions['scrollingContainer'] = this.__quillScrollingContainer;
					}

					//Modules
					//
					var jsonModules = {};
					jsonOptions['modules'] = jsonModules;

					// Keyboard bindings
					var jsonKeyboard = {};
					jsonModules['keyboard'] = jsonKeyboard;

					jsonKeyboard['bindings'] = {
						  enter: {
							key: 13,
							handler: function(range,context) {
							  return $self.handleEnter(false);
							}
						},
						  shiftenter: {
							key: 13,
							shiftKey: true,
							handler: function(range,context) {
							  return $self.handleEnter(true);
							}
						},
						  tab: {
							key: 'tab',
							handler: function() {
							  handleTabBlock();
							}
						},
						  bold: {
							key: 'b',
							ctrlKey: true,
							handler: function() {
							  handleToggleTextFormatBlock('b');
							}					  
						},
						  italic: {
							key: 'i',
							ctrlKey: true,
							handler: function() {
							  handleToggleTextFormatBlock('i');
							}					  
						},
						  underline: {
							key: 'u',
							ctrlKey: true,
							handler: function() {
							  handleToggleTextFormatBlock('u');
							}					  
						},
						  strike: {
							key: 's',
							ctrlKey: true,
							handler: function() {
							  handleToggleTextFormatBlock('s');
							}					  
						}
					};

					this.__quill = new Quill(quillContainerElement, jsonOptions);
				;
			this.applyPendingActions();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::InitializeQuill(System.Html.Element, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetScrollingContainer(System.Html.Element)" />*/
	setScrollingContainer: function (quillScrollingContainer) {
		this.__quillScrollingContainer = quillScrollingContainer;
		if (null != this.__quill) {
			this.__quillContainerElement.innerHTML = "";
			this.__quill = null;
			this.initializeQuill(this.__quillContainerElement, this.__quillContainerId);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetScrollingContainer(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::IsQuillInitialized()" />*/
	isQuillInitialized: function () {
		return null != this.__quill;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::IsQuillInitialized()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::HandleEnter(System.Boolean)" />*/
	handleEnter: function (shiftPressed) {
		var shouldContinue = true;
		if (null != this.__enterKeyPressedBlock) {
			var cancel = this.__enterKeyPressedBlock(shiftPressed);
			shouldContinue = (cancel == false) ? true : false;
		}
		if (shouldContinue) {
			var updated = this.updatePrivateSelection(this.getSelectionStartFromSelection(), this.getSelectionEndFromSelection());
			if (updated) {
				if (null != this.__selectionChangedBlock) {
					this.__selectionChangedBlock(null, null, null);
				}
			}
		}
		return shouldContinue;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::HandleEnter(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::HandleTab()" />*/
	handleTab: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::HandleTab()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::HandleToggleTextFormat(System.String)" />*/
	handleToggleTextFormat: function (format) {
		if (null != this.__toggleTextFormatBlock) {
			this.__toggleTextFormatBlock(format);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::HandleToggleTextFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RegisterEnterKeyPressed(Infragistics.QuillCancellableEnterPressedBlock)" />*/
	registerEnterKeyPressed: function (block) {
		this.__enterKeyPressedBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RegisterEnterKeyPressed(Infragistics.QuillCancellableEnterPressedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RegisterToggleTextFormat(Infragistics.QuillToggleTextFormatBlock)" />*/
	registerToggleTextFormat: function (block) {
		this.__toggleTextFormatBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RegisterToggleTextFormat(Infragistics.QuillToggleTextFormatBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::IsActionPending(System.String)" />*/
	isActionPending: function (actionName) {
		for (var i = 0; i < this.__pendingActions.length; i++) {
			if ((this.__pendingActions[i]).name() == actionName) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::IsActionPending(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RemovePendingAction(System.String)" />*/
	removePendingAction: function (actionName) {
		for (var i = 0; i < this.__pendingActions.length; i++) {
			if ((this.__pendingActions[i]).name() == actionName) {
				this.__pendingActions.removeAt(i);
				return;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RemovePendingAction(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.QuillWrapper::GetPendingActionStringValue(System.String, System.String)" />*/
	getPendingActionStringValue: function (actionName, defaultValue) {
		for (var i = 0; i < this.__pendingActions.length; i++) {
			var action = this.__pendingActions[i];
			if (action.name() == actionName) {
				return action.stringValue();
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.String Infragistics.QuillWrapper::GetPendingActionStringValue(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::GetPendingActionBoolValue(System.String, System.Boolean)" />*/
	getPendingActionBoolValue: function (actionName, defaultValue) {
		for (var i = 0; i < this.__pendingActions.length; i++) {
			var action = this.__pendingActions[i];
			if (action.name() == actionName) {
				return action.boolValue();
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::GetPendingActionBoolValue(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::ApplyPendingActions()" />*/
	applyPendingActions: function () {
		if (this.__pendingActions.length < 1) {
			return;
		}
		for (var i = 0; i < this.__pendingActions.length; i++) {
			var action = this.__pendingActions[i];
			switch (action.name()) {
				case $.ig.QuillWrapper.prototype.__setReadOnly:
					this.setReadOnly(action.boolValue());
					break;
				case $.ig.QuillWrapper.prototype.__setTextAlignment:
					this.setTextAlignment(action.stringValue());
					break;
				case $.ig.QuillWrapper.prototype.__setText:
					this.setText(action.stringValue());
					break;
				case $.ig.QuillWrapper.prototype.__insertText:
					this.insertText(action.index(), action.stringValue());
					break;
				case $.ig.QuillWrapper.prototype.__setPlaceholderText:
					this.setPlaceholderText(action.stringValue());
					break;
				case $.ig.QuillWrapper.prototype.__attachTextChangedEvent:
					this.attachTextChangedEvent(action.objectValue());
					break;
				case $.ig.QuillWrapper.prototype.__detachTextChangedEvent:
					this.detachTextChangedEvent(action.objectValue());
					break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::ApplyPendingActions()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (val) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(1, $.ig.QuillWrapper.prototype.__setReadOnly, val));
			return;
		}
		
				if (null != this.__quill && null != this.__quill.editor)
				{
					if (false == val)
					{
						this.__quill.enable(true);
					}
					else
					{
						this.__quill.enable(false);
					}
				}
			;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetTextAlignment(System.String)" />*/
	setTextAlignment: function (textAlign) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(0, $.ig.QuillWrapper.prototype.__setTextAlignment, textAlign));
			return;
		}
		this.__quill.format('align', textAlign);
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetTextAlignment(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetText(System.String)" />*/
	setText: function (text) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(0, $.ig.QuillWrapper.prototype.__setText, text));
			return;
		}
		this.__quill.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::Update()" />*/
	update: function () {
		if (null == this.__quill) {
			return;
		}
		this.__quill.update();
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::Update()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::MoveCaretToTheEnd()" />*/
	moveCaretToTheEnd: function () {
		if (null == this.__quill) {
			return;
		}
		
				var len = this.__quill.getText().length;
				this.__quill.setSelection(len, 0);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::MoveCaretToTheEnd()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.QuillWrapper::GetText()" />*/
	getText: function () {
		if (null == this.__quill) {
			return "";
		}
		var text = "";
		text = this.__quill.getText();
		while ($.ig.NativeStringUtility.prototype.endsWith(text, "\n")) {
			text = $.ig.NativeStringUtility.prototype.substring(text, 0, text.length - 1);
		}
		return text;
	}
	/*<EndMethod Name="System.String Infragistics.QuillWrapper::GetText()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.QuillWrapper::GetTextInRange(System.Int32, System.Int32)" />*/
	getTextInRange: function (startIndex, length) {
		if (null == this.__quill) {
			return "";
		}
		if (startIndex < 0) {
			startIndex = 0;
		}
		var textLength = this.getText().length;
		if (startIndex > textLength) {
			startIndex = textLength;
		}
		if (startIndex + length > textLength) {
			length = textLength - startIndex;
		}
		var text = "";
		text = this.__quill.getText(startIndex, length);
		return text;
	}
	/*<EndMethod Name="System.String Infragistics.QuillWrapper::GetTextInRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SelectAllText()" />*/
	selectAllText: function () {
		if (null == this.__quill) {
			return;
		}
		
				var len = this.__quill.getText().length;
				this.__quill.setSelection(0, len);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SelectAllText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SelectText(System.Int32, System.Int32)" />*/
	selectText: function (startIndex, length) {
		if (null == this.__quill) {
			return;
		}
		
				this.__quill.setSelection(startIndex, length);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SelectText(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsInSelection(Infragistics.CPDictionary, System.Boolean)" />*/
	setFormatsInSelection: function (formats, removeExistingFormats) {
		var selectionStart = this.getSelectionStart();
		var selectionLength = this.getSelectionEnd() - selectionStart;
		this.setFormatsInSelection1(selectionStart, selectionLength, formats, removeExistingFormats);
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsInSelection(Infragistics.CPDictionary, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsInSelection(System.Int32, System.Int32, Infragistics.CPDictionary, System.Boolean)" />*/
	setFormatsInSelection1: function (startIndex, length, formats, removeExistingFormats) {
		if (null == this.__quill) {
			return;
		}
		if (removeExistingFormats) {
			
				this.__quill.removeFormat(startIndex, length);
				;
		}
		if (null == formats || formats.count() == 0) {
			return;
		}
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(formats);
		for (var i = 0; i < keys.length; i++) {
			var format = $.ig.QuillWrapper.prototype.quillFormatFromFormat(keys[i]);
			var value = formats.item(format);
			
				this.__quill.formatText(startIndex, length, format, value);
				;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsInSelection(System.Int32, System.Int32, Infragistics.CPDictionary, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsAtCaret(Infragistics.CPDictionary)" />*/
	setFormatsAtCaret: function (formats) {
		if (null == this.__quill) {
			return;
		}
		if (null == formats || formats.count() == 0) {
			return;
		}
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(formats);
		for (var i = 0; i < keys.length; i++) {
			var format = $.ig.QuillWrapper.prototype.quillFormatFromFormat(keys[i]);
			var value = formats.item(format);
			
				this.__quill.format(format, value);
				;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetFormatsAtCaret(Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionStart()" />*/
	getSelectionStart: function () {
		return this.__selectionStart;
	}
	/*<EndMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionStart()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionStartFromSelection()" />*/
	getSelectionStartFromSelection: function () {
		if (null == this.__quill) {
			return 0;
		}
		var selStart = 0;
		
				var range = this.__quill.getSelection();
				if (null != range)
				{
					selStart = range.index;
				}
				;
		return selStart;
	}
	/*<EndMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionStartFromSelection()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionEnd()" />*/
	getSelectionEnd: function () {
		return this.__selectionEnd;
	}
	/*<EndMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionEnd()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionEndFromSelection()" />*/
	getSelectionEndFromSelection: function () {
		if (null == this.__quill) {
			return 0;
		}
		var selEnd = 0;
		
				var range = this.__quill.getSelection();
				if (null != range)
				{
					selEnd = range.index + range.length;
				}
				;
		return selEnd;
	}
	/*<EndMethod Name="System.Int32 Infragistics.QuillWrapper::GetSelectionEndFromSelection()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::IsSelectionValid()" />*/
	isSelectionValid: function () {
		var ret = false;
		
				var range = this.__quill.getSelection();
				if (null != range)
				{
					ret = true;
				}
				else
				{
					ret = false;
				}
				;
		return ret;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::IsSelectionValid()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RemoveAllFormatting()" />*/
	removeAllFormatting: function () {
		if (null == this.__quill) {
			return;
		}
		var textLength = this.getText().length;
		this.removeFormattingInRange(0, textLength);
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RemoveAllFormatting()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RemoveFormattingInRange(System.Int32, System.Int32)" />*/
	removeFormattingInRange: function (startIndex, length) {
		if (null == this.__quill) {
			return;
		}
		
				this.__quill.removeFormat(startIndex, length);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RemoveFormattingInRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::DeleteText(System.Int32, System.Int32)" />*/
	deleteText: function (startIndex, length) {
		if (null == this.__quill) {
			return;
		}
		
				this.__quill.deleteText(startIndex, length);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::DeleteText(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::InsertText(System.Int32, System.String)" />*/
	insertText: function (index, text) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(2, $.ig.QuillWrapper.prototype.__insertText, index, text));
			return;
		}
		
				this.__quill.insertText(index, text);
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::InsertText(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.JSDOMRect Infragistics.QuillWrapper::GetBounds(System.Int32, System.Int32)" />*/
	getBounds: function (startIndex, length) {
		if (null == this.__quill) {
			return new DOMRect();
		}
		var left = 0;
		var top = 0;
		var width = 0;
		var height = 0;
		
				var bounds = this.__quill.getBounds(startIndex, length);
				left = bounds.left;
				top = bounds.top;
				width = bounds.width;
				height = bounds.height;
				;
		var rect = new DOMRect();
		rect.left = left;
		rect.top = top;
		rect.width = width;
		rect.height = height;
		rect.x = left;
		rect.y = top;
		rect.bottom = top + height;
		rect.right = left + width;
		return rect;
	}
	/*<EndMethod Name="Infragistics.JSDOMRect Infragistics.QuillWrapper::GetBounds(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetPlaceholderText(System.String)" />*/
	setPlaceholderText: function (placeholderText) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(0, $.ig.QuillWrapper.prototype.__setPlaceholderText, placeholderText));
			return;
		}
		var containerId = this.__quillContainerId;
		;
		this.__placeholderText = placeholderText;
		if (null != this.__quill) {
			
					this.__quill.root.setAttribute('data-placeholder', placeholderText);
					;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetPlaceholderText(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.QuillWrapper::GetPlaceholderText()" />*/
	getPlaceholderText: function () {
		if (null == this.__quill) {
			return "";
		}
		return this.__placeholderText;
	}
	/*<EndMethod Name="System.String Infragistics.QuillWrapper::GetPlaceholderText()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::GetDoesSelectionContainFormat(System.String)" />*/
	getDoesSelectionContainFormat: function (format) {
		var selectionStart = this.getSelectionStart();
		var selectionLength = this.getSelectionEnd() - selectionStart;
		return this.getDoesSelectionContainFormat1(format, selectionStart, selectionLength);
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::GetDoesSelectionContainFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::GetDoesSelectionContainFormat(System.String, System.Int32, System.Int32)" />*/
	getDoesSelectionContainFormat1: function (format, startIndex, length) {
		if (null == this.__quill) {
			return false;
		}
		var quillFormat = $.ig.QuillWrapper.prototype.quillFormatFromFormat(format);
		var formats = null;
		var formatExists = false;
		
					formats = this.__quill.getFormat(startIndex, length);
					if (quillFormat == 'bold' && null != formats.bold)
						formatExists = true;
					else
					if (quillFormat == 'italic' && null != formats.italic)
						formatExists = true;
					else
					if (quillFormat == 'strike' && null != formats.strike)
						formatExists = true;
					else
					if (quillFormat == 'underline' && null != formats.underline)
						formatExists = true;
					;
		return formatExists;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::GetDoesSelectionContainFormat(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.QuillWrapper::GetFormatsInSelection()" />*/
	getFormatsInSelection: function () {
		var selectionStart = this.getSelectionStart();
		var selectionLength = this.getSelectionEnd() - selectionStart;
		return this.getFormatsInSelection1(selectionStart, selectionLength);
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.QuillWrapper::GetFormatsInSelection()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.QuillWrapper::GetFormatsInSelection(System.Int32, System.Int32)" />*/
	getFormatsInSelection1: function (startIndex, length) {
		var formatDict = new $.ig.Dictionary(0);
		
				var formats = this.__quill.getFormat(startIndex, length);

				if (null != formats.bold)
					formatDict.item('bold', true);
				else
					formatDict.item('bold', false);

				if (null != formats.italic)
					formatDict.item('italic', true);
				else
					formatDict.item('italic', false);

				if (null != formats.underline)
					formatDict.item('underline', true);
				else
					formatDict.item('underline', false);

				if (null != formats.strike)
					formatDict.item('strike', true);
				else
					formatDict.item('strike', false);

				if (null != formats.color)
					formatDict.item('color', formats.color);
				else
					formatDict.item('color', false);

				if (null != formats.background)
					formatDict.item('background', formats.background);
				else
					formatDict.item('background', false);

				if (null != formats.link)
					formatDict.item('link', formats.link);
				else
					formatDict.item('link', false);
				;
		return formatDict;
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.QuillWrapper::GetFormatsInSelection(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::ToggleFormatInSelection(System.String)" />*/
	toggleFormatInSelection: function (format) {
		if (null == this.__quill) {
			return;
		}
		this.focus();
		var turnOnFormat = this.getDoesSelectionContainFormat(format) ? false : true;
		var quillFormat = $.ig.QuillWrapper.prototype.quillFormatFromFormat(format);
		
					if (turnOnFormat)
					{
						this.__quill.format(quillFormat, true);
					}
					else
					{
						this.__quill.format(quillFormat, false);
					}
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::ToggleFormatInSelection(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::Focus()" />*/
	focus: function () {
		if (null == this.__quill) {
			return;
		}
		
					this.__quill.focus();
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::Focus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::Blur()" />*/
	blur: function () {
		if (null == this.__quill) {
			return;
		}
		
					this.__quill.blur();
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::Blur()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::HasFocus()" />*/
	hasFocus: function () {
		if (null == this.__quill) {
			return false;
		}
		var result = false;
		
					result = this.__quill.hasFocus();
					;
		return result;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::HasFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::GetIsEnabled()" />*/
	getIsEnabled: function () {
		if (null == this.__quill) {
			return false;
		}
		var result = false;
		
					result = this.__quill.isEnabled();
					;
		return result;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::GetIsEnabled()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.QuillWrapper::GetRichTextFormattingBlocks()" />*/
	getRichTextFormattingBlocks: function () {
		if (null == this.__quill) {
			return new $.ig.Array();
		}
		var text = this.getText();
		var textLength = text.length;
		var blocks = new $.ig.Array();
		var dict = new $.ig.Dictionary(1, 8);
		dict.item("boldStart", -1);
		dict.item("boldLength", 0);
		dict.item("italicStart", -1);
		dict.item("italicLength", 0);
		dict.item("underlineStart", -1);
		dict.item("underlineLength", 0);
		dict.item("strikeThroughStart", -1);
		dict.item("strikeThroughLength", 0);
		var formats = new $.ig.Array();
		formats.add("bold");
		formats.add("italic");
		formats.add("underline");
		formats.add("strikeThrough");
		for (var i = 0; i < textLength; i++) {
			for (var j = 0; j < formats.length; j++) {
				var format = formats[j];
				if (this.getDoesSelectionContainFormat1(format, i, 1)) {
					this.processFormat(format, true, i, dict);
				} else {
					var block = this.processFormat(format, false, i, dict);
					if (null != block) {
						blocks.add(block);
					}
				}
			}
		}
		for (var j1 = 0; j1 < formats.length; j1++) {
			var format1 = formats[j1];
			var startKey = format1 + "Start";
			var lengthKey = format1 + "Length";
			if ($.ig.util.getValue(dict.item(startKey)) != -1) {
				blocks.add($.ig.CPRichTextFormattingBlock.prototype.create($.ig.util.getValue(dict.item(startKey)), $.ig.util.getValue(dict.item(lengthKey)), format1.charAt(0).toString()));
			}
		}
		return blocks;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.QuillWrapper::GetRichTextFormattingBlocks()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextFormattingBlock Infragistics.QuillWrapper::ProcessFormat(System.String, System.Boolean, System.Int32, Infragistics.CPDictionary)" />*/
	processFormat: function (format, isFormatPresent, offset, dict) {
		var startKey = format + "Start";
		var lengthKey = format + "Length";
		if (isFormatPresent) {
			if ($.ig.util.getValue(dict.item(startKey)) == -1) {
				dict.item(startKey, offset);
				dict.item(lengthKey, 1);
			} else {
				dict.item(lengthKey, $.ig.util.getValue(dict.item(lengthKey)) + 1);
			}
		} else {
			if ($.ig.util.getValue(dict.item(startKey)) != -1) {
				var block = $.ig.CPRichTextFormattingBlock.prototype.create($.ig.util.getValue(dict.item(startKey)), $.ig.util.getValue(dict.item(lengthKey)), format.charAt(0).toString());
				dict.item(startKey, -1);
				dict.item(lengthKey, 0);
				return block;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPRichTextFormattingBlock Infragistics.QuillWrapper::ProcessFormat(System.String, System.Boolean, System.Int32, Infragistics.CPDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::SetTextFormatsAndAttributes(Infragistics.CPList, Infragistics.CPDictionary, System.Int32, System.Int32)" />*/
	setTextFormatsAndAttributes: function (formats, attributes, offset, length) {
		if (null == this.__quill) {
			return;
		}
		var jsonData = { };;
		if (null != formats) {
			for (var i = 0; i < formats.length; i++) {
				var name = $.ig.QuillWrapper.prototype.quillFormatFromFormat(formats[i]);
				jsonData[name] = true;;
			}
		}
		if (null != attributes) {
			var attributeKeys = $.ig.NativeDictionaryUtility.prototype.getKeys(attributes);
			if (attributeKeys.length > 0) {
				for (var i1 = 0; i1 < attributeKeys.length; i1++) {
					var key = attributeKeys[i1];
					var val = attributes.item(key);
					jsonData[key] = val;;
				}
			}
		}
		this.__inQuillFormatText = true;
		
					this.__quill.formatText(offset, length, jsonData);
					;
		this.__inQuillFormatText = false;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::SetTextFormatsAndAttributes(Infragistics.CPList, Infragistics.CPDictionary, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::RemoveFormat(System.String, System.Int32, System.Int32)" />*/
	removeFormat: function (format, startIndex, length) {
		var fmt = $.ig.QuillWrapper.prototype.quillFormatFromFormat(format);
		
					this.__quill.formatText(startIndex, length, fmt, false);
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::RemoveFormat(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.QuillWrapper::QuillFormatFromFormat(System.String)" />*/
	quillFormatFromFormat: function (format) {
		var fmt = format.toLowerCase();
		if (fmt == "b" || fmt == "bold") {
			return "bold";
		}
		if (fmt == "i" || fmt == "italic") {
			return "italic";
		}
		if (fmt == "u" || fmt == "underline") {
			return "underline";
		}
		if (fmt == "s" || fmt == "strikethrough" || fmt == "strike") {
			return "strike";
		}
		if (fmt == "c" || fmt == "color") {
			return "color";
		}
		if (fmt == "back" || fmt == "background") {
			return "background";
		}
		if (fmt == "l" || fmt == "link") {
			return "link";
		}
		return format;
	}
	/*<EndMethod Name="System.String Infragistics.QuillWrapper::QuillFormatFromFormat(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::AttachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	attachTextChangedEvent: function (textChangedBlock) {
		var $self = this;
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(3, $.ig.QuillWrapper.prototype.__attachTextChangedEvent, textChangedBlock));
			return;
		}
		this.__textChangedBlock = textChangedBlock;
		var handleTextChangedBlock = function (d, o, s) { $self.handleTextChanged(d, o, s); };
		
				this.__quill.on('text-change', function(d,o,s) {
							handleTextChangedBlock(d, o, s);
						});
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::AttachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::HandleTextChanged(System.Object, System.Object, System.String)" />*/
	handleTextChanged: function (delta, oldDelta, source) {
		if (this.hasFocus()) {
			var updated = this.updatePrivateSelection(this.getSelectionStartFromSelection(), this.getSelectionEndFromSelection());
			if (updated && null != this.__selectionChangedBlock) {
				this.__selectionChangedBlock(null, null, null);
			}
		}
		if (this.__inQuillFormatText) {
			return;
		}
		if (null != this.__textChangedBlock) {
			this.__textChangedBlock(delta, oldDelta, source);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::HandleTextChanged(System.Object, System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::DetachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	detachTextChangedEvent: function (textChangedBlock) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(3, $.ig.QuillWrapper.prototype.__detachTextChangedEvent, textChangedBlock));
			return;
		}
		
					this.__quill.off('text-change', textChangedBlock);
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::DetachTextChangedEvent(Infragistics.QuillTextChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::AttachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	attachSelectionChangedEvent: function (selectionChangedBlock) {
		var $self = this;
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(3, $.ig.QuillWrapper.prototype.__attachSelectionChangedEvent, selectionChangedBlock));
			return;
		}
		this.__selectionChangedBlock = selectionChangedBlock;
		var handleSelectionChangedBlock = function (r, o, s) { $self.handleSelectionChanged(r, o, s); };
		
				this.__quill.on('selection-change', function(r,o,s) {
							handleSelectionChangedBlock(r, o, s);
						});
				;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::AttachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::HandleSelectionChanged(System.Object, System.Object, System.String)" />*/
	handleSelectionChanged: function (range, oldRange, source) {
		var isRangeValid = false;
		var selectionChanged = false;
		
				if (null != range)
				{
					isRangeValid = true;

					if (null == oldRange || range.index != oldRange.index || range.length != oldRange.length)
					{
						selectionChanged = this.updatePrivateSelection(range.index, range.index + range.length)
					}
				}
			;
		if (isRangeValid && selectionChanged) {
			if (null != this.__selectionChangedBlock) {
				this.__selectionChangedBlock(range, oldRange, source);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::HandleSelectionChanged(System.Object, System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.QuillWrapper::UpdatePrivateSelection(System.Int32, System.Int32)" />*/
	updatePrivateSelection: function (selectionStart, selectionEnd) {
		if (false == this.isSelectionValid()) {
			return false;
		}
		if (selectionStart != this.__selectionStart || selectionEnd != this.__selectionEnd) {
			this.__selectionStart = selectionStart;
			this.__selectionEnd = selectionEnd;
			this.__selectionLength = selectionEnd - selectionStart;
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.QuillWrapper::UpdatePrivateSelection(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.QuillWrapper::DetachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	detachSelectionChangedEvent: function (selectionChangedBlock) {
		if (null == this.__quill) {
			this.__pendingActions.add(new $.ig.PendingAction(3, $.ig.QuillWrapper.prototype.__detachSelectionChangedEvent, selectionChangedBlock));
			return;
		}
		
					this.__quill.off('selection-change', selectionChangedBlock);
					;
	}
	/*<EndMethod Name="System.Void Infragistics.QuillWrapper::DetachSelectionChangedEvent(Infragistics.QuillSelectionChangedBlock)" />*/
	,
	$type: new $.ig.Type('QuillWrapper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.QuillWrapper" />*/

/*<BeginType Name="Infragistics.PendingAction" />*/

$.ig.util.defType('PendingAction', 'Object', {
	init: function (initNumber, name, stringValue) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.name(name);
		this.stringValue(stringValue);
	},
	init1: function (initNumber, name, boolValue) {
		$.ig.Object.prototype.init.call(this);
		this.name(name);
		this.boolValue(boolValue);
	},
	init2: function (initNumber, name, index, stringValue) {
		$.ig.Object.prototype.init.call(this);
		this.name(name);
		this.index(index);
		this.stringValue(stringValue);
	},
	init3: function (initNumber, name, objectValue) {
		$.ig.Object.prototype.init.call(this);
		this.name(name);
		this.objectValue(objectValue);
	},
	__name: null,
	/*<BeginProperty Name="System.String Infragistics.PendingAction::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this.__name = value;
			return value;
		} else {
			return this.__name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.PendingAction::Name()" />*/
	,
	__stringValue: null,
	/*<BeginProperty Name="System.String Infragistics.PendingAction::StringValue()" />*/
	stringValue: function (value) {
		if (arguments.length === 1) {
			this.__stringValue = value;
			return value;
		} else {
			return this.__stringValue;
		}
	}
	/*<EndProperty Name="System.String Infragistics.PendingAction::StringValue()" />*/
	,
	__objectValue: null,
	/*<BeginProperty Name="System.Object Infragistics.PendingAction::ObjectValue()" />*/
	objectValue: function (value) {
		if (arguments.length === 1) {
			this.__objectValue = value;
			return value;
		} else {
			return this.__objectValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.PendingAction::ObjectValue()" />*/
	,
	__index: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.PendingAction::Index()" />*/
	index: function (value) {
		if (arguments.length === 1) {
			this.__index = value;
			return value;
		} else {
			return this.__index;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.PendingAction::Index()" />*/
	,
	__boolValue: false,
	/*<BeginProperty Name="System.Boolean Infragistics.PendingAction::BoolValue()" />*/
	boolValue: function (value) {
		if (arguments.length === 1) {
			this.__boolValue = value;
			return value;
		} else {
			return this.__boolValue;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.PendingAction::BoolValue()" />*/
	,
	$type: new $.ig.Type('PendingAction', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PendingAction" />*/

/*<BeginType Name="Infragistics.AnimatableDrawingView" />*/

$.ig.util.defType('AnimatableDrawingView', 'DrawingViewBase', {
	init: function () {
		$.ig.DrawingViewBase.prototype.init.call(this);
	},
	__animator: null,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::Setup()" />*/
	setup: function () {
		$.ig.DrawingViewBase.prototype.setup.call(this);
		this.__animator = new $.ig.AnimationHelper(0, this, this.animationType());
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::Setup()" />*/
	,
	/*<BeginProperty Name="Infragistics.AnimationType Infragistics.AnimatableDrawingView::AnimationType()" />*/
	animationType: function () {
		return $.ig.AnimationType.prototype.easeInEaseOut;
	}
	/*<EndProperty Name="Infragistics.AnimationType Infragistics.AnimatableDrawingView::AnimationType()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationTick(System.Double)" />*/
	animationTick: function (percent) {
		this.tick(percent);
		this.render1(true);
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationTick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationFinished()" />*/
	animationFinished: function () {
		this.animationComplete();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationFinished()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::StartWhereWeLeftOff()" />*/
	startWhereWeLeftOff: function () {
		this.__animator.startWhereWeLeftOff();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::StartWhereWeLeftOff()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::Start()" />*/
	start: function () {
		this.__animator.start();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::Start()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::Stop()" />*/
	stop: function () {
		this.__animator.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::Stop()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.AnimatableDrawingView::Percent()" />*/
	percent: function () {
		return this.__animator.percent();
	}
	/*<EndProperty Name="System.Double Infragistics.AnimatableDrawingView::Percent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationComplete()" />*/
	animationComplete: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::AnimationComplete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.AnimatableDrawingView::Tick(System.Double)" />*/
	tick: function (percent) {
	}
	/*<EndMethod Name="System.Void Infragistics.AnimatableDrawingView::Tick(System.Double)" />*/
	,
	$type: new $.ig.Type('AnimatableDrawingView', $.ig.DrawingViewBase.prototype.$type, [$.ig.AnimationHelperDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.AnimatableDrawingView" />*/

/*<BeginType Name="Infragistics.CPGridViewCellAnimator" />*/

$.ig.util.defType('CPGridViewCellAnimator', 'Object', {
	init: function () {
		this.__duration = -1;
		$.ig.Object.prototype.init.call(this);
	},
	_completionBlock: null,
	_refreshVisibleCellsAfterAnimation: false,
	_cellsBeingRemoved: null,
	_differenceInVerticalScrollPosition: 0,
	_differenceInHorizontalScrollPosition: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustVerticalScrollPosition: function (engine, grid, prevContentOffsetY) {
		if (this.dontAjustScrollPositions()) {
			return prevContentOffsetY;
		}
		return grid.getContentOffsetY();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellAnimator::AdjustHorizontalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustHorizontalScrollPosition: function (engine, grid, prevContentOffsetX) {
		if (this.dontAjustScrollPositions()) {
			return prevContentOffsetX;
		}
		return grid.getContentOffsetX();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellAnimator::AdjustHorizontalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	_dontAjustScrollPositions: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellAnimator::DontAjustScrollPositions()" />*/
	dontAjustScrollPositions: function (value) {
		if (arguments.length === 1) {
			this._dontAjustScrollPositions = value;
			return value;
		} else {
			return this._dontAjustScrollPositions;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellAnimator::DontAjustScrollPositions()" />*/
	,
	__duration: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewCellAnimator::Duration()" />*/
	duration: function (value) {
		if (arguments.length === 1) {
			this.__duration = value;
			return value;
		} else {
			return this.__duration;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewCellAnimator::Duration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		engine.measureCell(cell, cell._frameX, cell._frameY, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		if (this._cellsBeingRemoved == null) {
			this._cellsBeingRemoved = new $.ig.Array();
		}
		this._cellsBeingRemoved.add(cell);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	_pathsBeingAdded: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AddPathBeingInserted(Infragistics.CPGridViewLayoutEngine, Infragistics.CPRowPath)" />*/
	addPathBeingInserted: function (engine, path) {
		if (this._pathsBeingAdded == null) {
			this._pathsBeingAdded = new $.ig.Array();
		}
		this._pathsBeingAdded.add(path);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AddPathBeingInserted(Infragistics.CPGridViewLayoutEngine, Infragistics.CPRowPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellAnimator::Finished()" />*/
	finished: function () {
		if (this._completionBlock != null) {
			this._completionBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellAnimator::Finished()" />*/
	,
	$type: new $.ig.Type('CPGridViewCellAnimator', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellAnimator" />*/

/*<BeginType Name="Infragistics.CPBucketAddCellAnimator" />*/

$.ig.util.defType('CPBucketAddCellAnimator', 'CPGridViewCellAnimator', {
	__hasAddButton: false,
	init: function (hasAddButton) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__hasAddButton = hasAddButton;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		var lastCol = cell._gridView.getDataSource().getNumberOfColumnsInGrid() - 1;
		var addCell = this.__hasAddButton ? cell._gridView.cellAtPath(new $.ig.CPCellPath(1, 0, 0, lastCol)) : null;
		var x = addCell == null ? cell._gridView.currentWidth() + cell._gridView.getContentOffsetX() : addCell._frameX + $.ig.intDivide(addCell._frameW, 2) + this._differenceInHorizontalScrollPosition * -1;
		engine.measureCell(cell, x, cell._frameY + $.ig.intDivide(cell._frameH, 2), 1, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		if (this._differenceInHorizontalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX + this._differenceInHorizontalScrollPosition * -1, cell._frameY, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (this._differenceInHorizontalScrollPosition != 0) {
			engine.measureCell(cell, prevX + this._differenceInHorizontalScrollPosition * -1, prevY, prevW, prevH);
		} else {
			$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketAddCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPBucketAddCellAnimator::AdjustHorizontalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustHorizontalScrollPosition: function (engine, grid, prevContentOffsetX) {
		var contentOffset = prevContentOffsetX;
		contentOffset = grid._actualContentWidth - grid.currentWidth() + grid.rightInset();
		contentOffset = Math.max(contentOffset, 0);
		grid.scrollTo(contentOffset, grid.getContentOffsetY());
		return contentOffset;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPBucketAddCellAnimator::AdjustHorizontalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPBucketAddCellAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPBucketAddCellAnimator" />*/

/*<BeginType Name="Infragistics.CPBucketRemoveCellAnimator" />*/

$.ig.util.defType('CPBucketRemoveCellAnimator', 'CPGridViewCellAnimator', {
	init: function () {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPBucketRemoveCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		engine.measureCell(cell, cell._frameX + this._differenceInHorizontalScrollPosition * -1, cell._frameY, cell._frameW, cell._frameH);
		cell.storeFrame(cell._frameX + this._differenceInHorizontalScrollPosition * -1, cell._gridView.getContentOffsetY() + cell._gridView.getContentHeight(), cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketRemoveCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketRemoveCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		engine.measureCell(cell, prevX + this._differenceInHorizontalScrollPosition * -1, prevY, prevW, prevH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketRemoveCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPBucketRemoveCellAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPBucketRemoveCellAnimator" />*/

/*<BeginType Name="Infragistics.CPDroppableViewDelegate" />*/

$.ig.util.defType('CPDroppableViewDelegate', 'Object', {
	$type: new $.ig.Type('CPDroppableViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPDroppableViewDelegate" />*/

/*<BeginType Name="Infragistics.CPBucketView" />*/

$.ig.util.defType('CPBucketView', 'CPViewBase', {
	__gridView: null,
	__dsh: null,
	__colWidth: null,
	__horizontalScrollBarView: null,
	init: function (col) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__horizontalScrollBarView = new $.ig.CPBucketViewScrollbar();
		this.__horizontalScrollBarView.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		this.__horizontalScrollBarView.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__horizontalScrollBarView._thumbMoved = function (drag, newLocation) {
			$self.horizontalThumbMoved(drag, $.ig.util.getValue(newLocation));
		};
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__horizontalScrollBarView, "horizontalScrollBarView");
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "BucketView");
		this.addSubview(this.__horizontalScrollBarView);
		this.__gridView = new $.ig.CPGridView(0);
		this.__gridView._headerHeight = 0;
		this.__gridView.setScrollBarVisiblitity(false, false);
		this.__gridView.alwaysBounceHorizontal(true);
		this.__gridView._rowSeparatorHeight = 0;
		this.__gridView.alwaysBounceVertical(false);
		this.__gridView.clipToBounds(false);
		this.__gridView._scrollChangedBlock = function (x, y) {
			$self.scrollChanged();
		};
		this.addSubview(this.__gridView);
		this.__gridView._neverUseSideSpacing = true;
		this.__colWidth = $.ig.CPColumnWidth.prototype.createWithFixedWidth(1);
		col.width(this.__colWidth);
		this.__dsh = new $.ig.CPGridViewSingleRowSingleFieldDataSourceHelper(col);
		this.__gridView.setDataSource(this.__dsh);
	},
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPBucketView::GetCellAtPath(Infragistics.CPCellPath)" />*/
	getCellAtPath: function (cellPath) {
		return this.__gridView.cellAtPath(cellPath);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPBucketView::GetCellAtPath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketView::AlwaysBounceHorizontal()" />*/
	alwaysBounceHorizontal: function (value) {
		if (arguments.length === 1) {
			this.__gridView.alwaysBounceHorizontal(value);
			return value;
		} else {
			return this.__gridView.alwaysBounceHorizontal();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketView::AlwaysBounceHorizontal()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::SetContentSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	setContentSizeChangedListener: function (block) {
		this.__gridView._contentSizeChangedBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::SetContentSizeChangedListener(Infragistics.SizeChangeBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::SetData(Infragistics.CPList)" />*/
	setData: function (data) {
		this.__dsh.data(data);
		this.__gridView.updateData(true);
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::SetData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::RefreshData()" />*/
	refreshData: function () {
		this.__gridView.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::RefreshData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::AnimateSectionAdded(Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	animateSectionAdded: function (newData, insertIndex, finished) {
		this.__dsh.data(newData);
		var animator = new $.ig.CPBucketAddCellAnimator(true);
		animator._completionBlock = finished;
		this.__gridView.insertCell(new $.ig.CPCellPath(1, 0, 0, insertIndex), animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::AnimateSectionAdded(Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::HorizontalThumbMoved(System.Boolean, System.Int32)" />*/
	horizontalThumbMoved: function (drag, newLocation) {
		if (drag) {
			this.__gridView.scrollTo(newLocation, this.__gridView.getContentOffsetY());
		} else {
			this.__gridView.scrollTo1(newLocation, this.__gridView.getContentOffsetY(), $.ig.ThemeManager.prototype.theme().animationDuration(), null);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::HorizontalThumbMoved(System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::ScrollChanged()" />*/
	scrollChanged: function () {
		var wasHidden = this.__horizontalScrollBarView.isHidden();
		this.__horizontalScrollBarView.updateScrollBar(this.__gridView.getContentOffsetX(), this.__gridView.currentWidth(), this.__gridView.getContentWidth(), false);
		if (wasHidden != this.__horizontalScrollBarView.isHidden()) {
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::ScrollChanged()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketView::InsetPadding()" />*/
	insetPadding: function () {
		return this.__gridView.currentX();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketView::InsetPadding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var bottomInset = this.bottomInset();
		h -= bottomInset;
		var top = 0;
		var padding = $.ig.ThemeManager.prototype.theme().displayAreaPadding();
		this.__gridView._columnSpacing = padding;
		this.__colWidth._value = Math.min(w - padding, $.ig.NativeUIUtility.prototype.utility().densify(310));
		var scrollbarHeight, scrollbarSpace;
		if ($.ig.PlatformInfo.prototype.isPrimaryInputTouch()) {
			scrollbarHeight = $.ig.NativeUIUtility.prototype.utility().densify(2);
			scrollbarSpace = $.ig.ThemeManager.prototype.theme().padding10();
			if (bottomInset > 0) {
				h += $.ig.intDivide(scrollbarSpace, 2);
			}
		} else {
			scrollbarSpace = $.ig.ThemeManager.prototype.theme().padding20();
			scrollbarHeight = $.ig.intDivide(scrollbarSpace, 2);
		}
		if (this.__horizontalScrollBarView.isHidden() && bottomInset == 0) {
			scrollbarSpace = padding;
		}
		var gridHeight = h - top - scrollbarSpace;
		this.__gridView._rowHeight = gridHeight;
		var gridPadding = padding;
		this.measureView(this.__gridView, gridPadding, top, w - gridPadding * 2, gridHeight);
		top += gridHeight;
		this.measureView(this.__horizontalScrollBarView, padding, top + ($.ig.intDivide(scrollbarSpace, 2) - $.ig.intDivide(scrollbarHeight, 2)), w - padding * 2, scrollbarHeight);
		this.scrollChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketView::SupportsInsets()" />*/
	supportsInsets: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketView::SupportsInsets()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::ViewInsetsChanged()" />*/
	viewInsetsChanged: function () {
		$.ig.CPViewBase.prototype.viewInsetsChanged.call(this);
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::ViewInsetsChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		this.__gridView.unload();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::Unload()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPBucketView::ResolveDroppableRelativeView()" />*/
	resolveDroppableRelativeView: function () {
		return this;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPBucketView::ResolveDroppableRelativeView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::OnContentDropped(System.Object)" />*/
	onContentDropped: function (o) {
		this.__gridView.stopAutoScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::OnContentDropped(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::DropOperationFinished(System.Boolean, System.String, System.Object)" />*/
	dropOperationFinished: function (wasDroppedOn, dropType, o) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::DropOperationFinished(System.Boolean, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketView::AcceptsDropObject(System.String, System.Object)" />*/
	acceptsDropObject: function (dropType, o) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketView::AcceptsDropObject(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	dragIsOverView: function (view, x, y) {
		var ptInGrid = this.translatePoint(new $.ig.CPPoint(x, y), this.__gridView);
		var ptInGridX = $.ig.truncate(ptInGrid._x);
		this.__gridView.checkForHorizontalAutoScroll(ptInGridX);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketView::DragHasLeftView(Infragistics.CPViewBase)" />*/
	dragHasLeftView: function (view) {
		this.__gridView.stopAutoScroll();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketView::DragHasLeftView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPBucketView::ResolveDropViewClippingContainer()" />*/
	resolveDropViewClippingContainer: function () {
		return null;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPBucketView::ResolveDropViewClippingContainer()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketView::PreferSmallModeDroppableContent(System.String)" />*/
	preferSmallModeDroppableContent: function (key) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketView::PreferSmallModeDroppableContent(System.String)" />*/
	,
	$type: new $.ig.Type('CPBucketView', $.ig.CPViewBase.prototype.$type, [$.ig.CPDroppableViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPBucketView" />*/

/*<BeginType Name="Infragistics.CPInteractionView" />*/

$.ig.util.defType('CPInteractionView', 'CPView', {
	init: function () {
		this.__hasFocus = false;
		$.ig.CPView.prototype.init.call(this);
	},
	_stateInfo: null,
	/*<BeginProperty Name="System.Object Infragistics.CPInteractionView::StateInfo()" />*/
	stateInfo: function (value) {
		if (arguments.length === 1) {
			this._stateInfo = value;
			return value;
		} else {
			return this._stateInfo;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.CPInteractionView::StateInfo()" />*/
	,
	_stateValue: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPInteractionView::StateValue()" />*/
	stateValue: function (value) {
		if (arguments.length === 1) {
			this._stateValue = value;
			return value;
		} else {
			return this._stateValue;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPInteractionView::StateValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPInteractionView::FocusBorderWidth()" />*/
	focusBorderWidth: function () {
		return $.ig.ThemeManager.prototype.theme().borderWidth2();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPInteractionView::FocusBorderWidth()" />*/
	,
	__borderWidth: 0,
	__borderColor: null,
	__hasFocus: false,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ElementGotFocus()" />*/
	elementGotFocus: function () {
		$.ig.CPView.prototype.elementGotFocus.call(this);
		if (this.__hasFocus == false) {
			this.__hasFocus = true;
			this.applyFocusStyling();
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ElementLostFocus()" />*/
	elementLostFocus: function () {
		$.ig.CPView.prototype.elementLostFocus.call(this);
		if (this.__hasFocus) {
			this.__hasFocus = false;
			this.clearFocusStyling();
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplyFocusStyling()" />*/
	applyFocusStyling: function () {
		if (this.__highlightBackgroundView != null && !this.disableBackgroundHighlights()) {
			this.updateInteractionStates1(this.__isCurrentlyHovering, this.__isMouseCurrentlyDown);
		} else {
			this.__borderColor = this.getBorderColor();
			this.__borderWidth = this.getBorderWidth();
			this.setBorderWidth(this.focusBorderWidth());
			this.setBorderColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplyFocusStyling()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ClearFocusStyling()" />*/
	clearFocusStyling: function () {
		if (this.__highlightBackgroundView != null && !this.disableBackgroundHighlights()) {
			this.updateInteractionStates1(this.__isCurrentlyHovering, this.__isMouseCurrentlyDown);
		} else {
			this.setBorderWidth(this.__borderWidth);
			this.setBorderColor(this.__borderColor);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ClearFocusStyling()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::IsDisplayingFocus()" />*/
	isDisplayingFocus: function () {
		return this.__hasFocus;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::IsDisplayingFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::TriggerClick()" />*/
	triggerClick: function () {
		this.handleClick($.ig.intDivide(this.currentWidth(), 2), $.ig.intDivide(this.currentHeight(), 2));
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::TriggerClick()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.UIUtility.prototype.trackActivity();
		var focusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
		if (focusManager != null) {
			focusManager.setCurrentActiveElement(this, false);
		}
		$.ig.CPView.prototype.handleClick.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsHighlightBackgroundView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::EnsureHighlightBGView()" />*/
	ensureHighlightBGView: function () {
		if (this.__highlightBackgroundView != null) {
			var parent = this.__highlightBackgroundView.getParent();
			if (parent != null) {
				parent.removeSubview(this.__highlightBackgroundView);
			}
			this.parentToHighlightBGView().addSubview(this.__highlightBackgroundView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::EnsureHighlightBGView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPInteractionView::ParentToHighlightBGView()" />*/
	parentToHighlightBGView: function () {
		return this;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPInteractionView::ParentToHighlightBGView()" />*/
	,
	__defaultBg: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		$.ig.CPView.prototype.setBackgroundColor.call(this, color);
		this.__defaultBg = color;
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setBackgroundColor(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetBackgroundColor(System.String)" />*/
	,
	__highlightBackgroundView: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::Setup()" />*/
	setup: function () {
		$.ig.CPView.prototype.setup.call(this);
		this.tooltipPosition($.ig.CPPopupPosition.prototype.above);
		if (this.supportsHighlightBackgroundView()) {
			this.__highlightBackgroundView = new $.ig.CPView();
			this.__highlightBackgroundView.shouldSteaFocusFromTextEditors(this.shouldSteaFocusFromTextEditors());
			this.addHightlightBackgroundView(this.__highlightBackgroundView);
			this.setBackgroundColor(this.getBackgroundColor());
		} else {
			this.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(0));
		}
		this.isFocusable(true);
		this.__cursor = $.ig.CPCursors.prototype.clickable;
		this.setCursor(this.preferredCursor());
		this._element[0].style.pointerEvents = "auto";
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::Setup()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::ShouldSteaFocusFromTextEditors()" />*/
	shouldSteaFocusFromTextEditors: function (value) {
		if (arguments.length === 1) {
			$.ig.CPView.prototype.shouldSteaFocusFromTextEditors.call(this, value);
			if (this.__highlightBackgroundView != null) {
				this.__highlightBackgroundView.shouldSteaFocusFromTextEditors(value);
			}
			return value;
		} else {
			return $.ig.CPView.prototype.shouldSteaFocusFromTextEditors.call(this);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::ShouldSteaFocusFromTextEditors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::AddHightlightBackgroundView(Infragistics.CPView)" />*/
	addHightlightBackgroundView: function (view) {
		this.addSubview(this.__highlightBackgroundView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::AddHightlightBackgroundView(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		$.ig.CPView.prototype.handlePointerDown.call(this, x, y, quietly);
		if (!quietly) {
			this.hideTooltip();
			this.updateInteractionStates1(true, true);
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HandleTouchUp(System.Int32, System.Int32)" />*/
	handleTouchUp: function (x, y) {
		$.ig.CPView.prototype.handleTouchUp.call(this, x, y);
		this.hideTooltip();
		this.updateInteractionStates1(false, false);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HandleTouchUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HandleMouseUp(System.Int32, System.Int32)" />*/
	handleMouseUp: function (x, y) {
		$.ig.CPView.prototype.handleMouseUp.call(this, x, y);
		this.hideTooltip();
		this.updateInteractionStates1(true, false);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HandleMouseUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::HandlePointerLeave(System.Int32, System.Int32)" />*/
	handlePointerLeave: function (x, y) {
		$.ig.CPView.prototype.handlePointerLeave.call(this, x, y);
		this.__isActuallyOver = false;
		this.updateHoverInteraction(false);
		this.hideTooltip();
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::HandlePointerLeave(System.Int32, System.Int32)" />*/
	,
	__isActuallyOver: false,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::HandlePointerEnter(System.Int32, System.Int32)" />*/
	handlePointerEnter: function (x, y) {
		var $self = this;
		$.ig.CPView.prototype.handlePointerEnter.call(this, x, y);
		this.__isActuallyOver = true;
		this.updateHoverInteraction(this.isOverInteractionArea(x, y));
		if (this.supportsTooltips() && !this.isMouseDown()) {
			if (this.showMouseOverTooltipImmediately()) {
				this.showTooltip();
			} else {
				if (this.__tooltipTimer == null) {
					var delay = 0.75;
					if (this.showMouseOverTooltipImmediately()) {
						delay = 0.25;
					}
					this.__tooltipTimer = new $.ig.CPTimer();
					this.__tooltipTimer.startAndFireOnce(delay, function () {
						$self.showTooltip();
					});
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::HandlePointerEnter(System.Int32, System.Int32)" />*/
	,
	_showMouseOverTooltipImmediately: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::ShowMouseOverTooltipImmediately()" />*/
	showMouseOverTooltipImmediately: function (value) {
		if (arguments.length === 1) {
			this._showMouseOverTooltipImmediately = value;
			return value;
		} else {
			return this._showMouseOverTooltipImmediately;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::ShowMouseOverTooltipImmediately()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		$.ig.CPView.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
		var val = this.isOverInteractionArea(x, y);
		this.updateHoverInteraction(val);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::IsOverInteractionArea(System.Int32, System.Int32)" />*/
	isOverInteractionArea: function (x, y) {
		return this.__isActuallyOver;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::IsOverInteractionArea(System.Int32, System.Int32)" />*/
	,
	__isCurrentlyHovering: false,
	__isMouseCurrentlyDown: false,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::UpdateHoverInteraction(System.Boolean)" />*/
	updateHoverInteraction: function (over) {
		this.updateInteractionStates1(over, this.isMouseDown());
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::UpdateHoverInteraction(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetCornerRadius(System.Double)" />*/
	setCornerRadius: function (cornerRadius) {
		$.ig.CPView.prototype.setCornerRadius.call(this, cornerRadius);
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setCornerRadius(cornerRadius);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetCornerRadius(System.Double)" />*/
	,
	__selectedVal: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::SelectedState()" />*/
	selectedState: function (value) {
		if (arguments.length === 1) {
			if (value != this.__selectedVal) {
				this.__selectedVal = value;
				if (this.__selectedVal) {
					this.applySelectedState(this.selectionColorSet());
				} else {
					this.clearSelectedState();
				}
				this.triggerSizeChanged();
			}
			return value;
		} else {
			return this.__selectedVal;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::SelectedState()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPInteractionView::DefaultSelectionColor()" />*/
	defaultSelectionColor: function () {
		return $.ig.ThemeManager.prototype.theme().defaultInteractionColorSet();
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPInteractionView::DefaultSelectionColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		if (colorSet != null) {
			this.selectionColorSet(colorSet);
			this.overridePressedColor(colorSet.pressed());
			this.overrideHoverColor(colorSet.hover());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ResetInteractionColor()" />*/
	resetInteractionColor: function () {
		this.applyInteractionColorSet(this.defaultSelectionColor());
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ResetInteractionColor()" />*/
	,
	__selectionColorSet: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPInteractionView::SelectionColorSet()" />*/
	selectionColorSet: function (value) {
		if (arguments.length === 1) {
			if (value != null) {
				this.__selectionColorSet = value.copy();
				if (this.__selectedVal) {
					this.applySelectedState(this.__selectionColorSet);
				}
			}
			return value;
		} else {
			if (this.__selectionColorSet == null) {
				this.__selectionColorSet = this.defaultSelectionColor();
			}
			return this.__selectionColorSet;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPInteractionView::SelectionColorSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	applySelectedState: function (color) {
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setBackgroundColor(color.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ClearSelectedState()" />*/
	clearSelectedState: function () {
		if (this.__highlightBackgroundView != null) {
			this.updateInteractionStates1(this.__isCurrentlyHovering, this.__isMouseCurrentlyDown);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ClearSelectedState()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::BackgroundPressedColor()" />*/
	backgroundPressedColor: function () {
		if (this.overridePressedColor() != null) {
			return this.overridePressedColor();
		}
		return this.defaultSelectionColor().pressed();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::BackgroundPressedColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::BackgroundHoverColor()" />*/
	backgroundHoverColor: function () {
		if (this.overrideHoverColor() != null) {
			return this.overrideHoverColor();
		}
		return this.defaultSelectionColor().hover();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::BackgroundHoverColor()" />*/
	,
	_overridePressedColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::OverridePressedColor()" />*/
	overridePressedColor: function (value) {
		if (arguments.length === 1) {
			this._overridePressedColor = value;
			return value;
		} else {
			return this._overridePressedColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::OverridePressedColor()" />*/
	,
	_overrideHoverColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::OverrideHoverColor()" />*/
	overrideHoverColor: function (value) {
		if (arguments.length === 1) {
			this._overrideHoverColor = value;
			return value;
		} else {
			return this._overrideHoverColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPInteractionView::OverrideHoverColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::TriggerHover()" />*/
	triggerHover: function () {
		this.updateInteractionStates1(true, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::TriggerHover()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ClearHover()" />*/
	clearHover: function () {
		this.updateInteractionStates1(false, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ClearHover()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ForceInteractionState(System.Boolean, System.Boolean)" />*/
	forceInteractionState: function (over, mouseDown) {
		this.updateInteractionStates1(over, mouseDown);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ForceInteractionState(System.Boolean, System.Boolean)" />*/
	,
	__disableBackgroundHighlights: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::DisableBackgroundHighlights()" />*/
	disableBackgroundHighlights: function (value) {
		if (arguments.length === 1) {
			if (value != this.__disableBackgroundHighlights) {
				this.__disableBackgroundHighlights = value;
				this.updateInteractionStates();
			}
			return value;
		} else {
			return this.__disableBackgroundHighlights;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::DisableBackgroundHighlights()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::UpdateInteractionStates()" />*/
	updateInteractionStates: function () {
		this.updateInteractionStates1(this.__isCurrentlyHovering, this.__isMouseCurrentlyDown);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::UpdateInteractionStates()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplyPressedColor()" />*/
	applyPressedColor: function () {
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setBackgroundColor(this.backgroundPressedColor().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplyPressedColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplyHoverColor()" />*/
	applyHoverColor: function () {
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setBackgroundColor(this.backgroundHoverColor().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplyHoverColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ApplyRestColor()" />*/
	applyRestColor: function () {
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.setBackgroundColor(this.__defaultBg);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ApplyRestColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		this.__isCurrentlyHovering = over;
		this.__isMouseCurrentlyDown = mouseDown;
		if (!this.__selectedVal) {
			if (this.__hasFocus) {
				if (!this.disableBackgroundHighlights()) {
					this.applyPressedColor();
				}
			} else {
				if (over && !this.disableBackgroundHighlights()) {
					if (mouseDown) {
						this.applyPressedColor();
					} else {
						this.applyHoverColor();
					}
				} else {
					this.applyRestColor();
				}
			}
		}
		if (this.__highlightBackgroundView != null || this.supportsInteractionOpacity()) {
			this.triggerSizeChanged();
		}
		if (this.__interactionChangedAction != null) {
			this.__interactionChangedAction();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ResetInteractionStates()" />*/
	resetInteractionStates: function () {
		this.__isCurrentlyHovering = false;
		this.__isMouseCurrentlyDown = false;
		if (this.__selectedVal) {
			this.__selectedVal = false;
			this.clearSelectedState();
		}
		this.applyRestColor();
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ResetInteractionStates()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::TurnOffHilightBackgroundView()" />*/
	turnOffHilightBackgroundView: function () {
		if (this.__highlightBackgroundView != null) {
			this.__highlightBackgroundView.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::TurnOffHilightBackgroundView()" />*/
	,
	__interactionChangedAction: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::AddInteractionStateChangedHandler(Infragistics.ExecutionBlock)" />*/
	addInteractionStateChangedHandler: function (action) {
		this.__interactionChangedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::AddInteractionStateChangedHandler(Infragistics.ExecutionBlock)" />*/
	,
	_supportsInteractionOpacity: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsInteractionOpacity()" />*/
	supportsInteractionOpacity: function (value) {
		if (arguments.length === 1) {
			this._supportsInteractionOpacity = value;
			return value;
		} else {
			return this._supportsInteractionOpacity;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsInteractionOpacity()" />*/
	,
	_ignoreDisabledOpacity: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::IgnoreDisabledOpacity()" />*/
	ignoreDisabledOpacity: function (value) {
		if (arguments.length === 1) {
			this._ignoreDisabledOpacity = value;
			return value;
		} else {
			return this._ignoreDisabledOpacity;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::IgnoreDisabledOpacity()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CPInteractionView::ResolveOpacity(System.Double, System.Boolean)" />*/
	resolveOpacity: function (defaultOpacity, supportsInteractionOpacity) {
		if (this.isDisabled()) {
			if (!this.ignoreDisabledOpacity()) {
				return $.ig.ThemeManager.prototype.theme().disabledOpacity();
			}
		}
		if (this.__hasFocus) {
			return this.pressedOpacity();
		} else {
			if (this.selectedState()) {
				return this.hoverOpacity();
			} else if (supportsInteractionOpacity && this.supportsInteractionOpacity()) {
				if (this.__isCurrentlyHovering) {
					if (this.__isMouseCurrentlyDown) {
						return this.pressedOpacity();
					} else {
						return this.hoverOpacity();
					}
				}
			}
		}
		return defaultOpacity;
	}
	/*<EndMethod Name="System.Double Infragistics.CPInteractionView::ResolveOpacity(System.Double, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPInteractionView::PressedOpacity()" />*/
	pressedOpacity: function () {
		return $.ig.ThemeManager.prototype.theme().pressedOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPInteractionView::PressedOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPInteractionView::HoverOpacity()" />*/
	hoverOpacity: function () {
		return $.ig.ThemeManager.prototype.theme().hoverOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPInteractionView::HoverOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::IsInHoverState()" />*/
	isInHoverState: function () {
		return this.__isCurrentlyHovering;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::IsInHoverState()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::IsInMouseDownState()" />*/
	isInMouseDownState: function () {
		return this.__isMouseCurrentlyDown;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::IsInMouseDownState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		if (this.__highlightBackgroundView != null) {
			this.measureHighlightBackgroundView(this.__highlightBackgroundView, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	measureHighlightBackgroundView: function (view, w, h) {
		this.parentToHighlightBGView().measureView1(view, 0, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HandlesUIInteraction()" />*/
	,
	__cursor: 0,
	/*<BeginProperty Name="Infragistics.CPCursors Infragistics.CPInteractionView::PreferredCursor()" />*/
	preferredCursor: function (value) {
		if (arguments.length === 1) {
			this.__cursor = value;
			if (!this.isDisabled()) {
				this.setCursor(value);
			}
			return value;
		} else {
			return this.__cursor;
		}
	}
	/*<EndProperty Name="Infragistics.CPCursors Infragistics.CPInteractionView::PreferredCursor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::Enable()" />*/
	enable: function () {
		if (this.isDisabled()) {
			$.ig.CPView.prototype.enable.call(this);
			this.setCursor(this.preferredCursor());
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::Enable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::Disable()" />*/
	disable: function () {
		if (!this.isDisabled()) {
			$.ig.CPView.prototype.disable.call(this);
			this.setCursor($.ig.CPCursors.prototype.$default);
			this.hideTooltip();
			if (this.__isMouseCurrentlyDown || this.__isCurrentlyHovering) {
				this.updateInteractionStates1(false, false);
			}
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::Disable()" />*/
	,
	__toolTipText: null,
	__tooltipSubText: null,
	__richText: null,
	__tooltipTimer: null,
	__richTriggers: null,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsTooltips()" />*/
	supportsTooltips: function () {
		return (this.__toolTipText != null && this.__toolTipText.length > 0) || this.hasRichTooltip();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::SupportsTooltips()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetTooltip(System.String, System.String)" />*/
	setTooltip: function (title, subTitle) {
		this.__toolTipText = title;
		this.__tooltipSubText = subTitle;
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetTooltip(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HasRichTooltip()" />*/
	hasRichTooltip: function () {
		return this.__richText != null && !this.__richText.equals("");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HasRichTooltip()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetRichTooltip(System.String, Infragistics.CPList)" />*/
	setRichTooltip: function (richText, richTriggers) {
		this.__richText = richText;
		this.__richTriggers = richTriggers;
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetRichTooltip(System.String, Infragistics.CPList)" />*/
	,
	__toolTipColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetTooltipColors(Infragistics.CPThemeColorSet)" />*/
	setTooltipColors: function (color) {
		if (color != null) {
			color = color.copy();
		}
		this.__toolTipColor = color;
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetTooltipColors(Infragistics.CPThemeColorSet)" />*/
	,
	__tooltipFont: null,
	__tooltipFontSize: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::SetTooltipFont(System.Single, System.String)" />*/
	setTooltipFont: function (fontSize, font) {
		this.__tooltipFontSize = fontSize;
		this.__tooltipFont = font;
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::SetTooltipFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPInteractionView::ResolveTooltipContent()" />*/
	resolveTooltipContent: function () {
		if (this.__richText != null) {
			return new $.ig.CPRichLabelTooltip(this.__richText, this.__richTriggers);
		} else if (this.__toolTipText != null) {
			if (this.__tooltipFont != null) {
				return new $.ig.CPLabelTooltip(1, this.__toolTipText, this.__tooltipSubText, this.__toolTipColor, this.__tooltipFontSize, this.__tooltipFont);
			}
			return new $.ig.CPLabelTooltip(0, this.__toolTipText, this.__tooltipSubText, this.__toolTipColor);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPInteractionView::ResolveTooltipContent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPInteractionView::UsesMouseDownDelayed()" />*/
	usesMouseDownDelayed: function () {
		return this.supportsTooltips();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPInteractionView::UsesMouseDownDelayed()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPInteractionView::DelayMouseDuration()" />*/
	delayMouseDuration: function () {
		return this.supportsTooltips() ? 0.25 : $.ig.CPView.prototype.delayMouseDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPInteractionView::DelayMouseDuration()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPInteractionView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	handleTouchDownDelayed: function (x, y) {
		if (this.supportsTooltips()) {
			this.showTooltip();
			return true;
		}
		return $.ig.CPView.prototype.handlePointerDownDelayed.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPInteractionView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::KillTooltipTimer()" />*/
	killTooltipTimer: function () {
		if (this.__tooltipTimer != null) {
			this.__tooltipTimer.stop();
			this.__tooltipTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::KillTooltipTimer()" />*/
	,
	__tooltipId: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltip(System.Boolean)" />*/
	showTooltip1: function (clickToDismiss) {
		this.killTooltipTimer();
		if (this.__tooltipId != null || this.isDisabled()) {
			return;
		}
		var tooltipView = this.resolveTooltipContent();
		if (tooltipView != null) {
			tooltipView.calculateSizeToFit();
			var tw = tooltipView.getCalculatedWidth();
			var th = tooltipView.getCalculatedHeight();
			this.__tooltipId = $.ig.CPPopupManager.prototype.showTooltip(this, tooltipView, tw, th, this.tooltipPosition(), this.__toolTipColor, clickToDismiss);
			if (clickToDismiss) {
				this.__tooltipId = null;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltip(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltip()" />*/
	showTooltip: function () {
		this.showTooltip1(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltip()" />*/
	,
	_tooltipPosition: 0,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPInteractionView::TooltipPosition()" />*/
	tooltipPosition: function (value) {
		if (arguments.length === 1) {
			this._tooltipPosition = value;
			return value;
		} else {
			return this._tooltipPosition;
		}
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPInteractionView::TooltipPosition()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::HideTooltip()" />*/
	hideTooltip: function () {
		this.killTooltipTimer();
		if (this.__tooltipId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__tooltipId, true);
			this.__tooltipId = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::HideTooltip()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::Unload()" />*/
	unload: function () {
		$.ig.CPView.prototype.unload.call(this);
		this.hideTooltip();
		if (this.__forceTooltipTimer != null) {
			this.__forceTooltipTimer.stop();
			this.__forceTooltipTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::Unload()" />*/
	,
	__forceTooltipTimer: null,
	/*<BeginMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltipForDuration(System.Double)" />*/
	showTooltipForDuration: function (duration) {
		var $self = this;
		if (this.__forceTooltipTimer == null) {
			this.__forceTooltipTimer = new $.ig.CPTimer();
		}
		this.showTooltip();
		this.__forceTooltipTimer.startAndFireOnce(duration, function () {
			$self.hideTooltip();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPInteractionView::ShowTooltipForDuration(System.Double)" />*/
	,
	$type: new $.ig.Type('CPInteractionView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPInteractionView" />*/

/*<BeginType Name="Infragistics.CPGridViewCellBase" />*/

$.ig.util.defType('CPGridViewCellBase', 'CPInteractionView', {
	__identifier: null,
	__leftBorder: null,
	__rightBorder: null,
	__leftBorderShadow: null,
	__rightBorderShadow: null,
	__bottomBorder: null,
	__bottomBorderShadow: null,
	__topBorder: null,
	__topBorderShadow: null,
	__cellBorderWidth: 0,
	_setupCellDelegate: null,
	_cellFinishedDragging: null,
	_path: null,
	_gridView: null,
	_frameOpacity: 0,
	_keyboardAction: null,
	init: function (identifier) {
		$.ig.CPInteractionView.prototype.init.call(this);
		$.ig.UIUtility.prototype.setAccessibilityName1(this, identifier);
		this._frameOpacity = 1;
		this.__identifier = identifier;
		this.__cellBorderWidth = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.capturesTabFocus(false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::Setup()" />*/
	setup: function () {
		$.ig.CPInteractionView.prototype.setup.call(this);
		this.preferredCursor($.ig.CPCursors.prototype.$default);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CapturesFocus()" />*/
	capturesFocus: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CapturesFocus()" />*/
	,
	_isCloneDraggingCell: false,
	_lock: false,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanBeRecycled()" />*/
	canBeRecycled: function () {
		return !this._lock;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanBeRecycled()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		$.ig.CPInteractionView.prototype.setBackgroundColor.call(this, color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPGridViewCellBase::Identifier()" />*/
	identifier: function () {
		return this.__identifier;
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewCellBase::Identifier()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewCellBase::CellBorderWidth()" />*/
	cellBorderWidth: function (value) {
		if (arguments.length === 1) {
			this.__cellBorderWidth = value;
			return value;
		} else {
			return this.__cellBorderWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewCellBase::CellBorderWidth()" />*/
	,
	_capturesTabFocus: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::CapturesTabFocus()" />*/
	capturesTabFocus: function (value) {
		if (arguments.length === 1) {
			this._capturesTabFocus = value;
			return value;
		} else {
			return this._capturesTabFocus;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::CapturesTabFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowLeftBorder(System.ColorInt, System.Boolean)" />*/
	showLeftBorder: function (color, includeShadow) {
		if (this.__leftBorder == null) {
			this.__leftBorder = new $.ig.CPViewBase();
			this.addSubview(this.__leftBorder);
		}
		this.__leftBorder.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(color));
		if (includeShadow) {
			if (this.__leftBorderShadow == null) {
				this.__leftBorderShadow = new $.ig.CPViewBase();
				this.addSubview(this.__leftBorderShadow);
			}
			this.__leftBorderShadow.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.applyAlphaToColor(20, color)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowLeftBorder(System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowBottomBorder(System.ColorInt, System.Boolean)" />*/
	showBottomBorder: function (color, includeShadow) {
		if (this.__bottomBorder == null) {
			this.__bottomBorder = new $.ig.CPViewBase();
			this.addSubview(this.__bottomBorder);
		}
		this.__bottomBorder.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(color));
		if (includeShadow) {
			if (this.__bottomBorderShadow == null) {
				this.__bottomBorderShadow = new $.ig.CPViewBase();
				this.addSubview(this.__bottomBorderShadow);
			}
			this.__bottomBorderShadow.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.applyAlphaToColor(20, color)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowBottomBorder(System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowTopBorder(System.ColorInt, System.Boolean)" />*/
	showTopBorder: function (color, includeShadow) {
		if (this.__topBorder == null) {
			this.__topBorder = new $.ig.CPViewBase();
			this.addSubview(this.__topBorder);
		}
		this.__topBorder.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(color));
		if (includeShadow) {
			if (this.__topBorderShadow == null) {
				this.__topBorderShadow = new $.ig.CPViewBase();
				this.addSubview(this.__topBorderShadow);
			}
			this.__topBorderShadow.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.applyAlphaToColor(20, color)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowTopBorder(System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowRightBorder(System.ColorInt, System.Boolean)" />*/
	showRightBorder: function (color, includeShadow) {
		if (this.__rightBorder == null) {
			this.__rightBorder = new $.ig.CPViewBase();
			this.addSubview(this.__rightBorder);
		}
		this.__rightBorder.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(color));
		if (includeShadow) {
			if (this.__rightBorderShadow == null) {
				this.__rightBorderShadow = new $.ig.CPViewBase();
				this.addSubview(this.__rightBorderShadow);
			}
			this.__rightBorderShadow.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.applyAlphaToColor(20, color)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowRightBorder(System.ColorInt, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::OnAttached()" />*/
	onAttached: function () {
		if (this._gridView != null) {
			this.parentDynamicContainerId(this._gridView.getDynamicContainerId());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::OnAttached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::OnDetached()" />*/
	onDetached: function () {
		this.closePopup(false);
		this.elementLostFocus();
		this.cleanup();
		this.hideTooltip();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::OnDetached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ForceCellCleanup()" />*/
	forceCellCleanup: function () {
		this.cleanup();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ForceCellCleanup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::Cleanup()" />*/
	cleanup: function () {
		if (this.__reorderPopupId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__reorderPopupId, false);
			this.__reorderPopupId = null;
		}
		this.closePopup(false);
		this.resetInteractionStates();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::Cleanup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::Unload()" />*/
	unload: function () {
		$.ig.CPInteractionView.prototype.unload.call(this);
		this.cleanup();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::Unload()" />*/
	,
	_frameX: 0,
	_frameY: 0,
	_frameW: 0,
	_frameH: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StoreFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	storeFrame: function (x, y, w, h) {
		this.hideTooltip();
		this._frameX = x;
		this._frameY = y;
		this._frameW = w;
		this._frameH = h;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StoreFrame(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	__data: null,
	/*<BeginProperty Name="System.Object Infragistics.CPGridViewCellBase::Data()" />*/
	data: function (value) {
		if (arguments.length === 1) {
			this.beforeSettingNewData();
			this.__data = value;
			this.dataSet();
			if (this.shouldLayoutCellinDataSet()) {
				this.layoutCell();
			}
			return value;
		} else {
			return this.__data;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.CPGridViewCellBase::Data()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::ShouldLayoutCellinDataSet()" />*/
	shouldLayoutCellinDataSet: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::ShouldLayoutCellinDataSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::BeforeSettingNewData()" />*/
	beforeSettingNewData: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::BeforeSettingNewData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::DataSet()" />*/
	dataSet: function () {
		if (this._setupCellDelegate != null) {
			this._setupCellDelegate.cellDataSet(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::DataSet()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewCellBase::ResolvePopupItems()" />*/
	resolvePopupItems: function () {
		if (this.provideOverflowItemsBlock() != null) {
			var list = new $.ig.Array();
			this.provideOverflowItemsBlock()(list);
			if (list.length > 0) {
				return list;
			}
		}
		if (this._setupCellDelegate != null) {
			return this._setupCellDelegate.cellResolveOverflowItems(this);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewCellBase::ResolvePopupItems()" />*/
	,
	_provideOverflowItemsBlock: null,
	/*<BeginProperty Name="Infragistics.ListBlock Infragistics.CPGridViewCellBase::ProvideOverflowItemsBlock()" />*/
	provideOverflowItemsBlock: function (value) {
		if (arguments.length === 1) {
			this._provideOverflowItemsBlock = value;
			return value;
		} else {
			return this._provideOverflowItemsBlock;
		}
	}
	/*<EndProperty Name="Infragistics.ListBlock Infragistics.CPGridViewCellBase::ProvideOverflowItemsBlock()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewCellBase::ResolvePopupTitle()" />*/
	resolvePopupTitle: function () {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewCellBase::ResolvePopupTitle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::LayoutCell()" />*/
	layoutCell: function () {
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::LayoutCell()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		var hasRightShadow = this.__rightBorderShadow != null;
		var hasLeftShadow = this.__leftBorderShadow != null;
		var hasBottomShadow = this.__bottomBorderShadow != null;
		var hasTopShadow = this.__topBorderShadow != null;
		if (this.__rightBorder != null) {
			var rightX = hasRightShadow ? w - (this.__cellBorderWidth * 3) : w - this.__cellBorderWidth;
			this.measureView(this.__rightBorder, rightX, 0, this.__cellBorderWidth, h);
			if (hasRightShadow) {
				this.measureView(this.__rightBorderShadow, w - (this.__cellBorderWidth * 2), 0, this.__cellBorderWidth * 2, h);
			}
		}
		if (this.__leftBorder != null) {
			var leftX = hasLeftShadow ? this.__cellBorderWidth * 2 : 0;
			this.measureView(this.__leftBorder, leftX, 0, this.__cellBorderWidth, h);
			if (hasLeftShadow) {
				this.measureView(this.__leftBorderShadow, 0, 0, this.__cellBorderWidth * 2, h);
			}
		}
		if (this.__bottomBorder != null) {
			var top = h - (hasBottomShadow ? this.__cellBorderWidth * 3 : this.__cellBorderWidth);
			this.measureView(this.__bottomBorder, 0, top, w, this.__cellBorderWidth);
			if (hasBottomShadow) {
				this.measureView(this.__bottomBorderShadow, 0, h, w, this.__cellBorderWidth * 2);
			}
		}
		if (this.__topBorder != null) {
			this.measureView(this.__topBorder, 0, 0, w, this.__cellBorderWidth);
			if (hasTopShadow) {
				this.measureView(this.__topBorderShadow, 0, this.__cellBorderWidth, w, this.__cellBorderWidth * 2);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	__popupId: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowPopup(Infragistics.CPViewBase)" />*/
	showPopup1: function (pointerView) {
		this.showPopup(pointerView, this.resolvePopupItems());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ShowPopup(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewCellBase::ShowPopup(Infragistics.CPViewBase, Infragistics.CPList)" />*/
	showPopup: function (pointerView, items) {
		var $self = this;
		this.closePopup(false);
		if (items != null && items.length > 0) {
			this.__popupId = $.ig.CPPopupManager.prototype.showList3(pointerView, this.resolvePopupHightlightView(), items, $.ig.CPPopupPosition.prototype.auto, this.resolvePopupTitle(), function () {
				$self.closePopup(true);
			});
			var popupManager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupId);
			if ($.ig.util.cast($.ig.CPPopupListManager.prototype.$type, popupManager) !== null) {
				(popupManager).canOptionKeyClosePopup(true);
			}
			return this.__popupId;
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewCellBase::ShowPopup(Infragistics.CPViewBase, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::ResolvePopupHightlightView()" />*/
	resolvePopupHightlightView: function () {
		if (this.overridePopupHighlightView() != null) {
			return this.overridePopupHighlightView();
		}
		return this.popupHightlightView();
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::ResolvePopupHightlightView()" />*/
	,
	_overridePopupHighlightView: null,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::OverridePopupHighlightView()" />*/
	overridePopupHighlightView: function (value) {
		if (arguments.length === 1) {
			this._overridePopupHighlightView = value;
			return value;
		} else {
			return this._overridePopupHighlightView;
		}
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::OverridePopupHighlightView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::PopupHightlightView()" />*/
	popupHightlightView: function () {
		return this;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewCellBase::PopupHightlightView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ClosePopup(System.Boolean)" />*/
	closePopup: function (animate) {
		if (this.__popupId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__popupId, animate);
			this.__popupId = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ClosePopup(System.Boolean)" />*/
	,
	__selfClickBlock: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::AddSelfReferenceClickHandler(Infragistics.ObjectBlock)" />*/
	addSelfReferenceClickHandler: function (selfClickBlock) {
		this.__selfClickBlock = selfClickBlock;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::AddSelfReferenceClickHandler(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		if (this._setupCellDelegate != null) {
			this._setupCellDelegate.cellClicked(this);
		}
		if (this.__selfClickBlock != null) {
			this.__selfClickBlock(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::HandleClick(System.Int32, System.Int32)" />*/
	,
	__isSelected: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::SetSelected(System.Boolean, System.Boolean)" />*/
	setSelected: function (select, animated) {
		if (select) {
			this.updateSelected(animated);
		} else {
			this.updateNotSelected(animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::SetSelected(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::OnUnselected()" />*/
	onUnselected: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::OnUnselected()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::OnSelected()" />*/
	onSelected: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::OnSelected()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::IsSelected()" />*/
	isSelected: function () {
		return this.__isSelected;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::IsSelected()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateSelected(System.Boolean)" />*/
	updateSelected: function (animated) {
		var $self = this;
		this.__isSelected = true;
		if (animated) {
			this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.onSelected();
			}, null);
		} else {
			this.onSelected();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateSelected(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewCellBase::SubviewOpacity()" />*/
	subviewOpacity: function () {
		return this.resolveOpacity(1, false);
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewCellBase::SubviewOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateNotSelected(System.Boolean)" />*/
	updateNotSelected: function (animated) {
		var $self = this;
		this.__isSelected = false;
		if (animated) {
			this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.onUnselected();
			}, null);
		} else {
			this.onUnselected();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateNotSelected(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CellLocationChangedInViewport(System.Double, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	cellLocationChangedInViewport: function (xPercent, yPercent, x, y, w, h) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CellLocationChangedInViewport(System.Double, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewCellBase::Clone()" />*/
	clone: function () {
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewCellBase::Clone()" />*/
	,
	_clonedCallback: null,
	/*<BeginProperty Name="Infragistics.ObjectBlock Infragistics.CPGridViewCellBase::ClonedCallback()" />*/
	clonedCallback: function (value) {
		if (arguments.length === 1) {
			this._clonedCallback = value;
			return value;
		} else {
			return this._clonedCallback;
		}
	}
	/*<EndProperty Name="Infragistics.ObjectBlock Infragistics.CPGridViewCellBase::ClonedCallback()" />*/
	,
	__scrollDownTimer: null,
	__scrollUpTimer: null,
	__scrollLeftTimer: null,
	__scrollRightTimer: null,
	__reorderPopupId: null,
	__startDragPathIdentifier: null,
	__startDragPath: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::DragStarted(Infragistics.ExecutionBlock)" />*/
	dragStarted: function (finished) {
		finished();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::DragStarted(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderStart(System.Int32, System.Int32, Infragistics.CPViewBase)" />*/
	reorderStart: function (x, y, reorderHandle) {
		var $self = this;
		this._lock = true;
		this.__startDragPath = this._path.copy();
		this.__startDragPathIdentifier = this._path._identifier;
		var relP = reorderHandle.translatePoint(new $.ig.CPPoint(x, y), this);
		this.__reorderPopupId = $.ig.CPPopupManager.prototype.showPopup1(this, new $.ig.CPReorderCellPopupManager(this, this.resolveDraggableArea(), this.snapDraggingInDraggableView(), this.dropRegistryKeys(), $.ig.truncate(relP._x), $.ig.truncate(relP._y)));
		$.ig.CPPopupManager.prototype.subscribeToBeNotifiedWhenPopupCloses(this.__reorderPopupId, function () {
			$self.dragPopupClosed();
		});
		this._frameOpacity = 0;
		this.remeasureCell();
		$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragStart);
		this.dragStarted(function () {
			$self.startReordering();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderStart(System.Int32, System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPView Infragistics.CPGridViewCellBase::ResolveDraggingView()" />*/
	resolveDraggingView: function () {
		var clone = this.clone();
		clone._isCloneDraggingCell = true;
		if (this.clonedCallback() != null) {
			this.clonedCallback()(clone);
		}
		return clone;
	}
	/*<EndMethod Name="Infragistics.CPView Infragistics.CPGridViewCellBase::ResolveDraggingView()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellBase::ResolveDraggingViewWidth(Infragistics.CPView)" />*/
	resolveDraggingViewWidth: function (view) {
		return this.currentWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellBase::ResolveDraggingViewWidth(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellBase::ResolveDraggingViewHeight(Infragistics.CPView)" />*/
	resolveDraggingViewHeight: function (view) {
		return this.currentHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellBase::ResolveDraggingViewHeight(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::DragPopupClosed()" />*/
	dragPopupClosed: function () {
		this.remeasureCell();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::DragPopupClosed()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StartReordering()" />*/
	startReordering: function () {
		this.__isReordering = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StartReordering()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewCellBase::ResolveDraggingViewOpacity()" />*/
	resolveDraggingViewOpacity: function () {
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewCellBase::ResolveDraggingViewOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::HideCellWhileDraggingOutsideDraggableView()" />*/
	hideCellWhileDraggingOutsideDraggableView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::HideCellWhileDraggingOutsideDraggableView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::HideCellOnlyWhileDraggingInsideDraggableView()" />*/
	hideCellOnlyWhileDraggingInsideDraggableView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::HideCellOnlyWhileDraggingInsideDraggableView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SnapDraggingInDraggableView()" />*/
	snapDraggingInDraggableView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SnapDraggingInDraggableView()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridView Infragistics.CPGridViewCellBase::ResolveDraggableArea()" />*/
	resolveDraggableArea: function () {
		return this.supportsReordering() ? this._gridView : null;
	}
	/*<EndMethod Name="Infragistics.CPGridView Infragistics.CPGridViewCellBase::ResolveDraggableArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportSmallDragMode()" />*/
	supportSmallDragMode: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportSmallDragMode()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewCellBase::SmallDraggingWidth()" />*/
	smallDraggingWidth: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewCellBase::SmallDraggingWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewCellBase::SmallDraggingHeight()" />*/
	smallDraggingHeight: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewCellBase::SmallDraggingHeight()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewCellBase::DropRegistryKeys()" />*/
	dropRegistryKeys: function () {
		return new $.ig.Array();
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewCellBase::DropRegistryKeys()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::Draggable()" />*/
	draggable: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::Draggable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsReordering()" />*/
	supportsReordering: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsReordering()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::UsesMouseDownDelayed()" />*/
	usesMouseDownDelayed: function () {
		return this.draggable() || $.ig.CPInteractionView.prototype.usesMouseDownDelayed.call(this);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::UsesMouseDownDelayed()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewCellBase::DelayMouseDuration()" />*/
	delayMouseDuration: function () {
		return this.draggable() ? 0.15 : $.ig.CPInteractionView.prototype.delayMouseDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewCellBase::DelayMouseDuration()" />*/
	,
	__isCellDragging: false,
	__isReordering: false,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	handleTouchDownDelayed: function (x, y) {
		var val = this.handleStartDrag(x, y);
		if (val == 0) {
			return false;
		} else if (val == 1) {
			return true;
		}
		return $.ig.CPInteractionView.prototype.handleTouchDownDelayed.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		if (this.draggable()) {
			$.ig.NativeUIUtility.prototype.utility().prepareHaptic($.ig.CPHapticType.prototype.dragStart);
		}
		return $.ig.CPInteractionView.prototype.handleTouchDown.call(this, x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleMouseDownDelayed(System.Int32, System.Int32)" />*/
	handleMouseDownDelayed: function (x, y) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleMouseDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleMouseMove(System.Int32, System.Int32)" />*/
	handleMouseMove: function (x, y) {
		if (this.__isCellDragging) {
			return true;
		}
		if (this.isMouseDown()) {
			var val = this.handleStartDrag(x, y);
			if (val == 0) {
				return false;
			} else if (val == 1) {
				return true;
			}
		}
		return $.ig.CPInteractionView.prototype.handleMouseMove.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleMouseMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchUp(System.Int32, System.Int32)" />*/
	handleTouchUp: function (x, y) {
		if (this.__isCellDragging) {
			$.ig.NativeUIUtility.prototype.utility().endHaptic();
		}
		return $.ig.CPInteractionView.prototype.handleTouchUp.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandleTouchUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::AllowDragToStart(System.Int32, System.Int32)" />*/
	allowDragToStart: function (x, y) {
		if (this.supportsReordering()) {
			return true;
		}
		var keys = this.dropRegistryKeys();
		for (var i = 0; i < keys.length; i++) {
			var dropKey = keys[i];
			if ($.ig.CPDroppableViewManager.prototype.areThereAnyDropTargets(dropKey, this.resolveDropContent(dropKey))) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::AllowDragToStart(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellBase::HandleStartDrag(System.Int32, System.Int32)" />*/
	handleStartDrag: function (x, y) {
		if (this.draggable()) {
			this._lock = true;
			if (this.allowDragToStart(x, y)) {
				if (this._gridView != null) {
					this.__isCellDragging = true;
					this.__isReordering = this.supportsReordering();
					this.reorderStart(x, y, this);
					return 1;
				}
				this._lock = this.alwaysKeepCellLocked();
				return 0;
			} else {
				this._lock = this.alwaysKeepCellLocked();
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellBase::HandleStartDrag(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this.__isCellDragging) {
			this.reorderMove(x, y, this);
			return true;
		}
		return $.ig.CPInteractionView.prototype.handlePointerMove.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		if (this.__isCellDragging) {
			this.__isCellDragging = false;
			this.__isReordering = false;
			this.reorderEnd(x, y);
		}
		return $.ig.CPInteractionView.prototype.handlePointerUp.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::RemeasureCell()" />*/
	remeasureCell: function () {
		var panel = this.getParent();
		if (panel != null) {
			panel.measureView1(this, this._frameX, this._frameY, this._frameW, this._frameH, this._frameOpacity);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::RemeasureCell()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::IsReorderVertical()" />*/
	isReorderVertical: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::IsReorderVertical()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::CheckForVerticalDragMove(System.Int32)" />*/
	checkForVerticalDragMove: function (pointWithOffset) {
		var pathAtPoint = this._gridView.cellAtPoint(0, pointWithOffset);
		this.reorder(pathAtPoint);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::CheckForVerticalDragMove(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::CheckForHorizontalDragMove(System.Int32)" />*/
	checkForHorizontalDragMove: function (pointWithOffset) {
		var pathAtPoint = this._gridView.cellAtPoint(pointWithOffset, 0);
		this.reorder(pathAtPoint);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::CheckForHorizontalDragMove(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::Reorder(Infragistics.CPCellPath)" />*/
	reorder: function (newPath) {
		if (this._path._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
			if (this.canMoveSectionToNewSection(newPath._sectionIndex)) {
				$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragSwap);
				this._gridView.moveSection(this._path._sectionIndex, newPath._sectionIndex, true);
			}
		} else {
			if (this.isReorderVertical()) {
				if (this.canMoveRowToNewPath(newPath)) {
					$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragSwap);
					if (newPath._sectionIndex == this._path._sectionIndex) {
						this._gridView.moveRow(this._path._sectionIndex, this._path._rowIndex, newPath._rowIndex, true);
					} else {
						this._gridView.moveRow1(this._path._sectionIndex, this._path._rowIndex, newPath._sectionIndex, newPath._rowIndex, true);
					}
				}
			} else {
				if (this.canMoveColumnToNewPath(newPath)) {
					$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragSwap);
					this._gridView.moveColumn(this._path._sectionIndex, this._path._columnIndex, newPath._columnIndex, true);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::Reorder(Infragistics.CPCellPath)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsReorderRowToNewSections()" />*/
	supportsReorderRowToNewSections: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsReorderRowToNewSections()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveRowToNewPath(Infragistics.CPCellPath)" />*/
	canMoveRowToNewPath: function (newPath) {
		return ((newPath._rowIndex != this._path._rowIndex || newPath._sectionIndex != this._path._sectionIndex) && (this.supportsReorderRowToNewSections() || this._path._sectionIndex == newPath._sectionIndex) && newPath._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX());
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveRowToNewPath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveColumnToNewPath(Infragistics.CPCellPath)" />*/
	canMoveColumnToNewPath: function (newPath) {
		return (newPath._columnIndex != this._path._columnIndex && this._path._sectionIndex == newPath._sectionIndex);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveColumnToNewPath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveSectionToNewSection(System.Int32)" />*/
	canMoveSectionToNewSection: function (section) {
		return (section != this._path._sectionIndex);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CanMoveSectionToNewSection(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewCellBase::DragOpacity()" />*/
	dragOpacity: function () {
		return 0.3;
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewCellBase::DragOpacity()" />*/
	,
	__currentDragScrollYPos: 0,
	__currentDragScrollXPos: 0,
	__isCurrentlyOutsideReordering: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderMove(System.Int32, System.Int32, Infragistics.CPViewBase)" />*/
	reorderMove: function (x, y, reorderHandle) {
		var relP = reorderHandle.translatePoint(new $.ig.CPPoint(x, y), this);
		var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__reorderPopupId);
		if (manager == null) {
			return;
		} else if (this._gridView == null) {
			if (this.__reorderPopupId != null) {
				$.ig.CPPopupManager.prototype.closePopup(this.__reorderPopupId, false);
				this.__reorderPopupId = null;
			}
			return;
		}
		var insideOfDraggableView = manager.updateDragPosition($.ig.truncate(relP._x), $.ig.truncate(relP._y));
		if (insideOfDraggableView) {
			if (this.hideCellOnlyWhileDraggingInsideDraggableView()) {
				this.updateFrameOpacity(this.dragOpacity());
			} else {
				this.updateFrameOpacity(1);
			}
		} else {
			if (this.hideCellWhileDraggingOutsideDraggableView()) {
				this.updateFrameOpacity(this.dragOpacity());
			} else {
				this.updateFrameOpacity(1);
			}
		}
		if (this.supportsReordering() && this.__isReordering) {
			if (insideOfDraggableView) {
				this.__isCurrentlyOutsideReordering = false;
				var pointInGrid = reorderHandle.translatePoint(new $.ig.CPPoint(x, y), this._gridView);
				if (this.isReorderVertical()) {
					this.checkVerticalScroll($.ig.truncate(pointInGrid._y));
				} else {
					this.checkHorizontalScroll($.ig.truncate(pointInGrid._x));
				}
			} else {
				if (!this.__isCurrentlyOutsideReordering) {
					$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragLeave);
				}
				this.__isCurrentlyOutsideReordering = true;
				this.reorder(this.__startDragPath);
				this.stopScrollingDown();
				this.stopScrollingUp();
				this.stopScrollingRight();
				this.stopScrollingLeft();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderMove(System.Int32, System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CheckVerticalScroll(System.Int32)" />*/
	checkVerticalScroll: function (pointInGridY) {
		var $self = this;
		var pointWithOffset = pointInGridY;
		var pointWithOutOffset = pointWithOffset;
		pointWithOffset += this._gridView.getContentOffsetY();
		this.__currentDragScrollYPos = pointWithOffset;
		this.checkForVerticalDragMove(pointWithOffset);
		var scrollThreshold = $.ig.ThemeManager.prototype.theme().autoScrollHitThreshold();
		var end = this._gridView.currentHeight() - scrollThreshold;
		var start = scrollThreshold;
		if (pointWithOutOffset > end) {
			if (this.__scrollDownTimer == null) {
				this.__scrollDownTimer = new $.ig.CPTimer();
				this.__scrollDownTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollVertical(true);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingDown();
		}
		if (pointWithOutOffset < start) {
			if (this.__scrollUpTimer == null) {
				this.__scrollUpTimer = new $.ig.CPTimer();
				this.__scrollUpTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollVertical(false);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingUp();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CheckVerticalScroll(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CheckHorizontalScroll(System.Int32)" />*/
	checkHorizontalScroll: function (pointInGridX) {
		var $self = this;
		var pointWithOffset = pointInGridX;
		var pointWithOutOffset = pointWithOffset;
		pointWithOffset += this._gridView.getContentOffsetX();
		this.__currentDragScrollXPos = pointWithOffset;
		this.checkForHorizontalDragMove(pointWithOffset);
		var scrollThreshold = $.ig.ThemeManager.prototype.theme().autoScrollHitThreshold();
		var end = this._gridView.currentWidth() - scrollThreshold;
		var start = scrollThreshold;
		if (pointWithOutOffset > end) {
			if (this.__scrollRightTimer == null) {
				this.__scrollRightTimer = new $.ig.CPTimer();
				this.__scrollRightTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollHorizontal(true);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingRight();
		}
		if (pointWithOutOffset < start) {
			if (this.__scrollLeftTimer == null) {
				this.__scrollLeftTimer = new $.ig.CPTimer();
				this.__scrollLeftTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollHorizontal(false);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingLeft();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::CheckHorizontalScroll(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateFrameOpacity(System.Double)" />*/
	updateFrameOpacity: function (opacity) {
		if (this._frameOpacity != opacity) {
			this._frameOpacity = opacity;
			this.remeasureCell();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::UpdateFrameOpacity(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingDown()" />*/
	stopScrollingDown: function () {
		if (this.__scrollDownTimer != null) {
			this.__scrollDownTimer.stop();
			this.__scrollDownTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingDown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingLeft()" />*/
	stopScrollingLeft: function () {
		if (this.__scrollLeftTimer != null) {
			this.__scrollLeftTimer.stop();
			this.__scrollLeftTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingRight()" />*/
	stopScrollingRight: function () {
		if (this.__scrollRightTimer != null) {
			this.__scrollRightTimer.stop();
			this.__scrollRightTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingRight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingUp()" />*/
	stopScrollingUp: function () {
		if (this.__scrollUpTimer != null) {
			this.__scrollUpTimer.stop();
			this.__scrollUpTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::StopScrollingUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ScrollVertical(System.Boolean)" />*/
	scrollVertical: function (down) {
		var stepSize = $.ig.ThemeManager.prototype.theme().autScrollStepSize();
		var diff = (down) ? stepSize : (-stepSize);
		this.__currentDragScrollYPos += diff;
		var canScroll = false;
		var offsetY = this._gridView.getContentOffsetY() + diff;
		if (down) {
			var limit = this._gridView.getContentHeight() - this._gridView.currentHeight();
			canScroll = offsetY <= limit;
		} else {
			var limit1 = 0;
			canScroll = offsetY >= limit1;
		}
		this.checkForVerticalDragMove(this.__currentDragScrollYPos);
		if (canScroll) {
			this._gridView.scrollTo(this._gridView.getContentOffsetX(), offsetY);
		} else {
			this.stopScrollingDown();
			this.stopScrollingUp();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ScrollVertical(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ScrollHorizontal(System.Boolean)" />*/
	scrollHorizontal: function (right) {
		var stepSize = $.ig.ThemeManager.prototype.theme().autScrollStepSize();
		var diff = (right) ? stepSize : (-stepSize);
		this.__currentDragScrollXPos += diff;
		var canScroll = false;
		var offsetX = this._gridView.getContentOffsetX() + diff;
		if (right) {
			var limit = this._gridView.getContentWidth() - this._gridView.currentWidth();
			canScroll = offsetX <= limit;
		} else {
			var limit1 = 0;
			canScroll = offsetX >= limit1;
		}
		this.checkForHorizontalDragMove(this.__currentDragScrollXPos);
		if (canScroll) {
			this._gridView.scrollTo(offsetX, this._gridView.getContentOffsetY());
		} else {
			this.stopScrollingRight();
			this.stopScrollingLeft();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ScrollHorizontal(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::DroppedOutside()" />*/
	droppedOutside: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::DroppedOutside()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::DropCaptured()" />*/
	dropCaptured: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::DropCaptured()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::FinishedReordering(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	finishedReordering: function (originalPath, newPath) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::FinishedReordering(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::CanDraggingCellAnimateAfterFinishedDragging()" />*/
	canDraggingCellAnimateAfterFinishedDragging: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::CanDraggingCellAnimateAfterFinishedDragging()" />*/
	,
	__cellIsAlwaysLocked: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewCellBase::AlwaysKeepCellLocked()" />*/
	alwaysKeepCellLocked: function (value) {
		if (arguments.length === 1) {
			this._lock = value;
			this.__cellIsAlwaysLocked = value;
			return value;
		} else {
			return this.__cellIsAlwaysLocked;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewCellBase::AlwaysKeepCellLocked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderEnd(System.Int32, System.Int32)" />*/
	reorderEnd: function (x, y) {
		this.stopScrollingDown();
		this.stopScrollingUp();
		this.stopScrollingLeft();
		this.stopScrollingRight();
		this._lock = this.alwaysKeepCellLocked();
		this._frameOpacity = 1;
		var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__reorderPopupId);
		if (manager != null) {
			if (this._frameX < 0) {
				manager.shouldAnimateCellBackToPosition(false);
			} else {
				manager.shouldAnimateCellBackToPosition(this.canDraggingCellAnimateAfterFinishedDragging());
			}
		}
		if (manager != null && !manager.dropOccurred(x, y)) {
			var handled = false;
			if (!manager.dropOccuredInDraggableArea(x, y)) {
				handled = this.droppedOutside();
				if (handled) {
					manager.shouldAnimateCellBackToPosition(false);
				}
			}
			$.ig.CPPopupManager.prototype.closePopup(this.__reorderPopupId, true);
			if (!handled && this.supportsReordering() && this.__startDragPathIdentifier != null && !this.__startDragPathIdentifier.equals(this._path._identifier)) {
				handled = true;
				this.finishedReordering(this.__startDragPath, this._path);
				if (this._cellFinishedDragging != null) {
					this._cellFinishedDragging(this.data(), this._path);
				}
				this.dragFinished();
			}
			if (!handled && this._gridView != null) {
				this.dragFinished();
				if (this._gridView != null) {
					this._gridView.getDataSource().invalidateData();
					this._gridView.updateData(true);
				}
			}
		} else {
			var handled1 = this.dropCaptured();
			if (handled1 && manager != null) {
				manager.shouldAnimateCellBackToPosition(false);
			}
			$.ig.CPPopupManager.prototype.closePopup(this.__reorderPopupId, !handled1);
			this.dragFinished();
			if (this._gridView != null) {
				this._gridView.getDataSource().invalidateData();
				this._gridView.updateData(true);
			}
		}
		this.__reorderPopupId = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ReorderEnd(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::DragFinished()" />*/
	dragFinished: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::DragFinished()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewCellBase::ResolveDropContent(System.String)" />*/
	resolveDropContent: function (dropKey) {
		return this.data();
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewCellBase::ResolveDropContent(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::SetTextAndIconColor(System.String)" />*/
	setTextAndIconColor: function (color) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::SetTextAndIconColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CPGridViewCellBase::ResolveOpacity()" />*/
	resolveOpacity1: function () {
		return 1;
	}
	/*<EndMethod Name="System.Double Infragistics.CPGridViewCellBase::ResolveOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::TriggerOverflow()" />*/
	triggerOverflow: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::TriggerOverflow()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsOverflow()" />*/
	supportsOverflow: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewCellBase::SupportsOverflow()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewCellBase::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPInteractionView.prototype.getSupportedKeyCommands.call(this);
		if (!this.isHidden() && !this.isDisabled()) {
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
				if ($self._keyboardAction != null) {
					$self._keyboardAction();
				} else {
					$self.triggerClick();
				}
			}));
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewCellBase::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::RefreshData()" />*/
	refreshData: function () {
		this.data(this.data());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::RefreshData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellBase::CalculateCellHeight(System.Int32)" />*/
	calculateCellHeight: function (w) {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellBase::CalculateCellHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::SetCellPopupId(System.String)" />*/
	setCellPopupId: function (cellPopupId) {
		var $self = this;
		if (this.__popupId != null) {
			this.closePopup(false);
		}
		this.__popupId = cellPopupId;
		$.ig.CPPopupManager.prototype.subscribeToBeNotifiedWhenPopupCloses(cellPopupId, function () {
			$self.clearPopupId();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::SetCellPopupId(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::ClearPopupId()" />*/
	clearPopupId: function () {
		this.__popupId = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::ClearPopupId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellBase::WasMarkedVisible()" />*/
	wasMarkedVisible: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellBase::WasMarkedVisible()" />*/
	,
	$type: new $.ig.Type('CPGridViewCellBase', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellBase" />*/

/*<BeginType Name="Infragistics.CPGridViewItemCellBase" />*/

$.ig.util.defType('CPGridViewItemCellBase', 'CPGridViewCellBase', {
	__shadowView: null,
	__containerView: null,
	__flatSideContainerView: null,
	__itemStyle: null,
	init: function (itemGuideStyle, identifier) {
		$.ig.CPGridViewCellBase.prototype.init.call(this, identifier);
		this.__itemStyle = itemGuideStyle;
	},
	_tagData: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::Setup()" />*/
	setup: function () {
		$.ig.CPGridViewCellBase.prototype.setup.call(this);
		this.flatSideType($.ig.CPGridViewItemCellBase.prototype.flatSideBottom);
		this.__iconRestOpacity = 1;
		this.restOpacity($.ig.ThemeManager.prototype.theme().restOpacity());
		this.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		this.preferredCursor($.ig.CPCursors.prototype.clickable);
		this.supportsInteractionOpacity(true);
		this.customLeftEdgePadding(-1);
		this.customRightEdgePadding(-1);
		this.customNoRightContentEdgePadding(-1);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		if (this.supportsFixedBorderShadow()) {
			$.ig.ThemeManager.prototype.theme().applyLevel2Shadow(this.shadowView());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::Setup()" />*/
	,
	__crv: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetCornerRadius(System.Double)" />*/
	setCornerRadius: function (cornerRadius) {
		this.__crv = cornerRadius;
		if (!this.supportsFlatSide()) {
			$.ig.CPGridViewCellBase.prototype.setCornerRadius.call(this, cornerRadius);
		}
		this.ensureContentContainer();
		if (this.__shadowView != null) {
			this.__shadowView.setCornerRadius(cornerRadius);
		}
		if (this.__containerView != null) {
			this.__containerView.setCornerRadius(cornerRadius);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetCornerRadius(System.Double)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::ItemCornerRadius()" />*/
	itemCornerRadius: function () {
		return $.ig.truncate(this.__crv);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::ItemCornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		if (!this.supportsFlatSide()) {
			$.ig.CPGridViewCellBase.prototype.setBackgroundColor.call(this, color);
		}
		if (this.__shadowView != null) {
			this.__shadowView.setBackgroundColor(color);
		}
		if (this.__containerView != null) {
			this.__containerView.setBackgroundColor(color);
		}
		if (this.__flatSideContainerView != null) {
			this.__flatSideContainerView.setBackgroundColor(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsHighlightBackgroundView()" />*/
	,
	_restOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewItemCellBase::RestOpacity()" />*/
	restOpacity: function (value) {
		if (arguments.length === 1) {
			this._restOpacity = value;
			return value;
		} else {
			return this._restOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewItemCellBase::RestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsShadow()" />*/
	supportsShadow: function () {
		return this.supportsFixedBorderShadow() && !this.supportsFlatSide();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsShadow()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsFlatSide()" />*/
	supportsFlatSide: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsFlatSide()" />*/
	,
	_flatSideType: null,
	/*<BeginProperty Name="System.String Infragistics.CPGridViewItemCellBase::FlatSideType()" />*/
	flatSideType: function (value) {
		if (arguments.length === 1) {
			this._flatSideType = value;
			return value;
		} else {
			return this._flatSideType;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewItemCellBase::FlatSideType()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPGridViewItemCellBase::ShadowView()" />*/
	shadowView: function () {
		this.ensureContentContainer();
		return this.__shadowView;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPGridViewItemCellBase::ShadowView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideShadow()" />*/
	hideShadow: function () {
		if (this.__shadowView != null) {
			this.__shadowView.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::ShowShadow()" />*/
	showShadow: function () {
		if (this.__shadowView != null) {
			this.__shadowView.isHidden(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::ShowShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::EnsureContentContainer()" />*/
	ensureContentContainer: function () {
		if (this.supportsShadow()) {
			if (this.__shadowView == null) {
				this.__shadowView = new $.ig.CPView();
				this.addSubview(this.__shadowView);
			}
			if (this.__containerView == null) {
				this.__containerView = new $.ig.CPView();
				this.__containerView.clipToBounds(true);
				this.addSubview(this.__containerView);
			}
		} else if (this.supportsFlatSide()) {
			if (this.__containerView == null) {
				this.__containerView = new $.ig.CPView();
				this.__containerView.clipToBounds(true);
				this.addSubview(this.__containerView);
				this.clipToBounds(true);
				this.setBackgroundColor($.ig.CPTheme.prototype.clearColor().$native());
				this.__flatSideContainerView = new $.ig.CPView();
				this.__containerView.addSubview(this.__flatSideContainerView);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::EnsureContentContainer()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPGridViewItemCellBase::ContentContainer()" />*/
	contentContainer: function () {
		this.ensureContentContainer();
		if (this.supportsFlatSide()) {
			return this.__flatSideContainerView;
		}
		if (this.supportsShadow()) {
			return this.__containerView;
		}
		return this;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPGridViewItemCellBase::ContentContainer()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCellBase::ExternalDropTargetViewParent()" />*/
	externalDropTargetViewParent: function () {
		return this.contentContainer();
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCellBase::ExternalDropTargetViewParent()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemCellBase::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.sizingGuide().height();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemCellBase::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		$.ig.CPGridViewCellBase.prototype.applyInteractionColorSet.call(this, colorSet);
		this.setColor(colorSet.foreground());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	__color: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetColor(Infragistics.CPThemeColor)" />*/
	setColor: function (color) {
		if (color.color() == 0) {
			color = $.ig.ThemeManager.prototype.theme().foregroundColor().clone();
		}
		this.__color = color;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SetColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPGridViewItemCellBase::ItemColor()" />*/
	itemColor: function () {
		return this.__color;
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPGridViewItemCellBase::ItemColor()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasLeftContent()" />*/
	hasLeftContent: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasLeftContent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasRightContent()" />*/
	hasRightContent: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NumberOfItemsInRightContentArea()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NumberOfItemsInLeftContentArea()" />*/
	numberOfItemsInLeftContentArea: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NumberOfItemsInLeftContentArea()" />*/
	,
	_indent: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::Indent()" />*/
	indent: function (value) {
		if (arguments.length === 1) {
			this._indent = value;
			return value;
		} else {
			return this._indent;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::Indent()" />*/
	,
	_indentLevel: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentLevel()" />*/
	indentLevel: function (value) {
		if (arguments.length === 1) {
			this._indentLevel = value;
			return value;
		} else {
			return this._indentLevel;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentLevel()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasIndentContent()" />*/
	hasIndentContent: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasIndentContent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::HasCenterContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		if (this.__ignoreInteraction) {
			return;
		}
		$.ig.CPGridViewCellBase.prototype.sizeChanged.call(this, w, h);
		if (this.__shadowView != null) {
			this.layoutShadowView(this.__shadowView, w, h);
		}
		if (this.__containerView != null) {
			var ch = h;
			var cy = 0;
			if (this.supportsFlatSide()) {
				var fy = 0;
				if (this.flatSideType() == $.ig.CPGridViewItemCellBase.prototype.flatSideBottom) {
					ch += this.itemCornerRadius();
				} else if (this.flatSideType() == $.ig.CPGridViewItemCellBase.prototype.flatSideTop) {
					cy = -this.itemCornerRadius();
					ch += this.itemCornerRadius();
					fy = this.itemCornerRadius();
				}
				this.__containerView.measureView1(this.__flatSideContainerView, 0, fy, w, h, 1);
			}
			this.measureView1(this.__containerView, 0, cy, w, ch, 1);
		}
		this.layoutContent1(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutShadowView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	layoutShadowView: function (shadowView, w, h) {
		if (this.supportsFixedBorderShadow() && this._path != null) {
			if (this._path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.right) {
				this.measureView1(shadowView, 0, 0, $.ig.intDivide(w, 2), h - $.ig.ThemeManager.prototype.theme().padding5(), 1);
			} else if (this._path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.left) {
				this.measureView1(shadowView, w, 0, $.ig.intDivide(w, 2), h - $.ig.ThemeManager.prototype.theme().padding5(), 1);
			}
		} else {
			this.measureView1(this.__shadowView, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutShadowView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPItemLayoutGuide Infragistics.CPGridViewItemCellBase::SizingGuide()" />*/
	sizingGuide: function () {
		if (this.__itemStyle != null) {
			return $.ig.ThemeManager.prototype.theme().resolveItemGuide(this.__itemStyle);
		}
		return null;
	}
	/*<EndProperty Name="Infragistics.CPItemLayoutGuide Infragistics.CPGridViewItemCellBase::SizingGuide()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsLeftEdgeIndentPadding()" />*/
	supportsLeftEdgeIndentPadding: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsLeftEdgeIndentPadding()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsEdgePadding()" />*/
	supportsEdgePadding: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsEdgePadding()" />*/
	,
	_useCustomLeftEdgePadding: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::UseCustomLeftEdgePadding()" />*/
	useCustomLeftEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._useCustomLeftEdgePadding = value;
			return value;
		} else {
			return this._useCustomLeftEdgePadding;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::UseCustomLeftEdgePadding()" />*/
	,
	_customLeftEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomLeftEdgePadding()" />*/
	customLeftEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._customLeftEdgePadding = value;
			return value;
		} else {
			return this._customLeftEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomLeftEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::LeftEdgePadding()" />*/
	leftEdgePadding: function () {
		if (this.customLeftEdgePadding() >= 0) {
			return this.customLeftEdgePadding();
		}
		if (this.supportsEdgePadding()) {
			return this.sizingGuide().leftEdgePadding();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::LeftEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::DefaultLeftEdgePadding()" />*/
	defaultLeftEdgePadding: function () {
		return this.sizingGuide().leftEdgePadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::DefaultLeftEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::LeftContentPadding()" />*/
	leftContentPadding: function () {
		return this.leftEdgePadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::LeftContentPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentPadding()" />*/
	indentPadding: function () {
		if (this.customLeftEdgePadding() >= 0) {
			return 0;
		}
		if (this.supportsEdgePadding()) {
			return this.sizingGuide().indentPadding();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentPadding()" />*/
	,
	_additionalRightEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::AdditionalRightEdgePadding()" />*/
	additionalRightEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._additionalRightEdgePadding = value;
			return value;
		} else {
			return this._additionalRightEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::AdditionalRightEdgePadding()" />*/
	,
	_customRightEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomRightEdgePadding()" />*/
	customRightEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._customRightEdgePadding = value;
			return value;
		} else {
			return this._customRightEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomRightEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::RightEdgePadding()" />*/
	rightEdgePadding: function () {
		if (this.customRightEdgePadding() >= 0) {
			return this.customRightEdgePadding() + this.additionalRightEdgePadding();
		}
		if (this.supportsEdgePadding()) {
			return this.sizingGuide().rightEdgePadding() + this.additionalRightEdgePadding();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::RightEdgePadding()" />*/
	,
	_customNoRightContentEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomNoRightContentEdgePadding()" />*/
	customNoRightContentEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._customNoRightContentEdgePadding = value;
			return value;
		} else {
			return this._customNoRightContentEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::CustomNoRightContentEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NoRightContentEdgePadding()" />*/
	noRightContentEdgePadding: function () {
		if (this.customNoRightContentEdgePadding() >= 0) {
			return this.customNoRightContentEdgePadding();
		}
		if (this.supportsEdgePadding()) {
			return this.sizingGuide().noRightContentEdgePadding();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::NoRightContentEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentContentSize()" />*/
	indentContentSize: function () {
		return this.sizingGuide().buttonGuide().size();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCellBase::IndentContentSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::AddHightlightBackgroundView(Infragistics.CPView)" />*/
	addHightlightBackgroundView: function (view) {
		this.contentContainer().addSubview(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::AddHightlightBackgroundView(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	measureHighlightBackgroundView: function (view, w, h) {
		this.contentContainer().measureView1(view, 0, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCellBase::PopupHightlightView()" />*/
	popupHightlightView: function () {
		return this.contentContainer();
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCellBase::PopupHightlightView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutContent(System.Int32, System.Int32)" />*/
	layoutContent1: function (w, h) {
		if (this.smallDraggingMode()) {
			this.layoutSmallDraggingMode(w, h);
		} else {
			this.layoutContent(w, h, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutContent(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutSmallDraggingMode(System.Int32, System.Int32)" />*/
	layoutSmallDraggingMode: function (w, h) {
		if (this.hasLeftContent()) {
			var guide = this.sizingGuide();
			var left = $.ig.intDivide(w, 2) - $.ig.intDivide(guide.buttonGuide().size(), 2);
			this.layoutLeftContentArea(0, left, guide);
			this.layoutCenterContentArea(w, $.ig.NativeUIUtility.prototype.utility().densify(300), h, guide);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutSmallDraggingMode(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemCellBase::LayoutContent(System.Int32, System.Int32, System.Boolean)" />*/
	layoutContent: function (w, h, callLayoutMethods) {
		var guide = this.sizingGuide();
		var indentPadding = this.indentPadding();
		var left = this.leftEdgePadding();
		var availWidth = w;
		if (this.indent()) {
			var indentSpacing = (indentPadding * this.indentLevel());
			var indentContentSize = this.indentContentSize();
			var indentSize = indentSpacing + indentContentSize;
			if (this.supportsLeftEdgeIndentPadding()) {
				left += guide.leftEdgeIndentPadding();
			}
			if (this.hasIndentContent()) {
				if (callLayoutMethods) {
					this.layoutIndentContentArea(left + indentSpacing, guide);
				}
			}
			if (this.supportsLeftEdgeIndentPadding()) {
				if (!this.hasLeftContent()) {
					left += guide.leftEdgeIndentPadding();
				}
			}
			left += indentSize;
		}
		availWidth = w - left;
		if (this.hasLeftContent()) {
			var numberofItems = Math.max(1, this.numberOfItemsInLeftContentArea());
			for (var i = 0; i < numberofItems; i++) {
				if (callLayoutMethods) {
					this.layoutLeftContentArea(i, left, guide);
				}
				left += guide.buttonGuide().size();
			}
			left += this.leftContentPadding();
		} else {
			this.hideLeftContent();
			if (!this.indent()) {
				left += indentPadding;
			}
			if (this.hasIndentContent()) {
				left += this.leftContentPadding();
			}
		}
		availWidth = w - left;
		if (this.hasRightContent()) {
			var numberofItems1 = Math.max(1, this.numberOfItemsInRightContentArea());
			var right = w - this.rightEdgePadding();
			for (var i1 = 0; i1 < numberofItems1; i1++) {
				right -= guide.buttonGuide().size();
				if (callLayoutMethods) {
					this.layoutRightContentArea(i1, right, guide);
				}
			}
			availWidth -= (w - right);
			availWidth -= this.rightEdgePadding();
		} else {
			availWidth -= this.noRightContentEdgePadding();
			this.hideRightContent();
		}
		if (this.hasCenterContentArea()) {
			if (callLayoutMethods && availWidth > 0) {
				this.layoutCenterContentArea(left, availWidth, h, guide);
			}
		}
		return availWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemCellBase::LayoutContent(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutLeftContentArea: function (index, x, guide) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideRightContent()" />*/
	hideRightContent: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideRightContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideLeftContent()" />*/
	hideLeftContent: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::HideLeftContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutIndentContentArea: function (x, guide) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutButton(Infragistics.CPViewBase, System.Int32, System.Boolean, System.Boolean, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutButton1: function (view, supportedIndex, useRestOpacity, supportsInteractionOpacity, index, x, guide) {
		if (index == supportedIndex) {
			return this.layoutButton(view, useRestOpacity, supportsInteractionOpacity, x, guide);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutButton(Infragistics.CPViewBase, System.Int32, System.Boolean, System.Boolean, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutButton(Infragistics.CPViewBase, System.Boolean, System.Boolean, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutButton: function (view, useRestOpacity, supportsInteractionOpacity, x, guide) {
		if (view != null) {
			var opacity = ((useRestOpacity) ? this.restOpacity() : 1);
			var size = guide.buttonGuide().size();
			this.contentContainer().measureView1(view, x, $.ig.intDivide(this.currentHeight(), 2) - $.ig.intDivide(size, 2), size, size, this.resolveOpacity(opacity, supportsInteractionOpacity));
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutButton(Infragistics.CPViewBase, System.Boolean, System.Boolean, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	__iconRestOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewItemCellBase::IconRestOpacity()" />*/
	iconRestOpacity: function (value) {
		if (arguments.length === 1) {
			this.__iconRestOpacity = value;
			return value;
		} else {
			return this.__iconRestOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewItemCellBase::IconRestOpacity()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPButtonLayoutGuide Infragistics.CPGridViewItemCellBase::ResolveButtonGuide(Infragistics.CPItemLayoutGuide)" />*/
	resolveButtonGuide: function (guide) {
		return guide.buttonGuide();
	}
	/*<EndMethod Name="Infragistics.CPButtonLayoutGuide Infragistics.CPGridViewItemCellBase::ResolveButtonGuide(Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutIcon(Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutIcon: function (view, supportedIndex, index, x, guide) {
		if (index == supportedIndex) {
			if (view != null) {
				var buttonGuide = this.resolveButtonGuide(guide);
				var size = buttonGuide.iconSize();
				this.contentContainer().measureView1(view, x + $.ig.intDivide(buttonGuide.size(), 2) - $.ig.intDivide(size, 2), $.ig.intDivide(this.currentHeight(), 2) - $.ig.intDivide(size, 2), size, size, this.resolveOpacity(this.__iconRestOpacity, true));
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutIcon(Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutIconWithCornerRadius(Infragistics.CPView, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutIconWithCornerRadius: function (view, supportedIndex, index, x, guide) {
		if (index == supportedIndex) {
			if (view != null) {
				var buttonGuide = guide.buttonGuide();
				var size = guide.buttonGuide().iconSize();
				view.setCornerRadius($.ig.intDivide(size, 2));
				this.contentContainer().measureView1(view, x + $.ig.intDivide(buttonGuide.size(), 2) - $.ig.intDivide(size, 2), $.ig.intDivide(this.currentHeight(), 2) - $.ig.intDivide(size, 2), size, size, this.resolveOpacity(this.__iconRestOpacity, true));
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::LayoutIconWithCornerRadius(Infragistics.CPView, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsRowHilighting()" />*/
	supportsRowHilighting: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsRowHilighting()" />*/
	,
	__ignoreInteraction: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		$.ig.CPGridViewCellBase.prototype.updateInteractionStates1.call(this, over, mouseDown);
		if (this.supportsRowHilighting() && this._gridView != null && !this.__ignoreInteraction) {
			var r = this._path._rowIndex;
			var s = this._path._sectionIndex;
			var dsh = this._gridView.getDataSource();
			var colCount = dsh.getNumberOfFixedLeftColumnsInGrid();
			var p = new $.ig.CPCellPath(0, r, s, 0, $.ig.CPGridViewFixedColumnDirection.prototype.left);
			for (var i = 0; i < colCount; i++) {
				p._columnIndex = i;
				this.updateStatesForCellAtPath(p, over, mouseDown);
			}
			colCount = dsh.getNumberOfColumnsInGrid();
			p._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
			for (var i1 = 0; i1 < colCount; i1++) {
				p._columnIndex = i1;
				this.updateStatesForCellAtPath(p, over, mouseDown);
			}
			colCount = dsh.getNumberOfFixedRightColumnsInGrid();
			p._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.right;
			for (var i2 = 0; i2 < colCount; i2++) {
				p._columnIndex = i2;
				this.updateStatesForCellAtPath(p, over, mouseDown);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::RefreshRowData()" />*/
	refreshRowData: function () {
		if (this._gridView != null) {
			var r = this._path._rowIndex;
			var s = this._path._sectionIndex;
			var dsh = this._gridView.getDataSource();
			var colCount = dsh.getNumberOfFixedLeftColumnsInGrid();
			var p = new $.ig.CPCellPath(0, r, s, 0, $.ig.CPGridViewFixedColumnDirection.prototype.left);
			for (var i = 0; i < colCount; i++) {
				p._columnIndex = i;
				this.refreshCellData(p);
			}
			colCount = dsh.getNumberOfColumnsInGrid();
			p._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
			for (var i1 = 0; i1 < colCount; i1++) {
				p._columnIndex = i1;
				this.refreshCellData(p);
			}
			colCount = dsh.getNumberOfFixedRightColumnsInGrid();
			p._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.right;
			for (var i2 = 0; i2 < colCount; i2++) {
				p._columnIndex = i2;
				this.refreshCellData(p);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::RefreshRowData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::RefreshCellData(Infragistics.CPCellPath)" />*/
	refreshCellData: function (p) {
		p.update();
		var cell = this._gridView.cellAtPath(p);
		if (cell != null) {
			cell.refreshData();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::RefreshCellData(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::UpdateStatesForCellAtPath(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	updateStatesForCellAtPath: function (p, over, mouseDown) {
		p.update();
		var cell = this._gridView.cellAtPath(p);
		if (cell != null && cell != this) {
			cell.__ignoreInteraction = true;
			cell.forceInteractionState(over, mouseDown);
			cell.__ignoreInteraction = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::UpdateStatesForCellAtPath(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsFixedBorderShadow()" />*/
	supportsFixedBorderShadow: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::SupportsFixedBorderShadow()" />*/
	,
	_fixedBorderShadowDisabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::FixedBorderShadowDisabled()" />*/
	fixedBorderShadowDisabled: function (value) {
		if (arguments.length === 1) {
			this._fixedBorderShadowDisabled = value;
			return value;
		} else {
			return this._fixedBorderShadowDisabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCellBase::FixedBorderShadowDisabled()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::CellLocationChangedInViewport(System.Double, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	cellLocationChangedInViewport: function (xPercent, yPercent, x, y, w, h) {
		if (this.supportsFixedBorderShadow()) {
			var hide = true;
			var path = this._path;
			if (!this.fixedBorderShadowDisabled() && path != null && this._gridView != null) {
				var dsh = this._gridView.getDataSource();
				if (dsh != null) {
					var scrollX = this._gridView.getContentOffsetX();
					if (this._path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.right) {
						if (path._columnIndex == 0) {
							var contentSize = this._gridView.getContentWidth();
							var actualWidth = this._gridView.currentWidth();
							if (actualWidth < contentSize && scrollX < (contentSize - actualWidth)) {
								hide = false;
							}
						}
					} else if (this._path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.left) {
						var count = dsh.getNumberOfFixedLeftColumnsInGrid();
						if (path._columnIndex == count - 1) {
							if (scrollX > 0) {
								hide = false;
							}
						}
					}
				}
			}
			if (hide) {
				this.hideShadow();
			} else {
				this.showShadow();
			}
		}
		return $.ig.CPGridViewCellBase.prototype.cellLocationChangedInViewport.call(this, xPercent, yPercent, x, y, w, h);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCellBase::CellLocationChangedInViewport(System.Double, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCellBase::OnDetached()" />*/
	onDetached: function () {
		$.ig.CPGridViewCellBase.prototype.onDetached.call(this);
		if (this.supportsRowHilighting()) {
			this.__ignoreInteraction = true;
			this.forceInteractionState(false, false);
			this.__ignoreInteraction = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCellBase::OnDetached()" />*/
	,
	$type: new $.ig.Type('CPGridViewItemCellBase', $.ig.CPGridViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemCellBase" />*/

/*<BeginType Name="Infragistics.CPBucketViewCell" />*/

$.ig.util.defType('CPBucketViewCell', 'CPGridViewItemCellBase', {
	__gridView: null,
	__header: null,
	__sep: null,
	init: function (initNumber, identifier) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, $.ig.CPTheme.prototype.itemGuideStyleLarge, identifier);
		this.setupBuckets(true);
	},
	init1: function (initNumber, identifier, shadow) {
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, $.ig.CPTheme.prototype.itemGuideStyleLarge, identifier);
		this.setupBuckets(shadow);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::SetupBuckets(System.Boolean)" />*/
	setupBuckets: function (supportsShadow) {
		var $self = this;
		if (this.defaultHeaderHeight() > 0) {
			this.__header = this.createHeaderCell(this.sizingGuide().name());
			this.__header.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainSecondaryBackgroundColor().$native());
			this.__header.supportsInteractionOpacity(false);
			this.__header.setCornerRadius($.ig.ThemeManager.prototype.theme().containerCornerRadius());
			this.__header.isFocusable(false);
			this.__header.setOverflowVisiblity(false);
			this.__header.font($.ig.ThemeManager.prototype.theme().boldFont());
			this.__header.overrideFontSize($.ig.ThemeManager.prototype.theme().fontSizeH3());
			this.__header.supportsInteractionOpacity(false);
			this.__header.disableBackgroundHighlights(true);
			this.__header.additionalRightEdgePadding(this.sideSpacing());
			this.__header._overflowClickedAction = function (o) {
				$self.headerOverFlowClicked();
			};
			this.contentContainer().addSubview(this.__header);
			this.__sep = new $.ig.CPViewBase();
			this.__sep.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
			this.contentContainer().addSubview(this.__sep);
		}
		if (this.supportsGrid()) {
			this.__gridView = new $.ig.CPGridView(0);
			this.__gridView._rowHeight = this.sizingGuide().height();
			this.__gridView._headerHeight = 0;
			this.__gridView._rowSeparatorHeight = 0;
			this.__gridView._sectionHeaderHeight = this.__gridView._rowHeight;
			this.__gridView._rowSpacing = $.ig.ThemeManager.prototype.theme().padding5();
			this.__gridView._columnSpacing = this.sideSpacing();
			this.__gridView._lostFocusBlock = function () {
				$self.toggleFocusElements(false);
			};
			this.contentContainer().addSubview(this.__gridView);
		}
		if (supportsShadow) {
			$.ig.ThemeManager.prototype.theme().applyLevel1Shadow(this.shadowView());
		}
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainSecondaryBackgroundColor().$native());
		this.setCornerRadius($.ig.ThemeManager.prototype.theme().containerCornerRadius());
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::SetupBuckets(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewCell::SideSpacing()" />*/
	sideSpacing: function () {
		return $.ig.ThemeManager.prototype.theme().displayAreaPadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewCell::SideSpacing()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsGrid()" />*/
	supportsGrid: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsGrid()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewCell::DefaultHeaderHeight()" />*/
	defaultHeaderHeight: function () {
		return $.ig.ThemeManager.prototype.theme().mediumHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewCell::DefaultHeaderHeight()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewItemCell Infragistics.CPBucketViewCell::CreateHeaderCell(System.String)" />*/
	createHeaderCell: function (sizingGuide) {
		return new $.ig.CPGridViewItemCell(sizingGuide, "");
	}
	/*<EndMethod Name="Infragistics.CPGridViewItemCell Infragistics.CPBucketViewCell::CreateHeaderCell(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsHighlightBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsShadow()" />*/
	supportsShadow: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::SetDataSource(Infragistics.CPGridViewDatasourceHelper)" />*/
	setDataSource: function (dsh) {
		this.__gridView.setDataSource(dsh);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::SetDataSource(Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewItemCell Infragistics.CPBucketViewCell::Header()" />*/
	header: function () {
		return this.__header;
	}
	/*<EndProperty Name="Infragistics.CPGridViewItemCell Infragistics.CPBucketViewCell::Header()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::HeaderClicked()" />*/
	headerClicked: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::HeaderClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::HeaderOverFlowClicked()" />*/
	headerOverFlowClicked: function () {
		this.showPopup1(this.__header.overFlowButton());
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::HeaderOverFlowClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::UpdateData(Infragistics.CPList)" />*/
	updateData: function (data) {
		if (this.__gridView != null) {
			var dsh = this.__gridView.getDataSource();
			var invalidate = data == dsh.data();
			dsh.data(data);
			if (data != null) {
				if (invalidate) {
					dsh.invalidateData();
				}
				this.refreshGrid();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::UpdateData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::RefreshGrid()" />*/
	refreshGrid: function () {
		if (this.__gridView != null) {
			this.__gridView.stopAnimating();
			this.__gridView.updateData(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::RefreshGrid()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridView Infragistics.CPBucketViewCell::Grid()" />*/
	grid: function () {
		return this.__gridView;
	}
	/*<EndProperty Name="Infragistics.CPGridView Infragistics.CPBucketViewCell::Grid()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::RemoveSection(Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	removeSection: function (data, index, finished) {
		this._gridView.getDataSource().data(data);
		var animator = new $.ig.CPBucketRemoveCellAnimator();
		animator._completionBlock = finished;
		this._gridView.removeCell(new $.ig.CPCellPath(1, 0, 0, index), animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::RemoveSection(Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	__dropIdTypeLookup: null,
	/*<BeginMethod Name="System.String Infragistics.CPBucketViewCell::RegisterDropTarget(System.String)" />*/
	registerDropTarget: function (dropType) {
		if (this.__dropIdTypeLookup == null) {
			this.__dropIdTypeLookup = new $.ig.Dictionary(0);
		}
		var dropId = $.ig.CPDroppableViewManager.prototype.register(this, dropType);
		this.__dropIdTypeLookup.item(dropId, dropType);
		return dropId;
	}
	/*<EndMethod Name="System.String Infragistics.CPBucketViewCell::RegisterDropTarget(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::UnregisterDropTargets()" />*/
	unregisterDropTargets: function () {
		if (this.__dropIdTypeLookup != null) {
			var dropIds = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__dropIdTypeLookup);
			for (var i = 0; i < dropIds.length; i++) {
				var dropId = dropIds[i];
				var dropType = this.__dropIdTypeLookup.item(dropId);
				$.ig.CPDroppableViewManager.prototype.unregister(dropId, dropType);
			}
			this.__dropIdTypeLookup = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::UnregisterDropTargets()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::SetTitle(System.String)" />*/
	setTitle: function (text) {
		this.__header.textLabel().setText(text);
		this.__header.layoutCell();
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__header.overFlowButton(), "overflow_options_button_" + text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::SetTitle(System.String)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewCell::HeaderHeight()" />*/
	headerHeight: function () {
		return this.defaultHeaderHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewCell::HeaderHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewCell::SepSize()" />*/
	sepSize: function () {
		return $.ig.ThemeManager.prototype.theme().borderWidth1();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewCell::SepSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemCellBase.prototype.sizeChanged.call(this, w, h);
		var top = 0;
		if (this.__header != null) {
			var headerHeight = this.headerHeight();
			this.layoutHeader(0, top, w, headerHeight);
			top += headerHeight;
			var sepSize = this.sepSize();
			this.contentContainer().measureView1(this.__sep, 0, top, w, sepSize, 1);
			top += sepSize;
		} else {
			top += this.headerHeight();
		}
		this.measureContent(0, top, w, h - top);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::LayoutHeader(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutHeader: function (x, y, w, h) {
		this.contentContainer().measureView1(this.__header, x, y, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::LayoutHeader(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::MeasureContent(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureContent: function (x, y, w, h) {
		if (this.__gridView != null) {
			this.contentContainer().measureView1(this.__gridView, x, y, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::MeasureContent(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::Unload()" />*/
	unload: function () {
		$.ig.CPGridViewItemCellBase.prototype.unload.call(this);
		if (this.__gridView != null) {
			this.__gridView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::Unload()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPBucketViewCell::ResolveDroppableRelativeView()" />*/
	resolveDroppableRelativeView: function () {
		return this;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPBucketViewCell::ResolveDroppableRelativeView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::OnContentDropped(System.Object)" />*/
	onContentDropped: function (o) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::OnContentDropped(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::DropOperationFinished(System.Boolean, System.String, System.Object)" />*/
	dropOperationFinished: function (wasDroppedOn, dropType, o) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::DropOperationFinished(System.Boolean, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketViewCell::AcceptsDropObject(System.String, System.Object)" />*/
	acceptsDropObject: function (dropType, o) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketViewCell::AcceptsDropObject(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	dragIsOverView: function (view, x, y) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::DragHasLeftView(Infragistics.CPViewBase)" />*/
	dragHasLeftView: function (view) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::DragHasLeftView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPBucketViewCell::ResolveDropViewClippingContainer()" />*/
	resolveDropViewClippingContainer: function () {
		return this._gridView;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPBucketViewCell::ResolveDropViewClippingContainer()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketViewCell::PreferSmallModeDroppableContent(System.String)" />*/
	preferSmallModeDroppableContent: function (key) {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketViewCell::PreferSmallModeDroppableContent(System.String)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewCell::SmallDraggingHeight()" />*/
	smallDraggingHeight: function () {
		return this.__header.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewCell::SmallDraggingHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::CanDraggingCellAnimateAfterFinishedDragging()" />*/
	canDraggingCellAnimateAfterFinishedDragging: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::CanDraggingCellAnimateAfterFinishedDragging()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::CanEdit()" />*/
	canEdit: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::CanEdit()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::Draggable()" />*/
	draggable: function () {
		return this.canEdit();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::Draggable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsReordering()" />*/
	supportsReordering: function () {
		return this.canEdit();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportsReordering()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportSmallDragMode()" />*/
	supportSmallDragMode: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::SupportSmallDragMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::IsReorderVertical()" />*/
	isReorderVertical: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::IsReorderVertical()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketViewCell::AllowDragToStart(System.Int32, System.Int32)" />*/
	allowDragToStart: function (x, y) {
		if (this.canEdit() && y <= this.__header.currentHeight()) {
			return $.ig.CPGridViewItemCellBase.prototype.allowDragToStart.call(this, x, y);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketViewCell::AllowDragToStart(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPBucketViewCell::HideCellWhileDraggingOutsideDraggableView()" />*/
	hideCellWhileDraggingOutsideDraggableView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBucketViewCell::HideCellWhileDraggingOutsideDraggableView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::FinishedReordering(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	finishedReordering: function (originalPath, newPath) {
		$.ig.CPGridViewItemCellBase.prototype.finishedReordering.call(this, originalPath, newPath);
		var originalSection = originalPath._columnIndex;
		var newSection = newPath._columnIndex;
		this.movedSection(originalSection, newSection);
		this._gridView.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::FinishedReordering(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::MovedSection(System.Int32, System.Int32)" />*/
	movedSection: function (originalSection, newSection) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::MovedSection(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::EnterSection()" />*/
	enterSection: function () {
		this.elementLostFocus();
		this.toggleFocusElements(true);
		if (this.__gridView != null) {
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this.__gridView, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::EnterSection()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPBucketViewCell::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Enter", $.ig.Key.prototype.down, false, false, false), function (k) {
			$self.enterSection();
		}));
		combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.option(), function (k) {
			$self.headerOverFlowClicked();
		}));
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPBucketViewCell::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPBucketViewCell::SupportsSectionKeyCommands()" />*/
	supportsSectionKeyCommands: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPBucketViewCell::SupportsSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPBucketViewCell::GetSupportedSectionKeyCommands()" />*/
	getSupportedSectionKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPGridViewItemCellBase.prototype.getSupportedSectionKeyCommands.call(this);
		var elem = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().getCurrentActiveElement();
		if (elem != null) {
			var elemItem = elem.getElement();
			if (elemItem != null && elemItem == this.__gridView) {
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Exit", $.ig.Key.prototype.left, false, false, false), function (k) {
					$self.__gridView.clearFocusCell();
					$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().moveFocusBackward();
				}));
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Exit", $.ig.Key.prototype.right, false, false, false), function (k) {
					$self.__gridView.clearFocusCell();
					$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().moveFocusBackward();
				}));
			}
		}
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPBucketViewCell::GetSupportedSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::Cleanup()" />*/
	cleanup: function () {
		$.ig.CPGridViewItemCellBase.prototype.cleanup.call(this);
		this.unregister();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::Cleanup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBucketViewCell::Unregister()" />*/
	unregister: function () {
		this.unregisterDropTargets();
	}
	/*<EndMethod Name="System.Void Infragistics.CPBucketViewCell::Unregister()" />*/
	,
	$type: new $.ig.Type('CPBucketViewCell', $.ig.CPGridViewItemCellBase.prototype.$type, [$.ig.CPDroppableViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPBucketViewCell" />*/

/*<BeginType Name="Infragistics.CPContentDraggableBucketViewCell" />*/

$.ig.util.defType('CPContentDraggableBucketViewCell', 'CPBucketViewCell', {
	init: function (initNumber, identifier) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPBucketViewCell.prototype.init.call(this, 0, identifier);
	},
	init1: function (initNumber, identifier, shadow) {
		$.ig.CPBucketViewCell.prototype.init1.call(this, 1, identifier, shadow);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::SupportsDragging()" />*/
	supportsDragging: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::SupportsDragging()" />*/
	,
	__draggingItemId: null,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::OnContentDropped(System.Object)" />*/
	onContentDropped: function (o) {
		if (this.__draggingItemId != null) {
			this.__draggingItemId = null;
		} else {
			if (this._gridView != null) {
				this._gridView.updateData(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::OnContentDropped(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::AcceptsDropObject(System.String, System.Object)" />*/
	acceptsDropObject: function (dropType, o) {
		if (this.supportsDragging()) {
			this.__draggingItemId = null;
			if (typeof o === 'string') {
				this.__draggingItemId = o;
			}
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::AcceptsDropObject(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::DragHasLeftView(Infragistics.CPViewBase)" />*/
	dragHasLeftView: function (view) {
		if (this.__draggingItemId != null) {
			this.cleanUpContentDrag();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::DragHasLeftView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	dragIsOverView: function (view, x, y) {
		if (this.__draggingItemId != null) {
			this.handleContentDrag(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::DragIsOverView(Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::CanDragOverSection(System.Int32)" />*/
	canDragOverSection: function (section) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPContentDraggableBucketViewCell::CanDragOverSection(System.Int32)" />*/
	,
	_currentDraggingIndex: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPContentDraggableBucketViewCell::CurrentDraggingIndex()" />*/
	currentDraggingIndex: function (value) {
		if (arguments.length === 1) {
			this._currentDraggingIndex = value;
			return value;
		} else {
			return this._currentDraggingIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPContentDraggableBucketViewCell::CurrentDraggingIndex()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPContentDraggableBucketViewCell::OriginalDraggingIndex()" />*/
	originalDraggingIndex: function () {
		return -1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPContentDraggableBucketViewCell::OriginalDraggingIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::SwapDraggingDataQuietly(System.Int32, System.Int32)" />*/
	swapDraggingDataQuietly: function (from, to) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::SwapDraggingDataQuietly(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::HandleContentDrag(System.Int32, System.Int32)" />*/
	handleContentDrag: function (x, y) {
		var ptInView = this.translatePoint(new $.ig.CPPoint(x, y), this.grid().getPanel(0));
		var location = this.grid().cellAtPoint($.ig.truncate(ptInView._x), $.ig.truncate(ptInView._y));
		if (!this.canDragOverSection(location._sectionIndex) || location._rowIndex < 0) {
			this.cleanUpContentDrag();
		} else {
			var index = this.currentDraggingIndex();
			this.currentDraggingIndex(location._rowIndex);
			if (location._rowIndex != index) {
				$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragSwap);
				this.swapDraggingDataQuietly(index, location._rowIndex);
				this.grid().moveRow(location._sectionIndex, index, location._rowIndex, false);
			}
		}
		var ptInGrid = this.translatePoint(new $.ig.CPPoint(x, y), this.grid());
		this.grid().checkForVerticalAutoScroll($.ig.truncate(ptInGrid._y));
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::HandleContentDrag(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::CleanUpContentDrag()" />*/
	cleanUpContentDrag: function () {
		$.ig.NativeUIUtility.prototype.utility().triggerHaptic($.ig.CPHapticType.prototype.dragLeave);
		this.swapDraggingDataQuietly(this.currentDraggingIndex(), this.originalDraggingIndex());
		this.grid().moveRow(0, this.currentDraggingIndex(), this.originalDraggingIndex(), false);
		this.currentDraggingIndex(this.originalDraggingIndex());
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentDraggableBucketViewCell::CleanUpContentDrag()" />*/
	,
	$type: new $.ig.Type('CPContentDraggableBucketViewCell', $.ig.CPBucketViewCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPContentDraggableBucketViewCell" />*/

/*<BeginType Name="Infragistics.CPScrollBarView" />*/

$.ig.util.defType('CPScrollBarView', 'CPView', {
	__thumbView: null,
	__borderView: null,
	__isVerticalOrientation: false,
	__canHide: false,
	__currentOffset: 0,
	__contentSize: 0,
	__currentViewportSize: 0,
	__nativeOffset: 0,
	__nativeContentSize: 0,
	__nativeViewportSize: 0,
	__thumbLocation: 0,
	__thumbLength: 0,
	_thumbMoved: null,
	_thumbReleased: null,
	_useLargeThumb: false,
	_frontInset: 0,
	_isScrollBarVisible: false,
	_alwaysVisible: false,
	init: function (vertical) {
		var $self = this;
		this.__canHide = true;
		this.__mouseDownScrollDirection = 0;
		$.ig.CPView.prototype.init.call(this);
		this.__isVerticalOrientation = vertical;
		this.clipToBounds(true);
		this.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
		this.__thumbView = new $.ig.CPScrollBarThumbView(vertical);
		this.__thumbView.setBackgroundColor(this.thumbColor());
		this.__thumbView._thumbMoved = function (change) {
			$self.thumbUpdated(true, $.ig.util.getValue(change));
		};
		this.__thumbView._thumbReleased = function () {
			if ($self._thumbReleased != null) {
				$self._thumbReleased();
			}
			$self.hideThumb();
		};
		this.addSubview(this.__thumbView);
		this.__borderView = new $.ig.CPViewBase();
		this.__borderView.setBackgroundColor(this.barColor());
		this.addSubview(this.__borderView);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__borderView, "borderView");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__thumbView, "thumbView");
	},
	/*<BeginProperty Name="System.String Infragistics.CPScrollBarView::ThumbColor()" />*/
	thumbColor: function () {
		return $.ig.ThemeManager.prototype.theme().scrollBarThumbColor().$native();
	}
	/*<EndProperty Name="System.String Infragistics.CPScrollBarView::ThumbColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPScrollBarView::BarColor()" />*/
	barColor: function () {
		return $.ig.CPTheme.prototype.clearColor().$native();
	}
	/*<EndProperty Name="System.String Infragistics.CPScrollBarView::BarColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::ThumbUpdated(System.Boolean, System.Int32)" />*/
	thumbUpdated: function (drag, change) {
		if (this._thumbMoved != null) {
			var updateOffset = $.ig.truncate(Math.ceil((this.__nativeContentSize * ((this.__thumbLocation + change) / this.__nativeViewportSize))));
			updateOffset = Math.max(0, Math.min(updateOffset, this.__nativeContentSize - this.__nativeViewportSize));
			updateOffset = this.notifyThumbMoved(drag, updateOffset - this._frontInset);
			this.updateScrollBar(updateOffset, this.__currentViewportSize, this.__contentSize, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::ThumbUpdated(System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::AnimateUpdateScrollBar(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	animateUpdateScrollBar: function (offset, viewportSize, size, hide) {
		var $self = this;
		if (this._alwaysVisible) {
			this._isScrollBarVisible = true;
			hide = false;
			if (!this.__isScrollDirty) {
				return;
			}
		}
		if (this.__canHide == false && hide == true || (hide && this.isHidden())) {
			this._isScrollBarVisible = false;
			return;
		}
		this.__isScrollDirty = false;
		var storedHide = hide;
		this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
			$self.updateScrollBar(offset, viewportSize, size, storedHide);
		}, function (finished) {
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::AnimateUpdateScrollBar(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ScrollbarThickness()" />*/
	scrollbarThickness: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ScrollbarThickness()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbPadding()" />*/
	thumbPadding: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(2);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbSmallSize()" />*/
	thumbSmallSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(8);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbSmallSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbLargeSize()" />*/
	thumbLargeSize: function () {
		return $.ig.ThemeManager.prototype.theme().padding15();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbLargeSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbLargeCornerRadius()" />*/
	thumbLargeCornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbLargeCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbSmallCornerRadius()" />*/
	thumbSmallCornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().smallCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPScrollBarView::ThumbSmallCornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::UpdateScrollBar(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	updateScrollBar: function (offset, viewPortSize, size, hide) {
		if (size <= viewPortSize || (size - viewPortSize) < 0.001) {
			this.isHidden(true);
			this._isScrollBarVisible = false;
			return;
		}
		this.isHidden(false);
		this._isScrollBarVisible = !hide;
		this.__currentViewportSize = viewPortSize;
		this.__currentOffset = offset;
		this.__contentSize = size;
		if (this.__isVerticalOrientation) {
			this.__nativeViewportSize = this.currentHeight();
		} else {
			this.__nativeViewportSize = this.currentWidth();
		}
		this.__nativeContentSize = $.ig.truncate(((this.__contentSize / this.__currentViewportSize) * this.__nativeViewportSize));
		var percent = this.__currentOffset / this.__contentSize;
		this.__nativeOffset = $.ig.truncate((this.__nativeContentSize * percent));
		var thumbSize;
		if (this._useLargeThumb) {
			thumbSize = this.thumbLargeSize();
			this.__thumbView.setCornerRadius(this.thumbLargeCornerRadius());
		} else {
			thumbSize = this.thumbSmallSize();
			this.__thumbView.setCornerRadius(this.thumbSmallCornerRadius());
		}
		var minScrollBarSize = $.ig.ThemeManager.prototype.theme().padding25();
		var padding = this.thumbPadding();
		var thumbThickness = thumbSize - (padding * 2);
		this.__thumbLength = Math.max(minScrollBarSize, $.ig.truncate((this.__nativeViewportSize * (this.__nativeViewportSize / this.__nativeContentSize))));
		this.__thumbLocation = $.ig.truncate((this.__nativeViewportSize * percent));
		this.__thumbLocation = Math.max(0, Math.min(this.__thumbLocation, this.__nativeViewportSize - this.__thumbLength));
		if (!this.__thumbView.isMouseDown()) {
			if (this.__nativeOffset < 0) {
				this.__thumbLength = Math.max(minScrollBarSize, this.__thumbLength + this.__nativeOffset);
			} else if (this.__nativeOffset + this.__nativeViewportSize > this.__nativeContentSize) {
				var diff = (this.__nativeOffset + this.__nativeViewportSize) - this.__nativeContentSize;
				var adjustedThumbLength = this.__thumbLength - diff;
				if (adjustedThumbLength > minScrollBarSize) {
					this.__thumbLength -= diff;
					this.__thumbLocation += diff;
				} else {
					this.__thumbLength = minScrollBarSize;
					this.__thumbLocation = this.__nativeViewportSize - minScrollBarSize;
				}
			}
		}
		var scrollbarThickness = this.scrollbarThickness();
		var opacity = 1;
		if (hide) {
			opacity = 0;
		}
		var borderOpacity = 0;
		if (this._useLargeThumb && !hide) {
			borderOpacity = 1;
		}
		if (this.__isVerticalOrientation) {
			var thumbX = this.currentWidth() - thumbThickness - padding;
			this.measureView1(this.__thumbView, thumbX, this.__thumbLocation, thumbThickness, this.__thumbLength, opacity);
			this.measureView1(this.__borderView, thumbX - padding - scrollbarThickness, 0, scrollbarThickness, this.currentHeight(), borderOpacity);
		} else {
			var thumbY = this.currentHeight() - thumbThickness - padding;
			this.measureView1(this.__thumbView, this.__thumbLocation, thumbY, this.__thumbLength, thumbThickness, opacity);
			this.measureView1(this.__borderView, 0, thumbY - scrollbarThickness - padding, this.currentWidth(), scrollbarThickness, borderOpacity);
		}
		this.__thumbView._thumbLocation = this.__thumbLocation;
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::UpdateScrollBar(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarView::HandlesUIInteraction()" />*/
	,
	__supportsTouch: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollBarView::SupportsTouch()" />*/
	supportsTouch: function (value) {
		if (arguments.length === 1) {
			this.__supportsTouch = value;
			if (this.__thumbView != null) {
				this.__thumbView.supportsTouch(this.__supportsTouch);
			}
			return value;
		} else {
			return this.__supportsTouch;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollBarView::SupportsTouch()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	handleMouseEnter: function (x, y) {
		this.__isScrollDirty = !this._useLargeThumb;
		this._useLargeThumb = true;
		this.__canHide = false;
		this.animateUpdateScrollBar(this.__currentOffset, this.__currentViewportSize, this.__contentSize, false);
		$.ig.CPView.prototype.handleMouseEnter.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	handleMouseLeave: function (x, y) {
		this.__canHide = true;
		this.hideThumb();
		$.ig.CPView.prototype.handleMouseLeave.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	,
	__isScrollDirty: false,
	/*<BeginMethod Name="System.Void Infragistics.CPScrollBarView::HideThumb()" />*/
	hideThumb: function () {
		if (!this.__thumbView.isMouseDown() && this.__canHide) {
			this.__isScrollDirty = this._useLargeThumb;
			this._useLargeThumb = false;
			this.animateUpdateScrollBar(this.__currentOffset, this.__currentViewportSize, this.__contentSize, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPScrollBarView::HideThumb()" />*/
	,
	__mouseDownScrollDirection: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleMouseDown: function (x, y, quietly) {
		return this.handleDown(x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		if (this.supportsTouch()) {
			return this.handleDown(x, y, quietly);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleDown: function (x, y, quietly) {
		var $self = this;
		if (this._thumbMoved != null && this._useLargeThumb) {
			var mouseLocation = this.__isVerticalOrientation ? y : x;
			var scrollContentSize = this.__nativeViewportSize;
			if (mouseLocation < this.__thumbLocation) {
				scrollContentSize *= -1;
			}
			if (this.__mouseDownScrollDirection == 0) {
				this.__mouseDownScrollDirection = scrollContentSize < 0 ? -1 : 1;
			}
			if ((scrollContentSize < 0 && this.__mouseDownScrollDirection > 0) || (scrollContentSize > 0 && this.__mouseDownScrollDirection < 0)) {
				return true;
			}
			if (this.__mouseDownScrollDirection > 0 && mouseLocation < this.__thumbLocation + this.__thumbLength) {
				return true;
			}
			var updateOffset = Math.max(0, Math.min(this.__nativeContentSize - this.__nativeViewportSize, this.__nativeOffset + scrollContentSize));
			this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.notifyThumbMoved(false, updateOffset - $self._frontInset);
			}, function (finished) {
				if ($self.isMouseDown()) {
					$self.handlePointerDown(x, y, quietly);
				}
			});
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarView::HandleDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPScrollBarView::NotifyThumbMoved(System.Boolean, System.Int32)" />*/
	notifyThumbMoved: function (drag, location) {
		var percent = location / this.__nativeContentSize;
		location = $.ig.truncate((this.__contentSize * percent));
		this._thumbMoved(drag, location);
		return location;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPScrollBarView::NotifyThumbMoved(System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this.__mouseDownScrollDirection = 0;
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPScrollBarView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPScrollBarView" />*/

/*<BeginType Name="Infragistics.CPBucketViewScrollbar" />*/

$.ig.util.defType('CPBucketViewScrollbar', 'CPScrollBarView', {
	init: function () {
		$.ig.CPScrollBarView.prototype.init.call(this, false);
		this._alwaysVisible = true;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ScrollbarThickness()" />*/
	scrollbarThickness: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ScrollbarThickness()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbPadding()" />*/
	thumbPadding: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbSmallSize()" />*/
	thumbSmallSize: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbSmallSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbLargeSize()" />*/
	thumbLargeSize: function () {
		return this.currentHeight();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbLargeSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbLargeCornerRadius()" />*/
	thumbLargeCornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbLargeCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbSmallCornerRadius()" />*/
	thumbSmallCornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPBucketViewScrollbar::ThumbSmallCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPBucketViewScrollbar::ThumbColor()" />*/
	thumbColor: function () {
		return $.ig.ThemeManager.prototype.theme().foregroundColorOverMainAtDisabled().$native();
	}
	/*<EndProperty Name="System.String Infragistics.CPBucketViewScrollbar::ThumbColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPBucketViewScrollbar::BarColor()" />*/
	barColor: function () {
		return $.ig.ThemeManager.prototype.theme().foregroundColorOverMainAtDisabled().$native();
	}
	/*<EndProperty Name="System.String Infragistics.CPBucketViewScrollbar::BarColor()" />*/
	,
	$type: new $.ig.Type('CPBucketViewScrollbar', $.ig.CPScrollBarView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPBucketViewScrollbar" />*/

/*<BeginType Name="Infragistics.CPIconButton" />*/

$.ig.util.defType('CPIconButton', 'CPInteractionView', {
	__icon: null,
	__dropDown: null,
	_tagInfo: 0,
	_tagData: null,
	__buttonSizingGuide: null,
	__isDropDown: false,
	__buttonStyle: 0,
	__backgroundDisplayView: null,
	__buttonBorderView: null,
	__softNotification: null,
	__badgeView: null,
	__badgeLabel: null,
	init: function (initNumber, buttonSizingGuide, style) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__buttonSizingGuide = buttonSizingGuide;
		this.__isDropDown = false;
		this.__buttonStyle = style;
		this.applyButtonStyling();
	},
	init1: function (initNumber, buttonSizingGuide, style, isDropDown) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__buttonSizingGuide = buttonSizingGuide;
		this.__isDropDown = isDropDown;
		this.__buttonStyle = style;
		this.applyButtonStyling();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::Setup()" />*/
	setup: function () {
		$.ig.CPInteractionView.prototype.setup.call(this);
		this.overrideLabelEdgePadding(-1);
		this.overrideIconEdgePadding(-1);
		this.overrideHInset(-1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplyButtonStyling()" />*/
	applyButtonStyling: function () {
		this.restOpacity($.ig.ThemeManager.prototype.theme().restOpacity());
		if (this.__icon != null) {
			this.removeSubview(this.__icon);
		}
		if (this.__buttonBorderView != null) {
			this.removeSubview(this.__buttonBorderView);
		}
		if (this.__backgroundDisplayView != null) {
			this.removeSubview(this.__backgroundDisplayView);
		}
		var newIcon = this.createIconView();
		if (this.__icon != null) {
			newIcon.shouldSteaFocusFromTextEditors(this.__icon.shouldSteaFocusFromTextEditors());
			newIcon._outlineOnly = this.__icon._outlineOnly;
		}
		this.__icon = newIcon;
		if (this.__pathIcon != null) {
			this.setIcon(this.__pathIcon);
		}
		this.canTakeControlOfMouseCursor(false);
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.standard) {
			this.canTakeControlOfMouseCursor(true);
			this.setColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.minimal) {
			this.setColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.bordered) {
			this.__buttonBorderView = new $.ig.CPView();
			this.__buttonBorderView.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
			this.__buttonBorderView.shouldSteaFocusFromTextEditors(this.shouldSteaFocusFromTextEditors());
			this.addSubview(this.__buttonBorderView);
			this.setColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accent || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) {
			this.restOpacity(1);
			this.__backgroundDisplayView = new $.ig.CPView();
			this.__backgroundDisplayView.shouldSteaFocusFromTextEditors(this.shouldSteaFocusFromTextEditors());
			this.setAccentColor($.ig.ThemeManager.prototype.theme().accentColor());
			this.addSubview(this.__backgroundDisplayView);
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			this.restOpacity(1);
			this.setAccentColor(new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().accentColorTextOnly().color()));
			this.applyRestColor();
		}
		this.ensureHighlightBGView();
		this.addSubview(this.__icon);
		this.supportsInteractionOpacity(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplyButtonStyling()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ChangeButtonStyle(Infragistics.CPIconButtonStyle)" />*/
	changeButtonStyle: function (style) {
		if (this.__buttonStyle != style) {
			this.__buttonStyle = style;
			this.applyButtonStyling();
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ChangeButtonStyle(Infragistics.CPIconButtonStyle)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPIconButtonStyle Infragistics.CPIconButton::ButtonStyle()" />*/
	buttonStyle: function () {
		return this.__buttonStyle;
	}
	/*<EndProperty Name="Infragistics.CPIconButtonStyle Infragistics.CPIconButton::ButtonStyle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		$.ig.CPInteractionView.prototype.applyInteractionColorSet.call(this, colorSet);
		if (colorSet != null) {
			this.setColor(colorSet.foreground().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	applySelectedState: function (color) {
		$.ig.CPInteractionView.prototype.applySelectedState.call(this, color);
		this.setColor1(color.selectedForeground().$native(), true);
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ClearSelectedState()" />*/
	clearSelectedState: function () {
		$.ig.CPInteractionView.prototype.clearSelectedState.call(this);
		this.setColor1(this.__currentColor, true);
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ClearSelectedState()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPIconButton::AccentColor()" />*/
	accentColor: function () {
		return this.__accent;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPIconButton::AccentColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetOverrideBackgroundColor(System.String)" />*/
	setOverrideBackgroundColor: function (color) {
		$.ig.CPInteractionView.prototype.setBackgroundColor.call(this, color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetOverrideBackgroundColor(System.String)" />*/
	,
	__accent: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetAccentColor(Infragistics.CPThemeColorSet)" />*/
	setAccentColor: function (accent) {
		this.__accent = accent.copy();
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accent || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) {
			if (this.__backgroundDisplayView != null) {
				this.__backgroundDisplayView.setBackgroundColor(accent.$native());
			}
			this.setColor(accent.foreground().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetAccentColor(Infragistics.CPThemeColorSet)" />*/
	,
	_useStandardPressedAndHoverWhenAccent: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::UseStandardPressedAndHoverWhenAccent()" />*/
	useStandardPressedAndHoverWhenAccent: function (value) {
		if (arguments.length === 1) {
			this._useStandardPressedAndHoverWhenAccent = value;
			return value;
		} else {
			return this._useStandardPressedAndHoverWhenAccent;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::UseStandardPressedAndHoverWhenAccent()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPIconButton::BackgroundPressedColor()" />*/
	backgroundPressedColor: function () {
		if ((this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accent || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) && !this.useStandardPressedAndHoverWhenAccent()) {
			return this.__accent.pressed();
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.bordered || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.minimal || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			return $.ig.CPTheme.prototype.clearColor();
		}
		return $.ig.CPInteractionView.prototype.backgroundPressedColor.call(this);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPIconButton::BackgroundPressedColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPIconButton::BackgroundHoverColor()" />*/
	backgroundHoverColor: function () {
		if ((this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accent || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) && !this.useStandardPressedAndHoverWhenAccent()) {
			return this.__accent.hover();
		} else if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.bordered || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.minimal || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			return $.ig.CPTheme.prototype.clearColor();
		}
		return $.ig.CPInteractionView.prototype.backgroundHoverColor.call(this);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPIconButton::BackgroundHoverColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplyHoverColor()" />*/
	applyHoverColor: function () {
		$.ig.CPInteractionView.prototype.applyHoverColor.call(this);
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			this.setColor(this.__accent.actualHoverColor().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplyHoverColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplyPressedColor()" />*/
	applyPressedColor: function () {
		$.ig.CPInteractionView.prototype.applyPressedColor.call(this);
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			this.setColor(this.__accent.actualPressedColor().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplyPressedColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ApplyRestColor()" />*/
	applyRestColor: function () {
		$.ig.CPInteractionView.prototype.applyRestColor.call(this);
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			this.setColor(this.__accent.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ApplyRestColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIconButton::PressedOpacity()" />*/
	pressedOpacity: function () {
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.bordered) {
			return $.ig.ThemeManager.prototype.theme().pressedOutlineOpacity();
		}
		return $.ig.CPInteractionView.prototype.pressedOpacity.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconButton::PressedOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetDropDownIcon(Infragistics.PathIcon)" />*/
	setDropDownIcon: function (icon) {
		this.ensureDropDown();
		this.__dropDown.setIcon(icon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetDropDownIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPIconButton::DropDown()" />*/
	dropDown: function () {
		return this.__dropDown;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPIconButton::DropDown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::EnsureDropDown()" />*/
	ensureDropDown: function () {
		if (this.__isDropDown) {
			if (this.__dropDown == null) {
				this.__dropDown = new $.ig.PathIconView();
				this.__dropDown.setIcon($.ig.UIPathIcons.prototype.icons().getChevronDownIcon());
				this.__dropDown.iconColor(this.__icon.iconColor());
				this.addSubview(this.__dropDown);
			}
			this.__dropDown.isHidden(false);
		} else {
			if (this.__dropDown != null) {
				this.__dropDown.isHidden(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::EnsureDropDown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ShowDropDownButton()" />*/
	showDropDownButton: function () {
		if (!this.__isDropDown) {
			this.__isDropDown = true;
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ShowDropDownButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::HideDropDownButton()" />*/
	hideDropDownButton: function () {
		if (this.__isDropDown) {
			this.__isDropDown = false;
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::HideDropDownButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ShowSoftNotification()" />*/
	showSoftNotification: function () {
		if (this.__softNotification == null) {
			this.__softNotification = new $.ig.CPCircleView();
			this.__softNotification.isHidden(true);
			this.__softNotification.setBackgroundColor($.ig.ThemeManager.prototype.theme().notificationColor().$native());
			this.addSubview(this.__softNotification);
		}
		if (this.__softNotification.isHidden()) {
			this.__softNotification.isHidden(false);
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ShowSoftNotification()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::HideSoftNotofication()" />*/
	hideSoftNotofication: function () {
		if (this.__softNotification != null && !this.__softNotification.isHidden()) {
			this.__softNotification.isHidden(true);
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::HideSoftNotofication()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::HasSoftNotification()" />*/
	hasSoftNotification: function () {
		return (this.__softNotification != null && !this.__softNotification.isHidden());
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::HasSoftNotification()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPCircleView Infragistics.CPIconButton::SoftNotificationView()" />*/
	softNotificationView: function () {
		return this.__softNotification;
	}
	/*<EndProperty Name="Infragistics.CPCircleView Infragistics.CPIconButton::SoftNotificationView()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::SoftNotificationSize()" />*/
	softNotificationSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(6);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::SoftNotificationSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::SoftNotificationSpacing()" />*/
	softNotificationSpacing: function () {
		return $.ig.ThemeManager.prototype.theme().padding3();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::SoftNotificationSpacing()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPIconButton::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPInteractionView.prototype.getSupportedKeyCommands.call(this);
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
			$self.triggerClick();
		}));
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.space), function (k) {
			$self.triggerClick();
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPIconButton::GetSupportedKeyCommands()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPButtonLayoutGuide Infragistics.CPIconButton::SizingGuide()" />*/
	sizingGuide: function () {
		return $.ig.ThemeManager.prototype.theme().resolveButtonGuide(this.__buttonSizingGuide);
	}
	/*<EndProperty Name="Infragistics.CPButtonLayoutGuide Infragistics.CPIconButton::SizingGuide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::ChangeSizingGuide(System.String)" />*/
	changeSizingGuide: function (sizingGuide) {
		this.__buttonSizingGuide = sizingGuide;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::ChangeSizingGuide(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::ShouldSteaFocusFromTextEditors()" />*/
	shouldSteaFocusFromTextEditors: function (value) {
		if (arguments.length === 1) {
			$.ig.CPInteractionView.prototype.shouldSteaFocusFromTextEditors.call(this, value);
			this.__icon.shouldSteaFocusFromTextEditors(value);
			if (this.__backgroundDisplayView != null) {
				this.__backgroundDisplayView.shouldSteaFocusFromTextEditors(value);
			}
			if (this.__buttonBorderView != null) {
				this.__buttonBorderView.shouldSteaFocusFromTextEditors(value);
			}
			return value;
		} else {
			return $.ig.CPInteractionView.prototype.shouldSteaFocusFromTextEditors.call(this);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::ShouldSteaFocusFromTextEditors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetIconRotation(System.Single, System.Boolean)" />*/
	setIconRotation: function (degrees, animate) {
		if (this.__icon != null) {
			this.__icon.setRotation(degrees, animate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetIconRotation(System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIconView Infragistics.CPIconButton::CreateIconView()" />*/
	createIconView: function () {
		var iv = new $.ig.PathIconView();
		iv._outlineOnly = false;
		iv.iconColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		return iv;
	}
	/*<EndMethod Name="Infragistics.PathIconView Infragistics.CPIconButton::CreateIconView()" />*/
	,
	__currentColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetColor(System.String)" />*/
	setColor: function (color) {
		this.setColor1(color, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetColor(System.String, System.Boolean)" />*/
	setColor1: function (color, quietly) {
		if (!quietly) {
			this.__currentColor = color;
		}
		this.__icon.iconColor(color);
		if (this.__buttonBorderView != null) {
			this.__buttonBorderView.setBorderColor(color);
		}
		if (this.__dropDown != null) {
			this.__dropDown.iconColor(color);
		}
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetColor(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetIconColor(System.String)" />*/
	setIconColor: function (color) {
		this.__icon.iconColor(color);
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetIconColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPIconButton::GetColor()" />*/
	getColor: function () {
		return this.__icon.iconColor();
	}
	/*<EndMethod Name="System.String Infragistics.CPIconButton::GetColor()" />*/
	,
	__pathIcon: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetIcon(Infragistics.PathIcon)" />*/
	setIcon: function (icon) {
		this.__pathIcon = icon;
		this.__icon.setIcon(this.__pathIcon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetRotation(System.Single, System.Boolean)" />*/
	setRotation: function (degrees, animate) {
		this.__icon.setRotation(degrees, animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetRotation(System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetIconAccessibilityName(System.String)" />*/
	setIconAccessibilityName: function (accessibilityName) {
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__icon, accessibilityName);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetIconAccessibilityName(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::Update()" />*/
	update: function () {
		this.__icon.render1(false);
		if (this.__dropDown != null) {
			this.__dropDown.render1(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::Update()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetOutlineOnly(System.Boolean)" />*/
	setOutlineOnly: function (outlineOnly) {
		this.__icon._outlineOnly = outlineOnly;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetOutlineOnly(System.Boolean)" />*/
	,
	_restOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPIconButton::RestOpacity()" />*/
	restOpacity: function (value) {
		if (arguments.length === 1) {
			this._restOpacity = value;
			return value;
		} else {
			return this._restOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconButton::RestOpacity()" />*/
	,
	_overrideIconWhiteSpace: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::OverrideIconWhiteSpace()" />*/
	overrideIconWhiteSpace: function (value) {
		if (arguments.length === 1) {
			this._overrideIconWhiteSpace = value;
			return value;
		} else {
			return this._overrideIconWhiteSpace;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::OverrideIconWhiteSpace()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.ThemeManager.prototype.theme().applyCornerRadiusToButton(this, h);
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		this.ensureDropDown();
		this.layoutButton(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconButton::ResolveIconWhiteSpace()" />*/
	resolveIconWhiteSpace: function () {
		if (this.overrideIconWhiteSpace() == 0) {
			return this.sizingGuide().iconWhiteSpace();
		}
		return this.overrideIconWhiteSpace();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconButton::ResolveIconWhiteSpace()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::LayoutButton(System.Int32, System.Int32)" />*/
	layoutButton: function (w, h) {
		var iconSize = this.iconSize();
		var totalWidth = iconSize;
		var iconWhiteSpace = this.resolveIconWhiteSpace();
		if (this.__isDropDown) {
			totalWidth += this.dropDownSize() - iconWhiteSpace;
		}
		var x = $.ig.intDivide(this.iconOnlyLeftEdgePadding(), 2) + $.ig.intDivide(w, 2) - $.ig.intDivide(totalWidth, 2);
		this.layoutIcon(x, h);
		x += iconSize - iconWhiteSpace;
		if (this.__isDropDown) {
			this.layoutDropDown(x, $.ig.intDivide(h, 2) - $.ig.intDivide(this.dropDownSize(), 2), h);
			x += this.dropDownSize();
		}
		if (this.softIndicatorShouldBeOnRight()) {
			this.layoutSoftNotification(x, h);
		} else {
			this.layoutSoftNotification(this.iconOnlyLeftEdgePadding(), h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::LayoutButton(System.Int32, System.Int32)" />*/
	,
	_softIndicatorShouldBeOnRight: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::SoftIndicatorShouldBeOnRight()" />*/
	softIndicatorShouldBeOnRight: function (value) {
		if (arguments.length === 1) {
			this._softIndicatorShouldBeOnRight = value;
			return value;
		} else {
			return this._softIndicatorShouldBeOnRight;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::SoftIndicatorShouldBeOnRight()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPIconButton::IconToLayout()" />*/
	iconToLayout: function () {
		return this.__icon;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPIconButton::IconToLayout()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIconButton::IconOpacity()" />*/
	iconOpacity: function () {
		return this.resolveOpacity(this.restOpacity(), true);
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconButton::IconOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::LayoutIcon(System.Int32, System.Int32)" />*/
	layoutIcon: function (x, h) {
		var iconSize = this.iconSize();
		var y = $.ig.intDivide(h, 2) - $.ig.intDivide(iconSize, 2);
		this.measureIcon(x, y, iconSize, iconSize, this.iconOpacity());
		if (this.__badgeView != null && !this.__badgeView.isHidden()) {
			this.__badgeLabel.calculateSizeToFit();
			var blw = this.__badgeLabel.getCalculatedWidth();
			var blh = this.__badgeLabel.getCalculatedHeight();
			var bh = $.ig.ThemeManager.prototype.theme().badgeSize();
			var bw = Math.max(blw + $.ig.ThemeManager.prototype.theme().padding3(), bh);
			this.__badgeView.setCornerRadius(bh / 2);
			this.measureView1(this.__badgeView, x + iconSize - bw, y + iconSize - bh, bw, bh, 1);
			this.__badgeView.measureView1(this.__badgeLabel, $.ig.intDivide(bw, 2) - $.ig.intDivide(blw, 2), $.ig.intDivide(bh, 2) - $.ig.intDivide(blh, 2), blw, blh, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::LayoutIcon(System.Int32, System.Int32)" />*/
	,
	_iconVerticalOffsetPercent: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPIconButton::IconVerticalOffsetPercent()" />*/
	iconVerticalOffsetPercent: function (value) {
		if (arguments.length === 1) {
			this._iconVerticalOffsetPercent = value;
			return value;
		} else {
			return this._iconVerticalOffsetPercent;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconButton::IconVerticalOffsetPercent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::MeasureIcon(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureIcon: function (x, y, w, h, o) {
		if (this.iconVerticalOffsetPercent() != 0) {
			y += $.ig.truncate((h * this.iconVerticalOffsetPercent()));
		}
		this.measureView1(this.iconToLayout(), x, y, w, h, o);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::MeasureIcon(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::LayoutDropDown(System.Int32, System.Int32, System.Int32)" />*/
	layoutDropDown: function (x, y, h) {
		var size = this.dropDownSize();
		this.measureView1(this.__dropDown, x, y, size, size, this.resolveOpacity(this.restOpacity(), true));
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::LayoutDropDown(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::LayoutSoftNotification(System.Int32, System.Int32)" />*/
	layoutSoftNotification: function (x, h) {
		if (this.__softNotification != null && !this.__softNotification.isHidden()) {
			var size = this.softNotificationSize();
			this.measureView1(this.__softNotification, x + this.softNotificationSpacing(), $.ig.intDivide(h, 2) - $.ig.intDivide(size, 2), size, size, this.resolveOpacity(1, false));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::LayoutSoftNotification(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIconButton::BackgroundDisplayViewOpacity()" />*/
	backgroundDisplayViewOpacity: function () {
		return ((this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accent || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) ? this.resolveOpacity(this.restOpacity(), true) : this.resolveOpacity(1, false));
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconButton::BackgroundDisplayViewOpacity()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconButton::ResolveShadowAndBackgroundHeight(System.Int32)" />*/
	resolveShadowAndBackgroundHeight: function (h) {
		return this.sizingGuide().size() - this.sizingGuide().inset();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconButton::ResolveShadowAndBackgroundHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	measureHighlightBackgroundView: function (view, w, h) {
		var sw = Math.max(0, w - this.hInset());
		var sh = Math.max(0, this.resolveShadowAndBackgroundHeight(h));
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.accentSmall) {
			var offset = $.ig.truncate((this.hInset() * 1.5));
			sw -= offset;
			sh -= offset;
		}
		$.ig.ThemeManager.prototype.theme().applyCornerRadiusToButton(view, sh);
		this.measureView1(view, $.ig.intDivide(w, 2) - $.ig.intDivide(sw, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), sw, sh, 1);
		if (this.__buttonBorderView != null) {
			$.ig.ThemeManager.prototype.theme().applyCornerRadiusToButton(this.__buttonBorderView, sh);
			this.measureView1(this.__buttonBorderView, $.ig.intDivide(w, 2) - $.ig.intDivide(sw, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), sw, sh, this.resolveOpacity(this.restOpacity(), true));
		}
		if (this.__backgroundDisplayView != null) {
			$.ig.ThemeManager.prototype.theme().applyCornerRadiusToButton(this.__backgroundDisplayView, sh);
			this.measureView1(this.__backgroundDisplayView, $.ig.intDivide(w, 2) - $.ig.intDivide(sw, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), sw, sh, this.backgroundDisplayViewOpacity());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPIconButton::ShadowView()" />*/
	shadowView: function () {
		if (this.__backgroundDisplayView != null) {
			return this.__backgroundDisplayView;
		}
		if (this.__buttonBorderView != null) {
			return this.__buttonBorderView;
		}
		return null;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPIconButton::ShadowView()" />*/
	,
	_overrideHInset: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::OverrideHInset()" />*/
	overrideHInset: function (value) {
		if (arguments.length === 1) {
			this._overrideHInset = value;
			return value;
		} else {
			return this._overrideHInset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::OverrideHInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::HInset()" />*/
	hInset: function () {
		if (this.overrideHInset() >= 0) {
			return this.overrideHInset();
		}
		return this.sizingGuide().inset();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::HInset()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconButton::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		if (this.__isDropDown) {
			return this.sizingGuide().size() + this.dropDownSize() + this.totalSoftNotificationSize();
		}
		return this.sizingGuide().size() + this.iconOnlyLeftEdgePadding() + this.totalSoftNotificationSize();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconButton::GetCalculatedWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::TotalSoftNotificationSize()" />*/
	totalSoftNotificationSize: function () {
		if (this.__softNotification != null && !this.__softNotification.isHidden()) {
			return this.softNotificationSize() + this.softNotificationSpacing();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::TotalSoftNotificationSize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconButton::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.sizingGuide().size();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconButton::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::Unload()" />*/
	unload: function () {
		$.ig.CPInteractionView.prototype.unload.call(this);
		if (this.__icon != null) {
			this.__icon.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::Unload()" />*/
	,
	/*<BeginProperty Name="Infragistics.PathIconView Infragistics.CPIconButton::IconView()" />*/
	iconView: function () {
		return this.__icon;
	}
	/*<EndProperty Name="Infragistics.PathIconView Infragistics.CPIconButton::IconView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::HasIcon()" />*/
	hasIcon: function () {
		return this.__icon._hasIcon;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::HasIcon()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::HasDropDown()" />*/
	hasDropDown: function () {
		return this.__isDropDown;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::HasDropDown()" />*/
	,
	_overrideDropDownSize: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::OverrideDropDownSize()" />*/
	overrideDropDownSize: function (value) {
		if (arguments.length === 1) {
			this._overrideDropDownSize = value;
			return value;
		} else {
			return this._overrideDropDownSize;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::OverrideDropDownSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::DropDownSize()" />*/
	dropDownSize: function () {
		if (this.overrideDropDownSize() > 0) {
			return this.overrideDropDownSize();
		}
		return this.sizingGuide().dropDownSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::DropDownSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::IconSize()" />*/
	iconSize: function () {
		return this.sizingGuide().iconSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::IconSize()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconButton::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconButton::SupportsHighlightBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::IconEdgePadding()" />*/
	iconEdgePadding: function () {
		if (this.overrideIconEdgePadding() >= 0) {
			return this.overrideIconEdgePadding();
		}
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.minimal || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			return 0;
		}
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.standard) {
			return this.sizingGuide().iconEdgePadding();
		}
		return this.sizingGuide().largeIconEdgePadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::IconEdgePadding()" />*/
	,
	_overrideIconEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::OverrideIconEdgePadding()" />*/
	overrideIconEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._overrideIconEdgePadding = value;
			return value;
		} else {
			return this._overrideIconEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::OverrideIconEdgePadding()" />*/
	,
	_overrideLabelEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::OverrideLabelEdgePadding()" />*/
	overrideLabelEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._overrideLabelEdgePadding = value;
			return value;
		} else {
			return this._overrideLabelEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::OverrideLabelEdgePadding()" />*/
	,
	_iconOnlyLeftEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::IconOnlyLeftEdgePadding()" />*/
	iconOnlyLeftEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._iconOnlyLeftEdgePadding = value;
			return value;
		} else {
			return this._iconOnlyLeftEdgePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::IconOnlyLeftEdgePadding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::SetBadgeValue(System.Int32)" />*/
	setBadgeValue: function (value) {
		if (value == 0) {
			this.hideBadge();
		} else {
			if (this.__badgeView == null) {
				this.__badgeView = new $.ig.CPView();
				this.__badgeView.setBackgroundColor($.ig.ThemeManager.prototype.theme().notificationColor().$native());
				this.addSubview(this.__badgeView);
				this.__badgeLabel = new $.ig.CPLabel();
				this.__badgeLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeSubSecondary(), $.ig.ThemeManager.prototype.theme().boldFont());
				this.__badgeLabel.setTextColor($.ig.ThemeManager.prototype.theme().notificationColor().foreground().$native());
				this.__badgeView.addSubview(this.__badgeLabel);
			} else {
				this.__badgeView.isHidden(false);
				this.__badgeLabel.isHidden(false);
			}
			this.__badgeLabel.setText(value.toString());
			$.ig.UIUtility.prototype.setAccessibilityName(this.__badgeLabel, "badgeLabel");
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::SetBadgeValue(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::HideBadge()" />*/
	hideBadge: function () {
		if (this.__badgeView != null) {
			this.__badgeView.isHidden(true);
			this.__badgeLabel.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::HideBadge()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconButton::LabelEdgePadding()" />*/
	labelEdgePadding: function () {
		if (this.overrideLabelEdgePadding() >= 0) {
			return this.overrideLabelEdgePadding();
		}
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.minimal || this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.link) {
			return 0;
		}
		if (this.__buttonStyle == $.ig.CPIconButtonStyle.prototype.standard) {
			return this.sizingGuide().labelEdgePadding();
		}
		return this.sizingGuide().largeLabelEdgePadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconButton::LabelEdgePadding()" />*/
	,
	__selfClickBlock: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::AddSelfReferenceClickHandler(Infragistics.ObjectBlock)" />*/
	addSelfReferenceClickHandler: function (selfClickBlock) {
		this.__selfClickBlock = selfClickBlock;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::AddSelfReferenceClickHandler(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconButton::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		if (this.__selfClickBlock != null) {
			this.__selfClickBlock(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconButton::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPIconButton::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.CPInteractionView.prototype.accessibilityName.call(this, value);
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__icon, value + "_icon");
			return value;
		} else {
			return $.ig.CPInteractionView.prototype.accessibilityName.call(this);
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPIconButton::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPIconButton', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIconButton" />*/

/*<BeginType Name="Infragistics.CPIconLabelButton" />*/

$.ig.util.defType('CPIconLabelButton', 'CPIconButton', {
	init: function (initNumber, buttonSizingGuide, style) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__hasText = false;
		$.ig.CPIconButton.prototype.init.call(this, 0, buttonSizingGuide, style);
	},
	init1: function (initNumber, buttonSizingGuide, style, isDropDown) {
		this.__hasText = false;
		$.ig.CPIconButton.prototype.init1.call(this, 1, buttonSizingGuide, style, isDropDown);
	},
	__label: null,
	__hasText: false,
	__font: null,
	/*<BeginProperty Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::Label()" />*/
	label: function () {
		return this.__label;
	}
	/*<EndProperty Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::Label()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconLabelButton::HasText()" />*/
	hasText: function () {
		return this.__hasText;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconLabelButton::HasText()" />*/
	,
	_isFixedWidth: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconLabelButton::IsFixedWidth()" />*/
	isFixedWidth: function (value) {
		if (arguments.length === 1) {
			this._isFixedWidth = value;
			return value;
		} else {
			return this._isFixedWidth;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconLabelButton::IsFixedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::Setup()" />*/
	setup: function () {
		$.ig.CPIconButton.prototype.setup.call(this);
		this.overrideIconLabelPadding(-1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::EnsureLabel()" />*/
	ensureLabel: function () {
		if (this.__hasText) {
			if (this.__label == null) {
				this.__label = this.createLabel();
			}
			this.__label.isHidden(false);
		} else {
			if (this.__label != null) {
				this.__label.isHidden(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::EnsureLabel()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::CreateLabel()" />*/
	createLabel: function () {
		var label = new $.ig.CPLabel();
		label.setTextColor(this.getColor());
		label.setFont(this.resolveFontSize(), this.resolveFont());
		label.setTextClipping(true);
		this.addSubview(label);
		return label;
	}
	/*<EndMethod Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::CreateLabel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::ApplyButtonStyling()" />*/
	applyButtonStyling: function () {
		$.ig.CPIconButton.prototype.applyButtonStyling.call(this);
		this.updateFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::ApplyButtonStyling()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPIconLabelButton::GetText()" />*/
	getText: function () {
		if (this.__hasText) {
			return this.__label.getText();
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPIconLabelButton::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetColor(System.String)" />*/
	setColor: function (color) {
		$.ig.CPIconButton.prototype.setColor.call(this, color);
		if (this.__hasText && this.__overrideLabelColor == null) {
			this.__label.setTextColor(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetText(System.String)" />*/
	setText: function (text) {
		this.__hasText = (text != null && text.length > 0);
		this.ensureLabel();
		if (this.__label != null) {
			this.__label.setText(text);
			if ((this.__label.accessibilityName() == null) || (this.__label.accessibilityName() == "")) {
				this.__label.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName1("label_", text));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetText(System.String)" />*/
	,
	__overrideFontSize: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetOverrideFontSize(System.Single)" />*/
	setOverrideFontSize: function (fontSize) {
		this.__overrideFontSize = fontSize;
		this.updateFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetOverrideFontSize(System.Single)" />*/
	,
	__overrideLabelColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetOverrideLabelColor(Infragistics.CPThemeColor)" />*/
	setOverrideLabelColor: function (color) {
		this.__overrideLabelColor = color;
		this.__label.setTextColor(this.__overrideLabelColor.$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetOverrideLabelColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetFont(System.String)" />*/
	setFont: function (font) {
		this.__font = font;
		this.updateFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetFont(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::UpdateFont()" />*/
	updateFont: function () {
		if (this.__label != null) {
			this.__label.setFont(this.resolveFontSize(), this.resolveFont());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::UpdateFont()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPIconLabelButton::ResolveFont()" />*/
	resolveFont: function () {
		if (this.__font != null) {
			return this.__font;
		}
		if (this.buttonStyle() == $.ig.CPIconButtonStyle.prototype.accent || this.buttonStyle() == $.ig.CPIconButtonStyle.prototype.accentSmall) {
			return this.sizingGuide().accentFont();
		}
		return this.sizingGuide().font();
	}
	/*<EndMethod Name="System.String Infragistics.CPIconLabelButton::ResolveFont()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CPIconLabelButton::ResolveFontSize()" />*/
	resolveFontSize: function () {
		if (this.__overrideFontSize > 0) {
			return this.__overrideFontSize;
		} else {
			return this.sizingGuide().fontSize();
		}
	}
	/*<EndMethod Name="System.Single Infragistics.CPIconLabelButton::ResolveFontSize()" />*/
	,
	_overrideIconLabelPadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::OverrideIconLabelPadding()" />*/
	overrideIconLabelPadding: function (value) {
		if (arguments.length === 1) {
			this._overrideIconLabelPadding = value;
			return value;
		} else {
			return this._overrideIconLabelPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::OverrideIconLabelPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::IconLabelPadding()" />*/
	iconLabelPadding: function () {
		if (this.overrideIconLabelPadding() >= 0) {
			return this.overrideIconLabelPadding();
		}
		return this.sizingGuide().iconLabelPadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::IconLabelPadding()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::LabelToLayout()" />*/
	labelToLayout: function () {
		return this.__label;
	}
	/*<EndProperty Name="Infragistics.CPLabel Infragistics.CPIconLabelButton::LabelToLayout()" />*/
	,
	__needsTooltip: false,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::LayoutButton(System.Int32, System.Int32)" />*/
	layoutButton: function (w, h) {
		if (this.__hasText) {
			var x = $.ig.intDivide(this.hInset(), 2);
			var calcWidth = this.actualCalculatedWidth();
			var label = this.labelToLayout();
			label.calculateSizeToFit();
			var lw = label.getCalculatedWidth();
			var lh = label.getCalculatedHeight();
			if (calcWidth == 0) {
				this.calculateSizeToFit();
				calcWidth = this.actualCalculatedWidth();
			}
			this.setNeedsTooltip(false);
			if (w != calcWidth) {
				var diff = w - calcWidth;
				var offset = $.ig.intDivide(diff, 2);
				if (offset > 0) {
					x += offset;
				} else {
					this.setNeedsTooltip(true);
					lw += diff;
				}
			}
			if (this.hasIcon()) {
				x += this.iconEdgePadding();
				this.layoutIcon(x, h);
				x += this.iconSize() + this.iconLabelPadding();
			} else {
				x += this.labelEdgePadding();
			}
			this.layoutLabel(x, $.ig.intDivide(h, 2) - $.ig.intDivide(lh, 2), w, h);
		} else {
			$.ig.CPIconButton.prototype.layoutButton.call(this, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::LayoutButton(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::LayoutLabel(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutLabel: function (x, y, w, h) {
		var label = this.labelToLayout();
		var lh = label.getCalculatedHeight();
		var lw = label.getCalculatedWidth();
		var rightSideSpacing = this.totalSoftNotificationSize();
		if (this.hasDropDown()) {
			rightSideSpacing += this.additionalDropDownIndicatorSpacing() + this.dropDownSize() + this.iconEdgePadding();
		} else {
			rightSideSpacing += this.labelEdgePadding();
		}
		var availW = w - (x + rightSideSpacing);
		if (lw > availW) {
			lw = availW;
		}
		this.labelLeft(x);
		this.labelWidth(lw);
		this.measureView1(label, x, y, lw, lh, this.labelOpacity());
		x += lw;
		x = this.layoutAdditionalContent(x, h);
		if (this.hasDropDown()) {
			x += this.additionalDropDownIndicatorSpacing();
			this.layoutDropDown(x, y + ($.ig.intDivide(lh, 2) - $.ig.intDivide(this.dropDownSize(), 2)), h);
			x += this.dropDownSize();
		}
		this.layoutSoftNotification(x, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::LayoutLabel(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	_labelLeft: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::LabelLeft()" />*/
	labelLeft: function (value) {
		if (arguments.length === 1) {
			this._labelLeft = value;
			return value;
		} else {
			return this._labelLeft;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::LabelLeft()" />*/
	,
	_labelWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::LabelWidth()" />*/
	labelWidth: function (value) {
		if (arguments.length === 1) {
			this._labelWidth = value;
			return value;
		} else {
			return this._labelWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::LabelWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetNeedsTooltip(System.Boolean)" />*/
	setNeedsTooltip: function (val) {
		this.__needsTooltip = val;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetNeedsTooltip(System.Boolean)" />*/
	,
	_overrideLabelOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPIconLabelButton::OverrideLabelOpacity()" />*/
	overrideLabelOpacity: function (value) {
		if (arguments.length === 1) {
			this._overrideLabelOpacity = value;
			return value;
		} else {
			return this._overrideLabelOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconLabelButton::OverrideLabelOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIconLabelButton::LabelOpacity()" />*/
	labelOpacity: function () {
		if (this.overrideLabelOpacity() > 0) {
			return this.overrideLabelOpacity();
		}
		return this.resolveOpacity(this.restOpacity(), true);
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconLabelButton::LabelOpacity()" />*/
	,
	_overrideIconOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPIconLabelButton::OverrideIconOpacity()" />*/
	overrideIconOpacity: function (value) {
		if (arguments.length === 1) {
			this._overrideIconOpacity = value;
			return value;
		} else {
			return this._overrideIconOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconLabelButton::OverrideIconOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIconLabelButton::IconOpacity()" />*/
	iconOpacity: function () {
		if (this.overrideIconOpacity() > 0) {
			return this.overrideIconOpacity();
		}
		return $.ig.CPIconButton.prototype.iconOpacity.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPIconLabelButton::IconOpacity()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelButton::LayoutAdditionalContent(System.Int32, System.Int32)" />*/
	layoutAdditionalContent: function (x, h) {
		if (this.__countLabel != null) {
			x += this.iconLabelPadding();
			this.__countLabel.calculateSizeToFit();
			var acW = this.__countLabel.getCalculatedWidth();
			var acH = this.__countLabel.getCalculatedHeight();
			this.measureView1(this.__countLabel, x, $.ig.intDivide(h, 2) - $.ig.intDivide(acH, 2), acW, acH, this.labelOpacity());
			x += acW;
		}
		return x;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelButton::LayoutAdditionalContent(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIconLabelButton::SupportsTooltips()" />*/
	supportsTooltips: function () {
		if (this.__needsTooltip) {
			return true;
		}
		return $.ig.CPIconButton.prototype.supportsTooltips.call(this);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIconLabelButton::SupportsTooltips()" />*/
	,
	_overrideIconSize: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::OverrideIconSize()" />*/
	overrideIconSize: function (value) {
		if (arguments.length === 1) {
			this._overrideIconSize = value;
			return value;
		} else {
			return this._overrideIconSize;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::OverrideIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::IconSize()" />*/
	iconSize: function () {
		if (this.overrideIconSize() > 0) {
			return this.overrideIconSize();
		}
		if (this.buttonStyle() == $.ig.CPIconButtonStyle.prototype.accent || this.buttonStyle() == $.ig.CPIconButtonStyle.prototype.accentSmall || this.buttonStyle() == $.ig.CPIconButtonStyle.prototype.bordered) {
			return this.sizingGuide().accentIconSize();
		}
		return $.ig.CPIconButton.prototype.iconSize.call(this);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::IconSize()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPIconLabelButton::ResolveTooltipContent()" />*/
	resolveTooltipContent: function () {
		if ($.ig.CPIconButton.prototype.supportsTooltips.call(this)) {
			return $.ig.CPIconButton.prototype.resolveTooltipContent.call(this);
		} else if (this.__needsTooltip) {
			var text = this.__label.getText();
			return new $.ig.CPLabelTooltip(0, text, null, null);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPIconLabelButton::ResolveTooltipContent()" />*/
	,
	__calcBw: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPIconButton.prototype.calculateSizeToFit.call(this);
		this.__calcBw = 0;
		if (this.__hasText) {
			var label = this.labelToLayout();
			label.calculateSizeToFit();
			this.__calcBw = label.getCalculatedWidth();
			this.__calcBw += this.hInset();
			if (this.hasIcon()) {
				this.__calcBw += this.iconEdgePadding();
				this.__calcBw += this.iconSize();
				this.__calcBw += this.iconLabelPadding();
			} else {
				this.__calcBw += this.labelEdgePadding();
			}
			if (this.hasDropDown()) {
				this.__calcBw += this.additionalDropDownIndicatorSpacing();
				this.__calcBw += this.dropDownSize();
				this.__calcBw += this.iconEdgePadding();
			} else {
				this.__calcBw += this.labelEdgePadding();
			}
			this.__calcBw += this.totalSoftNotificationSize();
		} else {
			this.__calcBw = this.calcWidth() + this.totalSoftNotificationSize();
		}
		if (this.__countLabel != null) {
			this.__countLabel.calculateSizeToFit();
			this.__calcBw += this.__countLabel.getCalculatedWidth() + this.iconLabelPadding();
		}
		this.__calcBw = this.ensureCalcW(this.__calcBw);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelButton::EnsureCalcW(System.Int32)" />*/
	ensureCalcW: function (calw) {
		return this.__calcBw;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelButton::EnsureCalcW(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::AdditionalDropDownIndicatorSpacing()" />*/
	additionalDropDownIndicatorSpacing: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::AdditionalDropDownIndicatorSpacing()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelButton::CalcWidth()" />*/
	calcWidth: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelButton::CalcWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIconLabelButton::ActualCalculatedWidth()" />*/
	actualCalculatedWidth: function () {
		if (this.__hasText && this.isFixedWidth()) {
			return this.__calcBw;
		}
		return this.getCalculatedWidth();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIconLabelButton::ActualCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelButton::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		if (this.__hasText) {
			if (this.isFixedWidth()) {
				return Math.max($.ig.ThemeManager.prototype.theme().fixedButtonWidth(), this.__calcBw);
			}
			return this.__calcBw;
		} else {
			if (this.__calcBw > 0) {
				return this.__calcBw;
			}
			return $.ig.CPIconButton.prototype.getCalculatedWidth.call(this);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelButton::GetCalculatedWidth()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPIconLabelButton::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.CPIconButton.prototype.accessibilityName.call(this, value);
			if (this.__label != null) {
				this.__label.accessibilityName("label_" + value);
			}
			return value;
		} else {
			return $.ig.CPIconButton.prototype.accessibilityName.call(this);
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPIconLabelButton::AccessibilityName()" />*/
	,
	_additionalContentSpacing: 0,
	__countLabel: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelButton::SetAdornerCount(System.Int32)" />*/
	setAdornerCount: function (count) {
		if (count < 0) {
			if (this.__countLabel != null) {
				this.removeSubview(this.__countLabel);
				this.__countLabel = null;
				this.triggerSizeChanged();
			}
		} else {
			if (this.__countLabel == null) {
				this.__countLabel = new $.ig.CPLabel();
				this.__countLabel.setFont($.ig.ThemeManager.prototype.theme().resolveStepDownFontSize(this.sizingGuide().fontSize()), $.ig.ThemeManager.prototype.theme().regularFont());
				this.addSubview(this.__countLabel);
			}
			this.__countLabel.setText(count.toString());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelButton::SetAdornerCount(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPIconLabelButton', $.ig.CPIconButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIconLabelButton" />*/

/*<BeginType Name="Infragistics.CPCheckBox" />*/

$.ig.util.defType('CPCheckBox', 'CPIconLabelButton', {
	_isRadioButton: false,
	__checkedState: 0,
	__isCheckedChangedBlock: null,
	__checkedIconView: null,
	init: function (initNumber, itemGuideStyle, checkedStateChangedBlock) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPCheckBox.prototype.init1.call(this, 1, itemGuideStyle);
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "check_box_button_" + $.ig.CPCheckBox.prototype.resolveCheckedStateString(this.__checkedState));
		this.__isCheckedChangedBlock = checkedStateChangedBlock;
	},
	init1: function (initNumber, itemGuideStyle) {
		$.ig.CPIconLabelButton.prototype.init.call(this, 0, itemGuideStyle, $.ig.CPIconButtonStyle.prototype.standard);
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "check_box_button_radio_" + $.ig.CPCheckBox.prototype.resolveCheckedStateString(this.__checkedState));
		this._isRadioButton = false;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::Setup()" />*/
	setup: function () {
		$.ig.CPIconLabelButton.prototype.setup.call(this);
		this.triggerSizeChangeWhenCheckStateChanges(true);
		this.__checkedIconView = new $.ig.PathIconView();
		this.__checkedIconView._outlineOnly = false;
		this.addSubview(this.__checkedIconView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::ApplyButtonStyling()" />*/
	applyButtonStyling: function () {
		$.ig.CPIconLabelButton.prototype.applyButtonStyling.call(this);
		this.restOpacity(1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::ApplyButtonStyling()" />*/
	,
	_customCheckedIcon: null,
	/*<BeginProperty Name="Infragistics.PathIcon Infragistics.CPCheckBox::CustomCheckedIcon()" />*/
	customCheckedIcon: function (value) {
		if (arguments.length === 1) {
			this._customCheckedIcon = value;
			return value;
		} else {
			return this._customCheckedIcon;
		}
	}
	/*<EndProperty Name="Infragistics.PathIcon Infragistics.CPCheckBox::CustomCheckedIcon()" />*/
	,
	_customUncheckedIcon: null,
	/*<BeginProperty Name="Infragistics.PathIcon Infragistics.CPCheckBox::CustomUncheckedIcon()" />*/
	customUncheckedIcon: function (value) {
		if (arguments.length === 1) {
			this._customUncheckedIcon = value;
			return value;
		} else {
			return this._customUncheckedIcon;
		}
	}
	/*<EndProperty Name="Infragistics.PathIcon Infragistics.CPCheckBox::CustomUncheckedIcon()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPCheckBox::ResolveCheckedStateString(Infragistics.CPCheckedState)" />*/
	resolveCheckedStateString: function (state) {
		if (state == $.ig.CPCheckedState.prototype.checked) {
			return "Checked";
		}
		if (state == $.ig.CPCheckedState.prototype.notChecked) {
			return "NotChecked";
		}
		return "NotSet";
	}
	/*<EndMethod Name="System.String Infragistics.CPCheckBox::ResolveCheckedStateString(Infragistics.CPCheckedState)" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.CPCheckBox::ResolveCheckedIcon()" />*/
	resolveCheckedIcon: function () {
		if (this.customCheckedIcon() != null) {
			return this.customCheckedIcon();
		}
		if (this._isRadioButton) {
			return $.ig.UIPathIcons.prototype.icons().getCheckedIcon();
		} else {
			return $.ig.UIPathIcons.prototype.icons().getSelectedIcon();
		}
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.CPCheckBox::ResolveCheckedIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.CPCheckBox::ResolveUncheckedIcon()" />*/
	resolveUncheckedIcon: function () {
		if (this.customUncheckedIcon() != null) {
			return this.customUncheckedIcon();
		}
		if (this._isRadioButton) {
			return $.ig.UIPathIcons.prototype.icons().getUncheckedIcon();
		} else {
			return $.ig.UIPathIcons.prototype.icons().getUnselectedIcon();
		}
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.CPCheckBox::ResolveUncheckedIcon()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPCheckedState Infragistics.CPCheckBox::State()" />*/
	state: function () {
		return this.__checkedState;
	}
	/*<EndProperty Name="Infragistics.CPCheckedState Infragistics.CPCheckBox::State()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::SetChecked(Infragistics.CPCheckedState)" />*/
	setChecked: function (state) {
		$.ig.UIUtility.prototype.setAccessibilityName1(this, $.ig.NativeStringUtility.prototype.replace(this.accessibilityName(), $.ig.CPCheckBox.prototype.resolveCheckedStateString(this.__checkedState), $.ig.CPCheckBox.prototype.resolveCheckedStateString(state)));
		this.__checkedState = state;
		this.ensureState(this.__checkedState);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::SetChecked(Infragistics.CPCheckedState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::EnsureState(Infragistics.CPCheckedState)" />*/
	ensureState: function (state) {
		this.__checkedIconView.setIcon(this.resolveCheckedIcon());
		this.setIcon(this.resolveUncheckedIcon());
		this.update();
		if (this.triggerSizeChangeWhenCheckStateChanges()) {
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::EnsureState(Infragistics.CPCheckedState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::Update()" />*/
	update: function () {
		$.ig.CPIconLabelButton.prototype.update.call(this);
		this.__checkedIconView.render1(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::Update()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::MeasureIcon(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureIcon: function (x, y, w, h, o) {
		var cx = x + $.ig.intDivide(w, 2);
		var cy = y + $.ig.intDivide(h, 2);
		if (this.__checkedState == $.ig.CPCheckedState.prototype.checked) {
			var mp = 2;
			var nw = $.ig.truncate((w * mp));
			var nh = $.ig.truncate((h * mp));
			var nx = cx - $.ig.intDivide(nw, 2);
			var ny = cy - $.ig.intDivide(nh, 2);
			$.ig.CPIconLabelButton.prototype.measureIcon.call(this, nx, ny, nw, nh, 0);
			this.measureView1(this.__checkedIconView, x, y, w, h, o);
		} else {
			var mp1 = 0.1;
			var nw1 = $.ig.truncate((w * mp1));
			var nh1 = $.ig.truncate((h * mp1));
			var nx1 = cx - $.ig.intDivide(nw1, 2);
			var ny1 = cy - $.ig.intDivide(nh1, 2);
			$.ig.CPIconLabelButton.prototype.measureIcon.call(this, x, y, w, h, o);
			this.measureView1(this.__checkedIconView, nx1, ny1, nw1, nh1, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::MeasureIcon(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	_triggerSizeChangeWhenCheckStateChanges: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCheckBox::TriggerSizeChangeWhenCheckStateChanges()" />*/
	triggerSizeChangeWhenCheckStateChanges: function (value) {
		if (arguments.length === 1) {
			this._triggerSizeChangeWhenCheckStateChanges = value;
			return value;
		} else {
			return this._triggerSizeChangeWhenCheckStateChanges;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCheckBox::TriggerSizeChangeWhenCheckStateChanges()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCheckBox::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPIconLabelButton.prototype.handleClick.call(this, x, y);
		if (this.__isCheckedChangedBlock != null) {
			var newCheckedState = this.state() == $.ig.CPCheckedState.prototype.checked ? $.ig.CPCheckedState.prototype.notChecked : $.ig.CPCheckedState.prototype.checked;
			this.setChecked(newCheckedState);
			this.__isCheckedChangedBlock(this.__checkedState == $.ig.CPCheckedState.prototype.checked);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCheckBox::HandleClick(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPCheckBox', $.ig.CPIconLabelButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCheckBox" />*/

/*<BeginType Name="Infragistics.CPIconHeaderedLabelButton" />*/

$.ig.util.defType('CPIconHeaderedLabelButton', 'CPIconLabelButton', {
	__headerLabel: null,
	init: function (buttonSizingGuide, style) {
		$.ig.CPIconLabelButton.prototype.init1.call(this, 1, buttonSizingGuide, style, true);
		this.setOverrideFontSize($.ig.ThemeManager.prototype.theme().resolveStepDownFontSize(this.sizingGuide().fontSize()));
		this.__headerLabel = new $.ig.CPLabel();
		this.__headerLabel.setFont(this.sizingGuide().fontSize(), $.ig.ThemeManager.prototype.theme().boldFont());
		this.addSubview(this.__headerLabel);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPIconHeaderedLabelButton::SetHeader(System.String)" />*/
	setHeader: function (header) {
		this.__headerLabel.setText(header);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconHeaderedLabelButton::SetHeader(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconHeaderedLabelButton::LayoutLabel(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutLabel: function (x, y, w, h) {
		this.__headerLabel.calculateSizeToFit();
		var hlw = this.__headerLabel.getCalculatedWidth();
		var hlh = this.__headerLabel.getCalculatedHeight();
		var lh = this.label().getCalculatedHeight();
		var top = $.ig.intDivide(h, 2) - $.ig.intDivide((lh + hlh), 2);
		this.measureView1(this.__headerLabel, x, top, hlw, hlh, $.ig.ThemeManager.prototype.theme().disabledOpacity());
		y = top + hlh;
		$.ig.CPIconLabelButton.prototype.layoutLabel.call(this, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconHeaderedLabelButton::LayoutLabel(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconHeaderedLabelButton::EnsureCalcW(System.Int32)" />*/
	ensureCalcW: function (calw) {
		this.__headerLabel.calculateSizeToFit();
		var hlw = this.__headerLabel.getCalculatedWidth();
		return Math.max(calw, hlw + this.labelEdgePadding() * 2);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconHeaderedLabelButton::EnsureCalcW(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPIconHeaderedLabelButton', $.ig.CPIconLabelButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIconHeaderedLabelButton" />*/

/*<BeginType Name="Infragistics.CPIconLabelSplitButton" />*/

$.ig.util.defType('CPIconLabelSplitButton', 'CPView', {
	__leftClippingContainer: null,
	__rightClippingContainer: null,
	__leftButton: null,
	__rightButton: null,
	__backSep: null,
	__sep: null,
	__cr: 0,
	__sw: 0,
	init: function (sizingGuide) {
		var $self = this;
		$.ig.CPView.prototype.init.call(this);
		this.__splitVisibility = true;
		this.__sw = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.__leftClippingContainer = new $.ig.CPView();
		this.__leftClippingContainer.clipToBounds(true);
		this.addSubview(this.__leftClippingContainer);
		this.__rightClippingContainer = new $.ig.CPView();
		this.__rightClippingContainer.clipToBounds(true);
		this.addSubview(this.__rightClippingContainer);
		this.__leftButton = new $.ig.CPIconLabelButton(0, sizingGuide, $.ig.CPIconButtonStyle.prototype.accent);
		this.__leftButton.canTakeControlOfMouseCursor(false);
		this.__leftButton.addClickHandler(function (x, y) {
			$self.mainClicked();
		});
		this.__cr = $.ig.intDivide((this.__leftButton.sizingGuide().size() - this.__leftButton.sizingGuide().inset()), 2);
		this.__leftButton.overrideLabelEdgePadding(this.__leftButton.iconEdgePadding() + this.__cr);
		this.__leftButton.overrideHInset(0);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__leftClippingContainer, "Global_main_action_button_left");
		this.__leftClippingContainer.addSubview(this.__leftButton);
		this.__rightButton = new $.ig.CPIconLabelButton(0, sizingGuide, $.ig.CPIconButtonStyle.prototype.accent);
		this.__rightButton.canTakeControlOfMouseCursor(false);
		this.__rightButton.addClickHandler(function (x, y) {
			$self.secondaryClicked();
		});
		this.__rightButton.setIcon($.ig.UIPathIcons.prototype.icons().getChevronDownIcon());
		this.__rightButton.overrideHInset(0);
		this.__rightButton.iconOnlyLeftEdgePadding(this.__cr);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__rightClippingContainer, "Global_main_action_button_right");
		this.__rightClippingContainer.addSubview(this.__rightButton);
		this.__backSep = new $.ig.CPViewBase();
		this.__backSep.setBackgroundColor(this.__leftButton.accentColor().$native());
		this.addSubview(this.__backSep);
		this.__sep = new $.ig.CPViewBase();
		this.__sep.setBackgroundColor(this.__leftButton.accentColor().hover().$native());
		this.addSubview(this.__sep);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::MainClicked()" />*/
	mainClicked: function () {
		if (this.__main != null) {
			this.__main(this.__leftClippingContainer);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::MainClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SecondaryClicked()" />*/
	secondaryClicked: function () {
		if (this.__secondary != null) {
			this.__secondary(this.__rightClippingContainer);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SecondaryClicked()" />*/
	,
	__main: null,
	__secondary: null,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::AddMainActionHandler(Infragistics.ObjectBlock)" />*/
	addMainActionHandler: function (action) {
		this.__main = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::AddMainActionHandler(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::AddSecondaryActionHandler(Infragistics.ObjectBlock)" />*/
	addSecondaryActionHandler: function (action) {
		this.__secondary = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::AddSecondaryActionHandler(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetIcon(Infragistics.PathIcon)" />*/
	setIcon: function (icon) {
		this.__leftButton.setIcon(icon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetText(System.String)" />*/
	setText: function (text) {
		this.__leftButton.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		if (this.__splitVisibility) {
			var lw = this.__leftButton.getCalculatedWidth();
			var left = 0;
			var lcw = lw - this.__cr;
			this.__leftClippingContainer.measureView1(this.__leftButton, 0, 0, lw, h, 1);
			this.measureView1(this.__leftClippingContainer, left, 0, lcw, h, 1);
			left += lcw;
			var sh = h - this.__leftButton.sizingGuide().inset();
			var sepOpacity = 1;
			if (this.isDisabled()) {
				sepOpacity = $.ig.ThemeManager.prototype.theme().disabledOpacity();
			}
			this.measureView1(this.__backSep, left, $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), this.__sw, sh, sepOpacity);
			this.measureView1(this.__sep, left, $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), this.__sw, sh, sepOpacity);
			left += this.__sw;
			var rw = this.__rightButton.getCalculatedWidth();
			this.__rightClippingContainer.measureView1(this.__rightButton, -this.__cr, 0, rw, h, 1);
			rw -= this.__cr;
			this.measureView1(this.__rightClippingContainer, left, 0, rw, h, 1);
		} else {
			this.__leftClippingContainer.measureView1(this.__leftButton, 0, 0, w, h, 1);
			this.measureView1(this.__leftClippingContainer, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SizeChanged(System.Int32, System.Int32)" />*/
	,
	__tw: 0,
	__th: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPView.prototype.calculateSizeToFit.call(this);
		this.__leftButton.calculateSizeToFit();
		this.__th = this.__leftButton.getCalculatedHeight();
		this.__tw = this.__leftButton.getCalculatedWidth();
		if (this.__splitVisibility) {
			this.__rightButton.calculateSizeToFit();
			this.__tw = this.__tw - this.__cr + this.__sw + this.__rightButton.getCalculatedWidth() - this.__cr;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelSplitButton::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__th;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelSplitButton::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIconLabelSplitButton::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__tw;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIconLabelSplitButton::GetCalculatedWidth()" />*/
	,
	__splitVisibility: false,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetSplitVisibility(System.Boolean)" />*/
	setSplitVisibility: function (visible) {
		this.__splitVisibility = visible;
		this.__rightClippingContainer.isHidden(!visible);
		this.__backSep.isHidden(!visible);
		this.__sep.isHidden(!visible);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::SetSplitVisibility(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::Disable()" />*/
	disable: function () {
		$.ig.CPView.prototype.disable.call(this);
		this.__leftButton.disable();
		this.__rightButton.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIconLabelSplitButton::Enable()" />*/
	enable: function () {
		$.ig.CPView.prototype.enable.call(this);
		this.__leftButton.enable();
		this.__rightButton.enable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIconLabelSplitButton::Enable()" />*/
	,
	$type: new $.ig.Type('CPIconLabelSplitButton', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIconLabelSplitButton" />*/

/*<BeginType Name="Infragistics.CPIIconLabelPillButton" />*/

$.ig.util.defType('CPIIconLabelPillButton', 'CPIconLabelButton', {
	__pillBackgroundView: null,
	__arrowSpacing: 0,
	init: function (initNumber, buttonSizingGuide) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPIconLabelButton.prototype.init.call(this, 0, buttonSizingGuide, $.ig.CPIconButtonStyle.prototype.minimal);
		this.setupPill();
	},
	init1: function (initNumber, buttonSizingGuide, isDropDown) {
		$.ig.CPIconLabelButton.prototype.init1.call(this, 1, buttonSizingGuide, $.ig.CPIconButtonStyle.prototype.minimal, isDropDown);
		this.setupPill();
	},
	/*<BeginProperty Name="System.String Infragistics.CPIIconLabelPillButton::DefaultForegroundColor()" />*/
	defaultForegroundColor: function () {
		return $.ig.ColorUtility.prototype.createNativeColor(255, 255, 255, 255);
	}
	/*<EndProperty Name="System.String Infragistics.CPIIconLabelPillButton::DefaultForegroundColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIIconLabelPillButton::SetupPill()" />*/
	setupPill: function () {
		this.__arrowSpacing = $.ig.NativeUIUtility.prototype.utility().densify(2);
		this.setColor(this.defaultForegroundColor());
		this.setFont($.ig.ThemeManager.prototype.theme().mediumFont());
		this.overrideIconLabelPadding($.ig.ThemeManager.prototype.theme().padding5());
		this.overrideLabelEdgePadding($.ig.ThemeManager.prototype.theme().padding5());
		this.turnOffHilightBackgroundView();
		this.__pillBackgroundView = new $.ig.CPView();
		this.__pillBackgroundView.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		this.addSubview(this.__pillBackgroundView);
		this.restOpacity(1);
		this.setText(" ");
	}
	/*<EndMethod Name="System.Void Infragistics.CPIIconLabelPillButton::SetupPill()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIIconLabelPillButton::HidePill()" />*/
	hidePill: function (value) {
		if (arguments.length === 1) {
			this.__pillBackgroundView.isHidden(value);
			return value;
		} else {
			return this.__pillBackgroundView.isHidden();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIIconLabelPillButton::HidePill()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPIIconLabelPillButton::ShouldSteaFocusFromTextEditors()" />*/
	shouldSteaFocusFromTextEditors: function (value) {
		if (arguments.length === 1) {
			$.ig.CPIconLabelButton.prototype.shouldSteaFocusFromTextEditors.call(this, value);
			this.__pillBackgroundView.shouldSteaFocusFromTextEditors(value);
			return value;
		} else {
			return $.ig.CPIconLabelButton.prototype.shouldSteaFocusFromTextEditors.call(this);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPIIconLabelPillButton::ShouldSteaFocusFromTextEditors()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPIIconLabelPillButton::PillOpacity()" />*/
	pillOpacity: function () {
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPIIconLabelPillButton::PillOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIIconLabelPillButton::SetPillColor(Infragistics.CPThemeColor)" />*/
	setPillColor: function (pillColor) {
		this.__pillBackgroundView.setBackgroundColor(pillColor.$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPIIconLabelPillButton::SetPillColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPIIconLabelPillButton::AdditionalDropDownIndicatorSpacing()" />*/
	additionalDropDownIndicatorSpacing: function () {
		return this.iconLabelPadding() + this.__arrowSpacing;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPIIconLabelPillButton::AdditionalDropDownIndicatorSpacing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIIconLabelPillButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	measureHighlightBackgroundView: function (view, w, h) {
		$.ig.CPIconLabelButton.prototype.measureHighlightBackgroundView.call(this, view, w, h);
		var sh = this.label().getCalculatedHeight() + this.iconLabelPadding() * 2;
		var sw = w;
		if (this.hasDropDown()) {
			sw -= (this.dropDownSize() + this.iconEdgePadding() + this.__arrowSpacing);
		}
		this.measureView1(this.__pillBackgroundView, 0, $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), sw, sh, this.pillOpacity());
	}
	/*<EndMethod Name="System.Void Infragistics.CPIIconLabelPillButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIIconLabelPillButton::ApplyFocusStyling()" />*/
	applyFocusStyling: function () {
		$.ig.CPIconLabelButton.prototype.applyFocusStyling.call(this);
		this.__pillBackgroundView.setBorderWidth(this.focusBorderWidth());
		this.__pillBackgroundView.setBorderColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPIIconLabelPillButton::ApplyFocusStyling()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIIconLabelPillButton::ClearFocusStyling()" />*/
	clearFocusStyling: function () {
		$.ig.CPIconLabelButton.prototype.clearFocusStyling.call(this);
		this.__pillBackgroundView.setBorderWidth(0);
		this.__pillBackgroundView.setBorderColor($.ig.CPTheme.prototype.clearColor().$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPIIconLabelPillButton::ClearFocusStyling()" />*/
	,
	$type: new $.ig.Type('CPIIconLabelPillButton', $.ig.CPIconLabelButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPIIconLabelPillButton" />*/

/*<BeginType Name="Infragistics.CPNestedButton" />*/

$.ig.util.defType('CPNestedButton', 'CPIconLabelButton', {
	__nestedButton: null,
	init: function (nestedButton) {
		$.ig.CPIconLabelButton.prototype.init.call(this, 0, nestedButton.sizingGuide().name(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__nestedButton = nestedButton;
		this.__nestedButton.disable();
		this.__nestedButton.ignoreDisabledOpacity(true);
		this.__nestedButton.setCursor($.ig.CPCursors.prototype.clickable);
		this.addSubview(this.__nestedButton);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPNestedButton::HasIcon()" />*/
	hasIcon: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPNestedButton::HasIcon()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPNestedButton::IconSize()" />*/
	iconSize: function () {
		this.__nestedButton.calculateSizeToFit();
		return this.__nestedButton.getCalculatedWidth();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPNestedButton::IconSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNestedButton::LayoutIcon(System.Int32, System.Int32)" />*/
	layoutIcon: function (x, h) {
		$.ig.CPIconLabelButton.prototype.layoutIcon.call(this, x, h);
		var bw = this.__nestedButton.getCalculatedWidth();
		var bh = this.__nestedButton.getCalculatedHeight();
		this.measureView1(this.__nestedButton, x, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNestedButton::LayoutIcon(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPNestedButton', $.ig.CPIconLabelButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPNestedButton" />*/

/*<BeginType Name="Infragistics.CPVerticalIconLabelButton" />*/

$.ig.util.defType('CPVerticalIconLabelButton', 'CPIconLabelButton', {
	init: function (buttonSizingGuide, style) {
		$.ig.CPIconLabelButton.prototype.init.call(this, 0, buttonSizingGuide, style);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPIconLabelButton.prototype.calculateSizeToFit.call(this);
		var label = this.labelToLayout();
		label.calculateSizeToFit();
		var lw = this.labelEdgePadding() * 2 + label.getCalculatedWidth() + this.iconEdgePadding();
		var lh = this.hInset() * 2 + label.getCalculatedHeight();
		var bw = this.hInset();
		var bh = 0;
		if (this.hasIcon()) {
			bw += this.iconSize() + this.iconEdgePadding() * 2;
			bh += this.iconSize() + this.iconEdgePadding();
		}
		this.__calcBw = Math.max(bw, lw);
		this.__calcH = lh + bh;
	}
	/*<EndMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::CalculateSizeToFit()" />*/
	,
	__calcH: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPVerticalIconLabelButton::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPVerticalIconLabelButton::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	measureHighlightBackgroundView: function (view, w, h) {
		this.parentToHighlightBGView().measureView1(view, 0, 0, w, this.__calcH, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::MeasureHighlightBackgroundView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::LayoutButton(System.Int32, System.Int32)" />*/
	layoutButton: function (w, h) {
		if (this.hasText()) {
			var label = this.labelToLayout();
			label.calculateSizeToFit();
			var lw = label.getCalculatedWidth();
			var lh = label.getCalculatedHeight();
			var x = $.ig.intDivide(this.hInset(), 2);
			var y = $.ig.intDivide(this.hInset(), 2);
			var calcWidth = this.actualCalculatedWidth();
			if (calcWidth == 0) {
				this.calculateSizeToFit();
				calcWidth = this.actualCalculatedWidth();
			}
			this.setNeedsTooltip(false);
			if (w != calcWidth) {
				var diff = w - calcWidth;
				var offset = $.ig.intDivide(diff, 2);
				if (offset > 0) {
					x += offset;
				} else {
					this.setNeedsTooltip(true);
				}
			}
			if (this.hasIcon()) {
				this.measureView1(this.iconToLayout(), $.ig.intDivide(w, 2) - $.ig.intDivide(this.iconSize(), 2), y, this.iconSize(), this.iconSize(), 1);
				y += this.iconSize() + this.iconLabelPadding();
			}
			this.measureView1(label, $.ig.intDivide(w, 2) - $.ig.intDivide(lw, 2), y, lw, lh, this.labelOpacity());
		} else {
			$.ig.CPIconLabelButton.prototype.layoutButton.call(this, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPVerticalIconLabelButton::LayoutButton(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPVerticalIconLabelButton', $.ig.CPIconLabelButton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPVerticalIconLabelButton" />*/

/*<BeginType Name="Infragistics.CPCompactMonthInteractiveView" />*/

$.ig.util.defType('CPCompactMonthInteractiveView', 'CPInteractionView', {
	__click: null,
	__move: null,
	__pointerDown: null,
	__pointerUp: null,
	init: function (click, mouseMove, pointerDown, pointerUp) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__click = click;
		this.__move = mouseMove;
		this.__pointerDown = pointerDown;
		this.__pointerUp = pointerUp;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthInteractiveView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		this.__click(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthInteractiveView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthInteractiveView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		$.ig.CPInteractionView.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
		this.__move(x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthInteractiveView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPCompactMonthInteractiveView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		var retVal = $.ig.CPInteractionView.prototype.handlePointerDown.call(this, x, y, quietly);
		if (this.__pointerDown != null) {
			this.__pointerDown(x, y);
		}
		return retVal;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPCompactMonthInteractiveView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPCompactMonthInteractiveView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		var retVal = $.ig.CPInteractionView.prototype.handlePointerUp.call(this, x, y);
		if (this.__pointerUp != null) {
			this.__pointerUp(x, y);
		}
		return retVal;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPCompactMonthInteractiveView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPCompactMonthInteractiveView', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCompactMonthInteractiveView" />*/

/*<BeginType Name="Infragistics.CPCompactMonthView" />*/

$.ig.util.defType('CPCompactMonthView', 'CPViewBase', {
	__nextButton: null,
	__prevButton: null,
	__clearButton: null,
	__todayButton: null,
	__yearMonthButton: null,
	__hitTestView: null,
	__drawingView: null,
	__drawingViewForAnimation: null,
	__showTodayAndClearButtons: false,
	__reverseSelectionColors: false,
	__dateSelected: null,
	__dateRangeSelected: null,
	_dateCleared: null,
	__animationPhase: 0,
	__isSelectingStartDate: false,
	__horizontalPadding: 0,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPCompactMonthView.prototype.init1.call(this, 1, true, $.ig.ThemeManager.prototype.theme().padding20());
	},
	init1: function (initNumber, showTodayAndClearButtons, horizontalPadding) {
		var $self = this;
		this.__showTodayAndClearButtons = true;
		this.__reverseSelectionColors = false;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__horizontalPadding = horizontalPadding;
		this.__animationPhase = $.ig.CPCompactMonthViewAnimation.prototype.notAnimating;
		this.__showTodayAndClearButtons = showTodayAndClearButtons;
		this.clipToBounds(true);
		var theme = this.theme();
		this.setBackgroundColor(theme.itemBackgroundColor().$native());
		this.__drawingView = new $.ig.CPCompactMonthDrawingView();
		this.__drawingView.showTodayAndClearButtons(this.__showTodayAndClearButtons);
		this.__drawingView.horizontalPadding(horizontalPadding);
		this.__drawingView._monthChanged = function () {
			$self.monthChanged();
		};
		this.addSubview(this.__drawingView);
		this.__drawingViewForAnimation = new $.ig.CPCompactMonthDrawingView();
		this.__drawingViewForAnimation.isHidden(true);
		this.__drawingViewForAnimation.horizontalPadding(horizontalPadding);
		this.addSubview(this.__drawingViewForAnimation);
		this.__hitTestView = new $.ig.CPCompactMonthInteractiveView(function (x, y) {
			$self.clicked(x, y);
		}, function (x, y) {
			$self.moved(x, y);
		}, function (x, y) {
			$self.onPointerDown1(x, y);
		}, function (x, y) {
			$self.onPointerUp1(x, y);
		});
		this.addSubview(this.__hitTestView);
		this.__nextButton = new $.ig.CPIconButton(0, this.sizingGuideSmall(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__nextButton.setIcon($.ig.UIPathIcons.prototype.icons().getRightArrowIcon());
		this.__nextButton.addClickHandler(function (x, y) {
			$self.next();
		});
		this.addSubview(this.__nextButton);
		this.__prevButton = new $.ig.CPIconButton(0, this.sizingGuideSmall(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__prevButton.setIcon($.ig.UIPathIcons.prototype.icons().getRightArrowIcon());
		this.__prevButton.setIconRotation(180, false);
		this.__prevButton.addClickHandler(function (x, y) {
			$self.prev();
		});
		this.addSubview(this.__prevButton);
		this.__yearMonthButton = new $.ig.CPIconLabelButton(1, this.sizingGuideMedium(), $.ig.CPIconButtonStyle.prototype.standard, true);
		this.__yearMonthButton.setCornerRadius(this.theme().itemCornerRadius());
		this.__yearMonthButton.setFont(this.theme().regularFont());
		this.__yearMonthButton.addClickHandler(function (x, y) {
			$self.showMonthYearPicker();
			$self.updateYearMonthText();
		});
		this.addSubview(this.__yearMonthButton);
		this.__yearMonthButton.calculateSizeToFit();
		this.__drawingView._yearMonthButtonHeight = this.__yearMonthButton.getCalculatedHeight();
		this.__clearButton = new $.ig.CPIconLabelButton(0, this.sizingGuideMedium(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__clearButton.setText("Clear");
		this.__clearButton.addClickHandler(function (x, y) {
			$self.clearDateRange();
		});
		this.addSubview(this.__clearButton);
		this.__todayButton = new $.ig.CPIconLabelButton(0, this.sizingGuideMedium(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__todayButton.setText("Today");
		this.__todayButton.isHidden(true);
		this.__todayButton.addClickHandler(function (x, y) {
			$self.today();
		});
		this.addSubview(this.__todayButton);
		this.setMonth($.ig.DateUtility.prototype.now(), false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetSelectionMode(System.Boolean)" />*/
	setSelectionMode: function (start) {
		this.__isSelectingStartDate = start;
		this.reverseSelectionColors((start == false));
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetSelectionMode(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthView::IsSelectingStartDate()" />*/
	isSelectingStartDate: function () {
		return this.__isSelectingStartDate;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthView::IsSelectingStartDate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetMinMaxRange(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	setMinMaxRange: function (min, max) {
		if (this.__drawingView == null) {
			return;
		}
		this.__drawingView.setMinMaxRange(min, max);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetMinMaxRange(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthView::HasMinMaxRange()" />*/
	hasMinMaxRange: function () {
		return this.__drawingView._snapshot._minDate != null || this.__drawingView._snapshot._maxDate != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthView::HasMinMaxRange()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthView::ReverseSelectionColors()" />*/
	reverseSelectionColors: function (value) {
		if (arguments.length === 1) {
			this.__reverseSelectionColors = value;
			this.__drawingView.reverseSelectionColors(value);
			return value;
		} else {
			return this.__reverseSelectionColors;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthView::ReverseSelectionColors()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPCompactMonthView::HorizontalPadding()" />*/
	horizontalPadding: function (value) {
		if (arguments.length === 1) {
			this.__horizontalPadding = value;
			this.__drawingView.horizontalPadding(value);
			return value;
		} else {
			return this.__horizontalPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPCompactMonthView::HorizontalPadding()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPDateTimeBlock Infragistics.CPCompactMonthView::DateSelected()" />*/
	dateSelected: function (value) {
		if (arguments.length === 1) {
			this.__dateRangeSelected = null;
			this.__dateSelected = value;
			this.__drawingView.supportsRangeSelection(false);
			return value;
		} else {
			return this.__dateSelected;
		}
	}
	/*<EndProperty Name="Infragistics.CPDateTimeBlock Infragistics.CPCompactMonthView::DateSelected()" />*/
	,
	/*<BeginProperty Name="Infragistics.DoubleCPDateTimeBlock Infragistics.CPCompactMonthView::DateRangeSelected()" />*/
	dateRangeSelected: function (value) {
		if (arguments.length === 1) {
			this.__dateSelected = null;
			this.__dateRangeSelected = value;
			this.__drawingView.supportsRangeSelection(true);
			return value;
		} else {
			return this.__dateRangeSelected;
		}
	}
	/*<EndProperty Name="Infragistics.DoubleCPDateTimeBlock Infragistics.CPCompactMonthView::DateRangeSelected()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPCompactMonthView::SizingGuideSmall()" />*/
	sizingGuideSmall: function () {
		return $.ig.CPTheme.prototype.buttonGuideStyleSmall;
	}
	/*<EndProperty Name="System.String Infragistics.CPCompactMonthView::SizingGuideSmall()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPCompactMonthView::SizingGuideMedium()" />*/
	sizingGuideMedium: function () {
		return $.ig.CPTheme.prototype.buttonGuideStyleMedium;
	}
	/*<EndProperty Name="System.String Infragistics.CPCompactMonthView::SizingGuideMedium()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTheme Infragistics.CPCompactMonthView::Theme()" />*/
	theme: function () {
		return $.ig.ThemeManager.prototype.theme();
	}
	/*<EndProperty Name="Infragistics.CPTheme Infragistics.CPCompactMonthView::Theme()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPCompactMonthView::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__todayButton, "customDatePicker" + value + "_TodayButton");
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__clearButton, "customDatePicker" + value + "_ClearButton");
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__prevButton, "customDatePicker" + value + "_PrevButton");
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__yearMonthButton, "customDatePicker" + value + "_YearMonthButton");
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__drawingView, "customDatePicker" + value + "_Calendar");
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__nextButton, "customDatePicker" + value + "_NextButton");
			return value;
		} else {
			return this.name();
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPCompactMonthView::AccessibilityName()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::ShowMonthYearPicker()" />*/
	showMonthYearPicker: function () {
		var snapshot = this.__drawingView.resolveDrawingInfo();
		if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			snapshot._displayMode = $.ig.CPMonthViewDisplayMode.prototype.month;
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
			snapshot._displayMode = $.ig.CPMonthViewDisplayMode.prototype.year;
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
			snapshot._displayMode = $.ig.CPMonthViewDisplayMode.prototype.day;
		}
		this.__drawingView.sizeChanged(this.__drawingView.currentWidth(), this.__drawingView.currentHeight());
		this.__drawingView.render1(false);
		this.updateView();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::ShowMonthYearPicker()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetClearText(System.String)" />*/
	setClearText: function (text) {
		this.__clearButton.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetClearText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetTodayText(System.String)" />*/
	setTodayText: function (text) {
		this.__todayButton.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetTodayText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Next()" />*/
	next: function () {
		var snapshot = this.__drawingView.resolveDrawingInfo();
		if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			this.nextOrPreviousMonth(true);
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
			this.__drawingView.nextYear();
			this.updateView();
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
			this.__drawingView.nextDecade();
			this.updateView();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Next()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::NextOrPreviousMonth(System.Boolean)" />*/
	nextOrPreviousMonth: function (next) {
		var $self = this;
		if (this.__animationPhase != $.ig.CPCompactMonthViewAnimation.prototype.notAnimating) {
			return;
		}
		this.__drawingView.copyTo(this.__drawingViewForAnimation);
		this.__drawingViewForAnimation.render1(false);
		var newMonth = $.ig.CPCompactMonthView.prototype.getNextOrPreviousMonth(this.__drawingView._currentMonth, next);
		this.__drawingView._currentMonth = newMonth;
		this.__drawingView.updateSnapshot();
		this.__drawingView.render1(false);
		var theme = $.ig.ThemeManager.prototype.theme();
		this.__animationPhase = next ? $.ig.CPCompactMonthViewAnimation.prototype.initializeForNextMonth : $.ig.CPCompactMonthViewAnimation.prototype.initializeForPreviousMonth;
		this.triggerSizeChanged();
		this.animate(theme.animationDuration() * 2, function () {
			$self.__animationPhase = next ? $.ig.CPCompactMonthViewAnimation.prototype.nextMonth : $.ig.CPCompactMonthViewAnimation.prototype.previousMonth;
			$self.triggerSizeChanged();
		}, function (completed) {
			$self.__animationPhase = $.ig.CPCompactMonthViewAnimation.prototype.notAnimating;
			$self.__drawingViewForAnimation.isHidden(true);
			$self.__drawingView.isHidden(false);
			$self.triggerSizeChanged();
			$self.__drawingView.render1(false);
			if ($self.__drawingView._monthChanged != null) {
				$self.__drawingView._monthChanged();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::NextOrPreviousMonth(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Prev()" />*/
	prev: function () {
		var snapshot = this.__drawingView.resolveDrawingInfo();
		if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			this.nextOrPreviousMonth(false);
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
			this.__drawingView.previousYear();
			this.updateView();
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
			this.__drawingView.previousDecade();
			this.updateView();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Prev()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::MonthChanged()" />*/
	monthChanged: function () {
		this.__todayButton.isHidden(this.__showTodayAndClearButtons == false ? true : this.__drawingView._snapshot._isTodayMonth);
		this.updateYearMonthText();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::MonthChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::UpdateYearMonthText()" />*/
	updateYearMonthText: function () {
		var snapshot = this.__drawingView.resolveDrawingInfo();
		if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			this.__yearMonthButton.setText(this.__drawingView._currentMonth.monthAndYearString());
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
			this.__yearMonthButton.setText(this.__drawingView._currentMonth._year.toString());
		} else if (snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
			var startYear = $.ig.truncate((Math.floor(snapshot._year / 10) * 10));
			var endYear = startYear + 11;
			this.__yearMonthButton.setText(startYear.toString() + " - " + endYear.toString());
		}
		this.layoutYearMonthButton();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::UpdateYearMonthText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Today()" />*/
	today: function () {
		this.setMonth($.ig.DateUtility.prototype.now(), true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Today()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Clear()" />*/
	clear: function () {
		this.__drawingView._firstSelectedDate = null;
		this.__drawingView._lastSelectedDate = null;
		this.updateView();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Clear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::ClearDateRange()" />*/
	clearDateRange: function () {
		this.clear();
		if (this._dateCleared != null) {
			this._dateCleared();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::ClearDateRange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetMonth(System.DateTime, System.Boolean)" />*/
	setMonth: function (date, animate) {
		this.__drawingView.setMonth($.ig.DateUtility.prototype.getMonthForDate(date), $.ig.DateUtility.prototype.getYearForDate(date), animate);
		this.monthChanged();
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetMonth(System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDate(Infragistics.CPDateTime)" />*/
	selectDate: function (date) {
		this.__drawingView._firstSelectedDate = date;
		this.__drawingView.setMonth(date.month(), date.year(), this.currentHeight() > 0 && this.currentWidth() > 0);
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDate(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDateTime(System.DateTime, System.Boolean)" />*/
	selectDateTime: function (date, isUtc) {
		var d = $.ig.CPDateTime.prototype.createFromDateTime(date, isUtc, true);
		this.selectDate(d);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDateTime(System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDateRange(Infragistics.CPDateTime, Infragistics.CPDateTime, System.Boolean)" />*/
	selectDateRange: function (from, to, navigate) {
		this.__drawingView._firstSelectedDate = from;
		this.__drawingView._lastSelectedDate = to;
		if (navigate) {
			this.__drawingView.setMonth(from.month(), from.year(), this.currentHeight() > 0 && this.currentWidth() > 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SelectDateRange(Infragistics.CPDateTime, Infragistics.CPDateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SetFirstAndLastSelectedDates(Infragistics.CPDateTime)" />*/
	setFirstAndLastSelectedDates: function (value) {
		this.__drawingView._firstSelectedDate = value;
		this.__drawingView._snapshot._firstSelectedDate = value;
		this.__drawingView._lastSelectedDate = value;
		this.__drawingView._snapshot._lastSelectedDate = value;
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SetFirstAndLastSelectedDates(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::UpdateView()" />*/
	updateView: function () {
		this.monthChanged();
		this.updateYearMonthText();
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::UpdateView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Update()" />*/
	update: function () {
		if (this.currentWidth() != 0 && this.currentHeight() != 0) {
			this.sizeChanged(this.currentWidth(), this.currentHeight());
			this.__drawingView.updateSnapshot();
			this.__drawingView.render1(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Update()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::OnPointerDown(System.Int32, System.Int32)" />*/
	onPointerDown1: function (x, y) {
		if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			var hit = this.__drawingView._snapshot.hitTestForDay(x, y, true);
			this.__drawingView._snapshot._pressedDay = hit;
			if (hit >= 0) {
				this.update();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::OnPointerDown(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::OnPointerUp(System.Int32, System.Int32)" />*/
	onPointerUp1: function (x, y) {
		if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			var changed = this.__drawingView._snapshot._pressedDay >= 0;
			this.__drawingView._snapshot._pressedDay = -1;
			if (changed) {
				this.update();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::OnPointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Moved(System.Int32, System.Int32)" />*/
	moved: function (x, y) {
		if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			var hit = this.__drawingView._snapshot.hitTestForDay(x, y, true);
			if (hit != this.__drawingView._snapshot._hoverDay) {
				var isActive = hit >= 0;
				if (hit >= 0 && hit < this.__drawingView._snapshot._dates.length) {
					var hitDate = this.__drawingView._snapshot._dates[hit];
					if (this.__drawingView._snapshot.isOutsideMinMaxRange(hitDate)) {
						isActive = false;
					}
				}
				if (isActive) {
					this.__hitTestView.setCursor($.ig.CPCursors.prototype.clickable);
				} else {
					this.__hitTestView.setCursor($.ig.CPCursors.prototype.$default);
				}
				this.__drawingView._snapshot._hoverDay = isActive ? hit : -1;
				this.update();
			}
		} else {
			this.__hitTestView.setCursor($.ig.CPCursors.prototype.clickable);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Moved(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::Clicked(System.Int32, System.Int32)" />*/
	clicked: function (x, y) {
		if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			var hitDate = this.__drawingView._snapshot.hitTestForDate(x, y);
			if (hitDate == null) {
				return;
			}
			if (this.dateSelected() != null) {
				this.__drawingView._firstSelectedDate = hitDate;
				this.__drawingView._lastSelectedDate = hitDate;
				this.update();
				this.dateSelected()(hitDate);
			} else if (this.dateRangeSelected() != null) {
				if (this.isSelectingStartDate()) {
					this.__drawingView._firstSelectedDate = hitDate;
					if ($.ig.CPDateRangePicker.prototype.hasValue(this.__drawingView._lastSelectedDate) == false) {
						this.__drawingView._lastSelectedDate = hitDate;
					}
				} else {
					this.__drawingView._lastSelectedDate = hitDate;
					if ($.ig.CPDateRangePicker.prototype.hasValue(this.__drawingView._firstSelectedDate) == false) {
						this.__drawingView._firstSelectedDate = hitDate;
					}
				}
				this.verifyDateRange();
				this.update();
				this.dateRangeSelected()(this.__drawingView._firstSelectedDate, this.__drawingView._lastSelectedDate);
			}
			return;
		}
		var selectedIndex = this.__drawingView._snapshot.hitTestForDay(x, y, false);
		if (selectedIndex != -1) {
			if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
				this.__drawingView._snapshot._displayMode = $.ig.CPMonthViewDisplayMode.prototype.day;
				this.__drawingView.setMonth(selectedIndex, this.__drawingView._currentMonth._year, false);
				this.updateView();
			} else if (this.__drawingView._snapshot._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
				var startYear = $.ig.truncate((Math.floor(this.__drawingView._snapshot._year / 10) * 10));
				this.__drawingView._snapshot._displayMode = $.ig.CPMonthViewDisplayMode.prototype.month;
				this.__drawingView.setMonth(this.__drawingView._currentMonth._month, startYear + selectedIndex - 1, false);
				this.updateView();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::Clicked(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		var theme = this.theme();
		var padding = $.ig.NativeUIUtility.prototype.utility().densify($.ig.truncate(this.__drawingView._snapshot._padding));
		var horzPadding = this.horizontalPadding();
		var toolbarHeight = theme.mediumHitSize() - padding;
		var calendarHeight = h;
		var showTodayAndClearButtons = this.__showTodayAndClearButtons;
		if (showTodayAndClearButtons) {
			calendarHeight -= toolbarHeight;
		}
		if (this.__animationPhase != $.ig.CPCompactMonthViewAnimation.prototype.notAnimating) {
			var offset;
			var next = this.__animationPhase == $.ig.CPCompactMonthViewAnimation.prototype.initializeForNextMonth || this.__animationPhase == $.ig.CPCompactMonthViewAnimation.prototype.nextMonth;
			switch (this.__animationPhase) {
				case $.ig.CPCompactMonthViewAnimation.prototype.initializeForPreviousMonth:
				case $.ig.CPCompactMonthViewAnimation.prototype.initializeForNextMonth:
					offset = next ? w : w * -1;
					this.measureView(this.__drawingView, offset, 0, w, calendarHeight);
					this.__drawingViewForAnimation.isHidden(false);
					this.measureView(this.__drawingViewForAnimation, 0, 0, w, calendarHeight);
					break;
				case $.ig.CPCompactMonthViewAnimation.prototype.nextMonth:
				case $.ig.CPCompactMonthViewAnimation.prototype.previousMonth:
					this.measureView(this.__drawingView, 0, 0, w, calendarHeight);
					offset = next ? w * -1 : w;
					this.measureView(this.__drawingViewForAnimation, offset, 0, w, calendarHeight);
					break;
			}
		} else {
			this.__drawingViewForAnimation.isHidden(true);
			this.measureView(this.__drawingView, 0, 0, w, calendarHeight);
		}
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var buttonSize = this.__nextButton.getCalculatedHeight();
		var top = this.theme().padding10();
		this.measureView(this.__hitTestView, 0, 0, w, calendarHeight);
		top += $.ig.intDivide(this.__drawingView._yearMonthButtonHeight, 2);
		top -= $.ig.intDivide(buttonSize, 2);
		this.measureView(this.__nextButton, w - buttonSize - horzPadding, top, buttonSize, buttonSize);
		this.measureView(this.__prevButton, horzPadding, top, buttonSize, buttonSize);
		this.layoutYearMonthButton();
		top += this.__drawingView._yearMonthButtonHeight;
		top += this.theme().padding20();
		this.__clearButton.isHidden(false);
		this.__todayButton.isHidden(false);
		if (showTodayAndClearButtons) {
			if (this._dateCleared == null) {
				this.__clearButton.isHidden(true);
			} else {
				this.__clearButton.isHidden(false);
			}
			this.__todayButton.isHidden(this.__drawingView._snapshot._isTodayMonth);
		} else {
			this.__clearButton.isHidden(true);
			this.__todayButton.isHidden(true);
		}
		this.__clearButton.calculateSizeToFit();
		this.measureView(this.__clearButton, horzPadding, calendarHeight - padding, this.__clearButton.getCalculatedWidth(), toolbarHeight + padding);
		this.__todayButton.calculateSizeToFit();
		var tw = this.__todayButton.getCalculatedWidth();
		this.measureView(this.__todayButton, w - tw - horzPadding, calendarHeight - padding, tw, toolbarHeight + padding);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::VerifyDateRange()" />*/
	verifyDateRange: function () {
		if (this.dateRangeSelected() == null) {
			return;
		}
		var hasFirst = $.ig.CPDateRangePicker.prototype.hasValue(this.__drawingView._firstSelectedDate);
		var hasLast = $.ig.CPDateRangePicker.prototype.hasValue(this.__drawingView._lastSelectedDate);
		if (hasFirst == false && hasLast == false) {
			return;
		}
		if (hasFirst && hasLast == false) {
			this.__drawingView._lastSelectedDate = this.__drawingView._firstSelectedDate.clone();
		} else if (hasLast && hasFirst == false) {
			this.__drawingView._firstSelectedDate = this.__drawingView._lastSelectedDate.clone();
		} else {
			if (this.__drawingView._lastSelectedDate.compareDate(this.__drawingView._firstSelectedDate) < 0) {
				var tempDate = this.__drawingView._firstSelectedDate;
				this.__drawingView._firstSelectedDate = this.__drawingView._lastSelectedDate;
				this.__drawingView._lastSelectedDate = tempDate;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::VerifyDateRange()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetMinimumWidth()" />*/
	getMinimumWidth: function () {
		return (this.theme().smallHitSize() * $.ig.CPCompactMonthView.prototype.cOL_COUNT);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetMinimumWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		var theme = this.theme();
		var padding = this.horizontalPadding() * 2;
		return this.getMinimumWidth() + padding;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var theme = this.theme();
		var padding3 = theme.padding3();
		var padding10 = theme.padding10();
		var padding20 = theme.padding20();
		var height = 0;
		height += padding10;
		this.__yearMonthButton.calculateSizeToFit();
		height += this.__yearMonthButton.getCalculatedHeight();
		height += padding20;
		if (this.__drawingView != null) {
			this.__drawingView.measureText("W", theme.drawingRegularFont(), theme.fontSizeSecondary());
			height += $.ig.truncate(this.__drawingView.measuredTextHeight());
		}
		height += padding10;
		height += (theme.smallHitSize() * $.ig.CPCompactMonthView.prototype.rOW_COUNT);
		if (this.__showTodayAndClearButtons) {
			height += this.theme().mediumHitSize();
		}
		height += padding3;
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPCompactMonthView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthView::LayoutYearMonthButton()" />*/
	layoutYearMonthButton: function () {
		var w = this.currentWidth();
		var h = this.currentHeight();
		if (w > 0 && h > 0) {
			var buttonSize = this.__drawingView._yearMonthButtonHeight;
			var top = $.ig.truncate(this.__drawingView._snapshot._monthTitleTop);
			this.__yearMonthButton.setFont(this.theme().regularFont());
			this.__yearMonthButton.calculateSizeToFit();
			this.__yearMonthButton.triggerSizeChanged();
			var bw = $.ig.intDivide(w, 2);
			this.measureView(this.__yearMonthButton, $.ig.intDivide(w, 2) - $.ig.intDivide(bw, 2), top, bw, buttonSize);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthView::LayoutYearMonthButton()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPMonthInfo Infragistics.CPCompactMonthView::GetNextOrPreviousMonth(Infragistics.CPMonthInfo, System.Boolean)" />*/
	getNextOrPreviousMonth: function (currentMonth, next) {
		return $.ig.CPCompactMonthView.prototype.getNextOrPreviousMonth1(currentMonth._month, currentMonth._year, next);
	}
	/*<EndMethod Name="Infragistics.CPMonthInfo Infragistics.CPCompactMonthView::GetNextOrPreviousMonth(Infragistics.CPMonthInfo, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPMonthInfo Infragistics.CPCompactMonthView::GetNextOrPreviousMonth(System.Int32, System.Int32, System.Boolean)" />*/
	getNextOrPreviousMonth1: function (month, year, next) {
		month = next ? month + 1 : month - 1;
		if (next) {
			if (month == 13) {
				month = 1;
				year += 1;
			}
		} else {
			if (month == 0) {
				month = 12;
				year -= 1;
			}
		}
		return $.ig.NativeDateUtility.prototype.resolveMonthInfo(month, year);
	}
	/*<EndMethod Name="Infragistics.CPMonthInfo Infragistics.CPCompactMonthView::GetNextOrPreviousMonth(System.Int32, System.Int32, System.Boolean)" />*/
	,
	$type: new $.ig.Type('CPCompactMonthView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCompactMonthView" />*/

/*<BeginType Name="Infragistics.CPCompactMonthDrawingView" />*/

$.ig.util.defType('CPCompactMonthDrawingView', 'AnimatableDrawingView', {
	_currentMonth: null,
	_firstSelectedDate: null,
	_lastSelectedDate: null,
	_snapshot: null,
	_monthChanged: null,
	_dayStrings: null,
	__supportsRangeSelection: false,
	__reverseSelectionColors: false,
	__showTodayAndClearButtons: false,
	_yearMonthButtonHeight: 0,
	__horizontalPadding: 0,
	init: function () {
		$.ig.AnimatableDrawingView.prototype.init.call(this);
		this._firstSelectedDate = null;
		this._lastSelectedDate = null;
		this._snapshot = new $.ig.CPCompactMonthViewSnapshot();
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPCompactMonthDrawingView::HorizontalPadding()" />*/
	horizontalPadding: function (value) {
		if (arguments.length === 1) {
			this.__horizontalPadding = value;
			if (this._snapshot != null) {
				this._snapshot._horizontalPadding = value;
			}
			return value;
		} else {
			return this.__horizontalPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPCompactMonthDrawingView::HorizontalPadding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SetMinMaxRange(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	setMinMaxRange: function (min, max) {
		if (this._snapshot == null) {
			return;
		}
		this._snapshot._minDate = min;
		this._snapshot._maxDate = max;
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SetMinMaxRange(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::IsOnlyOneDateSelected()" />*/
	isOnlyOneDateSelected: function () {
		return $.ig.CPDateTime.prototype.isSameDay(this._firstSelectedDate, this._lastSelectedDate);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::IsOnlyOneDateSelected()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::SupportsRangeSelection()" />*/
	supportsRangeSelection: function (value) {
		if (arguments.length === 1) {
			this.__supportsRangeSelection = value;
			return value;
		} else {
			return this.__supportsRangeSelection;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::SupportsRangeSelection()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ShowTodayAndClearButtons()" />*/
	showTodayAndClearButtons: function (value) {
		if (arguments.length === 1) {
			this.__showTodayAndClearButtons = value;
			return value;
		} else {
			return this.__showTodayAndClearButtons;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ShowTodayAndClearButtons()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ReverseSelectionColors()" />*/
	reverseSelectionColors: function (value) {
		if (arguments.length === 1) {
			this.__reverseSelectionColors = value;
			return value;
		} else {
			return this.__reverseSelectionColors;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ReverseSelectionColors()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::SupportsGlyphs()" />*/
	supportsGlyphs: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::SupportsGlyphs()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ShowGridlines()" />*/
	showGridlines: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPCompactMonthDrawingView::ShowGridlines()" />*/
	,
	__from: null,
	__to: null,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::CopyTo(Infragistics.CPCompactMonthDrawingView)" />*/
	copyTo: function (dv) {
		dv._currentMonth = this._currentMonth;
		dv.supportsRangeSelection(this.supportsRangeSelection());
		dv.reverseSelectionColors(this.reverseSelectionColors());
		dv._yearMonthButtonHeight = this._yearMonthButtonHeight;
		dv.horizontalPadding(this.horizontalPadding());
		dv._snapshot = this._snapshot.copy();
		dv.updateSnapshot();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::CopyTo(Infragistics.CPCompactMonthDrawingView)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.CPCompactMonthDrawingView::AnimationDuration()" />*/
	animationDuration: function () {
		return $.ig.ThemeManager.prototype.theme().animationDuration() * 1000;
	}
	/*<EndMethod Name="System.Double Infragistics.CPCompactMonthDrawingView::AnimationDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::AnimationComplete()" />*/
	animationComplete: function () {
		if (this._monthChanged != null) {
			this._monthChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::AnimationComplete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::Tick(System.Double)" />*/
	tick: function (percent) {
		this._snapshot = this.__to.copy();
		this.__from.transition(this._snapshot, percent);
		this.render1(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::Tick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::NextYear()" />*/
	nextYear: function () {
		var month = this._currentMonth._month;
		var year = this._currentMonth._year + 1;
		this.animateToMonth(month, year);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::NextYear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::NextDecade()" />*/
	nextDecade: function () {
		var month = this._currentMonth._month;
		var year = this._currentMonth._year + 10;
		this.animateToMonth(month, year);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::NextDecade()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SetMonth(System.Int32, System.Int32, System.Boolean)" />*/
	setMonth: function (month, year, animate) {
		if (animate) {
			this.animateToMonth(month, year);
		} else {
			this._currentMonth = $.ig.NativeDateUtility.prototype.resolveMonthInfo(month, year);
			this.updateSnapshot();
			this.render1(false);
			if (this._monthChanged != null) {
				this._monthChanged();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SetMonth(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::AnimateToMonth(System.Int32, System.Int32)" />*/
	animateToMonth: function (month, year) {
		this._currentMonth = $.ig.NativeDateUtility.prototype.resolveMonthInfo(month, year);
		this.__from = this._snapshot;
		this.__to = new $.ig.CPCompactMonthViewSnapshot();
		this.__to._displayMode = this.__from._displayMode;
		this.__to.update(this._currentMonth, this, this.currentWidth(), this.currentHeight());
		this.startWhereWeLeftOff();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::AnimateToMonth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousMonth()" />*/
	previousMonth: function () {
		var month = this._currentMonth._month - 1;
		var year = this._currentMonth._year;
		if (month == 0) {
			month = 12;
			year -= 1;
		}
		this.animateToMonth(month, year);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousMonth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousYear()" />*/
	previousYear: function () {
		var month = this._currentMonth._month;
		var year = Math.max(1, this._currentMonth._year - 1);
		this.animateToMonth(month, year);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousYear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousDecade()" />*/
	previousDecade: function () {
		var month = this._currentMonth._month;
		var year = Math.max(1, this._currentMonth._year - 10);
		this.animateToMonth(month, year);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::PreviousDecade()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		$.ig.AnimatableDrawingView.prototype.draw.call(this, canvas, w, h, info);
		var theme = $.ig.ThemeManager.prototype.theme();
		var majorColor = theme.foregroundColor().color();
		var minorColor = theme.getForegroundColorWithAlpha(theme.restOpacity()).color();
		var snapInfo = info;
		this.clipCanvas(canvas, 0, 0, w, h);
		if (snapInfo != null) {
			if (snapInfo._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
				this.drawDays(snapInfo, canvas, minorColor);
			} else if (snapInfo._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
				this.drawMonths(snapInfo, canvas, minorColor);
			} else if (snapInfo._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
				this.drawYears(snapInfo, canvas, minorColor);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawDays(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	drawDays: function (snapInfo, canvas, minorColor) {
		var theme = $.ig.ThemeManager.prototype.theme();
		var firstDayOfWeek = $.ig.DateUtility.prototype.getFirstDayOfWeek();
		var dayOfWeekStrings = $.ig.DateUtility.prototype.getDayOfWeekNames(firstDayOfWeek, true);
		var dayOfWeekTop = snapInfo._monthTitleTop + this._yearMonthButtonHeight + theme.padding10();
		var dayOfWeekHeight = snapInfo._horizontalLineTop[0] - dayOfWeekTop;
		var dayOfWeekLeft = snapInfo._verticalLineLeft[0];
		for (var i = 0; i < 7; i++) {
			var text = dayOfWeekStrings[i];
			text = text.toUpperCase();
			var tw = snapInfo._dayOfWeekTextWidth[i];
			var th = snapInfo._dayOfWeekTextHeight[0];
			this.drawText2(canvas, text, dayOfWeekLeft + snapInfo._cellWidth / 2 - tw / 2, dayOfWeekTop + dayOfWeekHeight / 2 - th / 2, tw, th, minorColor, snapInfo._font, snapInfo._dayOfWeekFontSize);
			dayOfWeekLeft += snapInfo._cellWidth;
		}
		for (var i1 = 0; i1 < this._dayStrings.length; i1++) {
			var dayFont = snapInfo._font;
			if (snapInfo._todayIndex == i1) {
				dayFont = $.ig.ThemeManager.prototype.theme().drawingBoldFont();
			}
			var cellWidth = snapInfo._cellWidth;
			var cellHeight = snapInfo._cellHeight;
			var fontSize = theme.fontSizeBody();
			var dx = snapInfo._dayLeft[i1];
			var dy = snapInfo._dayTop[i1];
			var tw1 = snapInfo._dayTextWidth[i1];
			var th1 = snapInfo._dayTextHeight[i1];
			var isHoverDay = (i1 == snapInfo._hoverDay);
			var isPressedDay = (i1 == snapInfo._pressedDay);
			var hoverDayTextHeight = snapInfo._hoverDayTextHeight;
			var selectionCircleRadiusScalar = 0.875;
			var centerX = dx + (cellWidth / 2);
			var centerY = dy + (cellHeight / 2);
			var text1 = this._dayStrings[i1];
			var color = snapInfo._dayTextColors[i1];
			var bgColor = snapInfo._dayColors[i1];
			var thisDate = snapInfo._dates[i1];
			var selectedState = this.getSelectedState(thisDate);
			var selectionCircleRadius = (isHoverDay || isPressedDay) ? (hoverDayTextHeight * selectionCircleRadiusScalar) : (th1 * selectionCircleRadiusScalar);
			switch (selectedState) {
				case $.ig.CPMonthViewSelectedState.prototype.isSelected:
				case $.ig.CPMonthViewSelectedState.prototype.isSelectionStart:
				case $.ig.CPMonthViewSelectedState.prototype.isSelectionEnd:
					fontSize = theme.fontSizeH3();
					break;
				case $.ig.CPMonthViewSelectedState.prototype.isBetweenSelectionStartAndEnd: break;
			}
			if (bgColor != 0) {
				this.drawCircle(canvas, centerX, centerY, selectionCircleRadius, bgColor, 0, 0);
			}
			this.drawText2(canvas, text1, dx + snapInfo._cellWidth / 2 - tw1 / 2, dy + snapInfo._cellHeight / 2 - th1 / 2, tw1, th1, color, dayFont, fontSize);
		}
		if (this.showGridlines()) {
			var count = snapInfo._horizontalLineTop.length;
			var hl = snapInfo._horizontalLineLeft;
			var hr = hl + snapInfo._horizontalLineWidth;
			for (var i2 = 0; i2 < count; i2++) {
				var ht = snapInfo._horizontalLineTop[i2];
				this.drawLine(canvas, hl, ht, hr, ht, minorColor, snapInfo._strokeWidth);
			}
			count = snapInfo._verticalLineLeft.length;
			var vt = snapInfo._verticalLineTop;
			var vb = vt + snapInfo._verticalLineHeight;
			for (var i3 = 0; i3 < count; i3++) {
				var vl = snapInfo._verticalLineLeft[i3];
				this.drawLine(canvas, vl, vt, vl, vb, minorColor, snapInfo._strokeWidth);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawDays(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawMonths(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	drawMonths: function (snapInfo, canvas, minorColor) {
		var monthStrings = $.ig.NativeDateUtility.prototype.getMonthShortNames();
		for (var i = 0; i < 12; i++) {
			var dayFont = snapInfo._font;
			if (snapInfo._todayIndex == i) {
				dayFont = $.ig.ThemeManager.prototype.theme().drawingBoldFont();
			}
			var dx = snapInfo._dayLeft[i];
			var dy = snapInfo._dayTop[i];
			var tw = snapInfo._dayTextWidth[i];
			var th = snapInfo._dayTextHeight[i];
			var text = monthStrings[i];
			var color = snapInfo._dayTextColors[i];
			var bgColor = snapInfo._dayColors[i];
			if (bgColor != 0) {
				var inset = 3;
				this.drawRoundedRect(canvas, dx + inset, dy + inset, snapInfo._cellWidth - inset * 2, snapInfo._cellHeight - inset * 2, $.ig.ThemeManager.prototype.theme().itemCornerRadius(), bgColor, 0, 0);
			}
			this.drawText2(canvas, text, dx + snapInfo._cellWidth / 2 - tw / 2, dy + snapInfo._cellHeight / 2 - th / 2, tw, th, color, dayFont, snapInfo._dayFontSize);
		}
		var count = snapInfo._horizontalLineTop.length;
		var hl = snapInfo._horizontalLineLeft;
		var hr = hl + snapInfo._horizontalLineWidth;
		for (var i1 = 0; i1 < count; i1++) {
			var ht = snapInfo._horizontalLineTop[i1];
			this.drawLine(canvas, hl, ht, hr, ht, minorColor, snapInfo._strokeWidth);
		}
		count = snapInfo._verticalLineLeft.length;
		var vt = snapInfo._verticalLineTop;
		var vb = vt + snapInfo._verticalLineHeight;
		for (var i2 = 0; i2 < count; i2++) {
			var vl = snapInfo._verticalLineLeft[i2];
			this.drawLine(canvas, vl, vt, vl, vb, minorColor, snapInfo._strokeWidth);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawMonths(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawYears(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	drawYears: function (snapInfo, canvas, minorColor) {
		var yearStrings = $.ig.DateUtility.prototype.yearStrings(this._currentMonth._year, 12);
		for (var i = 0; i < 12; i++) {
			var dayFont = snapInfo._font;
			if (snapInfo._todayIndex == i) {
				dayFont = $.ig.ThemeManager.prototype.theme().drawingBoldFont();
			}
			var dx = snapInfo._dayLeft[i];
			var dy = snapInfo._dayTop[i];
			var tw = snapInfo._dayTextWidth[i];
			var th = snapInfo._dayTextHeight[i];
			var text = yearStrings[i];
			var color = snapInfo._dayTextColors[i];
			var bgColor = snapInfo._dayColors[i];
			if (bgColor != 0) {
				var inset = 3;
				this.drawRoundedRect(canvas, dx + inset, dy + inset, snapInfo._cellWidth - inset * 2, snapInfo._cellHeight - inset * 2, $.ig.ThemeManager.prototype.theme().itemCornerRadius(), bgColor, 0, 0);
			}
			this.drawText2(canvas, text, dx + snapInfo._cellWidth / 2 - tw / 2, dy + snapInfo._cellHeight / 2 - th / 2, tw, th, color, dayFont, snapInfo._dayFontSize);
		}
		var count = snapInfo._horizontalLineTop.length;
		var hl = snapInfo._horizontalLineLeft;
		var hr = hl + snapInfo._horizontalLineWidth;
		for (var i1 = 0; i1 < count; i1++) {
			var ht = snapInfo._horizontalLineTop[i1];
			this.drawLine(canvas, hl, ht, hr, ht, minorColor, snapInfo._strokeWidth);
		}
		count = snapInfo._verticalLineLeft.length;
		var vt = snapInfo._verticalLineTop;
		var vb = vt + snapInfo._verticalLineHeight;
		for (var i2 = 0; i2 < count; i2++) {
			var vl = snapInfo._verticalLineLeft[i2];
			this.drawLine(canvas, vl, vt, vl, vb, minorColor, snapInfo._strokeWidth);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::DrawYears(Infragistics.CPCompactMonthViewSnapshot, System.CanvasContext, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPCompactMonthDrawingView::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		return this._snapshot;
	}
	/*<EndMethod Name="System.Object Infragistics.CPCompactMonthDrawingView::ResolveDrawingInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::UpdateSnapshot()" />*/
	updateSnapshot: function () {
		this._snapshot.update(this._currentMonth, this, this.currentWidth(), this.currentHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::UpdateSnapshot()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		this._snapshot.update(this._currentMonth, this, w, h);
		$.ig.AnimatableDrawingView.prototype.sizeChanged.call(this, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthDrawingView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPMonthViewSelectedState Infragistics.CPCompactMonthDrawingView::GetSelectedState(Infragistics.CPDateTime)" />*/
	getSelectedState: function (date) {
		if ($.ig.CPDateRangePicker.prototype.hasValue(this._firstSelectedDate) == false) {
			return $.ig.CPMonthViewSelectedState.prototype.notSelected;
		}
		var selStart = this._firstSelectedDate;
		if ($.ig.CPDateRangePicker.prototype.hasValue(this._lastSelectedDate) == false) {
			this._lastSelectedDate = this._firstSelectedDate.clone();
		}
		var selEnd = this._lastSelectedDate;
		if (this.supportsRangeSelection()) {
			if ($.ig.CPDateTime.prototype.isSameDay(date, selStart)) {
				return $.ig.CPMonthViewSelectedState.prototype.isSelectionStart;
			} else if ($.ig.CPDateTime.prototype.isSameDay(date, selEnd)) {
				return $.ig.CPMonthViewSelectedState.prototype.isSelectionEnd;
			} else {
				var compareStart = date.compareDate(selStart);
				var compareEnd = date.compareDate(selEnd);
				if (compareStart == 1 && compareEnd == -1) {
					return $.ig.CPMonthViewSelectedState.prototype.isBetweenSelectionStartAndEnd;
				}
				return $.ig.CPMonthViewSelectedState.prototype.notSelected;
			}
		} else {
			return $.ig.CPDateTime.prototype.isSameDay(selStart, date) ? $.ig.CPMonthViewSelectedState.prototype.isSelected : $.ig.CPMonthViewSelectedState.prototype.notSelected;
		}
	}
	/*<EndMethod Name="Infragistics.CPMonthViewSelectedState Infragistics.CPCompactMonthDrawingView::GetSelectedState(Infragistics.CPDateTime)" />*/
	,
	$type: new $.ig.Type('CPCompactMonthDrawingView', $.ig.AnimatableDrawingView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCompactMonthDrawingView" />*/

/*<BeginType Name="Infragistics.CPCompactMonthViewSnapshot" />*/

$.ig.util.defType('CPCompactMonthViewSnapshot', 'Object', {
	_dayTextColors: null,
	_dayColors: null,
	_dayLeft: null,
	_dayTop: null,
	_verticalLineLeft: null,
	_horizontalLineTop: null,
	_verticalLineHeight: 0,
	_verticalLineTop: 0,
	_horizontalLineWidth: 0,
	_horizontalLineLeft: 0,
	_cellWidth: 0,
	_cellHeight: 0,
	_month: 0,
	_year: 0,
	_numberOfDays: 0,
	_strokeWidth: 0,
	_monthName: null,
	_monthFontSize: 0,
	_monthTitleLeft: 0,
	_monthTitleTop: 0,
	_monthTitleWidth: 0,
	_monthTitleHeight: 0,
	_yearName: null,
	_yearFontSize: 0,
	_yearTitleLeft: 0,
	_yearTitleTop: 0,
	_yearTitleWidth: 0,
	_yearTitleHeight: 0,
	_font: null,
	_dayFontSize: 0,
	_dayTextWidth: null,
	_dayTextHeight: null,
	_hoverDayTextHeight: 0,
	_dayOfWeekFontSize: 0,
	_dayOfWeekTextWidth: null,
	_dayOfWeekTextHeight: null,
	_padding: 0,
	_isTodayMonth: false,
	_displayMode: 0,
	_todayIndex: 0,
	_dates: null,
	_firstDayOfMonthIndex: 0,
	_lastDayOfMonthIndex: 0,
	_firstSelectedDate: null,
	_lastSelectedDate: null,
	_hoverDay: 0,
	_pressedDay: 0,
	_minDate: null,
	_maxDate: null,
	_horizontalPadding: 0,
	init: function () {
		this._firstDayOfMonthIndex = -1;
		this._lastDayOfMonthIndex = -1;
		this._firstSelectedDate = null;
		this._lastSelectedDate = null;
		$.ig.Object.prototype.init.call(this);
		this._hoverDay = -1;
		var dayArrayCapacity = $.ig.CPCompactMonthView.prototype.dAY_COUNT;
		this._dayColors = new Array(dayArrayCapacity);
		this._dayTextColors = new Array(dayArrayCapacity);
		this._dayLeft = new Array(dayArrayCapacity);
		this._dayTop = new Array(dayArrayCapacity);
		this._dayTextWidth = new Array(dayArrayCapacity);
		this._dayTextHeight = new Array(dayArrayCapacity);
		this._verticalLineLeft = new Array(8);
		this._horizontalLineTop = new Array(7);
		this._dayOfWeekTextWidth = new Array(7);
		this._dayOfWeekTextHeight = new Array(7);
		this._displayMode = $.ig.CPMonthViewDisplayMode.prototype.day;
		this._horizontalPadding = $.ig.ThemeManager.prototype.theme().padding20();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Update(Infragistics.CPMonthInfo, Infragistics.CPCompactMonthDrawingView, System.Int32, System.Int32)" />*/
	update: function (monthInfo, drawingView, w, h) {
		var theme = $.ig.ThemeManager.prototype.theme();
		var padding5 = theme.padding5();
		var padding10 = theme.padding10();
		var padding20 = theme.padding20();
		var horizontalPadding = drawingView.horizontalPadding();
		this._font = theme.drawingRegularFont();
		var top = 0;
		var availHeight = h;
		var availWidth = w;
		availWidth -= (horizontalPadding * 2);
		top += padding10;
		availHeight -= padding10;
		var today = $.ig.DateUtility.prototype.now();
		var todayUtc = $.ig.CPDateTime.prototype.nowUTC().rawDate();
		var todayMonth = $.ig.DateUtility.prototype.getMonthForDate(today);
		var todayYear = $.ig.DateUtility.prototype.getYearForDate(today);
		var todayDay = $.ig.DateUtility.prototype.getDayForDate(today);
		this._strokeWidth = 1;
		this._month = monthInfo._month;
		this._year = monthInfo._year;
		this._numberOfDays = $.ig.CPCompactMonthView.prototype.dAY_COUNT;
		this._isTodayMonth = this._month == todayMonth && this._year == todayYear;
		var startLeft = horizontalPadding;
		var left = startLeft;
		this._monthFontSize = theme.fontSizeH3();
		this._yearFontSize = theme.fontSizeH3();
		this._dayOfWeekFontSize = theme.fontSizeSecondary();
		this._dayFontSize = theme.fontSizeBody();
		this._monthName = monthInfo.name();
		drawingView.measureText(this._monthName, this._font, this._monthFontSize);
		this._monthTitleWidth = drawingView.measuredTextWidth();
		this._monthTitleHeight = drawingView.measuredTextHeight();
		this._monthTitleLeft = left + availWidth / 2 - this._monthTitleWidth / 2;
		this._monthTitleTop = top;
		this._yearName = monthInfo._year.toString();
		drawingView.measureText(this._yearName, this._font, this._yearFontSize);
		this._yearTitleWidth = drawingView.measuredTextWidth();
		this._yearTitleHeight = drawingView.measuredTextHeight();
		this._yearTitleLeft = left + availWidth / 2 - this._yearTitleWidth / 2;
		this._yearTitleTop = top + this._monthTitleHeight;
		top += drawingView._yearMonthButtonHeight;
		availHeight -= drawingView._yearMonthButtonHeight;
		top += padding20;
		availHeight -= padding20;
		if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			var firstDayOfWeek = $.ig.DateUtility.prototype.getFirstDayOfWeek();
			var dayOfWeekStrings = $.ig.DateUtility.prototype.getDayOfWeekNames(firstDayOfWeek, true);
			for (var i = 0; i < 7; i++) {
				var text = dayOfWeekStrings[i];
				text = text.toUpperCase();
				drawingView.measureText(text, this._font, this._dayOfWeekFontSize);
				this._dayOfWeekTextWidth[i] = drawingView.measuredTextWidth();
				this._dayOfWeekTextHeight[i] = drawingView.measuredTextHeight();
			}
			top += this._dayOfWeekTextHeight[0];
			availHeight -= this._dayOfWeekTextHeight[0];
			top += padding10;
			availHeight -= padding10;
		} else {
			availHeight -= padding20;
			if (drawingView.showTodayAndClearButtons()) {
				availHeight -= padding10;
			}
		}
		if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			this._cellHeight = theme.smallHitSize();
			var maxCellWidth = availWidth / $.ig.CPCompactMonthView.prototype.cOL_COUNT;
			this._cellWidth = Math.max(theme.smallHitSize(), maxCellWidth);
		} else {
			this._cellHeight = $.ig.truncate((availHeight / 3));
			this._cellWidth = $.ig.truncate((availWidth / 4));
		}
		this._verticalLineHeight = this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day ? (this._cellHeight * $.ig.CPCompactMonthView.prototype.rOW_COUNT) : (this._cellHeight * 3);
		this._horizontalLineWidth = this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day ? (this._cellWidth * $.ig.CPCompactMonthView.prototype.cOL_COUNT) : (this._cellWidth * 4);
		this._horizontalLineLeft = startLeft;
		this._verticalLineTop = top;
		for (var i1 = 0; i1 < this._verticalLineLeft.length; i1++) {
			this._verticalLineLeft[i1] = left;
			left += this._cellWidth;
		}
		left = startLeft;
		var maxTop = top + availHeight;
		var startTop = top;
		for (var i2 = 0; i2 < this._horizontalLineTop.length; i2++) {
			if (top > maxTop) {
				top = maxTop;
			}
			this._horizontalLineTop[i2] = top;
			top += this._cellHeight;
		}
		top = startTop;
		var monthStrings = $.ig.NativeDateUtility.prototype.getMonthShortNames();
		var yearStrings = $.ig.DateUtility.prototype.yearStrings(monthInfo._year, 12);
		var currentDay = 1;
		var canStartDrawingDays = false;
		var hasReachedLastDay = false;
		var dayColor = $.ig.ThemeManager.prototype.theme().foregroundColor().color();
		var actionTitleColor = $.ig.ThemeManager.prototype.theme().accentColor().foreground().color();
		this._todayIndex = -1;
		var rowCount = 0;
		var colCount = 0;
		if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			rowCount = $.ig.CPCompactMonthView.prototype.rOW_COUNT;
			colCount = $.ig.CPCompactMonthView.prototype.cOL_COUNT;
		} else {
			rowCount = 3;
			colCount = 4;
		}
		if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.day) {
			this.update_Day(monthInfo, drawingView, w, h, currentDay, todayYear, todayMonth, todayDay, actionTitleColor, dayColor, startLeft, left, top);
		} else {
			for (var weekNumber = 0; weekNumber < rowCount; weekNumber++) {
				for (var dow = 0; dow < colCount; dow++) {
					var dayFont = this._font;
					canStartDrawingDays = true;
					if (canStartDrawingDays && !hasReachedLastDay) {
						var color = dayColor;
						var bgColor = 0;
						var dayIndex = currentDay - 1;
						if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
							if (currentDay == todayMonth && this._year == todayYear) {
								dayFont = $.ig.ThemeManager.prototype.theme().drawingBoldFont();
								this._todayIndex = dayIndex;
								color = $.ig.ThemeManager.prototype.theme().accentColorTextOnly().color();
							}
						} else if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
							var startYear = $.ig.truncate((Math.floor(this._year / 10) * 10));
							if (currentDay + startYear - 1 == todayYear) {
								dayFont = $.ig.ThemeManager.prototype.theme().drawingBoldFont();
								this._todayIndex = dayIndex;
								color = $.ig.ThemeManager.prototype.theme().accentColorTextOnly().color();
							}
						}
						this._dayLeft[dayIndex] = left;
						this._dayTop[dayIndex] = top;
						this._dayTextColors[dayIndex] = color;
						this._dayColors[dayIndex] = bgColor;
						var text1 = "";
						if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.month) {
							text1 = monthStrings[dayIndex];
						} else if (this._displayMode == $.ig.CPMonthViewDisplayMode.prototype.year) {
							text1 = yearStrings[dayIndex];
						}
						drawingView.measureText(text1, dayFont, this._dayFontSize);
						this._dayTextWidth[dayIndex] = drawingView.measuredTextWidth();
						this._dayTextHeight[dayIndex] = drawingView.measuredTextHeight();
						if (currentDay == 31) {
							hasReachedLastDay = true;
						}
						currentDay++;
					}
					left += this._cellWidth;
				}
				left = startLeft;
				top += this._cellHeight;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Update(Infragistics.CPMonthInfo, Infragistics.CPCompactMonthDrawingView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPCompactMonthViewSnapshot::IsCurrentDay(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	isCurrentDay: function (date, nowLocal) {
		if (date == null || nowLocal == null) {
			return false;
		}
		var y = date.year();
		var m = date.month();
		var d = date.day();
		return nowLocal.year() == y && nowLocal.month() == m && nowLocal.day() == d;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPCompactMonthViewSnapshot::IsCurrentDay(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Update_Day(Infragistics.CPMonthInfo, Infragistics.CPCompactMonthDrawingView, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.ColorInt, System.ColorInt, System.Single, System.Single, System.Single)" />*/
	update_Day: function (monthInfo, drawingView, w, h, currentDay, todayYear, todayMonth, todayDay, actionTitleColor, dayColor, startLeft, left, top) {
		var theme = $.ig.ThemeManager.prototype.theme();
		var alphaDark = $.ig.truncate((255 * theme.restOpacity()));
		var alphaLight = $.ig.intDivide(alphaDark, 2);
		var alphaVeryLight = $.ig.intDivide(alphaLight, 2);
		var rowCount = $.ig.CPCompactMonthView.prototype.rOW_COUNT;
		var colCount = $.ig.CPCompactMonthView.prototype.cOL_COUNT;
		var totalDays = rowCount * colCount;
		var firstDayOfWeek = $.ig.DateUtility.prototype.getFirstDayOfWeek();
		var firstDayOfMonthDate = $.ig.CPDateTime.prototype.create(monthInfo._month, 1, monthInfo._year);
		var firstDayOfWeekDate = $.ig.CPDateTime.prototype.getFirstDayOfWeekDate(firstDayOfMonthDate, firstDayOfWeek);
		drawingView._dayStrings = new $.ig.Array();
		this._dates = new $.ig.Array();
		var largeFontSize = theme.fontSizeH3();
		drawingView.measureText("0", theme.drawingRegularFont(), largeFontSize);
		this._hoverDayTextHeight = drawingView.measuredTextHeight();
		for (var i = 0; i < totalDays; i++) {
			var thisDate = null;
			if (i == 0) {
				thisDate = firstDayOfWeekDate;
			} else {
				thisDate = firstDayOfWeekDate.clone();
				thisDate.add(0, 0, i, 0, 0);
			}
			this._dates.add(thisDate);
			var dayString = thisDate.day().toString();
			drawingView._dayStrings.add(dayString);
		}
		var lastDayOfMonthDate = firstDayOfMonthDate.clone();
		lastDayOfMonthDate.add(0, 0, monthInfo._numberOfDays - 1, 0, 0);
		var disabledColor = theme.getForegroundColorWithAlpha(theme.disabledOpacity());
		var actionTitleColorFaded = $.ig.ColorUtility.prototype.applyAlphaToColor(alphaDark, actionTitleColor);
		var selectedColor = theme.accentColor().color();
		var betweenSelectedColor = $.ig.ColorUtility.prototype.applyAlphaToColor(alphaLight, selectedColor);
		this._firstDayOfMonthIndex = -1;
		this._lastDayOfMonthIndex = -1;
		this._firstSelectedDate = null;
		this._lastSelectedDate = null;
		var reverseSelectionColors = drawingView.reverseSelectionColors();
		var nowLocal = $.ig.CPDateTime.prototype.now();
		for (var weekNumber = 0; weekNumber < rowCount; weekNumber++) {
			for (var dow = 0; dow < colCount; dow++) {
				var index = (weekNumber * 7) + dow;
				var thisDate1 = this._dates[index];
				var isToday = $.ig.CPCompactMonthViewSnapshot.prototype.isCurrentDay(thisDate1, nowLocal);
				var isLeading = thisDate1.compareDate(firstDayOfMonthDate) == -1;
				var isTrailing = thisDate1.compareDate(lastDayOfMonthDate) == 1;
				var selectedState = drawingView.getSelectedState(thisDate1);
				var isSelected = (selectedState != $.ig.CPMonthViewSelectedState.prototype.notSelected);
				if (this._firstDayOfMonthIndex < 0) {
					if ($.ig.CPDateTime.prototype.isSameDay(thisDate1, firstDayOfMonthDate)) {
						this._firstDayOfMonthIndex = index;
					}
				}
				if (this._lastDayOfMonthIndex < 0) {
					if ($.ig.CPDateTime.prototype.isSameDay(thisDate1, lastDayOfMonthDate)) {
						this._lastDayOfMonthIndex = index;
					}
				}
				var dayFont = this._font;
				switch (selectedState) {
					case $.ig.CPMonthViewSelectedState.prototype.isSelected:
						this._firstSelectedDate = thisDate1;
						this._lastSelectedDate = thisDate1;
						break;
					case $.ig.CPMonthViewSelectedState.prototype.isSelectionStart:
						this._firstSelectedDate = thisDate1;
						break;
					case $.ig.CPMonthViewSelectedState.prototype.isSelectionEnd:
						this._lastSelectedDate = thisDate1;
						break;
				}
				var fontSize = selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelected || selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelectionStart || selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelectionEnd ? largeFontSize : theme.fontSizeBody();
				var color = dayColor;
				var bgColor = 0;
				var depictFullSelection = (isSelected && drawingView.isOnlyOneDateSelected()) || selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelected || (reverseSelectionColors == false && selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelectionStart) || (reverseSelectionColors && selectedState == $.ig.CPMonthViewSelectedState.prototype.isSelectionEnd);
				if (isSelected) {
					color = depictFullSelection ? actionTitleColor : dayColor;
					bgColor = depictFullSelection ? selectedColor : betweenSelectedColor;
				} else if (isToday) {
					dayFont = theme.drawingBoldFont();
					this._todayIndex = index;
					color = theme.accentColorTextOnly().color();
				}
				var isDisabled = this.isOutsideMinMaxRange(thisDate1);
				if (isDisabled) {
					if (isSelected) {
						color = depictFullSelection ? actionTitleColor : theme.getForegroundColorWithAlpha(theme.restOpacity()).color();
						bgColor = depictFullSelection ? $.ig.ColorUtility.prototype.applyAlphaToColor(alphaLight, selectedColor) : $.ig.ColorUtility.prototype.applyAlphaToColor(alphaVeryLight, selectedColor);
					} else {
						color = disabledColor.color();
					}
				} else if ((isLeading || isTrailing) && isSelected == false) {
					color = disabledColor.color();
				}
				if (index == this._hoverDay && !isSelected && !isDisabled) {
					bgColor = index == this._pressedDay ? theme.defaultInteractionColorSet().pressed().color() : theme.defaultInteractionColorSet().hover().color();
				}
				this._dayLeft[index] = left;
				this._dayTop[index] = top;
				this._dayTextColors[index] = color;
				this._dayColors[index] = bgColor;
				var text = thisDate1.day().toString();
				drawingView.measureText(text, dayFont, fontSize);
				this._dayTextWidth[index] = drawingView.measuredTextWidth();
				this._dayTextHeight[index] = drawingView.measuredTextHeight();
				currentDay++;
				left += this._cellWidth;
			}
			left = startLeft;
			top += this._cellHeight;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Update_Day(Infragistics.CPMonthInfo, Infragistics.CPCompactMonthDrawingView, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.ColorInt, System.ColorInt, System.Single, System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPCompactMonthViewSnapshot::HitTestForDay(System.Single, System.Single, System.Boolean)" />*/
	hitTestForDay: function (x, y, returnValueIsIndex) {
		for (var i = 0; i < this._numberOfDays; i++) {
			if ($.ig.CPMathUtility.prototype.rectContainsPoint(this._dayLeft[i], this._dayTop[i], this._cellWidth, this._cellHeight, x, y)) {
				var adjustment = returnValueIsIndex ? 0 : 1;
				return i + adjustment;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPCompactMonthViewSnapshot::HitTestForDay(System.Single, System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDateTime Infragistics.CPCompactMonthViewSnapshot::HitTestForDate(System.Single, System.Single)" />*/
	hitTestForDate: function (x, y) {
		if (this._dates == null) {
			return null;
		}
		for (var i = 0; i < $.ig.CPCompactMonthView.prototype.dAY_COUNT; i++) {
			if ($.ig.CPMathUtility.prototype.rectContainsPoint(this._dayLeft[i], this._dayTop[i], this._cellWidth, this._cellHeight, x, y)) {
				var date = this._dates[i];
				if (this.isOutsideMinMaxRange(date)) {
					return null;
				}
				return date;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPDateTime Infragistics.CPCompactMonthViewSnapshot::HitTestForDate(System.Single, System.Single)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPCompactMonthViewSnapshot::IsOutsideMinMaxRange(Infragistics.CPDateTime)" />*/
	isOutsideMinMaxRange: function (date) {
		if (this._minDate != null && this._minDate.compareDate(date) > 0) {
			return true;
		}
		if (this._maxDate != null && this._maxDate.compareDate(date) < 0) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPCompactMonthViewSnapshot::IsOutsideMinMaxRange(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCompactMonthViewSnapshot Infragistics.CPCompactMonthViewSnapshot::Copy()" />*/
	copy: function () {
		var snapshot = new $.ig.CPCompactMonthViewSnapshot();
		snapshot._dayLeft = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayLeft);
		snapshot._dayTop = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayTop);
		snapshot._verticalLineLeft = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._verticalLineLeft);
		snapshot._horizontalLineTop = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._horizontalLineTop);
		snapshot._dayTextWidth = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayTextWidth);
		snapshot._dayTextHeight = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayTextHeight);
		snapshot._dayOfWeekTextWidth = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayOfWeekTextWidth);
		snapshot._dayOfWeekTextHeight = $.ig.ArrayUtility.prototype.copyNativeNumberArray(this._dayOfWeekTextHeight);
		snapshot._dayTextColors = $.ig.ArrayUtility.prototype.copyColorArray(this._dayTextColors);
		snapshot._dayColors = $.ig.ArrayUtility.prototype.copyColorArray(this._dayColors);
		snapshot._verticalLineHeight = this._verticalLineHeight;
		snapshot._verticalLineTop = this._verticalLineTop;
		snapshot._horizontalLineWidth = this._horizontalLineWidth;
		snapshot._horizontalLineLeft = this._horizontalLineLeft;
		snapshot._cellWidth = this._cellWidth;
		snapshot._cellHeight = this._cellHeight;
		snapshot._strokeWidth = this._strokeWidth;
		snapshot._monthName = this._monthName;
		snapshot._monthFontSize = this._monthFontSize;
		snapshot._monthTitleLeft = this._monthTitleLeft;
		snapshot._monthTitleTop = this._monthTitleTop;
		snapshot._monthTitleWidth = this._monthTitleWidth;
		snapshot._monthTitleHeight = this._monthTitleHeight;
		snapshot._yearName = this._yearName;
		snapshot._yearFontSize = this._yearFontSize;
		snapshot._yearTitleLeft = this._yearTitleLeft;
		snapshot._yearTitleTop = this._yearTitleTop;
		snapshot._yearTitleWidth = this._yearTitleWidth;
		snapshot._yearTitleHeight = this._yearTitleHeight;
		snapshot._dayFontSize = this._dayFontSize;
		snapshot._dayOfWeekFontSize = this._dayOfWeekFontSize;
		snapshot._month = this._month;
		snapshot._year = this._year;
		snapshot._numberOfDays = this._numberOfDays;
		snapshot._font = this._font;
		snapshot._isTodayMonth = this._isTodayMonth;
		snapshot._todayIndex = this._todayIndex;
		snapshot._padding = this._padding;
		snapshot._displayMode = this._displayMode;
		snapshot._dates = $.ig.ArrayUtility.prototype.copyCPList(this._dates);
		snapshot._firstDayOfMonthIndex = -1;
		snapshot._lastDayOfMonthIndex = -1;
		snapshot._firstSelectedDate = null;
		snapshot._lastSelectedDate = null;
		snapshot._minDate = this._minDate;
		snapshot._maxDate = this._maxDate;
		snapshot._hoverDayTextHeight = this._hoverDayTextHeight;
		return snapshot;
	}
	/*<EndMethod Name="Infragistics.CPCompactMonthViewSnapshot Infragistics.CPCompactMonthViewSnapshot::Copy()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Transition(Infragistics.CPCompactMonthViewSnapshot, System.Double)" />*/
	transition: function (to, percent) {
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayLeft, to._dayLeft, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayTop, to._dayTop, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._verticalLineLeft, to._verticalLineLeft, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._horizontalLineTop, to._horizontalLineTop, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayTextWidth, to._dayTextWidth, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayTextHeight, to._dayTextHeight, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayOfWeekTextWidth, to._dayOfWeekTextWidth, percent);
		$.ig.ArrayUtility.prototype.transitionNativeNumberArray(this._dayOfWeekTextHeight, to._dayOfWeekTextHeight, percent);
		$.ig.ColorUtility.prototype.transitionColorArray(this._dayTextColors, to._dayTextColors, percent);
		$.ig.ColorUtility.prototype.transitionColorArray(this._dayColors, to._dayColors, percent);
		to._verticalLineHeight = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._verticalLineHeight, to._verticalLineHeight, percent);
		to._verticalLineTop = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._verticalLineTop, to._verticalLineTop, percent);
		to._horizontalLineWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._horizontalLineWidth, to._horizontalLineWidth, percent);
		to._horizontalLineLeft = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._horizontalLineLeft, to._horizontalLineLeft, percent);
		to._cellWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._cellWidth, to._cellWidth, percent);
		to._cellHeight = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._cellHeight, to._cellHeight, percent);
		to._strokeWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._strokeWidth, to._strokeWidth, percent);
		to._monthFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._monthFontSize, to._monthFontSize, percent);
		to._monthTitleLeft = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._monthTitleLeft, to._monthTitleLeft, percent);
		to._monthTitleTop = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._monthTitleTop, to._monthTitleTop, percent);
		to._monthTitleWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._monthTitleWidth, to._monthTitleWidth, percent);
		to._monthTitleHeight = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._monthTitleHeight, to._monthTitleHeight, percent);
		to._yearFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yearFontSize, to._yearFontSize, percent);
		to._yearTitleLeft = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yearTitleLeft, to._yearTitleLeft, percent);
		to._yearTitleTop = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yearTitleTop, to._yearTitleTop, percent);
		to._yearTitleWidth = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yearTitleWidth, to._yearTitleWidth, percent);
		to._yearTitleHeight = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._yearTitleHeight, to._yearTitleHeight, percent);
		to._dayFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._dayFontSize, to._dayFontSize, percent);
		to._dayOfWeekFontSize = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._dayOfWeekFontSize, to._dayOfWeekFontSize, percent);
		to._padding = $.ig.CPMathUtility.prototype.transitionNativeNumber(this._padding, to._padding, percent);
	}
	/*<EndMethod Name="System.Void Infragistics.CPCompactMonthViewSnapshot::Transition(Infragistics.CPCompactMonthViewSnapshot, System.Double)" />*/
	,
	$type: new $.ig.Type('CPCompactMonthViewSnapshot', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCompactMonthViewSnapshot" />*/

/*<BeginType Name="Infragistics.CPDateRangePicker" />*/

$.ig.util.defType('CPDateRangePicker', 'CPViewBase', {
	__modeSelectorStartDate: null,
	__modeSelectorDueDate: null,
	__currentMode: null,
	__calendar: null,
	__buttonArea: null,
	__startDate: null,
	__dueDate: null,
	__action: null,
	__startDateSelectedFirst: false,
	init: function (startDateLabelText, dueDateLabelText, pickDateLabelText, clearButtonText, applyButtonText, todayButtonText, startDate, dueDate, startDateSelectedFirst, clearButtonIcon, action) {
		var $self = this;
		this.__currentMode = null;
		this.__startDate = null;
		this.__dueDate = null;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__action = action;
		this.__modeSelectorStartDate = new $.ig.CPDateRangePickerModeSelectorView($.ig.CPDateRangePickerModeSelectorView.prototype.sTARTDATE_IDENTIFIER, startDateLabelText, pickDateLabelText, function () {
			$self.onModeChanged($self.__modeSelectorStartDate, $self.__modeSelectorDueDate);
		}, function () {
			$self.__startDate = null;
			$self.__modeSelectorStartDate.clear();
			$self.__calendar.setFirstAndLastSelectedDates($self.__dueDate);
			if ($self.__modeSelectorStartDate.isSelected()) {
				$self.__calendar.setMinMaxRange(null, $self.__dueDate);
				$self.onModeChanged($self.__modeSelectorStartDate, $self.__modeSelectorDueDate);
			} else {
				$self.__calendar.setMinMaxRange(null, null);
				$self.onModeChanged($self.__modeSelectorDueDate, $self.__modeSelectorStartDate);
			}
		}, clearButtonIcon);
		this.addSubview(this.__modeSelectorStartDate);
		this.__modeSelectorDueDate = new $.ig.CPDateRangePickerModeSelectorView($.ig.CPDateRangePickerModeSelectorView.prototype.dUEDATE_IDENTIFIER, dueDateLabelText, pickDateLabelText, function () {
			$self.onModeChanged($self.__modeSelectorDueDate, $self.__modeSelectorStartDate);
		}, function () {
			$self.__dueDate = null;
			$self.__modeSelectorDueDate.clear();
			$self.__calendar.setFirstAndLastSelectedDates($self.__startDate);
			if ($self.__modeSelectorDueDate.isSelected()) {
				$self.__calendar.setMinMaxRange($self.__startDate, null);
				$self.onModeChanged($self.__modeSelectorDueDate, $self.__modeSelectorStartDate);
			} else {
				$self.__calendar.setMinMaxRange(null, null);
				$self.onModeChanged($self.__modeSelectorStartDate, $self.__modeSelectorDueDate);
			}
		}, clearButtonIcon);
		this.addSubview(this.__modeSelectorDueDate);
		this.__calendar = new $.ig.CPCompactMonthView(1, true, 0);
		this.__calendar.setTodayText(todayButtonText);
		this.addSubview(this.__calendar);
		if (clearButtonText != null || applyButtonText != null) {
			this.__buttonArea = new $.ig.CPButtonAreaView();
			this.addSubview(this.__buttonArea);
			this.initializeButtonArea(this.__buttonArea, clearButtonText, applyButtonText);
		}
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__startDate = startDate;
		this.__dueDate = dueDate;
		this.initializeCalendar(this.__startDate, this.__dueDate);
		this.__startDateSelectedFirst = startDateSelectedFirst;
		this.updateToDefaultMode();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::SetPopupId(System.String)" />*/
	setPopupId: function (value) {
		var $self = this;
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(value) == false) {
			$.ig.CPPopupManager.prototype.subscribeToBeNotifiedWhenPopupCloses(value, function () {
				$self.onApplyButtonClicked();
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::SetPopupId(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::InitializeCalendar(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	initializeCalendar: function (startDate, dueDate) {
		if (startDate == null && dueDate == null) {
			this.__calendar.clear();
			return;
		}
		if ($.ig.CPDateRangePicker.prototype.hasValue(startDate) && $.ig.CPDateRangePicker.prototype.hasValue(dueDate)) {
			this.__calendar.selectDateRange(startDate, dueDate, true);
		} else if ($.ig.CPDateRangePicker.prototype.hasValue(startDate)) {
			this.__calendar.selectDate(startDate);
		} else if ($.ig.CPDateRangePicker.prototype.hasValue(dueDate)) {
			this.__calendar.selectDate(dueDate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::InitializeCalendar(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePicker::ResolvePadding(System.Int32)" />*/
	resolvePadding: function (width) {
		this.calculateSizeToFit();
		var idealWidth = this.getCalculatedWidth();
		if (width >= idealWidth) {
			return this.theme().padding20();
		}
		var calendarWidth = this.__calendar.getMinimumWidth();
		var diff = width - calendarWidth;
		return Math.max($.ig.intDivide(diff, 2), 0);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePicker::ResolvePadding(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePicker::ResolveModeSelectorWidth(System.Int32, System.Int32, System.Int32)" />*/
	resolveModeSelectorWidth: function (width, idealModeSelectorWidth, horzPadding) {
		var padding10 = this.theme().padding10();
		var idealWidth = (idealModeSelectorWidth * 2) + (horzPadding * 2) + padding10;
		if (width >= idealWidth) {
			return idealModeSelectorWidth;
		}
		var availableWidth = width - (horzPadding * 2) - padding10;
		return Math.max(this.theme().mediumHitSize(), $.ig.intDivide(availableWidth, 2));
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePicker::ResolveModeSelectorWidth(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var theme = this.theme();
		var horzPadding = this.resolvePadding(w);
		var innerLeft = horzPadding;
		var innerTop = theme.padding10();
		var innerWidth = w - (horzPadding * 2);
		var modeSelectorPadding = theme.padding10();
		var modeSelectorHeight = this.__modeSelectorStartDate.getCalculatedHeight();
		var modeSelectorWidth = this.resolveModeSelectorWidth(w, this.__modeSelectorStartDate.getCalculatedWidth(), horzPadding);
		this.measureView(this.__modeSelectorStartDate, innerLeft, innerTop, modeSelectorWidth, modeSelectorHeight);
		var left = innerLeft;
		var top = innerTop;
		var lowerButtonAreaHeight = 0;
		if (this.__buttonArea != null) {
			lowerButtonAreaHeight = this.__buttonArea.getCalculatedHeight1(w);
		}
		left = w - modeSelectorWidth - horzPadding;
		this.measureView(this.__modeSelectorDueDate, left, top, modeSelectorWidth, modeSelectorHeight);
		top = innerTop + modeSelectorHeight + theme.padding10();
		left = 0;
		this.__calendar.calculateSizeToFit();
		var calendarHeight = this.__calendar.getCalculatedHeight();
		var calendarWidth = this.__calendar.getCalculatedWidth();
		calendarWidth = Math.max(calendarWidth, innerWidth);
		var calendarLeft = ($.ig.intDivide(w, 2)) - ($.ig.intDivide(calendarWidth, 2));
		this.measureView(this.__calendar, calendarLeft, top, calendarWidth, calendarHeight);
		left = innerLeft;
		top = h - lowerButtonAreaHeight;
		if (this.__buttonArea != null) {
			this.measureView(this.__buttonArea, 0, top, w, lowerButtonAreaHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePicker::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		var theme = this.theme();
		this.__modeSelectorStartDate.calculateSizeToFit();
		this.__modeSelectorDueDate.calculateSizeToFit();
		this.__calendar.calculateSizeToFit();
		var topButtonAreaWidth = theme.padding20() + this.__modeSelectorStartDate.getCalculatedWidth() + theme.padding10() + this.__modeSelectorDueDate.getCalculatedWidth() + theme.padding20();
		return Math.max(topButtonAreaWidth, this.__calendar.getCalculatedWidth());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePicker::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePicker::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var theme = this.theme();
		this.__modeSelectorStartDate.calculateSizeToFit();
		this.__modeSelectorDueDate.calculateSizeToFit();
		this.__calendar.calculateSizeToFit();
		var bah = 0;
		if (this.__buttonArea != null) {
			this.__buttonArea.calculateSizeToFit();
			bah = this.__buttonArea.getCalculatedHeight1(this.getCalculatedWidth());
		}
		return theme.padding10() + this.__modeSelectorStartDate.getCalculatedHeight() + theme.padding10() + this.__calendar.getCalculatedHeight() + bah;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePicker::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::InitializeButtonArea(Infragistics.CPButtonAreaView, System.String, System.String)" />*/
	initializeButtonArea: function (buttonArea, clearButtonText, applyButtonText) {
		var $self = this;
		if (clearButtonText != null) {
			this.__buttonArea.addCenterButton(null, clearButtonText, function (x, y) {
				$self.onClearButtonClicked();
			}, $.ig.CPIconButtonStyle.prototype.bordered);
		}
		if (applyButtonText != null) {
			this.__buttonArea.addCenterButton(null, applyButtonText, function (x, y) {
				$self.onApplyButtonClicked();
			}, $.ig.CPIconButtonStyle.prototype.accent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::InitializeButtonArea(Infragistics.CPButtonAreaView, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::Clear()" />*/
	clear: function () {
		this.__calendar.clear();
		this.__startDate = null;
		this.__modeSelectorStartDate.clear();
		this.__dueDate = null;
		this.__modeSelectorDueDate.clear();
		this.onDateSelectionChanged();
		this.updateToDefaultMode();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::Clear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::UpdateToDefaultMode()" />*/
	updateToDefaultMode: function () {
		if (this.__startDateSelectedFirst) {
			this.onModeChanged(this.__modeSelectorStartDate, this.__modeSelectorDueDate);
		} else {
			this.onModeChanged(this.__modeSelectorDueDate, this.__modeSelectorStartDate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::UpdateToDefaultMode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnClearButtonClicked()" />*/
	onClearButtonClicked: function () {
		this.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnClearButtonClicked()" />*/
	,
	__closeHandled: false,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnApplyButtonClicked()" />*/
	onApplyButtonClicked: function () {
		if (!this.__closeHandled && this.__action != null) {
			this.__closeHandled = true;
			this.executeAction(this.__startDate, this.__dueDate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnApplyButtonClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::ExecuteAction(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	executeAction: function (startDate, endDate) {
		if (this.__action != null) {
			this.__action(startDate, endDate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::ExecuteAction(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateRangeSelected(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	onDateRangeSelected: function (start, end) {
		this.__startDate = start;
		this.__dueDate = end;
		this.onDateSelectionChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateRangeSelected(Infragistics.CPDateTime, Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateSelected(Infragistics.CPDateTime)" />*/
	onDateSelected: function (date) {
		if (this.__currentMode.isStartDate()) {
			this.__startDate = date;
		} else {
			this.__dueDate = date;
		}
		this.onDateSelectionChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateSelected(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateSelectionChanged()" />*/
	onDateSelectionChanged: function () {
		this.__modeSelectorStartDate.setDate(this.__startDate);
		this.__modeSelectorDueDate.setDate(this.__dueDate);
		if (this.__currentMode.isStartDate()) {
			this.onModeChanged(this.__modeSelectorDueDate, this.__modeSelectorStartDate);
		}
		if (this.__buttonArea == null) {
			this.executeAction(this.__startDate, this.__dueDate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnDateSelectionChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePicker::OnModeChanged(Infragistics.CPDateRangePickerModeSelectorView, Infragistics.CPDateRangePickerModeSelectorView)" />*/
	onModeChanged: function (selectedMode, deselectedMode) {
		var $self = this;
		var isStartDateSelected = selectedMode.isStartDate();
		this.__calendar.setSelectionMode(isStartDateSelected);
		if (isStartDateSelected) {
			this.__calendar.setMinMaxRange(null, this.__dueDate);
		} else {
			this.__calendar.setMinMaxRange(this.__startDate, null);
		}
		selectedMode.setSelectedState(true, isStartDateSelected ? this.__startDate : this.__dueDate);
		deselectedMode.setSelectedState(false, isStartDateSelected ? this.__dueDate : this.__startDate);
		this.__currentMode = selectedMode;
		this.__calendar.updateView();
		if ((isStartDateSelected && $.ig.CPDateRangePicker.prototype.hasValue(this.__dueDate)) || (isStartDateSelected == false && $.ig.CPDateRangePicker.prototype.hasValue(this.__startDate))) {
			this.__calendar.dateRangeSelected(function (start, due) {
				var s = null;
				var d = null;
				if (start != null) {
					s = start;
				}
				if (due != null) {
					d = due;
				}
				$self.onDateRangeSelected(s, d);
			});
		} else {
			this.__calendar.dateSelected(function (date) {
				var d = null;
				if (date != null) {
					d = date;
				}
				$self.onDateSelected(d);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePicker::OnModeChanged(Infragistics.CPDateRangePickerModeSelectorView, Infragistics.CPDateRangePickerModeSelectorView)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPDateRangePicker::HasValue(Infragistics.CPDateTime)" />*/
	hasValue: function (date) {
		return date != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPDateRangePicker::HasValue(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.CPDateRangePicker::GetValue(Infragistics.CPDateTime)" />*/
	getValue: function (date) {
		return date.rawDate();
	}
	/*<EndMethod Name="System.DateTime Infragistics.CPDateRangePicker::GetValue(Infragistics.CPDateTime)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTheme Infragistics.CPDateRangePicker::Theme()" />*/
	theme: function () {
		return $.ig.ThemeManager.prototype.theme();
	}
	/*<EndProperty Name="Infragistics.CPTheme Infragistics.CPDateRangePicker::Theme()" />*/
	,
	$type: new $.ig.Type('CPDateRangePicker', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDateRangePicker" />*/

/*<BeginType Name="Infragistics.CPDateRangePickerModeSelectorView" />*/

$.ig.util.defType('CPDateRangePickerModeSelectorView', 'CPInteractionView', {
	__label: null,
	__button: null,
	__buttonText: null,
	__indicator: null,
	__clearButton: null,
	__isSelected: false,
	__isDateSet: false,
	__onClickHandler: null,
	__identifier: 0,
	__noValueSetText: null,
	init: function (identifier, labelText, buttonText, onClick, onClear, clearButtonIcon) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__identifier = identifier;
		this.__noValueSetText = buttonText;
		this.__onClickHandler = onClick;
		var theme = $.ig.ThemeManager.prototype.theme();
		this.__label = new $.ig.CPLabel();
		this.__label.setText(labelText);
		this.addSubview(this.__label);
		this.__button = new $.ig.CPView();
		this.__button.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.__button.setCornerRadius(theme.itemCornerRadius());
		this.addSubview(this.__button);
		this.__indicator = new $.ig.CPDateRangePickerModeIndicator();
		this.addSubview(this.__indicator);
		this.__buttonText = new $.ig.CPLabel();
		this.addSubview(this.__buttonText);
		if (clearButtonIcon != null) {
			this.__clearButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
			this.__clearButton.setIcon(clearButtonIcon);
			this.__clearButton.addClickHandler(function (x, y) {
				if (onClear != null) {
					onClear();
				}
			});
			this.addSubview(this.__clearButton);
		}
		this.supportsInteractionOpacity(true);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::Clear()" />*/
	clear: function () {
		this.setDate(null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::Clear()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsSelected()" />*/
	isSelected: function () {
		return this.__isSelected;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsSelected()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsStartDate()" />*/
	isStartDate: function () {
		return this.__identifier == $.ig.CPDateRangePickerModeSelectorView.prototype.sTARTDATE_IDENTIFIER;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsStartDate()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsDueDate()" />*/
	isDueDate: function () {
		return this.__identifier == $.ig.CPDateRangePickerModeSelectorView.prototype.dUEDATE_IDENTIFIER;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDateRangePickerModeSelectorView::IsDueDate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		if (this.__onClickHandler != null) {
			this.__onClickHandler();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SetDate(Infragistics.CPDateTime)" />*/
	setDate: function (date) {
		this.__buttonText.setText(this.getButtonText(date));
		this.__isDateSet = $.ig.CPDateRangePicker.prototype.hasValue(date);
		this.ensureClearButtonVisibility();
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SetDate(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SetSelectedState(System.Boolean, Infragistics.CPDateTime)" />*/
	setSelectedState: function (selected, date) {
		var theme = $.ig.ThemeManager.prototype.theme();
		var buttonText = this.getButtonText(date);
		var foreColorRest = theme.getForegroundColorWithAlpha(theme.restOpacity());
		this.__buttonText.setText(buttonText);
		this.__buttonText.setTextColor(foreColorRest.$native());
		this.__buttonText.setFont(theme.fontSizeBody(), theme.regularFont());
		if (selected) {
			this.__label.setTextColor(theme.accentColor().$native());
			this.__label.setFont(theme.fontSizeBody(), theme.boldFont());
			this.__button.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth2());
			this.__button.setBorderColor(theme.accentColor().$native());
		} else {
			this.__label.setTextColor(foreColorRest.$native());
			this.__label.setFont(theme.fontSizeBody(), theme.regularFont());
			this.__button.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
			this.__button.setBorderColor(theme.foregroundColor().$native());
		}
		this.__isSelected = selected;
		this.__isDateSet = $.ig.CPDateRangePicker.prototype.hasValue(date);
		this.ensureClearButtonVisibility();
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SetSelectedState(System.Boolean, Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::EnsureClearButtonVisibility()" />*/
	ensureClearButtonVisibility: function () {
		if (this.__clearButton != null) {
			this.__clearButton.isHidden((this.__isDateSet == false));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::EnsureClearButtonVisibility()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPDateRangePickerModeSelectorView::GetButtonText(Infragistics.CPDateTime)" />*/
	getButtonText: function (date) {
		if (date != null) {
			return date.simpleDateString();
		} else {
			return this.__noValueSetText;
		}
	}
	/*<EndMethod Name="System.String Infragistics.CPDateRangePickerModeSelectorView::GetButtonText(Infragistics.CPDateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		var theme = $.ig.ThemeManager.prototype.theme();
		this.__label.calculateSizeToFit();
		var labelWidth = this.__label.getCalculatedWidth();
		var labelHeight = this.__label.getCalculatedHeight();
		var left = 0;
		var top = 0;
		this.measureView1(this.__label, left, top, labelWidth, labelHeight, 1);
		top += (labelHeight + $.ig.CPDateRangePickerModeSelectorView.prototype.padding());
		var buttonWidth = w;
		var buttonHeight = h - top;
		var baseOpacity = this.__isSelected ? 1 : this.__isDateSet ? theme.restOpacity() : theme.disabledOpacity();
		var opacity = this.resolveOpacity(baseOpacity, true);
		this.measureView1(this.__button, left, top, w, buttonHeight, opacity);
		if (this.__isSelected) {
			this.__indicator.isHidden(false);
			var indicatorWidth = $.ig.NativeUIUtility.prototype.utility().densify($.ig.CPDateRangePickerModeIndicator.prototype.dEFAULT_WIDTH_NORMALIZED);
			var indicatorHeight = $.ig.NativeUIUtility.prototype.utility().densify($.ig.CPDateRangePickerModeIndicator.prototype.dEFAULT_HEIGHT_NORMALIZED);
			var indicatorTop = top + buttonHeight - $.ig.NativeUIUtility.prototype.utility().densify(1);
			this.measureView(this.__indicator, ($.ig.intDivide(w, 2)) - ($.ig.intDivide(indicatorWidth, 2)), indicatorTop, indicatorWidth, indicatorHeight);
		} else {
			this.__indicator.isHidden(true);
		}
		var clearButtonSize = 0;
		var clearButtonPadding = 0;
		if (this.__clearButton != null) {
			this.__clearButton.calculateSizeToFit();
			clearButtonSize = this.__clearButton.getCalculatedWidth();
			clearButtonPadding = theme.padding5();
		}
		this.__buttonText.calculateSizeToFit();
		var buttonTextWidth = Math.min(this.__buttonText.getCalculatedWidth(), w - theme.padding10() - clearButtonSize - clearButtonPadding);
		this.measureView(this.__buttonText, theme.padding10(), top + ($.ig.intDivide(buttonHeight, 2)) - ($.ig.intDivide(labelHeight, 2)), buttonTextWidth, labelHeight);
		if (this.__clearButton != null) {
			this.measureView(this.__clearButton, w - clearButtonSize - clearButtonPadding, top + ($.ig.intDivide(buttonHeight, 2)) - ($.ig.intDivide(clearButtonSize, 2)), clearButtonSize, clearButtonSize);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeSelectorView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var theme = $.ig.ThemeManager.prototype.theme();
		this.__label.calculateSizeToFit();
		var labelHeight = this.__label.getCalculatedHeight();
		var buttonHeight = $.ig.NativeUIUtility.prototype.utility().densify(40);
		var indicatorHeight = $.ig.NativeUIUtility.prototype.utility().densify($.ig.CPDateRangePickerModeIndicator.prototype.dEFAULT_HEIGHT_NORMALIZED);
		return labelHeight + buttonHeight + indicatorHeight + $.ig.CPDateRangePickerModeSelectorView.prototype.padding();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(150);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::GetCalculatedWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::Padding()" />*/
	padding: function () {
		return $.ig.ThemeManager.prototype.theme().padding5();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPDateRangePickerModeSelectorView::Padding()" />*/
	,
	$type: new $.ig.Type('CPDateRangePickerModeSelectorView', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDateRangePickerModeSelectorView" />*/

/*<BeginType Name="Infragistics.CPDateRangePickerModeIndicator" />*/

$.ig.util.defType('CPDateRangePickerModeIndicator', 'DrawingViewBase', {
	init: function () {
		$.ig.DrawingViewBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPDateRangePickerModeIndicator::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		var x = new Array(3);
		x[0] = 0;
		x[1] = w;
		x[2] = ($.ig.intDivide(w, 2));
		var y = new Array(3);
		y[0] = 0;
		y[1] = 0;
		y[2] = h;
		var theme = $.ig.ThemeManager.prototype.theme();
		var color = theme.accentColor().color();
		this.drawCustomShape(canvas, x, y, true, color, color, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDateRangePickerModeIndicator::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	$type: new $.ig.Type('CPDateRangePickerModeIndicator', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDateRangePickerModeIndicator" />*/

/*<BeginType Name="Infragistics.ColorUtility" />*/

$.ig.util.defType('ColorUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::getAlpha(System.ColorInt)" />*/
	getAlpha: function (color) {
		return ((color >> 24) & 255);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::getAlpha(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::getRed(System.ColorInt)" />*/
	getRed: function (color) {
		return ((color >> 16) & 255);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::getRed(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::getGreen(System.ColorInt)" />*/
	getGreen: function (color) {
		return ((color >> 8) & 255);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::getGreen(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::getBlue(System.ColorInt)" />*/
	getBlue: function (color) {
		return (color & 255);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::getBlue(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::CreateColor(System.ColorInt, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	createColor1: function (a, r, g, b) {
		return ((a << 24) | (r << 16) | (g << 8) | b);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::CreateColor(System.ColorInt, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::CreateColor(System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	createColor: function (r, g, b) {
		return $.ig.ColorUtility.prototype.createColor1(255, r, g, b);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::CreateColor(System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::TransitionColor(System.ColorInt, System.ColorInt, System.Double)" />*/
	transitionColor: function (from, to, percent) {
		var a = $.ig.CPMathUtility.prototype.transitionDouble($.ig.ColorUtility.prototype.getAlpha(from), $.ig.ColorUtility.prototype.getAlpha(to), percent);
		var r = $.ig.CPMathUtility.prototype.transitionDouble($.ig.ColorUtility.prototype.getRed(from), $.ig.ColorUtility.prototype.getRed(to), percent);
		var g = $.ig.CPMathUtility.prototype.transitionDouble($.ig.ColorUtility.prototype.getGreen(from), $.ig.ColorUtility.prototype.getGreen(to), percent);
		var b = $.ig.CPMathUtility.prototype.transitionDouble($.ig.ColorUtility.prototype.getBlue(from), $.ig.ColorUtility.prototype.getBlue(to), percent);
		return $.ig.ColorUtility.prototype.createColor1(a, r, g, b);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::TransitionColor(System.ColorInt, System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ColorUtility::IsDarkColor(System.ColorInt)" />*/
	isDarkColor: function (color) {
		if (color == 0) {
			return false;
		}
		var r = $.ig.ColorUtility.prototype.getRed(color);
		var g = $.ig.ColorUtility.prototype.getGreen(color);
		var b = $.ig.ColorUtility.prototype.getBlue(color);
		var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
		return (yiq < 200);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ColorUtility::IsDarkColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::ResolveForgroundColorForColor(System.ColorInt)" />*/
	resolveForgroundColorForColor: function (color) {
		return $.ig.ColorUtility.prototype.isDarkColor(color) ? $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255) : $.ig.ColorUtility.prototype.createColor1(255, 0, 0, 0);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::ResolveForgroundColorForColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::LightenOrDarkenColor(System.ColorInt, System.Double)" />*/
	lightenOrDarkenColor: function (color, percent) {
		if ($.ig.ColorUtility.prototype.isDarkColor(color)) {
			return $.ig.ColorUtility.prototype.lightenColor(color, percent);
		} else {
			return $.ig.ColorUtility.prototype.darkenColor(color, percent);
		}
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::LightenOrDarkenColor(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::LightenColor(System.ColorInt, System.Double)" />*/
	lightenColor: function (color, percent) {
		var a = $.ig.ColorUtility.prototype.getAlpha(color);
		var r = $.ig.ColorUtility.prototype.getRed(color);
		var g = $.ig.ColorUtility.prototype.getGreen(color);
		var b = $.ig.ColorUtility.prototype.getBlue(color);
		return $.ig.ColorUtility.prototype.createColor1(a, $.ig.ColorUtility.prototype.lightenColorPart(r, percent), $.ig.ColorUtility.prototype.lightenColorPart(g, percent), $.ig.ColorUtility.prototype.lightenColorPart(b, percent));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::LightenColor(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::LightenColorPart(System.ColorInt, System.Double)" />*/
	lightenColorPart: function (part, percent) {
		var newPart = Math.min(255, part + 255 * percent);
		if (newPart == part) {
			newPart -= (part * percent);
		}
		return newPart;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::LightenColorPart(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::DarkenColor(System.ColorInt, System.Double)" />*/
	darkenColor: function (color, percent) {
		var a = $.ig.ColorUtility.prototype.getAlpha(color);
		var r = $.ig.ColorUtility.prototype.getRed(color);
		var g = $.ig.ColorUtility.prototype.getGreen(color);
		var b = $.ig.ColorUtility.prototype.getBlue(color);
		return $.ig.ColorUtility.prototype.createColor1(a, $.ig.ColorUtility.prototype.darkenColorPart(r, percent), $.ig.ColorUtility.prototype.darkenColorPart(g, percent), $.ig.ColorUtility.prototype.darkenColorPart(b, percent));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::DarkenColor(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::DarkenColorPart(System.ColorInt, System.Double)" />*/
	darkenColorPart: function (part, percent) {
		var newPart = Math.max(0, part - 255 * percent);
		if (newPart == part) {
			newPart += (part * percent);
		}
		return newPart;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::DarkenColorPart(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::ApplyAlphaToColor(System.ColorInt, System.ColorInt)" />*/
	applyAlphaToColor: function (alpha, c) {
		return $.ig.ColorUtility.prototype.createColor1(alpha, $.ig.ColorUtility.prototype.getRed(c), $.ig.ColorUtility.prototype.getGreen(c), $.ig.ColorUtility.prototype.getBlue(c));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::ApplyAlphaToColor(System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ColorUtility::ApplyAlphaToNativeColor(System.ColorInt, System.String)" />*/
	applyAlphaToNativeColor: function (alpha, c) {
		var color = $.ig.NativeColorUtility.prototype.convertNativeColorToInt(c);
		return $.ig.ColorUtility.prototype.createNativeColor(alpha, $.ig.ColorUtility.prototype.getRed(color), $.ig.ColorUtility.prototype.getGreen(color), $.ig.ColorUtility.prototype.getBlue(color));
	}
	/*<EndMethod Name="System.String Infragistics.ColorUtility::ApplyAlphaToNativeColor(System.ColorInt, System.String)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::TransitionAlpha(System.ColorInt, System.Double)" />*/
	transitionAlpha: function (c, percent) {
		var alpha = $.ig.ColorUtility.prototype.getAlpha(c);
		alpha -= (alpha * (1 - percent));
		return $.ig.ColorUtility.prototype.createColor1(alpha, $.ig.ColorUtility.prototype.getRed(c), $.ig.ColorUtility.prototype.getGreen(c), $.ig.ColorUtility.prototype.getBlue(c));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::TransitionAlpha(System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ColorUtility::ConvertToNative(System.ColorInt)" />*/
	convertToNative: function (color) {
		return $.ig.NativeColorUtility.prototype.convertIntToNativeColor(color);
	}
	/*<EndMethod Name="System.String Infragistics.ColorUtility::ConvertToNative(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ColorUtility::CreateNativeColor(System.ColorInt, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	createNativeColor: function (a, r, g, b) {
		return $.ig.NativeColorUtility.prototype.convertIntToNativeColor($.ig.ColorUtility.prototype.createColor1(a, r, g, b));
	}
	/*<EndMethod Name="System.String Infragistics.ColorUtility::CreateNativeColor(System.ColorInt, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::ConvertToInt(System.String)" />*/
	convertToInt: function (color) {
		return $.ig.NativeColorUtility.prototype.convertNativeColorToInt(color);
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::ConvertToInt(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ColorUtility::ColorsAreEqual(System.ColorInt, System.ColorInt)" />*/
	colorsAreEqual: function (color, compareTo) {
		return $.ig.NativeColorUtility.prototype.colorsAreEqual(color, compareTo);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ColorUtility::ColorsAreEqual(System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ColorUtility::ConvertColorIntToRGBHexString(System.ColorInt)" />*/
	convertColorIntToRGBHexString: function (color) {
		return $.ig.NativeColorUtility.prototype.convertColorIntToRGBHexString(color);
	}
	/*<EndMethod Name="System.String Infragistics.ColorUtility::ConvertColorIntToRGBHexString(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.ColorUtility::ConvertNativeToRGBHexString(System.String)" />*/
	convertNativeToRGBHexString: function (color) {
		return $.ig.NativeColorUtility.prototype.convertColorIntToRGBHexString($.ig.NativeColorUtility.prototype.convertNativeColorToInt(color));
	}
	/*<EndMethod Name="System.String Infragistics.ColorUtility::ConvertNativeToRGBHexString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ColorUtility::ConvertHexStringToColorInt(System.String)" />*/
	convertHexStringToColorInt: function (hex) {
		return $.ig.NativeColorUtility.prototype.convertHexStringToColorInt(hex);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ColorUtility::ConvertHexStringToColorInt(System.String)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::DesaturateColor(System.ColorInt, System.Double)" />*/
	desaturateColor: function (color, percent) {
		var r = $.ig.ColorUtility.prototype.getRed(color) / 255;
		var g = $.ig.ColorUtility.prototype.getGreen(color) / 255;
		var b = $.ig.ColorUtility.prototype.getBlue(color) / 255;
		var s, v;
		var min, max, delta;
		min = Math.min(r, g);
		min = Math.min(min, b);
		max = Math.max(r, g);
		max = Math.max(max, b);
		v = max;
		delta = max - min;
		if (max != 0) {
			s = delta / max;
			s *= percent;
			var c = v * (1 - s);
			var gray = (c * 255);
			return $.ig.ColorUtility.prototype.createColor1($.ig.ColorUtility.prototype.getAlpha(color), gray, gray, gray);
		} else {
			return color;
		}
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::DesaturateColor(System.ColorInt, System.Double)" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.ColorUtility::TransparentColor()" />*/
	transparentColor: function () {
		return 0;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.ColorUtility::TransparentColor()" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::CalcluateColorOverColorWithAlpha(System.ColorInt, System.ColorInt, System.Double)" />*/
	calcluateColorOverColorWithAlpha: function (foreground, background, alpha) {
		return $.ig.ColorUtility.prototype.createColor1(255, $.ig.ColorUtility.prototype.applyAlphaForPart($.ig.ColorUtility.prototype.getRed(foreground), $.ig.ColorUtility.prototype.getRed(background), alpha), $.ig.ColorUtility.prototype.applyAlphaForPart($.ig.ColorUtility.prototype.getGreen(foreground), $.ig.ColorUtility.prototype.getGreen(background), alpha), $.ig.ColorUtility.prototype.applyAlphaForPart($.ig.ColorUtility.prototype.getBlue(foreground), $.ig.ColorUtility.prototype.getBlue(background), alpha));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::CalcluateColorOverColorWithAlpha(System.ColorInt, System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.ColorUtility::ApplyAlphaForPart(System.ColorInt, System.ColorInt, System.Double)" />*/
	applyAlphaForPart: function (p0, p1, alpha) {
		return ((p0 * alpha) + (p1 * (1 - alpha)));
	}
	/*<EndMethod Name="System.ColorInt Infragistics.ColorUtility::ApplyAlphaForPart(System.ColorInt, System.ColorInt, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ColorUtility::TransitionColorArray(, , System.Double)" />*/
	transitionColorArray: function (from, to, percent) {
		if (from == null || to == null) {
			return;
		}
		var count = from.length;
		for (var i = 0; i < count; i++) {
			to[i] = $.ig.ColorUtility.prototype.transitionColor(from[i], to[i], percent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ColorUtility::TransitionColorArray(, , System.Double)" />*/
	,
	$type: new $.ig.Type('ColorUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ColorUtility" />*/

/*<BeginType Name="Infragistics.CPButtonAreaViewBase" />*/

$.ig.util.defType('CPButtonAreaViewBase', 'CPViewBase', {
	__circle: null,
	__contentArea: null,
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
		this.__circle = new $.ig.CPView();
		this.addSubview(this.__circle);
		$.ig.ThemeManager.prototype.theme().applyButtonAreaShadow(this.__circle);
		this.__contentArea = new $.ig.CPViewBase();
		this.addSubview(this.__contentArea);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaViewBase::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		$.ig.CPViewBase.prototype.setBackgroundColor.call(this, color);
		this.__contentArea.setBackgroundColor(color);
		this.__circle.setBackgroundColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaViewBase::SetBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureView1(this.__contentArea, 0, 0, w, h, 1);
		this.measureView(this.__circle, 0, 0, w, $.ig.intDivide(h, 2));
		this.__circle.setCornerRadius((w / 2));
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaViewBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPButtonAreaViewBase', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPButtonAreaViewBase" />*/

/*<BeginType Name="Infragistics.CPButtonAreaView" />*/

$.ig.util.defType('CPButtonAreaView', 'CPButtonAreaViewBase', {
	__leftButtons: null,
	__centerButtons: null,
	__rightButtons: null,
	__centerStretchButton: null,
	__centerStretchButtonWidth: 0,
	__centerStretchButtonMinWidth: 0,
	_notifySizeChangedBlock: null,
	init: function () {
		$.ig.CPButtonAreaViewBase.prototype.init.call(this);
		this.__centerButtons = new $.ig.Array();
		this.__leftButtons = new $.ig.Array();
		this.__rightButtons = new $.ig.Array();
		this.clipToBounds(false);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
	},
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddCenterButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	addCenterButton: function (icon, title, action, style) {
		return this.createButton(this.__centerButtons, icon, title, action, style);
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddCenterButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::AddCenterStretchButton(Infragistics.CPViewBase, System.Int32)" />*/
	addCenterStretchButton: function (button, minWidth) {
		this.addSubview(button);
		this.__centerStretchButton = button;
		this.__centerStretchButtonMinWidth = minWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::AddCenterStretchButton(Infragistics.CPViewBase, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::AddCenterButton(Infragistics.CPViewBase)" />*/
	addCenterButton1: function (button) {
		this.__centerButtons.add(button);
		this.addSubview(button);
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::AddCenterButton(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::InsertCenterButton(System.Int32, Infragistics.CPViewBase)" />*/
	insertCenterButton: function (index, button) {
		this.__centerButtons.insert(index, button);
		this.addSubview(button);
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::InsertCenterButton(System.Int32, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddLeftButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	addLeftButton: function (icon, title, action, style) {
		return this.createButton(this.__leftButtons, icon, title, action, style);
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddLeftButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::AddLeftButton(Infragistics.CPViewBase)" />*/
	addLeftButton1: function (button) {
		this.__leftButtons.add(button);
		this.addSubview(button);
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::AddLeftButton(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddRightButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	addRightButton: function (icon, title, action, style) {
		return this.createButton(this.__rightButtons, icon, title, action, style);
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::AddRightButton(Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::AddRightButton(Infragistics.CPViewBase)" />*/
	addRightButton1: function (button) {
		this.__rightButtons.add(button);
		this.addSubview(button);
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::AddRightButton(Infragistics.CPViewBase)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPButtonAreaView::ButtonSizingGuideName()" />*/
	buttonSizingGuideName: function () {
		return $.ig.CPTheme.prototype.buttonGuideStyleMedium;
	}
	/*<EndProperty Name="System.String Infragistics.CPButtonAreaView::ButtonSizingGuideName()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::CreateButton(Infragistics.CPList, Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	createButton: function (list, icon, title, action, style) {
		var button = new $.ig.CPIconLabelButton(0, this.buttonSizingGuideName(), style);
		if (style == $.ig.CPIconButtonStyle.prototype.accent || style == $.ig.CPIconButtonStyle.prototype.bordered) {
			button.isFixedWidth(true);
		}
		button.setIcon(icon);
		button.setText(title);
		button.addClickHandler(action);
		$.ig.UIUtility.prototype.setAccessibilityName2(button, "button_", title);
		list.add(button);
		this.addSubview(button);
		return button;
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPButtonAreaView::CreateButton(Infragistics.CPList, Infragistics.PathIcon, System.String, Infragistics.PointExecutionBlock, Infragistics.CPIconButtonStyle)" />*/
	,
	__numberOfLines: 0,
	__leftWidth: 0,
	__centerWidth: 0,
	__rightWidth: 0,
	__lines: null,
	/*<BeginMethod Name="System.Int32 Infragistics.CPButtonAreaView::GetCalculatedHeight(System.Int32)" />*/
	getCalculatedHeight1: function (width) {
		$.ig.CPButtonAreaViewBase.prototype.calculateSizeToFit.call(this);
		var spacing = $.ig.ThemeManager.prototype.theme().buttonAreaSpacing();
		var availWidth = width - spacing * 2;
		this.__leftWidth = this.calculateTotalButtonWidth(this.__leftButtons, spacing);
		this.__rightWidth = this.calculateTotalButtonWidth(this.__rightButtons, spacing);
		if (this.__centerStretchButton != null) {
			this.__centerStretchButtonWidth = Math.max(this.__centerStretchButtonMinWidth, availWidth - this.__leftWidth - this.__rightWidth - (spacing * 2));
			this.__centerWidth = this.__centerStretchButtonWidth + spacing * 2;
		} else {
			this.__centerWidth = this.calculateTotalButtonWidth(this.__centerButtons, spacing);
		}
		this.__numberOfLines = 1;
		this.__lines = null;
		if (this.__leftWidth + this.__centerWidth + this.__rightWidth > availWidth) {
			this.__lines = new $.ig.Array();
			var currentLine = new $.ig.Array();
			this.__lines.add(currentLine);
			var allButtons = new $.ig.Array();
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(allButtons, this.__leftButtons);
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(allButtons, this.__centerButtons);
			if (this.__centerStretchButton != null) {
				allButtons.add(this.__centerStretchButton);
			}
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(allButtons, this.__rightButtons);
			spacing = $.ig.ThemeManager.prototype.theme().buttonAreaCondensedSpacing();
			var left = spacing;
			availWidth = width - spacing * 2;
			for (var i = 0; i < allButtons.length; i++) {
				var button = allButtons[i];
				if (!button.isHidden()) {
					var bw = button.getCalculatedWidth();
					if (button == this.__centerStretchButton) {
						bw = availWidth - (left + spacing);
					}
					if (bw > availWidth) {
						bw = availWidth;
					}
					if (left + bw + spacing > availWidth) {
						this.__numberOfLines++;
						left = spacing;
						currentLine = new $.ig.Array();
						this.__lines.add(currentLine);
					}
					left += bw;
					currentLine.add(button);
				}
			}
			this.__leftWidth = this.calculateTotalButtonWidth(this.__leftButtons, spacing);
			this.__rightWidth = this.calculateTotalButtonWidth(this.__rightButtons, spacing);
			return $.ig.ThemeManager.prototype.theme().buttonAreaHeightForNumberOfLines(this.__numberOfLines) + this.resolveBottomInset();
		}
		return $.ig.ThemeManager.prototype.theme().buttonAreaHeight() + this.resolveBottomInset();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPButtonAreaView::GetCalculatedHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPButtonAreaView::ResolveBottomInset()" />*/
	resolveBottomInset: function () {
		var bi = this.bottomInset();
		if (bi > 0) {
			bi -= $.ig.ThemeManager.prototype.theme().padding10();
			bi = Math.max(0, bi);
		}
		return bi;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPButtonAreaView::ResolveBottomInset()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPButtonAreaView::SupportsInsets()" />*/
	supportsInsets: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPButtonAreaView::SupportsInsets()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::ViewInsetsChanged()" />*/
	viewInsetsChanged: function () {
		$.ig.CPButtonAreaViewBase.prototype.viewInsetsChanged.call(this);
		if (this._notifySizeChangedBlock != null) {
			this._notifySizeChangedBlock();
		} else {
			var parent = this.getParent();
			if (parent != null) {
				parent.triggerSizeChanged();
				this.triggerSizeChanged();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::ViewInsetsChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::CalculateAndTriggerSizeChanged()" />*/
	calculateAndTriggerSizeChanged: function () {
		if (this.currentWidth() > 0) {
			this.getCalculatedHeight1(this.currentWidth());
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::CalculateAndTriggerSizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPButtonAreaViewBase.prototype.sizeChanged.call(this, w, h);
		var availWidth = w;
		h -= this.resolveBottomInset();
		if (this.__numberOfLines > 1) {
			this.layoutLargeMode(availWidth, h);
		} else {
			var spacing = $.ig.ThemeManager.prototype.theme().buttonAreaSpacing();
			this.layoutButtons(spacing, 0, h, spacing, this.__leftButtons);
			this.layoutButtons(w - spacing - this.__rightWidth, 0, h, spacing, this.__rightButtons);
			if (this.__centerStretchButton != null) {
				var leftOffset = this.__leftButtons.length > 0 ? spacing + this.__leftWidth + spacing : spacing;
				var guide = $.ig.ThemeManager.prototype.theme().resolveButtonGuide(this.buttonSizingGuideName());
				this.measureView1(this.__centerStretchButton, leftOffset, $.ig.intDivide((h - guide.size()), 2), this.__centerStretchButtonWidth, guide.size(), 1);
			} else {
				this.layoutButtons($.ig.intDivide(w, 2) - $.ig.intDivide(this.__centerWidth, 2), 0, h, spacing, this.__centerButtons);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutLargeMode(System.Int32, System.Int32)" />*/
	layoutLargeMode: function (w, h) {
		var spacing = $.ig.ThemeManager.prototype.theme().buttonAreaCondensedSpacing();
		var y = 0;
		var lh = $.ig.intDivide(h, this.__numberOfLines);
		for (var i = 0; i < this.__numberOfLines; i++) {
			this.layoutLine(i, y, w, lh, spacing);
			y += lh;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutLargeMode(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutLine(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutLine: function (line, y, w, h, spacing) {
		var maxSize = $.ig.ThemeManager.prototype.theme().resolveButtonGuide($.ig.CPTheme.prototype.buttonGuideStyleMedium).size();
		var buttons = this.__lines[line];
		var count = buttons.length;
		var totalWidth = this.calculateTotalButtonWidth(buttons, spacing);
		var limit = w - spacing * 2;
		if (totalWidth == 0) {
			totalWidth = limit;
		}
		var left = $.ig.intDivide(w, 2) - $.ig.intDivide(totalWidth, 2);
		for (var i = 0; i < count; i++) {
			var button = buttons[i];
			var bw = button.getCalculatedWidth();
			if (button == this.__centerStretchButton) {
				bw = w - (left + spacing);
			}
			if (bw > limit) {
				bw = limit;
			}
			var bh = button.getCalculatedHeight();
			bh = Math.min(bh, maxSize);
			this.measureView1(button, left, y + $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
			left += bw + spacing;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutLine(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutButtons(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPList)" />*/
	layoutButtons: function (left, y, h, spacing, buttons) {
		var count = buttons.length;
		for (var i = 0; i < count; i++) {
			var button = buttons[i];
			if (!button.isHidden()) {
				var bw = button.getCalculatedWidth();
				var bh = button.getCalculatedHeight();
				this.measureView1(button, left, y + $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
				left += bw + spacing;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::LayoutButtons(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPButtonAreaView::CalculateTotalButtonWidth(Infragistics.CPList, System.Int32)" />*/
	calculateTotalButtonWidth: function (buttons, spacing) {
		var totalWidth = 0;
		var count = buttons.length;
		if (count > 0) {
			var hasStretchButton = false;
			var visibleCount = 0;
			for (var i = 0; i < count; i++) {
				var button = buttons[i];
				if (!button.isHidden()) {
					visibleCount++;
					if (button == this.__centerStretchButton) {
						hasStretchButton = true;
						break;
					}
					button.calculateSizeToFit();
					var bw = button.getCalculatedWidth();
					totalWidth += bw;
				}
			}
			totalWidth += spacing * (visibleCount - 1);
			if (hasStretchButton) {
				totalWidth = 0;
			}
		}
		return totalWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPButtonAreaView::CalculateTotalButtonWidth(Infragistics.CPList, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPButtonAreaView::UpdateButtonState()" />*/
	updateButtonState: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPButtonAreaView::UpdateButtonState()" />*/
	,
	$type: new $.ig.Type('CPButtonAreaView', $.ig.CPButtonAreaViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPButtonAreaView" />*/

/*<BeginType Name="Infragistics.CPCircleView" />*/

$.ig.util.defType('CPCircleView', 'CPView', {
	init: function () {
		$.ig.CPView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPCircleView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		this.setCornerRadius($.ig.intDivide(Math.max(w, h), 2));
	}
	/*<EndMethod Name="System.Void Infragistics.CPCircleView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPCircleView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCircleView" />*/

/*<BeginType Name="Infragistics.CPColorListView" />*/

$.ig.util.defType('CPColorListView', 'CPViewBase', {
	__gridview: null,
	__dsh: null,
	init: function (colors, colorChanged) {
		$.ig.CPViewBase.prototype.init.call(this);
		this._numberOfColumns = -1;
		this.__gridview = new $.ig.CPGridView(0);
		this.__gridview._rowSeparatorHeight = 0;
		this.__gridview._headerHeight = 0;
		this.__gridview.alwaysBounceHorizontal(false);
		this.__gridview.alwaysBounceVertical(false);
		this.addSubview(this.__gridview);
		this.__dsh = new $.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper(0, new $.ig.CPColorColumn("self", colorChanged));
		this.__gridview.setDataSource(this.__dsh);
		this.setColors(colors);
		this._itemHeight = $.ig.ThemeManager.prototype.theme().mediumHitSize();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPColorListView::SetColors()" />*/
	setColors: function (colors) {
		var data = new $.ig.Array();
		for (var i = 0; i < colors.length; i++) {
			data.add(new $.ig.ColorInfo(colors[i]));
		}
		(data[0])._isSelected = true;
		this.__dsh.data(data);
		this.__gridview.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorListView::SetColors()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridView Infragistics.CPColorListView::GetGridView()" />*/
	getGridView: function () {
		return this.__gridview;
	}
	/*<EndMethod Name="Infragistics.CPGridView Infragistics.CPColorListView::GetGridView()" />*/
	,
	/*<BeginMethod Name="System.ColorInt Infragistics.CPColorListView::GetColor()" />*/
	getColor: function () {
		var count = this.__dsh.data().length;
		for (var i = 0; i < count; i++) {
			var ci = this.__dsh.data()[i];
			if (ci._isSelected) {
				return ci._color;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.ColorInt Infragistics.CPColorListView::GetColor()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPColorListView::GetColorIndex()" />*/
	getColorIndex: function () {
		var count = this.__dsh.data().length;
		for (var i = 0; i < count; i++) {
			var ci = this.__dsh.data()[i];
			if (ci._isSelected) {
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPColorListView::GetColorIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorListView::SetColorAtIndex(System.Int32)" />*/
	setColorAtIndex: function (index) {
		var count = this.__dsh.data().length;
		for (var i = 0; i < count; i++) {
			var info = this.__dsh.data()[i];
			info._isSelected = (i == index);
		}
		this.__gridview.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorListView::SetColorAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorListView::SetColor(System.ColorInt)" />*/
	setColor: function (color) {
		var count = this.__dsh.data().length;
		for (var i = 0; i < count; i++) {
			var info = this.__dsh.data()[i];
			info._isSelected = (info._color == color);
		}
		this.__gridview.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorListView::SetColor(System.ColorInt)" />*/
	,
	_itemHeight: 0,
	_rowSpacing: 0,
	_columnSpacing: 0,
	_numberOfColumns: 0,
	_sidePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPColorListView::SidePadding()" />*/
	sidePadding: function (value) {
		if (arguments.length === 1) {
			this._sidePadding = value;
			return value;
		} else {
			return this._sidePadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPColorListView::SidePadding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorListView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var count = this.__dsh._numberOfColumns;
		this.__dsh._numberOfColumns = this.resolveColCountFromWidth(w);
		if (count != this.__dsh._numberOfColumns) {
			this.__dsh.invalidateData();
			this.__gridview.updateData(true);
		}
		this.__gridview._rowSpacing = this._rowSpacing;
		this.__gridview._columnSpacing = this._columnSpacing;
		this.__gridview._rowHeight = this._itemHeight;
		this.measureView(this.__gridview, this.sidePadding(), this.sidePadding(), w - this.sidePadding() * 2, h - this.sidePadding() * 2);
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorListView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPColorListView::ResolveColCountFromWidth(System.Int32)" />*/
	resolveColCountFromWidth: function (width) {
		if (this._numberOfColumns == -1) {
			width -= 2 * this.sidePadding();
			return ($.ig.intDivide(width, this._itemHeight));
		}
		return this._numberOfColumns;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPColorListView::ResolveColCountFromWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPColorListView::CalculateNumberOfColumnsToKeepEvenPerRow(System.Int32)" />*/
	calculateNumberOfColumnsToKeepEvenPerRow: function (width) {
		var colCount = this.resolveColCountFromWidth(width);
		var dataCount = this.__dsh.data().length;
		for (var i = Math.min(dataCount, colCount); i > 0; i--) {
			if (dataCount % i == 0) {
				return i;
			}
		}
		return colCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPColorListView::CalculateNumberOfColumnsToKeepEvenPerRow(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPColorListView::CalculateWidth(System.Int32)" />*/
	calculateWidth: function (aNumberOfColumns) {
		return (this._itemHeight * aNumberOfColumns) + (this._columnSpacing * (aNumberOfColumns + 1)) + (2 * this.sidePadding());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPColorListView::CalculateWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPColorListView::CalculateHeight(System.Int32)" />*/
	calculateHeight: function (width) {
		var colCount = this.resolveColCountFromWidth(width);
		if (colCount == 0) {
			return 0;
		}
		var rowCount = $.ig.truncate(Math.ceil(this.__dsh.data().length / colCount));
		var height = (this._itemHeight * rowCount);
		height += (this._rowSpacing * (rowCount + 1));
		return height + 2 * this.sidePadding();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPColorListView::CalculateHeight(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPColorListView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPColorListView" />*/

/*<BeginType Name="Infragistics.ColorInfo" />*/

$.ig.util.defType('ColorInfo', 'Object', {
	init: function (c) {
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._color = c;
	},
	_color: null,
	_isSelected: false,
	$type: new $.ig.Type('ColorInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ColorInfo" />*/

/*<BeginType Name="Infragistics.CPGridViewColumnDefinition" />*/

$.ig.util.defType('CPGridViewColumnDefinition', 'Object', {
	_headerText: null,
	__width: null,
	__setupCellDelegate: null,
	__createNewCellBlock: null,
	__key: null,
	__haskey: false,
	init: function (initNumber, key) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.__key = key;
		this.__haskey = true;
		this.setDefaults();
	},
	__emptyCol: false,
	init1: function (initNumber, key, emptyColumn) {
		$.ig.Object.prototype.init.call(this);
		this.__key = key;
		this.__emptyCol = emptyColumn;
		this.setDefaults();
	},
	init2: function (initNumber) {
		$.ig.Object.prototype.init.call(this);
		this.__key = "self";
		this.setDefaults();
	},
	init3: function (initNumber, setupCellDelegate, createNewCellBlock) {
		$.ig.Object.prototype.init.call(this);
		this.__key = "self";
		this.__setupCellDelegate = setupCellDelegate;
		this.__createNewCellBlock = createNewCellBlock;
		this.setDefaults();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::SetDefaults()" />*/
	setDefaults: function () {
		this.textAlignment($.ig.TextAlignment.prototype.left);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::SetDefaults()" />*/
	,
	_dataIsListOfCells: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewColumnDefinition::DataIsListOfCells()" />*/
	dataIsListOfCells: function (value) {
		if (arguments.length === 1) {
			this._dataIsListOfCells = value;
			return value;
		} else {
			return this._dataIsListOfCells;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewColumnDefinition::DataIsListOfCells()" />*/
	,
	_textAlignment: 0,
	/*<BeginProperty Name="System.Windows.TextAlignment Infragistics.CPGridViewColumnDefinition::TextAlignment()" />*/
	textAlignment: function (value) {
		if (arguments.length === 1) {
			this._textAlignment = value;
			return value;
		} else {
			return this._textAlignment;
		}
	}
	/*<EndProperty Name="System.Windows.TextAlignment Infragistics.CPGridViewColumnDefinition::TextAlignment()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPGridViewColumnDefinition::Key()" />*/
	key: function (value) {
		if (arguments.length === 1) {
			this.__key = value;
			this.__haskey = this.__key != null;
			return value;
		} else {
			return this.__key;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewColumnDefinition::Key()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::SetCreateNewCellBlock(Infragistics.CreateNewCellBlock)" />*/
	setCreateNewCellBlock: function (block) {
		this.__createNewCellBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::SetCreateNewCellBlock(Infragistics.CreateNewCellBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::CreateCell(System.String)" />*/
	createCell: function (identifier) {
		if (this.__createNewCellBlock != null) {
			return this.__createNewCellBlock(identifier);
		}
		return new $.ig.CPGridViewCellBase(identifier);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::CreateCell(System.String)" />*/
	,
	_resolveIdentifierBlock: null,
	_prepareDataForCellBlock: null,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewColumnDefinition::ResolveIdentifier(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	resolveIdentifier: function (gridView, path, dsh) {
		var identifier = null;
		if (this._resolveIdentifierBlock != null) {
			identifier = this._resolveIdentifierBlock(gridView, path);
		}
		if (identifier == null) {
			if (this.__haskey) {
				return this.__key;
			}
			return path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.none ? "cell" : "fixedCell";
		}
		return identifier;
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewColumnDefinition::ResolveIdentifier(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::BeforeDataSet(Infragistics.CPGridViewCellBase)" />*/
	beforeDataSet: function (cell) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewColumnDefinition::BeforeDataSet(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewColumnDefinition::PretreatCellData(System.Object)" />*/
	pretreatCellData: function (cellData) {
		if (this._prepareDataForCellBlock != null) {
			return this._prepareDataForCellBlock(cellData);
		}
		return cellData;
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewColumnDefinition::PretreatCellData(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	getCell: function (gridView, path, dsh) {
		if (this.__emptyCol) {
			return null;
		}
		var data = dsh.resolveDataObjectForRow(path);
		if (this.dataIsListOfCells()) {
			return data;
		}
		var cell = null;
		if (data != null || !this.treatNullDataAsNullCell()) {
			var identifier = this.resolveIdentifier(gridView, path, dsh);
			cell = gridView.dequeueReusableCellWithIdentifier(identifier);
			if (cell == null) {
				cell = this.createCell(identifier);
			}
			cell._setupCellDelegate = this.__setupCellDelegate;
			this.beforeDataSet(cell);
			cell.data(this.pretreatCellData(data));
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	_createHeaderBlock: null,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getHeaderCell: function (gridView, path) {
		if (this._createHeaderBlock != null) {
			return this._createHeaderBlock(gridView, path);
		}
		var identifier = path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.none ? "headerCell" : "fixedHeaderCell";
		var cell = gridView.dequeueReusableCellWithIdentifier(identifier);
		if (cell == null) {
			cell = new $.ig.CPGridViewItemCell($.ig.CPTheme.prototype.itemGuideStyleLarge, identifier);
			cell.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
			cell.textLabel().setTextAlignment(this.textAlignment());
		}
		cell.textLabel().setText(this._headerText);
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewColumnDefinition::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPColumnWidth Infragistics.CPGridViewColumnDefinition::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this.__width = value;
			return value;
		} else {
			return this.__width;
		}
	}
	/*<EndProperty Name="Infragistics.CPColumnWidth Infragistics.CPGridViewColumnDefinition::Width()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewCellSetupDelegate Infragistics.CPGridViewColumnDefinition::SetupCellDelegate()" />*/
	setupCellDelegate: function (value) {
		if (arguments.length === 1) {
			this.__setupCellDelegate = value;
			return value;
		} else {
			return this.__setupCellDelegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPGridViewCellSetupDelegate Infragistics.CPGridViewColumnDefinition::SetupCellDelegate()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewColumnDefinition::ResolveValueForObject(System.Object, Infragistics.CPGridViewDatasourceHelper)" />*/
	resolveValueForObject: function (obj, dsh) {
		var val = null;
		if (obj != null) {
			val = $.ig.NativeReflectorUtility.prototype.getPropertyValue(this.key(), obj);
			if (val != null) {
				return $.ig.NativeStringUtility.prototype.toString1(val);
			}
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewColumnDefinition::ResolveValueForObject(System.Object, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	_treatNullDataAsNullCell: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewColumnDefinition::TreatNullDataAsNullCell()" />*/
	treatNullDataAsNullCell: function (value) {
		if (arguments.length === 1) {
			this._treatNullDataAsNullCell = value;
			return value;
		} else {
			return this._treatNullDataAsNullCell;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewColumnDefinition::TreatNullDataAsNullCell()" />*/
	,
	$type: new $.ig.Type('CPGridViewColumnDefinition', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewColumnDefinition" />*/

/*<BeginType Name="Infragistics.CPColorColumn" />*/

$.ig.util.defType('CPColorColumn', 'CPGridViewColumnDefinition', {
	__colorChanged: null,
	init: function (key, colorChanged) {
		$.ig.CPGridViewColumnDefinition.prototype.init.call(this, 0, key);
		this.__colorChanged = colorChanged;
	},
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPColorColumn::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	getCell: function (gridView, path, dsh) {
		var cell = gridView.dequeueReusableCellWithIdentifier("cell");
		if (cell == null) {
			cell = new $.ig.CPColorCell("cell");
		}
		var info = dsh.resolveDataObjectForRow(path);
		cell.data(info);
		cell._colorChanged = this.__colorChanged;
		gridView.registerElementInDynamicContainer(cell);
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPColorColumn::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	$type: new $.ig.Type('CPColorColumn', $.ig.CPGridViewColumnDefinition.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPColorColumn" />*/

/*<BeginType Name="Infragistics.CPColorCell" />*/

$.ig.util.defType('CPColorCell', 'CPGridViewCellBase', {
	__roundedView: null,
	__selectedIcon: null,
	__clearIcon: null,
	init: function (identifier) {
		$.ig.CPGridViewCellBase.prototype.init.call(this, identifier);
	},
	_colorChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.CPColorCell::Setup()" />*/
	setup: function () {
		$.ig.CPGridViewCellBase.prototype.setup.call(this);
		this.__roundedView = new $.ig.CPView();
		this.__roundedView.clipToBounds(true);
		this.addSubview(this.__roundedView);
		this.__clearIcon = new $.ig.PathIconView();
		this.__clearIcon.setIcon($.ig.UIPathIcons.prototype.icons().getDashedCircleIcon());
		this.__clearIcon.iconColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__clearIcon.isHidden(true);
		this.addSubview(this.__clearIcon);
		this.__selectedIcon = new $.ig.PathIconView();
		this.__selectedIcon.setIcon($.ig.UIPathIcons.prototype.icons().getTickIcon());
		this.addSubview(this.__selectedIcon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorCell::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewCellBase.prototype.sizeChanged.call(this, w, h);
		var size = $.ig.truncate((h * 0.9));
		var checkSize = $.ig.truncate((size * 0.6));
		this.__roundedView.setCornerRadius($.ig.truncate((size / 2)));
		this.measureView(this.__roundedView, $.ig.intDivide(w, 2) - $.ig.intDivide(size, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(size, 2), size, size);
		this.measureView(this.__clearIcon, $.ig.intDivide(w, 2) - $.ig.intDivide(size, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(size, 2), size, size);
		var info = this.data();
		if (info != null) {
			this.measureView1(this.__selectedIcon, $.ig.intDivide(w, 2) - $.ig.intDivide(checkSize, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(checkSize, 2), checkSize, checkSize, (info._isSelected ? 1 : 0));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorCell::DataSet()" />*/
	dataSet: function () {
		$.ig.CPGridViewCellBase.prototype.dataSet.call(this);
		var info = this.data();
		this.__selectedIcon.iconColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.resolveForgroundColorForColor(info._color)));
		this.__clearIcon.isHidden(info._color != 0);
		var nativeColor = $.ig.ColorUtility.prototype.convertToNative(info._color);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__roundedView, "color_" + nativeColor);
		this.__roundedView.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(info._color));
		this.layoutCell();
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorCell::DataSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPColorCell::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPGridViewCellBase.prototype.handleClick.call(this, x, y);
		var current = this.data();
		if (!current._isSelected) {
			var data = this._gridView.getDataSource().data();
			var count = data.length;
			for (var i = 0; i < count; i++) {
				var info = data[i];
				info._isSelected = false;
			}
			current._isSelected = true;
			this._gridView.updateData(true);
			if (this._colorChanged != null) {
				this._colorChanged();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPColorCell::HandleClick(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPColorCell', $.ig.CPGridViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPColorCell" />*/

/*<BeginType Name="Infragistics.CPContentPopupDynamicSizingViewDelegate" />*/

$.ig.util.defType('CPContentPopupDynamicSizingViewDelegate', 'Object', {
	$type: new $.ig.Type('CPContentPopupDynamicSizingViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPContentPopupDynamicSizingViewDelegate" />*/

/*<BeginType Name="Infragistics.CPPopupViewDelegate" />*/

$.ig.util.defType('CPPopupViewDelegate', 'Object', {
	$type: new $.ig.Type('CPPopupViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPPopupViewDelegate" />*/

/*<BeginType Name="Infragistics.CPContentView" />*/

$.ig.util.defType('CPContentView', 'CPView', {
	__shadowView: null,
	__containerView: null,
	__contentSupportsPopupDelegate: false,
	init: function () {
		$.ig.CPView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::EnsureContentContainer()" />*/
	ensureContentContainer: function () {
		if (this.__shadowView == null) {
			this.__shadowView = new $.ig.CPView();
			this.addSubview(this.__shadowView);
		}
		if (this.__containerView == null) {
			this.__containerView = new $.ig.CPView();
			this.__containerView.clipToBounds(true);
			this.addSubview(this.__containerView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::EnsureContentContainer()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPContentView::ContentContainer()" />*/
	contentContainer: function () {
		this.ensureContentContainer();
		return this.__containerView;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPContentView::ContentContainer()" />*/
	,
	__contentView: null,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::AddContentView(Infragistics.CPViewBase)" />*/
	addContentView: function (content) {
		this.removeContent();
		this.__contentView = content;
		this.contentContainer().addSubview(this.__contentView);
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, this.__contentView) !== null) {
			this.__contentSupportsPopupDelegate = true;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::AddContentView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::RemoveContent()" />*/
	removeContent: function () {
		if (this.__contentView != null) {
			this.contentContainer().removeSubview(this.__contentView);
			this.__contentView = null;
			this.__contentSupportsPopupDelegate = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::RemoveContent()" />*/
	,
	__headerView: null,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::AddHeaderView(Infragistics.CPViewBase)" />*/
	addHeaderView: function (view) {
		this.removeHeader();
		this.__headerView = view;
		this.contentContainer().addSubview(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::AddHeaderView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::RemoveHeader()" />*/
	removeHeader: function () {
		if (this.__headerView != null) {
			this.contentContainer().removeSubview(this.__headerView);
			this.__headerView = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::RemoveHeader()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPContentView::ShadowView()" />*/
	shadowView: function () {
		this.ensureContentContainer();
		return this.__shadowView;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPContentView::ShadowView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::HideShadow()" />*/
	hideShadow: function () {
		this.ensureContentContainer();
		this.__shadowView.isHidden(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::HideShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::ShowShadow()" />*/
	showShadow: function () {
		this.ensureContentContainer();
		this.__shadowView.isHidden(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::ShowShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::SetCornerRadius(System.Double)" />*/
	setCornerRadius: function (cornerRadius) {
		this.ensureContentContainer();
		this.__shadowView.setCornerRadius(cornerRadius);
		this.__containerView.setCornerRadius(cornerRadius);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::SetCornerRadius(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::SetBackgroundColor(System.String)" />*/
	setBackgroundColor: function (color) {
		$.ig.CPView.prototype.setBackgroundColor.call(this, color);
		this.ensureContentContainer();
		this.__shadowView.setBackgroundColor(color);
		this.__containerView.setBackgroundColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::SetBackgroundColor(System.String)" />*/
	,
	_stillNeedsSizeChanged: false,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		this._stillNeedsSizeChanged = false;
		this.ensureContentContainer();
		this.measureView1(this.__shadowView, 0, 0, w, h, 1);
		this.measureView1(this.__containerView, 0, 0, w, h, 1);
		var y = 0;
		if (this.__headerView != null && !this.__headerView.isHidden()) {
			this.__headerView.calculateSizeToFit();
			var hh = this.__headerView.getCalculatedHeight();
			this.contentContainer().measureView1(this.__headerView, 0, y, w, hh, 1);
			y += hh;
			h -= hh;
		}
		if (this.__contentView != null) {
			this.__containerView.measureView1(this.__contentView, 0, y, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPContentView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		$.ig.CPView.prototype.calculateSizeToFit.call(this);
		var h = 0;
		if (this.__headerView != null && !this.__headerView.isHidden()) {
			this.__headerView.calculateSizeToFit();
			h += this.__headerView.getCalculatedHeight();
		}
		if (this.__contentView != null && !this.__contentView.isHidden()) {
			this.__contentView.calculateSizeToFit();
			h += this.__contentView.getCalculatedHeight();
		}
		if (h == 0) {
			h = this.__ph;
		}
		return h;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPContentView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPContentView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		$.ig.CPView.prototype.calculateSizeToFit.call(this);
		var w = 0;
		if (this.__contentView != null && !this.__contentView.isHidden()) {
			this.__contentView.calculateSizeToFit();
			w += this.__contentView.getCalculatedWidth();
		}
		return w;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPContentView::GetCalculatedWidth()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentView::ForcedPopupPosition()" />*/
	forcedPopupPosition: function () {
		if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			return (this.__contentView).forcedPopupPosition();
		}
		return $.ig.CPPopupPosition.prototype.none;
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentView::ForcedPopupPosition()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPContentView::CanContentPopupBeFullScreen()" />*/
	canContentPopupBeFullScreen: function () {
		if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			(this.__contentView).canContentPopupBeFullScreen();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPContentView::CanContentPopupBeFullScreen()" />*/
	,
	__ph: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::ContentPopupContainerSizeChanged(System.Int32, System.Int32)" />*/
	contentPopupContainerSizeChanged: function (w, h) {
		this.__ph = h;
		if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			(this.__contentView).contentPopupContainerSizeChanged(w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::ContentPopupContainerSizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPContentView::PopupId()" />*/
	popupId: function (value) {
		if (arguments.length === 1) {
			if (this.__contentSupportsPopupDelegate) {
				(this.__contentView).popupId(value);
			}
			return value;
		} else {
			if (this.__contentSupportsPopupDelegate) {
				return (this.__contentView).popupId();
			}
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPContentView::PopupId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::PopupFinishedShowing()" />*/
	popupFinishedShowing: function () {
		if (this.__contentSupportsPopupDelegate) {
			(this.__contentView).popupFinishedShowing();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::PopupFinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::PopupClosing()" />*/
	popupClosing: function () {
		if (this.__contentSupportsPopupDelegate) {
			(this.__contentView).popupClosing();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::PopupClosing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentView::CleanupAfterPopupCloses()" />*/
	cleanupAfterPopupCloses: function () {
		if (this.__contentSupportsPopupDelegate) {
			(this.__contentView).cleanupAfterPopupCloses();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentView::CleanupAfterPopupCloses()" />*/
	,
	$type: new $.ig.Type('CPContentView', $.ig.CPView.prototype.$type, [$.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, $.ig.CPPopupViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPContentView" />*/

/*<BeginType Name="Infragistics.ViewController" />*/

$.ig.util.defType('ViewController', 'Object', {
	__presentedViewController: null,
	__presentedFormInterceptView: null,
	__presentedVCSizeChangedBlock: null,
	_hasFocusManagerRegistered: false,
	__viewLoaded: false,
	__viewCreated: false,
	__isUnloaded: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewController::Unloaded()" />*/
	unloaded: function () {
		return this.__isUnloaded;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewController::Unloaded()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::SetStatusBarStyleAsLight(System.Boolean)" />*/
	setStatusBarStyleAsLight: function (light) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::SetStatusBarStyleAsLight(System.Boolean)" />*/
	,
	__titleView: null,
	__title: null,
	__view: null,
	__isInit: false,
	__rightBarButtonItems: null,
	__leftBarButtonItems: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.internalSetup();
	},
	/*<BeginMethod Name="System.Void Infragistics.ViewController::InternalSetup()" />*/
	internalSetup: function () {
		if (!this.__isInit) {
			this.__isInit = true;
			this.modalPresentationStyle($.ig.ViewControllerModalPresentationStyle.prototype.fullScreen);
			this.setup();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::InternalSetup()" />*/
	,
	__hideBackButton: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewController::HidesBackButton()" />*/
	hidesBackButton: function (value) {
		if (arguments.length === 1) {
			this.__hideBackButton = value;
			this.notifyNavBarOfChange();
			return value;
		} else {
			return this.__hideBackButton;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewController::HidesBackButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::Setup()" />*/
	setup: function () {
		this.__rightBarButtonItems = new $.ig.Array();
		this.__leftBarButtonItems = new $.ig.Array();
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::Setup()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ViewController::RightNavBarItems()" />*/
	rightNavBarItems: function () {
		return this.__rightBarButtonItems;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ViewController::RightNavBarItems()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.ViewController::LeftNavBarItems()" />*/
	leftNavBarItems: function () {
		return this.__leftBarButtonItems;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.ViewController::LeftNavBarItems()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.ViewController::View()" />*/
	view: function (value) {
		if (arguments.length === 1) {
			this.__view = value;
			return value;
		} else {
			this.ensureViewCreated();
			return this.__view;
		}
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.ViewController::View()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.ViewController::TitleView()" />*/
	titleView: function (value) {
		if (arguments.length === 1) {
			this.__titleView = value;
			this.notifyNavBarOfChange();
			return value;
		} else {
			return this.__titleView;
		}
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.ViewController::TitleView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::EnsureViewCreated()" />*/
	ensureViewCreated: function () {
		var $self = this;
		if (!this.__viewCreated) {
			this.loadView();
			if (this.__view == null) {
				this.__view = new $.ig.CPViewBase();
			}
			this.__view.isCaptureView(true);
			this.__view.registerSizeChangedListener(function (w, h) {
				$self.rootViewSizeChanged(w, h);
			});
			this.__viewCreated = true;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::EnsureViewCreated()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::RootViewSizeChanged(System.Int32, System.Int32)" />*/
	rootViewSizeChanged: function (w, h) {
		this.ensureViewLoaded();
		this.layoutTriggered(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::RootViewSizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::LayoutTriggered(System.Int32, System.Int32)" />*/
	layoutTriggered: function (w, h) {
		this.ensureViewCreated();
		this.layoutSubviews(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::LayoutTriggered(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	layoutSubviews: function (w, h) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::TriggerLayout()" />*/
	triggerLayout: function () {
		if (this.view().currentWidth() > 0 && this.view().currentHeight() > 0) {
			this.layoutSubviews(this.view().currentWidth(), this.view().currentHeight());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::TriggerLayout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::EnsureViewLoaded()" />*/
	ensureViewLoaded: function () {
		if (!this.__viewLoaded && this.__view != null && this.__view.currentWidth() != 0 && this.__view.currentHeight() != 0) {
			this.__viewLoaded = true;
			this.viewDidLoad();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::EnsureViewLoaded()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ViewController::ViewHasLoaded()" />*/
	viewHasLoaded: function () {
		return this.__viewLoaded;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ViewController::ViewHasLoaded()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::LoadView()" />*/
	loadView: function () {
		this.view(new $.ig.CPViewBase());
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::LoadView()" />*/
	,
	_navigationController: null,
	/*<BeginProperty Name="Infragistics.CPNavigationViewController Infragistics.ViewController::NavigationController()" />*/
	navigationController: function (value) {
		if (arguments.length === 1) {
			this._navigationController = value;
			return value;
		} else {
			return this._navigationController;
		}
	}
	/*<EndProperty Name="Infragistics.CPNavigationViewController Infragistics.ViewController::NavigationController()" />*/
	,
	_modalPresentationStyle: 0,
	/*<BeginProperty Name="Infragistics.ViewControllerModalPresentationStyle Infragistics.ViewController::ModalPresentationStyle()" />*/
	modalPresentationStyle: function (value) {
		if (arguments.length === 1) {
			this._modalPresentationStyle = value;
			return value;
		} else {
			return this._modalPresentationStyle;
		}
	}
	/*<EndProperty Name="Infragistics.ViewControllerModalPresentationStyle Infragistics.ViewController::ModalPresentationStyle()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ViewController::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this.__title = value;
			this.notifyNavBarOfChange();
			return value;
		} else {
			return this.__title;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ViewController::Title()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::NotifyNavBarOfChange()" />*/
	notifyNavBarOfChange: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::NotifyNavBarOfChange()" />*/
	,
	_presentingViewController: null,
	/*<BeginProperty Name="Infragistics.ViewController Infragistics.ViewController::PresentingViewController()" />*/
	presentingViewController: function (value) {
		if (arguments.length === 1) {
			this._presentingViewController = value;
			return value;
		} else {
			return this._presentingViewController;
		}
	}
	/*<EndProperty Name="Infragistics.ViewController Infragistics.ViewController::PresentingViewController()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::ViewWillAppear(System.Boolean)" />*/
	viewWillAppear: function (animated) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::ViewWillAppear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::ViewDidAppear(System.Boolean)" />*/
	viewDidAppear: function (animated) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::ViewDidAppear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::ViewWillDisappear(System.Boolean)" />*/
	viewWillDisappear: function (animated) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::ViewWillDisappear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::ViewDidDisappear(System.Boolean)" />*/
	viewDidDisappear: function (animated) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::ViewDidDisappear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::ViewDidLoad()" />*/
	viewDidLoad: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::ViewDidLoad()" />*/
	,
	/*<BeginProperty Name="Infragistics.ViewController Infragistics.ViewController::PresentedViewController()" />*/
	presentedViewController: function () {
		return this.__presentedViewController;
	}
	/*<EndProperty Name="Infragistics.ViewController Infragistics.ViewController::PresentedViewController()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::PresentViewController(Infragistics.ViewController, System.Boolean, Infragistics.ExecutionBlock)" />*/
	presentViewController: function (vc, animated, completion) {
		var $self = this;
		if (this.__presentedViewController == null) {
			if (this.__presentedVCSizeChangedBlock == null) {
				this.__presentedVCSizeChangedBlock = function (w, h) {
					$self.layoutPresentedView();
				};
				this.__presentedFormInterceptView = new $.ig.CPInteractionView();
				this.__presentedFormInterceptView.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.createColor1(120, 0, 0, 0)));
			}
			this.viewWillDisappear(animated);
			vc.presentingViewController(this);
			this.__presentedViewController = vc;
			if (vc.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.currentContext || vc.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.overCurrentContext) {
				this.view().addSubview(vc.view());
				vc.view().bringToFront();
			} else if (vc.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.fullScreen || vc.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.formSheet) {
				var root = $.ig.NativeUIUtility.prototype.utility().getRootParent(this.view());
				if (vc.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.formSheet) {
					root.addSubview(this.__presentedFormInterceptView);
				}
				root.addSubview(vc.view());
				vc.view().bringToFront();
			}
			var parent = vc.view().getParent();
			parent.registerSizeChangedListener(this.__presentedVCSizeChangedBlock);
			vc.viewWillAppear(animated);
			if (animated) {
				this.preparePresentedView();
				parent.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.layoutPresentedView();
				}, function (finished) {
					if (completion != null) {
						completion();
					}
					$self.viewDidDisappear(true);
					vc.viewDidAppear(true);
				});
			} else {
				this.layoutPresentedView();
				if (completion != null) {
					completion();
				}
				this.viewDidDisappear(false);
				vc.viewDidAppear(false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::PresentViewController(Infragistics.ViewController, System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::LayoutPresentedView()" />*/
	layoutPresentedView: function () {
		var parent = this.__presentedViewController.view().getParent();
		var w = parent.currentWidth();
		var h = parent.currentHeight();
		if (this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.currentContext || this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.overCurrentContext || this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.fullScreen) {
			parent.measureView(this.__presentedViewController.view(), 0, 0, w, h);
		} else if (this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.formSheet) {
			var formWidth = $.ig.NativeUIUtility.prototype.utility().densify(540);
			var formHeight = $.ig.NativeUIUtility.prototype.utility().densify(620);
			if ($.ig.NativeUIUtility.prototype.utility().isPhone()) {
				formWidth = w;
				formHeight = h;
			} else {
				if (w < formWidth) {
					formWidth = w;
				}
				if (h < formHeight) {
					formHeight = h;
				}
			}
			var formX = ($.ig.intDivide(w, 2) - $.ig.intDivide(formWidth, 2));
			var formY = ($.ig.intDivide(h, 2) - $.ig.intDivide(formHeight, 2));
			parent.measureView(this.__presentedViewController.view(), formX, formY, formWidth, formHeight);
			parent.measureView1(this.__presentedFormInterceptView, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::LayoutPresentedView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::PreparePresentedView()" />*/
	preparePresentedView: function () {
		var parent = this.__presentedViewController.view().getParent();
		var w = parent.currentWidth();
		var h = parent.currentHeight();
		if (this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.currentContext || this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.overCurrentContext || this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.fullScreen) {
			parent.measureView(this.__presentedViewController.view(), 0, h, w, h);
		} else if (this.__presentedViewController.modalPresentationStyle() == $.ig.ViewControllerModalPresentationStyle.prototype.formSheet) {
			var formWidth = $.ig.NativeUIUtility.prototype.utility().densify(540);
			var formHeight = $.ig.NativeUIUtility.prototype.utility().densify(620);
			if ($.ig.NativeUIUtility.prototype.utility().isPhone()) {
				formWidth = w;
				formHeight = h;
			} else {
				if (w < formWidth) {
					formWidth = w;
				}
				if (h < formHeight) {
					formHeight = h;
				}
			}
			var formX = ($.ig.intDivide(w, 2) - $.ig.intDivide(formWidth, 2));
			var formY = h;
			parent.measureView(this.__presentedViewController.view(), formX, formY, formWidth, formHeight);
			parent.measureView1(this.__presentedFormInterceptView, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::PreparePresentedView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::DismissViewController(System.Boolean, Infragistics.ExecutionBlock)" />*/
	dismissViewController: function (animated, completion) {
		var $self = this;
		if (this.__presentedViewController != null) {
			this.__presentedViewController.viewWillDisappear(animated);
			this.viewWillAppear(animated);
			if (animated) {
				var parent = this.__presentedViewController.view().getParent();
				parent.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.preparePresentedView();
				}, function (finished) {
					$self.__presentedViewController.viewDidDisappear(true);
					$self.removePresentedView();
					$self.viewDidAppear(true);
					if (completion != null) {
						completion();
					}
				});
			} else {
				this.__presentedViewController.viewDidDisappear(false);
				this.removePresentedView();
				this.viewDidAppear(false);
				if (completion != null) {
					completion();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::DismissViewController(System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::RemovePresentedView()" />*/
	removePresentedView: function () {
		this.__presentedViewController.presentingViewController(null);
		var parent = this.__presentedViewController.view().getParent();
		parent.unregisterSizeChangedListener(this.__presentedVCSizeChangedBlock);
		parent.removeSubview(this.__presentedViewController.view());
		parent.removeSubview(this.__presentedFormInterceptView);
		this.__presentedViewController = null;
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::RemovePresentedView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::Unload()" />*/
	unload: function () {
		this.__isUnloaded = true;
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewController::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		this._hasFocusManagerRegistered = true;
	}
	/*<EndMethod Name="System.Void Infragistics.ViewController::FocusManagerRegistered()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ViewController::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			if (this.__view != null && value != null) {
				this.__view.accessibilityName(value);
			}
			return value;
		} else {
			if (this.__view != null) {
				return this.__view.accessibilityName();
			}
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.ViewController::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('ViewController', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ViewController" />*/

/*<BeginType Name="Infragistics.CPViewController" />*/

$.ig.util.defType('CPViewController', 'ViewController', {
	init: function () {
		$.ig.ViewController.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::Setup()" />*/
	setup: function () {
		$.ig.ViewController.prototype.setup.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::NotifyNavBarOfChange()" />*/
	notifyNavBarOfChange: function () {
		$.ig.ViewController.prototype.notifyNavBarOfChange.call(this);
		if (this.navigationController() != null) {
			if (this.navigationController().topViewController() == this) {
				this.navigationController().updateNavBar(this);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::NotifyNavBarOfChange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::AddRightBarButtonItem(Infragistics.CPInteractionView)" />*/
	addRightBarButtonItem: function (button) {
		this.rightNavBarItems().add(button);
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::AddRightBarButtonItem(Infragistics.CPInteractionView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::AddLeftBarButtonItem(Infragistics.CPInteractionView)" />*/
	addLeftBarButtonItem: function (button) {
		this.leftNavBarItems().add(button);
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::AddLeftBarButtonItem(Infragistics.CPInteractionView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::ClearRightBarItems()" />*/
	clearRightBarItems: function () {
		this.rightNavBarItems().clear();
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::ClearRightBarItems()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::ClearLeftBarItems()" />*/
	clearLeftBarItems: function () {
		this.leftNavBarItems().clear();
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::ClearLeftBarItems()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::RemoveRightBarButtonItem(Infragistics.CPInteractionView)" />*/
	removeRightBarButtonItem: function (button) {
		this.rightNavBarItems().removeItem(button);
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::RemoveRightBarButtonItem(Infragistics.CPInteractionView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::RemoveLeftBarButtonItem(Infragistics.CPInteractionView)" />*/
	removeLeftBarButtonItem: function (button) {
		this.leftNavBarItems().removeItem(button);
		this.notifyNavBarOfChange();
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::RemoveLeftBarButtonItem(Infragistics.CPInteractionView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		this.view().addSubview(subView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::AddSubViewController(Infragistics.ViewController)" />*/
	addSubViewController: function (vc) {
		this.view().addSubview(vc.view());
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::AddSubViewController(Infragistics.ViewController)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::RemoveSubViewController(Infragistics.ViewController)" />*/
	removeSubViewController: function (vc) {
		this.view().removeSubview(vc.view());
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::RemoveSubViewController(Infragistics.ViewController)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureView: function (childVew, x, y, w, h) {
		this.view().measureView1(childVew, x, y, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureView1: function (elem, x, y, w, h, opacity) {
		this.view().measureView1(elem, x, y, w, h, opacity);
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::MeasureView(System.Windows.View, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginProperty Name="Infragistics.NativeSize Infragistics.CPViewController::PreferredContentSize()" />*/
	preferredContentSize: function () {
		return new $.ig.CPSize(1, 0, 0);
	}
	/*<EndProperty Name="Infragistics.NativeSize Infragistics.CPViewController::PreferredContentSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPViewController::ViewInsetsChanged()" />*/
	viewInsetsChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPViewController::ViewInsetsChanged()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewController::BottomInset()" />*/
	bottomInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewController::BottomInset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPViewController::TopInset()" />*/
	topInset: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPViewController::TopInset()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPViewController::SupportsInsets()" />*/
	supportsInsets: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPViewController::SupportsInsets()" />*/
	,
	$type: new $.ig.Type('CPViewController', $.ig.ViewController.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPViewController" />*/

/*<BeginType Name="Infragistics.ViewControllerBase" />*/

$.ig.util.defType('ViewControllerBase', 'CPViewController', {
	init: function () {
		this.__loaded = false;
		this.__focusElemsRegistered = false;
		$.ig.CPViewController.prototype.init.call(this);
	},
	__titleIconButton: null,
	__backButton: null,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Setup()" />*/
	setup: function () {
		$.ig.CPViewController.prototype.setup.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::ViewWillAppear(System.Boolean)" />*/
	viewWillAppear: function (animated) {
		$.ig.CPViewController.prototype.viewWillAppear.call(this, animated);
		if (this.navigationController() != null) {
			this.navigationController().setNavigationBarHidden(!this.hasNavBar(), animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::ViewWillAppear(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::HasNavBar()" />*/
	hasNavBar: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::HasNavBar()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::CreateSubviews(Infragistics.CPViewBase)" />*/
	createSubviews: function (container) {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::CreateSubviews(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::SetupNavBarButtons()" />*/
	setupNavBarButtons: function () {
		if (this.customNavBarExeperience()) {
			this.hidesBackButton(true);
			this.ensureTitleButton();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::SetupNavBarButtons()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::HideCustomBackButton()" />*/
	hideCustomBackButton: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::HideCustomBackButton()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::UseLoadAnimation()" />*/
	useLoadAnimation: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::UseLoadAnimation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::CustomNavBarExeperience()" />*/
	customNavBarExeperience: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::CustomNavBarExeperience()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::LoadSubviews()" />*/
	loadSubviews: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::LoadSubviews()" />*/
	,
	__actualTitle: null,
	/*<BeginProperty Name="System.String Infragistics.ViewControllerBase::ActualTitle()" />*/
	actualTitle: function () {
		return this.__actualTitle;
	}
	/*<EndProperty Name="System.String Infragistics.ViewControllerBase::ActualTitle()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.ViewControllerBase::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this.__actualTitle = value;
			if (this.customNavBarExeperience()) {
				this.ensureTitleButton();
				this.__titleIconButton.setText(value);
				this.notifyNavBarOfChange();
			} else {
				$.ig.CPViewController.prototype.title.call(this, value);
			}
			return value;
		} else {
			return $.ig.CPViewController.prototype.title.call(this);
		}
	}
	/*<EndProperty Name="System.String Infragistics.ViewControllerBase::Title()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::IsTitleButtonFocusable(System.Boolean)" />*/
	isTitleButtonFocusable: function (isFocusable) {
		if (this.__titleIconButton != null) {
			this.__titleIconButton.isFocusable(isFocusable);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::IsTitleButtonFocusable(System.Boolean)" />*/
	,
	__titleIcon: null,
	/*<BeginProperty Name="Infragistics.PathIcon Infragistics.ViewControllerBase::TitleIcon()" />*/
	titleIcon: function (value) {
		if (arguments.length === 1) {
			this.__titleIcon = value;
			this.ensureTitleButton();
			if (this.hasTitleIcon() && this.__titleIconButton != null) {
				this.__titleIconButton.setIcon(value);
				this.__titleIconButton.update();
			}
			return value;
		} else {
			return this.__titleIcon;
		}
	}
	/*<EndProperty Name="Infragistics.PathIcon Infragistics.ViewControllerBase::TitleIcon()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::HasTitleIcon()" />*/
	hasTitleIcon: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::HasTitleIcon()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::ClearLeftBarItems()" />*/
	clearLeftBarItems: function () {
		$.ig.CPViewController.prototype.clearLeftBarItems.call(this);
		this.__titleIconButton = null;
		this.__backButton = null;
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::ClearLeftBarItems()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::EnsureTitleButton()" />*/
	ensureTitleButton: function () {
		this.ensureBackButton();
		if (this.__titleIconButton == null) {
			this.__titleIconButton = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, null, null);
			this.__titleIconButton.disable();
			this.__titleIconButton.ignoreDisabledOpacity(true);
			this.__titleIconButton.setOverrideFontSize($.ig.ThemeManager.prototype.theme().fontSizeH3());
			this.__titleIconButton.setFont($.ig.ThemeManager.prototype.theme().mediumFont());
			this.__titleIconButton.overrideIconLabelPadding($.ig.ThemeManager.prototype.theme().padding15());
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__titleIconButton, "titleIconButton");
			this.addLeftBarButtonItem(this.__titleIconButton);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::EnsureTitleButton()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::AlwaysShowBackButton()" />*/
	alwaysShowBackButton: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::AlwaysShowBackButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::EnsureBackButton()" />*/
	ensureBackButton: function () {
		var $self = this;
		if (this.__backButton == null && !this.hideCustomBackButton()) {
			if (this.navigationController() != null && (this.alwaysShowBackButton() || (this.navigationController().viewControllers().length > 1 && this.navigationController().rootViewController() != this))) {
				this.__backButton = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, $.ig.UIPathIcons.prototype.icons().getBackButtonArrowIcon(), function (x, y) {
					$self.backClicked();
				});
				this.addLeftBarButtonItem(this.__backButton);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::EnsureBackButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::BackClicked()" />*/
	backClicked: function () {
		if (this.navigationController().viewControllers().length > 1) {
			this.navigationController().popViewController(true);
		} else {
			this.close();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::BackClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::ViewDidLoad()" />*/
	viewDidLoad: function () {
		$.ig.CPViewController.prototype.viewDidLoad.call(this);
		this.view().clipToBounds(true);
		this.view().setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.setupNavBarButtons();
		this.loadSubviews();
		this.loaded();
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::ViewDidLoad()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::TriggerLayout()" />*/
	triggerLayout: function () {
		$.ig.CPViewController.prototype.triggerLayout.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::TriggerLayout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::LayoutTriggered(System.Int32, System.Int32)" />*/
	layoutTriggered: function (w, h) {
		$.ig.CPViewController.prototype.layoutTriggered.call(this, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::LayoutTriggered(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::LayoutSubviews(System.Int32, System.Int32)" />*/
	layoutSubviews: function (w, h) {
		$.ig.CPViewController.prototype.layoutSubviews.call(this, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::LayoutSubviews(System.Int32, System.Int32)" />*/
	,
	__loaded: false,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Loaded()" />*/
	loaded: function () {
		this.__loaded = true;
		this.registerFocusElems();
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Loaded()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Close()" />*/
	close: function () {
		this.close2(true, null);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Close()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Close(System.Boolean)" />*/
	close1: function (animated) {
		this.close2(animated, null);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Close(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Close(System.Boolean, Infragistics.ExecutionBlock)" />*/
	close2: function (animated, handler) {
		if ($.ig.CPPopupManager.prototype.isPopupBeingShown()) {
			$.ig.CPPopupManager.prototype.closeTopMostPopup(animated);
			if (handler != null) {
				handler();
			}
		} else if (this.navigationController() != null) {
			if (this.navigationController().presentingViewController() != null) {
				this.closeNavgiationPresentedVC(animated, handler);
			} else {
				var animate = handler == null;
				this.navigationController().popViewController(animate);
				if (handler != null) {
					handler();
				}
			}
		} else if (this.presentingViewController() != null) {
			this.presentingViewController().dismissViewController(animated, handler);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Close(System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::CloseNavgiationPresentedVC(System.Boolean, Infragistics.ExecutionBlock)" />*/
	closeNavgiationPresentedVC: function (animated, handler) {
		this.navigationController().presentingViewController().dismissViewController(animated, handler);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::CloseNavgiationPresentedVC(System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		$.ig.CPViewController.prototype.focusManagerRegistered.call(this);
		this.registerFocusElems();
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::FocusManagerRegistered()" />*/
	,
	/*<BeginProperty Name="Infragistics.EscapeKeyCloseMode Infragistics.ViewControllerBase::EscapeKeyMode()" />*/
	escapeKeyMode: function () {
		return $.ig.EscapeKeyCloseMode.prototype.none;
	}
	/*<EndProperty Name="Infragistics.EscapeKeyCloseMode Infragistics.ViewControllerBase::EscapeKeyMode()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.ViewControllerBase::InitialFocusElement()" />*/
	initialFocusElement: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.ViewControllerBase::InitialFocusElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::AskToClose()" />*/
	askToClose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::AskToClose()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ViewControllerBase::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = new $.ig.Array();
		if (this.escapeKeyMode() != $.ig.EscapeKeyCloseMode.prototype.none) {
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Close", $.ig.Key.prototype.escape, false, false, false), function (k) {
				if ($self.escapeKeyMode() == $.ig.EscapeKeyCloseMode.prototype.close) {
					$self.close();
				} else {
					$self.askToClose();
				}
			}));
		}
		if (this.backspaceCausesPop() && this.navigationController().viewControllers().length > 1 && !$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().hasFocusedTextBox()) {
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Go Back", $.ig.Key.prototype.back, false, false, false), function (k) {
				$self.navigationController().popViewController(true);
			}));
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ViewControllerBase::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::ViewWillDisappear(System.Boolean)" />*/
	viewWillDisappear: function (animated) {
		$.ig.CPViewController.prototype.viewWillDisappear.call(this, animated);
		var sectionId = this.getSectionId();
		if (sectionId != null) {
			var focusManager = $.ig.CPKeyboardEventManager.prototype.getFocusManagerWithSectionId(sectionId);
			if (focusManager != null) {
				focusManager.setCurrentActiveElement(null, false);
			}
		}
		this.view().toggleFocusElements(false);
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::ViewWillDisappear(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::ElementsReadyToRegister()" />*/
	elementsReadyToRegister: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::ElementsReadyToRegister()" />*/
	,
	__focusElemsRegistered: false,
	/*<BeginMethod Name="System.String Infragistics.ViewControllerBase::GetSectionId()" />*/
	getSectionId: function () {
		if (this.navigationController() != null) {
			return this.navigationController().sectionId();
		} else {
			if ($.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager() != null) {
				var currentSection = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager()._currentSection;
				if (currentSection != null) {
					return currentSection._sectionId;
				}
			}
			return null;
		}
	}
	/*<EndMethod Name="System.String Infragistics.ViewControllerBase::GetSectionId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::RegisterFocusElems()" />*/
	registerFocusElems: function () {
		if (this.__focusElemsRegistered == false && this.__loaded && this.elementsReadyToRegister()) {
			var sectionId = this.getSectionId();
			if (sectionId != null) {
				this.view().focusManagerRegistered(sectionId);
				this.__focusElemsRegistered = true;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::RegisterFocusElems()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::ViewDidAppear(System.Boolean)" />*/
	viewDidAppear: function (animated) {
		$.ig.CPViewController.prototype.viewDidAppear.call(this, animated);
		this.view().toggleFocusElements(true);
		if ($.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager() != null) {
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setFocusedTextBox(null);
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this.initialFocusElement(), false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::ViewDidAppear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ViewControllerBase::Unload()" />*/
	unload: function () {
		$.ig.CPViewController.prototype.unload.call(this);
		this.view().unload();
	}
	/*<EndMethod Name="System.Void Infragistics.ViewControllerBase::Unload()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.ViewControllerBase::BackspaceCausesPop()" />*/
	backspaceCausesPop: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.ViewControllerBase::BackspaceCausesPop()" />*/
	,
	$type: new $.ig.Type('ViewControllerBase', $.ig.CPViewController.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ViewControllerBase" />*/

/*<BeginType Name="Infragistics.CPContentViewController" />*/

$.ig.util.defType('CPContentViewController', 'ViewControllerBase', {
	__contentView: null,
	__titleValue: null,
	__titleIcon: null,
	__hasNavBar: false,
	__hasClose: false,
	init: function (view, title, titleIcon, hasNavigationBar) {
		$.ig.ViewControllerBase.prototype.init.call(this);
		$.ig.UIUtility.prototype.setAccessibilityNameIfNotSet(view, "ContentGridView");
		this.__contentView = view;
		this.__titleValue = title;
		this.__titleIcon = titleIcon;
		this.__hasNavBar = hasNavigationBar;
		this.__hasClose = true;
	},
	__additionalButtons: null,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::AddNavBarButtons(Infragistics.CPList)" />*/
	addNavBarButtons: function (buttons) {
		this.__additionalButtons = buttons;
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::AddNavBarButtons(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::ViewDidLoad()" />*/
	viewDidLoad: function () {
		var $self = this;
		$.ig.ViewControllerBase.prototype.viewDidLoad.call(this);
		this.titleIcon(this.__titleIcon);
		this.title(this.__titleValue);
		this.view().addSubview(this.__contentView);
		if (this.__hasClose && $.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, this.__contentView) !== null) {
			this.addRightBarButtonItem($.ig.ThemeManager.prototype.theme().createNavBarButton(null, $.ig.UIPathIcons.prototype.icons().getEMCloseIcon(), function (x, y) {
				$self.close();
			}));
		}
		if (this.__additionalButtons != null) {
			for (var i = 0; i < this.__additionalButtons.length; i++) {
				this.addRightBarButtonItem(this.__additionalButtons[i]);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::ViewDidLoad()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::SetHasCloseButton(System.Boolean)" />*/
	setHasCloseButton: function (hasClose) {
		this.__hasClose = hasClose;
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::SetHasCloseButton(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::Close()" />*/
	close: function () {
		var vd = this.__contentView;
		$.ig.CPPopupManager.prototype.closePopup(vd.popupId(), true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::Close()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPContentViewController::ContentView()" />*/
	contentView: function () {
		return this.__contentView;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPContentViewController::ContentView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentViewController::CustomNavBarExeperience()" />*/
	customNavBarExeperience: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentViewController::CustomNavBarExeperience()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentViewController::HasTitleIcon()" />*/
	hasTitleIcon: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentViewController::HasTitleIcon()" />*/
	,
	/*<BeginProperty Name="Infragistics.EscapeKeyCloseMode Infragistics.CPContentViewController::EscapeKeyMode()" />*/
	escapeKeyMode: function () {
		if ($.ig.util.cast($.ig.CPKeyboardDelegate.prototype.$type, this.__contentView) !== null) {
			return (this.__contentView).getEscapeKeyModeAction();
		}
		return $.ig.ViewControllerBase.prototype.escapeKeyMode.call(this);
	}
	/*<EndProperty Name="Infragistics.EscapeKeyCloseMode Infragistics.CPContentViewController::EscapeKeyMode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::AskToClose()" />*/
	askToClose: function () {
		if ($.ig.util.cast($.ig.CPKeyboardDelegate.prototype.$type, this.__contentView) !== null) {
			(this.__contentView).askToCloseAction();
		} else {
			$.ig.ViewControllerBase.prototype.askToClose.call(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::AskToClose()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentViewController::HasNavBar()" />*/
	hasNavBar: function () {
		return this.__hasNavBar;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentViewController::HasNavBar()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	layoutSubviews: function (w, h) {
		$.ig.ViewControllerBase.prototype.layoutSubviews.call(this, w, h);
		this.view().measureView(this.__contentView, 0, 0, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPContentViewController', $.ig.ViewControllerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPContentViewController" />*/

/*<BeginType Name="Infragistics.DynamicFocusableContainer" />*/

$.ig.util.defType('DynamicFocusableContainer', 'Object', {
	$type: new $.ig.Type('DynamicFocusableContainer', null)
}, true);

/*<EndType Name="Infragistics.DynamicFocusableContainer" />*/

/*<BeginType Name="Infragistics.CPDialogTextBox" />*/

$.ig.util.defType('CPDialogTextBox', 'CPGridViewItemCellBase', {
	__textChanged: null,
	__lostFocusBlock: null,
	__gotFocusBlock: null,
	__textView: null,
	__isInErrorState: false,
	__textHasFocus: false,
	__isReadOnly: false,
	__errorIcon: null,
	__progressView: null,
	__iconView: null,
	__remainingCharactersLabel: null,
	_useShadow: false,
	_useBorder: false,
	_supportsHoverBackground: false,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPDialogTextBox.prototype.init1.call(this, 1, false, $.ig.CPTheme.prototype.itemGuideStyleMedium, "x");
	},
	init1: function (initNumber, multiLine, sizingGuide, identifier) {
		var $self = this;
		this.__characterLimit = -1;
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, sizingGuide, identifier);
		this.isFocusable(true);
		this._useShadow = true;
		this._useBorder = true;
		this._supportsHoverBackground = true;
		if (multiLine) {
			this.__textView = new $.ig.CPMultilineTextView();
		} else {
			this.__textView = new $.ig.CPTextView();
		}
		this.ensureFont();
		this.__textView.registerGotFocus(function () {
			$self.textboxGotFocus();
		});
		this.__textView.registerLostFocus(function () {
			$self.textboxLostFocus();
		});
		this.__textView.registerTextChanged(function () {
			$self.textViewTextChanged();
		});
		this.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		this.__textView.setHintTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__textView.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__textView.textBoxPadding(0);
		this.contentContainer().addSubview(this.__textView);
		$.ig.ThemeManager.prototype.theme().applyLevel2Shadow(this.shadowView());
		this.ensureTextViewStyles(false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetReadOnly(System.Boolean)" />*/
	setReadOnly: function (readOnly) {
		this.__textView.setReadOnly(readOnly);
		this._supportsHoverBackground = false;
		this.__isReadOnly = readOnly;
		this.isFocusable(false);
		this.ignoreDisabledOpacity(true);
		this.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetReadOnly(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::Setup()" />*/
	setup: function () {
		$.ig.CPGridViewItemCellBase.prototype.setup.call(this);
		this.__font = $.ig.ThemeManager.prototype.theme().regularFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetIcon(Infragistics.PathIcon)" />*/
	setIcon: function (icon) {
		if (this.__iconView == null) {
			this.__iconView = new $.ig.PathIconView();
			this.__iconView.iconColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
			this.contentContainer().addSubview(this.__iconView);
		}
		this.__iconView.setIcon(icon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterTextChanged(Infragistics.ExecutionBlock)" />*/
	registerTextChanged: function (action) {
		this.__textChanged = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterTextChanged(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterLostFocus(Infragistics.ExecutionBlock)" />*/
	registerLostFocus: function (action) {
		this.__lostFocusBlock = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterLostFocus(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterGotFocus(Infragistics.ExecutionBlock)" />*/
	registerGotFocus: function (action) {
		this.__gotFocusBlock = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::RegisterGotFocus(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::TextboxGotFocus()" />*/
	textboxGotFocus: function () {
		this.ensureTextViewStyles(true);
		if (this.__gotFocusBlock != null) {
			this.__gotFocusBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::TextboxGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::TextboxLostFocus()" />*/
	textboxLostFocus: function () {
		this.ensureTextViewStyles(false);
		if (this.__lostFocusBlock != null) {
			this.__lostFocusBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::TextboxLostFocus()" />*/
	,
	__textBoxOpacity: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureTextViewStyles(System.Boolean)" />*/
	ensureTextViewStyles: function (hasFocus) {
		this.__textHasFocus = hasFocus;
		if (hasFocus && !this.__isReadOnly) {
			this.restOpacity(1);
			if (this.__hasText) {
				this.__textBoxOpacity = 1;
			} else {
				this.__textBoxOpacity = $.ig.ThemeManager.prototype.theme().disabledOpacity();
			}
			this.disableBackgroundHighlights(true);
			if (this._useShadow) {
				this.showShadow();
			} else {
				this.hideShadow();
			}
			if (this.__remainingCharactersLabel != null) {
				this.__remainingCharactersLabel.isHidden(false);
			}
		} else {
			this.restOpacity($.ig.ThemeManager.prototype.theme().restOpacity());
			if (this.__hasText) {
				this.__textBoxOpacity = $.ig.ThemeManager.prototype.theme().restOpacity();
			} else {
				this.__textBoxOpacity = this.hintTextOpacity();
			}
			if (this._supportsHoverBackground) {
				this.disableBackgroundHighlights(false);
			} else {
				this.disableBackgroundHighlights(true);
			}
			this.hideShadow();
			if (this.__remainingCharactersLabel != null) {
				this.__remainingCharactersLabel.isHidden(true);
			}
		}
		if (this._useBorder) {
			this.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		} else {
			this.setBorderWidth(0);
		}
		if (this.__isInErrorState) {
			if (this.__errorIcon == null) {
				this.__errorIcon = new $.ig.PathIconView();
				this.__errorIcon._outlineOnly = false;
				this.__errorIcon.setIcon($.ig.UIPathIcons.prototype.icons().getErrorAlertIcon());
				this.contentContainer().addSubview(this.__errorIcon);
			}
			this.__errorIcon.isHidden(false);
			this.setBorderColor($.ig.ThemeManager.prototype.theme().errorColorTextOnly().$native());
			this.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		} else {
			if (this.__errorIcon != null) {
				this.__errorIcon.isHidden(true);
			}
			this.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		}
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureTextViewStyles(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPGridViewItemCellBase.prototype.handleClick.call(this, x, y);
		this.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::HandleClick(System.Int32, System.Int32)" />*/
	,
	__hintOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPDialogTextBox::OverrideHintTextOpacity()" />*/
	overrideHintTextOpacity: function (value) {
		if (arguments.length === 1) {
			this.__hintOpacity = value;
			this.ensureStates();
			return value;
		} else {
			return this.__hintOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPDialogTextBox::OverrideHintTextOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPDialogTextBox::HintTextOpacity()" />*/
	hintTextOpacity: function () {
		if (this.overrideHintTextOpacity() > 0) {
			return this.overrideHintTextOpacity();
		}
		return $.ig.ThemeManager.prototype.theme().disabledOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPDialogTextBox::HintTextOpacity()" />*/
	,
	__characterLimitText: null,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetCharacterLimitText(System.String)" />*/
	setCharacterLimitText: function (limitText) {
		this.__characterLimitText = limitText;
		this.updateCharacterLimit();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetCharacterLimitText(System.String)" />*/
	,
	__characterLimit: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetCharacterLimit(System.Int32)" />*/
	setCharacterLimit: function (limit) {
		this.__characterLimit = limit;
		if (this.__remainingCharactersLabel == null) {
			this.__remainingCharactersLabel = new $.ig.CPLabel();
			this.__remainingCharactersLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeSecondary(), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__remainingCharactersLabel.isHidden(true);
			this.addSubview(this.__remainingCharactersLabel);
		}
		this.updateCharacterLimit();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetCharacterLimit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::UpdateCharacterLimit()" />*/
	updateCharacterLimit: function () {
		if (this.__characterLimit > 0 && !$.ig.CPStringUtility.prototype.isNullOrEmpty(this.__characterLimitText)) {
			var charactersRemaining = this.__characterLimit;
			if (this.__hasText) {
				charactersRemaining -= this.getText().length;
			}
			this.__remainingCharactersLabel.setText($.ig.NativeStringUtility.prototype.replace(this.__characterLimitText, "%@", charactersRemaining.toString()));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::UpdateCharacterLimit()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureStates()" />*/
	ensureStates: function () {
		this.ensureTextViewStyles(this.__textHasFocus);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureStates()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::IsInErrorState()" />*/
	isInErrorState: function () {
		return this.__isInErrorState;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::IsInErrorState()" />*/
	,
	__hasText: false,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::TextViewTextChanged()" />*/
	textViewTextChanged: function () {
		var hasText = !$.ig.CPStringUtility.prototype.isNullOrEmpty(this.getText());
		if (this.__characterLimit > 0) {
			if (hasText && this.getText().length > this.__characterLimit) {
				this.setText($.ig.NativeStringUtility.prototype.substring(this.getText(), 0, this.__characterLimit));
				this.__textView.moveCaretToTheEnd();
				return;
			}
			this.updateCharacterLimit();
			this.triggerSizeChanged();
		}
		if (hasText != this.__hasText) {
			this.__hasText = hasText;
			this.ensureStates();
		}
		if (this.__textChanged != null) {
			this.__textChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::TextViewTextChanged()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::SupportsShadow()" />*/
	supportsShadow: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::SupportsShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ClearFocus()" />*/
	clearFocus: function () {
		this.__textView.clearFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPDialogTextBox::GetText()" />*/
	getText: function () {
		return this.__textView.getText();
	}
	/*<EndMethod Name="System.String Infragistics.CPDialogTextBox::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetText(System.String)" />*/
	setText: function (text) {
		this.__textView.setText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetHintText(System.String)" />*/
	setHintText: function (hintText) {
		if (hintText != null) {
			if (hintText == "URL") {
				this.__textView.accessibilityName("pin_link_text_view_" + hintText);
			} else if (hintText == "Name your Topic...") {
				this.__textView.accessibilityName("add_topic_textbox");
			} else {
				this.__textView.accessibilityName("pin_link_text_view_Title");
			}
		}
		this.__textView.setHintText(hintText);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetHintText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetError(System.String)" />*/
	setError: function (errorTitle) {
		this.updateErrorState(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetError(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ClearError()" />*/
	clearError: function () {
		this.updateErrorState(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ClearError()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::UpdateErrorState(System.Boolean)" />*/
	updateErrorState: function (error) {
		this.__isInErrorState = error;
		this.ensureTextViewStyles(this.__textHasFocus);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::UpdateErrorState(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SetFocus()" />*/
	setFocus: function () {
		this.__textView.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SetFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ShowProgress()" />*/
	showProgress: function () {
		if (this.__progressView == null) {
			this.__progressView = new $.ig.ProgressDisplayView(true, null, null);
			this.contentContainer().addSubview(this.__progressView);
		}
		this.__progressView.isHidden(false);
		this.__progressView.start();
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ShowProgress()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::HideProgress()" />*/
	hideProgress: function () {
		if (this.__progressView != null) {
			this.__progressView.stop();
			this.__progressView.isHidden(true);
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::HideProgress()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasText()" />*/
	hasText: function () {
		return !$.ig.CPStringUtility.prototype.isNullOrEmpty(this.getText());
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasText()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasLeftContent()" />*/
	hasLeftContent: function () {
		return this.__iconView != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasLeftContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutLeftContentArea: function (index, x, guide) {
		$.ig.CPGridViewItemCellBase.prototype.layoutLeftContentArea.call(this, index, x, guide);
		if (this.__iconView != null) {
			this.layoutIcon(this.__iconView, 0, index, x, guide);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasCenterContentArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasRightContent()" />*/
	hasRightContent: function () {
		return this.__isInErrorState || (this.__progressView != null && !this.__progressView.isHidden()) || this.__additionalButton != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDialogTextBox::HasRightContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		$.ig.CPGridViewItemCellBase.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
		this.__textView.calculateSizeToFit1(w);
		var th = this.__textView.getCalculatedHeight();
		this.contentContainer().measureView1(this.__textView, x, $.ig.intDivide(h, 2) - $.ig.intDivide(th, 2), w, th, this.resolveOpacity(this.__textBoxOpacity, !this.__textHasFocus));
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		$.ig.CPGridViewItemCellBase.prototype.layoutRightContentArea.call(this, index, x, guide);
		if (this.__errorIcon != null) {
			this.layoutIcon(this.__errorIcon, 0, index, x, guide);
		}
		if (this.__progressView != null) {
			this.layoutIcon(this.__progressView, 0, index, x, guide);
		}
		if (this.__additionalButton != null) {
			this.layoutButton1(this.__additionalButton, 0, false, false, index, x, guide);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemCellBase.prototype.sizeChanged.call(this, w, h);
		if (this.__remainingCharactersLabel != null) {
			this.__remainingCharactersLabel.calculateSizeToFit();
			var spacing = $.ig.ThemeManager.prototype.theme().padding5();
			var rcw = this.__remainingCharactersLabel.getCalculatedWidth();
			var rch = this.__remainingCharactersLabel.getCalculatedHeight();
			this.measureView1(this.__remainingCharactersLabel, w - rcw - spacing, h - rch - spacing, rcw, rch, $.ig.ThemeManager.prototype.theme().disabledOpacity());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::Register(System.String)" />*/
	register: function (group) {
		$.ig.CPTextViewManager.prototype.register(this.__textView, group);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::Register(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ContainerGotForwardFocus()" />*/
	containerGotForwardFocus: function () {
		this.__textView.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ContainerGotForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ContainerGotBackwardFocus()" />*/
	containerGotBackwardFocus: function () {
		this.__textView.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ContainerGotBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPDialogTextBox::ContainerHasFocusableElements()" />*/
	containerHasFocusableElements: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPDialogTextBox::ContainerHasFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	elementInContainerGotManualFocus: function (element) {
		this.__textView.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTextView Infragistics.CPDialogTextBox::TextView()" />*/
	textView: function () {
		return this.__textView;
	}
	/*<EndProperty Name="Infragistics.CPTextView Infragistics.CPDialogTextBox::TextView()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDialogTextBox::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.sizingGuide().height();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDialogTextBox::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDialogTextBox::GetCalculatedHeight(System.Int32)" />*/
	getCalculatedHeight1: function (w) {
		$.ig.CPGridViewItemCellBase.prototype.calculateSizeToFit.call(this);
		var centerWidth = this.layoutContent(w, this.sizingGuide().height(), false);
		this.__textView.calculateSizeToFit1(centerWidth);
		return this.__textView.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDialogTextBox::GetCalculatedHeight(System.Int32)" />*/
	,
	__font: null,
	/*<BeginProperty Name="System.String Infragistics.CPDialogTextBox::Font()" />*/
	font: function (value) {
		if (arguments.length === 1) {
			this.__font = value;
			this.ensureFont();
			return value;
		} else {
			return this.__font;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPDialogTextBox::Font()" />*/
	,
	__overrideFontSize: 0,
	/*<BeginProperty Name="System.Single Infragistics.CPDialogTextBox::OverrideFontSize()" />*/
	overrideFontSize: function (value) {
		if (arguments.length === 1) {
			this.__overrideFontSize = value;
			this.ensureFont();
			return value;
		} else {
			return this.__overrideFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CPDialogTextBox::OverrideFontSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureFont()" />*/
	ensureFont: function () {
		if (this.sizingGuide() != null) {
			if (this.overrideFontSize() <= 0) {
				this.applyFont(this.sizingGuide().fontSize(), this.__font);
			} else {
				this.applyFont(this.overrideFontSize(), this.__font);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::EnsureFont()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ApplyFont(System.Single, System.String)" />*/
	applyFont: function (fontSize, font) {
		if (this.__textView != null) {
			this.__textView.setFont(fontSize, font);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ApplyFont(System.Single, System.String)" />*/
	,
	__additionalButton: null,
	__additionalButtonClick: null,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::AddButton(Infragistics.PathIcon, System.String, Infragistics.ExecutionBlock)" />*/
	addButton: function (icon, tooltip, action) {
		var $self = this;
		if (this.__additionalButton != null) {
			this.removeSubview(this.__additionalButton);
			this.__additionalButton = null;
		}
		this.__additionalButtonClick = action;
		this.__additionalButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__additionalButton.shouldSteaFocusFromTextEditors(false);
		this.__additionalButton.setTooltip(tooltip, null);
		this.__additionalButton.setIcon(icon);
		this.__additionalButton.addClickHandler(function (x, y) {
			$self.additionalButtonClicked();
		});
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__additionalButton, "dialog_Button");
		this.addSubview(this.__additionalButton);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::AddButton(Infragistics.PathIcon, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::ToggleButton(System.Boolean)" />*/
	toggleButton: function (turnOn) {
		if (turnOn) {
			this.__additionalButton.enable();
			this.__additionalButton.isHidden(false);
		} else {
			this.__additionalButton.disable();
			this.__additionalButton.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::ToggleButton(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDialogTextBox::AdditionalButtonClicked()" />*/
	additionalButtonClicked: function () {
		if (this.__additionalButtonClick != null) {
			this.__additionalButtonClick();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDialogTextBox::AdditionalButtonClicked()" />*/
	,
	$type: new $.ig.Type('CPDialogTextBox', $.ig.CPGridViewItemCellBase.prototype.$type, [$.ig.DynamicFocusableContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPDialogTextBox" />*/

/*<BeginType Name="Infragistics.CPEditableTitle" />*/

$.ig.util.defType('CPEditableTitle', 'CPInteractionView', {
	__titleLabel: null,
	__editButton: null,
	__titleColor: null,
	__titleModified: null,
	__currentOpacity: 0,
	__restOpacity: 0,
	__tooltip: null,
	__editPopupTitleText: null,
	__placeHolderText: null,
	__cancelEditText: null,
	__acceptEditText: null,
	__acceptEditIcon: null,
	__canEdit: false,
	init: function (placeholderText, editPopupTitleText, titleModified, editButtonIcon, editButtonTooltip, acceptEditText, cancelEditText, acceptEditIcon) {
		var $self = this;
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__canEdit = true;
		this.__tooltip = editButtonTooltip;
		this.__titleColor = $.ig.ThemeManager.prototype.theme().foregroundColor().$native();
		this.__titleModified = titleModified;
		this.__editPopupTitleText = editPopupTitleText;
		this.__placeHolderText = placeholderText;
		this.__cancelEditText = cancelEditText;
		this.__acceptEditText = acceptEditText;
		this.__acceptEditIcon = acceptEditIcon;
		this.__titleLabel = new $.ig.CPOverflowLabel();
		this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__titleLabel.setText(this.__placeHolderText);
		this.addSubview(this.__titleLabel);
		this.__currentOpacity = $.ig.ThemeManager.prototype.theme().disabledOpacity();
		this.__restOpacity = $.ig.ThemeManager.prototype.theme().restOpacity();
		this.__editButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.minimal);
		this.__editButton.setIcon(editButtonIcon);
		this.__editButton.disable();
		this.__editButton.ignoreDisabledOpacity(true);
		this.__editButton.restOpacity(1);
		this.__editButton.setCursor($.ig.CPCursors.prototype.clickable);
		if (this.__tooltip != null) {
			this.setTooltip(this.__tooltip, null);
		}
		this.__editButton.addClickHandler(function (x, y) {
			$self.editTitle();
		});
		this.addSubview(this.__editButton);
		this.isFocusable(false);
		this.supportsInteractionOpacity(true);
		this.__leftEdgePadding = $.ig.ThemeManager.prototype.theme().padding20();
		this.__rightEdgePadding = $.ig.ThemeManager.prototype.theme().padding10();
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "editableTitle");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__editButton, "editableTitleButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__titleLabel, "editableTitleLabel");
	},
	__leftEdgePadding: 0,
	__rightEdgePadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPEditableTitle::LeftEdgePadding()" />*/
	leftEdgePadding: function () {
		return this.__leftEdgePadding;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPEditableTitle::LeftEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPEditableTitle::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPEditableTitle::SupportsHighlightBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPEditableTitle::SupportsTooltips()" />*/
	supportsTooltips: function () {
		return this.__tooltip != null || this.__titleLabel.isOverflow();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPEditableTitle::SupportsTooltips()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		if (this.__canEdit) {
			this.editTitle();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::SetPadding(System.Int32)" />*/
	setPadding: function (padding) {
		this.__leftEdgePadding = padding;
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::SetPadding(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::SetRestOpacity(System.Double)" />*/
	setRestOpacity: function (opacity) {
		this.__restOpacity = opacity;
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::SetRestOpacity(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.__titleLabel.setFont(fontSize, font);
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::SetTextColor(System.String)" />*/
	setTextColor: function (color) {
		this.__titleColor = color;
		this.__titleLabel.setTextColor(this.__titleColor);
		this.__editButton.setColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.lightenOrDarkenColor($.ig.ColorUtility.prototype.convertToInt(color), 0.2)));
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::EditTitle()" />*/
	editTitle: function () {
		var $self = this;
		$.ig.CPPopupManager.prototype.showTextEditorPopup2(this, this.title(), this.__editPopupTitleText, this.__acceptEditText, this.__cancelEditText, this.__acceptEditIcon, function (s) {
			$self.renameComplete(s);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::EditTitle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::RenameComplete(System.String)" />*/
	renameComplete: function (val) {
		val = $.ig.NativeStringUtility.prototype.trim(val);
		var valid = !val.equals("") && !val.equals(this.title());
		if (valid) {
			this.title(val);
			if (this.__titleModified != null) {
				this.__titleModified(val);
			}
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::RenameComplete(System.String)" />*/
	,
	__ignoreSizeChanged: false,
	__calcWidth: 0,
	__calcHeight: 0,
	__labelWidth: 0,
	__labelHeight: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPEditableTitle::CalculateSize(System.Int32)" />*/
	calculateSize: function (limitingWidth) {
		this.__ignoreSizeChanged = true;
		var parent = this.getParent();
		if (parent != null) {
			parent.measureView(this, 0, 0, 1, 1);
		}
		this.__ignoreSizeChanged = false;
		var buttonSize = this.__canEdit ? this.__editButton.getCalculatedHeight() : 0;
		var availWidth = limitingWidth - buttonSize - this.__leftEdgePadding - this.__rightEdgePadding;
		this.__labelHeight = this.__titleLabel.calculateSize(availWidth);
		this.__calcHeight = Math.max(buttonSize, this.__labelHeight);
		this.__labelWidth = Math.min(availWidth, this.__titleLabel.getCalculatedWidth());
		this.__calcWidth = this.__labelWidth + buttonSize + this.__leftEdgePadding + this.__rightEdgePadding;
		return this.__calcHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPEditableTitle::CalculateSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPEditableTitle::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPEditableTitle::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPEditableTitle::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPEditableTitle::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		this.setCornerRadius(h / 2);
		if (this.__ignoreSizeChanged) {
			return;
		}
		var cellHeight = this.__editButton.getCalculatedHeight();
		this.__editButton.isHidden(!this.__canEdit);
		this.measureView1(this.__titleLabel, this.__leftEdgePadding, $.ig.intDivide((h - this.__labelHeight), 2), this.__labelWidth, this.__labelHeight, this.resolveOpacity(this.__currentOpacity, true));
		this.measureView1(this.__editButton, this.__labelWidth + this.__leftEdgePadding, $.ig.intDivide((h - cellHeight), 2), cellHeight, cellHeight, this.resolveOpacity($.ig.ThemeManager.prototype.theme().restOpacity(), true));
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::DisplayTooltip()" />*/
	displayTooltip: function () {
		if (this.__tooltip != null) {
			this.showTooltipForDuration(5);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::DisplayTooltip()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditableTitle::CanEdit(System.Boolean)" />*/
	canEdit: function (canEdit) {
		this.__canEdit = canEdit;
		this.disableBackgroundHighlights(!this.__canEdit);
		this.supportsInteractionOpacity(this.__canEdit);
		if (canEdit) {
			this.setCursor($.ig.CPCursors.prototype.clickable);
		} else {
			this.setCursor($.ig.CPCursors.prototype.$default);
		}
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditableTitle::CanEdit(System.Boolean)" />*/
	,
	__text: null,
	/*<BeginProperty Name="System.String Infragistics.CPEditableTitle::Title()" />*/
	title: function (value) {
		if (arguments.length === 1) {
			this.__text = value;
			if (this.__tooltip == null) {
				this.setTooltip(this.__text, null);
			}
			if (this.__text != null && !this.__text.equals("")) {
				this.__titleLabel.setText(this.title());
				this.__currentOpacity = this.__restOpacity;
			} else {
				this.__titleLabel.setText(this.__placeHolderText);
				this.__currentOpacity = $.ig.ThemeManager.prototype.theme().disabledOpacity();
			}
			this.triggerSizeChanged();
			return value;
		} else {
			return this.__text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPEditableTitle::Title()" />*/
	,
	$type: new $.ig.Type('CPEditableTitle', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPEditableTitle" />*/

/*<BeginType Name="Infragistics.CPGradientView" />*/

$.ig.util.defType('CPGradientView', 'DrawingViewBase', {
	_gradient: null,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.DrawingViewBase.prototype.init.call(this);
	},
	init1: function (initNumber, viewGradient) {
		$.ig.DrawingViewBase.prototype.init.call(this);
		this._gradient = viewGradient;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGradientView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		$.ig.DrawingViewBase.prototype.draw.call(this, canvas, w, h, info);
		if (this._gradient != null) {
			var width = w;
			var height = h;
			this.saveCanvas(canvas);
			this.resetPath(canvas);
			this.moveTo(canvas, 0, 0);
			this.lineTo(canvas, 0, height);
			this.lineTo(canvas, width, height);
			this.lineTo(canvas, width, 0);
			this.closePath(canvas);
			this.fillGradientShape(canvas, this._gradient, width, height);
			this.restoreCanvas(canvas);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGradientView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	$type: new $.ig.Type('CPGradientView', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGradientView" />*/

/*<BeginType Name="Infragistics.CPImage" />*/

$.ig.util.defType('CPImage', 'Object', {
	__base64Data: null,
	__rawData: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithRawData(System.Array)" />*/
	createWithRawData: function (imgData) {
		var image = new $.ig.CPImage();
		var isString = imgData.startsWith != undefined;
		if (isString) {
			image.__base64Data = image.cleanBase64Data(imgData);
		} else {
			image.__rawData = imgData;
		}
		return image;
	}
	/*<EndMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithRawData(System.Array)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithBase64String(System.String)" />*/
	createWithBase64String: function (imgData) {
		var image = new $.ig.CPImage();
		image.__base64Data = image.cleanBase64Data(imgData);
		return image;
	}
	/*<EndMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithBase64String(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithImage(System.Html.Element)" />*/
	createWithImage: function (img) {
		var image = new $.ig.CPImage();
		image.__image = img;
		return image;
	}
	/*<EndMethod Name="Infragistics.CPImage Infragistics.CPImage::CreateWithImage(System.Html.Element)" />*/
	,
	__image: null,
	/*<BeginProperty Name="System.Html.Element Infragistics.CPImage::Image()" />*/
	image: function () {
		if (this.__image == null) {
			if (this.__rawData != null) {
				var data = this.__rawData;
				data = $.ig.NativeImageUtility.prototype.appendBase64Prefix($.ig.NativeImageUtility.prototype.base64EncodeByteArray(this.__rawData));
				this.__image = $.ig.NativeImageUtility.prototype.getImageFromData(data);
			} else if (this.__base64Data != null) {
				var base64 = $.ig.NativeImageUtility.prototype.appendBase64Prefix(this.__base64Data);
				this.__image = $.ig.NativeImageUtility.prototype.getImageFromData(base64);
			}
		}
		return this.__image;
	}
	/*<EndProperty Name="System.Html.Element Infragistics.CPImage::Image()" />*/
	,
	/*<BeginProperty Name="System.Array Infragistics.CPImage::RawData()" />*/
	rawData: function () {
		if (this.__rawData == null) {
			if (this.__base64Data != null) {
				this.__rawData = $.ig.NativeImageUtility.prototype.byteArrayToBase64(this.__base64Data);
			} else if (this.__image != null) {
				this.__rawData = $.ig.NativeImageUtility.prototype.getImageFileData(this.__image);
			}
		}
		return this.__rawData;
	}
	/*<EndProperty Name="System.Array Infragistics.CPImage::RawData()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPImage::NativeImageData()" />*/
	nativeImageData: function () {
		return $.ig.NativeImageUtility.prototype.getImageData(this.image());
	}
	/*<EndProperty Name="System.String Infragistics.CPImage::NativeImageData()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPImage::Base64Data()" />*/
	base64Data: function () {
		if (this.__base64Data == null) {
			if (this.__rawData != null) {
				this.__base64Data = this.cleanBase64Data($.ig.NativeImageUtility.prototype.base64EncodeByteArray(this.__rawData));
			} else if (this.__image != null) {
				this.__base64Data = this.cleanBase64Data($.ig.NativeImageUtility.prototype.getBase64ImageData(this.__image));
			}
		}
		return this.__base64Data;
	}
	/*<EndProperty Name="System.String Infragistics.CPImage::Base64Data()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPImage::CleanBase64Data(System.String)" />*/
	cleanBase64Data: function (base64) {
		if (base64 != null && $.ig.NativeStringUtility.prototype.startsWith(base64, "data:image/")) {
			var startPosition = $.ig.NativeStringUtility.prototype.indexOf(base64, ",");
			base64 = $.ig.NativeStringUtility.prototype.substring(base64, startPosition + 1, base64.length - (startPosition + 1));
		}
		return base64;
	}
	/*<EndMethod Name="System.String Infragistics.CPImage::CleanBase64Data(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPImage::IsPNG()" />*/
	isPNG: function () {
		return $.ig.NativeImageUtility.prototype.isPNG(this.rawData());
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPImage::IsPNG()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPImage::IsJPG()" />*/
	isJPG: function () {
		return $.ig.NativeImageUtility.prototype.isJPG(this.rawData());
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPImage::IsJPG()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPImage::IsGIF()" />*/
	isGIF: function () {
		return $.ig.NativeImageUtility.prototype.isGIF(this.rawData());
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPImage::IsGIF()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPImage::Extension()" />*/
	extension: function () {
		if (this.isPNG()) {
			return $.ig.CPImageUtility.prototype.extensionPNG;
		} else if (this.isJPG()) {
			return $.ig.CPImageUtility.prototype.extensionJPG;
		} else if (this.isGIF()) {
			return $.ig.CPImageUtility.prototype.extensionGIF;
		}
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.CPImage::Extension()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPImage::ImageType()" />*/
	imageType: function () {
		if (this.isPNG()) {
			return $.ig.CPImageUtility.prototype.pNGImageType;
		} else if (this.isJPG()) {
			return $.ig.CPImageUtility.prototype.jPGImageType;
		} else if (this.isGIF()) {
			return $.ig.CPImageUtility.prototype.gifImageType;
		}
		return null;
	}
	/*<EndProperty Name="System.String Infragistics.CPImage::ImageType()" />*/
	,
	__isLoaded: false,
	/*<BeginMethod Name="System.Void Infragistics.CPImage::EnsureImageLoaded(Infragistics.ObjectBlock)" />*/
	ensureImageLoaded: function (callback) {
		var $self = this;
		if (this.__isLoaded) {
			if (callback != null) {
				callback(this);
			}
		} else {
			$.ig.NativeImageUtility.prototype.onLoad(this.image(), function (o) {
				$self.imageLoaded(callback);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPImage::EnsureImageLoaded(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImage::ImageLoaded(Infragistics.ObjectBlock)" />*/
	imageLoaded: function (callback) {
		this.__isLoaded = true;
		if (callback != null) {
			callback(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPImage::ImageLoaded(Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Array Infragistics.CPImage::ResolveDataToUpload()" />*/
	resolveDataToUpload: function () {
		return $.ig.NativeImageUtility.prototype.appendBase64Prefix(this.base64Data());
	}
	/*<EndMethod Name="System.Array Infragistics.CPImage::ResolveDataToUpload()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPImage::Width()" />*/
	width: function () {
		return $.ig.NativeImageUtility.prototype.resolveImageWidth(this.image());
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPImage::Width()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPImage::Height()" />*/
	height: function () {
		return $.ig.NativeImageUtility.prototype.resolveImageHeight(this.image());
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPImage::Height()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPImage::CanCopyToClipboard()" />*/
	canCopyToClipboard: function () {
		if ($.ig.PlatformInfo.prototype.supportsCopyImageToClipboard()) {
			if (this.rawData() == null) {
				return false;
			}
			return true;
		}
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPImage::CanCopyToClipboard()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPImage::CopyToClipboard()" />*/
	copyToClipboard: function () {
		$.ig.NativeImageUtility.prototype.copyImageDataToClipboard(this.rawData());
	}
	/*<EndMethod Name="System.Void Infragistics.CPImage::CopyToClipboard()" />*/
	,
	$type: new $.ig.Type('CPImage', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPImage" />*/

/*<BeginType Name="Infragistics.CPImageUtility" />*/

$.ig.util.defType('CPImageUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Array Infragistics.CPImageUtility::ConvertImageToNativeData(System.Html.Element)" />*/
	convertImageToNativeData: function (image) {
		return $.ig.NativeImageUtility.prototype.getImageData(image);
	}
	/*<EndMethod Name="System.Array Infragistics.CPImageUtility::ConvertImageToNativeData(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPImageUtility::ResolveExtensionForFileName(System.String)" />*/
	resolveExtensionForFileName: function (fileName) {
		if (fileName != null) {
			var index = $.ig.NativeStringUtility.prototype.lastIndexOf(fileName, ".");
			if (index > 0 && index < fileName.length) {
				var ext = $.ig.NativeStringUtility.prototype.substring(fileName, index, fileName.length - index);
				ext = ext.toLowerCase();
				return ext;
			}
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPImageUtility::ResolveExtensionForFileName(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPImageUtility::IsImageExtension(System.String)" />*/
	isImageExtension: function (ext) {
		if (ext != null) {
			ext = ext.toLowerCase();
			if ($.ig.CPStringUtility.prototype.areStringsEqual(ext, $.ig.CPImageUtility.prototype.extensionPNG) || $.ig.CPStringUtility.prototype.areStringsEqual(ext, $.ig.CPImageUtility.prototype.extensionGIF) || $.ig.CPStringUtility.prototype.areStringsEqual(ext, $.ig.CPImageUtility.prototype.extensionJPG) || $.ig.CPStringUtility.prototype.areStringsEqual(ext, $.ig.CPImageUtility.prototype.extensionJPEG)) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPImageUtility::IsImageExtension(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPImageUtility::IsImageFile(System.String)" />*/
	isImageFile: function (fileName) {
		return $.ig.CPImageUtility.prototype.isImageExtension($.ig.CPImageUtility.prototype.resolveExtensionForFileName(fileName));
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPImageUtility::IsImageFile(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPImageUtility::ResolveExtensionForImageType(System.String)" />*/
	resolveExtensionForImageType: function (imageType) {
		if ($.ig.CPStringUtility.prototype.areStringsEqual(imageType, $.ig.CPImageUtility.prototype.pNGImageType)) {
			return $.ig.CPImageUtility.prototype.extensionPNG;
		}
		if ($.ig.CPStringUtility.prototype.areStringsEqual(imageType, $.ig.CPImageUtility.prototype.gifImageType)) {
			return $.ig.CPImageUtility.prototype.extensionGIF;
		}
		if ($.ig.CPStringUtility.prototype.areStringsEqual(imageType, $.ig.CPImageUtility.prototype.jPGImageType)) {
			return $.ig.CPImageUtility.prototype.extensionJPG;
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPImageUtility::ResolveExtensionForImageType(System.String)" />*/
	,
	$type: new $.ig.Type('CPImageUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPImageUtility" />*/

/*<BeginType Name="Infragistics.CPLabelTextStyle" />*/

$.ig.util.defType('CPLabelTextStyle', 'Object', {
	init: function (initNumber, text) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this._background = new $.ig.Number();
		this._foreground = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.text(text);
		this.background(0);
		this.foreground(0);
	},
	init1: function (initNumber, text, font, bg, fg) {
		this._background = new $.ig.Number();
		this._foreground = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.text(text);
		this.font(font);
		this.background(bg);
		this.foreground(fg);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPLabelTextStyle::HasStyle()" />*/
	hasStyle: function () {
		return this.font() != null || this.background() != 0 || this.foreground() != 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLabelTextStyle::HasStyle()" />*/
	,
	_text: null,
	/*<BeginProperty Name="System.String Infragistics.CPLabelTextStyle::Text()" />*/
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPLabelTextStyle::Text()" />*/
	,
	_font: null,
	/*<BeginProperty Name="System.String Infragistics.CPLabelTextStyle::Font()" />*/
	font: function (value) {
		if (arguments.length === 1) {
			this._font = value;
			return value;
		} else {
			return this._font;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPLabelTextStyle::Font()" />*/
	,
	_background: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPLabelTextStyle::Background()" />*/
	background: function (value) {
		if (arguments.length === 1) {
			this._background = value;
			return value;
		} else {
			return this._background;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPLabelTextStyle::Background()" />*/
	,
	_foreground: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPLabelTextStyle::Foreground()" />*/
	foreground: function (value) {
		if (arguments.length === 1) {
			this._foreground = value;
			return value;
		} else {
			return this._foreground;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPLabelTextStyle::Foreground()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPLabelTextStyle::ParseLocalizedStringForBoldStyling(System.String, Infragistics.CPList)" />*/
	parseLocalizedStringForBoldStyling: function (localizedString, parameters) {
		var offsetIndex = 1;
		while ($.ig.NativeStringUtility.prototype.contains(localizedString, "%b")) {
			var firstIndex = $.ig.NativeStringUtility.prototype.indexOf(localizedString, "%b");
			var secondIndex = $.ig.NativeStringUtility.prototype.indexOf1(localizedString, "%b", firstIndex + 1);
			var m1 = $.ig.NativeStringUtility.prototype.substring(localizedString, 0, firstIndex);
			var part = $.ig.NativeStringUtility.prototype.substring(localizedString, firstIndex + 2, secondIndex - (firstIndex + 2));
			var m2 = $.ig.NativeStringUtility.prototype.substring(localizedString, secondIndex + 2, localizedString.length - (secondIndex + 2));
			var paramIndexString = offsetIndex.toString();
			paramIndexString = "%" + paramIndexString;
			localizedString = m1 + paramIndexString + m2;
			parameters.add(part);
			offsetIndex++;
		}
		return localizedString;
	}
	/*<EndMethod Name="System.String Infragistics.CPLabelTextStyle::ParseLocalizedStringForBoldStyling(System.String, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPLabelTextStyle::BuildLocalizedParamString(System.String, Infragistics.CPList, System.String, System.ColorInt, System.ColorInt)" />*/
	buildLocalizedParamString: function (localizedString, parameters, font, bg, fg) {
		var list = new $.ig.Array();
		var pc = parameters.length;
		var splits = new $.ig.Array();
		splits.add(localizedString);
		for (var i = 0; i < pc; i++) {
			var key = "%" + (i + 1).toString();
			var newSplits = new $.ig.Array();
			for (var j = 0; j < splits.length; j++) {
				var val = splits[j];
				var parts = $.ig.NativeStringUtility.prototype.split(val, key);
				var keyAdded = false;
				for (var k = 0; k < parts.length; k++) {
					var p = parts[k];
					if (p.length == 0) {
						p = key;
						keyAdded = true;
					}
					if (k >= 1 && k == parts.length - 1 && !keyAdded) {
						newSplits.add(key);
					}
					newSplits.add(p);
				}
			}
			splits = newSplits;
		}
		for (var i1 = 0; i1 < splits.length; i1++) {
			var val1 = splits[i1];
			if (val1.length == 2 && $.ig.NativeStringUtility.prototype.startsWith(val1, "%")) {
				var index = $.ig.NativeStringUtility.prototype.convertToInt($.ig.NativeStringUtility.prototype.substring(val1, 1, 1), -1);
				if (index > 0) {
					list.add(new $.ig.CPLabelTextStyle(1, parameters[index - 1], font, bg, fg));
				} else {
					list.add(new $.ig.CPLabelTextStyle(0, val1));
				}
			} else {
				list.add(new $.ig.CPLabelTextStyle(0, val1));
			}
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPLabelTextStyle::BuildLocalizedParamString(System.String, Infragistics.CPList, System.String, System.ColorInt, System.ColorInt)" />*/
	,
	$type: new $.ig.Type('CPLabelTextStyle', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLabelTextStyle" />*/

/*<BeginType Name="Infragistics.CPGridViewItemOverflowCell" />*/

$.ig.util.defType('CPGridViewItemOverflowCell', 'CPGridViewItemCellBase', {
	__overFlowButton: null,
	_overflowClickedAction: null,
	init: function (itemGuideStyle, identifier) {
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, itemGuideStyle, identifier);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::OverflowClicked()" />*/
	overflowClicked: function () {
		if (this._overflowClickedAction != null) {
			this._overflowClickedAction(this);
		} else {
			this.showPopup1(this.__overFlowButton);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::OverflowClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::TriggerOverflow()" />*/
	triggerOverflow: function () {
		$.ig.CPGridViewItemCellBase.prototype.triggerOverflow.call(this);
		this.overflowClicked();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::TriggerOverflow()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::SupportsOverflow()" />*/
	supportsOverflow: function () {
		return this.__overFlowButton != null && !this.__overFlowButton.isHidden();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::SupportsOverflow()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPIconButton Infragistics.CPGridViewItemOverflowCell::OverFlowButton()" />*/
	overFlowButton: function () {
		this.ensureOverflow();
		return this.__overFlowButton;
	}
	/*<EndProperty Name="Infragistics.CPIconButton Infragistics.CPGridViewItemOverflowCell::OverFlowButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetColor(Infragistics.CPThemeColor)" />*/
	setColor: function (color) {
		$.ig.CPGridViewItemCellBase.prototype.setColor.call(this, color);
		if (this.__overFlowButton != null) {
			this.__overFlowButton.setColor(color.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::EnsureOverflow()" />*/
	ensureOverflow: function () {
		var $self = this;
		if (this.__overFlowButton == null) {
			this.__overFlowButton = new $.ig.CPIconButton(0, this.sizingGuide().buttonStyleName(), $.ig.CPIconButtonStyle.prototype.standard);
			this.__overFlowButton.setIcon(this.defaultOverflowIcon());
			this.__overFlowButton.addClickHandler(function (x, y) {
				$self.overflowClicked();
			});
			this.__overFlowButton.addInteractionStateChangedHandler(function () {
				$self.overFlowButtonInteractionStateChanged();
			});
			this.contentContainer().addSubview(this.__overFlowButton);
			if (this.itemColor() != null) {
				this.__overFlowButton.setColor(this.itemColor().$native());
			}
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__overFlowButton, "overFlowButton");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::EnsureOverflow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::OverFlowButtonInteractionStateChanged()" />*/
	overFlowButtonInteractionStateChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::OverFlowButtonInteractionStateChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverFlowEnabled(System.Boolean)" />*/
	setOverFlowEnabled: function (enable) {
		this.ensureOverflow();
		if (enable) {
			this.__overFlowButton.enable();
		} else {
			this.__overFlowButton.disable();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverFlowEnabled(System.Boolean)" />*/
	,
	/*<BeginProperty Name="Infragistics.PathIcon Infragistics.CPGridViewItemOverflowCell::DefaultOverflowIcon()" />*/
	defaultOverflowIcon: function () {
		return $.ig.UIPathIcons.prototype.icons().getOverflowIcon();
	}
	/*<EndProperty Name="Infragistics.PathIcon Infragistics.CPGridViewItemOverflowCell::DefaultOverflowIcon()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowIcon(Infragistics.PathIcon)" />*/
	setOverflowIcon: function (icon) {
		this.ensureOverflow();
		this.__overFlowButton.setIcon(icon);
		this.__overFlowButton.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		$.ig.CPGridViewItemCellBase.prototype.applyInteractionColorSet.call(this, colorSet);
		this.ensureOverflow();
		this.__overFlowButton.applyInteractionColorSet(colorSet);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowAccessibilityName(System.String)" />*/
	setOverflowAccessibilityName: function (identifier) {
		this.ensureOverflow();
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__overFlowButton, identifier);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowAccessibilityName(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowAccessibilityName(System.String, System.String)" />*/
	setOverflowAccessibilityName1: function (prefix, identifier) {
		this.ensureOverflow();
		$.ig.UIUtility.prototype.setAccessibilityName2(this.__overFlowButton, prefix, identifier);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowAccessibilityName(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowVisiblity(System.Boolean)" />*/
	setOverflowVisiblity: function (visible) {
		this.ensureOverflow();
		this.__overFlowButton.isHidden(!visible);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::SetOverflowVisiblity(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::IsOverflowVisible()" />*/
	isOverflowVisible: function () {
		return this.__overFlowButton != null && !this.__overFlowButton.isHidden();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::IsOverflowVisible()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::HasRightContent()" />*/
	hasRightContent: function () {
		return this.supportsOverflow();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemOverflowCell::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemOverflowCell::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		return (this.supportsOverflow()) ? 1 : $.ig.CPGridViewItemCellBase.prototype.numberOfItemsInRightContentArea.call(this);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemOverflowCell::NumberOfItemsInRightContentArea()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemOverflowCell::OverflowButtonLayoutIndex()" />*/
	overflowButtonLayoutIndex: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemOverflowCell::OverflowButtonLayoutIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		if (!this.layoutButton1(this.__overFlowButton, this.overflowButtonLayoutIndex(), false, false, index, x, guide)) {
			$.ig.CPGridViewItemCellBase.prototype.layoutRightContentArea.call(this, index, x, guide);
		}
		if (this.supportsOverflow()) {
			this.__overFlowButton.isHidden((this.overflowButtonLayoutIndex() < 0));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemOverflowCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPGridViewItemOverflowCell', $.ig.CPGridViewItemCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemOverflowCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemCell" />*/

$.ig.util.defType('CPGridViewItemCell', 'CPGridViewItemOverflowCell', {
	__subTextLabel: null,
	__textLabel: null,
	__wrap: false,
	__font: null,
	init: function (itemGuideStyle, identifier) {
		$.ig.CPGridViewItemOverflowCell.prototype.init.call(this, itemGuideStyle, identifier);
	},
	/*<BeginProperty Name="System.String Infragistics.CPGridViewItemCell::Font()" />*/
	font: function (value) {
		if (arguments.length === 1) {
			this.__font = value;
			this.ensureFont();
			return value;
		} else {
			return this.__font;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewItemCell::Font()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::Setup()" />*/
	setup: function () {
		$.ig.CPGridViewItemOverflowCell.prototype.setup.call(this);
		this.__foregroundColor = $.ig.ThemeManager.prototype.theme().foregroundColor().clone();
		this.__font = $.ig.ThemeManager.prototype.theme().regularFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::SetTextWrapping(System.Boolean)" />*/
	setTextWrapping: function (wrap) {
		this.__wrap = wrap;
		this.textLabel().setTextWrapping(wrap);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::SetTextWrapping(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::TextWrappingEnabled()" />*/
	textWrappingEnabled: function () {
		return this.__wrap;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::TextWrappingEnabled()" />*/
	,
	__foregroundColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPGridViewItemCell::ForegroundColor()" />*/
	foregroundColor: function () {
		if (this.__foregroundColor == null) {
			this.__foregroundColor = $.ig.ThemeManager.prototype.theme().foregroundColor().clone();
		}
		return this.__foregroundColor;
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPGridViewItemCell::ForegroundColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::SetColor(Infragistics.CPThemeColor)" />*/
	setColor: function (color) {
		$.ig.CPGridViewItemOverflowCell.prototype.setColor.call(this, color);
		this.__foregroundColor = color.clone();
		if (this.__subTextLabel != null) {
			this.__subTextLabel.setTextColor(color.$native());
		}
		if (this.__textLabel != null) {
			this.__textLabel.setTextColor(color.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::SetColor(Infragistics.CPThemeColor)" />*/
	,
	__backupForegroundColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	applySelectedState: function (color) {
		$.ig.CPGridViewItemOverflowCell.prototype.applySelectedState.call(this, color);
		if (this.__backupForegroundColor == null) {
			this.__backupForegroundColor = this.__foregroundColor;
		}
		this.setColor(color.selectedForeground());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::ApplySelectedState(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::ClearSelectedState()" />*/
	clearSelectedState: function () {
		$.ig.CPGridViewItemOverflowCell.prototype.clearSelectedState.call(this);
		if (this.__backupForegroundColor != null) {
			this.setColor(this.__backupForegroundColor);
			this.__backupForegroundColor = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::ClearSelectedState()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPOverflowLabel Infragistics.CPGridViewItemCell::SubTextLabel()" />*/
	subTextLabel: function () {
		if (this.__subTextLabel == null) {
			this.__subTextLabel = new $.ig.CPOverflowLabel();
			this.__subTextLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeSecondary(), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__subTextLabel.shouldSteaFocusFromTextEditors(this.shouldSteaFocusFromTextEditors());
			this.__subTextLabel.setTextAlignment($.ig.TextAlignment.prototype.left);
			this.__subTextLabel.clipToBounds(true);
			this.__subTextLabel.ignoreCalculatingDefaultSize(true);
			this.__subTextLabel.setTextColor(this.__foregroundColor.$native());
			this.contentContainer().addSubview(this.__subTextLabel);
		}
		return this.__subTextLabel;
	}
	/*<EndProperty Name="Infragistics.CPOverflowLabel Infragistics.CPGridViewItemCell::SubTextLabel()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPOverflowLabel Infragistics.CPGridViewItemCell::TextLabel()" />*/
	textLabel: function () {
		if (this.__textLabel == null) {
			this.__textLabel = new $.ig.CPOverflowLabel();
			this.__textLabel.shouldSteaFocusFromTextEditors(this.shouldSteaFocusFromTextEditors());
			this.__textLabel.setTextAlignment($.ig.TextAlignment.prototype.left);
			this.__textLabel.clipToBounds(true);
			this.__textLabel.ignoreCalculatingDefaultSize(true);
			this.__textLabel.setTextColor(this.__foregroundColor.$native());
			this.contentContainer().addSubview(this.__textLabel);
			this.ensureFont();
		}
		return this.__textLabel;
	}
	/*<EndProperty Name="Infragistics.CPOverflowLabel Infragistics.CPGridViewItemCell::TextLabel()" />*/
	,
	__overrideFontSize: 0,
	/*<BeginProperty Name="System.Single Infragistics.CPGridViewItemCell::OverrideFontSize()" />*/
	overrideFontSize: function (value) {
		if (arguments.length === 1) {
			this.__overrideFontSize = value;
			this.ensureFont();
			return value;
		} else {
			return this.__overrideFontSize;
		}
	}
	/*<EndProperty Name="System.Single Infragistics.CPGridViewItemCell::OverrideFontSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::EnsureFont()" />*/
	ensureFont: function () {
		if (this.sizingGuide() != null) {
			if (this.overrideFontSize() <= 0) {
				this.applyFont(this.sizingGuide().fontSize(), this.__font);
			} else {
				this.applyFont(this.overrideFontSize(), this.__font);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::EnsureFont()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::ApplyFont(System.Single, System.String)" />*/
	applyFont: function (fontSize, font) {
		if (this.__textLabel != null) {
			this.__textLabel.setFont(fontSize, font);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::ApplyFont(System.Single, System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasTextArea()" />*/
	hasTextArea: function () {
		return this.__textLabel != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasTextArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return this.hasTextArea();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasCenterContentArea()" />*/
	,
	_alignTextToTop: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::AlignTextToTop()" />*/
	alignTextToTop: function (value) {
		if (arguments.length === 1) {
			this._alignTextToTop = value;
			return value;
		} else {
			return this._alignTextToTop;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::AlignTextToTop()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemCell::AddToAllLabelsHeight(System.Int32)" />*/
	addToAllLabelsHeight: function (w) {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemCell::AddToAllLabelsHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::LayoutAdditoinalRowsOfText(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutAdditoinalRowsOfText: function (x, y, w, h, guide) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::LayoutAdditoinalRowsOfText(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		var titleHeight = 0;
		if (this.__wrap) {
			titleHeight = this.textLabel().calculateSize1(w, h);
		} else {
			titleHeight = this.textLabel().calculateSize(w);
		}
		var allLabelsHeight = titleHeight;
		var subLabelHeight = 0;
		if (this.__subTextLabel != null) {
			if (this.__subTextLabel.getText().length > 0) {
				this.__subTextLabel.isHidden(false);
				subLabelHeight = this.__subTextLabel.calculateSize(w);
				allLabelsHeight += subLabelHeight;
			} else {
				this.__subTextLabel.isHidden(true);
			}
		}
		allLabelsHeight += this.addToAllLabelsHeight(w);
		var labelTop = (this.alignTextToTop()) ? 0 : ($.ig.intDivide((h - allLabelsHeight), 2));
		this.currentLabelTop(labelTop);
		var proposedWidth = this.textLabelAreaChanged(x, 0, w, h);
		if (w != proposedWidth) {
			w = proposedWidth;
		}
		this.contentContainer().measureView1(this.textLabel(), x, labelTop, w, titleHeight, this.resolveOpacity(this.restOpacity(), true));
		if (subLabelHeight > 0) {
			labelTop += titleHeight;
			this.contentContainer().measureView1(this.__subTextLabel, x, labelTop, w, subLabelHeight, this.resolveOpacity(this.subTextLabelRestOpacity(), false));
			labelTop += subLabelHeight;
		}
		this.layoutAdditoinalRowsOfText(x, labelTop, w, h, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	_currentLabelTop: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCell::CurrentLabelTop()" />*/
	currentLabelTop: function (value) {
		if (arguments.length === 1) {
			this._currentLabelTop = value;
			return value;
		} else {
			return this._currentLabelTop;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCell::CurrentLabelTop()" />*/
	,
	_overrideSubTextLabelRestOpacity: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCell::OverrideSubTextLabelRestOpacity()" />*/
	overrideSubTextLabelRestOpacity: function (value) {
		if (arguments.length === 1) {
			this._overrideSubTextLabelRestOpacity = value;
			return value;
		} else {
			return this._overrideSubTextLabelRestOpacity;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCell::OverrideSubTextLabelRestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewItemCell::SubTextLabelRestOpacity()" />*/
	subTextLabelRestOpacity: function () {
		if (this.overrideSubTextLabelRestOpacity() > 0) {
			return this.overrideSubTextLabelRestOpacity();
		}
		return $.ig.ThemeManager.prototype.theme().disabledOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewItemCell::SubTextLabelRestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasUnread()" />*/
	hasUnread: function () {
		return this.__hasUnreadVal;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::HasUnread()" />*/
	,
	__hasUnreadVal: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCell::SetUnreadState(System.Boolean)" />*/
	setUnreadState: function (val) {
		if (this.__hasUnreadVal != val) {
			this.__hasUnreadVal = val;
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCell::SetUnreadState(System.Boolean)" />*/
	,
	__softNotification: null,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	textLabelAreaChanged: function (x, y, w, h) {
		if (this.hasUnread()) {
			var lw = this.textLabel().getCalculatedWidth();
			var lh = this.textLabel().getCalculatedHeight();
			var ly = this.currentLabelTop();
			var spacing = $.ig.ThemeManager.prototype.theme().padding5();
			var iconSize = $.ig.ThemeManager.prototype.theme().notificationSize();
			if (this.__softNotification == null) {
				this.__softNotification = $.ig.ThemeManager.prototype.theme().createNotificationIcon();
				this.contentContainer().addSubview(this.__softNotification);
			}
			this.__softNotification.isHidden(false);
			if (lw + spacing + iconSize <= w) {
				this.contentContainer().measureView1(this.__softNotification, x + lw + spacing, ly + $.ig.intDivide(lh, 2) - $.ig.intDivide(iconSize, 2), iconSize, iconSize, 1);
			} else {
				this.contentContainer().measureView1(this.__softNotification, x + w - iconSize, ly + $.ig.intDivide(lh, 2) - $.ig.intDivide(iconSize, 2), iconSize, iconSize, 1);
			}
			return w - (iconSize + spacing);
		} else {
			if (this.__softNotification != null) {
				this.__softNotification.isHidden(true);
			}
			return w;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::SupportsTooltips()" />*/
	supportsTooltips: function () {
		if (this._isCloneDraggingCell) {
			return false;
		}
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::SupportsTooltips()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCell::ShouldSteaFocusFromTextEditors()" />*/
	shouldSteaFocusFromTextEditors: function (value) {
		if (arguments.length === 1) {
			$.ig.CPGridViewItemOverflowCell.prototype.shouldSteaFocusFromTextEditors.call(this, value);
			if (this.__textLabel != null) {
				this.__textLabel.shouldSteaFocusFromTextEditors(value);
			}
			if (this.__subTextLabel != null) {
				this.__subTextLabel.shouldSteaFocusFromTextEditors(value);
			}
			return value;
		} else {
			return $.ig.CPGridViewItemOverflowCell.prototype.shouldSteaFocusFromTextEditors.call(this);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCell::ShouldSteaFocusFromTextEditors()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCell::ResolveTooltipContent()" />*/
	resolveTooltipContent: function () {
		if ($.ig.CPGridViewItemOverflowCell.prototype.supportsTooltips.call(this)) {
			return $.ig.CPGridViewItemOverflowCell.prototype.resolveTooltipContent.call(this);
		}
		var text = this.textLabel().getText();
		var canShowTooltip = text.length > 0 && this.textLabel().isOverflow();
		var subText = null;
		if (this.__subTextLabel != null) {
			subText = this.__subTextLabel.getText();
			if (!canShowTooltip && subText.length > 0) {
				canShowTooltip = this.__subTextLabel.isOverflow();
			}
		}
		if (canShowTooltip) {
			return new $.ig.CPLabelTooltip(0, text, subText, null);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPGridViewItemCell::ResolveTooltipContent()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemCell::CalculateCellHeight(System.Int32)" />*/
	calculateCellHeight: function (w) {
		var availW = this.layoutContent(w, $.ig.NativeUIUtility.prototype.utility().densify(1000), false);
		return Math.max(this.sizingGuide().height(), this.textLabel().calculateSize(availW) + $.ig.ThemeManager.prototype.theme().padding10());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemCell::CalculateCellHeight(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewItemCell', $.ig.CPGridViewItemOverflowCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemCell" />*/

/*<BeginType Name="Infragistics.CPModalHeaderLabel" />*/

$.ig.util.defType('CPModalHeaderLabel', 'CPGridViewItemCell', {
	__sep: null,
	__sepSize: 0,
	__backPressedBlock: null,
	__backButton: null,
	__rightButtons: null,
	__calcW: 0,
	__calcH: 0,
	init: function (initNumber, identifier, titleText, subText, backPressedBlock, rightButtons) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewItemCell.prototype.init.call(this, $.ig.CPTheme.prototype.buttonGuideStyleLarge, identifier);
		this.isFocusable(false);
		this.customPadding(-1);
		this.__backPressedBlock = backPressedBlock;
		this.__rightButtons = rightButtons;
		this.__sep = new $.ig.CPViewBase();
		this.__sep.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__sep);
		this.__sepSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.ignoreDisabledOpacity(true);
		this.disable();
		this.setCornerRadius(0);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.textLabel().setText(titleText);
		this.textLabel().setTextWrapping(true);
		this.textLabel().setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().boldFont());
		this.subTextLabel().setText(subText);
		this.subTextLabel().setTextWrapping(true);
		this.subTextLabel().setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__backButton = new $.ig.CPIconButton(0, this.sizingGuide().buttonStyleName(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__backButton.setIcon($.ig.UIPathIcons.prototype.icons().getBackButtonArrowIcon());
		if (this.__backPressedBlock == null) {
			this.__backButton.isHidden(true);
		} else {
			this.__backButton.addClickHandler(this.__backPressedBlock);
		}
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__backButton, "headerBackButton");
		this.addSubview(this.__backButton);
		if (this.__rightButtons != null) {
			for (var i = 0; i < this.__rightButtons.length; i++) {
				var button = this.__rightButtons[i];
				this.addSubview(button);
			}
		}
	},
	init1: function (initNumber, identifier, titleText, subText) {
		$.ig.CPModalHeaderLabel.prototype.init.call(this, 0, identifier, titleText, subText, null, null);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPModalHeaderLabel::SetBackPressedAction(Infragistics.PointExecutionBlock)" />*/
	setBackPressedAction: function (block) {
		this.__backButton.addClickHandler(block);
		this.__backButton.isHidden(false);
		this.layoutCell();
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalHeaderLabel::SetBackPressedAction(Infragistics.PointExecutionBlock)" />*/
	,
	_showSeparator: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPModalHeaderLabel::ShowSeparator()" />*/
	showSeparator: function (value) {
		if (arguments.length === 1) {
			this._showSeparator = value;
			return value;
		} else {
			return this._showSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPModalHeaderLabel::ShowSeparator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalHeaderLabel::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		this.__calcW = limitWidth;
		this.__calcH = $.ig.ThemeManager.prototype.theme().headerHeight();
		if (this.shouldShowSeparator()) {
			this.__calcH += this.__sepSize;
		}
		if (this.hasSubtitle()) {
			this.__calcH += $.ig.ThemeManager.prototype.theme().largeHitSize();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalHeaderLabel::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalHeaderLabel::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.calculateSizeToFit1(0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalHeaderLabel::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPModalHeaderLabel::HasSubtitle()" />*/
	hasSubtitle: function () {
		return this.subTextLabel() != null && !$.ig.CPStringUtility.prototype.isNullOrEmpty(this.subTextLabel().getText());
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPModalHeaderLabel::HasSubtitle()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::GetCalculatedHeight()" />*/
	,
	_customPadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPModalHeaderLabel::CustomPadding()" />*/
	customPadding: function (value) {
		if (arguments.length === 1) {
			this._customPadding = value;
			return value;
		} else {
			return this._customPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPModalHeaderLabel::CustomPadding()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::LayoutContent(System.Int32, System.Int32, System.Boolean)" />*/
	layoutContent: function (w, h, callLayoutMethods) {
		var contentPadding = this.customPadding() >= 0 ? this.customPadding() : $.ig.ThemeManager.prototype.theme().resolvePaddingForModal(w);
		var x = 0;
		if (!this.__backButton.isHidden()) {
			var buttonSize = this.sizingGuide().buttonGuide().size();
			var leftPadding = Math.max(contentPadding, buttonSize);
			var backX = 0;
			if (contentPadding > buttonSize) {
				backX = $.ig.intDivide((contentPadding - buttonSize), 2);
			}
			this.contentContainer().measureView1(this.__backButton, backX, $.ig.intDivide($.ig.ThemeManager.prototype.theme().headerHeight(), 2) - $.ig.intDivide(buttonSize, 2), buttonSize, buttonSize, this.resolveOpacity(this.restOpacity(), true));
			x = leftPadding;
			w -= (leftPadding + contentPadding);
		} else {
			x = contentPadding;
			w -= (contentPadding * 2);
		}
		if (this.shouldShowSeparator()) {
			this.measureView(this.__sep, x, $.ig.ThemeManager.prototype.theme().headerHeight(), w, this.__sepSize);
		}
		var proposedWidth = this.textLabelAreaChanged(x, 0, w, h);
		if (w != proposedWidth) {
			w = proposedWidth;
		}
		var titleHeight = this.textLabel().calculateSize1(w, $.ig.ThemeManager.prototype.theme().headerHeight());
		var labelTop = (this.alignTextToTop()) ? 0 : ($.ig.intDivide(($.ig.ThemeManager.prototype.theme().headerHeight() - titleHeight), 2));
		this.currentLabelTop(labelTop);
		this.contentContainer().measureView1(this.textLabel(), x, labelTop, w, titleHeight, $.ig.ThemeManager.prototype.theme().restOpacity());
		if (this.hasSubtitle()) {
			var subLabelTop = $.ig.ThemeManager.prototype.theme().headerHeight() + this.__sepSize;
			var subLabelHeight = this.subTextLabel().calculateSize1(w, $.ig.ThemeManager.prototype.theme().largeHitSize());
			this.contentContainer().measureView1(this.subTextLabel(), x, subLabelTop + $.ig.intDivide(($.ig.ThemeManager.prototype.theme().largeHitSize() - subLabelHeight), 2), w, subLabelHeight, $.ig.ThemeManager.prototype.theme().restOpacity());
		}
		return w;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::LayoutContent(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPModalHeaderLabel::ShouldShowSeparator()" />*/
	shouldShowSeparator: function () {
		return this.showSeparator() || this.hasSubtitle();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPModalHeaderLabel::ShouldShowSeparator()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	textLabelAreaChanged: function (x, y, w, h) {
		var isSmallScreen = $.ig.ThemeManager.prototype.theme().isSmallArea(w);
		if (this.__rightButtons != null) {
			var buttonSize = this.sizingGuide().buttonGuide().size();
			var right = 0;
			for (var i = 0; i < this.__rightButtons.length; i++) {
				var button = this.__rightButtons[i];
				var buttonW;
				var buttonH;
				var buttonY;
				if (button.getText() != null && button.getText().length > 0) {
					button.calculateSizeToFit();
					buttonW = button.getCalculatedWidth();
					buttonH = button.getCalculatedHeight();
				} else {
					buttonW = buttonSize;
					buttonH = buttonSize;
					if (isSmallScreen && i == 0) {
						right = 0;
					}
				}
				buttonY = $.ig.intDivide(($.ig.ThemeManager.prototype.theme().headerHeight() - buttonH), 2);
				right += buttonW;
				this.contentContainer().measureView(button, x + (w - right), buttonY, buttonW, buttonH);
				right += $.ig.ThemeManager.prototype.theme().padding10();
			}
			w -= right;
		}
		return w;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPModalHeaderLabel::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPModalHeaderLabel', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPModalHeaderLabel" />*/

/*<BeginType Name="Infragistics.CPNavigationBar" />*/

$.ig.util.defType('CPNavigationBar', 'CPView', {
	init: function () {
		$.ig.CPView.prototype.init.call(this);
	},
	__left: null,
	__right: null,
	__titleLabel: null,
	__backButton: null,
	__backButtonHandler: null,
	__barColor: null,
	__tintColor: null,
	__titleView: null,
	__hidesBackButton: false,
	__backButtonHidden: false,
	__divider: null,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::Setup()" />*/
	setup: function () {
		var $self = this;
		$.ig.CPView.prototype.setup.call(this);
		this.isFocusable(true);
		this.__left = new $.ig.CPNavBarButtonPanel();
		this.addSubview(this.__left);
		this.__right = new $.ig.CPNavBarButtonPanel();
		this.addSubview(this.__right);
		this.__titleLabel = new $.ig.CPLabel();
		this.__titleLabel.clipToBounds(true);
		this.__titleLabel.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().mediumFont());
		this.addSubview(this.__titleLabel);
		this.__backButtonHidden = true;
		this.__backButton = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, $.ig.UIPathIcons.prototype.icons().getBackArrowIcon(), function (x, y) {
			$self.backButtonClicked();
		});
		this.__backButton.isHidden(true);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__backButton, "backButton");
		this.addSubview(this.__backButton);
		this.barTintColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.tintColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__divider = new $.ig.CPViewBase();
		this.__divider.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__divider);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::FocusManagerRegistered(System.String)" />*/
	focusManagerRegistered: function (sectionId) {
		if (this.isFocusable()) {
			$.ig.CPView.prototype.focusManagerRegistered.call(this, sectionId);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::FocusManagerRegistered(System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPNavigationBar::BarTintColor()" />*/
	barTintColor: function (value) {
		if (arguments.length === 1) {
			this.__barColor = value;
			this.setBackgroundColor(this.__barColor);
			return value;
		} else {
			return this.__barColor;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPNavigationBar::BarTintColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPNavigationBar::TintColor()" />*/
	tintColor: function (value) {
		if (arguments.length === 1) {
			this.__tintColor = value;
			this.__titleLabel.setTextColor(this.__tintColor);
			this.__backButton.setColor(this.__tintColor);
			return value;
		} else {
			return this.__tintColor;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPNavigationBar::TintColor()" />*/
	,
	__colorSet: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPNavigationBar::BarColorSet()" />*/
	barColorSet: function (value) {
		if (arguments.length === 1) {
			this.__colorSet = value;
			this.barTintColor(this.__colorSet.$native());
			this.tintColor(this.__colorSet.foreground().$native());
			this.__left.setTintColor(this.__colorSet);
			this.__right.setTintColor(this.__colorSet);
			return value;
		} else {
			return this.__colorSet;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPNavigationBar::BarColorSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::NotifyOfChange(System.String, System.Boolean, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPList)" />*/
	notifyOfChange: function (title, hideBackButton, titleView, leftItems, rightItems) {
		this.__hidesBackButton = hideBackButton;
		if (hideBackButton && !this.__backButtonHidden) {
			this.__backButtonHidden = hideBackButton;
			this.__backButton.isHidden(hideBackButton);
		}
		if (this.__titleView != null) {
			this.removeSubview(this.__titleView);
			this.__titleView = null;
		}
		if (titleView != null) {
			this.__titleView = titleView;
			this.__titleView.clipToBounds(true);
			this.addSubview(this.__titleView);
		}
		this.setTitle(title);
		this.__left.clearButtons();
		this.__right.clearButtons();
		var update = false;
		if (leftItems != null) {
			for (var i = 0; i < leftItems.length; i++) {
				var item = leftItems[i];
				if ((item.accessibilityName() == null) || (item.accessibilityName() == "")) {
					$.ig.UIUtility.prototype.setAccessibilityName1(item, this.__left.accessibilityName() + "button_" + $.ig.NativeStringUtility.prototype.convertNumberToString(i));
				}
				this.__left.addButton(item, false, this.__colorSet);
			}
			update = true;
		}
		if (rightItems != null) {
			for (var i1 = rightItems.length - 1; i1 >= 0; i1--) {
				var item1 = rightItems[i1];
				if ((item1.accessibilityName() == null) || (item1.accessibilityName() == "")) {
					$.ig.UIUtility.prototype.setAccessibilityName1(item1, this.__right.accessibilityName() + "button_" + $.ig.NativeStringUtility.prototype.convertNumberToString(i1));
				}
				this.__right.addButton(item1, true, this.__colorSet);
			}
			update = true;
		}
		if (update) {
			this.layoutViews();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::NotifyOfChange(System.String, System.Boolean, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::SetTitle(System.String)" />*/
	setTitle: function (title) {
		if (title != null) {
			this.__titleLabel.setText(title);
		} else {
			this.__titleLabel.setText("");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::SetTitle(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::AddBackButtonHandler(Infragistics.ExecutionBlock)" />*/
	addBackButtonHandler: function (handler) {
		this.__backButtonHandler = handler;
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::AddBackButtonHandler(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::BackButtonClicked()" />*/
	backButtonClicked: function () {
		if (this.__backButtonHandler != null) {
			this.__backButtonHandler();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::BackButtonClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::ShowBackButton(System.String)" />*/
	showBackButton: function (title) {
		if (this.__hidesBackButton) {
			this.__backButton.isHidden(true);
		} else {
			this.__backButton.isHidden(false);
		}
		this.__backButtonHidden = this.__hidesBackButton;
		if (title == null || title.length == 0) {
			this.__backButton.setText("Back");
		} else {
			this.__backButton.setText(title);
		}
		this.layoutViews();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::ShowBackButton(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::LayoutViews()" />*/
	layoutViews: function () {
		if (this.currentWidth() > 0 && this.currentHeight() > 0) {
			this.sizeChanged(this.currentWidth(), this.currentHeight());
			this.layoutChildren();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::LayoutViews()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::HideBackButton()" />*/
	hideBackButton: function () {
		if (!this.__backButtonHidden) {
			this.__backButton.isHidden(true);
			this.__backButtonHidden = true;
			this.layoutViews();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::HideBackButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::RefreshButtons()" />*/
	refreshButtons: function () {
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::RefreshButtons()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var dividerHeight = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.measureView1(this.__divider, 0, h - dividerHeight, w, dividerHeight, 1);
		var padding = $.ig.ThemeManager.prototype.theme().padding5();
		var availableWidth = w - padding * 2;
		var leftPanelX = padding;
		var rightPanelX = w - padding;
		if (!this.__backButtonHidden) {
			this.__backButton.calculateSizeToFit();
			var buttonWidth = this.__backButton.getCalculatedWidth();
			var buttonHeight = this.__backButton.getCalculatedHeight();
			this.measureView1(this.__backButton, leftPanelX, $.ig.intDivide(h, 2) - $.ig.intDivide(buttonHeight, 2), buttonWidth, buttonHeight, 1);
			availableWidth -= buttonWidth;
			leftPanelX += buttonWidth;
		}
		var leftWidth = this.__left.sizeButtons(h);
		var rightWidth = this.__right.sizeButtons(h);
		if (leftWidth + rightWidth > availableWidth) {
			if (leftWidth == 0) {
				this.measurePanel(this.__right, rightPanelX, availableWidth, h, true);
			} else if (rightWidth == 0) {
				this.measurePanel(this.__left, leftPanelX, availableWidth, h, false);
			} else {
				var half = $.ig.intDivide(availableWidth, 2);
				if (leftWidth > half && rightWidth < half) {
					var size = availableWidth - rightWidth;
					this.measurePanel(this.__left, leftPanelX, size, h, false);
					this.measurePanel(this.__right, rightPanelX, rightWidth, h, true);
				} else if (rightWidth > half && leftWidth < half) {
					var size1 = availableWidth - leftWidth;
					this.measurePanel(this.__right, rightPanelX, size1, h, true);
					this.measurePanel(this.__left, leftPanelX, leftWidth, h, false);
				} else {
					this.measurePanel(this.__right, rightPanelX, half, h, true);
					this.measurePanel(this.__left, leftPanelX, half, h, false);
				}
			}
		} else {
			if (leftWidth > 0) {
				this.measurePanel(this.__left, leftPanelX, leftWidth, h, false);
			}
			if (rightWidth > 0) {
				this.measurePanel(this.__right, rightPanelX, rightWidth, h, true);
			}
		}
		availableWidth -= (leftWidth + rightWidth);
		availableWidth = Math.max(0, availableWidth);
		leftPanelX += leftWidth;
		if (this.__titleView != null) {
			this.__titleLabel.isHidden(true);
			this.__titleView.calculateSizeToFit();
			var titleWidth = this.__titleView.getCalculatedWidth();
			var titleHeight = this.__titleView.getCalculatedHeight();
			if (titleWidth == 0 || titleWidth == 0) {
				titleWidth = titleHeight = $.ig.truncate((h * 0.7));
			}
			titleWidth = Math.min(availableWidth, titleWidth);
			this.measureView1(this.__titleView, leftPanelX + $.ig.intDivide($.ig.intDivide(availableWidth, 2), 2) - $.ig.intDivide(titleWidth, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(titleHeight, 2), titleWidth, titleHeight, 1);
		} else {
			this.__titleLabel.isHidden(false);
			this.__titleLabel.calculateSizeToFit();
			var titleWidth1 = this.__titleLabel.getCalculatedWidth();
			var titleHeight1 = this.__titleLabel.getCalculatedHeight();
			titleWidth1 = Math.min(availableWidth, titleWidth1);
			this.measureView1(this.__titleLabel, leftPanelX + $.ig.intDivide(availableWidth, 2) - $.ig.intDivide(titleWidth1, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(titleHeight1, 2), titleWidth1, titleHeight1, $.ig.ThemeManager.prototype.theme().restOpacity());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationBar::MeasurePanel(Infragistics.CPNavBarButtonPanel, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	measurePanel: function (panel, left, w, h, rightAligned) {
		panel.restrictButtons(w, h);
		this.measureView1(panel, rightAligned ? left - w : left, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationBar::MeasurePanel(Infragistics.CPNavBarButtonPanel, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPNavigationBar::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.UIUtility.prototype.setAccessibilityName3(this.__backButton, "button_", value, "_back");
			$.ig.UIUtility.prototype.setAccessibilityName3(this.__left, "button_", value, "_left");
			$.ig.UIUtility.prototype.setAccessibilityName3(this.__right, "button_", value, "_right");
			return value;
		} else {
			return $.ig.CPView.prototype.accessibilityName.call(this);
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPNavigationBar::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPNavigationBar', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPNavigationBar" />*/

/*<BeginType Name="Infragistics.CPNavBarButtonPanel" />*/

$.ig.util.defType('CPNavBarButtonPanel', 'CPViewBase', {
	__list: null,
	__currentSelectedIndex: 0,
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
		this.__list = new $.ig.Array();
		this.__currentSelectedIndex = -1;
		this.isFocusable(false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::AddButton(Infragistics.CPInteractionView, System.Boolean, Infragistics.CPThemeColorSet)" />*/
	addButton: function (button, reverse, color) {
		this.__list.add(button);
		button.clipToBounds(true);
		button.applyInteractionColorSet(color);
		this.addSubview(button);
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::AddButton(Infragistics.CPInteractionView, System.Boolean, Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ClearButtons()" />*/
	clearButtons: function () {
		var count = this.__list.length;
		for (var i = 0; i < count; i++) {
			this.removeSubview(this.__list[i]);
		}
		this._focusElements.clear();
		this.__list.clear();
		this.__currentSelectedIndex = -1;
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ClearButtons()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::SetTintColor(Infragistics.CPThemeColorSet)" />*/
	setTintColor: function (color) {
		var count = this.__list.length;
		for (var i = 0; i < count; i++) {
			var button = this.__list[i];
			button.applyInteractionColorSet(color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::SetTintColor(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::SizeButtons(System.Int32)" />*/
	sizeButtons: function (height) {
		var totalWidth = 0;
		var count = this.__list.length;
		for (var i = 0; i < count; i++) {
			var button = this.__list[i];
			button.calculateSizeToFit();
			var bw = button.getCalculatedWidth();
			var bh = button.getCalculatedHeight();
			var navBarSize = height;
			this.measureView1(button, 0, 0, bw, bh, 1);
			totalWidth += bw;
		}
		return totalWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::SizeButtons(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::RestrictButtons(System.Int32, System.Int32)" />*/
	restrictButtons: function (width, height) {
		if (this.__list.length > 0) {
			this.sizeButtons(height);
			var maxButtonWidth = $.ig.intDivide(width, this.__list.length);
			var newMax = maxButtonWidth;
			var count = this.__list.length;
			var totalWidth = 0;
			for (var i = 0; i < count; i++) {
				var button = this.__list[i];
				var bw = button.currentWidth();
				if (bw < maxButtonWidth) {
					newMax += (maxButtonWidth - bw);
				}
				totalWidth += bw;
			}
			var limit = true;
			if (totalWidth <= width) {
				limit = false;
				newMax = maxButtonWidth;
			}
			var left = 0;
			for (var i1 = 0; i1 < count; i1++) {
				var button1 = this.__list[i1];
				var bh = button1.currentHeight();
				var bw1 = button1.currentWidth();
				if (limit) {
					bw1 = bw1 < maxButtonWidth ? bw1 : newMax;
				}
				this.measureView1(button1, left, $.ig.intDivide(height, 2) - $.ig.intDivide(bh, 2), bw1, bh, 1);
				left += bw1;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::RestrictButtons(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPInteractionView Infragistics.CPNavBarButtonPanel::GetButtonAtIndex(System.Int32)" />*/
	getButtonAtIndex: function (index) {
		if (index >= 0 && this.__list.length > index) {
			return this.__list[index];
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPInteractionView Infragistics.CPNavBarButtonPanel::GetButtonAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ClearCurrentFocusElement()" />*/
	clearCurrentFocusElement: function () {
		if (this.__currentSelectedIndex >= 0) {
			var button = this.getButtonAtIndex(this.__currentSelectedIndex);
			button.elementLostFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ClearCurrentFocusElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::GiveCurrentFocusElementFocus()" />*/
	giveCurrentFocusElementFocus: function () {
		var button = this.getButtonAtIndex(this.__currentSelectedIndex);
		button.elementGotFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::GiveCurrentFocusElementFocus()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::NumberOfFocusableElements()" />*/
	numberOfFocusableElements: function () {
		var count = 0;
		for (var i = 0; i < this.__list.length; i++) {
			if (this.isButtonAtIndexFocusable(i)) {
				count++;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::NumberOfFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::IsButtonAtIndexFocusable(System.Int32)" />*/
	isButtonAtIndexFocusable: function (index) {
		var button = this.getButtonAtIndex(index);
		return button.isFocusable() && !button.isHidden() && !button.isDisabled();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::IsButtonAtIndexFocusable(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ElementLostFocus()" />*/
	elementLostFocus: function () {
		$.ig.CPViewBase.prototype.elementLostFocus.call(this);
		this.clearCurrentFocusElement();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::GetNextIndex(System.Int32)" />*/
	getNextIndex: function (currentIndex) {
		if (currentIndex >= 0) {
			for (var i = currentIndex + 1; i < this.__list.length; i++) {
				if (this.isButtonAtIndexFocusable(i)) {
					return i;
				}
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::GetNextIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::GetPrevIndex(System.Int32)" />*/
	getPrevIndex: function (currentIndex) {
		if (currentIndex > 0) {
			for (var i = currentIndex - 1; i >= 0; i--) {
				if (this.isButtonAtIndexFocusable(i)) {
					return i;
				}
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNavBarButtonPanel::GetPrevIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::CapturesBackwardFocus()" />*/
	capturesBackwardFocus: function () {
		return this.getPrevIndex(this.__currentSelectedIndex) >= 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::CapturesBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::CapturesForwardFocus()" />*/
	capturesForwardFocus: function () {
		return this.getNextIndex(this.__currentSelectedIndex) >= 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::CapturesForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ContainerGotForwardFocus()" />*/
	containerGotForwardFocus: function () {
		if (this.numberOfFocusableElements() > 0) {
			this.__currentSelectedIndex = 0;
			if (!this.isButtonAtIndexFocusable(this.__currentSelectedIndex)) {
				this.__currentSelectedIndex = this.getNextIndex(this.__currentSelectedIndex);
			}
			this.giveCurrentFocusElementFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ContainerGotForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ContainerGotBackwardFocus()" />*/
	containerGotBackwardFocus: function () {
		if (this.numberOfFocusableElements() > 0) {
			this.__currentSelectedIndex = this.__list.length - 1;
			if (!this.isButtonAtIndexFocusable(this.__currentSelectedIndex)) {
				this.__currentSelectedIndex = this.getPrevIndex(this.__currentSelectedIndex);
			}
			this.giveCurrentFocusElementFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ContainerGotBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::ContainerHasFocusableElements()" />*/
	containerHasFocusableElements: function () {
		return this.numberOfFocusableElements() > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPNavBarButtonPanel::ContainerHasFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	elementInContainerGotManualFocus: function (element) {
		for (var i = 0; i < this.__list.length; i++) {
			var button = this.__list[i];
			if (button == element) {
				this.__currentSelectedIndex = i;
				this.giveCurrentFocusElementFocus();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPNavBarButtonPanel::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPViewBase.prototype.getSupportedKeyCommands.call(this);
		if (this.numberOfFocusableElements() > 0) {
			combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.left), function (k) {
				$self.moveBack();
			}));
			combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.right), function (k) {
				$self.moveForward();
			}));
			var button = this.getButtonAtIndex(this.__currentSelectedIndex);
			if (button != null) {
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
					$self.triggerItemClicked();
				}));
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.space), function (k) {
					$self.triggerItemClicked();
				}));
			}
		}
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPNavBarButtonPanel::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::MoveBack()" />*/
	moveBack: function () {
		this.clearCurrentFocusElement();
		this.__currentSelectedIndex = this.getPrevIndex(this.__currentSelectedIndex);
		this.giveCurrentFocusElementFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::MoveBack()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::MoveForward()" />*/
	moveForward: function () {
		this.clearCurrentFocusElement();
		this.__currentSelectedIndex = this.getNextIndex(this.__currentSelectedIndex);
		this.giveCurrentFocusElementFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::MoveForward()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavBarButtonPanel::TriggerItemClicked()" />*/
	triggerItemClicked: function () {
		var button = this.getButtonAtIndex(this.__currentSelectedIndex);
		if (button != null) {
			button.triggerClick();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavBarButtonPanel::TriggerItemClicked()" />*/
	,
	$type: new $.ig.Type('CPNavBarButtonPanel', $.ig.CPViewBase.prototype.$type, [$.ig.DynamicFocusableContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPNavBarButtonPanel" />*/

/*<BeginType Name="Infragistics.CPNavigationViewController" />*/

$.ig.util.defType('CPNavigationViewController', 'CPViewController', {
	__vcs: null,
	__navBar: null,
	__navBarHidden: false,
	__navBarHeight: 0,
	__isAlreadyAnimating: false,
	__onPopppedAction: null,
	__onTopViewControllerChanged: null,
	__navOffset: 0,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPViewController.prototype.init.call(this);
	},
	init1: function (initNumber, root) {
		$.ig.CPViewController.prototype.init.call(this);
		this.pushViewController(root, false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::RegisterOnPopNotification(Infragistics.ExecutionBlock)" />*/
	registerOnPopNotification: function (action) {
		this.__onPopppedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::RegisterOnPopNotification(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::RegisterTopViewControllerChangedNotification(Infragistics.ExecutionBlock)" />*/
	registerTopViewControllerChangedNotification: function (action) {
		this.__onTopViewControllerChanged = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::RegisterTopViewControllerChangedNotification(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::Setup()" />*/
	setup: function () {
		var $self = this;
		$.ig.CPViewController.prototype.setup.call(this);
		this.__navOffset = $.ig.ThemeManager.prototype.theme().navigationOffsetDistance();
		this.__isAlreadyAnimating = false;
		this.view().clipToBounds(true);
		this.__navBarHidden = false;
		this.__vcs = new $.ig.Array();
		this.__navBar = new $.ig.CPNavigationBar();
		this.__navBar.addBackButtonHandler(function () {
			$self.backButtonClicked();
		});
		this.__navBarHeight = $.ig.ThemeManager.prototype.theme().navBarHeight();
		this.addSubview(this.__navBar);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::Setup()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPNavigationBar Infragistics.CPNavigationViewController::NavigationBar()" />*/
	navigationBar: function () {
		return this.__navBar;
	}
	/*<EndProperty Name="Infragistics.CPNavigationBar Infragistics.CPNavigationViewController::NavigationBar()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPReadOnlyList Infragistics.CPNavigationViewController::ViewControllers()" />*/
	viewControllers: function () {
		return this.__vcs;
	}
	/*<EndProperty Name="Infragistics.CPReadOnlyList Infragistics.CPNavigationViewController::ViewControllers()" />*/
	,
	__sectionId: null,
	/*<BeginProperty Name="System.String Infragistics.CPNavigationViewController::SectionId()" />*/
	sectionId: function () {
		return this.__sectionId;
	}
	/*<EndProperty Name="System.String Infragistics.CPNavigationViewController::SectionId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::SetNavBarTextColor(System.String)" />*/
	setNavBarTextColor: function (color) {
		this.navigationBar().tintColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::SetNavBarTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::UpdateNavBar(Infragistics.ViewController)" />*/
	updateNavBar: function (vc) {
		this.__navBar.notifyOfChange(vc.title(), vc.hidesBackButton(), vc.titleView(), vc.leftNavBarItems(), vc.rightNavBarItems());
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::UpdateNavBar(Infragistics.ViewController)" />*/
	,
	/*<BeginProperty Name="Infragistics.ViewController Infragistics.CPNavigationViewController::TopViewController()" />*/
	topViewController: function () {
		return this.__vcs[this.__vcs.length - 1];
	}
	/*<EndProperty Name="Infragistics.ViewController Infragistics.CPNavigationViewController::TopViewController()" />*/
	,
	/*<BeginProperty Name="Infragistics.ViewController Infragistics.CPNavigationViewController::RootViewController()" />*/
	rootViewController: function () {
		return this.__vcs[0];
	}
	/*<EndProperty Name="Infragistics.ViewController Infragistics.CPNavigationViewController::RootViewController()" />*/
	,
	__willAppear: false,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ViewWillAppear(System.Boolean)" />*/
	viewWillAppear: function (animated) {
		this.__willAppear = true;
		$.ig.CPViewController.prototype.viewWillAppear.call(this, animated);
		if (this.topViewController() != null) {
			this.topViewController().viewWillAppear(animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ViewWillAppear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidAppear(System.Boolean)" />*/
	viewDidAppear: function (animated) {
		this.__willAppear = false;
		$.ig.CPViewController.prototype.viewDidAppear.call(this, animated);
		if (this.topViewController() != null) {
			this.topViewController().viewDidAppear(animated);
			this.topViewControllerChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidAppear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ViewWillDisappear(System.Boolean)" />*/
	viewWillDisappear: function (animated) {
		$.ig.CPViewController.prototype.viewWillDisappear.call(this, animated);
		if (this.topViewController() != null) {
			this.topViewController().viewWillDisappear(animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ViewWillDisappear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidDisappear(System.Boolean)" />*/
	viewDidDisappear: function (animated) {
		$.ig.CPViewController.prototype.viewDidDisappear.call(this, animated);
		if (this.topViewController() != null) {
			this.topViewController().viewDidDisappear(animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidDisappear(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidLoad()" />*/
	viewDidLoad: function () {
		$.ig.CPViewController.prototype.viewDidLoad.call(this);
		if (this.topViewController() != null) {
			this.layoutSubviews(this.view().currentWidth(), this.view().currentHeight());
			if (!this.__willAppear) {
				this.viewWillAppear(false);
				this.viewDidAppear(false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ViewDidLoad()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::BackButtonClicked()" />*/
	backButtonClicked: function () {
		this.popViewController(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::BackButtonClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::SetNavigationBarHidden(System.Boolean, System.Boolean)" />*/
	setNavigationBarHidden: function (hidden, animated) {
		var $self = this;
		if (this.__navBarHidden != hidden) {
			this.__navBarHidden = hidden;
			animated = this.__isAlreadyAnimating ? false : animated;
			if (animated) {
				if (!hidden) {
					this.__navBar.isHidden(false);
				}
				this.view().animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.layoutSubviews($self.view().currentWidth(), $self.view().currentHeight());
				}, function (finished) {
					if (hidden) {
						$self.__navBar.isHidden(true);
					} else {
						$self.__navBar.refreshButtons();
					}
				});
			} else {
				this.__navBar.isHidden(hidden);
				this.layoutSubviews(this.view().currentWidth(), this.view().currentHeight());
				if (!hidden) {
					this.__navBar.refreshButtons();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::SetNavigationBarHidden(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNavigationViewController::ResolveBarHeight()" />*/
	resolveBarHeight: function () {
		return (this.__navBarHidden) ? 0 : this.__navBarHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNavigationViewController::ResolveBarHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	layoutSubviews: function (w, h) {
		if (this.unloaded()) {
			return;
		}
		$.ig.CPViewController.prototype.layoutSubviews.call(this, w, h);
		var barHeight = this.resolveBarHeight();
		var count = this.__vcs.length;
		var x = 0;
		var y = barHeight;
		var vc = this.__vcs[count - 1];
		this.measureView1(vc.view(), x, y, w, h - y, 1);
		this.measureView1(this.__navBar, 0, 0, w, barHeight, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::LayoutSubviews(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::AddSubViewController(Infragistics.ViewController)" />*/
	addSubViewController: function (vc) {
		$.ig.CPViewController.prototype.addSubViewController.call(this, vc);
		this.__navBar.bringToFront();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::AddSubViewController(Infragistics.ViewController)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::PushViewController(Infragistics.ViewController, System.Boolean)" />*/
	pushViewController: function (vc, animated) {
		var $self = this;
		vc.navigationController(this);
		this.__vcs.add(vc);
		this.addSubViewController(vc);
		this.updateNavBar(vc);
		if (this._hasFocusManagerRegistered) {
			vc.focusManagerRegistered();
		}
		if (!this.viewHasLoaded()) {
			if (this.__vcs.length > 1) {
				var prevVc = this.__vcs[this.__vcs.length - 2];
				prevVc.viewWillDisappear(animated);
				this.__navBar.showBackButton(prevVc.title());
			}
			return;
		}
		this.__isAlreadyAnimating = true;
		if (this.__vcs.length > 1) {
			var prevVc1 = this.__vcs[this.__vcs.length - 2];
			prevVc1.viewWillDisappear(animated);
			this.__navBar.showBackButton(prevVc1.title());
			if (animated) {
				vc.viewWillAppear(animated);
				var barHeight = this.resolveBarHeight();
				var w = this.view().currentWidth();
				var h = this.view().currentHeight() - barHeight;
				this.measureView1(prevVc1.view(), 0, barHeight, w, h, 1);
				this.measureView1(vc.view(), this.__navOffset, barHeight, w, h, 0);
				this.view().animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.measureView1(prevVc1.view(), -$self.__navOffset, barHeight, w, h, 0);
					$self.measureView1(vc.view(), 0, barHeight, w, h, 1);
				}, function (finished) {
					$self.__isAlreadyAnimating = false;
					prevVc1.viewDidDisappear(animated);
					vc.viewDidAppear(animated);
					$self.topViewControllerChanged();
				});
			} else {
				prevVc1.viewDidDisappear(animated);
				vc.viewWillAppear(animated);
				this.forceLayout();
				this.__isAlreadyAnimating = false;
				vc.viewDidAppear(animated);
				this.topViewControllerChanged();
			}
		} else {
			vc.viewWillAppear(animated);
			this.forceLayout();
			this.__isAlreadyAnimating = false;
			vc.viewDidAppear(animated);
			this.topViewControllerChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::PushViewController(Infragistics.ViewController, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::ForceLayout()" />*/
	forceLayout: function () {
		if (this.viewHasLoaded()) {
			this.view().forceFullLayoutOfChildren();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::ForceLayout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::PopToViewController(Infragistics.ViewController, System.Boolean)" />*/
	popToViewController: function (vc, animated) {
		var count = this.__vcs.length;
		if (count <= 1) {
			return;
		}
		var index = -1;
		for (var i = 0; i < count; i++) {
			if (vc == this.__vcs[i]) {
				index = i;
				break;
			}
		}
		if (index != -1 && index != count - 1) {
			if (count == index + 2) {
				this.popViewController(animated);
			} else {
				for (var i1 = count - 2; i1 > index; i1--) {
					var x = this.__vcs[i1];
					x.viewWillDisappear(false);
					x.viewDidDisappear(false);
					this.removeVC(x);
				}
				this.popViewController(animated);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::PopToViewController(Infragistics.ViewController, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::PopToRootViewController(System.Boolean)" />*/
	popToRootViewController: function (animated) {
		if (this.__vcs.length > 0) {
			this.popToViewController(this.__vcs[0], animated);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::PopToRootViewController(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::PopViewController(System.Boolean)" />*/
	popViewController: function (animated) {
		var $self = this;
		if (this.__vcs.length > 1) {
			if (this.__onPopppedAction != null) {
				this.__onPopppedAction();
			}
			var vc = this.__vcs[this.__vcs.length - 1];
			var prevVc = this.__vcs[this.__vcs.length - 2];
			this.updateNavBar(prevVc);
			if (this.__vcs.length > 2) {
				var prevPrevVc = this.__vcs[this.__vcs.length - 3];
				this.__navBar.showBackButton(prevPrevVc.title());
			} else {
				this.__navBar.hideBackButton();
			}
			this.__isAlreadyAnimating = animated;
			vc.viewWillDisappear(animated);
			prevVc.viewWillAppear(animated);
			var barHeight = this.resolveBarHeight();
			var w = this.view().currentWidth();
			var h = this.view().currentHeight() - barHeight;
			if (animated) {
				this.measureView1(prevVc.view(), -this.__navOffset, barHeight, w, h, 0);
				this.view().animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.measureView1(prevVc.view(), 0, barHeight, w, h, 1);
					$self.measureView1(vc.view(), $self.__navOffset, barHeight, w, h, 0);
				}, function (finished) {
					$self.__isAlreadyAnimating = false;
					prevVc.viewDidAppear(animated);
					vc.viewDidDisappear(animated);
					$self.removeVC(vc);
					$self.topViewControllerChanged();
				});
			} else {
				this.measureView1(prevVc.view(), 0, barHeight, w, h, 1);
				prevVc.viewDidAppear(animated);
				this.removeVC(vc);
				this.topViewControllerChanged();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::PopViewController(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::SetViewControllers(Infragistics.CPList, System.Boolean)" />*/
	setViewControllers: function (vcs, animated) {
		var count = this.__vcs.length;
		if (this.__isAlreadyAnimating) {
			this.view().stopAnimation(false);
			this.__isAlreadyAnimating = false;
		}
		for (var i = 0; i < count; i++) {
			var vc = this.__vcs[0];
			vc.viewWillDisappear(false);
			vc.viewDidDisappear(false);
			this.removeVC(vc);
		}
		this.__navBar.hideBackButton();
		count = vcs.length;
		var lastIndex = count - 1;
		var prevVC = null;
		for (var i1 = 0; i1 < count; i1++) {
			var vc1 = vcs[i1];
			this.pushViewController(vc1, (i1 == lastIndex) ? animated : false);
			prevVC = vc1;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::SetViewControllers(Infragistics.CPList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::RemoveVC(Infragistics.ViewController)" />*/
	removeVC: function (vc) {
		vc.unload();
		vc.navigationController(null);
		this.__vcs.removeItem(vc);
		this.removeSubViewController(vc);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::RemoveVC(Infragistics.ViewController)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::RefreshButtons()" />*/
	refreshButtons: function () {
		this.navigationBar().refreshButtons();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::RefreshButtons()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::StyleNavigationBar(Infragistics.CPThemeColorSet)" />*/
	styleNavigationBar: function (colorSet) {
		this.navigationBar().barColorSet(colorSet);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::StyleNavigationBar(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::Unload()" />*/
	unload: function () {
		var count = this.viewControllers().length;
		for (var i = 0; i < count; i++) {
			var vc = this.viewControllers()[i];
			vc.unload();
		}
		$.ig.CPViewController.prototype.unload.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		$.ig.CPViewController.prototype.focusManagerRegistered.call(this);
		this.__sectionId = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager()._currentSection._sectionId;
		this.navigationBar().focusManagerRegistered(this.__sectionId);
		for (var i = 0; i < this.__vcs.length; i++) {
			var vc = this.__vcs[i];
			vc.focusManagerRegistered();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::FocusManagerRegistered()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNavigationViewController::TopViewControllerChanged()" />*/
	topViewControllerChanged: function () {
		if (this.__onTopViewControllerChanged != null) {
			this.__onTopViewControllerChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNavigationViewController::TopViewControllerChanged()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPNavigationViewController::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			if (this.__navBar != null) {
				this.__navBar.accessibilityName(value);
			}
			return value;
		} else {
			if (this.__navBar != null) {
				return this.__navBar.accessibilityName();
			}
			return "";
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPNavigationViewController::AccessibilityName()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPNavigationViewController::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var commands = new $.ig.Array();
		var topVc = this.topViewController();
		if (topVc != null) {
			if ($.ig.util.cast($.ig.ViewControllerBase.prototype.$type, topVc) !== null) {
				$.ig.ArrayUtility.prototype.addToCPReadOnlyList(commands, (topVc).getSupportedKeyCommands());
			}
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPNavigationViewController::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('CPNavigationViewController', $.ig.CPViewController.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPNavigationViewController" />*/

/*<BeginType Name="Infragistics.CPOverflowLabel" />*/

$.ig.util.defType('CPOverflowLabel', 'CPViewBase', {
	__label: null,
	__strikethroughLabel: null,
	__strikethroughContainer: null,
	__textColor: null,
	__clipping: false,
	__font: null,
	__alignment: 0,
	__fontSize: 0,
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
		this.__label = new $.ig.CPLabel();
		this.__label.clipToBounds(true);
		this.setTextClipping(true);
		this.setTextWrapping(false);
		this.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.setTextAlignment($.ig.TextAlignment.prototype.left);
		this.addSubview(this.__label);
	},
	_ignoreCalculatingDefaultSize: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPOverflowLabel::IgnoreCalculatingDefaultSize()" />*/
	ignoreCalculatingDefaultSize: function (value) {
		if (arguments.length === 1) {
			this._ignoreCalculatingDefaultSize = value;
			return value;
		} else {
			return this._ignoreCalculatingDefaultSize;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPOverflowLabel::IgnoreCalculatingDefaultSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetText(System.String)" />*/
	setText: function (text) {
		this.__label.setText(text);
		if (text == null) {
			text = "";
		}
		if (this.accessibilityName() != null && $.ig.NativeStringUtility.prototype.contains(this.accessibilityName(), "section_label_text")) {
			$.ig.UIUtility.prototype.setAccessibilityName1(this, "section_label_text_" + text);
		} else {
			$.ig.UIUtility.prototype.setAccessibilityNameIfNotSet(this, "section_label_text_" + text);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetText(System.String)" />*/
	,
	__wrap: false,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextWrapping(System.Boolean)" />*/
	setTextWrapping: function (wrap) {
		this.__wrap = wrap;
		this.__label.setTextWrapping(wrap);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextWrapping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetNumberOfLinesToClipBy(System.Int32)" />*/
	setNumberOfLinesToClipBy: function (numberOfLines) {
		this.__label.setNumberOfLinesToClipBy(numberOfLines);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetNumberOfLinesToClipBy(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetStrikethrough(System.Boolean)" />*/
	setStrikethrough: function (val) {
		this.__label.setStrikethrough(val);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetStrikethrough(System.Boolean)" />*/
	,
	__showingStrikethrough: false,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::AnimateStrikethrough(System.Double, System.Boolean)" />*/
	animateStrikethrough: function (duration, val) {
		var $self = this;
		if (this.__strikethroughLabel == null) {
			this.__strikethroughContainer = new $.ig.CPView();
			this.__strikethroughContainer.clipToBounds(true);
			this.addSubview(this.__strikethroughContainer);
			this.__strikethroughLabel = new $.ig.CPLabel();
			this.__strikethroughLabel.setStrikethrough(true);
			this.__strikethroughLabel.clipToBounds(true);
			this.__strikethroughContainer.addSubview(this.__strikethroughLabel);
		}
		this.__strikethroughLabel.setFont(this.__fontSize, this.__font);
		this.__strikethroughLabel.setTextClipping(this.__clipping);
		this.__strikethroughLabel.setTextWrapping(this.__wrap);
		this.__strikethroughLabel.setText(this.getText());
		this.__strikethroughLabel.setTextAlignment(this.__alignment);
		this.__strikethroughLabel.setTextColor(this.__textColor);
		this.setStrikethrough(false);
		this.__strikethroughContainer.isHidden(false);
		this.__showingStrikethrough = !val;
		this.triggerSizeChanged();
		this.__showingStrikethrough = val;
		this.animate(duration, function () {
			$self.triggerSizeChanged();
		}, function (x) {
			$self.setStrikethrough(val);
			$self.__strikethroughContainer.isHidden(true);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::AnimateStrikethrough(System.Double, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetPreserveWhitespace(System.Boolean)" />*/
	setPreserveWhitespace: function (preserve) {
		this.__label.preserveWhitespace(preserve);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetPreserveWhitespace(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextClipping(System.Boolean)" />*/
	setTextClipping: function (clip) {
		this.__clipping = clip;
		this.__label.setTextClipping(clip);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextClipping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextAlignment(System.Windows.TextAlignment)" />*/
	setTextAlignment: function (alignment) {
		this.__alignment = alignment;
		this.__label.setTextAlignment(alignment);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextAlignment(System.Windows.TextAlignment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextColor(System.String)" />*/
	setTextColor: function (color) {
		this.__textColor = color;
		this.__label.setTextColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetTextColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.__font = font;
		this.__fontSize = fontSize;
		this.__label.setFont(fontSize, font);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPOverflowLabel::GetText()" />*/
	getText: function () {
		return this.__label.getText();
	}
	/*<EndMethod Name="System.String Infragistics.CPOverflowLabel::GetText()" />*/
	,
	__ignoreSizeChanged: false,
	__limitingWidth: 0,
	__limitingHeight: 0,
	__preferredWidth: 0,
	__preferredHeight: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalculateSize(System.Int32)" />*/
	calculateSize: function (limitingWidth) {
		return this.calcSizes(limitingWidth, -1);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalculateSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalcSizes(System.Int32, System.Int32)" />*/
	calcSizes: function (limitingWidth, limitingHeight) {
		this.__limitingHeight = limitingHeight;
		this.__ignoreSizeChanged = true;
		var parent = this.getParent();
		if (parent != null) {
			parent.measureView(this, 0, 0, 1, 1);
		}
		this.__ignoreSizeChanged = false;
		this.__limitingWidth = limitingWidth;
		if (this.__limitingHeight >= 0) {
			if (!this.ignoreCalculatingDefaultSize()) {
				if (!this.__wrap) {
					this.__label.calculateSizeToFit();
				} else {
					this.__label.calculateSizeToFit1(this.__limitingWidth);
				}
				this.__preferredWidth = this.__label.getCalculatedWidth();
				this.__preferredHeight = this.__label.getCalculatedHeight();
			}
			this.__label.calculateSizeToFit2(this.__limitingWidth, this.__limitingHeight);
			this.__actualCaclulatedWidth = this.__label.getCalculatedWidth();
		} else {
			if (this.ignoreCalculatingDefaultSize() && this.__wrap && this.__limitingWidth >= 0) {
				this.__label.calculateSizeToFit1(this.__limitingWidth);
				this.__actualCaclulatedWidth = this.__label.getCalculatedWidth();
				this.__preferredHeight = this.__label.getCalculatedHeight();
			} else {
				this.__label.calculateSizeToFit();
				this.__preferredWidth = this.__label.getCalculatedWidth();
				this.__actualCaclulatedWidth = this.__preferredWidth;
				if (this.__limitingWidth >= 0) {
					if (this.__wrap) {
						this.__label.calculateSizeToFit1(this.__limitingWidth);
					}
					this.__actualCaclulatedWidth = this.__label.getCalculatedWidth();
					this.__preferredHeight = this.__label.getCalculatedHeight();
				}
			}
		}
		return this.__label.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalcSizes(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPViewBase.prototype.calculateSizeToFit.call(this);
		this.__label.calculateSizeToFit();
		this.__preferredWidth = this.__label.getCalculatedWidth();
		this.__preferredHeight = this.__label.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::CalculateSizeToFit()" />*/
	,
	__actualCaclulatedWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPOverflowLabel::ActualCaclulatedWidth()" />*/
	actualCaclulatedWidth: function () {
		return this.__actualCaclulatedWidth;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPOverflowLabel::ActualCaclulatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPOverflowLabel::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__preferredWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPOverflowLabel::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPOverflowLabel::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__preferredHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPOverflowLabel::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalculateSize(System.Int32, System.Int32)" />*/
	calculateSize1: function (limitingWidth, limitingHeight) {
		var lh = this.calcSizes(limitingWidth, limitingHeight);
		return Math.min(lh, limitingHeight);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPOverflowLabel::CalculateSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPOverflowLabel::IsOverflow()" />*/
	isOverflow: function () {
		if (!this.__wrap) {
			return this.__preferredWidth > this.currentWidth();
		} else {
			return this.__preferredHeight > this.currentHeight();
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPOverflowLabel::IsOverflow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::LayoutLabel()" />*/
	layoutLabel: function () {
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::LayoutLabel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		if (this.__ignoreSizeChanged) {
			return;
		}
		this.measureView1(this.__label, 0, 0, w, h, 1);
		if (this.__strikethroughLabel != null) {
			if (this.__showingStrikethrough) {
				this.measureView1(this.__strikethroughContainer, 0, 0, w, h, 1);
			} else {
				this.measureView1(this.__strikethroughContainer, 0, 0, 0, h, 1);
			}
			this.measureView1(this.__strikethroughLabel, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPOverflowLabel::SetLabelAccessibilityName(System.String)" />*/
	setLabelAccessibilityName: function (accessibilityName) {
		$.ig.UIUtility.prototype.setAccessibilityName(this.__label, accessibilityName);
	}
	/*<EndMethod Name="System.Void Infragistics.CPOverflowLabel::SetLabelAccessibilityName(System.String)" />*/
	,
	$type: new $.ig.Type('CPOverflowLabel', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPOverflowLabel" />*/

/*<BeginType Name="Infragistics.CPPasteEvent" />*/

$.ig.util.defType('CPPasteEvent', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_eventType: null,
	/*<BeginProperty Name="System.String Infragistics.CPPasteEvent::EventType()" />*/
	eventType: function (value) {
		if (arguments.length === 1) {
			this._eventType = value;
			return value;
		} else {
			return this._eventType;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPasteEvent::EventType()" />*/
	,
	_data: null,
	/*<BeginProperty Name="System.Array Infragistics.CPPasteEvent::Data()" />*/
	data: function (value) {
		if (arguments.length === 1) {
			this._data = value;
			return value;
		} else {
			return this._data;
		}
	}
	/*<EndProperty Name="System.Array Infragistics.CPPasteEvent::Data()" />*/
	,
	_text: null,
	/*<BeginProperty Name="System.String Infragistics.CPPasteEvent::Text()" />*/
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPasteEvent::Text()" />*/
	,
	_handled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPasteEvent::Handled()" />*/
	handled: function (value) {
		if (arguments.length === 1) {
			this._handled = value;
			return value;
		} else {
			return this._handled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPasteEvent::Handled()" />*/
	,
	$type: new $.ig.Type('CPPasteEvent', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPasteEvent" />*/

/*<BeginType Name="Infragistics.CPProgressBar" />*/

$.ig.util.defType('CPProgressBar', 'DrawingViewBase', {
	_borderColor: 0,
	_borderWidth: 0,
	_progressColor: 0,
	_remainingColor: 0,
	_value: 0,
	_maxValue: 0,
	_cornerRadius: 0,
	init: function () {
		$.ig.DrawingViewBase.prototype.init.call(this);
		this._borderColor = 0;
		this._borderWidth = 0;
		this._progressColor = $.ig.ThemeManager.prototype.theme().accentColor().color();
		this._remainingColor = $.ig.ThemeManager.prototype.theme().getForegroundColorWithAlpha(0.1).color();
		this._value = 0;
		this._maxValue = 100;
		this._cornerRadius = $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPProgressBar::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		$.ig.DrawingViewBase.prototype.draw.call(this, canvas, w, h, info);
		var percentCompleted = this._maxValue > 0 ? $.ig.intDivide(w * this._value, this._maxValue) : 0;
		this.drawRoundedRect(canvas, 0, 0, w, h, this._cornerRadius, this._remainingColor, this._borderColor, this._borderWidth);
		this.drawRoundedRect(canvas, 0, 0, percentCompleted, h, this._cornerRadius, this._progressColor, 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressBar::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	$type: new $.ig.Type('CPProgressBar', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPProgressBar" />*/

/*<BeginType Name="Infragistics.CPResizerView" />*/

$.ig.util.defType('CPResizerView', 'CPViewBase', {
	__thumb: null,
	__separator: null,
	__dragStartX: 0,
	__dragStartY: 0,
	_size: 0,
	_position: 0,
	_dragStart: null,
	_dragMove: null,
	_dragEnd: null,
	_orientation: 0,
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
		this._orientation = $.ig.Orientation.prototype.horizontal;
		this.setCursor($.ig.CPCursors.prototype.grab);
		this.__separator = new $.ig.CPViewBase();
		this.__separator.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__separator);
		this.__thumb = new $.ig.CPView();
		this.__thumb.setCornerRadius($.ig.NativeUIUtility.prototype.utility().densify(2));
		this.__thumb.setBackgroundColor($.ig.ThemeManager.prototype.theme().hintTextColor().$native());
		this.addSubview(this.__thumb);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPResizerView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var sh = $.ig.NativeUIUtility.prototype.utility().densify(1);
		var tw = $.ig.NativeUIUtility.prototype.utility().densify(20);
		var th = $.ig.NativeUIUtility.prototype.utility().densify(4);
		var offset = $.ig.NativeUIUtility.prototype.utility().densify(2);
		if (this._orientation == $.ig.Orientation.prototype.horizontal) {
			this.measureView1(this.__separator, 0, $.ig.intDivide(h, 2) - $.ig.intDivide(sh, 2), w, sh, 1);
			this.measureView1(this.__thumb, $.ig.intDivide(w, 2) - $.ig.intDivide(tw, 2), $.ig.intDivide(h, 2) + offset, tw, th, 1);
		} else {
			this.measureView1(this.__separator, $.ig.intDivide(w, 2) - $.ig.intDivide(sh, 2), 0, sh, h, 1);
			this.measureView1(this.__thumb, $.ig.intDivide(w, 2) + offset, $.ig.intDivide(h, 2) - $.ig.intDivide(tw, 2), th, tw, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPResizerView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPResizerView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPResizerView::HandlesUIInteraction()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPResizerView::HandlesTouchEvents()" />*/
	handlesTouchEvents: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPResizerView::HandlesTouchEvents()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.setCursor($.ig.CPCursors.prototype.grabbing);
		this.__dragStartX = x;
		this.__dragStartY = y;
		if (this._dragStart != null) {
			this._dragStart(x, y);
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this.setCursor($.ig.CPCursors.prototype.grab);
		if (this._dragEnd != null) {
			this._dragEnd(x, y);
		}
		return $.ig.CPViewBase.prototype.handlePointerUp.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this._orientation == $.ig.Orientation.prototype.horizontal) {
			this._position = Math.min(Math.max(((this._size * this._position) - y + this.__dragStartY) / this._size, 0), 1);
		} else {
			this._position = Math.min(Math.max(((this._size * this._position) - x + this.__dragStartX) / this._size, 0), 1);
		}
		if (this._dragMove != null) {
			this._dragMove(x, y);
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPResizerView::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPResizerView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPResizerView" />*/

/*<BeginType Name="Infragistics.CPSearchBar" />*/

$.ig.util.defType('CPSearchBar', 'CPViewBase', {
	__searchChangedBlock: null,
	__searchButton: null,
	__clearSearchButton: null,
	__separator: null,
	__border: null,
	init: function (searchIcon, clearIcon, searchChanged) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__searchChangedBlock = searchChanged;
		this.__border = new $.ig.CPView();
		this.__border.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.__border.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.__border.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		this.addSubview(this.__border);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.searchTextbox(new $.ig.CPTextView());
		if (this.__searchChangedBlock != null) {
			this.searchTextbox().registerTextChanged(function () {
				$self.searchTextChanged();
			});
		}
		this.searchTextbox().textBoxPadding(0);
		this.searchTextbox().setHintTextColor($.ig.ThemeManager.prototype.theme().hintTextColor().$native());
		this.searchTextbox().setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.searchTextbox().setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.addSubview(this.searchTextbox());
		this.__searchButton = new $.ig.PathIconView();
		this.__searchButton.iconColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__searchButton.setIcon(searchIcon);
		this.addSubview(this.__searchButton);
		this.__clearSearchButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__clearSearchButton.setIcon(clearIcon);
		this.__clearSearchButton.addClickHandler(function (x, y) {
			$self.searchTextbox().setText("");
		});
		this.__clearSearchButton.isHidden(true);
		this.addSubview(this.__clearSearchButton);
		this.__separator = new $.ig.CPViewBase();
		this.__separator.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.addSubview(this.__separator);
	},
	_hasBottomSeparator: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchBar::HasBottomSeparator()" />*/
	hasBottomSeparator: function (value) {
		if (arguments.length === 1) {
			this._hasBottomSeparator = value;
			return value;
		} else {
			return this._hasBottomSeparator;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchBar::HasBottomSeparator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBar::SearchTextChanged()" />*/
	searchTextChanged: function () {
		var text = this.searchTextbox().getText();
		if (text == null || text.equals("")) {
			this.__clearSearchButton.isHidden(true);
		} else {
			this.__clearSearchButton.isHidden(false);
		}
		this.__searchChangedBlock(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBar::SearchTextChanged()" />*/
	,
	_searchTextbox: null,
	/*<BeginProperty Name="Infragistics.CPTextView Infragistics.CPSearchBar::SearchTextbox()" />*/
	searchTextbox: function (value) {
		if (arguments.length === 1) {
			this._searchTextbox = value;
			return value;
		} else {
			return this._searchTextbox;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextView Infragistics.CPSearchBar::SearchTextbox()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBar::SetSearchInnerBackgroundColor(System.String)" />*/
	setSearchInnerBackgroundColor: function (color) {
		this.__border.setBackgroundColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBar::SetSearchInnerBackgroundColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBar::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var borderHeight = $.ig.ThemeManager.prototype.theme().smallHitSize();
		var extSmallPadding = $.ig.ThemeManager.prototype.theme().padding5();
		var smallPadding = $.ig.ThemeManager.prototype.theme().padding10();
		var iconSize = $.ig.truncate((borderHeight * 0.7));
		this.measureView1(this.__border, smallPadding, $.ig.intDivide((h - borderHeight), 2), w - (smallPadding * 2), borderHeight, 1);
		var left = smallPadding * 2;
		this.measureView1(this.__searchButton, left, $.ig.intDivide((h - iconSize), 2), iconSize, iconSize, $.ig.ThemeManager.prototype.theme().disabledOpacity());
		left += iconSize + extSmallPadding;
		this.searchTextbox().calculateSizeToFit();
		var txW = w - left - iconSize - smallPadding;
		this.measureView1(this.searchTextbox(), left, $.ig.intDivide((h - borderHeight), 2), txW, borderHeight, 1);
		this.__clearSearchButton.calculateSizeToFit();
		var buttonSize = this.__clearSearchButton.getCalculatedWidth();
		this.measureView1(this.__clearSearchButton, w - buttonSize - smallPadding, $.ig.intDivide((h - buttonSize), 2), buttonSize, buttonSize, 1);
		if (this.hasBottomSeparator()) {
			var sepSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
			this.measureView(this.__separator, 0, h - sepSize, w, sepSize);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBar::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPSearchBar', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSearchBar" />*/

/*<BeginType Name="Infragistics.CPSegementButton" />*/

$.ig.util.defType('CPSegementButton', 'CPView', {
	__alternativeButton: null,
	__segments: null,
	__container: null,
	__alternativeVisible: false,
	init: function () {
		$.ig.CPView.prototype.init.call(this);
		this.__segments = new $.ig.Array();
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		$.ig.ThemeManager.prototype.theme().applyLevel3Shadow(this);
		this.__container = new $.ig.CPViewBase();
		this.__container.clipToBounds(true);
		this.addSubview(this.__container);
	},
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPSegementButton::GetSegmentButton(System.Int32)" />*/
	getSegmentButton: function (index) {
		return this.__segments[index];
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPSegementButton::GetSegmentButton(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSegementButton::AddSegment(System.String, Infragistics.PathIcon, Infragistics.CPIconButtonStyle, Infragistics.CPThemeColorSet, Infragistics.ExecutionBlock, System.String)" />*/
	addSegment: function (title, icon, style, color, action, toolTipTitle) {
		var button = new $.ig.CPIconLabelButton(1, $.ig.CPTheme.prototype.buttonGuideStyleMedium, style, icon == null && title != null);
		button.setText(title);
		button.setIcon(icon);
		if (color != null) {
			button.setAccentColor(color);
		}
		button.setTooltip(toolTipTitle, null);
		button.addClickHandler(function (x, y) {
			action();
		});
		this.__container.addSubview(button);
		this.__segments.add(button);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSegementButton::AddSegment(System.String, Infragistics.PathIcon, Infragistics.CPIconButtonStyle, Infragistics.CPThemeColorSet, Infragistics.ExecutionBlock, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSegementButton::AddAlternativeButton(System.String, Infragistics.PathIcon, Infragistics.ExecutionBlock)" />*/
	addAlternativeButton: function (title, icon, action) {
		var button = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.standard);
		button.setText(title);
		button.setIcon(icon);
		button.addClickHandler(function (x, y) {
			action();
		});
		this.__container.addSubview(button);
		this.__alternativeButton = button;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSegementButton::AddAlternativeButton(System.String, Infragistics.PathIcon, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSegementButton::ShowAltButton()" />*/
	showAltButton: function () {
		var $self = this;
		this.__alternativeVisible = true;
		this.__container.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
			$self.sizeChanged($self.currentWidth(), $self.currentHeight());
		}, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSegementButton::ShowAltButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSegementButton::HideAltButton()" />*/
	hideAltButton: function () {
		var $self = this;
		this.__alternativeVisible = false;
		this.__container.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
			$self.sizeChanged($self.currentWidth(), $self.currentHeight());
		}, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSegementButton::HideAltButton()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSegementButton::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(70);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSegementButton::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSegementButton::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		var tw = 0;
		var count = this.__segments.length;
		for (var i = 0; i < count; i++) {
			var isLast = (i == (count - 1));
			if (this.__alternativeVisible && isLast) {
				this.__alternativeButton.calculateSizeToFit();
				tw += this.__alternativeButton.getCalculatedWidth();
			} else {
				var segment = this.__segments[i];
				segment.calculateSizeToFit();
				tw += segment.getCalculatedWidth();
			}
		}
		return tw + this.getCalculatedHeight() + ((count - 1) * $.ig.ThemeManager.prototype.theme().toolbarButtonSpacing());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSegementButton::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSegementButton::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		this.setCornerRadius($.ig.intDivide(h, 2));
		this.measureView(this.__container, 0, 0, w, h);
		var count = this.__segments.length;
		var left = $.ig.intDivide(h, 2);
		if (count > 0) {
			for (var i = 0; i < count; i++) {
				var isLast = (i == (count - 1));
				var segment = this.__segments[i];
				segment.calculateSizeToFit();
				var bw = segment.getCalculatedWidth();
				var bh = segment.getCalculatedHeight();
				if (this.__alternativeVisible && isLast) {
					this.__container.measureView(segment, left, h, bw, bh);
				} else {
					this.__container.measureView(segment, left, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh);
					left += bw + $.ig.ThemeManager.prototype.theme().toolbarButtonSpacing();
				}
			}
		}
		if (this.__alternativeButton != null) {
			this.__alternativeButton.calculateSizeToFit();
			var bw1 = this.__alternativeButton.getCalculatedWidth();
			var bh1 = this.__alternativeButton.getCalculatedHeight();
			if (!this.__alternativeVisible) {
				left = w;
			}
			this.__container.measureView(this.__alternativeButton, left, $.ig.intDivide(h, 2) - $.ig.intDivide(bh1, 2), bw1, bh1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSegementButton::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPSegementButton', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSegementButton" />*/

/*<BeginType Name="Infragistics.CPSlider" />*/

$.ig.util.defType('CPSlider', 'CPInteractionView', {
	__trackBarMin: null,
	__trackBarMax: null,
	__thumb: null,
	__disabledThumb: null,
	__colorSet: null,
	_minValue: 0,
	_maxValue: 0,
	_value: 0,
	__thumbCenterX: 0,
	__thumbCenterY: 0,
	__trackStart: 0,
	__trackSize: 0,
	__thumbSize: 0,
	__trackThickness: 0,
	__isOverThumb: false,
	_valueChanged: null,
	__isVertical: false,
	init: function (isVertical) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__isVertical = isVertical;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::Setup()" />*/
	setup: function () {
		$.ig.CPInteractionView.prototype.setup.call(this);
		this.__colorSet = $.ig.ThemeManager.prototype.theme().accentColor();
		this.__thumbSize = $.ig.NativeUIUtility.prototype.utility().densify(20);
		this.__trackThickness = $.ig.NativeUIUtility.prototype.utility().densify(3);
		this.__isOverThumb = false;
		this.__trackBarMin = new $.ig.CPView();
		this.__trackBarMin.setCornerRadius($.ig.intDivide(this.__trackThickness, 2));
		this.__trackBarMin.setBackgroundColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		this.addSubview(this.__trackBarMin);
		this.__trackBarMax = new $.ig.CPView();
		this.__trackBarMax.setCornerRadius($.ig.intDivide(this.__trackThickness, 2));
		this.__trackBarMax.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColorOverMainAtRest().$native());
		this.addSubview(this.__trackBarMax);
		this.__disabledThumb = new $.ig.CPView();
		this.__disabledThumb.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.addSubview(this.__disabledThumb);
		this.__thumb = new $.ig.CPView();
		this.__thumb.setBackgroundColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		this.addSubview(this.__thumb);
		$.ig.ThemeManager.prototype.theme().applyLevel1Shadow(this.__thumb);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::SetTrackBarNotSetColor(Infragistics.CPThemeColor)" />*/
	setTrackBarNotSetColor: function (color) {
		this.__trackBarMax.setBackgroundColor(color.$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::SetTrackBarNotSetColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPSlider::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.updateThumbCenter(x, y);
		this.__isOverThumb = true;
		return $.ig.CPInteractionView.prototype.handlePointerDown.call(this, x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPSlider::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPSlider::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this.isMouseDown()) {
			if (this.__isOverThumb) {
				this.updateThumbCenter(x, y);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPSlider::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		var baseSize = (this.__isVertical) ? w : h;
		this.__thumb.setCornerRadius($.ig.intDivide(this.__thumbSize, 2));
		this.__disabledThumb.setCornerRadius($.ig.intDivide(this.__thumbSize, 2));
		var val = this._value;
		val = Math.max(this._minValue, Math.min(val, this._maxValue));
		if (this.__isVertical) {
			this.__thumbCenterX = $.ig.intDivide(baseSize, 2);
			this.__trackStart = this.__thumbCenterX - $.ig.intDivide(this.__trackThickness, 2);
			this.__trackSize = h - this.__thumbSize;
			var position = 1 - ((val - this._minValue) / (this._maxValue - this._minValue));
			this.__thumbCenterY = $.ig.truncate(($.ig.intDivide(this.__thumbSize, 2) + position * this.__trackSize));
		} else {
			this.__thumbCenterY = $.ig.intDivide(baseSize, 2);
			this.__trackStart = this.__thumbCenterY - $.ig.intDivide(this.__trackThickness, 2);
			this.__trackSize = w - this.__thumbSize;
			var position1 = ((val - this._minValue) / (this._maxValue - this._minValue));
			this.__thumbCenterX = $.ig.truncate(($.ig.intDivide(this.__thumbSize, 2) + position1 * this.__trackSize));
		}
		if (this.__isVertical) {
			this.measureView1(this.__trackBarMin, this.__trackStart, $.ig.intDivide(this.__thumbSize, 2), this.__trackThickness, this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2), this.resolveOpacity(1, true));
			this.measureView1(this.__trackBarMax, this.__trackStart, this.__thumbCenterY, this.__trackThickness, this.__trackSize - this.__thumbCenterY + $.ig.intDivide(this.__thumbSize, 2), this.resolveOpacity(1, true));
			this.measureView1(this.__thumb, this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2), this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2), this.__thumbSize, this.__thumbSize, this.resolveOpacity(1, true));
			this.measureView1(this.__disabledThumb, this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2), this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2), this.__thumbSize, this.__thumbSize, 1);
		} else {
			this.measureView1(this.__trackBarMin, $.ig.intDivide(this.__thumbSize, 2), this.__trackStart, this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2), this.__trackThickness, this.resolveOpacity(1, true));
			this.measureView1(this.__trackBarMax, this.__thumbCenterX, this.__trackStart, this.__trackSize - this.__thumbCenterX + $.ig.intDivide(this.__thumbSize, 2), this.__trackThickness, this.resolveOpacity(1, true));
			this.measureView1(this.__thumb, this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2), this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2), this.__thumbSize, this.__thumbSize, this.resolveOpacity(1, true));
			this.measureView1(this.__disabledThumb, this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2), this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2), this.__thumbSize, this.__thumbSize, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		$.ig.CPInteractionView.prototype.updateInteractionStates1.call(this, over, mouseDown);
		if (mouseDown) {
			this.__thumb.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.__colorSet.pressed().color(), this.__colorSet.color(), this.__colorSet.pressedOpacity())));
		} else if (over) {
			this.__thumb.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.__colorSet.hover().color(), this.__colorSet.color(), this.__colorSet.hoverOpacity())));
		} else {
			this.__thumb.setBackgroundColor(this.__colorSet.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::UpdateThumbCenter(System.Int32, System.Int32)" />*/
	updateThumbCenter: function (x, y) {
		if (this.__isVertical) {
			this.__thumbCenterY = Math.min(Math.max(y, $.ig.intDivide(this.__thumbSize, 2)), $.ig.intDivide(this.__thumbSize, 2) + this.__trackSize);
		} else {
			this.__thumbCenterX = Math.min(Math.max(x, $.ig.intDivide(this.__thumbSize, 2)), $.ig.intDivide(this.__thumbSize, 2) + this.__trackSize);
		}
		this.calculateThumbValue();
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::UpdateThumbCenter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSlider::CalculateThumbValue()" />*/
	calculateThumbValue: function () {
		var position = 0;
		if (this.__isVertical) {
			position = 1 - ((this.__thumbCenterY - $.ig.intDivide(this.__thumbSize, 2)) / this.__trackSize);
		} else {
			position = ((this.__thumbCenterX - $.ig.intDivide(this.__thumbSize, 2)) / this.__trackSize);
		}
		this._value = position * (this._maxValue - this._minValue) + this._minValue;
		if (this._valueChanged != null) {
			this._valueChanged(this._value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSlider::CalculateThumbValue()" />*/
	,
	$type: new $.ig.Type('CPSlider', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSlider" />*/

/*<BeginType Name="Infragistics.CPSliderView" />*/

$.ig.util.defType('CPSliderView', 'CPViewBase', {
	__plusButton: null,
	__minusButton: null,
	__slider: null,
	__sep: null,
	__steps: null,
	__sepSize: 0,
	init: function (sizingGuide, buttonStyle) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__slider = new $.ig.CPSlider(false);
		this.addSubview(this.__slider);
		this.__plusButton = new $.ig.CPIconButton(0, sizingGuide, buttonStyle);
		this.__plusButton.supportsRapidClicks(true);
		this.__plusButton.isHidden(true);
		this.__plusButton.setIcon($.ig.UIPathIcons.prototype.icons().getZoomInIcon());
		this.__plusButton.addClickHandler(function (x, y) {
			$self.stepUp();
		});
		this.addSubview(this.__plusButton);
		this.__minusButton = new $.ig.CPIconButton(0, sizingGuide, buttonStyle);
		this.__minusButton.supportsRapidClicks(true);
		this.__minusButton.isHidden(true);
		this.__minusButton.setIcon($.ig.UIPathIcons.prototype.icons().getZoomOutIcon());
		this.__minusButton.addClickHandler(function (x, y) {
			$self.stepDown();
		});
		this.addSubview(this.__minusButton);
		this.setMinMax(0, 1);
		this.__slider._valueChanged = function (o) {
			$self.sliderValueChanged();
			return true;
		};
		this.__sep = new $.ig.CPViewBase();
		this.__sep.isHidden(true);
		this.__sep.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.addSubview(this.__sep);
		this.__sepSize = $.ig.ThemeManager.prototype.theme().borderWidth1();
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__plusButton, "plusButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__minusButton, "minusButton");
	},
	_supportsSep: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSliderView::SupportsSep()" />*/
	supportsSep: function (value) {
		if (arguments.length === 1) {
			this._supportsSep = value;
			return value;
		} else {
			return this._supportsSep;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSliderView::SupportsSep()" />*/
	,
	__valueChangedCallback: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::AddValueChangedHandler(Infragistics.AnimationTickBlock)" />*/
	addValueChangedHandler: function (callback) {
		this.__valueChangedCallback = callback;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::AddValueChangedHandler(Infragistics.AnimationTickBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::SetSliderValue(System.Double)" />*/
	setSliderValue: function (value) {
		this.__slider._value = value;
		this.__slider.triggerSizeChanged();
		this.ensureButonsState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::SetSliderValue(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::SliderValueChanged()" />*/
	sliderValueChanged: function () {
		if (this.__valueChangedCallback != null) {
			this.__valueChangedCallback(this.__slider._value);
		}
		this.ensureButonsState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::SliderValueChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::EnsureButonsState()" />*/
	ensureButonsState: function () {
		if (this.__steps != null) {
			var val = this.__slider._value;
			var firstStep = this.__steps[0];
			var lastStep = this.__steps[this.__steps.length - 1];
			if (val <= Math.min(firstStep, this.__slider._minValue)) {
				this.__minusButton.disable();
			} else {
				this.__minusButton.enable();
			}
			if (val >= Math.max(lastStep, this.__slider._maxValue)) {
				this.__plusButton.disable();
			} else {
				this.__plusButton.enable();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::EnsureButonsState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::StepDown()" />*/
	stepDown: function () {
		if (this.__steps != null) {
			var currentValue = this.__slider._value;
			var proposedValue = currentValue;
			for (var i = 0; i < this.__steps.length; i++) {
				var step = this.__steps[i];
				if (step < currentValue) {
					proposedValue = step;
				} else if (i == 0) {
					proposedValue = this.__slider._minValue;
					break;
				} else {
					break;
				}
			}
			this.__slider._value = proposedValue;
			this.updateSlider();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::StepDown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::StepUp()" />*/
	stepUp: function () {
		if (this.__steps != null) {
			var currentValue = this.__slider._value;
			var proposedValue = currentValue;
			var si = this.__steps.length - 1;
			for (var i = si; i >= 0; i--) {
				var step = this.__steps[i];
				if (step > currentValue) {
					proposedValue = step;
				} else if (i == si) {
					proposedValue = this.__slider._maxValue;
					break;
				} else {
					break;
				}
			}
			this.__slider._value = proposedValue;
			this.updateSlider();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::StepUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::SetSteps()" />*/
	setSteps: function (steps) {
		this.__steps = steps;
		if (this.__steps != null && this.__steps.length == 0) {
			this.__steps = null;
		}
		if (this.__steps != null) {
			this.__minusButton.isHidden(false);
			this.__plusButton.isHidden(false);
			this.__sep.isHidden(!this.supportsSep());
			this.ensureButonsState();
		} else {
			this.__minusButton.isHidden(true);
			this.__plusButton.isHidden(true);
			this.__sep.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::SetSteps()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::UpdateSlider()" />*/
	updateSlider: function () {
		this.__slider.triggerSizeChanged();
		if (this.__slider._valueChanged != null) {
			this.__slider._valueChanged(this.__slider._value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::UpdateSlider()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::SetMinMax(System.Double, System.Double)" />*/
	setMinMax: function (min, max) {
		this.__slider._minValue = min;
		this.__slider._maxValue = max;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::SetMinMax(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var bs = 0;
		var sepSize = 0;
		if (this.__steps != null) {
			if (this.supportsSep()) {
				sepSize = this.__sepSize;
			}
			this.__minusButton.calculateSizeToFit();
			bs = this.__minusButton.getCalculatedHeight();
		}
		var aw = Math.max(w - bs * 2 - sepSize, 0);
		var left = 0;
		if (this.__steps != null) {
			this.measureView1(this.__minusButton, left, $.ig.intDivide(h, 2) - $.ig.intDivide(bs, 2), bs, bs, 1);
			left += bs;
		}
		this.measureView1(this.__slider, left, 0, aw, h, 1);
		if (this.__steps != null) {
			left += aw;
			this.measureView1(this.__plusButton, left, $.ig.intDivide(h, 2) - $.ig.intDivide(bs, 2), bs, bs, 1);
			left += bs;
			if (this.supportsSep()) {
				this.measureView1(this.__sep, left, 0, sepSize, h, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSliderView::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		this.__plusButton.applyInteractionColorSet(colorSet);
		this.__minusButton.applyInteractionColorSet(colorSet);
		this.__slider.setTrackBarNotSetColor(colorSet.foreground());
		this.__sep.setBackgroundColor(colorSet.sepColor().$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPSliderView::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSliderView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		this.__minusButton.calculateSizeToFit();
		var sliderSize = $.ig.NativeUIUtility.prototype.utility().densify(150);
		if (this.__steps == null) {
			return sliderSize;
		}
		var sepSize = 0;
		if (this.supportsSep()) {
			sepSize = this.__sepSize;
		}
		return this.__minusButton.getCalculatedWidth() * 2 + sliderSize + sepSize;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSliderView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSliderView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__minusButton.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSliderView::GetCalculatedHeight()" />*/
	,
	$type: new $.ig.Type('CPSliderView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSliderView" />*/

/*<BeginType Name="Infragistics.CPSwitch" />*/

$.ig.util.defType('CPSwitch', 'CPInteractionView', {
	__value: false,
	__circle: null,
	__bar: null,
	__valueChangedBlock: null,
	__circleSize: 0,
	__barWidth: 0,
	__barHeight: 0,
	init: function (valueChanged) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this.__valueChangedBlock = valueChanged;
		this.__circleSize = $.ig.NativeUIUtility.prototype.utility().densify(28);
		this.__barWidth = $.ig.ThemeManager.prototype.theme().smallHitSize();
		this.__barHeight = $.ig.NativeUIUtility.prototype.utility().densify(9);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::Setup()" />*/
	setup: function () {
		$.ig.CPInteractionView.prototype.setup.call(this);
		this.__bar = new $.ig.CPView();
		this.addSubview(this.__bar);
		this.__circle = new $.ig.CPView();
		this.addSubview(this.__circle);
		$.ig.ThemeManager.prototype.theme().applyLevel1Shadow(this.__circle);
		this.setColors($.ig.ThemeManager.prototype.theme().accentColor(), new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().foregroundColorOverMainAtDisabled().color()));
		this.setValue1(true, false, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::Setup()" />*/
	,
	__onColor: null,
	__offColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::SetColors(Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet)" />*/
	setColors: function (onColor, offColor) {
		this.__onColor = onColor.copy();
		this.__offColor = offColor.copy();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::SetColors(Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSwitch::Value()" />*/
	value: function () {
		return this.__value;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSwitch::Value()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::SetValue(System.Boolean, System.Boolean)" />*/
	setValue: function (value, animate) {
		this.setValue1(value, animate, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::SetValue(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::SetValue(System.Boolean, System.Boolean, System.Boolean)" />*/
	setValue1: function (value, animate, notify) {
		var $self = this;
		if (value != this.__value) {
			this.__value = value;
			if (notify && this.__valueChangedBlock != null) {
				this.__valueChangedBlock(value);
			}
			if (animate) {
				this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.triggerSizeChanged();
				}, null);
			} else {
				this.triggerSizeChanged();
			}
			var colorSet = this.__value ? this.__onColor : this.__offColor;
			this.__bar.setBackgroundColor(colorSet.$native());
			this.__circle.setBackgroundColor(colorSet.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::SetValue(System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		$.ig.CPInteractionView.prototype.updateInteractionStates1.call(this, over, mouseDown);
		var colorSet = this.__value ? this.__onColor : this.__offColor;
		if (mouseDown) {
			this.__circle.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(colorSet.pressed().color(), colorSet.color(), colorSet.pressedOpacity())));
		} else if (over) {
			this.__circle.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(colorSet.hover().color(), colorSet.color(), colorSet.hoverOpacity())));
		} else {
			this.__circle.setBackgroundColor(colorSet.$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPSwitch::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPInteractionView.prototype.getSupportedKeyCommands.call(this);
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
			$self.triggerClick();
		}));
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.space), function (k) {
			$self.triggerClick();
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPSwitch::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		this.setValue1(!this.__value, true, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSwitch::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__barWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSwitch::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPSwitch::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__barWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPSwitch::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSwitch::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		this.__circle.setCornerRadius($.ig.intDivide(this.__circleSize, 2));
		this.__bar.setCornerRadius($.ig.intDivide(this.__barHeight, 2));
		var barX = $.ig.intDivide(w, 2) - $.ig.intDivide(this.__barWidth, 2);
		this.measureView1(this.__bar, barX, $.ig.intDivide(h, 2) - $.ig.intDivide(this.__barHeight, 2), this.__barWidth, this.__barHeight, this.resolveOpacity(1, false));
		var circleLeft = (this.__value) ? barX + this.__barWidth - this.__circleSize : barX;
		this.measureView1(this.__circle, circleLeft, $.ig.intDivide(h, 2) - $.ig.intDivide(this.__circleSize, 2), this.__circleSize, this.__circleSize, this.resolveOpacity(1, false));
	}
	/*<EndMethod Name="System.Void Infragistics.CPSwitch::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPSwitch', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSwitch" />*/

/*<BeginType Name="Infragistics.CPTabbedView" />*/

$.ig.util.defType('CPTabbedView', 'CPViewBase', {
	__fontSize: 0,
	__font: null,
	__selectedFont: null,
	__items: null,
	__actualViews: null,
	__labels: null,
	__currentPage: 0,
	__header: null,
	__selectedLine: null,
	__backgroundLine: null,
	__sepLine: null,
	__selectedLineHeight: 0,
	__tabNavigated: null,
	__tabAdditionalPadding: 0,
	__tabSpacing: 0,
	__sepLineHeight: 0,
	__tabAreaScrollView: null,
	__tabAreaContainer: null,
	__buttonsForTabs: null,
	__alwaysVisibleButtons: null,
	__selectedOpacity: 0,
	__nonSelectedOpacity: 0,
	__leftButton: null,
	__rightButton: null,
	_headerHeight: 0,
	_iconSize: 0,
	init: function () {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__items = new $.ig.Array();
		this.__actualViews = new $.ig.Array();
		this.__labels = new $.ig.Array();
		this.__currentPage = 0;
		this.clipToBounds(true);
		this.__tabAdditionalPadding = $.ig.NativeUIUtility.prototype.utility().densify(20);
		this.__buttonsForTabs = new $.ig.Array();
		this.__header = new $.ig.CPView();
		this.addSubview(this.__header);
		this.__tabAreaScrollView = new $.ig.CPScrollView();
		this.__tabAreaScrollView.alwaysBounceVertical(false);
		this.__tabAreaScrollView.alwaysBounceHorizontal(false);
		this.__tabAreaScrollView.setScrollBarVisiblitity(false, false);
		this.addSubview(this.__tabAreaScrollView);
		this.__tabAreaContainer = new $.ig.CPViewBase();
		this.__tabAreaScrollView.addSubview(this.__tabAreaContainer);
		this._headerHeight = $.ig.ThemeManager.prototype.theme().mediumHitSize();
		this._iconSize = $.ig.ThemeManager.prototype.theme().indicatorIconSize();
		this.__tabSpacing = 0;
		this.__selectedLineHeight = $.ig.NativeUIUtility.prototype.utility().densify(4);
		this.__sepLineHeight = $.ig.ThemeManager.prototype.theme().borderWidth1();
		this.__sepLine = new $.ig.CPViewBase();
		this.__sepLine.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__sepLine);
		this.__backgroundLine = new $.ig.CPViewBase();
		this.__backgroundLine.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.__tabAreaContainer.addSubview(this.__backgroundLine);
		this.__selectedLine = new $.ig.CPViewBase();
		this.__selectedLine.setBackgroundColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		this.__tabAreaContainer.addSubview(this.__selectedLine);
		this.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().mediumFont());
		this.setSelectedFont($.ig.ThemeManager.prototype.theme().mediumFont());
		this.setOpacities(1, $.ig.ThemeManager.prototype.theme().restOpacity());
		var cs = new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().mainBackgroundColor().color());
		this.__leftButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.accent);
		this.__leftButton.setIcon($.ig.UIPathIcons.prototype.icons().getChevronLeftIcon());
		this.__leftButton.setAccentColor(cs);
		this.__leftButton.isHidden(true);
		this.__leftButton.addClickHandler(function (x, y) {
			$self.scrollToLeft();
		});
		this.addSubview(this.__leftButton);
		$.ig.ThemeManager.prototype.theme().applyButtonAreaShadow(this.__leftButton);
		this.__rightButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.accent);
		this.__rightButton.setAccentColor(cs);
		this.__rightButton.setIcon($.ig.UIPathIcons.prototype.icons().getChevronRightIcon());
		this.__rightButton.isHidden(true);
		this.__rightButton.addClickHandler(function (x, y) {
			$self.scrollToRight();
		});
		this.addSubview(this.__rightButton);
		$.ig.ThemeManager.prototype.theme().applyButtonAreaShadow(this.__rightButton);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetSeparatorColor(Infragistics.CPThemeColor)" />*/
	setSeparatorColor: function (color) {
		this.__sepLine.setBackgroundColor(color.$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetSeparatorColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetOpacities(System.Double, System.Double)" />*/
	setOpacities: function (selected, nonSelected) {
		this.__selectedOpacity = selected;
		this.__nonSelectedOpacity = nonSelected;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetOpacities(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTabbedView::GetCurrentPageIndex()" />*/
	getCurrentPageIndex: function () {
		return this.__currentPage;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTabbedView::GetCurrentPageIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetSeparatorSize(System.Int32)" />*/
	setSeparatorSize: function (sepHeight) {
		this.__sepLineHeight = sepHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetSeparatorSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetHeaderColor(System.String)" />*/
	setHeaderColor: function (color) {
		this.__header.setBackgroundColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetHeaderColor(System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPTabbedView::Header()" />*/
	header: function () {
		return this.__header;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPTabbedView::Header()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::AddItem(Infragistics.CPViewBase, System.String)" />*/
	addItem: function (view, title) {
		this.addItem1(view, title, false, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::AddItem(Infragistics.CPViewBase, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::AddItemWithIcon(Infragistics.CPViewBase, System.String, Infragistics.PathIcon)" />*/
	addItemWithIcon: function (view, title, icon) {
		this.addItem1(view, title, false, icon);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::AddItemWithIcon(Infragistics.CPViewBase, System.String, Infragistics.PathIcon)" />*/
	,
	_ignoreShadow: false,
	_tabButtonInteractionSet: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTabbedView::TabButtonInteractionSet()" />*/
	tabButtonInteractionSet: function (value) {
		if (arguments.length === 1) {
			this._tabButtonInteractionSet = value;
			return value;
		} else {
			return this._tabButtonInteractionSet;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTabbedView::TabButtonInteractionSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::AddItem(Infragistics.CPViewBase, System.String, System.Boolean, Infragistics.PathIcon)" />*/
	addItem1: function (view, title, aboveShadow, icon) {
		var $self = this;
		this.__buttonsForTabs.add(new $.ig.Array());
		var index = this.__items.length;
		var button = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.minimal);
		button.setText(title);
		button.overrideHInset(0);
		button.canTakeControlOfMouseCursor(false);
		button.ignoreDisabledOpacity(true);
		button.overrideIconSize(this._iconSize);
		if (this.tabButtonInteractionSet() != null) {
			button.applyInteractionColorSet(this.tabButtonInteractionSet());
		}
		button.addClickHandler(function (x, y) {
			$self.itemClicked(index);
		});
		button.setIcon(icon);
		$.ig.UIUtility.prototype.setAccessibilityName2(button, "button_TabHeader_", title);
		var clippingContainer = new $.ig.CPView();
		clippingContainer.clipToBounds(true);
		clippingContainer.addSubview(view);
		this.__items.add(clippingContainer);
		this.__actualViews.add(view);
		this.addSubview(clippingContainer);
		this.__labels.add(button);
		this.__tabAreaContainer.addSubview(button);
		if (!this._ignoreShadow) {
			if (!aboveShadow) {
				this.__header.bringToFront();
				this.__tabAreaScrollView.bringToFront();
			} else {
				view.bringToFront();
			}
		}
		if (this.__items.length == 1) {
			if (this.__tabNavigated != null) {
				this.__tabNavigated(0);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::AddItem(Infragistics.CPViewBase, System.String, System.Boolean, Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetButtonsForTab(System.Int32, Infragistics.CPList)" />*/
	setButtonsForTab: function (index, buttons) {
		this.__buttonsForTabs[index] = buttons;
		for (var i = 0; i < buttons.length; i++) {
			var tabButton = buttons[i];
			this.addSubview(tabButton._button);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetButtonsForTab(System.Int32, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetButtons(Infragistics.CPList)" />*/
	setButtons: function (buttons) {
		this.__alwaysVisibleButtons = buttons;
		for (var i = 0; i < buttons.length; i++) {
			var tabButton = buttons[i];
			this.addSubview(tabButton._button);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetButtons(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::FocusManagerRegistered(System.String)" />*/
	focusManagerRegistered: function (sectionId) {
		$.ig.CPViewBase.prototype.focusManagerRegistered.call(this, sectionId);
		this.adjustFocusElements();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::FocusManagerRegistered(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPTabbedView::ActualViewAtIndex(System.Int32)" />*/
	actualViewAtIndex: function (index) {
		return this.__actualViews[index];
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPTabbedView::ActualViewAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::AdjustFocusElements()" />*/
	adjustFocusElements: function () {
		var count = this.__items.length;
		for (var i = 0; i < count; i++) {
			if (i != this.__currentPage) {
				this.actualViewAtIndex(i).toggleFocusElements(false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::AdjustFocusElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ToggleFocusElements(System.Boolean)" />*/
	toggleFocusElements: function (isFocusable) {
		$.ig.CPViewBase.prototype.toggleFocusElements.call(this, isFocusable);
		if (isFocusable) {
			this.adjustFocusElements();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ToggleFocusElements(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::RemoveItemAtIndex(System.Int32)" />*/
	removeItemAtIndex: function (index) {
		var view = this.__items[index];
		var button = this.__labels[index];
		this.__items.removeAt(index);
		var actualView = this.__actualViews[index];
		view.removeSubview(actualView);
		this.__actualViews.removeAt(index);
		this.__labels.removeAt(index);
		this.removeSubview(view);
		this.__tabAreaContainer.removeSubview(button);
		if (this.__currentPage == index) {
			this.__currentPage = 0;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::RemoveItemAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ClearTabs()" />*/
	clearTabs: function () {
		var count = this.__items.length;
		for (var i = count - 1; i >= 0; i--) {
			this.removeItemAtIndex(i);
		}
		this.__currentPage = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ClearTabs()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPTabbedView::GetViewAtIndex(System.Int32)" />*/
	getViewAtIndex: function (index) {
		return this.actualViewAtIndex(index);
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPTabbedView::GetViewAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ItemClicked(System.Int32)" />*/
	itemClicked: function (index) {
		if (index != this.__currentPage) {
			this.navigateToItem(index, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ItemClicked(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetSelectedFont(System.String)" />*/
	setSelectedFont: function (font) {
		this.__selectedFont = font;
		this.applyFonts();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetSelectedFont(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.__fontSize = fontSize;
		this.__font = font;
		this.applyFonts();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ApplyFonts()" />*/
	applyFonts: function () {
		if (this.__font != null) {
			var count = this.__items.length;
			for (var i = 0; i < count; i++) {
				var button = this.__labels[i];
				if (i == this.__currentPage) {
					button.setFont(this.__selectedFont);
				} else {
					button.setFont(this.__font);
				}
				button.setOverrideFontSize(this.__fontSize);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ApplyFonts()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::NavigateToItem(System.Int32, System.Boolean)" />*/
	navigateToItem: function (index, animated) {
		var $self = this;
		if (index == this.__currentPage) {
			animated = false;
		}
		if (this.__currentPage >= 0 && this.__items.length > this.__currentPage) {
			this.actualViewAtIndex(this.__currentPage).toggleFocusElements(false);
		}
		if (index >= 0 && this.__items.length > index) {
			this.actualViewAtIndex(index).toggleFocusElements(true);
		}
		if (animated) {
			this.measureBoth(this.__currentPage);
			this.__currentPage = index;
			this.applyFonts();
			this.measureTabs(this.__currentPage, true);
			this.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.__tabAreaContainer.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.measureTabs($self.__currentPage, false);
				}, null);
				$self.measurePages($self.__currentPage);
			}, null);
		} else {
			this.__currentPage = index;
			this.applyFonts();
			this.measureBoth(index);
		}
		if (this.__tabNavigated != null) {
			this.__tabNavigated(index);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::NavigateToItem(System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::MeasureBoth(System.Int32)" />*/
	measureBoth: function (index) {
		this.measureTabs(index, false);
		this.measurePages(index);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::MeasureBoth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureBoth(this.__currentPage);
		this.ensureScrollButtonLocation(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::EnsureScrollButtonLocation(System.Int32, System.Int32)" />*/
	ensureScrollButtonLocation: function (w, h) {
		this.__leftButton.calculateSizeToFit();
		var bs = this.__leftButton.getCalculatedHeight();
		var offset = $.ig.ThemeManager.prototype.theme().padding15();
		var bt = $.ig.intDivide(this.__tabAreaScrollView.currentHeight(), 2) - $.ig.intDivide(bs, 2);
		var bx = -offset;
		if (this.__leftButton.isHidden()) {
			bx = -bs;
		}
		this.measureView1(this.__leftButton, bx, bt, bs, bs, 1);
		bx = w - bs + offset;
		if (this.__rightButton.isHidden()) {
			bx = w;
		}
		this.measureView1(this.__rightButton, bx, bt, bs, bs, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::EnsureScrollButtonLocation(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ScrollToLeft()" />*/
	scrollToLeft: function () {
		var cx = this.__tabAreaScrollView.getContentOffsetX();
		var newX = cx - this.currentWidth();
		if (newX < 0) {
			newX = 0;
		}
		this.__tabAreaScrollView.animateScrollTo(newX, 0);
		this.ensureScrollButtonVisibility(newX);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ScrollToLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ScrollToRight()" />*/
	scrollToRight: function () {
		var cw = this.__tabAreaScrollView.getContentWidth();
		var cx = this.__tabAreaScrollView.getContentOffsetX();
		var newX = cx + this.currentWidth();
		var maxX = cw - this.currentWidth();
		if (newX > maxX) {
			newX = maxX;
		}
		this.__tabAreaScrollView.animateScrollTo(newX, 0);
		this.ensureScrollButtonVisibility(newX);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ScrollToRight()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTabbedView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTabbedView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	handleMouseEnter: function (x, y) {
		$.ig.CPViewBase.prototype.handleMouseEnter.call(this, x, y);
		this.ensureScrollButtonVisibility(this.__tabAreaScrollView.getContentOffsetX());
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::HandleMouseEnter(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::EnsureScrollButtonVisibility(System.Int32)" />*/
	ensureScrollButtonVisibility: function (cx) {
		var cw = this.__tabAreaScrollView.getContentWidth();
		var tw = this.currentWidth();
		if (cw > tw) {
			var wasLeftButtonHidden = this.__leftButton.isHidden();
			if (cx > 0) {
				this.__leftButton.isHidden(false);
				this.__leftButton.bringToFront();
			} else {
				this.__leftButton.isHidden(true);
			}
			var maxX = cw - this.currentWidth();
			var wasRightButtonHidden = this.__rightButton.isHidden();
			if (cx < Math.floor(maxX)) {
				this.__rightButton.isHidden(false);
				this.__rightButton.bringToFront();
			} else {
				this.__rightButton.isHidden(true);
			}
			if (wasLeftButtonHidden != this.__leftButton.isHidden() || wasRightButtonHidden != this.__rightButton.isHidden()) {
				this.ensureScrollButtonLocation(this.currentWidth(), this.currentHeight());
			}
		} else {
			this.__leftButton.isHidden(true);
			this.__rightButton.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::EnsureScrollButtonVisibility(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	handleMouseLeave: function (x, y) {
		$.ig.CPViewBase.prototype.handleMouseLeave.call(this, x, y);
		this.__leftButton.isHidden(true);
		this.__rightButton.isHidden(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::HandleMouseLeave(System.Int32, System.Int32)" />*/
	,
	_tabHeaderIndent: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTabbedView::TabHeaderIndent()" />*/
	tabHeaderIndent: function (value) {
		if (arguments.length === 1) {
			this._tabHeaderIndent = value;
			return value;
		} else {
			return this._tabHeaderIndent;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTabbedView::TabHeaderIndent()" />*/
	,
	_autoHideHeaderIfOneTab: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTabbedView::AutoHideHeaderIfOneTab()" />*/
	autoHideHeaderIfOneTab: function (value) {
		if (arguments.length === 1) {
			this._autoHideHeaderIfOneTab = value;
			return value;
		} else {
			return this._autoHideHeaderIfOneTab;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTabbedView::AutoHideHeaderIfOneTab()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetTabAdditionalPadding(System.Int32)" />*/
	setTabAdditionalPadding: function (padding) {
		this.__tabAdditionalPadding = padding;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetTabAdditionalPadding(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetTabSpacing(System.Int32)" />*/
	setTabSpacing: function (spacing) {
		this.__tabSpacing = spacing;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetTabSpacing(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::SetBackgroundLineVisiblity(System.Boolean)" />*/
	setBackgroundLineVisiblity: function (visible) {
		this.__backgroundLine.isHidden(!visible);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::SetBackgroundLineVisiblity(System.Boolean)" />*/
	,
	__showSelectedTabLineAbove: false,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::ShowSelectedTabLineAbove(System.Boolean)" />*/
	showSelectedTabLineAbove: function (above) {
		this.__showSelectedTabLineAbove = above;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::ShowSelectedTabLineAbove(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTabbedView::GetCurrentTabHeight()" />*/
	getCurrentTabHeight: function () {
		this.measureTabs(this.__currentPage, false);
		return this.__currentTabHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTabbedView::GetCurrentTabHeight()" />*/
	,
	_ignoreSmallScreenFillHeader: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTabbedView::IgnoreSmallScreenFillHeader()" />*/
	ignoreSmallScreenFillHeader: function (value) {
		if (arguments.length === 1) {
			this._ignoreSmallScreenFillHeader = value;
			return value;
		} else {
			return this._ignoreSmallScreenFillHeader;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTabbedView::IgnoreSmallScreenFillHeader()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.CPTabbedView::MeasureTabWidths(System.Int32)" />*/
	measureTabWidths: function (w) {
		var tabWidths = new $.ig.Dictionary(0);
		var count = this.__items.length;
		var totalTabWidth = 0;
		for (var i = 0; i < count; i++) {
			var b = this.__labels[i];
			var tabWidth = b.getCalculatedWidth() + this.__tabAdditionalPadding * 2;
			tabWidths.item(i.toString(), tabWidth);
			totalTabWidth += tabWidth + this.__tabSpacing;
		}
		if (count > 0) {
			totalTabWidth -= this.__tabSpacing;
		}
		if ($.ig.ThemeManager.prototype.theme().isSmallArea(w) && !this.ignoreSmallScreenFillHeader() && totalTabWidth < w) {
			var tabAdditonalW = $.ig.intDivide((w - totalTabWidth), count);
			for (var i1 = 0; i1 < count; i1++) {
				var tabW = $.ig.util.getValue(tabWidths.item(i1.toString()));
				tabWidths.item(i1.toString(), tabW + tabAdditonalW);
			}
		}
		return tabWidths;
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.CPTabbedView::MeasureTabWidths(System.Int32)" />*/
	,
	__currentTabHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::MeasureTabs(System.Int32, System.Boolean)" />*/
	measureTabs: function (page, isPreAnimationMeasure) {
		var count = this.__items.length;
		if (count > 0) {
			this.applyFonts();
			var w = this.currentWidth();
			var h = this.currentHeight();
			var isSmallArea = $.ig.ThemeManager.prototype.theme().isSmallArea(w);
			for (var i = 0; i < count; i++) {
				var b = this.__labels[i];
				b.calculateSizeToFit();
			}
			var tabX = 0;
			var tabAdditionalPadding = this.__tabAdditionalPadding;
			var tabY = 0;
			var tabHeight = this._headerHeight;
			this.__currentTabHeight = tabHeight;
			var buttonSpacing = $.ig.ThemeManager.prototype.theme().toolbarButtonSpacing();
			var totalButtonWidth = 0;
			var rightButtonW = 0;
			var tabHeaderWidth = w - this.tabHeaderIndent() * 2;
			var tabLineY = tabHeight - this.__selectedLineHeight;
			if (this.__showSelectedTabLineAbove) {
				tabLineY = tabY;
			}
			var tabWidths = this.measureTabWidths(tabHeaderWidth);
			for (var i1 = 0; i1 < count; i1++) {
				var b1 = this.__labels[i1];
				var tabWidth = $.ig.util.getValue(tabWidths.item(i1.toString()));
				this.__tabAreaContainer.measureView(b1, tabX, tabY, tabWidth, tabHeight);
				if (i1 == page) {
					b1.restOpacity(this.__selectedOpacity);
					b1.disable();
					if (!isPreAnimationMeasure) {
						this.__tabAreaContainer.measureView(this.__selectedLine, tabX, tabLineY, tabWidth, this.__selectedLineHeight);
					}
					var buttonsForTab = new $.ig.Array();
					if (this.__alwaysVisibleButtons != null) {
						$.ig.ArrayUtility.prototype.addToCPReadOnlyList(buttonsForTab, this.__alwaysVisibleButtons);
					}
					$.ig.ArrayUtility.prototype.addToCPReadOnlyList(buttonsForTab, this.__buttonsForTabs[i1]);
					for (var bi = 0; bi < buttonsForTab.length; bi++) {
						var tabButton = buttonsForTab[bi];
						if (!tabButton._isHidden) {
							tabButton._button.isHidden(false);
							tabButton._button.calculateSizeToFit();
							totalButtonWidth += tabButton._button.getCalculatedWidth() + buttonSpacing;
							if (!isSmallArea || tabButton._preferLayoutRight) {
								rightButtonW += tabButton._button.getCalculatedWidth() + buttonSpacing;
							}
						} else {
							tabButton._button.isHidden(true);
						}
					}
				} else {
					b1.restOpacity(this.__nonSelectedOpacity);
					b1.enable();
					var buttonsForTab1 = this.__buttonsForTabs[i1];
					for (var bi1 = 0; bi1 < buttonsForTab1.length; bi1++) {
						var tabButton1 = buttonsForTab1[bi1];
						tabButton1._button.isHidden(true);
					}
				}
				tabX += tabWidth + this.__tabSpacing;
			}
			if (count > 0) {
				tabX -= this.__tabSpacing;
			}
			this.measureView(this.__tabAreaScrollView, this.tabHeaderIndent(), 0, tabHeaderWidth, tabHeight);
			this.__tabAreaContainer.measureView(this.__backgroundLine, 0, tabLineY, tabX, this.__selectedLineHeight);
			this.__tabAreaScrollView.setContentSize(Math.max(tabHeaderWidth, tabX), tabHeight);
			this.measureView(this.__header, this.tabHeaderIndent(), 0, tabHeaderWidth, tabHeight);
			var availWidth = tabHeaderWidth - tabX;
			var bt = tabY;
			if (totalButtonWidth > 0 && availWidth < totalButtonWidth) {
				if (count > 1 || !this.autoHideHeaderIfOneTab()) {
					bt += tabHeight;
					this.__currentTabHeight += tabHeight;
				}
			} else if (totalButtonWidth == 0 && count == 1 && this.autoHideHeaderIfOneTab()) {
				this.__currentTabHeight = 0;
			}
			var rightButtonX = tabHeaderWidth - (rightButtonW);
			var leftButtonX = buttonSpacing;
			var buttons = new $.ig.Array();
			if (this.__alwaysVisibleButtons != null) {
				$.ig.ArrayUtility.prototype.addToCPReadOnlyList(buttons, this.__alwaysVisibleButtons);
			}
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(buttons, this.__buttonsForTabs[page]);
			for (var bi2 = 0; bi2 < buttons.length; bi2++) {
				var tabButton2 = buttons[bi2];
				var bw = tabButton2._button.getCalculatedWidth();
				var bh = tabButton2._button.getCalculatedHeight();
				if (!tabButton2._isHidden) {
					if (!isSmallArea || tabButton2._preferLayoutRight) {
						this.measureView1(tabButton2._button, rightButtonX, bt + $.ig.intDivide(tabHeight, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
						rightButtonX += bw + buttonSpacing;
					} else {
						this.measureView1(tabButton2._button, leftButtonX, bt + $.ig.intDivide(tabHeight, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
						leftButtonX += bw + buttonSpacing;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::MeasureTabs(System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::MeasurePages(System.Int32)" />*/
	measurePages: function (page) {
		var count = this.__items.length;
		if (count > 0) {
			var w = this.currentWidth();
			var h = this.currentHeight();
			var tabHeight = this.__currentTabHeight;
			var viewY = tabHeight;
			if (count == 1 && this.autoHideHeaderIfOneTab()) {
				viewY = 0;
				this.__tabAreaScrollView.isHidden(true);
				this.__sepLine.isHidden(true);
				this.__header.isHidden(true);
			} else {
				this.__tabAreaScrollView.isHidden(false);
				this.__sepLine.isHidden(false);
				this.__header.isHidden(false);
			}
			var viewH = h - viewY;
			var viewW = w;
			this.measureView(this.__sepLine, this.tabHeaderIndent(), tabHeight -= this.__sepLineHeight, w - this.tabHeaderIndent() * 2, this.__sepLineHeight);
			for (var i = 0; i < count; i++) {
				var diff = i - page;
				var viewX = diff * viewW;
				var clippingView = this.__items[i];
				this.measureView(clippingView, viewX, viewY, viewW, viewH);
				this.measureView(this.actualViewAtIndex(i), 0, 0, viewW, viewH);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::MeasurePages(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTabbedView::TabCount()" />*/
	tabCount: function () {
		return this.__labels.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTabbedView::TabCount()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTabbedView::AddTabNavigatedHandler(Infragistics.IntBlock)" />*/
	addTabNavigatedHandler: function (tabNavigated) {
		this.__tabNavigated = tabNavigated;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTabbedView::AddTabNavigatedHandler(Infragistics.IntBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTabbedView::GetTabHeaderViewForIndex(System.Int32)" />*/
	getTabHeaderViewForIndex: function (index) {
		if (index >= 0 && index < this.__labels.length) {
			return this.__labels[index];
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTabbedView::GetTabHeaderViewForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTabbedView::GetTabHeaderViewForContentView(Infragistics.CPViewBase)" />*/
	getTabHeaderViewForContentView: function (contentView) {
		var index = -1;
		for (var i = 0; i < this.__items.length; i++) {
			if (this.actualViewAtIndex(i) == contentView) {
				index = i;
				break;
			}
		}
		return this.getTabHeaderViewForIndex(index);
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTabbedView::GetTabHeaderViewForContentView(Infragistics.CPViewBase)" />*/
	,
	$type: new $.ig.Type('CPTabbedView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTabbedView" />*/

/*<BeginType Name="Infragistics.CPTabButton" />*/

$.ig.util.defType('CPTabButton', 'Object', {
	_button: null,
	_preferLayoutRight: false,
	_isHidden: false,
	init: function (tabButton, buttonPreferLayoutRight) {
		$.ig.Object.prototype.init.call(this);
		this._button = tabButton;
		this._preferLayoutRight = buttonPreferLayoutRight;
	},
	$type: new $.ig.Type('CPTabButton', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTabButton" />*/

/*<BeginType Name="Infragistics.CPTimeEntryView" />*/

$.ig.util.defType('CPTimeEntryView', 'CPViewBase', {
	__hourBox: null,
	__minuteBox: null,
	__hourBorder: null,
	__minuteBorder: null,
	__amPm: null,
	__timeSeparator: null,
	__title: null,
	_viewGotFocus: null,
	_viewLostFocus: null,
	__timeChanged: null,
	__calcW: 0,
	__calcH: 0,
	__minSize: 0,
	__pm: false,
	__time: new Date(),
	init: function (icon, title, time, timeChanged) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__time = time;
		this.__pm = $.ig.DateUtility.prototype.getHourForDate(this.__time) >= 12;
		this.__timeChanged = timeChanged;
		this.__title = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleLarge, $.ig.CPIconButtonStyle.prototype.minimal);
		this.__title.setIcon(icon);
		this.__title.setText(title);
		this.__title.disable();
		this.__title.ignoreDisabledOpacity(true);
		this.addSubview(this.__title);
		this.__hourBorder = new $.ig.CPView();
		this.__hourBorder.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.__hourBorder.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__hourBorder);
		this.__hourBox = new $.ig.CPNumericTextView();
		this.__hourBox.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__hourBox.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__hourBox.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__hourBox.setKeyboardType($.ig.KeyboardType.prototype.numeric);
		this.__hourBox.allowNegatives(false);
		this.__hourBox.minValue($.ig.util.toNullable(Number, 1));
		this.__hourBox.maxValue($.ig.util.toNullable(Number, 12));
		this.__hourBox.setValue($.ig.NativeNullableUtility.prototype.wrapDouble($.ig.DateUtility.prototype.getHourAmPm(this.__time)));
		this.__hourBox.registerGotFocus(function () {
			$self.__hourBox.selectAllText();
			if ($self._viewGotFocus != null) {
				$self._viewGotFocus();
			}
		});
		this.__hourBox.registerLostFocus(function () {
			if ($self._viewLostFocus != null) {
				$self._viewLostFocus();
			}
		});
		this.__hourBox.registerTextChanged(function () {
			$self.updateTime();
		});
		this.addSubview(this.__hourBox);
		this.__minuteBorder = new $.ig.CPView();
		this.__minuteBorder.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.__minuteBorder.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__minuteBorder);
		this.__minuteBox = new $.ig.CPNumericTextView();
		this.__minuteBox.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__minuteBox.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__minuteBox.setFont($.ig.ThemeManager.prototype.theme().fontSizeH4(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__minuteBox.setKeyboardType($.ig.KeyboardType.prototype.numeric);
		this.__minuteBox.allowNegatives(false);
		this.__minuteBox.minValue($.ig.util.toNullable(Number, 0));
		this.__minuteBox.maxValue($.ig.util.toNullable(Number, 59));
		this.__minuteBox.minNumberOfDigits(2);
		this.__minuteBox.maxNumberOfDigits(2);
		this.__minuteBox.setValue($.ig.NativeNullableUtility.prototype.wrapDouble($.ig.DateUtility.prototype.getMinuteForDate(this.__time)));
		this.__minuteBox.registerGotFocus(function () {
			$self.__minuteBox.selectAllText();
			if ($self._viewGotFocus != null) {
				$self._viewGotFocus();
			}
		});
		this.__minuteBox.registerLostFocus(function () {
			if ($self._viewLostFocus != null) {
				$self._viewLostFocus();
			}
		});
		this.__minuteBox.registerTextChanged(function () {
			$self.updateTime();
		});
		this.addSubview(this.__minuteBox);
		$.ig.CPTextViewManager.prototype.register(this.__hourBox, "CPTimeEntryView");
		$.ig.CPTextViewManager.prototype.register(this.__minuteBox, "CPTimeEntryView");
		this.__timeSeparator = new $.ig.CPLabel();
		this.__timeSeparator.setText(":");
		this.__timeSeparator.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__timeSeparator.setFont($.ig.ThemeManager.prototype.theme().fontSizeH4(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.addSubview(this.__timeSeparator);
		this.__amPm = new $.ig.CPIconLabelButton(1, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.standard, true);
		this.__amPm.setText($.ig.DateUtility.prototype.getHourForDate(this.__time) < 12 ? "AM   " : "PM   ");
		this.__amPm.setColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__amPm.addClickHandler(function (x, y) {
			var items = new $.ig.Array();
			if ($.ig.DateUtility.prototype.getHourForDate($self.__time) == 12 && !$self.__pm) {
				$self.__time = $.ig.DateUtility.prototype.addToDate($self.__time, 0, 0, 0, -12, 0);
			}
			items.add(new $.ig.CPPopupListItem(2, null, 0, "AM", $.ig.DateUtility.prototype.getHourForDate($self.__time) < 12, null, function (obj) {
				if ($.ig.DateUtility.prototype.getHourForDate($self.__time) >= 12) {
					$self.__time = $.ig.DateUtility.prototype.addToDate($self.__time, 0, 0, 0, -12, 0);
					$self.__amPm.setText("AM   ");
					$self.__pm = false;
					$self.updateTime();
				}
				return true;
			}));
			items.add(new $.ig.CPPopupListItem(2, null, 0, "PM", $.ig.DateUtility.prototype.getHourForDate($self.__time) >= 12, null, function (obj) {
				if ($.ig.DateUtility.prototype.getHourForDate($self.__time) < 12) {
					$self.__time = $.ig.DateUtility.prototype.addToDate($self.__time, 0, 0, 0, 12, 0);
					$self.__amPm.setText("PM   ");
					$self.__pm = true;
					$self.updateTime();
				}
				return true;
			}));
			$.ig.CPPopupManager.prototype.showList4($self.__amPm, $self.__amPm, items, $.ig.CPPopupPosition.prototype.auto, null, -1, -1, null);
		});
		this.addSubview(this.__amPm);
		this.__minSize = this.__amPm.sizingGuide().size();
		this.updateTime();
	},
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPTimeEntryView::GetHourBox()" />*/
	getHourBox: function () {
		return this.__hourBox;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPTimeEntryView::GetHourBox()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPTimeEntryView::GetMinuteBox()" />*/
	getMinuteBox: function () {
		return this.__minuteBox;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPTimeEntryView::GetMinuteBox()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTimeEntryView::GetAMPM()" />*/
	getAMPM: function () {
		return this.__amPm;
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTimeEntryView::GetAMPM()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var padding = 0;
		var iconPadding = $.ig.ThemeManager.prototype.theme().padding5();
		var sp = $.ig.ThemeManager.prototype.theme().padding10();
		var top = $.ig.intDivide(h, 2) - $.ig.intDivide(this.__minSize, 2);
		this.__title.calculateSizeToFit();
		var lw = this.__title.getCalculatedWidth();
		var lh = this.__title.getCalculatedHeight();
		this.measureView1(this.__title, padding, top, lw, this.__minSize, 1);
		this.__amPm.calculateSizeToFit();
		lw = this.__amPm.getCalculatedWidth();
		lh = this.__amPm.getCalculatedHeight();
		this.__timeSeparator.calculateSizeToFit();
		var tsw = this.__timeSeparator.getCalculatedWidth();
		var tsh = this.__timeSeparator.getCalculatedHeight();
		var left = w - padding - lw - sp - 3 * this.__minSize;
		this.measureView1(this.__hourBorder, left + $.ig.intDivide(sp, 2), top + $.ig.intDivide(sp, 2), this.__minSize - sp, this.__minSize - sp, 1);
		this.measureView1(this.__hourBox, left, top, this.__minSize, this.__minSize, 1);
		left += this.__minSize - sp;
		this.measureView1(this.__timeSeparator, left + $.ig.intDivide(this.__minSize, 2) - $.ig.intDivide(tsw, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(tsh, 2), tsw, tsh, 1);
		left += this.__minSize - sp;
		this.measureView1(this.__minuteBorder, left + $.ig.intDivide(sp, 2), top + $.ig.intDivide(sp, 2), this.__minSize - sp, this.__minSize - sp, 1);
		this.measureView1(this.__minuteBox, left, $.ig.intDivide(h, 2) - $.ig.intDivide(this.__minSize, 2), this.__minSize, this.__minSize, 1);
		this.measureView1(this.__amPm, w - padding - lw, top, lw, this.__minSize, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		$.ig.CPTextViewManager.prototype.unregisterGroup("CPTimeEntryView");
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::Enable()" />*/
	enable: function () {
		$.ig.CPViewBase.prototype.enable.call(this);
		this.__hourBox.enable();
		this.__minuteBox.enable();
		this.__amPm.enable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::Enable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::Disable()" />*/
	disable: function () {
		$.ig.CPViewBase.prototype.disable.call(this);
		this.__hourBox.disable();
		this.__minuteBox.disable();
		this.__amPm.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		this.__calcH = this.__minSize;
		this.__calcW = limitWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTimeEntryView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTimeEntryView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTimeEntryView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTimeEntryView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTimeEntryView::UpdateTime()" />*/
	updateTime: function () {
		var newHour = $.ig.NativeStringUtility.prototype.convertToInt(this.__hourBox.getText(), 0);
		var newMinute = $.ig.NativeStringUtility.prototype.convertToInt(this.__minuteBox.getText(), 0);
		if (newHour == 12) {
			newHour = 0;
		}
		if (this.__pm) {
			newHour += 12;
		}
		var year = $.ig.DateUtility.prototype.getYearForDate(this.__time);
		var month = $.ig.DateUtility.prototype.getMonthForDate(this.__time);
		var day = $.ig.DateUtility.prototype.getDayForDate(this.__time);
		this.__time = $.ig.DateUtility.prototype.createDate1(month, day, year, newHour, newMinute);
		if (this.__timeChanged != null) {
			this.__timeChanged(this.__time);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTimeEntryView::UpdateTime()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.CPTimeEntryView::GetTime()" />*/
	getTime: function () {
		return this.__time;
	}
	/*<EndMethod Name="System.DateTime Infragistics.CPTimeEntryView::GetTime()" />*/
	,
	$type: new $.ig.Type('CPTimeEntryView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTimeEntryView" />*/

/*<BeginType Name="Infragistics.CPTypingIndicator" />*/

$.ig.util.defType('CPTypingIndicator', 'CPViewBase', {
	__circle1: null,
	__circle2: null,
	__circle3: null,
	__opacityState1: 0,
	__opacityState2: 0,
	__currentIndex: 0,
	init: function () {
		this.__currentIndex = 0;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__circle1 = new $.ig.CPCircleView();
		this.__circle1.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.addSubview(this.__circle1);
		this.__circle2 = new $.ig.CPCircleView();
		this.__circle2.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.addSubview(this.__circle2);
		this.__circle3 = new $.ig.CPCircleView();
		this.__circle3.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.addSubview(this.__circle3);
		this.__currentIndex = 0;
		this.__opacityState1 = $.ig.ThemeManager.prototype.theme().restOpacity();
		this.__opacityState2 = 0.1;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPTypingIndicator::AnimateTypng()" />*/
	animateTypng: function () {
		var $self = this;
		if (this.__currentIndex == 2) {
			this.__currentIndex = 0;
		} else {
			this.__currentIndex++;
		}
		this.animate(0.2, function () {
			$self.triggerSizeChanged();
		}, function (completed) {
			$self.animateTypng();
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPTypingIndicator::AnimateTypng()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTypingIndicator::SetIsTyping(System.Boolean)" />*/
	setIsTyping: function (isTyping) {
		if (isTyping) {
			this.animateTypng();
		} else {
			this.stopAnimation(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTypingIndicator::SetIsTyping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTypingIndicator::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		var size = w;
		var circleSize = $.ig.truncate((size * 0.15));
		var circleSpacng = $.ig.truncate(Math.max(size * 0.1, $.ig.ThemeManager.prototype.theme().padding3()));
		var circleY = $.ig.intDivide((h - circleSize), 2);
		var totalCircleW = (circleSize * 3) + (circleSpacng * 2);
		var circleX = $.ig.intDivide((w - totalCircleW), 2);
		var opacity1 = 0;
		var opacity2 = 0;
		var opacity3 = 0;
		var cicle1Offset = 0;
		var cicle2Offset = 0;
		var cicle3Offset = 0;
		var offset = $.ig.intDivide(circleSize, 2);
		if (this.__currentIndex == 0) {
			opacity1 = this.__opacityState1;
			opacity2 = this.__opacityState2;
			opacity3 = this.__opacityState2;
			cicle1Offset = offset;
		} else if (this.__currentIndex == 1) {
			opacity1 = this.__opacityState2;
			opacity2 = this.__opacityState1;
			opacity3 = this.__opacityState2;
			cicle2Offset = offset;
		} else if (this.__currentIndex == 2) {
			opacity1 = this.__opacityState2;
			opacity2 = this.__opacityState2;
			opacity3 = this.__opacityState1;
			cicle3Offset = offset;
		}
		this.measureView1(this.__circle1, circleX, circleY + cicle1Offset, circleSize, circleSize, opacity1);
		circleX += circleSize + circleSpacng;
		this.measureView1(this.__circle2, circleX, circleY + cicle2Offset, circleSize, circleSize, opacity2);
		circleX += circleSize + circleSpacng;
		this.measureView1(this.__circle3, circleX, circleY + cicle3Offset, circleSize, circleSize, opacity3);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTypingIndicator::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTypingIndicator::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		this.setIsTyping(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTypingIndicator::Unload()" />*/
	,
	$type: new $.ig.Type('CPTypingIndicator', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTypingIndicator" />*/

/*<BeginType Name="Infragistics.CPDroppableViewManager" />*/

$.ig.util.defType('CPDroppableViewManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.CPDroppableViewManager::Register(Infragistics.CPDroppableViewDelegate, System.String)" />*/
	register: function (obj, type) {
		var registry = $.ig.CPDroppableViewManager.prototype.getRegistry(type);
		var identifier = $.ig.NativeStringUtility.prototype.generateUID();
		registry.item(identifier, obj);
		if ($.ig.CPDroppableViewManager.prototype.__dropListeners != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPDroppableViewManager.prototype.__dropListeners, type)) {
			var dropListener = $.ig.CPDroppableViewManager.prototype.__dropListeners.item(type);
			if (dropListener._newRegistration != null) {
				dropListener._newRegistration(identifier, obj);
			}
		}
		return identifier;
	}
	/*<EndMethod Name="System.String Infragistics.CPDroppableViewManager::Register(Infragistics.CPDroppableViewDelegate, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDroppableViewManager::Reset()" />*/
	reset: function () {
		$.ig.CPDroppableViewManager.prototype.__droppableObjects = new $.ig.Dictionary(0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDroppableViewManager::Reset()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.CPDroppableViewManager::GetRegistry(System.String)" />*/
	getRegistry: function (type) {
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPDroppableViewManager.prototype.__droppableObjects, type)) {
			$.ig.CPDroppableViewManager.prototype.__droppableObjects.item(type, new $.ig.Dictionary(0));
		}
		return $.ig.CPDroppableViewManager.prototype.__droppableObjects.item(type);
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.CPDroppableViewManager::GetRegistry(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDroppableViewManager::Unregister(System.String, System.String)" />*/
	unregister: function (key, type) {
		var registry = $.ig.CPDroppableViewManager.prototype.getRegistry(type);
		if ($.ig.CPDroppableViewManager.prototype.__dropListeners != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPDroppableViewManager.prototype.__dropListeners, type)) {
			var dropListener = $.ig.CPDroppableViewManager.prototype.__dropListeners.item(type);
			if (dropListener._unregistered != null) {
				dropListener._unregistered(key);
			}
		}
		$.ig.NativeDictionaryUtility.prototype.removeValue(registry, key);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDroppableViewManager::Unregister(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPDroppableViewManager::AreThereAnyDropTargets(System.String, System.Object)" />*/
	areThereAnyDropTargets: function (dropLookupKey, dropObject) {
		var dropObjects = $.ig.CPDroppableViewManager.prototype.getDroppableObjects(dropLookupKey, null, null);
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(dropObjects);
		for (var j = 0; j < keys.length; j++) {
			var key = keys[j];
			var obj = dropObjects.item(key);
			if (obj.acceptsDropObject(dropLookupKey, dropObject)) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPDroppableViewManager::AreThereAnyDropTargets(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPDictionary Infragistics.CPDroppableViewManager::GetDroppableObjects(System.String, Infragistics.StringObjectBlock, Infragistics.StringBlock)" />*/
	getDroppableObjects: function (type, newRegistry, unregistered) {
		if (newRegistry != null) {
			if ($.ig.CPDroppableViewManager.prototype.__dropListeners == null) {
				$.ig.CPDroppableViewManager.prototype.__dropListeners = new $.ig.Dictionary(0);
			}
			var dropListener = new $.ig.CPDroppableViewManagerListener();
			dropListener._newRegistration = newRegistry;
			dropListener._unregistered = unregistered;
			$.ig.CPDroppableViewManager.prototype.__dropListeners.item(type, dropListener);
		}
		return $.ig.CPDroppableViewManager.prototype.getRegistry(type);
	}
	/*<EndMethod Name="Infragistics.CPDictionary Infragistics.CPDroppableViewManager::GetDroppableObjects(System.String, Infragistics.StringObjectBlock, Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDroppableViewManager::FinishedDragOperation()" />*/
	finishedDragOperation: function () {
		$.ig.CPDroppableViewManager.prototype.__dropListeners = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPDroppableViewManager::FinishedDragOperation()" />*/
	,
	$type: new $.ig.Type('CPDroppableViewManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDroppableViewManager" />*/

/*<BeginType Name="Infragistics.CPDroppableViewManagerListener" />*/

$.ig.util.defType('CPDroppableViewManagerListener', 'Object', {
	init: function () {
		this._newRegistration = null;
		this._unregistered = null;
		$.ig.Object.prototype.init.call(this);
	},
	_newRegistration: null,
	_unregistered: null,
	$type: new $.ig.Type('CPDroppableViewManagerListener', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDroppableViewManagerListener" />*/

/*<BeginType Name="Infragistics.CPDropTargetDisplayView" />*/

$.ig.util.defType('CPDropTargetDisplayView', 'CPView', {
	__titleLabel: null,
	__iconView: null,
	init: function (identifier, icon, title) {
		$.ig.CPView.prototype.init.call(this);
		if (icon == null) {
			icon = $.ig.UIPathIcons.prototype.icons().getDropPinHoverIcon();
		}
		this.__iconView = new $.ig.PathIconView();
		this.__iconView._outlineOnly = false;
		this.__iconView.setIcon(icon);
		this.__iconView.iconColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		this.addSubview(this.__iconView);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainSecondaryBackgroundColor().$native());
		this.__titleLabel = new $.ig.CPLabel();
		this.__titleLabel.setText(title);
		this.addSubview(this.__titleLabel);
		if (identifier == null) {
			identifier = $.ig.NativeStringUtility.prototype.generateUID();
		}
		this.identifier(identifier);
	},
	__isOver: false,
	/*<BeginMethod Name="System.Void Infragistics.CPDropTargetDisplayView::SetIsOver(System.Boolean)" />*/
	setIsOver: function (isOver) {
		if (this.__isOver != isOver) {
			this.__isOver = isOver;
			this.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDropTargetDisplayView::SetIsOver(System.Boolean)" />*/
	,
	_dropHandler: null,
	/*<BeginProperty Name="Infragistics.CPExternalDropHandler Infragistics.CPDropTargetDisplayView::DropHandler()" />*/
	dropHandler: function (value) {
		if (arguments.length === 1) {
			this._dropHandler = value;
			return value;
		} else {
			return this._dropHandler;
		}
	}
	/*<EndProperty Name="Infragistics.CPExternalDropHandler Infragistics.CPDropTargetDisplayView::DropHandler()" />*/
	,
	_identifier: null,
	/*<BeginProperty Name="System.String Infragistics.CPDropTargetDisplayView::Identifier()" />*/
	identifier: function (value) {
		if (arguments.length === 1) {
			this._identifier = value;
			return value;
		} else {
			return this._identifier;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPDropTargetDisplayView::Identifier()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDropTargetDisplayView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var opacity = $.ig.ThemeManager.prototype.theme().restOpacity();
		if (this.__isOver) {
			opacity = 1;
		}
		var sidePadding = $.ig.ThemeManager.prototype.theme().padding15();
		if (h < $.ig.ThemeManager.prototype.theme().largerHitSize()) {
			var iconSize = $.ig.ThemeManager.prototype.theme().largeIconSize();
			if (this.__isOver) {
				this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().boldFont());
			} else {
				this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
			}
			this.__titleLabel.calculateSizeToFit();
			var tlw = this.__titleLabel.getCalculatedWidth();
			var tlh = this.__titleLabel.getCalculatedHeight();
			var x = sidePadding;
			var iconPadding = $.ig.ThemeManager.prototype.theme().padding10();
			if (tlw + iconSize < w - sidePadding * 2 - iconPadding) {
				x = $.ig.intDivide(w, 2) - $.ig.intDivide((tlw + iconSize), 2);
			} else {
				tlw = w - (iconSize + sidePadding * 2 + iconPadding);
			}
			this.measureView1(this.__iconView, x, $.ig.intDivide(h, 2) - $.ig.intDivide(iconSize, 2), iconSize, iconSize, opacity);
			x += iconSize + iconPadding;
			this.measureView1(this.__titleLabel, x, $.ig.intDivide(h, 2) - $.ig.intDivide(tlh, 2), tlw, tlh, opacity);
		} else {
			var iconSize1 = $.ig.truncate((h * 0.4));
			var iconX = $.ig.intDivide(w, 2) - $.ig.intDivide(iconSize1, 2);
			var availWidth = w - sidePadding * 2;
			var iconPadding1 = $.ig.ThemeManager.prototype.theme().padding15();
			if (this.__isOver) {
				this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().boldFont());
			} else {
				this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().regularFont());
			}
			this.__titleLabel.calculateSizeToFit1(availWidth);
			var tlw1 = this.__titleLabel.getCalculatedWidth();
			var tlh1 = this.__titleLabel.getCalculatedHeight();
			var y = $.ig.intDivide(h, 2) - $.ig.intDivide((iconSize1 + iconPadding1 + tlh1), 2);
			this.measureView1(this.__iconView, iconX, y, iconSize1, iconSize1, opacity);
			y += iconPadding1 + iconSize1;
			this.measureView1(this.__titleLabel, $.ig.intDivide(w, 2) - $.ig.intDivide(tlw1, 2), y, tlw1, tlh1, opacity);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDropTargetDisplayView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPDropTargetDisplayView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDropTargetDisplayView" />*/

/*<BeginType Name="Infragistics.CPExternalDropHandler" />*/

$.ig.util.defType('CPExternalDropHandler', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleDroppedObject(System.String, Infragistics.CPDropInfo)" />*/
	handleDroppedObject: function (dropId, info) {
		if (info.webURL() != null) {
			this.handleWebLink(dropId, info);
		} else {
			this.handleDroppedFiles(dropId, info);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleDroppedObject(System.String, Infragistics.CPDropInfo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleWebLink(System.String, Infragistics.CPDropInfo)" />*/
	handleWebLink: function (dropId, info) {
		this.pinLink(dropId, info.webURL(), info.title());
		if (info.title() == null) {
			this.scrapeUrl(info.webURL());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleWebLink(System.String, Infragistics.CPDropInfo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPExternalDropHandler::ScrapeUrl(System.String)" />*/
	scrapeUrl: function (url) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPExternalDropHandler::ScrapeUrl(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPExternalDropHandler::PinLink(System.String, System.String, System.String)" />*/
	pinLink: function (dropId, url, title) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPExternalDropHandler::PinLink(System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleDroppedFiles(System.String, Infragistics.CPDropInfo)" />*/
	handleDroppedFiles: function (dropId, info) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPExternalDropHandler::HandleDroppedFiles(System.String, Infragistics.CPDropInfo)" />*/
	,
	$type: new $.ig.Type('CPExternalDropHandler', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPExternalDropHandler" />*/

/*<BeginType Name="Infragistics.FlowLayoutDataSource" />*/

$.ig.util.defType('FlowLayoutDataSource', 'Object', {
	$type: new $.ig.Type('FlowLayoutDataSource', null)
}, true);

/*<EndType Name="Infragistics.FlowLayoutDataSource" />*/

/*<BeginType Name="Infragistics.FlowLayoutViewDataSource" />*/

$.ig.util.defType('FlowLayoutViewDataSource', 'Object', {
	$type: new $.ig.Type('FlowLayoutViewDataSource', null, [$.ig.FlowLayoutDataSource.prototype.$type])
}, true);

/*<EndType Name="Infragistics.FlowLayoutViewDataSource" />*/

/*<BeginType Name="Infragistics.FlowLayoutViewEditDelegate" />*/

$.ig.util.defType('FlowLayoutViewEditDelegate', 'Object', {
	$type: new $.ig.Type('FlowLayoutViewEditDelegate', null)
}, true);

/*<EndType Name="Infragistics.FlowLayoutViewEditDelegate" />*/

/*<BeginType Name="Infragistics.FlowLayoutItemViewDelegate" />*/

$.ig.util.defType('FlowLayoutItemViewDelegate', 'Object', {
	$type: new $.ig.Type('FlowLayoutItemViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.FlowLayoutItemViewDelegate" />*/

/*<BeginType Name="Infragistics.FlowLayoutItemView" />*/

$.ig.util.defType('FlowLayoutItemView', 'CPInteractionView', {
	_info: null,
	_flowLayout: null,
	_reuseIdentifier: null,
	__isEditMode: false,
	__isMaximized: false,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutItemView::IsEditMode()" />*/
	isEditMode: function (value) {
		if (arguments.length === 1) {
			if (this.__isEditMode != value) {
				this.__isEditMode = value;
				this.editModeChanged();
			}
			return value;
		} else {
			return this.__isEditMode;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutItemView::IsEditMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutItemView::IsMaximized()" />*/
	isMaximized: function (value) {
		if (arguments.length === 1) {
			if (this.__isMaximized != value) {
				this.__isMaximized = value;
				this.maximizedChanged();
			}
			return value;
		} else {
			return this.__isMaximized;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutItemView::IsMaximized()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutItemView::EditModeChanged()" />*/
	editModeChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutItemView::EditModeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutItemView::MaximizedChanged()" />*/
	maximizedChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutItemView::MaximizedChanged()" />*/
	,
	init: function (identifier) {
		$.ig.CPInteractionView.prototype.init.call(this);
		this._reuseIdentifier = identifier;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutItemView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutItemView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutItemView::TriggerOverflow()" />*/
	triggerOverflow: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutItemView::TriggerOverflow()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutItemView::SupportsOverflow()" />*/
	supportsOverflow: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutItemView::SupportsOverflow()" />*/
	,
	$type: new $.ig.Type('FlowLayoutItemView', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowLayoutItemView" />*/

/*<BeginType Name="Infragistics.FlowLayoutManager" />*/

$.ig.util.defType('FlowLayoutManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.FlowLayoutDefinition Infragistics.FlowLayoutManager::BuildFlowLayoutDefinition(Infragistics.FlowLayoutDataSource, System.Boolean, Infragistics.FlowLayoutDirection)" />*/
	buildFlowLayoutDefinition: function (datasource, maximized, direction) {
		var def = new $.ig.FlowLayoutDefinition(datasource, direction);
		def._isMaximized = maximized;
		$.ig.FlowLayoutManager.prototype.update(def, direction, false);
		return def;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutDefinition Infragistics.FlowLayoutManager::BuildFlowLayoutDefinition(Infragistics.FlowLayoutDataSource, System.Boolean, Infragistics.FlowLayoutDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutManager::Update(Infragistics.FlowLayoutDefinition, Infragistics.FlowLayoutDirection, System.Boolean)" />*/
	update: function (def, direction, setDirty) {
		var isDirty = def._direction != direction || setDirty;
		var prevItemCount = def._numberOfItems;
		def._numberOfItems = def._dataSource.numberOfItemsInFlowLayout();
		var newList = false;
		if (prevItemCount != def._numberOfItems) {
			def._itemWidths = new Array(def._numberOfItems);
			def._itemHeights = new Array(def._numberOfItems);
			def._items = new $.ig.Array();
			newList = true;
		} else if (def._itemWidths == null) {
			def._itemWidths = new Array(def._numberOfItems);
			def._itemHeights = new Array(def._numberOfItems);
			def._items = new $.ig.Array();
			newList = true;
		}
		if (def._isMaximized) {
			if (!isDirty) {
				isDirty = def._numberOfVerticalBlocks != 1 || def._numberOfHorizontalBlocks != 1;
			}
			def._numberOfVerticalBlocks = def._numberOfHorizontalBlocks = 1;
			def._totalPossibleHeight = 1;
			def._totalPossibleWidth = def._numberOfItems;
			for (var i = 0; i < def._numberOfItems; i++) {
				def._itemWidths[i] = 1;
				def._itemHeights[i] = 1;
				var info = newList ? new $.ig.FlowlayoutItemInfo() : def._items[i];
				info._index = i;
				if (newList) {
					def._items.add(info);
				}
			}
		} else {
			var prevHBlocks = def._numberOfHorizontalBlocks;
			var prevVBlocks = def._numberOfVerticalBlocks;
			def._numberOfHorizontalBlocks = def._dataSource.numberOfHorizontalBlocksInFlowLayoutViewport();
			def._numberOfVerticalBlocks = def._dataSource.numberOfVerticalBlocksInFlowLayoutViewport();
			if (!isDirty) {
				isDirty = def._numberOfVerticalBlocks != prevVBlocks || def._numberOfHorizontalBlocks != prevHBlocks;
			}
			def._totalPossibleWidth = def._totalPossibleHeight = 0;
			for (var i1 = 0; i1 < def._numberOfItems; i1++) {
				var prevItemWidth = def._itemWidths[i1];
				var prevItemHeight = def._itemHeights[i1];
				def._itemWidths[i1] = $.ig.FlowLayoutManager.prototype.normalize(def._dataSource.horizontalBlocksForItemInFlowLayout(i1), def._numberOfHorizontalBlocks);
				def._itemHeights[i1] = $.ig.FlowLayoutManager.prototype.normalize(def._dataSource.verticalBlocksForItemInFlowLayout(i1), def._numberOfVerticalBlocks);
				if (!isDirty) {
					isDirty = prevItemWidth != def._itemWidths[i1] || prevItemHeight != def._itemHeights[i1];
				}
				def._totalPossibleHeight += def._itemHeights[i1];
				def._totalPossibleWidth += def._itemWidths[i1];
				var info1 = newList ? new $.ig.FlowlayoutItemInfo() : def._items[i1];
				info1._index = i1;
				if (newList) {
					def._items.add(info1);
				}
			}
		}
		if (isDirty) {
			if (def._direction == $.ig.FlowLayoutDirection.prototype.landscape || def._isMaximized) {
				$.ig.FlowLayoutManager.prototype.calculateLandscapeLayout(def);
			} else {
				$.ig.FlowLayoutManager.prototype.calculatePortraitLayout(def);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutManager::Update(Infragistics.FlowLayoutDefinition, Infragistics.FlowLayoutDirection, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutManager::CalculateLandscapeLayout(Infragistics.FlowLayoutDefinition)" />*/
	calculateLandscapeLayout: function (def) {
		var currentCol = 0;
		var currentRow = 0;
		var totalWidth = 0;
		var minRow = 0;
		var minCol = 0;
		var usedSpace = $.ig.ArrayUtility.prototype.createZeroedIntArray((def._numberOfVerticalBlocks * def._totalPossibleWidth));
		var itemSizeCount = def._itemHeights.length;
		if (itemSizeCount > 0) {
			var itemIndex = 0;
			for (var i = 0; i < itemSizeCount; i++) {
				var w = def._itemWidths[i];
				var h = def._itemHeights[i];
				for (var col = minCol; col < def._totalPossibleWidth; col++) {
					var found = false;
					for (var row = minRow; row < def._numberOfVerticalBlocks; row++) {
						var index = (col * def._numberOfVerticalBlocks) + row;
						if (row + h > def._numberOfVerticalBlocks) {
							break;
						}
						var isAvail = (usedSpace[index] == 0);
						if (isAvail) {
							var tempIndex = index;
							for (var r = row; r < row + h; r++) {
								isAvail = (usedSpace[tempIndex] == 0);
								if (!isAvail) {
									row = r;
									break;
								}
								tempIndex++;
							}
							if (isAvail) {
								minRow = row;
								currentCol = col;
								currentRow = row;
								found = true;
								break;
							}
						}
					}
					if (found) {
						break;
					}
					minRow = 0;
					minCol++;
				}
				var info = def._items[itemIndex];
				info._column = currentCol;
				info._row = currentRow;
				info._width = w;
				info._height = h;
				for (var col1 = currentCol; col1 < currentCol + w; col1++) {
					for (var row1 = currentRow; row1 < currentRow + h; row1++) {
						var index1 = (col1 * def._numberOfVerticalBlocks) + row1;
						usedSpace[index1] = itemIndex + 1;
					}
				}
				var widthExtent = (info._column + info._width);
				totalWidth = Math.max(widthExtent, totalWidth);
				itemIndex++;
			}
			def._contentWidth = totalWidth;
			def._contentHeight = 1;
		}
		def._usedSpace = usedSpace;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutManager::CalculateLandscapeLayout(Infragistics.FlowLayoutDefinition)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutManager::CalculatePortraitLayout(Infragistics.FlowLayoutDefinition)" />*/
	calculatePortraitLayout: function (def) {
		var currentCol = 0;
		var currentRow = 0;
		var totalHeight = 0;
		var minRow = 0;
		var minCol = 0;
		var usedSpace = $.ig.ArrayUtility.prototype.createZeroedIntArray((def._numberOfHorizontalBlocks * def._totalPossibleHeight));
		var itemSizeCount = def._itemWidths.length;
		if (itemSizeCount > 0) {
			var itemIndex = 0;
			for (var i = 0; i < itemSizeCount; i++) {
				var w = def._itemWidths[i];
				var h = def._itemHeights[i];
				for (var row = minRow; row < def._totalPossibleHeight; row++) {
					var found = false;
					for (var col = minCol; col < def._numberOfHorizontalBlocks; col++) {
						var index = (row * def._numberOfHorizontalBlocks) + col;
						if (col + w > def._numberOfHorizontalBlocks) {
							break;
						}
						var isAvail = (usedSpace[index] == 0);
						if (isAvail) {
							var tempIndex = index;
							for (var c = col; c < col + w; c++) {
								isAvail = (usedSpace[tempIndex] == 0);
								if (!isAvail) {
									col = c;
									break;
								}
								tempIndex++;
							}
							if (isAvail) {
								minCol = col;
								currentCol = col;
								currentRow = row;
								found = true;
								break;
							}
						}
					}
					if (found) {
						break;
					}
					minCol = 0;
					minRow++;
				}
				var info = def._items[itemIndex];
				info._column = currentCol;
				info._row = currentRow;
				info._width = w;
				info._height = h;
				for (var row1 = currentRow; row1 < currentRow + h; row1++) {
					for (var col1 = currentCol; col1 < currentCol + w; col1++) {
						var index1 = (row1 * def._numberOfHorizontalBlocks) + col1;
						usedSpace[index1] = itemIndex + 1;
					}
				}
				var heightExtent = (info._row + info._height);
				totalHeight = Math.max(heightExtent, totalHeight);
				itemIndex++;
			}
			def._contentHeight = totalHeight;
			def._contentWidth = 1;
		}
		def._usedSpace = usedSpace;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutManager::CalculatePortraitLayout(Infragistics.FlowLayoutDefinition)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutManager::Normalize(System.Int32, System.Int32)" />*/
	normalize: function (blocks, max) {
		if (blocks == 0) {
			blocks = 1;
		} else if (blocks > max) {
			blocks = max;
		}
		return blocks;
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutManager::Normalize(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('FlowLayoutManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowLayoutManager" />*/

/*<BeginType Name="Infragistics.FlowLayoutDefinition" />*/

$.ig.util.defType('FlowLayoutDefinition', 'Object', {
	init: function (ds, dir) {
		$.ig.Object.prototype.init.call(this);
		this._dataSource = ds;
		this._direction = dir;
	},
	_isMaximized: false,
	_numberOfItems: 0,
	_itemWidths: null,
	_itemHeights: null,
	_totalPossibleWidth: 0,
	_totalPossibleHeight: 0,
	_numberOfVerticalBlocks: 0,
	_numberOfHorizontalBlocks: 0,
	_contentWidth: 0,
	_contentHeight: 0,
	_usedSpace: null,
	_items: null,
	_dataSource: null,
	_direction: 0,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutDefinition::Update(System.Boolean)" />*/
	update: function (setDirty) {
		$.ig.FlowLayoutManager.prototype.update(this, this._direction, setDirty);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutDefinition::Update(System.Boolean)" />*/
	,
	_uIContainerWidth: 0,
	_uIContainerHeight: 0,
	/*<BeginMethod Name="System.Double Infragistics.FlowLayoutDefinition::ResolveUISingleBlockWidth()" />*/
	resolveUISingleBlockWidth: function () {
		return (this._uIContainerWidth / this._numberOfHorizontalBlocks);
	}
	/*<EndMethod Name="System.Double Infragistics.FlowLayoutDefinition::ResolveUISingleBlockWidth()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.FlowLayoutDefinition::ResolveUISingleBlockHeight()" />*/
	resolveUISingleBlockHeight: function () {
		return (this._uIContainerHeight / this._numberOfVerticalBlocks);
	}
	/*<EndMethod Name="System.Double Infragistics.FlowLayoutDefinition::ResolveUISingleBlockHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutDefinition::ResolveItemAtBlock(System.Int32, System.Int32)" />*/
	resolveItemAtBlock: function (col, row) {
		var coordinate = 0;
		if (this._direction == $.ig.FlowLayoutDirection.prototype.portrait) {
			coordinate = (row * this._numberOfHorizontalBlocks) + col;
		} else {
			coordinate = (col * this._numberOfVerticalBlocks) + row;
		}
		if (coordinate >= 0 && coordinate < this._usedSpace.length) {
			return this._usedSpace[coordinate] - 1;
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutDefinition::ResolveItemAtBlock(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('FlowLayoutDefinition', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowLayoutDefinition" />*/

/*<BeginType Name="Infragistics.FlowlayoutItemInfo" />*/

$.ig.util.defType('FlowlayoutItemInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_column: 0,
	_row: 0,
	_width: 0,
	_height: 0,
	_index: 0,
	$type: new $.ig.Type('FlowlayoutItemInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FlowlayoutItemInfo" />*/

/*<BeginType Name="Infragistics.FlowLayoutViewCaptureViewDelegate" />*/

$.ig.util.defType('FlowLayoutViewCaptureViewDelegate', 'Object', {
	$type: new $.ig.Type('FlowLayoutViewCaptureViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.FlowLayoutViewCaptureViewDelegate" />*/

/*<BeginType Name="Infragistics.FlowLayoutView" />*/

$.ig.util.defType('FlowLayoutView', 'CPScrollView', {
	__definition: null,
	__visibleCells: null,
	__availableCells: null,
	__childrenPanel: null,
	__ds: null,
	__editingCell: 0,
	__isResizing: false,
	__isDraggingEditCell: false,
	__scrollTimer: null,
	__activeResizeHandleLocation: 0,
	__resizeOutlineTop: null,
	__resizeOutlineLeft: null,
	__resizeOutlineRight: null,
	__resizeOutlineBottom: null,
	__resizeHandleRight: null,
	__resizeHandleBottom: null,
	__resizeHandleBottomRight: null,
	__canResizerDrag: false,
	__canResizerResize: false,
	__isHandleVisible: false,
	__resizable: false,
	__currentResizerIndex: 0,
	__resizeHandleSize: 0,
	_maximzedStateChanged: null,
	_maximizedIndexChanged: null,
	init: function () {
		this.__hasVertScroll = false;
		this.__currentFocusInfoIndex = -1;
		$.ig.CPScrollView.prototype.init.call(this);
		this.isFocusable(true);
	},
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Setup()" />*/
	setup: function () {
		$.ig.CPScrollView.prototype.setup.call(this);
		this.__resizable = true;
		this.__editingCell = -1;
		this.__isResizing = false;
		this.__activeResizeHandleLocation = $.ig.FlowLayoutResizeHandleLocation.prototype.none;
		this.pinchGestureEnabled(false);
		this.__childrenPanel = new $.ig.FlowLayoutViewCaptureView(this);
		this.__childrenPanel._resizeDelegate = this;
		this.scrollDelegate(this.__childrenPanel);
		this.addSubview(this.__childrenPanel);
		this.setupResizeViews();
		this.__resizeHandleSize = $.ig.NativeUIUtility.prototype.utility().densify(15);
		this.setScrollbarsAlwaysVisible(false, true);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Enable()" />*/
	enable: function () {
		$.ig.CPScrollView.prototype.enable.call(this);
		this.__childrenPanel.enable();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Enable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Disable()" />*/
	disable: function () {
		$.ig.CPScrollView.prototype.disable.call(this);
		this.__childrenPanel.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetupResizeViews()" />*/
	setupResizeViews: function () {
		this.__resizeOutlineLeft = this.createResizeOutline();
		this.__resizeOutlineTop = this.createResizeOutline();
		this.__resizeOutlineRight = this.createResizeOutline();
		this.__resizeOutlineBottom = this.createResizeOutline();
		this.__resizeHandleBottom = this.createResizeHandle();
		this.__resizeHandleRight = this.createResizeHandle();
		this.__resizeHandleBottomRight = this.createResizeHandle();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetupResizeViews()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.FlowLayoutView::CreateResizeOutline()" />*/
	createResizeOutline: function () {
		var outline = new $.ig.CPViewBase();
		outline.setBackgroundColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		this.__childrenPanel.addSubview(outline);
		return outline;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.FlowLayoutView::CreateResizeOutline()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCircleView Infragistics.FlowLayoutView::CreateResizeHandle()" />*/
	createResizeHandle: function () {
		var outline = new $.ig.CPCircleView();
		outline.setBackgroundColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
		outline.clipToBounds(true);
		this.__childrenPanel.addSubview(outline);
		return outline;
	}
	/*<EndMethod Name="Infragistics.CPCircleView Infragistics.FlowLayoutView::CreateResizeHandle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ShowResizeHandle(System.Int32)" />*/
	showResizeHandle: function (index) {
		this.__childrenPanel.showResizeHandle(index);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ShowResizeHandle(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::HideResizeHandle()" />*/
	hideResizeHandle: function () {
		this.__childrenPanel.hideResizeHandle();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::HideResizeHandle()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutView::GetSelectedIndex()" />*/
	getSelectedIndex: function () {
		return this.__childrenPanel.getSelectedIndex();
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutView::GetSelectedIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetDirection(Infragistics.FlowLayoutDirection)" />*/
	setDirection: function (direction) {
		if (this.__definition != null && this.__definition._direction != direction) {
			if (direction == $.ig.FlowLayoutDirection.prototype.landscape) {
				this.alwaysBounceVertical(false);
				this.alwaysBounceHorizontal(true);
			} else {
				this.alwaysBounceVertical(true);
				this.alwaysBounceHorizontal(false);
			}
			this.__definition._direction = direction;
			this.__definition.update(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetDirection(Infragistics.FlowLayoutDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetDataSource(Infragistics.FlowLayoutViewDataSource)" />*/
	setDataSource: function (ds) {
		this.__ds = ds;
		if (ds != null) {
			this.__definition = $.ig.FlowLayoutManager.prototype.buildFlowLayoutDefinition(ds, false, $.ig.FlowLayoutDirection.prototype.portrait);
		} else {
			this.__definition = null;
		}
		this.__childrenPanel.setDefinition(this.__definition);
		this.refresh(true);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetDataSource(Infragistics.FlowLayoutViewDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetEditDelegate(Infragistics.FlowLayoutViewEditDelegate)" />*/
	setEditDelegate: function (editDelegate) {
		this.__childrenPanel._editDelegate = editDelegate;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetEditDelegate(Infragistics.FlowLayoutViewEditDelegate)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetItemDelegate(Infragistics.FlowLayoutItemViewDelegate)" />*/
	setItemDelegate: function (itemDelegate) {
		this.__childrenPanel._itemDelegate = itemDelegate;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetItemDelegate(Infragistics.FlowLayoutItemViewDelegate)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutView::IsEditable()" />*/
	isEditable: function (value) {
		if (arguments.length === 1) {
			this.__childrenPanel.isEditable(value);
			this.arrangeItems();
			return value;
		} else {
			return this.__childrenPanel.isEditable();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutView::IsEditable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutView::IsMaximized()" />*/
	isMaximized: function () {
		return this.__definition != null ? this.__definition._isMaximized : false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutView::IsMaximized()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MaximizeItem(System.Int32, System.Boolean)" />*/
	maximizeItem: function (index, animate) {
		var $self = this;
		if (this.__definition != null && !this.__definition._isMaximized) {
			this.__childrenPanel._isMaximized = true;
			this.__definition._isMaximized = true;
			this.pagingEnabled(true);
			this.alwaysBounceVertical(false);
			this.__definition.update(true);
			if (this.__currentFocusItem != null) {
				this.__currentFocusItem.elementLostFocus();
			}
			var w = this.currentWidth();
			var h = this.currentHeight();
			if (animate) {
				var offsetX = this.getContentOffsetX();
				var offsetY = this.getContentOffsetY();
				this.__childrenPanel.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					var view = $self.getVisibleCell(index);
					if (view == null) {
						return;
					}
					var left = view.currentX();
					var top = view.currentY();
					var count = $self.__visibleCells.length;
					for (var i = 0; i < count; i++) {
						var cell = $self.__visibleCells[i];
						if (cell._info._index == index) {
							$self.__childrenPanel.measureView1(cell, $self.getContentOffsetX(), $self.getContentOffsetY(), w, h, 1);
						} else {
							var x = cell.currentX() <= left ? -w : w;
							var y = cell.currentY() <= top ? -h : h;
							x += offsetX;
							y += offsetY;
							$self.__childrenPanel.measureView1(cell, x, y, cell.currentWidth(), cell.currentHeight(), 1);
						}
					}
				}, function (finished) {
					$self.maximizeCompleted(index, w);
				});
			} else {
				this.maximizeCompleted(index, w);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MaximizeItem(System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MaximizeCompleted(System.Int32, System.Int32)" />*/
	maximizeCompleted: function (index, w) {
		this.refresh(false);
		this.scrollTo(w * index, 0);
		this.arrangeItems();
		if (this._maximzedStateChanged != null) {
			this._maximzedStateChanged();
		}
		if (this._maximizedIndexChanged != null) {
			this._maximizedIndexChanged(index);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MaximizeCompleted(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutView::GetCurrentMaximizedIndex()" />*/
	getCurrentMaximizedIndex: function () {
		return ($.ig.intDivide(this.getContentOffsetX(), this.currentWidth()));
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutView::GetCurrentMaximizedIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Minimize(System.Boolean)" />*/
	minimize: function (animate) {
		var $self = this;
		if (this.__definition != null && this.__definition._isMaximized) {
			var viewportWidth = this.currentWidth();
			var contentOffsetX = this.getContentOffsetX();
			var currentMaximizedIndex = this.getCurrentMaximizedIndex();
			var startX = contentOffsetX;
			while (startX > 0) {
				startX -= viewportWidth;
			}
			this.__childrenPanel._isMaximized = false;
			this.__definition._isMaximized = false;
			if (this._maximzedStateChanged != null) {
				this._maximzedStateChanged();
			}
			this.__definition.update(true);
			var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
			var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
			var info = this.__definition._items[currentMaximizedIndex];
			var ih = $.ig.truncate((singleBlockHeight * info._height));
			var iy = $.ig.truncate((singleBlockHeight * info._row));
			var viewportHeight = this.currentHeight();
			this.refresh(false);
			var contentHeight = this.getContentHeight();
			var limitY = contentHeight - viewportHeight;
			var scrollY = 0;
			if (iy + ih > viewportHeight) {
				scrollY = iy;
			}
			scrollY = Math.min(scrollY, limitY);
			this.scrollTo(0, scrollY);
			this.arrangeItems();
			this.pagingEnabled(false);
			this.alwaysBounceVertical(true);
			var count = this.__visibleCells.length;
			for (var i = 0; i < count; i++) {
				var cell = this.__visibleCells[i];
				if (cell._info._index == currentMaximizedIndex) {
					this.__childrenPanel.measureView1(cell, startX, scrollY, this.currentWidth(), this.currentHeight(), 1);
				} else {
					var diff = cell._info._index - currentMaximizedIndex;
					var x = (diff * this.currentWidth());
					this.__childrenPanel.measureView1(cell, x, scrollY, cell.currentWidth(), cell.currentHeight(), 1);
				}
			}
			if (this.__currentFocusItem != null && this.isEditable()) {
				this.__currentFocusItem.elementGotFocus();
			}
			if (animate) {
				this.__childrenPanel.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.arrangeItems();
				}, function (finished) {
				});
			} else {
				this.arrangeItems();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Minimize(System.Boolean)" />*/
	,
	__hasVertScroll: false,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Refresh(System.Boolean)" />*/
	refresh: function (arrange) {
		if (this.currentWidth() > 0 && this.currentHeight() > 0) {
			if (this.__definition != null) {
				var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
				var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
				var vw = this.__definition._contentWidth;
				var vh = this.__definition._contentHeight;
				this.setContentSize(Math.max($.ig.truncate((vw * singleBlockWidth)), this.currentWidth()), Math.max($.ig.truncate((vh * singleBlockHeight)), this.currentHeight()));
				var requiresVertScroll = this.getContentHeight() > this.currentHeight() && !this.isMaximized() && this.canItemsResize();
				if (!this.__hasVertScroll && requiresVertScroll) {
					this.__definition._uIContainerWidth = this.currentWidth() - $.ig.ThemeManager.prototype.theme().scrollbarPadding() - this.viewRightInset();
					arrange = true;
				} else if (this.__hasVertScroll && !requiresVertScroll) {
					this.__definition._uIContainerWidth = this.currentWidth();
					arrange = true;
				}
				this.__hasVertScroll = requiresVertScroll;
			} else {
				this.setContentSize(this.currentWidth(), this.currentHeight());
			}
			if (arrange) {
				this.arrangeItems();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Refresh(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutView::CanItemsResize()" />*/
	canItemsResize: function () {
		if (this.__childrenPanel._editDelegate != null) {
			return this.__childrenPanel._editDelegate.isFlowLayoutItemResizable(this, 0);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutView::CanItemsResize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::UpdateCurrentResizeHandleState()" />*/
	updateCurrentResizeHandleState: function () {
		var currentIndex = this.__childrenPanel.getSelectedIndex();
		if (currentIndex >= 0) {
			this.__canResizerDrag = this.__childrenPanel._editDelegate.isFlowLayoutItemMovable(this, currentIndex);
			this.__canResizerResize = this.__childrenPanel._editDelegate.isFlowLayoutItemResizable(this, currentIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::UpdateCurrentResizeHandleState()" />*/
	,
	/*<BeginMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetVisibleCell(System.Int32)" />*/
	getVisibleCell: function (index) {
		if (this.__visibleCells != null) {
			var count = this.__visibleCells.length;
			for (var i = 0; i < count; i++) {
				var c = this.__visibleCells[i];
				if (c._info._index == index || this.isMaximized()) {
					return c;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetVisibleCell(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Reset(System.Boolean)" />*/
	reset: function (keepCurrentItem) {
		if (this.__visibleCells != null) {
			var count = this.__visibleCells.length;
			for (var i = 0; i < count; i++) {
				var cell = this.__visibleCells[i];
				this.unhookCell(cell);
			}
			this.__visibleCells.clear();
			this.__definition.update(true);
			if (!keepCurrentItem) {
				this.__currentResizerIndex = 0;
				this.__childrenPanel.reset();
				this.__currentFocusItem = null;
				this.__currentFocusInfoIndex = -1;
			}
			this.arrangeItems();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Reset(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ArrangeItems()" />*/
	arrangeItems: function () {
		if (this.__definition == null) {
			return;
		}
		if (this.__visibleCells == null) {
			this.__visibleCells = new $.ig.Array();
		}
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		if (singleBlockWidth == 0 || singleBlockHeight == 0) {
			return;
		}
		var vw = this.currentWidth();
		var vh = this.currentHeight();
		var vx = this.getContentOffsetX();
		var vy = this.getContentOffsetY();
		var defCount = this.__definition._items.length;
		var stillVisibleLookup = new $.ig.Dictionary(0);
		var count = this.__visibleCells.length;
		for (var i = 0; i < count; i++) {
			var cell = this.__visibleCells[i];
			if (cell._info._index >= defCount) {
				this.unhookCell(cell);
			} else {
				cell._info = this.__definition._items[cell._info._index];
				var iw = $.ig.truncate((singleBlockWidth * cell._info._width));
				var ih = $.ig.truncate((singleBlockHeight * cell._info._height));
				var ix = $.ig.truncate((singleBlockWidth * cell._info._column));
				var iy = $.ig.truncate((singleBlockHeight * cell._info._row));
				if (!$.ig.CPMathUtility.prototype.rectsIntersect1(vx, vy, vw, vh, ix, iy, iw, ih) && cell._info._index != this.__editingCell) {
					this.unhookCell(cell);
				} else {
					stillVisibleLookup.item(cell._info._index.toString(), cell);
				}
			}
		}
		this.__visibleCells.clear();
		if (this.__isHandleVisible && !this.__isDraggingEditCell) {
			this.updateResizer();
		}
		for (var i1 = 0; i1 < defCount; i1++) {
			var info = this.__definition._items[i1];
			var iw1 = $.ig.truncate((singleBlockWidth * info._width));
			var ih1 = $.ig.truncate((singleBlockHeight * info._height));
			var ix1 = $.ig.truncate((singleBlockWidth * info._column));
			var iy1 = $.ig.truncate((singleBlockHeight * info._row));
			var key = info._index.toString();
			var cellExists = $.ig.NativeDictionaryUtility.prototype.containsKey(stillVisibleLookup, key);
			if ($.ig.CPMathUtility.prototype.rectsIntersect1(vx, vy, vw, vh, ix1, iy1, iw1, ih1) || info._index == this.__editingCell) {
				var cell1 = null;
				if (!cellExists) {
					cell1 = this.__ds.getCell(this, info._index);
					cell1._info = info;
					if (this.__currentFocusInfoIndex == info._index) {
						this.setCurrentFocusItem(cell1);
					}
					cell1._flowLayout = this;
					cell1.isHidden(false);
					if (cell1.getParent() == null) {
						this.__childrenPanel.addSubview(cell1);
					}
				} else {
					cell1 = stillVisibleLookup.item(key);
				}
				cell1.isEditMode(this.isEditable());
				cell1.isMaximized(this.isMaximized());
				var opacity = (this.__isDraggingEditCell && this.__editingCell == cell1._info._index) ? 0.5 : 1;
				this.__childrenPanel.measureView1(cell1, ix1, iy1, iw1, ih1, opacity);
				this.__visibleCells.add(cell1);
			} else if (cellExists) {
				this.unhookCell(stillVisibleLookup.item(key));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ArrangeItems()" />*/
	,
	/*<BeginMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetFlowLayoutItem(System.String)" />*/
	getFlowLayoutItem: function (identifier) {
		if (identifier != null) {
			for (var i = 0; i < this.__visibleCells.length; i++) {
				var visItem = this.__visibleCells[i];
				if (visItem._reuseIdentifier == identifier) {
					return visItem;
				}
			}
			if (this.__availableCells == null) {
				this.__availableCells = new $.ig.Dictionary(0);
			}
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__availableCells, identifier)) {
				var list = this.__availableCells.item(identifier);
				var count = list.length;
				if (count > 0) {
					return list[0];
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetFlowLayoutItem(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::DequeueReusableCell(System.String)" />*/
	dequeueReusableCell: function (identifier) {
		if (this.__availableCells == null) {
			this.__availableCells = new $.ig.Dictionary(0);
		}
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__availableCells, identifier)) {
			var list = this.__availableCells.item(identifier);
			var count = list.length;
			if (count > 0) {
				var cell = list[0];
				list.removeAt(0);
				cell.elementLostFocus();
				cell._flowLayout = this;
				return cell;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::DequeueReusableCell(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::EnqueueReusableCell(Infragistics.FlowLayoutItemView, System.String)" />*/
	enqueueReusableCell: function (cell, identifier) {
		var availList = null;
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this.__availableCells, identifier)) {
			availList = new $.ig.Array();
			this.__availableCells.item(identifier, availList);
		} else {
			availList = this.__availableCells.item(identifier);
		}
		availList.add(cell);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::EnqueueReusableCell(Infragistics.FlowLayoutItemView, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::UnhookCell(Infragistics.FlowLayoutItemView)" />*/
	unhookCell: function (cell) {
		cell._info = null;
		this.enqueueReusableCell(cell, cell._reuseIdentifier);
		cell._flowLayout = null;
		cell.isHidden(true);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::UnhookCell(Infragistics.FlowLayoutItemView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::Unload()" />*/
	unload: function () {
		$.ig.CPScrollView.prototype.unload.call(this);
		if (this.__visibleCells != null) {
			var count = this.__visibleCells.length;
			for (var i = 0; i < count; i++) {
				var flowItem = this.__visibleCells[i];
				flowItem.unload();
			}
			this.__visibleCells.clear();
		}
		if (this.__availableCells != null) {
			var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__availableCells);
			var count1 = keys.length;
			for (var i1 = 0; i1 < count1; i1++) {
				var key = keys[i1];
				var list = this.__availableCells.item(key);
				var cCount = list.length;
				for (var j = 0; j < cCount; j++) {
					var flowItem1 = list[j];
					flowItem1.unload();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::Unload()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.FlowLayoutView::ViewRightInset()" />*/
	viewRightInset: function () {
		return this.isEditable() ? $.ig.ThemeManager.prototype.theme().padding20() : 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.FlowLayoutView::ViewRightInset()" />*/
	,
	__pw: 0,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		var prevWidth = this.__pw;
		var prevScrollX = this.getContentOffsetX();
		$.ig.CPScrollView.prototype.sizeChanged.call(this, w, h);
		this.__pw = w;
		if (this.__definition != null) {
			this.__hasVertScroll = false;
			this.__definition._uIContainerHeight = h;
			this.__definition._uIContainerWidth = w;
			this.__definition.update(false);
			this.updateCurrentResizeHandleState();
			this.refresh(!this.__definition._isMaximized);
			if (this.__definition._isMaximized) {
				var prevIndex = 0;
				if (prevWidth > 0) {
					prevIndex = ($.ig.intDivide(prevScrollX, prevWidth));
				}
				this.scrollTo(prevIndex * w, 0);
				this.arrangeItems();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::OnScrollChanged(System.Int32, System.Int32)" />*/
	onScrollChanged: function (x, y) {
		this.arrangeItems();
		this.forceMeasureAndLayout();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::OnScrollChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetContentSize(System.Int32, System.Int32)" />*/
	setContentSize: function (width, height) {
		if (this.currentHeight() > height) {
			height = this.currentHeight();
		}
		if (this.currentWidth() > width) {
			width = this.currentWidth();
		}
		$.ig.CPScrollView.prototype.setContentSize.call(this, width, height);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetContentSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::UpdateResizer()" />*/
	updateResizer: function () {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		if (this.__isHandleVisible) {
			var iw = 0;
			var ih = 0;
			var ix = 0;
			var iy = 0;
			if (this.__definition._items.length > 0) {
				var info = this.__definition._items[this.__currentResizerIndex];
				iw = $.ig.truncate((singleBlockWidth * info._width));
				ih = $.ig.truncate((singleBlockHeight * info._height));
				ix = $.ig.truncate((singleBlockWidth * info._column));
				iy = $.ig.truncate((singleBlockHeight * info._row));
			}
			this.layoutResizeView(ix, iy, iw, ih);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::UpdateResizer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::RefreshChildren(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	refreshChildren: function (x, y, w, h, animate) {
		var $self = this;
		if (this.__isDraggingEditCell) {
			if (animate) {
				this.layoutResizeView(x, y, w, h);
			}
			var offset = $.ig.NativeUIUtility.prototype.utility().densify(5);
			x -= offset;
			y -= offset;
			w += offset * 2;
			h += offset * 2;
		}
		if (animate) {
			var lx = x;
			var ly = y;
			var lw = w;
			var lh = h;
			this.__childrenPanel.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.layoutResizeView(lx, ly, lw, lh);
				$self.refresh(true);
			}, function (finished) {
			});
		} else {
			this.layoutResizeView(x, y, w, h);
			this.refresh(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::RefreshChildren(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::LayoutResizeView(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutResizeView: function (x, y, w, h) {
		if (this.__isHandleVisible && this.__definition._items.length > 0) {
			var handleSize = this.__resizeHandleSize;
			var borderWidth = 0;
			if (this.__currentFocusItem != null) {
				borderWidth = $.ig.intDivide(this.__currentFocusItem.getBorderWidth(), 2);
			}
			var right = (x + w - $.ig.intDivide(handleSize, 2) - borderWidth);
			var bottom = (y + h - $.ig.intDivide(handleSize, 2) - borderWidth);
			var middleV = (y + $.ig.intDivide(h, 2) - $.ig.intDivide(handleSize, 2) - borderWidth);
			var middleH = (x + $.ig.intDivide(w, 2) - $.ig.intDivide(handleSize, 2) - borderWidth);
			if (this.__canResizerDrag) {
				this.layoutHandle(this.__resizeHandleRight, right, middleV, handleSize, this.__activeResizeHandleLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.right);
				this.layoutHandle(this.__resizeHandleBottom, middleH, bottom, handleSize, this.__activeResizeHandleLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.bottom);
				this.layoutHandle(this.__resizeHandleBottomRight, right, bottom, handleSize, this.__activeResizeHandleLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.bottomRight);
			}
			if (this.__canResizerDrag || this.__canResizerResize) {
				var stroke = $.ig.NativeUIUtility.prototype.utility().densify(1);
				this.layoutResizeOutline(this.__resizeOutlineTop, x, y, w, stroke);
				this.layoutResizeOutline(this.__resizeOutlineLeft, x, y, stroke, h);
				this.layoutResizeOutline(this.__resizeOutlineBottom, x, y + h - stroke, w, stroke);
				this.layoutResizeOutline(this.__resizeOutlineRight, x + w - stroke, y, stroke, h);
			}
			if (this.__canResizerResize) {
				this.__resizeHandleRight.isHidden(false);
				this.__resizeHandleBottom.isHidden(false);
				this.__resizeHandleBottomRight.isHidden(false);
			} else {
				this.__resizeHandleRight.isHidden(true);
				this.__resizeHandleBottom.isHidden(true);
				this.__resizeHandleBottomRight.isHidden(true);
			}
		} else {
			this.__resizeHandleRight.isHidden(true);
			this.__resizeHandleBottom.isHidden(true);
			this.__resizeHandleBottomRight.isHidden(true);
			this.__resizeOutlineTop.isHidden(true);
			this.__resizeOutlineLeft.isHidden(true);
			this.__resizeOutlineBottom.isHidden(true);
			this.__resizeOutlineRight.isHidden(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::LayoutResizeView(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::LayoutHandle(Infragistics.CPView, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	layoutHandle: function (handle, x, y, size, isActiveResizeHandle) {
		if (isActiveResizeHandle) {
			var percentIncrease = 1;
			var adjustSize = $.ig.truncate((size * percentIncrease));
			x -= ($.ig.intDivide(adjustSize, 2));
			y -= ($.ig.intDivide(adjustSize, 2));
			size += adjustSize;
		}
		handle.isHidden(false);
		this.__childrenPanel.measureView1(handle, x, y, size, size, 1);
		handle.bringToFront();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::LayoutHandle(Infragistics.CPView, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::LayoutResizeOutline(Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layoutResizeOutline: function (outline, x, y, w, h) {
		outline.isHidden(false);
		this.__childrenPanel.measureView1(outline, x, y, w, h, 1);
		outline.bringToFront();
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::LayoutResizeOutline(Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutView::Resizable()" />*/
	resizable: function (value) {
		if (arguments.length === 1) {
			this.__resizable = value;
			this.updateReizerStates(this.__canResizerDrag, this.__canResizerDrag, this.__isHandleVisible, this.__currentResizerIndex);
			this.updateResizer();
			return value;
		} else {
			return this.__resizable;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutView::Resizable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::UpdateReizerStates(System.Boolean, System.Boolean, System.Boolean, System.Int32)" />*/
	updateReizerStates: function (canDrag, canResize, isVisible, index) {
		this.__canResizerDrag = canDrag;
		this.__canResizerResize = canResize && this.__resizable;
		this.__isHandleVisible = isVisible;
		this.__currentResizerIndex = index;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::UpdateReizerStates(System.Boolean, System.Boolean, System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ResizeItem(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	resizeItem: function (item, fromWidth, fromHeight, toWidth, toHeight, animate) {
		var $self = this;
		if (toWidth != fromWidth) {
			toWidth = this.__childrenPanel._editDelegate.newWidthForFlowLayoutItem(this, toWidth, item);
		}
		if (toHeight != fromHeight) {
			toHeight = this.__childrenPanel._editDelegate.newHeightForFlowLayoutItem(this, toHeight, item);
		}
		if (toWidth != fromWidth || toHeight != fromHeight) {
			this.__definition.update(true);
			if (animate) {
				this.__childrenPanel.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.__childrenPanel.showResizeHandle(item);
				}, function (val) {
				});
			} else {
				this.__childrenPanel.showResizeHandle(item);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ResizeItem(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MoveItem(System.Int32, System.Int32, System.Boolean)" />*/
	moveItem: function (fromIndex, toIndex, animate) {
		var $self = this;
		toIndex = this.__childrenPanel._editDelegate.moveFlowLayoutItemTo(this, fromIndex, toIndex);
		if (fromIndex != toIndex) {
			var item = this.__definition._items[fromIndex];
			this.__definition._items.removeAt(fromIndex);
			this.__definition._items.insert(toIndex, item);
			this.__definition.update(true);
			if (animate) {
				var finalToIndex = toIndex;
				this.__childrenPanel.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
					$self.__childrenPanel.showResizeHandle(finalToIndex);
				}, function (val) {
				});
			} else {
				this.__childrenPanel.showResizeHandle(toIndex);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MoveItem(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutView::CanResize()" />*/
	canResize: function () {
		return this.resizable();
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutView::CanResize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::StartEditingItem(System.Int32, Infragistics.FlowLayoutResizeHandleLocation)" />*/
	startEditingItem: function (index, location) {
		this.__editingCell = index;
		this.__isResizing = location != $.ig.FlowLayoutResizeHandleLocation.prototype.none;
		this.__activeResizeHandleLocation = location;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::StartEditingItem(System.Int32, Infragistics.FlowLayoutResizeHandleLocation)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MouseEnterResizeHandle(System.Int32, Infragistics.FlowLayoutResizeHandleLocation)" />*/
	mouseEnterResizeHandle: function (index, location) {
		this.__activeResizeHandleLocation = location;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MouseEnterResizeHandle(System.Int32, Infragistics.FlowLayoutResizeHandleLocation)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::StartDraggingFlowLayoutEditItem()" />*/
	startDraggingFlowLayoutEditItem: function () {
		this.__isDraggingEditCell = true;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::StartDraggingFlowLayoutEditItem()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::EndDraggingFlowLayoutEditItem(System.Int32, System.Int32)" />*/
	endDraggingFlowLayoutEditItem: function (startIndex, endIndex) {
		this.__currentResizerIndex = endIndex;
		this.__isDraggingEditCell = false;
		if (startIndex != endIndex) {
			this.__childrenPanel._editDelegate.finishedMovingItem(this, startIndex, endIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::EndDraggingFlowLayoutEditItem(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MouseLeaveResizeHandle()" />*/
	mouseLeaveResizeHandle: function () {
		this.__activeResizeHandleLocation = $.ig.FlowLayoutResizeHandleLocation.prototype.none;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MouseLeaveResizeHandle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::EndResizingFlowLayoutEditItem(System.Int32, System.Int32, System.Int32)" />*/
	endResizingFlowLayoutEditItem: function (index, startWidth, startHeight) {
		var item = this.__definition._items[index];
		this.__isResizing = false;
		this.__activeResizeHandleLocation = $.ig.FlowLayoutResizeHandleLocation.prototype.none;
		if (item._width != startWidth || item._height != startHeight) {
			this.__childrenPanel._editDelegate.finishedResizingItem(this, index, startWidth, startHeight, item._width, item._height);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::EndResizingFlowLayoutEditItem(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetCurrentFocusItem()" />*/
	getCurrentFocusItem: function () {
		return this.__currentFocusItem;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutItemView Infragistics.FlowLayoutView::GetCurrentFocusItem()" />*/
	,
	__currentFocusItem: null,
	__currentFocusInfoIndex: 0,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::SetCurrentFocusItem(Infragistics.FlowLayoutItemView)" />*/
	setCurrentFocusItem: function (item) {
		this.__currentFocusItem = item;
		this.__currentFocusInfoIndex = this.__currentFocusItem._info._index;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::SetCurrentFocusItem(Infragistics.FlowLayoutItemView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ContainerGotForwardFocus()" />*/
	containerGotForwardFocus: function () {
		if (!this.isMaximized()) {
			if (this.__currentFocusItem != null) {
				this.__currentFocusItem.elementGotFocus();
			} else if (this.__visibleCells.length > 0) {
				this.setCurrentFocusItem(this.__visibleCells[0]);
				if (!this.isMaximized()) {
					this.__currentFocusItem.elementGotFocus();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ContainerGotForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ContainerGotBackwardFocus()" />*/
	containerGotBackwardFocus: function () {
		if (!this.isMaximized()) {
			if (this.__currentFocusItem != null) {
				this.__currentFocusItem.elementGotFocus();
			} else if (this.__visibleCells.length > 0) {
				this.setCurrentFocusItem(this.__visibleCells[this.__visibleCells.length - 1]);
				if (!this.isMaximized()) {
					this.__currentFocusItem.elementGotFocus();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ContainerGotBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutView::ContainerHasFocusableElements()" />*/
	containerHasFocusableElements: function () {
		return this.__visibleCells != null && this.__visibleCells.length > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutView::ContainerHasFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	elementInContainerGotManualFocus: function (element) {
		if ($.ig.util.cast($.ig.FlowLayoutItemView.prototype.$type, element) !== null) {
			if (this.__currentFocusItem != null) {
				this.__currentFocusItem.elementLostFocus();
			}
			this.setCurrentFocusItem(element);
			if (!this.isMaximized()) {
				this.__currentFocusItem.elementGotFocus();
			}
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ElementLostFocus()" />*/
	elementLostFocus: function () {
		$.ig.CPScrollView.prototype.elementLostFocus.call(this);
		if (this.__currentFocusItem != null) {
			this.__currentFocusItem.elementLostFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ScrollItemIntoView(Infragistics.FlowlayoutItemInfo, Infragistics.ExecutionBlock)" />*/
	scrollItemIntoView: function (layoutInfo, finished) {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		var gx = this.getContentOffsetX();
		var gy = this.getContentOffsetY();
		var gw = this.currentWidth();
		var gh = this.currentHeight();
		var x = $.ig.truncate((layoutInfo._column * singleBlockWidth));
		var y = $.ig.truncate((layoutInfo._row * singleBlockHeight));
		var w = $.ig.truncate((layoutInfo._width * singleBlockWidth));
		var h = $.ig.truncate((layoutInfo._height * singleBlockHeight));
		var isAbove = y < gy;
		var isLeft = x < gx;
		var isBelow = (y + h) > (gy + gh);
		var isRight = (x + w) > (gx + gw);
		var scrollToX = -1, scrollToY = -1;
		if (isAbove) {
			scrollToY = y;
		} else if (isBelow) {
			scrollToY = (y + h) - gh;
		}
		if (isLeft) {
			scrollToX = x;
		} else if (isRight) {
			scrollToX = (x + w) - gw;
		}
		var shouldScroll = scrollToX != -1 || scrollToY != -1;
		if (shouldScroll) {
			this.scrollTo1((scrollToX == -1) ? this.getContentOffsetX() : scrollToX, (scrollToY == -1) ? this.getContentOffsetY() : scrollToY, function () {
				if (finished != null) {
					finished();
				}
			});
		} else {
			finished();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ScrollItemIntoView(Infragistics.FlowlayoutItemInfo, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ScrollTo(System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	scrollTo1: function (x, y, finishedBlock) {
		var $self = this;
		if (this.__scrollTimer == null) {
			this.__scrollTimer = new $.ig.CPTimer();
		}
		this.__scrollTimer.stop();
		var fx = this.getContentOffsetX();
		var fy = this.getContentOffsetY();
		this.__scrollTimer.start($.ig.ThemeManager.prototype.theme().animationDuration(), function (percent) {
			$self.scrollTick(fx, fy, x, y, percent, finishedBlock);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ScrollTo(System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::ScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	scrollTick: function (fx, fy, tx, ty, p, finishBlock) {
		this.scrollTo($.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fx, tx, p)), $.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fy, ty, p)));
		if (p == 1 && finishBlock != null) {
			finishBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::ScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutView::SetFocusItemByIndex(System.Int32)" />*/
	setFocusItemByIndex: function (index) {
		var $self = this;
		if (index > -1 && this.__currentFocusItem._info._index != index) {
			this.scrollItemIntoView(this.__definition._items[index], function () {
				$self.__currentFocusItem.elementLostFocus();
				$self.setCurrentFocusItem($self.getVisibleCell(index));
				if ($self.__isHandleVisible) {
					$self.__currentResizerIndex = index;
					$self.updateResizer();
				}
				if ($self.isMaximized()) {
					if ($self.__visibleCells.length > 0) {
						if ($self._maximizedIndexChanged != null) {
							$self._maximizedIndexChanged(index);
						}
					}
				} else {
					$self.__currentFocusItem.elementGotFocus();
				}
			});
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutView::SetFocusItemByIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutView::SetFocusItemByColRow(System.Int32, System.Int32)" />*/
	setFocusItemByColRow: function (col, row) {
		var index = this.__definition.resolveItemAtBlock(col, row);
		return this.setFocusItemByIndex(index);
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutView::SetFocusItemByColRow(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemLeft()" />*/
	moveFocusItemLeft: function () {
		if (this.__currentFocusItem != null) {
			if (!this.isMaximized()) {
				for (var c = this.__currentFocusItem._info._column - 1; c >= 0; c--) {
					for (var r = this.__currentFocusItem._info._row; r < this.__definition._totalPossibleHeight; r++) {
						var found = this.setFocusItemByColRow(c, r);
						if (found) {
							return;
						}
					}
				}
			} else if (this.__currentFocusItem._info._index > 0) {
				this.setFocusItemByIndex(this.__currentFocusItem._info._index - 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemRight()" />*/
	moveFocusItemRight: function () {
		if (this.__currentFocusItem != null) {
			if (!this.isMaximized()) {
				for (var c = this.__currentFocusItem._info._column + this.__currentFocusItem._info._width; c < this.__definition._numberOfVerticalBlocks; c++) {
					for (var r = this.__currentFocusItem._info._row; r < this.__definition._totalPossibleHeight; r++) {
						var found = this.setFocusItemByColRow(c, r);
						if (found) {
							return;
						}
					}
				}
			} else if (this.__currentFocusItem._info._index < this.__definition._numberOfItems - 1) {
				this.setFocusItemByIndex(this.__currentFocusItem._info._index + 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemRight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemUp()" />*/
	moveFocusItemUp: function () {
		if (this.__currentFocusItem != null) {
			for (var r = this.__currentFocusItem._info._row - 1; r >= 0; r--) {
				for (var c = this.__currentFocusItem._info._column; c < this.__definition._numberOfVerticalBlocks; c++) {
					var found = this.setFocusItemByColRow(c, r);
					if (found) {
						return;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemDown()" />*/
	moveFocusItemDown: function () {
		if (this.__currentFocusItem != null) {
			for (var r = this.__currentFocusItem._info._row + this.__currentFocusItem._info._height; r < this.__definition._totalPossibleHeight; r++) {
				for (var c = this.__currentFocusItem._info._column; c < this.__definition._numberOfVerticalBlocks; c++) {
					var found = this.setFocusItemByColRow(c, r);
					if (found) {
						return;
					}
				}
				for (var c1 = this.__currentFocusItem._info._column; c1 >= 0; c1--) {
					var found1 = this.setFocusItemByColRow(c1, r);
					if (found1) {
						return;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutView::MoveFocusItemDown()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.FlowLayoutView::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPScrollView.prototype.getSupportedKeyCommands.call(this);
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.left), function (k) {
			$self.moveFocusItemLeft();
		}));
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.right), function (k) {
			$self.moveFocusItemRight();
		}));
		if (!this.isMaximized()) {
			combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.up), function (k) {
				$self.moveFocusItemUp();
			}));
			combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.down), function (k) {
				$self.moveFocusItemDown();
			}));
		}
		if (this.__currentFocusItem != null) {
			combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
				if ($self.__currentFocusItem != null && $self.__childrenPanel != null) {
					$self.__childrenPanel.triggerClick($self.__currentFocusItem);
				}
			}));
			if (this.__currentFocusItem.supportsOverflow()) {
				combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.option(), function (k) {
					if ($self.__currentFocusItem != null) {
						$self.__currentFocusItem.triggerOverflow();
					}
				}));
			}
			if (this.__currentFocusItem.isMaximized()) {
				combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.close(), function (k) {
					$self.minimize(true);
				}));
			}
		}
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.FlowLayoutView::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('FlowLayoutView', $.ig.CPScrollView.prototype.$type, [$.ig.FlowLayoutViewCaptureViewDelegate.prototype.$type, $.ig.DynamicFocusableContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.FlowLayoutView" />*/

/*<BeginType Name="Infragistics.CPScrollViewDelegate" />*/

$.ig.util.defType('CPScrollViewDelegate', 'Object', {
	$type: new $.ig.Type('CPScrollViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPScrollViewDelegate" />*/

/*<BeginType Name="Infragistics.FlowLayoutViewCaptureView" />*/

$.ig.util.defType('FlowLayoutViewCaptureView', 'CPViewBase', {
	__flowLayout: null,
	_resizeDelegate: null,
	_editDelegate: null,
	_itemDelegate: null,
	__definition: null,
	_isMaximized: false,
	__isEditable: false,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::IsEditable()" />*/
	isEditable: function (value) {
		if (arguments.length === 1) {
			if (this.__isEditable != value) {
				this.__isEditable = value;
				if (this.__isEditable) {
					if (this.__definition != null && this.__definition._items.length > 0 && this.currentHeight() > 0) {
						this.showResizeHandle(0);
					}
				} else {
					this.hideResizeHandle();
				}
			}
			return value;
		} else {
			return this.__isEditable;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::IsEditable()" />*/
	,
	__canDrag: false,
	__canResize: false,
	__currentItemIndex: 0,
	__editMouseDown: false,
	__currentLocation: 0,
	__hoveredHandleLocation: 0,
	__frameX: 0,
	__frameY: 0,
	__frameW: 0,
	__frameH: 0,
	__startFrameX: 0,
	__startFrameY: 0,
	__startFrameW: 0,
	__startFrameH: 0,
	__startDragX: 0,
	__startDragY: 0,
	__isDraggingItem: false,
	init: function (flowlayout) {
		this.__originalItemIndex = -1;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__flowLayout = flowlayout;
	},
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::Reset()" />*/
	reset: function () {
		this.__currentItemIndex = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::Setup()" />*/
	setup: function () {
		$.ig.CPViewBase.prototype.setup.call(this);
		this.__currentItemIndex = -1;
		this.__frameX = this.__frameY = this.__frameW = this.__frameH = -1;
		this.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(0));
		this.__currentLocation = $.ig.FlowLayoutResizeHandleLocation.prototype.none;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::SetDefinition(Infragistics.FlowLayoutDefinition)" />*/
	setDefinition: function (def) {
		this.__definition = def;
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::SetDefinition(Infragistics.FlowLayoutDefinition)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlesUIInteraction()" />*/
	,
	__mouseDownIndex: 0,
	__originalItemIndex: 0,
	/*<BeginProperty Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::UsesMouseDownDelayed()" />*/
	usesMouseDownDelayed: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::UsesMouseDownDelayed()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	handleTouchDownDelayed: function (x, y) {
		return this.downDragLogic(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleTouchDownDelayed(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleMouseDown: function (x, y, quietly) {
		return this.downLogic(x, y, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		return this.downLogic(x, y, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		if (!this.__editMouseDown) {
			var location = this.resolveLocation(x, y);
			if (location != $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
				if (this.__hoveredHandleLocation != location) {
					this.__hoveredHandleLocation = location;
					this._resizeDelegate.mouseEnterResizeHandle(this.__mouseDownIndex, this.__hoveredHandleLocation);
					this.updateResizeHandle(true);
				}
			} else if (this.__hoveredHandleLocation != $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
				this.__hoveredHandleLocation = location;
				this._resizeDelegate.mouseLeaveResizeHandle();
				this.updateResizeHandle(true);
			}
		}
		$.ig.CPViewBase.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	__lastMouseDownLocation: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::DownLogic(System.Int32, System.Int32, System.Boolean)" />*/
	downLogic: function (x, y, canDragImmediately) {
		this.__lastMouseDownLocation = this.resolveLocation(x, y);
		if (this.__lastMouseDownLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
			this.__mouseDownIndex = this.__originalItemIndex = this.resolveItemIndexForPoint(x, y);
		}
		if (this.__definition != null && !this.isEditable() && this._itemDelegate != null && !this._isMaximized) {
			return true;
		}
		if (this.__definition == null || this._isMaximized || !this.isEditable() || this._editDelegate == null) {
			return false;
		}
		if (this.__currentItemIndex == this.__mouseDownIndex) {
			return this.processMouseDown(x, y, canDragImmediately);
		} else if (this.__mouseDownIndex == -1) {
			this.hideResizeHandle();
		}
		if (this.isEditable()) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::DownLogic(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::DownDragLogic(System.Int32, System.Int32)" />*/
	downDragLogic: function (x, y) {
		var location = this.resolveLocation(x, y);
		if (location == $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
			this.__mouseDownIndex = this.resolveItemIndexForPoint(x, y);
			if (this.__definition == null || this._isMaximized || !this.isEditable() || this._editDelegate == null) {
				return false;
			}
			if (this.__mouseDownIndex != -1 && this.processMouseDown(x, y, true)) {
				this.showResizeHandle(this.__mouseDownIndex);
				this.updateFrame(x, y);
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::DownDragLogic(System.Int32, System.Int32)" />*/
	,
	__startWidth: 0,
	__startHeight: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::ProcessMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	processMouseDown: function (x, y, canImmediatlyDrag) {
		this.__currentLocation = this.resolveLocation(x, y);
		this.__isDraggingItem = false;
		if (canImmediatlyDrag || this.__currentLocation != $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
			if (this.__currentItemIndex != -1) {
				var item = this.__definition._items[this.__currentItemIndex];
				this.__startWidth = item._width;
				this.__startHeight = item._height;
			}
			if (this.__mouseDownIndex > -1) {
				this.calculateAndSetFrame(this.__mouseDownIndex);
				this.__editMouseDown = true;
				if (this.__currentLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
					this.__startDragX = x;
					this.__startDragY = y;
				} else {
					this.__startDragX = this.__frameX + this.__frameW;
					this.__startDragY = this.__frameY + this.__frameH;
				}
				this._resizeDelegate.startEditingItem(this.__mouseDownIndex, this.__currentLocation);
				this._resizeDelegate.refreshChildren(this.__frameX, this.__frameY, this.__frameW, this.__frameH, true);
				this.__startFrameX = this.__frameX;
				this.__startFrameY = this.__frameY;
				this.__startFrameW = this.__frameW;
				this.__startFrameH = this.__frameH;
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::ProcessMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleMouseMove(System.Int32, System.Int32)" />*/
	handleMouseMove: function (x, y) {
		if (!this.__isDraggingItem && !this.__editMouseDown) {
			return this.downDragLogic(x, y);
		}
		return $.ig.CPViewBase.prototype.handleMouseMove.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandleMouseMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this.__editMouseDown) {
			this.updateFrame(x, y);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		if (this.__definition == null || !this.isEditable() || this._editDelegate == null) {
			return false;
		}
		if (this.__editMouseDown) {
			this.__editMouseDown = false;
			this.updateFrame(x, y);
			if (this.__isDraggingItem) {
				this.__isDraggingItem = false;
				if (this.__originalItemIndex != -1) {
					this._resizeDelegate.endDraggingFlowLayoutEditItem(this.__originalItemIndex, this.__currentItemIndex);
				}
			} else {
				this._resizeDelegate.endResizingFlowLayoutEditItem(this.__currentItemIndex, this.__startWidth, this.__startHeight);
			}
			if (this.__currentItemIndex != -1) {
				this.calculateAndSetFrame(this.__currentItemIndex);
				this.updateResizeHandle(true);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FlowLayoutViewCaptureView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::GetSelectedIndex()" />*/
	getSelectedIndex: function () {
		return this.__currentItemIndex;
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::GetSelectedIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HideResizeHandle()" />*/
	hideResizeHandle: function () {
		this._resizeDelegate.updateReizerStates(false, false, false, -1);
		this.__frameX = this.__frameY = this.__frameW = this.__frameH = -1;
		this.updateResizeHandle(false);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HideResizeHandle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ShowResizeHandle(System.Int32)" />*/
	showResizeHandle: function (index) {
		this.__currentItemIndex = index;
		this.__mouseDownIndex = index;
		this.calculateAndSetFrame(index);
		this.__canResize = this._editDelegate.isFlowLayoutItemResizable(this.__flowLayout, index);
		this.__canDrag = this._editDelegate.isFlowLayoutItemMovable(this.__flowLayout, index);
		this._resizeDelegate.updateReizerStates(this.__canDrag, this.__canResize, true, index);
		this.updateResizeHandle(false);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ShowResizeHandle(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::CalculateAndSetFrame(System.Int32)" />*/
	calculateAndSetFrame: function (index) {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		var info = this.__definition._items[index];
		this.__frameW = $.ig.truncate((singleBlockWidth * info._width));
		this.__frameH = $.ig.truncate((singleBlockHeight * info._height));
		this.__frameX = $.ig.truncate((singleBlockWidth * info._column));
		this.__frameY = $.ig.truncate((singleBlockHeight * info._row));
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::CalculateAndSetFrame(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::UpdateResizeHandle(System.Boolean)" />*/
	updateResizeHandle: function (animate) {
		this._resizeDelegate.refreshChildren(this.__frameX, this.__frameY, this.__frameW, this.__frameH, animate);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::UpdateResizeHandle(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::ResolveItemIndexForPoint(System.Int32, System.Int32)" />*/
	resolveItemIndexForPoint: function (x, y) {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		var col = $.ig.truncate((x / singleBlockWidth));
		var row = $.ig.truncate((y / singleBlockHeight));
		return this.__definition.resolveItemAtBlock(col, row);
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::ResolveItemIndexForPoint(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::TriggerClick(Infragistics.FlowLayoutItemView)" />*/
	triggerClick: function (item) {
		if (item != null) {
			this.__mouseDownIndex = item._info._index;
			this.handleClick(item.currentX() + ($.ig.intDivide(item.currentWidth(), 2)), item.currentY() + ($.ig.intDivide(item.currentHeight(), 2)));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::TriggerClick(Infragistics.FlowLayoutItemView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPViewBase.prototype.handleClick.call(this, x, y);
		if (this.__definition != null && !this.isEditable() && this._itemDelegate != null) {
			var index = this.resolveItemIndexForPoint(x, y);
			if (index != -1 && index == this.__mouseDownIndex) {
				var view = this.__flowLayout.getVisibleCell(index);
				if (view != null) {
					var p = this.translatePoint(new $.ig.CPPoint(x, y), view);
					this._itemDelegate.itemClickedAtPoint(this.__flowLayout, index, $.ig.truncate(p._x), $.ig.truncate(p._y));
					this.__flowLayout.elementInContainerGotManualFocus(view);
				}
			}
		} else if (this.__definition != null && this.isEditable()) {
			var index1 = this.resolveItemIndexForPoint(x, y);
			if (this.__lastMouseDownLocation == $.ig.FlowLayoutResizeHandleLocation.prototype.none) {
				if (index1 != -1) {
					var view1 = this.__flowLayout.getVisibleCell(index1);
					if (view1 != null) {
						this.__flowLayout.elementInContainerGotManualFocus(view1);
					}
					this.showResizeHandle(index1);
					this.notifyUpdate(false);
				} else {
					this.__currentItemIndex = -1;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.FlowLayoutResizeHandleLocation Infragistics.FlowLayoutViewCaptureView::ResolveLocation(System.Int32, System.Int32)" />*/
	resolveLocation: function (x, y) {
		if (!this._resizeDelegate.canResize()) {
			return $.ig.FlowLayoutResizeHandleLocation.prototype.none;
		}
		var handleSize = ($.ig.ThemeManager.prototype.theme().mediumHitSize());
		var right = this.__frameX + this.__frameW - $.ig.intDivide(handleSize, 2);
		var bottom = this.__frameY + this.__frameH - $.ig.intDivide(handleSize, 2);
		var middleV = this.__frameY + $.ig.intDivide(this.__frameH, 2) - $.ig.intDivide(handleSize, 2);
		var middleH = this.__frameX + $.ig.intDivide(this.__frameW, 2) - $.ig.intDivide(handleSize, 2);
		var location = $.ig.FlowLayoutResizeHandleLocation.prototype.none;
		if ($.ig.CPMathUtility.prototype.rectContainsPoint(right, middleV, handleSize, handleSize, x, y)) {
			location = $.ig.FlowLayoutResizeHandleLocation.prototype.right;
		} else if ($.ig.CPMathUtility.prototype.rectContainsPoint(middleH, bottom, handleSize, handleSize, x, y)) {
			location = $.ig.FlowLayoutResizeHandleLocation.prototype.bottom;
		} else if ($.ig.CPMathUtility.prototype.rectContainsPoint(right, bottom, handleSize, handleSize, x, y)) {
			location = $.ig.FlowLayoutResizeHandleLocation.prototype.bottomRight;
		}
		return location;
	}
	/*<EndMethod Name="Infragistics.FlowLayoutResizeHandleLocation Infragistics.FlowLayoutViewCaptureView::ResolveLocation(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::UpdateFrame(System.Int32, System.Int32)" />*/
	updateFrame: function (x, y) {
		var dx = (x - this.__startDragX);
		var dy = (y - this.__startDragY);
		switch (this.__currentLocation) {
			case $.ig.FlowLayoutResizeHandleLocation.prototype.right:
				if (this.__canResize) {
					this.notifyOfNewSize(this.__startFrameW + dx, this.__frameH);
				}
				break;
			case $.ig.FlowLayoutResizeHandleLocation.prototype.bottom:
				if (this.__canResize) {
					this.notifyOfNewSize(this.__frameW, this.__startFrameH + dy);
				}
				break;
			case $.ig.FlowLayoutResizeHandleLocation.prototype.bottomRight:
				if (this.__canResize) {
					this.notifyOfNewSize(this.__startFrameW + dx, this.__startFrameH + dy);
				}
				break;
			case $.ig.FlowLayoutResizeHandleLocation.prototype.none:
				if (this.__canDrag) {
					var animateHandle = false;
					if (!this.__isDraggingItem) {
						animateHandle = true;
						this.__isDraggingItem = true;
						this._resizeDelegate.startDraggingFlowLayoutEditItem();
					}
					var offsetX = this.__startFrameX - this.__startDragX;
					var offsetY = this.__startFrameY - this.__startDragY;
					this.notifyOfNewLocation(this.__startDragX + dx + offsetX, this.__startDragY + dy + offsetY, x, y, animateHandle);
				}
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::UpdateFrame(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyOfNewSize(System.Int32, System.Int32)" />*/
	notifyOfNewSize: function (w, h) {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		if (w < singleBlockWidth) {
			w = $.ig.truncate(singleBlockWidth);
		}
		if (h < singleBlockHeight) {
			h = $.ig.truncate(singleBlockHeight);
		}
		this.__frameW = w;
		this.__frameH = h;
		var item = this.__definition._items[this.__currentItemIndex];
		var prevWidth = item._width, prevHeight = item._height;
		item._height = this._editDelegate.newHeightForFlowLayoutItem(this.__flowLayout, $.ig.truncate(Math.ceil(h / singleBlockHeight)), this.__currentItemIndex);
		item._width = this._editDelegate.newWidthForFlowLayoutItem(this.__flowLayout, $.ig.truncate(Math.ceil(w / singleBlockWidth)), this.__currentItemIndex);
		var isDirty = prevWidth != item._width || prevHeight != item._height;
		if (isDirty) {
			this.__definition.update(isDirty);
			this.updateResizeHandle(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyOfNewSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyUpdate(System.Boolean)" />*/
	notifyUpdate: function (isDirty) {
		this.__definition.update(isDirty);
		this.updateResizeHandle(isDirty);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyUpdate(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyOfNewLocation(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	notifyOfNewLocation: function (x, y, dragX, dragY, animateHandle) {
		this.__frameX = x;
		this.__frameY = y;
		var proposedIndex = this.calculateNewIndexLocation(dragX, dragY);
		var isDirty = false;
		if (proposedIndex != this.__currentItemIndex) {
			var originalIndex = this.__currentItemIndex;
			this.__mouseDownIndex = this.__currentItemIndex = this._editDelegate.moveFlowLayoutItemTo(this.__flowLayout, this.__currentItemIndex, proposedIndex);
			if (originalIndex != this.__currentItemIndex) {
				var item = this.__definition._items[originalIndex];
				isDirty = true;
				this.__definition._items.removeAt(originalIndex);
				this.__definition._items.insert(this.__currentItemIndex, item);
				this._resizeDelegate.startEditingItem(this.__currentItemIndex, this.__currentLocation);
			}
		}
		this.notifyUpdate(isDirty || animateHandle);
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::NotifyOfNewLocation(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::CalculateNewIndexLocation(System.Int32, System.Int32)" />*/
	calculateNewIndexLocation: function (x, y) {
		var singleBlockWidth = this.__definition.resolveUISingleBlockWidth();
		var singleBlockHeight = this.__definition.resolveUISingleBlockHeight();
		var col = $.ig.truncate((x / singleBlockWidth));
		var row = $.ig.truncate((y / singleBlockHeight));
		var index = this.__definition.resolveItemAtBlock(col, row);
		var proposedIndex = this.__currentItemIndex;
		if (index != this.__currentItemIndex && index != -1) {
			var currentItem = this.__definition._items[index];
			var isDragFrontX = (col <= (currentItem._column + currentItem._width / 2));
			var isDragFrontY = (row <= (currentItem._row + currentItem._height / 2));
			var prevItemAbove = false, prevItemLeft = false, nextItemRight = false, nextItemBelow = false;
			if (index > 0) {
				var prevItem = this.__definition._items[index - 1];
				prevItemAbove = prevItem._row < currentItem._row;
				prevItemLeft = prevItem._column < currentItem._column;
			}
			var itemCount = this.__definition._items.length;
			if (index < itemCount - 1) {
				var nextItem = this.__definition._items[index + 1];
				nextItemBelow = nextItem._row > currentItem._row;
				nextItemRight = nextItem._column > currentItem._column;
			}
			if (isDragFrontX && isDragFrontY) {
				proposedIndex = index;
			} else if (isDragFrontX && !isDragFrontY) {
				if (prevItemLeft) {
					proposedIndex = index;
				} else if (nextItemBelow && this.__currentItemIndex > index) {
					if (index < itemCount - 1) {
						proposedIndex = index + 1;
					}
				} else {
					proposedIndex = index;
				}
			} else if (!isDragFrontX && isDragFrontY) {
				if (nextItemRight && this.__currentItemIndex > index) {
					if (index < itemCount - 1) {
						proposedIndex = index + 1;
					}
				} else if (prevItemAbove) {
					proposedIndex = index;
				} else if (nextItemBelow && this.__currentItemIndex > index) {
					if (index < itemCount - 1) {
						proposedIndex = index + 1;
					}
				}
			} else if (!isDragFrontX && !isDragFrontY) {
				if (this.__currentItemIndex > index) {
					if (index < itemCount - 1) {
						proposedIndex = index + 1;
					}
				}
			}
		}
		return proposedIndex;
	}
	/*<EndMethod Name="System.Int32 Infragistics.FlowLayoutViewCaptureView::CalculateNewIndexLocation(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.FlowLayoutViewCaptureView::ViewForZoomingInScrollView(Infragistics.CPScrollViewBase)" />*/
	viewForZoomingInScrollView: function (scrollView) {
		return null;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.FlowLayoutViewCaptureView::ViewForZoomingInScrollView(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidZoom(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidZoom: function (scrollView) {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidZoom(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidScroll(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidScroll: function (scrollView) {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidScroll(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndDragging(Infragistics.CPScrollViewBase, System.Boolean)" />*/
	scrollViewDidEndDragging: function (scrollView, decelerate) {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndDragging(Infragistics.CPScrollViewBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewWillBeginDecelerating(Infragistics.CPScrollViewBase)" />*/
	scrollViewWillBeginDecelerating: function (scrollView) {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewWillBeginDecelerating(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndDecelerating(Infragistics.CPScrollViewBase)" />*/
	scrollViewDidEndDecelerating: function (scrollView) {
		if (this._isMaximized) {
			var cell = this.__flowLayout.getVisibleCell(0);
			if (cell != null) {
				if (this.__flowLayout._maximizedIndexChanged != null) {
					this.__flowLayout._maximizedIndexChanged(cell._info._index);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndDecelerating(Infragistics.CPScrollViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndZooming(Infragistics.CPScrollViewBase, Infragistics.CPViewBase, System.Single)" />*/
	scrollViewDidEndZooming: function (scrollView, view, scale) {
	}
	/*<EndMethod Name="System.Void Infragistics.FlowLayoutViewCaptureView::ScrollViewDidEndZooming(Infragistics.CPScrollViewBase, Infragistics.CPViewBase, System.Single)" />*/
	,
	$type: new $.ig.Type('FlowLayoutViewCaptureView', $.ig.CPViewBase.prototype.$type, [$.ig.CPScrollViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.FlowLayoutViewCaptureView" />*/

/*<BeginType Name="Infragistics.CPKeyboardCommandListener" />*/

$.ig.util.defType('CPKeyboardCommandListener', 'Object', {
	_commands: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._commands = new $.ig.Array();
	},
	/*<BeginMethod Name="Infragistics.CPKeyCommand Infragistics.CPKeyboardCommandListener::GetCommand(Infragistics.CPKeyCombo)" />*/
	getCommand: function (combo) {
		var count = this._commands.length;
		for (var i = count - 1; i >= 0; i--) {
			var subCommands = this._commands[i];
			var commandCount = subCommands.length;
			for (var j = 0; j < commandCount; j++) {
				var command = subCommands[j];
				for (var x = 0; x < command._combos.length; x++) {
					var commandCombo = command._combos[x];
					if (commandCombo.equalsKeyCombo(combo)) {
						return command;
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPKeyCommand Infragistics.CPKeyboardCommandListener::GetCommand(Infragistics.CPKeyCombo)" />*/
	,
	$type: new $.ig.Type('CPKeyboardCommandListener', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPKeyboardCommandListener" />*/

/*<BeginType Name="Infragistics.CPFocusManager" />*/

$.ig.util.defType('CPFocusManager', 'CPKeyboardCommandListener', {
	__sections: null,
	_currentSection: null,
	__focusableElements: null,
	__currentActiveElement: null,
	__initialIdOfSection: null,
	__initialIndexOfElement: 0,
	__currentActiveElementIsFocused: false,
	__sectionPopupId: null,
	__sectionHighlightTimer: null,
	__initialFocus: null,
	init: function () {
		this.__currentActiveElementIsFocused = false;
		$.ig.CPKeyboardCommandListener.prototype.init.call(this);
		this._currentSection = null;
		this.__sections = new $.ig.Array();
		this.__focusableElements = new $.ig.Dictionary(0);
		this.__sectionHighlightTimer = new $.ig.CPTimer();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::SetInitialFocusElement(Infragistics.CPViewBase)" />*/
	setInitialFocusElement: function (view) {
		this.__initialFocus = new $.ig.CPWeakObject(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::SetInitialFocusElement(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.FocusableElement Infragistics.CPFocusManager::GetCurrentActiveElement()" />*/
	getCurrentActiveElement: function () {
		return this.__currentActiveElement;
	}
	/*<EndMethod Name="Infragistics.FocusableElement Infragistics.CPFocusManager::GetCurrentActiveElement()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetFocusManagerLevelKeyCombos()" />*/
	getFocusManagerLevelKeyCombos: function () {
		var $self = this;
		var list = new $.ig.Array();
		if ($.ig.CPKeyboardEventManager.prototype.keyboardNavigationEnabled) {
			list.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Move Focus Forward", $.ig.Key.prototype.tab, false, false, false), function (k) {
				$self.storeFirstFocusMovePoint();
				$self.moveFocusForward();
			}));
			list.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Move Focus Back", $.ig.Key.prototype.tab, false, true, false), function (k) {
				$self.storeFirstFocusMovePoint();
				$self.moveFocusBackward();
			}));
			if (this.__sections != null && this.__sections.length > 1) {
				list.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Next Section", $.ig.Key.prototype.oemCloseBrackets, true, false, false), function (k) {
					$self.moveToNextSection();
				}));
				list.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Previous Section", $.ig.Key.prototype.oemOpenBrackets, true, false, false), function (k) {
					$self.moveBackSection();
				}));
			}
		}
		return list;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetFocusManagerLevelKeyCombos()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetSectionKeyboardCommands(System.String)" />*/
	getSectionKeyboardCommands: function (sectionId) {
		var section = this.getSectionById(sectionId);
		var commands = section._sectionContainer.getSupportedKeyCommands();
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, sectionId)) {
			var focusableElementsInSection = this.__focusableElements.item(sectionId);
			for (var i = 0; i < focusableElementsInSection.length; i++) {
				var elem = focusableElementsInSection[i];
				var elemItem = elem.getElement();
				if (elem.isFocusable() && elemItem != null && elemItem.supportsSectionKeyCommands()) {
					$.ig.ArrayUtility.prototype.addToCPReadOnlyList(commands, elemItem.getSupportedSectionKeyCommands());
				}
			}
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetSectionKeyboardCommands(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::StoreFirstFocusMovePoint()" />*/
	storeFirstFocusMovePoint: function () {
		if (this._currentSection != null) {
			this.__initialIdOfSection = this._currentSection._sectionId;
			this.__initialIndexOfElement = -1;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::StoreFirstFocusMovePoint()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetCurrentListOfSupportedKeyCombos(Infragistics.CPList)" />*/
	getCurrentListOfSupportedKeyCombos: function (interceptCommands) {
		var combos = new $.ig.Array();
		if (this.__focusedTextBox != null) {
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, this.__focusedTextBox.getSupportedKeyCommands());
		}
		if (this.__focusedTextBox != null && !this.__focusedTextBox._allowOutsideKeyCommandsAtSameLevel) {
			if (this.__currentActiveElement != null) {
				var elemItem = this.__currentActiveElement.getElement();
				if (elemItem != null) {
					var activeElemCommands = elemItem.getSupportedKeyCommands();
					var additionalCommands = new $.ig.Array();
					for (var i = 0; i < activeElemCommands.length; i++) {
						var command = activeElemCommands[i];
						for (var x = 0; x < command._combos.length; x++) {
							var commandComobo = command._combos[x];
							if (commandComobo._key == $.ig.Key.prototype.tab) {
								additionalCommands.add(command);
								break;
							}
						}
					}
					$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, additionalCommands);
				}
			}
		} else {
			if (this.__currentActiveElement != null) {
				var elemItem1 = this.__currentActiveElement.getElement();
				if (elemItem1 != null) {
					$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, elemItem1.getSupportedKeyCommands());
				}
			}
			var section = this._currentSection;
			if (section != null) {
				$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, this.getSectionKeyboardCommands(section._sectionId));
			}
			if (this.__pagingView != null && !this.__pagingView.isHidden()) {
				$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, this.__pagingView.getPagingKeyCommands());
			}
		}
		if (interceptCommands != null) {
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, interceptCommands);
		}
		$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, this.getFocusManagerLevelKeyCombos());
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetCurrentListOfSupportedKeyCombos(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetFocusedTextViewCommands(System.Boolean)" />*/
	getFocusedTextViewCommands: function (isTopMostManager) {
		if (this.__focusedTextBox != null) {
			var list = this.__focusedTextBox.getSupportedKeyCommands1(isTopMostManager);
			if (!isTopMostManager && (list == null || list.length == 0)) {
				this.__focusedTextBox.getSupportedKeyCommands();
			}
			return list;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPFocusManager::GetFocusedTextViewCommands(System.Boolean)" />*/
	,
	__pagingView: null,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::SetPagingContainer(Infragistics.CPViewBase)" />*/
	setPagingContainer: function (pagingView) {
		this.__pagingView = pagingView;
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::SetPagingContainer(Infragistics.CPViewBase)" />*/
	,
	__focusedTextBox: null,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::SetFocusedTextBox(Infragistics.CPTextViewBase)" />*/
	setFocusedTextBox: function (textBox) {
		this.__focusedTextBox = textBox;
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::SetFocusedTextBox(Infragistics.CPTextViewBase)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPFocusManager::HasFocusedTextBox()" />*/
	hasFocusedTextBox: function () {
		return this.__focusedTextBox != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPFocusManager::HasFocusedTextBox()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPFocusManager::TextboxHandledCommand(Infragistics.CPKeyCombo)" />*/
	textboxHandledCommand: function (command) {
		return this.__focusedTextBox != null && this.__focusedTextBox.capturesKey(command);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPFocusManager::TextboxHandledCommand(Infragistics.CPKeyCombo)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPFocusManager::CurrentElementHandledCommand(Infragistics.CPKeyCombo)" />*/
	currentElementHandledCommand: function (command) {
		return this.__currentActiveElement != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPFocusManager::CurrentElementHandledCommand(Infragistics.CPKeyCombo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::CurrentElementLostFocus()" />*/
	currentElementLostFocus: function () {
		if (this.__currentActiveElement != null && this.__currentActiveElementIsFocused) {
			this.__currentActiveElementIsFocused = false;
			var elemItem = this.__currentActiveElement.getElement();
			if (elemItem != null) {
				elemItem.elementLostFocus();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::CurrentElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::SetCurrentActiveElement(Infragistics.FocusableElementDelegate, System.Boolean)" />*/
	setCurrentActiveElement: function (element, giveFocus) {
		if (element == null) {
			this.currentElementLostFocus();
			this.__currentActiveElement = null;
		}
		var elementFound = false;
		var sectionsWithFocusElems = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__focusableElements);
		for (var i = 0; i < sectionsWithFocusElems.length; i++) {
			var focusElemsInSection = this.__focusableElements.item(sectionsWithFocusElems[i]);
			for (var x = 0; x < focusElemsInSection.length; x++) {
				var focusElem = focusElemsInSection[x];
				var elemItem = focusElem.getElement();
				if (focusElem.isFocusable()) {
					if (elemItem != null && elemItem == element) {
						elementFound = true;
						if (this.__currentActiveElement != null) {
							if (elemItem != element) {
								this.currentElementLostFocus();
							} else {
								if (this.__currentActiveElementIsFocused) {
									return;
								}
							}
						}
					} else if (elemItem != null && $.ig.util.cast($.ig.DynamicFocusableContainer.prototype.$type, elemItem) !== null && element != null) {
						var dynamicContainer = elemItem;
						var dynamicView = dynamicContainer;
						var elementView = element;
						if (dynamicView.getDynamicContainerId().equals(elementView.parentDynamicContainerId())) {
							elementFound = true;
							this.__currentActiveElementIsFocused = true;
							dynamicContainer.elementInContainerGotManualFocus(elementView);
							if (this.__currentActiveElement != null) {
								var currentItem = this.__currentActiveElement.getElement();
								if (currentItem != null && currentItem != dynamicView) {
									this.currentElementLostFocus();
								}
							}
						}
					}
					if (elementFound) {
						this.__currentActiveElement = focusElem;
						if (giveFocus) {
							this.giveCurrentActiveElementFocus(true);
						}
						this._currentSection = this.getSectionById(sectionsWithFocusElems[i]);
						return;
					}
				}
			}
		}
		if (!elementFound) {
			if ($.ig.util.cast($.ig.CPViewBase.prototype.$type, element) !== null) {
				var view = (element);
				if ($.ig.util.cast($.ig.FocusableElementDelegate.prototype.$type, view.getParent()) !== null) {
					this.setCurrentActiveElement(view.getParent(), giveFocus);
				} else {
					this.currentElementLostFocus();
				}
			} else {
				this.currentElementLostFocus();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::SetCurrentActiveElement(Infragistics.FocusableElementDelegate, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::MoveFocusForward()" />*/
	moveFocusForward: function () {
		var prevCurrentActiveElement = this.__currentActiveElement;
		this.hideSectionHighlight();
		$.ig.NativeUIUtility.prototype.utility().clearFocus();
		if (this.__sections != null && this.__sections.length == 0) {
			return;
		}
		var list;
		if (this.__currentActiveElement == null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, this._currentSection._sectionId)) {
				list = this.__focusableElements.item(this._currentSection._sectionId);
				if (list.length > 0) {
					this.__currentActiveElement = list[0];
				}
			} else {
				var nextSection = this.getNextSection();
				if (nextSection != null) {
					this._currentSection = nextSection;
					list = this.__focusableElements.item(this._currentSection._sectionId);
					if (list.length > 0) {
						this.__currentActiveElement = list[0];
					}
				}
			}
		} else {
			if (this.__currentActiveElementIsFocused == false && this.isCurrentActiveElementFocusable()) {
				this.giveCurrentActiveElementFocus(true);
				return;
			}
			var elemItem = this.__currentActiveElement.getElement();
			if (elemItem != null) {
				elemItem.elementLostFocus();
			}
			var currentSectionId = this.__currentActiveElement._sectionId;
			var focusableElementsInSection = this.__focusableElements.item(currentSectionId);
			var isLastElemInSection = false;
			var totalElementsCount = focusableElementsInSection.length;
			for (var i = 0; i < totalElementsCount; i++) {
				var elem = focusableElementsInSection[i];
				if (elem == this.__currentActiveElement) {
					if (this.__initialIndexOfElement == -1) {
						this.__initialIndexOfElement = i;
					} else if (currentSectionId.equals(this.__initialIdOfSection) && i == this.__initialIndexOfElement) {
						return;
					}
					if (i < totalElementsCount - 1) {
						this.__currentActiveElement = focusableElementsInSection[i + 1];
						if (!this.__currentActiveElement.isFocusable()) {
							continue;
						}
					} else {
						isLastElemInSection = true;
					}
					break;
				}
			}
			if (isLastElemInSection) {
				var nextSection1 = this.getNextSection();
				if (nextSection1 != null) {
					this._currentSection = nextSection1;
				}
				focusableElementsInSection = this.__focusableElements.item(this._currentSection._sectionId);
				if (focusableElementsInSection.length > 0) {
					this.__currentActiveElement = focusableElementsInSection[0];
				} else {
					this.__currentActiveElement = null;
				}
			}
		}
		if (this.__currentActiveElement != prevCurrentActiveElement) {
			this.giveCurrentActiveElementFocus(true);
		} else {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::MoveFocusForward()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::GiveCurrentActiveElementFocus(System.Boolean)" />*/
	giveCurrentActiveElementFocus: function (focusIsMovingForwards) {
		if (this.__currentActiveElement != null) {
			var isFocusable = true;
			var elemItem = this.__currentActiveElement.getElement();
			if (this.__currentActiveElement.isFocusable() && elemItem != null && $.ig.util.cast($.ig.DynamicFocusableContainer.prototype.$type, elemItem) !== null) {
				var dynamicContainer = elemItem;
				if (dynamicContainer.containerHasFocusableElements()) {
					if (focusIsMovingForwards) {
						dynamicContainer.containerGotForwardFocus();
					} else {
						dynamicContainer.containerGotBackwardFocus();
					}
				} else {
					this.__currentActiveElementIsFocused = true;
					isFocusable = false;
				}
			}
			if (elemItem != null && isFocusable && this.isCurrentActiveElementFocusable()) {
				this.__currentActiveElementIsFocused = true;
				elemItem.elementGotFocus();
			} else {
				if (focusIsMovingForwards) {
					this.moveFocusForward();
				} else {
					this.moveFocusBackward();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::GiveCurrentActiveElementFocus(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPFocusManager::IsCurrentActiveElementFocusable()" />*/
	isCurrentActiveElementFocusable: function () {
		var elemItem = this.__currentActiveElement.getElement();
		if (elemItem != null && $.ig.util.cast($.ig.CPViewBase.prototype.$type, elemItem) !== null) {
			var view = (elemItem);
			if (view.isHidden() || view.isDisabled() || !view.isFocusable() || view.opacity() == 0) {
				return false;
			}
		}
		var sectionContainer = this.getSectionById(this.__currentActiveElement._sectionId)._sectionContainer;
		var isSectionFocusable = sectionContainer == null || sectionContainer.canSectionGetFocus();
		return this.__currentActiveElement.isFocusable() && isSectionFocusable;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPFocusManager::IsCurrentActiveElementFocusable()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPFocusManager::IsLastSectionWithFocusElements(Infragistics.CPSection)" />*/
	isLastSectionWithFocusElements: function (section) {
		if (section._index == this.__sections.length - 1) {
			return true;
		}
		for (var i = 0; i < this.__sections.length; i++) {
			var nextSection = this.__sections[i];
			if (nextSection._index > section._index) {
				if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, nextSection._sectionId)) {
					return false;
				}
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPFocusManager::IsLastSectionWithFocusElements(Infragistics.CPSection)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetNextSectionWithFocusElements(Infragistics.CPSection)" />*/
	getNextSectionWithFocusElements: function (section) {
		if (this.__sections.length > 0) {
			for (var i = section._index; i < this.__sections.length; i++) {
				var nextSection = this.getSectionByIndex(i);
				if ((nextSection._sectionContainer == null || nextSection._sectionContainer.canSectionGetFocus()) && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, nextSection._sectionId)) {
					var sectionFocusElems = this.__focusableElements.item(nextSection._sectionId);
					if (sectionFocusElems.length > 0) {
						return nextSection;
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetNextSectionWithFocusElements(Infragistics.CPSection)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetPreviousSectionWithFocusElements(Infragistics.CPSection)" />*/
	getPreviousSectionWithFocusElements: function (section) {
		if (this.__sections.length > 0) {
			for (var i = section._index; i >= 0; i--) {
				var nextSection = this.getSectionByIndex(i);
				if ((nextSection._sectionContainer == null || nextSection._sectionContainer.canSectionGetFocus()) && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, nextSection._sectionId)) {
					var sectionFocusElems = this.__focusableElements.item(nextSection._sectionId);
					if (sectionFocusElems.length > 0) {
						return nextSection;
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetPreviousSectionWithFocusElements(Infragistics.CPSection)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetNextSection()" />*/
	getNextSection: function () {
		var current = this._currentSection;
		var nextSection = null;
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(current._nextSectionId) == false) {
			nextSection = this.getSectionById(current._nextSectionId);
		}
		if (nextSection == null) {
			if (this.isLastSectionWithFocusElements(this._currentSection)) {
				nextSection = this.getNextSectionWithFocusElements(this.getSectionByIndex(0));
			} else {
				nextSection = this.getNextSectionWithFocusElements(this.getSectionByIndex(this._currentSection._index + 1));
			}
		}
		return nextSection;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetNextSection()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetPrevSection()" />*/
	getPrevSection: function () {
		var current = this._currentSection;
		for (var i = 0; i < this.__sections.length; i++) {
			var section = this.__sections[i];
			if ($.ig.CPStringUtility.prototype.isNullOrEmpty(section._nextSectionId) == false && $.ig.CPStringUtility.prototype.areStringsEqual(current._sectionId, section._nextSectionId)) {
				return section;
			}
		}
		var prevSection;
		if (this._currentSection._index == 0) {
			prevSection = this.getPreviousSectionWithFocusElements(this.getSectionByIndex(this.__sections.length - 1));
		} else {
			prevSection = this.getPreviousSectionWithFocusElements(this.getSectionByIndex(this._currentSection._index - 1));
			if (prevSection == null) {
				prevSection = this.getPreviousSectionWithFocusElements(this.getSectionByIndex(this.__sections.length - 1));
			}
		}
		return prevSection;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetPrevSection()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPFocusManager::CanFocus(Infragistics.CPViewCore)" />*/
	canFocus: function (view) {
		if (view == null) {
			return false;
		}
		if (view.isFocusable() == false || view.isHidden() || view.opacity() == 0 || view.isDisabled()) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPFocusManager::CanFocus(Infragistics.CPViewCore)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::MoveFocusBackward()" />*/
	moveFocusBackward: function () {
		var prevCurrentActiveElement = this.__currentActiveElement;
		this.hideSectionHighlight();
		$.ig.NativeUIUtility.prototype.utility().clearFocus();
		if (this.__sections.length == 0) {
			return;
		}
		if (this.__currentActiveElement == null) {
			var prevSection = this.getPrevSection();
			if (prevSection != null) {
				this._currentSection = prevSection;
				var focusElems = this.__focusableElements.item(this._currentSection._sectionId);
				this.__currentActiveElement = (focusElems[focusElems.length - 1]);
			}
		} else {
			var elemItem = this.__currentActiveElement.getElement();
			if (elemItem != null) {
				elemItem.elementLostFocus();
			}
			var currentSectionId = this.__currentActiveElement._sectionId;
			var focusableElementsInSection = this.__focusableElements.item(currentSectionId);
			var isFirstElemInSection = false;
			for (var i = focusableElementsInSection.length - 1; i >= 0; i--) {
				var elem = focusableElementsInSection[i];
				if (elem == this.__currentActiveElement || $.ig.FocusableElement.prototype.isSameElementReference(elem, this.__currentActiveElement)) {
					if (this.__initialIndexOfElement == -1) {
						this.__initialIndexOfElement = i;
					} else if (currentSectionId.equals(this.__initialIdOfSection) && i == this.__initialIndexOfElement) {
						return;
					}
					if (i != 0) {
						if (focusableElementsInSection.length > 0) {
							this.__currentActiveElement = focusableElementsInSection[i - 1];
						}
						if (this.__currentActiveElement == null || !this.__currentActiveElement.isFocusable()) {
							continue;
						}
					} else {
						isFirstElemInSection = true;
					}
					break;
				}
			}
			if (isFirstElemInSection) {
				var prevSection1 = this.getPrevSection();
				if (prevSection1 != null) {
					this._currentSection = prevSection1;
					var focusElems1 = this.__focusableElements.item(this._currentSection._sectionId);
					if (focusElems1.length > 0) {
						this.__currentActiveElement = (focusElems1[focusElems1.length - 1]);
					} else {
						this.__currentActiveElement = null;
					}
				}
			}
		}
		if (this.__currentActiveElement != prevCurrentActiveElement) {
			this.giveCurrentActiveElementFocus(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::MoveFocusBackward()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::RegisterFocusableElement(Infragistics.CPViewCore, System.String)" />*/
	registerFocusableElement: function (view, sectionId) {
		view.focusManagerRegistered(sectionId);
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, sectionId)) {
			this.__focusableElements.item(sectionId, new $.ig.Array());
		}
		var list = this.__focusableElements.item(sectionId);
		var fe = new $.ig.FocusableElement(new $.ig.CPWeakObject(view));
		fe._sectionId = sectionId;
		list.add(fe);
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::RegisterFocusableElement(Infragistics.CPViewCore, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::RegisterFocusableElements(Infragistics.CPList, System.String)" />*/
	registerFocusableElements: function (focusableElements, sectionId) {
		for (var i = 0; i < focusableElements.length; i++) {
			var focusElem = focusableElements[i];
			focusElem._sectionId = sectionId;
		}
		if (sectionId == null) {
			return;
		}
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, sectionId)) {
			this.__focusableElements.item(sectionId, new $.ig.Array());
		}
		var currentFocusableElements = this.__focusableElements.item(sectionId);
		for (var i1 = 0; i1 < focusableElements.length; i1++) {
			var fElement = focusableElements[i1];
			var elemItem = fElement.getElement();
			if (elemItem != null && !currentFocusableElements.contains(fElement)) {
				if ($.ig.util.cast($.ig.CPInteractionView.prototype.$type, elemItem) !== null) {
					currentFocusableElements.add(fElement);
					elemItem.focusManagerRegistered(fElement._sectionId);
				} else if ($.ig.util.cast($.ig.DynamicFocusableContainer.prototype.$type, elemItem) !== null) {
					currentFocusableElements.add(fElement);
				} else {
					if (elemItem.supportsSectionKeyCommands()) {
						currentFocusableElements.add(fElement);
					}
					elemItem.focusManagerRegistered(fElement._sectionId);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::RegisterFocusableElements(Infragistics.CPList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::UnregisterFocusElement(Infragistics.CPViewBase, System.String)" />*/
	unregisterFocusElement: function (element, sectionId) {
		var del = this.__currentActiveElement != null ? this.__currentActiveElement.getElement() : null;
		if (del == element) {
			this.setCurrentActiveElement(null, false);
		}
		var newFocusIndex = -1;
		if (sectionId != null && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, sectionId)) {
			var currentFocusElems = this.__focusableElements.item(sectionId);
			for (var i = 0; i < currentFocusElems.length; i++) {
				var fElement = currentFocusElems[i];
				var isAlive = fElement.isAlive();
				var elemItem = fElement.getElement();
				if (isAlive == false || (elemItem != null && elemItem == element)) {
					if (newFocusIndex < 0 && elemItem == del) {
						newFocusIndex = i;
					}
					currentFocusElems.removeItem(fElement);
					break;
				}
			}
			this.unregisterFocusableElements(element._focusElements, sectionId);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::UnregisterFocusElement(Infragistics.CPViewBase, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::UnregisterFocusableElements(Infragistics.CPList, System.String)" />*/
	unregisterFocusableElements: function (focusableElements, sectionId) {
		if (sectionId == null) {
			return;
		}
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__focusableElements, sectionId)) {
			var currentFocusElems = this.__focusableElements.item(sectionId);
			for (var i = 0; i < focusableElements.length; ) {
				var fElement = focusableElements[i];
				var elemItem = fElement.getElement();
				if (this.__currentActiveElement == fElement) {
					this.__currentActiveElement = null;
				}
				if (currentFocusElems.contains(fElement)) {
					currentFocusElems.removeItem(fElement);
				} else {
					i++;
				}
			}
			if (currentFocusElems.length == 0) {
				this.__focusableElements.remove(sectionId);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::UnregisterFocusableElements(Infragistics.CPList, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::Unload()" />*/
	unload: function () {
		if (this.__sectionHighlightTimer != null) {
			this.__sectionHighlightTimer.stop();
			this.__sectionHighlightTimer = null;
		}
		this.__focusableElements.clear();
		this.__sections.clear();
		this._currentSection = null;
		this.__currentActiveElement = null;
		this.__focusedTextBox = null;
		this.__pagingView = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::Unload()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::CreateNewSection(System.String, Infragistics.CPSectionContainer)" />*/
	createNewSection: function (sectionId, container) {
		var section = new $.ig.CPSection(sectionId, this.__sections.length, container);
		this.__sections.add(section);
		if (this._currentSection == null && this.__sections.length == 1) {
			this._currentSection = section;
		}
		return section;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::CreateNewSection(System.String, Infragistics.CPSectionContainer)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetSectionById(System.String)" />*/
	getSectionById: function (sectionId) {
		for (var i = 0; i < this.__sections.length; i++) {
			var section = this.getSectionByIndex(i);
			if (section == null) {
				continue;
			}
			if (section._sectionId.equals(sectionId)) {
				return section;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetSectionById(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetSectionByIndex(System.Int32)" />*/
	getSectionByIndex: function (index) {
		for (var i = 0; i < this.__sections.length; i++) {
			var section = this.__sections[i];
			if (section._index == index) {
				return section;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPSection Infragistics.CPFocusManager::GetSectionByIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::MoveToNextSection()" />*/
	moveToNextSection: function () {
		var nextSection = this.getNextSection();
		if (nextSection != null) {
			this.highlightSection(nextSection);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::MoveToNextSection()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::MoveBackSection()" />*/
	moveBackSection: function () {
		var prevSection = this.getPrevSection();
		if (prevSection != null) {
			this.highlightSection(prevSection);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::MoveBackSection()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::HideSectionHighlight()" />*/
	hideSectionHighlight: function () {
		if (this.__sectionPopupId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__sectionPopupId, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::HideSectionHighlight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::HighlightSection(Infragistics.CPSection)" />*/
	highlightSection: function (section) {
		var $self = this;
		this.hideSectionHighlight();
		this._currentSection = section;
		if (this.__currentActiveElement != null) {
			var elemItem = this.__currentActiveElement.getElement();
			if (elemItem != null) {
				elemItem.elementLostFocus();
			}
		}
		this.__currentActiveElement = null;
		if (this._currentSection._sectionContainer != null) {
			this.__sectionPopupId = $.ig.CPPopupManager.prototype.showHighlightPopup(this._currentSection._sectionContainer.getSectionView());
			this.__sectionHighlightTimer.startAndFireOnce(1, function () {
				$self.hideSectionHighlight();
			});
		} else {
			this.__sectionPopupId = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::HighlightSection(Infragistics.CPSection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusManager::OnViewDidAppear()" />*/
	onViewDidAppear: function () {
		if (this.__initialFocus != null && this.__initialFocus.isAlive()) {
			var element = this.__initialFocus.value();
			this.setCurrentActiveElement(element, true);
			this.__initialFocus = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusManager::OnViewDidAppear()" />*/
	,
	$type: new $.ig.Type('CPFocusManager', $.ig.CPKeyboardCommandListener.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPFocusManager" />*/

/*<BeginType Name="Infragistics.FocusableElement" />*/

$.ig.util.defType('FocusableElement', 'Object', {
	__element: null,
	_sectionId: null,
	__canFocus: false,
	/*<BeginProperty Name="System.Boolean Infragistics.FocusableElement::IsFocusable()" />*/
	isFocusable: function (value) {
		if (arguments.length === 1) {
			this.__canFocus = value;
			return value;
		} else {
			if (this.isAlive()) {
				return this.isInternalElementFocusable() && this.__canFocus;
			}
			return false;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.FocusableElement::IsFocusable()" />*/
	,
	init: function (elem) {
		$.ig.Object.prototype.init.call(this);
		this.__element = elem;
		this.__canFocus = true;
	},
	/*<BeginMethod Name="Infragistics.FocusableElementDelegate Infragistics.FocusableElement::GetElement()" />*/
	getElement: function () {
		if (this.__element != null && this.__element.isAlive()) {
			return this.__element.value();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.FocusableElementDelegate Infragistics.FocusableElement::GetElement()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.FocusableElement::IsAlive()" />*/
	isAlive: function () {
		return this.__element != null && this.__element.isAlive();
	}
	/*<EndProperty Name="System.Boolean Infragistics.FocusableElement::IsAlive()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FocusableElement::IsInternalElementFocusable()" />*/
	isInternalElementFocusable: function () {
		if (this.isAlive()) {
			if ($.ig.util.cast($.ig.CPViewCore.prototype.$type, this.__element.value()) !== null) {
				return (this.__element.value()).isFocusable();
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.FocusableElement::IsInternalElementFocusable()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.FocusableElement::IsSameElementReference(Infragistics.FocusableElement, Infragistics.FocusableElement)" />*/
	isSameElementReference: function (x, y) {
		if (x == null || y == null || x.__element == null || y.__element == null) {
			return false;
		}
		if (x.__element.isAlive() == false || y.__element.isAlive() == false) {
			return false;
		}
		return x.__element.value() == y.__element.value();
	}
	/*<EndMethod Name="System.Boolean Infragistics.FocusableElement::IsSameElementReference(Infragistics.FocusableElement, Infragistics.FocusableElement)" />*/
	,
	$type: new $.ig.Type('FocusableElement', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.FocusableElement" />*/

/*<BeginType Name="Infragistics.CPHorizontalElementsContainer" />*/

$.ig.util.defType('CPHorizontalElementsContainer', 'CPView', {
	__currentFocusedIndex: 0,
	__currentFocusedElement: null,
	__elements: null,
	init: function () {
		$.ig.CPView.prototype.init.call(this);
		this.isFocusable(true);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		$.ig.CPView.prototype.addSubview.call(this, subView);
		if (this.__elements == null) {
			this.__elements = new $.ig.Array();
		}
		if ($.ig.util.cast($.ig.CPViewBase.prototype.$type, subView) !== null) {
			(subView).isFocusable(false);
			this.__elements.add(subView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementLostFocus()" />*/
	elementLostFocus: function () {
		$.ig.CPView.prototype.elementLostFocus.call(this);
		if (this.__currentFocusedElement != null) {
			this.__currentFocusedElement.elementLostFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementLostFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementGotFocus()" />*/
	elementGotFocus: function () {
		$.ig.CPView.prototype.elementGotFocus.call(this);
		if (this.__currentFocusedElement != null) {
			this.__currentFocusedElement.elementGotFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::MoveFocusLeft()" />*/
	moveFocusLeft: function () {
		for (var i = this.__currentFocusedIndex - 1; i >= 0; i--) {
			var element = this.__elements[i];
			if (this.isElementFocusable(element)) {
				if (this.__currentFocusedElement != null) {
					this.__currentFocusedElement.elementLostFocus();
				}
				this.__currentFocusedIndex = i;
				this.__currentFocusedElement = element;
				this.__currentFocusedElement.elementGotFocus();
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::MoveFocusLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::MoveFocusRight()" />*/
	moveFocusRight: function () {
		for (var i = this.__currentFocusedIndex + 1; i < this.__elements.length; i++) {
			var element = this.__elements[i];
			if (this.isElementFocusable(element)) {
				if (this.__currentFocusedElement != null) {
					this.__currentFocusedElement.elementLostFocus();
				}
				this.__currentFocusedIndex = i;
				this.__currentFocusedElement = element;
				this.__currentFocusedElement.elementGotFocus();
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::MoveFocusRight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ContainerGotForwardFocus()" />*/
	containerGotForwardFocus: function () {
		if (this.__currentFocusedElement != null && this.isElementFocusable(this.__currentFocusedElement)) {
			this.__currentFocusedElement.elementGotFocus();
		} else {
			this.__currentFocusedIndex = -1;
			this.moveFocusRight();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ContainerGotForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ContainerGotBackwardFocus()" />*/
	containerGotBackwardFocus: function () {
		if (this.__currentFocusedElement != null && this.isElementFocusable(this.__currentFocusedElement)) {
			this.__currentFocusedElement.elementGotFocus();
		} else {
			this.__currentFocusedIndex = this.__elements.length;
			this.moveFocusLeft();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ContainerGotBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPHorizontalElementsContainer::IsElementFocusable(Infragistics.CPViewBase)" />*/
	isElementFocusable: function (element) {
		return !element.isHidden() && !element.isDisabled() && element.currentHeight() > 0 && element.currentWidth() > 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPHorizontalElementsContainer::IsElementFocusable(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPHorizontalElementsContainer::ContainerHasFocusableElements()" />*/
	containerHasFocusableElements: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPHorizontalElementsContainer::ContainerHasFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	elementInContainerGotManualFocus: function (element) {
		for (var i = 0; i < this.__elements.length; i++) {
			if (element == this.__elements[i]) {
				this.__currentFocusedElement = element;
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHorizontalElementsContainer::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPHorizontalElementsContainer::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPView.prototype.getSupportedKeyCommands.call(this);
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.left), function (k) {
			$self.moveFocusLeft();
		}));
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.right), function (k) {
			$self.moveFocusRight();
		}));
		combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
			if ($self.__currentFocusedElement != null && $.ig.util.cast($.ig.CPInteractionView.prototype.$type, $self.__currentFocusedElement) !== null) {
				($self.__currentFocusedElement).triggerClick();
			}
		}));
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPHorizontalElementsContainer::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('CPHorizontalElementsContainer', $.ig.CPView.prototype.$type, [$.ig.DynamicFocusableContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPHorizontalElementsContainer" />*/

/*<BeginType Name="Infragistics.CPRowPath" />*/

$.ig.util.defType('CPRowPath', 'Object', {
	_rowIndex: 0,
	_sectionIndex: 0,
	init: function (row, section) {
		$.ig.Object.prototype.init.call(this);
		this._rowIndex = row;
		this._sectionIndex = section;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPRowPath::IsRowEqual(Infragistics.CPRowPath)" />*/
	isRowEqual: function (path) {
		return this._rowIndex == path._rowIndex && this._sectionIndex == path._sectionIndex;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPRowPath::IsRowEqual(Infragistics.CPRowPath)" />*/
	,
	$type: new $.ig.Type('CPRowPath', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRowPath" />*/

/*<BeginType Name="Infragistics.CPCellPath" />*/

$.ig.util.defType('CPCellPath', 'CPRowPath', {
	_columnIndex: 0,
	_fixedColumnDirection: 0,
	init: function (initNumber, row, section, column, fixedDirection) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPRowPath.prototype.init.call(this, row, section);
		this._columnIndex = column;
		this._fixedColumnDirection = fixedDirection;
		this.update();
	},
	init1: function (initNumber, row, section, column) {
		$.ig.CPRowPath.prototype.init.call(this, row, section);
		this._columnIndex = column;
		this._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
		this.update();
	},
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPCellPath::Copy()" />*/
	copy: function () {
		return new $.ig.CPCellPath(0, this._rowIndex, this._sectionIndex, this._columnIndex, this._fixedColumnDirection);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPCellPath::Copy()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCellPath::Update(Infragistics.CPCellPath)" />*/
	update1: function (path) {
		this._rowIndex = path._rowIndex;
		this._columnIndex = path._columnIndex;
		this._sectionIndex = path._sectionIndex;
		this._fixedColumnDirection = path._fixedColumnDirection;
		this.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCellPath::Update(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPCellPath::Update()" />*/
	update: function () {
		this._identifier = this.convertToString(this._rowIndex) + "_" + this.convertToString(this._columnIndex) + "_" + this.convertToString(this._sectionIndex) + "_" + (this._fixedColumnDirection).toString();
	}
	/*<EndMethod Name="System.Void Infragistics.CPCellPath::Update()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPCellPath::ConvertToString(System.Int32)" />*/
	convertToString: function (val) {
		if (val < 0) {
			return "_" + Math.abs(val).toString();
		}
		return val.toString();
	}
	/*<EndMethod Name="System.String Infragistics.CPCellPath::ConvertToString(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPCellPath::IsCellEqual(Infragistics.CPCellPath)" />*/
	isCellEqual: function (path) {
		return this._rowIndex == path._rowIndex && this._sectionIndex == path._sectionIndex && this._columnIndex == path._columnIndex && this._fixedColumnDirection == path._fixedColumnDirection;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPCellPath::IsCellEqual(Infragistics.CPCellPath)" />*/
	,
	_identifier: null,
	$type: new $.ig.Type('CPCellPath', $.ig.CPRowPath.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPCellPath" />*/

/*<BeginType Name="Infragistics.CPColumnInfo" />*/

$.ig.util.defType('CPColumnInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_index: 0,
	_offset: 0,
	_actualWidth: 0,
	_width: null,
	_spacing: 0,
	$type: new $.ig.Type('CPColumnInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPColumnInfo" />*/

/*<BeginType Name="Infragistics.CPColumnWidth" />*/

$.ig.util.defType('CPColumnWidth', 'Object', {
	_fillEmptySpace: false,
	_minimumWidth: 0,
	_value: 0,
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithFixedWidth(System.Int32)" />*/
	createWithFixedWidth: function (width) {
		return $.ig.CPColumnWidth.prototype.createWithFixedWidth1(width, 0);
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithFixedWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithFixedWidth(System.Int32, System.Int32)" />*/
	createWithFixedWidth1: function (width, minWidth) {
		var columnWidth = new $.ig.CPColumnWidth();
		columnWidth._fillEmptySpace = false;
		columnWidth._value = width;
		columnWidth._minimumWidth = minWidth;
		return columnWidth;
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithFixedWidth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithPercentWidth(System.Int32)" />*/
	createWithPercentWidth: function (val) {
		return $.ig.CPColumnWidth.prototype.createWithPercentWidth1(val, 0);
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithPercentWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithPercentWidth(System.Int32, System.Int32)" />*/
	createWithPercentWidth1: function (val, minWidth) {
		var columnWidth = new $.ig.CPColumnWidth();
		columnWidth._fillEmptySpace = true;
		columnWidth._value = val;
		columnWidth._minimumWidth = minWidth;
		return columnWidth;
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPColumnWidth::CreateWithPercentWidth(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPColumnWidth', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPColumnWidth" />*/

/*<BeginType Name="Infragistics.CPDynamicColumnGridView" />*/

$.ig.util.defType('CPDynamicColumnGridView', 'CPViewBase', {
	__gridView: null,
	__dsh: null,
	_bottomInset: 0,
	__setupCellDelegate: null,
	__createCellBlock: null,
	__columnSpacing: 0,
	_useColumnSpacing: false,
	_useRowSpacing: false,
	_isModal: false,
	_defaultRowSpacingSize: 0,
	_defaultColumnSpacingSize: 0,
	init: function (initNumber, setupDelegate, createCellBlock) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPViewBase.prototype.init.call(this);
		this.__setupCellDelegate = setupDelegate;
		this.__createCellBlock = createCellBlock;
		this.setupView();
	},
	init1: function (initNumber, dsh) {
		$.ig.CPViewBase.prototype.init.call(this);
		this.__dsh = dsh;
		this.setupView();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SetupView()" />*/
	setupView: function () {
		this._defaultRowSpacingSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this._defaultColumnSpacingSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.__gridView = new $.ig.CPGridView(0);
		this.__gridView._rowHeight = $.ig.ThemeManager.prototype.theme().resolveItemGuide($.ig.CPTheme.prototype.itemGuideStyleLarge).height();
		this.__gridView._headerHeight = 0;
		this.__gridView._rowSeparatorHeight = 0;
		this.__gridView._sectionHeaderHeight = this.__gridView._rowHeight;
		this.__gridView._columnSpacing = this.__columnSpacing;
		this.__gridView.setScrollBarVisiblitity(false, true);
		this.__gridView._neverUseSideSpacing = true;
		this.addSubview(this.__gridView);
		if (this.__dsh != null) {
			this.__gridView.setDataSource(this.__dsh);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SetupView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewCellSetupDelegate Infragistics.CPDynamicColumnGridView::CellSetupDelegate()" />*/
	cellSetupDelegate: function () {
		return this.__setupCellDelegate;
	}
	/*<EndProperty Name="Infragistics.CPGridViewCellSetupDelegate Infragistics.CPDynamicColumnGridView::CellSetupDelegate()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridView Infragistics.CPDynamicColumnGridView::Grid()" />*/
	grid: function () {
		return this.__gridView;
	}
	/*<EndProperty Name="Infragistics.CPGridView Infragistics.CPDynamicColumnGridView::Grid()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper Infragistics.CPDynamicColumnGridView::DataSourceHelper()" />*/
	dataSourceHelper: function () {
		return this.__dsh;
	}
	/*<EndProperty Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper Infragistics.CPDynamicColumnGridView::DataSourceHelper()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPDynamicColumnGridView::HasData()" />*/
	hasData: function () {
		return this.__dsh != null && this.__dsh.data() != null && this.__dsh.data().length > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPDynamicColumnGridView::HasData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SetData(Infragistics.CPList)" />*/
	setData: function (data) {
		var invalidate = false;
		if (this.__dsh == null) {
			this.__dsh = this.resolveDSH();
			this.__gridView.setDataSource(this.__dsh);
		} else {
			if (this.__gridView.getDataSource() == null) {
				this.__gridView.setDataSource(this.__dsh);
			}
			invalidate = data == this.__dsh.data();
		}
		this.__dsh.data(data);
		if (invalidate) {
			this.__dsh.invalidateData();
		}
		this.refreshGrid();
	}
	/*<EndMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SetData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDynamicColumnGridView::RefreshGrid()" />*/
	refreshGrid: function () {
		this.__gridView.stopAnimating();
		this.__gridView.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDynamicColumnGridView::RefreshGrid()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper Infragistics.CPDynamicColumnGridView::ResolveDSH()" />*/
	resolveDSH: function () {
		return new $.ig.CPGridViewSingleFieldDynamicColumnDataSourceHelper(0, new $.ig.CPGridViewColumnDefinition(3, this.__setupCellDelegate, this.__createCellBlock));
	}
	/*<EndMethod Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper Infragistics.CPDynamicColumnGridView::ResolveDSH()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPDynamicColumnGridView::CalculateSizeMargin(System.Int32)" />*/
	calculateSizeMargin: function (w) {
		if (this.customSideMargin() > 0) {
			return this.customSideMargin();
		}
		var sideMargin = this._isModal ? $.ig.ThemeManager.prototype.theme().resolvePaddingForModalGridContent(w) : $.ig.ThemeManager.prototype.theme().resolveDisplayAreaPadding(w);
		this.__columnSpacing = this._useColumnSpacing ? $.ig.ThemeManager.prototype.theme().displayAreaPadding() : this._defaultColumnSpacingSize;
		return sideMargin;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPDynamicColumnGridView::CalculateSizeMargin(System.Int32)" />*/
	,
	_forcedNumberOfColumns: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPDynamicColumnGridView::ForcedNumberOfColumns()" />*/
	forcedNumberOfColumns: function (value) {
		if (arguments.length === 1) {
			this._forcedNumberOfColumns = value;
			return value;
		} else {
			return this._forcedNumberOfColumns;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPDynamicColumnGridView::ForcedNumberOfColumns()" />*/
	,
	_customSideMargin: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPDynamicColumnGridView::CustomSideMargin()" />*/
	customSideMargin: function (value) {
		if (arguments.length === 1) {
			this._customSideMargin = value;
			return value;
		} else {
			return this._customSideMargin;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPDynamicColumnGridView::CustomSideMargin()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		var sideMargin = this.calculateSizeMargin(w);
		var widthMinusMargin = w - sideMargin * 2;
		if (this.forcedNumberOfColumns() <= 0) {
			this.__dsh._forcedNumberOfColumns = this.__dsh.calculateNumberOfColumns(widthMinusMargin, h);
		} else {
			this.__dsh._forcedNumberOfColumns = this.forcedNumberOfColumns();
		}
		if (this.__dsh._forcedNumberOfColumns == 1 && this.customSideMargin() == 0) {
			sideMargin = 0;
			widthMinusMargin = w;
		}
		this.__gridView._contentOffsetLeft = this.__gridView._contentOffsetRight = sideMargin;
		sideMargin = 0;
		if (this._useRowSpacing) {
			if ($.ig.ThemeManager.prototype.theme().isSmallArea(w) || this.__dsh._forcedNumberOfColumns == 1) {
				this.__gridView._rowSpacing = $.ig.NativeUIUtility.prototype.utility().densify(1);
			} else {
				this.__gridView._rowSpacing = $.ig.ThemeManager.prototype.theme().displayAreaPadding();
			}
		} else {
			this.__gridView._rowSpacing = this._defaultRowSpacingSize;
		}
		if (this.__dsh != null && this.__dsh._forcedNumberOfColumns == 1) {
			this.__gridView._columnSpacing = 0;
		} else {
			this.__gridView._columnSpacing = this.__columnSpacing;
		}
		this.__gridView._gridBottomInset = this._bottomInset + sideMargin;
		this.measureView1(this.__gridView, sideMargin, 0, w - (sideMargin * 2), h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPDynamicColumnGridView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPDynamicColumnGridView::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		if (this.__gridView != null) {
			this.__gridView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPDynamicColumnGridView::Unload()" />*/
	,
	$type: new $.ig.Type('CPDynamicColumnGridView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPDynamicColumnGridView" />*/

/*<BeginType Name="Infragistics.CPGridRowExpansionAnimator" />*/

$.ig.util.defType('CPGridRowExpansionAnimator', 'CPGridViewCellAnimator', {
	__parentRowIndex: 0,
	init: function (parentRowIndex) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__parentRowIndex = parentRowIndex;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		if (cell._path._sectionIndex >= 0) {
			var section = engine._sections[cell._path._sectionIndex];
			var parentRowTop = section.getRowTop(this.__parentRowIndex);
			var parentRowHeight = section.getRowHeight(this.__parentRowIndex);
			var isSeparator = cell._path._columnIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX();
			var y = isSeparator ? parentRowTop + parentRowHeight : parentRowTop;
			var h = isSeparator ? cell._frameH : Math.min(cell._frameH, parentRowHeight);
			engine.measureCell(cell, cell._frameX, y, cell._frameW, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		var section = cell._path._sectionIndex >= 0 ? engine._sections[cell._path._sectionIndex] : null;
		if (section != null) {
			var y = section.getRowTop(cell._path._rowIndex);
			if (cell._path._columnIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()) {
				y += section.getRowHeight(cell._path._rowIndex);
			}
			cell.storeFrame(cell._frameX, y, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
		if (cell._path._rowIndex == this.__parentRowIndex) {
			cell.bringToFront();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowExpansionAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridRowExpansionAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridRowExpansionAnimator" />*/

/*<BeginType Name="Infragistics.CPGridRowCollapseAnimator" />*/

$.ig.util.defType('CPGridRowCollapseAnimator', 'CPGridViewCellAnimator', {
	__parentRowIndex: 0,
	init: function (parentRowIndex) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__parentRowIndex = parentRowIndex;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		var y = cell._frameY;
		var offset = 0;
		if (this._cellsBeingRemoved != null) {
			var pathlookup = new $.ig.Dictionary(0);
			var count = this._cellsBeingRemoved.length;
			for (var i = 0; i < count; i++) {
				var removedCell = this._cellsBeingRemoved[i];
				if (offset > 0 || (removedCell._path._sectionIndex < cell._path._sectionIndex || (removedCell._path._sectionIndex == cell._path._sectionIndex && removedCell._path._rowIndex <= cell._path._rowIndex))) {
					var key = removedCell._path._sectionIndex + "_" + removedCell._path._rowIndex;
					if (!$.ig.NativeDictionaryUtility.prototype.containsKey(pathlookup, key)) {
						pathlookup.item(key, key);
						offset += removedCell.currentHeight();
					}
				}
			}
			if (offset == 0) {
				y = cell._gridView.getContentOffsetY() - cell._frameH;
			}
		}
		y += offset;
		engine.measureCell(cell, cell._frameX, y, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		if (this._differenceInVerticalScrollPosition > 0) {
			engine.measureCell(cell, cell._frameX, cell._frameY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
		var section = cell._path._sectionIndex >= 0 ? engine._sections[cell._path._sectionIndex] : null;
		if (section != null) {
			var parentRowTop = section.getRowTop(this.__parentRowIndex);
			var parentRowHeight = section.getRowHeight(this.__parentRowIndex);
			var isSeparator = cell._path._columnIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX();
			var y = isSeparator ? parentRowTop + parentRowHeight : parentRowTop;
			var h = isSeparator ? cell._frameH : Math.min(cell._frameH, parentRowHeight);
			cell.storeFrame(cell._frameX, y, cell._frameW, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
		if (cell._path._rowIndex == this.__parentRowIndex) {
			cell.bringToFront();
		}
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX, prevY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridRowCollapseAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridRowCollapseAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridRowCollapseAnimator" />*/

/*<BeginType Name="Infragistics.CPGridSectionInfo" />*/

$.ig.util.defType('CPGridSectionInfo', 'Object', {
	_headerHeight: 0,
	_footerHeight: 0,
	_numberOfRows: 0,
	_sectionIndex: 0,
	_rowHeight: 0,
	__bucketHeights: null,
	__rowHeightBuckets: null,
	__rowHeightsBucketSize: 0,
	__sizeOfLastBucket: 0,
	_stretchRows: null,
	_rowSeparatorHeight: 0,
	_rowSpacing: 0,
	_offset: 0,
	_totalHeight: 0,
	_absoluteStartRowIndex: 0,
	_excludeRowSpacingOnTopAndBottom: false,
	_rowHeightListener: null,
	_ignoreLastRowSeparator: false,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__rowHeightsBucketSize = 25;
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowTop(System.Int32)" />*/
	getRowTop: function (index) {
		if (index == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
			return this._offset;
		}
		if (index == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()) {
			return this._offset + this._totalHeight - this._footerHeight;
		}
		var top = this._offset + this._headerHeight;
		if (!this._excludeRowSpacingOnTopAndBottom) {
			top += this._rowSpacing;
		}
		if (this.__rowHeightBuckets == null) {
			var fullRowHeight = this.getFullRowHeight(0);
			top += (fullRowHeight * index);
		} else {
			var bi = this.getBucketForRowIndex(index);
			for (var i = 0; i < bi; i++) {
				top += this.__bucketHeights[i];
			}
			var indexInBucket = this.getBucketIndexForRowIndex(index);
			for (var i1 = 1; i1 <= indexInBucket; i1++) {
				top += this.getFullRowHeight(index - i1);
			}
		}
		return top;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowTop(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetAbsoluteRowIndex(System.Int32)" />*/
	getAbsoluteRowIndex: function (row) {
		return this._absoluteStartRowIndex + row;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetAbsoluteRowIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetSectionTop()" />*/
	getSectionTop: function () {
		return this._offset;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetSectionTop()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetSectionBottom()" />*/
	getSectionBottom: function () {
		return this._offset + this._totalHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetSectionBottom()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridSectionInfo::IsStretchRow(System.Int32)" />*/
	isStretchRow: function (index) {
		if (this._stretchRows == null || index < 0) {
			return false;
		} else {
			return this._stretchRows[index];
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridSectionInfo::IsStretchRow(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowHeight(System.Int32)" />*/
	getRowHeight: function (index) {
		if (index == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
			return this._headerHeight;
		}
		if (index == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()) {
			return this._footerHeight;
		}
		if (this.__rowHeightBuckets == null || this.__rowHeightBuckets.length == 0) {
			return this._rowHeight;
		} else {
			var val = this.getBucketRowHeightForIndex(index);
			var isNull = isNaN(val);
			if (isNull) {
				return 0;
			}
			if (val == -1) {
				val = this._rowHeight;
			}
			return val;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridSectionInfo::SetRowHeights(System.Int32)" />*/
	setRowHeights: function (rowCount) {
		var x = rowCount / this.__rowHeightsBucketSize;
		var leftOver = x - $.ig.truncate(x);
		var numberOfBuckets = $.ig.truncate((x - leftOver));
		this.__sizeOfLastBucket = this.__rowHeightsBucketSize;
		if (leftOver > 0) {
			numberOfBuckets++;
			this.__sizeOfLastBucket = $.ig.truncate(Math.round(leftOver * this.__rowHeightsBucketSize));
		}
		this.__bucketHeights = new Array(numberOfBuckets);
		this.__rowHeightBuckets = new $.ig.Array();
		for (var i = 0; i < numberOfBuckets; i++) {
			var bs = this.__rowHeightsBucketSize;
			if (i == numberOfBuckets - 1) {
				bs = this.__sizeOfLastBucket;
			}
			var a = new Array(bs);
			this.__rowHeightBuckets.add(a);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridSectionInfo::SetRowHeights(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketForRowIndex(System.Int32)" />*/
	getBucketForRowIndex: function (index) {
		var x = index / this.__rowHeightsBucketSize;
		var leftOver = x - $.ig.truncate(x);
		return $.ig.truncate((x - leftOver));
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketForRowIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketIndexForRowIndex(System.Int32)" />*/
	getBucketIndexForRowIndex: function (index) {
		var x = index / this.__rowHeightsBucketSize;
		var leftOver = x - $.ig.truncate(x);
		var val = leftOver * this.__rowHeightsBucketSize;
		return $.ig.truncate(Math.round(val));
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketIndexForRowIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.CPGridSectionInfo::ResolveBucketArrayForIndex(System.Int32)" />*/
	resolveBucketArrayForIndex: function (index) {
		return this.__rowHeightBuckets[this.getBucketForRowIndex(index)];
	}
	/*<EndMethod Name=" Infragistics.CPGridSectionInfo::ResolveBucketArrayForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketRowHeightForIndex(System.Int32)" />*/
	getBucketRowHeightForIndex: function (index) {
		var a = this.resolveBucketArrayForIndex(index);
		return a[this.getBucketIndexForRowIndex(index)];
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetBucketRowHeightForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::SetRowHeight(System.Int32, System.Int32)" />*/
	setRowHeight: function (index, value) {
		var bi = this.getBucketForRowIndex(index);
		var i = this.getBucketIndexForRowIndex(index);
		var a = this.__rowHeightBuckets[bi];
		var oldRawVal = a[i];
		var oldVal = this.getFullRowHeight(index);
		a[i] = value;
		var total = this.__bucketHeights[bi];
		var isNull = isNaN(total);
		if (isNull) {
			total = 0;
		}
		var oldTotal = total;
		total -= oldVal;
		total += this.getFullRowHeight(index);
		this.__bucketHeights[bi] = total;
		return total - oldTotal;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::SetRowHeight(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::EnsureRowHeight(System.Int32)" />*/
	ensureRowHeight: function (index) {
		if (this._rowHeightListener != null && this.__rowHeightBuckets != null && this.getBucketRowHeightForIndex(index) == -1) {
			var newHeight = this._rowHeightListener(index, this._sectionIndex);
			if (newHeight != -1) {
				var oldHeight = this.getRowHeight(index);
				this._totalHeight -= oldHeight;
				this._totalHeight += newHeight;
				this.setRowHeight(index, newHeight);
				return newHeight - oldHeight;
			}
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::EnsureRowHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetFullRowHeight(System.Int32)" />*/
	getFullRowHeight: function (index) {
		var rawHeight = this.getRowHeight(index);
		if (rawHeight == 0) {
			return 0;
		}
		var height = rawHeight + this._rowSeparatorHeight;
		if (this._ignoreLastRowSeparator && this._rowSeparatorHeight > 0) {
			if (index == this._numberOfRows - 1) {
				height -= this._rowSeparatorHeight;
			}
		}
		if (!this._excludeRowSpacingOnTopAndBottom || index != this._numberOfRows - 1) {
			height += this._rowSpacing;
		}
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetFullRowHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowSepHeightForRow(System.Int32)" />*/
	getRowSepHeightForRow: function (index) {
		if (this._ignoreLastRowSeparator && this._rowSeparatorHeight > 0) {
			if (index == this._numberOfRows - 1) {
				return 0;
			}
		}
		return this._rowSeparatorHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowSepHeightForRow(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowIndexForLocation(System.Int32)" />*/
	getRowIndexForLocation: function (y) {
		y = $.ig.truncate(Math.ceil(y));
		if (y >= this._offset && y <= this._offset + this._headerHeight) {
			return -1;
		}
		if (this.__rowHeightBuckets == null) {
			var height = this.getFullRowHeight(0);
			y -= (this._offset + this._headerHeight);
			var i = ($.ig.intDivide(y, height));
			if (i >= this._numberOfRows) {
				i = this._numberOfRows - 1;
			}
			return i;
		} else {
			if (this._numberOfRows > 0) {
				var numberOfBuckets = this.__bucketHeights.length;
				var top = this.getRowTop(0);
				for (var i1 = 0; i1 < numberOfBuckets; i1++) {
					var bh = this.__bucketHeights[i1];
					var bt = top;
					var bb = bt + bh;
					if (y >= bt && y <= bb) {
						var startIndex = i1 * this.__rowHeightsBucketSize;
						var count = this.__rowHeightsBucketSize;
						if (i1 == (numberOfBuckets - 1)) {
							count = this.__sizeOfLastBucket;
						}
						for (var j = 0; j < count; j++) {
							var index = startIndex + j;
							var rowTop = this.getRowTop(index);
							var rowBottom = rowTop + this.getFullRowHeight(index);
							if (y >= rowTop && y <= rowBottom) {
								return index;
							} else if (y < rowTop) {
								return index;
							}
						}
					} else if (y < bt) {
						var index1 = i1 * this.__rowHeightsBucketSize;
						return index1;
					} else {
						top += bh;
					}
				}
			}
		}
		return -2;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::GetRowIndexForLocation(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::AddRow(System.Boolean)" />*/
	addRow: function (shouldLoadCell) {
		var index = this._numberOfRows;
		this._numberOfRows++;
		var height = -1;
		if (shouldLoadCell) {
			height = this._rowHeightListener(index, this._sectionIndex);
		}
		if (this.__sizeOfLastBucket < this.__rowHeightsBucketSize) {
			var indexForLastBucket = this.__rowHeightBuckets.length - 1;
			var a = $.ig.ArrayUtility.prototype.addToArray1(height, this.__rowHeightBuckets[indexForLastBucket]);
			this.__rowHeightBuckets[indexForLastBucket] = a;
			this.__sizeOfLastBucket++;
			var th = this.__bucketHeights[indexForLastBucket];
			th += this.getFullRowHeight(index);
			this.__bucketHeights[indexForLastBucket] = th;
		} else {
			var a1 = new Array(1);
			this.__sizeOfLastBucket = 1;
			a1[0] = height;
			this.__rowHeightBuckets.add(a1);
			this.__bucketHeights = $.ig.ArrayUtility.prototype.addToArray1(this.getFullRowHeight(index), this.__bucketHeights);
		}
		height = this.getFullRowHeight(index);
		this._totalHeight += height;
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::AddRow(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::UpdateRowAtIndex(System.Int32)" />*/
	updateRowAtIndex: function (index) {
		var height = this._rowHeightListener(index, this._sectionIndex);
		var prevHeight = this.getRowHeight(index);
		var diff = height - prevHeight;
		this.setRowHeight(index, height);
		this._totalHeight += diff;
		return diff;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::UpdateRowAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridSectionInfo::MarkRowHeightDirty(System.Int32)" />*/
	markRowHeightDirty: function (index) {
		if (this.__rowHeightBuckets != null) {
			if (this._numberOfRows > index) {
				var diff = this.setRowHeight(index, -1);
				this._totalHeight += diff;
				return diff;
			}
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridSectionInfo::MarkRowHeightDirty(System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridSectionInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridSectionInfo" />*/

/*<BeginType Name="Infragistics.CPGridView" />*/

$.ig.util.defType('CPGridView', 'CPScrollView', {
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_HEADER_SECTION_INDEX()" />*/
	cPGRIDVIEWCELL_HEADER_SECTION_INDEX: function () {
		return -100;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_HEADER_SECTION_INDEX()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_HEADER_ROW_INDEX()" />*/
	cPGRIDVIEWCELL_HEADER_ROW_INDEX: function () {
		return -100;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_HEADER_ROW_INDEX()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()" />*/
	cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX: function () {
		return -200;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()" />*/
	cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX: function () {
		return -300;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()" />*/
	cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX: function () {
		return -300;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridView::CPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()" />*/
	,
	__engine: null,
	__dsh: null,
	__dataSourceSet: false,
	__prevWidth: 0,
	__prevHeight: 0,
	__fixedHeaderPanel: null,
	__headerPanel: null,
	__sectionPanel: null,
	__sectionFooterPanel: null,
	__fixedCellPanel: null,
	__cellPanel: null,
	__cellAdornerPanel: null,
	__adornerPanel: null,
	__cellPanels: null,
	_gridBottomInset: 0,
	__selectedRowPath: null,
	__selectedCellPath: null,
	__selectedCellPaths: null,
	__selectedRowPaths: null,
	__scrollTimer: null,
	_rowHeight: 0,
	_rowSeparatorHeight: 0,
	_rowSpacing: 0,
	_columnSpacing: 0,
	_sectionHeaderHeight: 0,
	_sectionFooterHeight: 0,
	_headerHeight: 0,
	_contentOffsetTop: 0,
	_contentOffsetBottom: 0,
	_contentOffsetLeft: 0,
	_contentOffsetRight: 0,
	_sectionSpacing: 0,
	_rowSeparatorColor: null,
	_columnWidth: null,
	_allowsMultipleSelection: false,
	_selectionType: 0,
	_scrollChangedBlock: null,
	_contentSizeChangedBlock: null,
	_columnWidthChangedBlock: null,
	_needsUpdate: false,
	_sectionHeaderUsesColumnSpacing: false,
	_sectionHeaderShouldIgnoreContentOffset: false,
	_ignoreLastRowSeparator: false,
	_arrowNavigationCausesAction: false,
	_lostFocusBlock: null,
	_neverUseSideSpacing: false,
	__currentFocusCell: null,
	__hasFocusCellRefreshed: false,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this._arrowNavigationCausesAction = false;
		this.__layoutSkipped = false;
		this.__hasFocusLooped = false;
		this.__hasTriedToGiveFocus = false;
		$.ig.CPScrollView.prototype.init.call(this);
		this.isFocusable(true);
	},
	init1: function (initNumber, identifier) {
		$.ig.CPGridView.prototype.init.call(this, 0);
		$.ig.UIUtility.prototype.setAccessibilityName2(this.__cellPanel, identifier, "_cellPanel");
		$.ig.UIUtility.prototype.setAccessibilityName1(this, identifier);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::Setup()" />*/
	setup: function () {
		$.ig.CPScrollView.prototype.setup.call(this);
		this._updateDataOnSizeChanged = true;
		this.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(0));
		this._allowsMultipleSelection = false;
		this.__selectedRowPaths = new $.ig.Array();
		this.__selectedCellPaths = new $.ig.Array();
		this.__cellPanels = new $.ig.Array();
		this.__cellPanel = this.createCellPanel();
		this.__fixedCellPanel = this.createCellPanel();
		this.__cellAdornerPanel = this.createCellPanel();
		this.__sectionFooterPanel = this.createCellPanel();
		this.__sectionPanel = this.createCellPanel();
		this.__headerPanel = this.createCellPanel();
		this.__fixedHeaderPanel = this.createCellPanel();
		this.__adornerPanel = this.createCellPanel();
		var guide = $.ig.ThemeManager.prototype.theme().resolveItemGuide($.ig.CPTheme.prototype.itemGuideStyleLarge);
		this._rowHeight = guide.height();
		this._rowSeparatorHeight = $.ig.ThemeManager.prototype.theme().borderWidth1();
		this._rowSpacing = 0;
		this._columnSpacing = 0;
		this._sectionHeaderHeight = guide.height();
		this._sectionFooterHeight = 0;
		this._headerHeight = guide.height();
		this._columnWidth = $.ig.CPColumnWidth.prototype.createWithPercentWidth1(1, 0);
		this.pinchGestureEnabled(false);
		this._rowSeparatorColor = $.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native();
		this.__engine = new $.ig.CPGridViewLayoutEngine();
		this._selectionType = $.ig.CPGridViewSelectionType.prototype.none;
		this.clipToBounds(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::Setup()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPGridView::CellAdornerPanel()" />*/
	cellAdornerPanel: function () {
		return this.__cellAdornerPanel;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPGridView::CellAdornerPanel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetSectionHeadersSupportColumns(System.Boolean)" />*/
	setSectionHeadersSupportColumns: function (val) {
		this.__engine._sectionHeadersSupportsColumns = val;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetSectionHeadersSupportColumns(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellsPanel Infragistics.CPGridView::GetPanel(System.Int32)" />*/
	getPanel: function (index) {
		return this.__cellPanels[index];
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellsPanel Infragistics.CPGridView::GetPanel(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellsPanel Infragistics.CPGridView::CreateCellPanel()" />*/
	createCellPanel: function () {
		var panel = new $.ig.CPGridViewCellsPanel();
		this.__cellPanels.add(panel);
		this.addSubview(panel);
		return panel;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellsPanel Infragistics.CPGridView::CreateCellPanel()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::NeverUseTopAndBottomSpacing()" />*/
	neverUseTopAndBottomSpacing: function (value) {
		if (arguments.length === 1) {
			this.__engine._excludeRowSpacingOnTopAndBottom = value;
			return value;
		} else {
			return this.__engine._excludeRowSpacingOnTopAndBottom;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::NeverUseTopAndBottomSpacing()" />*/
	,
	_updateDataOnSizeChanged: false,
	_needsUpdateOnNextSizeChanged: false,
	_isInSizeChanged: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPScrollView.prototype.sizeChanged.call(this, w, h);
		this._isInSizeChanged = true;
		if (this.__dsh != null) {
			this.__dsh.onSizeChanged(this, w, h);
		}
		if (this._needsUpdateOnNextSizeChanged || (this._updateDataOnSizeChanged && (w != this.__prevWidth || h != this.__prevHeight))) {
			this._needsUpdateOnNextSizeChanged = false;
			this.__prevWidth = w;
			this.__prevHeight = h;
			this.updateData(false);
		} else {
			var cw = this._actualContentWidth;
			if (w != this.__prevWidth && this.__engine._hasStarWidths) {
				this.__prevWidth = w;
				cw = this.__engine.ensureColumnWidths(this);
			}
			if (h > 0) {
				this.updateContentSize(cw, this._actualContentHeight);
				this.forceRender();
			}
		}
		this._isInSizeChanged = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewDatasourceHelper Infragistics.CPGridView::GetDataSource()" />*/
	getDataSource: function () {
		return this.__dsh;
	}
	/*<EndMethod Name="Infragistics.CPGridViewDatasourceHelper Infragistics.CPGridView::GetDataSource()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::CanFocusCycle()" />*/
	canFocusCycle: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::CanFocusCycle()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetDataSource(Infragistics.CPGridViewDatasourceHelper)" />*/
	setDataSource: function (dsh) {
		if (this.__dsh != dsh) {
			this.__dsh = dsh;
			if (this.__dsh != null && this.currentWidth() > 0 && this.currentHeight() > 0) {
				this.__dsh.onSizeChanged(this, this.currentWidth(), this.currentHeight());
			}
			if (!this.__dataSourceSet && this.currentWidth() != 0 && this.currentHeight() != 0 && this.getParent() != null) {
				this.reloadDataAndResetScrollPosition(true, true);
			}
			this.__dataSourceSet = true;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetDataSource(Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopAnimating()" />*/
	stopAnimating: function () {
		this.engine().stopAnimating(this, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopAnimating()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ReloadData()" />*/
	reloadData: function () {
		this.reloadDataAndResetScrollPosition(true, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ReloadData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::UpdateData(System.Boolean)" />*/
	updateData: function (layoutChanged) {
		this.reloadDataAndResetScrollPosition(false, layoutChanged);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::UpdateData(System.Boolean)" />*/
	,
	__layoutSkipped: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ReloadDataAndResetScrollPosition(System.Boolean, System.Boolean)" />*/
	reloadDataAndResetScrollPosition: function (resetScrollPosition, layoutChanged) {
		var layoutChangeDelegateValue = this.__engine._layoutChangeDelegate;
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutStarting();
		}
		if (this.invalidateBounds(layoutChanged)) {
			this.__hasFocusCellRefreshed = true;
			if (this.__scrollToBottomNeeded) {
				this.__scrollToBottomNeeded = false;
				this.scrollToBottom(false);
			} else if (resetScrollPosition) {
				this.scrollTo1(0, 0, 0, null);
			} else {
				this.forceRender();
			}
		}
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutEnded();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ReloadDataAndResetScrollPosition(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ForceRender()" />*/
	forceRender: function () {
		this.__engine.render(this, false);
		this.forceMeasureAndLayout();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ForceRender()" />*/
	,
	__needsFullLayoutAfterAnimating: false,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::InvalidateBounds(System.Boolean)" />*/
	invalidateBounds: function (layoutChanged) {
		if (this.currentWidth() == 0 || this.currentHeight() == 0) {
			this.__layoutSkipped = layoutChanged;
			return false;
		}
		if (this.__layoutSkipped) {
			this.__layoutSkipped = false;
			layoutChanged = true;
		}
		if (!this.__engine.isAnimating()) {
			this.__needsFullLayoutAfterAnimating = false;
			this.__engine.invalidateBounds(this, layoutChanged);
			return true;
		} else if (!this.__needsFullLayoutAfterAnimating) {
			this.__needsFullLayoutAfterAnimating = layoutChanged;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::InvalidateBounds(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::NeedsFullLayoutAfterAnimating()" />*/
	needsFullLayoutAfterAnimating: function () {
		return this.__needsFullLayoutAfterAnimating;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::NeedsFullLayoutAfterAnimating()" />*/
	,
	__cellGenerators: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::RegisterCellGenerator(System.String, Infragistics.CreateNewCellBlock)" />*/
	registerCellGenerator: function (key, block) {
		if (this.__cellGenerators == null) {
			this.__cellGenerators = new $.ig.Dictionary(0);
		}
		this.__cellGenerators.item(key, block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::RegisterCellGenerator(System.String, Infragistics.CreateNewCellBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridView::DequeueReusableCellWithIdentifier(System.String)" />*/
	dequeueReusableCellWithIdentifier: function (identifier) {
		var cell = this.__engine.dequeueReusableCellWithIdentifier(identifier);
		if (cell == null && this.__cellGenerators != null && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__cellGenerators, identifier)) {
			var block = this.__cellGenerators.item(identifier);
			cell = block(identifier);
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridView::DequeueReusableCellWithIdentifier(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridView::CellAtPath(Infragistics.CPCellPath)" />*/
	cellAtPath: function (path) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__engine._visibleCellsByPath, path._identifier)) {
			return this.__engine._visibleCellsByPath.item(path._identifier);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridView::CellAtPath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollCellIntoView(Infragistics.CPCellPath, Infragistics.ObjectBlock)" />*/
	scrollCellIntoView: function (path, finished) {
		this.scrollCellIntoView1(path, true, finished);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollCellIntoView(Infragistics.CPCellPath, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollCellIntoView(Infragistics.CPCellPath, System.Boolean, Infragistics.ObjectBlock)" />*/
	scrollCellIntoView1: function (path, animate, finished) {
		var scrollToX = -1, scrollToY = -1;
		if (path._columnIndex >= 0 && path._columnIndex < this.__engine._columns.length) {
			var fixedLeftWidth = 0;
			var fixedRightWidth = 0;
			for (var i = 0; i < this.__engine._fixedLeftColumns.length; i++) {
				var info = this.__engine._fixedLeftColumns[i];
				fixedLeftWidth += info._actualWidth + info._spacing;
			}
			for (var i1 = 0; i1 < this.__engine._fixedRightColumns.length; i1++) {
				var info1 = this.__engine._fixedRightColumns[i1];
				fixedRightWidth += info1._actualWidth + info1._spacing;
			}
			var column = this.__engine._columns[path._columnIndex];
			var x = column._offset;
			var w = column._actualWidth;
			var gw = this.currentWidth() - fixedRightWidth - fixedLeftWidth;
			var gx = this.getContentOffsetX() + fixedLeftWidth;
			var isRight = (x + w) > (gx + gw);
			var isLeft = x < gx;
			if (isLeft) {
				scrollToX = x - fixedLeftWidth;
			} else if (isRight) {
				scrollToX = (x + w) - gw - fixedLeftWidth;
			}
		}
		if (path._sectionIndex < this.__engine._sections.length) {
			var section = this.__engine._sections[path._sectionIndex];
			if (path._rowIndex < section._numberOfRows) {
				var y = section.getRowTop(path._rowIndex);
				var h = section.getRowHeight(path._rowIndex);
				var gy = this.getContentOffsetY();
				var gh = this.currentHeight() - section._footerHeight;
				var isAbove = y < gy;
				var isBelow = (y + h) > (gy + gh);
				if (isAbove) {
					scrollToY = y - (section._headerHeight + section._rowSpacing);
				} else if (isBelow) {
					scrollToY = (y + h) - gh;
				}
			}
		}
		var duration = 0;
		if (animate) {
			duration = $.ig.ThemeManager.prototype.theme().animationDuration();
		}
		var shouldScroll = scrollToX != -1 || scrollToY != -1;
		if (shouldScroll) {
			this.scrollTo1((scrollToX == -1) ? this.getContentOffsetX() : scrollToX, (scrollToY == -1) ? this.getContentOffsetY() : scrollToY, duration, function () {
				if (finished != null) {
					finished(path);
				}
			});
		} else {
			if (finished != null) {
				finished(path);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollCellIntoView(Infragistics.CPCellPath, System.Boolean, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::OnScrollChanged(System.Int32, System.Int32)" />*/
	onScrollChanged: function (x, y) {
		this.forceRender();
		if (this._scrollChangedBlock != null) {
			this._scrollChangedBlock(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::OnScrollChanged(System.Int32, System.Int32)" />*/
	,
	_actualContentWidth: 0,
	_actualContentHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::UpdateContentSize(System.Int32, System.Int32)" />*/
	updateContentSize: function (width, height) {
		this.setContentSize(width, height - this._gridBottomInset);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::UpdateContentSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetContentSize(System.Int32, System.Int32)" />*/
	setContentSize: function (width, height) {
		height += this._gridBottomInset;
		this._actualContentWidth = width;
		this._actualContentHeight = height;
		if (this.currentHeight() > height) {
			height = this.currentHeight();
		}
		if (this.currentWidth() > width) {
			width = this.currentWidth();
		}
		$.ig.CPScrollView.prototype.setContentSize.call(this, width, height);
		if (this._contentSizeChangedBlock != null) {
			this._contentSizeChangedBlock(width, height);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetContentSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::ScrollTo(System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	scrollTo1: function (x, y, duration, finishedBlock) {
		var $self = this;
		var fx = this.getContentOffsetX();
		var fy = this.getContentOffsetY();
		if (this.__scrollTimer != null && this.__scrollTimer.isActive()) {
			this.__scrollTimer.stop();
			this.__scrollTimer = null;
			this.__isScrollingToBottom = false;
		}
		if (x != fx || y != fy) {
			if (duration > 0) {
				this.__scrollTimer = new $.ig.CPTimer();
				this.__scrollTimer.start(duration, function (percent) {
					$self.scrollTick(fx, fy, x, y, percent, finishedBlock);
				});
			} else {
				this.scrollTo(x, y);
				if (finishedBlock != null) {
					finishedBlock();
				}
			}
			return true;
		}
		this.forceRender();
		if (finishedBlock != null) {
			finishedBlock();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::ScrollTo(System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	scrollTick: function (fx, fy, tx, ty, p, finishBlock) {
		this.scrollTo($.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fx, tx, p)), $.ig.truncate($.ig.CPMathUtility.prototype.transitionDouble(fy, ty, p)));
		if (p == 1) {
			if (this.__scrollTimer != null) {
				this.__scrollTimer.stop();
				this.__scrollTimer = null;
			}
			if (finishBlock != null) {
				finishBlock();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollTick(System.Int32, System.Int32, System.Int32, System.Int32, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	_supportsAutoScrollToBottom: false,
	__scrollToBottomNeeded: false,
	__isScrollingToBottom: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollToBottom(System.Boolean)" />*/
	scrollToBottom: function (animated) {
		this.scrollToBottom1(animated, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollToBottom(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollToBottom(System.Boolean, Infragistics.ExecutionBlock)" />*/
	scrollToBottom1: function (animated, finished) {
		var $self = this;
		if (this.currentHeight() == 0 || this.__dsh == null) {
			this.__scrollToBottomNeeded = true;
			return;
		}
		this.__isScrollingToBottom = true;
		var duration = (animated) ? $.ig.ThemeManager.prototype.theme().animationDuration() : 0;
		this.scrollTo1(0, this.getContentHeight() - this.currentHeight(), duration, function () {
			$self.finishedScrollingToBottom();
			if (finished != null) {
				finished();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollToBottom(System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::FinishedScrollingToBottom()" />*/
	finishedScrollingToBottom: function () {
		this.__isScrollingToBottom = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::FinishedScrollingToBottom()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::IsCurrentlyScrolledToBottom()" />*/
	isCurrentlyScrolledToBottom: function () {
		if (this.__isScrollingToBottom) {
			return true;
		} else {
			var bottom = this.getContentHeight() - this.currentHeight();
			var currentTop = this.getContentOffsetY();
			if (bottom == currentTop) {
				return true;
			} else if (this.__engine._sections.length > 0) {
				var lastSection = this.__engine._sections[this.__engine._sections.length - 1];
				var lastRowHeight = lastSection.getFullRowHeight(lastSection._numberOfRows - 1);
				var diff = bottom - currentTop;
				return diff < lastRowHeight;
			} else {
				return false;
			}
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::IsCurrentlyScrolledToBottom()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::IsCurrentlyScrolledToTop()" />*/
	isCurrentlyScrolledToTop: function () {
		return this.getContentOffsetY() == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::IsCurrentlyScrolledToTop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::DeselectAll()" />*/
	deselectAll: function () {
		if (this.__selectedRowPath != null) {
			this.findVisibleRowAndSetSelection(this.__selectedRowPath, false, false);
			this.__selectedRowPath = null;
		}
		if (this.__selectedRowPaths.length > 0) {
			var rowCount = this.__selectedRowPaths.length;
			for (var i = 0; i < rowCount; i++) {
				var path = this.__selectedRowPaths[i];
				this.findVisibleRowAndSetSelection(path, false, false);
			}
			this.__selectedRowPaths.clear();
		}
		if (this.__selectedCellPath != null) {
			this.findVisibleCellAndSetSelection(this.__selectedCellPath, false, false);
			this.__selectedCellPath = null;
		}
		if (this.__selectedCellPaths.length > 0) {
			var cellCount = this.__selectedCellPaths.length;
			for (var i1 = 0; i1 < cellCount; i1++) {
				var path1 = this.__selectedCellPaths[i1];
				this.findVisibleCellAndSetSelection(path1, false, false);
			}
			this.__selectedCellPaths.clear();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::DeselectAll()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::FindVisibleRowAndSetSelection(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	findVisibleRowAndSetSelection: function (path, selected, animate) {
		for (var i = 0; i < this.__engine._columns.length; i++) {
			var currentPath = new $.ig.CPCellPath(1, path._rowIndex, path._sectionIndex, i);
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__engine._visibleCellsByPath, currentPath._identifier)) {
				var cell = this.__engine._visibleCellsByPath.item(currentPath._identifier);
				cell.setSelected(selected, animate);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::FindVisibleRowAndSetSelection(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::FindVisibleCellAndSetSelection(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	findVisibleCellAndSetSelection: function (path, selected, animate) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__engine._visibleCellsByPath, path._identifier)) {
			var cell = this.__engine._visibleCellsByPath.item(path._identifier);
			cell.setSelected(selected, animate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::FindVisibleCellAndSetSelection(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::IsCellSelected(Infragistics.CPCellPath)" />*/
	isCellSelected: function (path) {
		if (this._allowsMultipleSelection) {
			var count = this.__selectedCellPaths.length;
			for (var i = 0; i < count; i++) {
				var currentlySelected = this.__selectedCellPaths[i];
				if (currentlySelected.isCellEqual(path)) {
					return true;
				}
			}
			return false;
		} else {
			if (this.__selectedCellPath == null) {
				return false;
			}
			return this.__selectedCellPath.isCellEqual(path);
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::IsCellSelected(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::IsRowSelected(Infragistics.CPRowPath)" />*/
	isRowSelected: function (path) {
		if (this._allowsMultipleSelection) {
			var count = this.__selectedRowPaths.length;
			for (var i = 0; i < count; i++) {
				var currentlySelected = this.__selectedRowPaths[i];
				if (currentlySelected.isRowEqual(path)) {
					return true;
				}
			}
			return false;
		} else {
			if (this.__selectedRowPath == null) {
				return false;
			}
			return this.__selectedRowPath.isRowEqual(path);
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::IsRowSelected(Infragistics.CPRowPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::DeselectRow(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	deselectRow: function (path, animate, silent) {
		if (!silent) {
		}
		this.findVisibleRowAndSetSelection(path, false, animate);
		if (path != null) {
			if (this._allowsMultipleSelection) {
				this.__selectedRowPaths.add(path);
			} else {
				this.__selectedRowPath = null;
			}
		}
		if (!silent) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::DeselectRow(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SelectRow(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	selectRow: function (path, animate, silent) {
		if (!silent) {
		}
		this.findVisibleRowAndSetSelection(path, true, animate);
		if (path != null) {
			if (this._allowsMultipleSelection) {
				this.__selectedRowPaths.add(path);
			} else {
				this.__selectedRowPath = path;
			}
		}
		if (!silent) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SelectRow(Infragistics.CPRowPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::DeselectCell(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	deselectCell: function (path, animate, silent) {
		if (!silent) {
		}
		this.findVisibleCellAndSetSelection(path, false, animate);
		if (path != null) {
			if (this._allowsMultipleSelection) {
				this.__selectedCellPaths.removeItem(path);
			} else {
				this.__selectedCellPath = null;
			}
		}
		if (!silent) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::DeselectCell(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SelectCell(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	selectCell: function (path, animate, silent) {
		if (!silent) {
		}
		this.findVisibleCellAndSetSelection(path, true, animate);
		if (path != null) {
			if (this._allowsMultipleSelection) {
				this.__selectedCellPaths.add(path);
			} else {
				this.__selectedCellPath = path.copy();
			}
		}
		if (!silent) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SelectCell(Infragistics.CPCellPath, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ToggleSelectionForPath(Infragistics.CPCellPath)" />*/
	toggleSelectionForPath: function (path) {
		if (this._selectionType == $.ig.CPGridViewSelectionType.prototype.row) {
			var rowPath = new $.ig.CPRowPath(path._rowIndex, path._sectionIndex);
			if (!this._allowsMultipleSelection) {
				if (this.__selectedRowPath != null) {
					if (this.isRowSelected(rowPath)) {
						return;
					}
					this.deselectRow(this.__selectedRowPath, true, false);
				}
				this.selectRow(rowPath, true, false);
			} else {
				if (this.isRowSelected(rowPath)) {
					this.deselectRow(rowPath, true, false);
					return;
				}
				this.selectRow(rowPath, true, false);
			}
		} else if (this._selectionType == $.ig.CPGridViewSelectionType.prototype.cell) {
			if (!this._allowsMultipleSelection) {
				if (this.__selectedCellPath != null) {
					if (this.isCellSelected(path)) {
						return;
					}
					this.deselectCell(this.__selectedCellPath, true, false);
				}
				this.selectCell(path, true, false);
			} else {
				if (this.isCellSelected(path)) {
					this.deselectCell(path, true, false);
					return;
				}
				this.selectCell(path, true, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ToggleSelectionForPath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridView::PathForSelectedCell()" />*/
	pathForSelectedCell: function () {
		if (!this._allowsMultipleSelection) {
			return this.__selectedCellPath;
		} else {
			if (this.__selectedCellPaths.length == 0) {
				return null;
			} else {
				var topMostPath = this.__selectedCellPaths[0];
				var count = this.__selectedCellPaths.length;
				for (var i = 0; i < count; i++) {
					var path = this.__selectedCellPaths[i];
					if (path._sectionIndex < topMostPath._sectionIndex) {
						topMostPath = path;
					} else if (path._sectionIndex == topMostPath._sectionIndex) {
						if (path._sectionIndex < topMostPath._sectionIndex) {
							topMostPath = path;
						} else if (path._rowIndex == topMostPath._rowIndex) {
							if (path._columnIndex < topMostPath._columnIndex) {
								topMostPath = path;
							}
						}
					}
				}
				return topMostPath;
			}
		}
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridView::PathForSelectedCell()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRowPath Infragistics.CPGridView::PathForSelectedRow()" />*/
	pathForSelectedRow: function () {
		if (!this._allowsMultipleSelection) {
			return this.__selectedRowPath;
		} else {
			if (this.__selectedRowPaths.length == 0) {
				return null;
			} else {
				var topMostPath = this.__selectedRowPaths[0];
				var count = this.__selectedCellPaths.length;
				for (var i = 0; i < count; i++) {
					var path = this.__selectedRowPaths[i];
					if (path._sectionIndex < topMostPath._sectionIndex) {
						topMostPath = path;
					} else if (path._sectionIndex == topMostPath._sectionIndex) {
						if (path._rowIndex < topMostPath._rowIndex) {
							topMostPath = path;
						}
					}
				}
				return topMostPath;
			}
		}
	}
	/*<EndMethod Name="Infragistics.CPRowPath Infragistics.CPGridView::PathForSelectedRow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ExpandCollapseSection(System.Int32, System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	expandCollapseSection: function (section, expand, adjustScrollPositions, duration, finished) {
		this.stopAnimating();
		var dsh = this.getDataSource();
		var rowCount = dsh.getNumberOfRowsInSection(section);
		var columnCount = dsh.getNumberOfColumnsInGrid();
		var paths = new $.ig.Array();
		for (var r = 0; r < rowCount; r++) {
			paths.add(new $.ig.CPRowPath(r, section));
		}
		if (this._sectionFooterHeight > 0) {
			paths.add(new $.ig.CPRowPath($.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX(), section));
		}
		if (expand) {
			var animator = new $.ig.CPGridViewCellSectionExpansionAnimator();
			animator.duration(duration);
			animator.dontAjustScrollPositions(!adjustScrollPositions);
			animator._completionBlock = finished;
			this.insertRows(paths, animator);
		} else {
			var animator1 = new $.ig.CPGridViewCellSectionCollapseAnimator(section);
			animator1.duration(duration);
			animator1.dontAjustScrollPositions(!adjustScrollPositions);
			animator1._completionBlock = finished;
			this.removeRows(paths, animator1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ExpandCollapseSection(System.Int32, System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::CollapseAllSectionsThatNeedCollapsing(Infragistics.ExecutionBlock)" />*/
	collapseAllSectionsThatNeedCollapsing: function (complete) {
		this.stopAnimating();
		var paths = new $.ig.Array();
		var insertPaths = new $.ig.Array();
		var sectionCount = this.__dsh.getNumberOfSectionsInGrid();
		for (var s = 0; s < sectionCount; s++) {
			var rowCount = this.__dsh.getNumberOfRowsInSection(s);
			var si = this.engine()._sections[s];
			if (this.__dsh.isSectionCollapsed(s) && si._numberOfRows > 0) {
				for (var r = 0; r < rowCount; r++) {
					paths.add(new $.ig.CPRowPath(r, s));
				}
			} else if (!this.__dsh.isSectionCollapsed(s) && si._numberOfRows == 0) {
				for (var r1 = 0; r1 < rowCount; r1++) {
					insertPaths.add(new $.ig.CPRowPath(r1, s));
				}
			}
		}
		if (paths.length > 0) {
			var animator = new $.ig.CPGridViewCellSectionCollapseAnimator(-1);
			animator._completionBlock = complete;
			this.removeRows(paths, animator);
		} else if (insertPaths.length > 0) {
			var animator1 = new $.ig.CPGridViewCellSectionExpansionAnimator();
			animator1._completionBlock = complete;
			this.insertRows(insertPaths, animator1);
		} else {
			this.updateData(false);
			if (complete != null) {
				complete();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::CollapseAllSectionsThatNeedCollapsing(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ExpandAllSectionsThatNeedExpanding(Infragistics.ExecutionBlock, System.Int32)" />*/
	expandAllSectionsThatNeedExpanding: function (complete, scrollToSection) {
		this.stopAnimating();
		var paths = new $.ig.Array();
		var removePaths = new $.ig.Array();
		var sectionCount = this.__dsh.getNumberOfSectionsInGrid();
		for (var s = 0; s < sectionCount; s++) {
			var rowCount = this.__dsh.getNumberOfRowsInSection(s);
			var si = this.engine()._sections[s];
			if (!this.__dsh.isSectionCollapsed(s) && si._numberOfRows == 0) {
				for (var r = 0; r < rowCount; r++) {
					paths.add(new $.ig.CPRowPath(r, s));
				}
			} else if (this.__dsh.isSectionCollapsed(s) && si._numberOfRows > 0) {
				for (var r1 = 0; r1 < rowCount; r1++) {
					removePaths.add(new $.ig.CPRowPath(r1, s));
				}
			}
		}
		if (paths.length > 0) {
			var animator = new $.ig.CPGridViewCellSectionExpansionAnimator();
			animator.scrollToSection(scrollToSection);
			animator._completionBlock = complete;
			this.insertRows(paths, animator);
		} else if (removePaths.length > 0) {
			var animator1 = new $.ig.CPGridViewCellSectionCollapseAnimator(-1);
			animator1._completionBlock = complete;
			this.removeRows(removePaths, animator1);
		} else {
			this.updateData(false);
			if (complete != null) {
				complete();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ExpandAllSectionsThatNeedExpanding(Infragistics.ExecutionBlock, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridView::PathsForSelectedCells()" />*/
	pathsForSelectedCells: function () {
		if (this._allowsMultipleSelection) {
			return this.__selectedCellPaths;
		} else {
			var paths = new $.ig.Array();
			paths.add(this.__selectedCellPath);
			return paths;
		}
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridView::PathsForSelectedCells()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridView::PathsForSelectedRows()" />*/
	pathsForSelectedRows: function () {
		if (this._allowsMultipleSelection) {
			return this.__selectedRowPaths;
		} else {
			var paths = new $.ig.Array();
			paths.add(this.__selectedRowPath);
			return paths;
		}
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridView::PathsForSelectedRows()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::DeselectCellAtPath(Infragistics.CPCellPath, System.Boolean)" />*/
	deselectCellAtPath: function (path, animated) {
		this.deselectCell(path, animated, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::DeselectCellAtPath(Infragistics.CPCellPath, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::DeselectRowAtPath(Infragistics.CPRowPath, System.Boolean)" />*/
	deselectRowAtPath: function (path, animated) {
		this.deselectRow(path, animated, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::DeselectRowAtPath(Infragistics.CPRowPath, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SelectCellAtPath(Infragistics.CPCellPath, System.Boolean)" />*/
	selectCellAtPath: function (path, animated) {
		if (!this._allowsMultipleSelection) {
			this.deselectAll();
		}
		this.deselectCell(path, false, false);
		this.selectCell(path, animated, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SelectCellAtPath(Infragistics.CPCellPath, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SelectRowAtPath(Infragistics.CPRowPath, System.Boolean)" />*/
	selectRowAtPath: function (path, animated) {
		if (!this._allowsMultipleSelection) {
			this.deselectAll();
		}
		path = new $.ig.CPRowPath(path._rowIndex, path._sectionIndex);
		this.deselectRow(path, false, true);
		this.selectRow(path, animated, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SelectRowAtPath(Infragistics.CPRowPath, System.Boolean)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridView::VisibleCellsPaths()" />*/
	visibleCellsPaths: function () {
		return this.__engine.__visibleCells;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridView::VisibleCellsPaths()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::RefreshVisibleCells(System.Boolean)" />*/
	refreshVisibleCells: function (hardRefresh) {
		var dsh = this.getDataSource();
		for (var i = 0; i < this.visibleCellsPaths().length; i++) {
			var path = this.visibleCellsPaths()[i];
			var cell = this.cellAtPath(path);
			if (cell != null) {
				if (hardRefresh) {
					cell.data(dsh.resolveDataObjectForRow(path));
				} else {
					cell.data(cell.data());
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::RefreshVisibleCells(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::InsertCell(Infragistics.CPCellPath, Infragistics.CPGridViewCellAnimator)" />*/
	insertCell: function (path, animator) {
		var list = new $.ig.Array();
		list.add(path);
		this.insertCells(list, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::InsertCell(Infragistics.CPCellPath, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::InsertCells(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	insertCells: function (paths, animator) {
		this.__engine.insertCells(this, paths, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::InsertCells(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ToggleRowExpansion(Infragistics.CPRowPath, System.Int32, System.Boolean)" />*/
	toggleRowExpansion: function (parentRowPath, childrenCount, isExpanded) {
		var parentRow = parentRowPath._rowIndex;
		var parentSection = parentRowPath._sectionIndex;
		var paths = new $.ig.Array();
		for (var i = 0; i < childrenCount; i++) {
			paths.add(new $.ig.CPRowPath(parentRow + i + 1, parentSection));
		}
		if (!isExpanded) {
			this.removeRows(paths, new $.ig.CPGridRowCollapseAnimator(parentRow));
		} else {
			this.insertRows(paths, new $.ig.CPGridRowExpansionAnimator(parentRow));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ToggleRowExpansion(Infragistics.CPRowPath, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::InsertRows(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	insertRows: function (paths, animator) {
		this.__engine.insertRows(this, paths, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::InsertRows(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::RemoveCell(Infragistics.CPCellPath, Infragistics.CPGridViewCellAnimator)" />*/
	removeCell: function (path, animator) {
		var list = new $.ig.Array();
		list.add(path);
		this.removeCells(list, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::RemoveCell(Infragistics.CPCellPath, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::RemoveCells(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	removeCells: function (paths, animator) {
		this.__engine.removeCells(this, paths, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::RemoveCells(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::RemoveRows(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	removeRows: function (paths, animator) {
		this.__engine.removeRows(this, paths, animator);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::RemoveRows(Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridView::ResolveActualColumnWith(System.Int32, Infragistics.CPGridViewFixedColumnDirection)" />*/
	resolveActualColumnWith: function (column, direction) {
		var width = 0;
		if (direction == $.ig.CPGridViewFixedColumnDirection.prototype.none && column < this.__engine._columns.length) {
			width = (this.__engine._columns[column])._actualWidth;
		} else if (direction == $.ig.CPGridViewFixedColumnDirection.prototype.left && column < this.__engine._fixedLeftColumns.length) {
			width = (this.__engine._fixedLeftColumns[column])._actualWidth;
		} else if (direction == $.ig.CPGridViewFixedColumnDirection.prototype.right && column < this.__engine._fixedRightColumns.length) {
			width = (this.__engine._fixedRightColumns[column])._actualWidth;
		}
		return width;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridView::ResolveActualColumnWith(System.Int32, Infragistics.CPGridViewFixedColumnDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ResizeColumnAtIndex(System.Int32)" />*/
	resizeColumnAtIndex: function (columnIndex) {
		if (this.__engine._resizeColumnIndex != -1 && columnIndex == -1) {
			if (this._columnWidthChangedBlock != null) {
				this._columnWidthChangedBlock(this.__engine._resizeColumnIndex, this.__engine.getColumnWidth(this.__dsh, this.__engine._resizeColumnIndex));
			}
		}
		this.__engine._resizeColumnIndex = columnIndex;
		if (columnIndex == -1) {
			this.__adornerPanel.isHidden(true);
		} else {
			this.forceRender();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ResizeColumnAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridView::CellAtPoint(System.Int32, System.Int32)" />*/
	cellAtPoint: function (x, y) {
		return this.__engine.cellAtPoint(x, y);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridView::CellAtPoint(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridView::GetXForCell(System.Int32)" />*/
	getXForCell: function (col) {
		return this.__engine.getXForCell(col);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridView::GetXForCell(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridView::GetYForCell(System.Int32, System.Int32)" />*/
	getYForCell: function (row, section) {
		return this.__engine.getYForCell(row, section);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridView::GetYForCell(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveRow(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	moveRow: function (section, from, to, updatedDSH) {
		var proposedTo = updatedDSH ? this.__dsh.moveItem(new $.ig.CPCellPath(1, from, section, 0), new $.ig.CPCellPath(1, to, section, 0)) : new $.ig.CPCellPath(1, to, section, 0);
		if (proposedTo._rowIndex != from) {
			this.__engine.moveRow(this, section, from, section, proposedTo._rowIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveRow(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveRow(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	moveRow1: function (fromSection, from, toSection, to, updatedDSH) {
		var proposedTo = updatedDSH ? this.__dsh.moveItem(new $.ig.CPCellPath(1, from, fromSection, 0), new $.ig.CPCellPath(1, to, toSection, 0)) : new $.ig.CPCellPath(1, to, toSection, 0);
		if (proposedTo._rowIndex != from || proposedTo._sectionIndex != fromSection) {
			this.__engine.moveRow(this, fromSection, from, proposedTo._sectionIndex, proposedTo._rowIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveRow(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveColumn(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	moveColumn: function (section, from, to, updatedDSH) {
		var proposedTo = updatedDSH ? this.__dsh.moveItem(new $.ig.CPCellPath(1, 0, section, from), new $.ig.CPCellPath(1, 0, section, to)) : new $.ig.CPCellPath(1, 0, section, to);
		if (proposedTo._columnIndex != from) {
			this.__engine.moveColumn(this, section, from, proposedTo._columnIndex);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveColumn(System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveSection(System.Int32, System.Int32, System.Boolean)" />*/
	moveSection: function (from, to, updateDSH) {
		var proposedTo = (updateDSH) ? this.__dsh.moveSection(from, to) : to;
		if (proposedTo != from) {
			this.__engine.moveSection(this, from, to);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveSection(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::AddAdorner(Infragistics.CPViewBase)" />*/
	addAdorner: function (view) {
		this.__adornerPanel.isHidden(false);
		this.__adornerPanel.addSubview(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::AddAdorner(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::Unload()" />*/
	unload: function () {
		$.ig.CPScrollView.prototype.unload.call(this);
		if (this.__scrollTimer != null) {
			this.__scrollTimer.stop();
			this.__scrollTimer = null;
		}
		this.__engine.unload();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::Unload()" />*/
	,
	__hasFocusLooped: false,
	__hasTriedToGiveFocus: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::EnsureFocusCellPath()" />*/
	ensureFocusCellPath: function () {
		if (this.__currentFocusCellPath == null) {
			this.__currentFocusCellPath = new $.ig.CPCellPath(1, 0, 0, 0);
		}
		if (this.__currentFocusCell != null && !this.__hasFocusCellRefreshed) {
			this.__currentFocusCellPath = this.__currentFocusCell._path.copy();
		}
		this.__initialFocusCellPath = this.__currentFocusCellPath;
		this.__hasFocusLooped = false;
		this.__hasTriedToGiveFocus = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::EnsureFocusCellPath()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::GetNextAvailableColumn(System.Int32)" />*/
	getNextAvailableColumn: function (startingColumn) {
		for (var i = startingColumn; i >= 0; i--) {
			var dataAtCell = this.__dsh.resolveDataObjectForRow(new $.ig.CPCellPath(1, this.__currentFocusCellPath._rowIndex, this.__currentFocusCellPath._sectionIndex, i));
			if (dataAtCell != null) {
				this.__currentFocusCellPath._columnIndex = i;
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::GetNextAvailableColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellDown()" />*/
	moveFocusCellDown: function () {
		var $self = this;
		if (this.__currentFocusCell != null || this.__hasTriedToGiveFocus) {
			var currentSection = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
			if (this.__currentFocusCellPath._rowIndex < currentSection._numberOfRows - 1) {
				if (this.__currentFocusCellPath._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
					this.__currentFocusCellPath._rowIndex = 0;
				} else {
					this.__currentFocusCellPath._rowIndex++;
				}
				this.getNextAvailableColumn(this.__currentFocusCellPath._columnIndex);
			} else if (this.__currentFocusCellPath._sectionIndex < this.__engine._sections.length - 1) {
				this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
				this.__currentFocusCellPath._columnIndex = 0;
				this.__currentFocusCellPath._sectionIndex++;
			} else if (this.canFocusCycle() && !this.__hasFocusLooped) {
				this.__hasFocusLooped = true;
				this.__currentFocusCellPath = new $.ig.CPCellPath(1, 0, 0, 0);
			} else {
				this.__currentFocusCellPath = this.__initialFocusCellPath;
				return;
			}
		}
		this.moveFocus(this.__currentFocusCellPath, function (o) {
			if (o == false) {
				$self.moveFocusCellDown();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellDown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetFocusToCell(Infragistics.CPCellPath)" />*/
	setFocusToCell: function (path) {
		this.moveFocus(path, function (o) {
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetFocusToCell(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellUp()" />*/
	moveFocusCellUp: function () {
		var $self = this;
		if (this.__currentFocusCell != null || this.__hasTriedToGiveFocus) {
			var currentSection = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
			if (this.__currentFocusCellPath._rowIndex > 0) {
				this.__currentFocusCellPath._rowIndex--;
			} else if (this.__currentFocusCellPath._rowIndex == 0) {
				this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
				this.__currentFocusCellPath._columnIndex = 0;
			} else if (this.__currentFocusCellPath._sectionIndex > 0) {
				this.__currentFocusCellPath._sectionIndex--;
				var sect = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
				if (sect._numberOfRows > 0) {
					this.__currentFocusCellPath._rowIndex = sect._numberOfRows - 1;
					this.getNextAvailableColumn(this.__currentFocusCellPath._columnIndex);
				} else {
					this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
					this.__currentFocusCellPath._columnIndex = 0;
				}
			} else if (this.canFocusCycle() && !this.__hasFocusLooped) {
				this.__hasFocusLooped = true;
				var sect1 = this.__engine._sections[this.__engine._sections.length - 1];
				this.__currentFocusCellPath = new $.ig.CPCellPath(1, sect1._numberOfRows - 1, sect1._sectionIndex, this.__engine._columns.length - 1);
			} else {
				this.__currentFocusCellPath = this.__initialFocusCellPath;
				return;
			}
		}
		this.moveFocus(this.__currentFocusCellPath, function (o) {
			if (o == false) {
				$self.moveFocusCellUp();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellLeft()" />*/
	moveFocusCellLeft: function () {
		var $self = this;
		if (this.__currentFocusCell != null || this.__hasTriedToGiveFocus) {
			if (this.__currentFocusCellPath._columnIndex > 0) {
				this.__currentFocusCellPath._columnIndex--;
			} else if (this.__currentFocusCellPath._columnIndex == 0 && this.__currentFocusCellPath._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
				if (this.__currentFocusCellPath._rowIndex > 0) {
					this.__currentFocusCellPath._rowIndex--;
					this.__currentFocusCellPath._columnIndex = this.__engine._columns.length - 1;
				} else if (this.__currentFocusCellPath._rowIndex == 0) {
					this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
					this.__currentFocusCellPath._columnIndex = 0;
				} else if (this.__currentFocusCellPath._sectionIndex > 0) {
					this.__currentFocusCellPath._sectionIndex--;
					var sect = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
					if (sect._numberOfRows > 0) {
						this.__currentFocusCellPath._rowIndex = sect._numberOfRows - 1;
						this.getNextAvailableColumn(this.__engine._columns.length - 1);
					} else {
						this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
						this.__currentFocusCellPath._columnIndex = 0;
					}
				}
			} else {
				this.__currentFocusCellPath = this.__initialFocusCellPath;
				return;
			}
		}
		this.moveFocus(this.__currentFocusCellPath, function (o) {
			if (o == false) {
				$self.moveFocusCellLeft();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellRight()" />*/
	moveFocusCellRight: function () {
		var $self = this;
		if (this.__currentFocusCell != null || this.__hasTriedToGiveFocus) {
			var currentSection = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
			if (this.__currentFocusCellPath._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
				this.__currentFocusCellPath._rowIndex = 0;
			} else if (this.__currentFocusCellPath._columnIndex < this.__engine._columns.length - 1) {
				var dataAtCell = this.__dsh.resolveDataObjectForRow(new $.ig.CPCellPath(1, this.__currentFocusCellPath._rowIndex, this.__currentFocusCellPath._sectionIndex, this.__currentFocusCellPath._columnIndex + 1));
				if (dataAtCell != null) {
					this.__currentFocusCellPath._columnIndex++;
				} else if (this.__currentFocusCellPath._sectionIndex < this.__engine._sections.length - 1) {
					this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
					this.__currentFocusCellPath._columnIndex = 0;
					this.__currentFocusCellPath._sectionIndex++;
				}
			} else if (this.__currentFocusCellPath._columnIndex == this.__engine._columns.length - 1) {
				this.__currentFocusCellPath._columnIndex = 0;
				if (this.__currentFocusCellPath._rowIndex < currentSection._numberOfRows - 1) {
					this.__currentFocusCellPath._rowIndex++;
				} else if (this.__currentFocusCellPath._sectionIndex < this.__engine._sections.length - 1) {
					this.__currentFocusCellPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
					this.__currentFocusCellPath._columnIndex = 0;
					this.__currentFocusCellPath._sectionIndex++;
				} else {
					this.__currentFocusCellPath = this.__initialFocusCellPath;
					return;
				}
			} else {
				this.__currentFocusCellPath = this.__initialFocusCellPath;
				return;
			}
		}
		this.moveFocus(this.__currentFocusCellPath, function (o) {
			if (o == false) {
				$self.moveFocusCellRight();
			}
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveFocusCellRight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ElementLostFocus()" />*/
	elementLostFocus: function () {
		$.ig.CPScrollView.prototype.elementLostFocus.call(this);
		if (this.__currentFocusCell != null) {
			this.__currentFocusCell.elementLostFocus();
			if (this.__currentFocusCellPath._columnIndex == this.__engine._columns.length - 1 && this.__currentFocusCellPath._sectionIndex == this.__engine._sections.length - 1) {
				var section = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
				if (this.__currentFocusCellPath._rowIndex == section._numberOfRows - 1) {
					this.__currentFocusCell = null;
					this.__currentFocusCellPath = null;
				}
			}
		}
		if (this._lostFocusBlock != null) {
			this._lostFocusBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ElementLostFocus()" />*/
	,
	__currentFocusCellPath: null,
	__initialFocusCellPath: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ContainerGotForwardFocus()" />*/
	containerGotForwardFocus: function () {
		var $self = this;
		if (this.visibleCellsPaths().length > 0) {
			this.setForwardFocusElement(false);
			this.scrollCellIntoView(this.__currentFocusCellPath, function (p) {
				$self.setFocusCell(p);
				if ($self.__currentFocusCell.isFocusable()) {
					$self.__currentFocusCell.elementGotFocus();
				} else {
					$self.ensureFocusCellPath();
					$self.moveFocusCellDown();
				}
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ContainerGotForwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetForwardFocusElement(System.Boolean)" />*/
	setForwardFocusElement: function (setCell) {
		if (this.visibleCellsPaths().length > 0) {
			if (this.__currentFocusCellPath == null || !this.doesCellPathExist(this.__currentFocusCellPath)) {
				this.clearFocusCell();
				this.__currentFocusCellPath = this.visibleCellsPaths()[this.getVisibleCellIndex(0, false)];
				if (setCell) {
					this.setFocusCell(this.__currentFocusCellPath);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetForwardFocusElement(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetFocusCell(Infragistics.CPCellPath)" />*/
	setFocusCell: function (path) {
		this.__hasFocusCellRefreshed = false;
		this.__currentFocusCell = this.cellAtPath(path);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetFocusCell(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ClearFocusCell()" />*/
	clearFocusCell: function () {
		if (this.__currentFocusCell != null) {
			this.__currentFocusCell.elementLostFocus();
			this.__currentFocusCell = null;
			this.__currentFocusCellPath = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ClearFocusCell()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridView::GetVisibleCellIndex(System.Int32, System.Boolean)" />*/
	getVisibleCellIndex: function (startingIndex, moveBackwards) {
		if (!moveBackwards) {
			for (var i = startingIndex; i < this.visibleCellsPaths().length; i++) {
				var cp = this.visibleCellsPaths()[i];
				if (cp._columnIndex >= 0 && (cp._rowIndex >= 0 || cp._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX())) {
					return i;
				}
			}
		} else {
			for (var i1 = startingIndex; i1 >= 0; i1--) {
				var cp1 = this.visibleCellsPaths()[i1];
				if (cp1._columnIndex >= 0 && (cp1._rowIndex >= 0 || cp1._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX())) {
					return i1;
				}
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridView::GetVisibleCellIndex(System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::SetBackwardFocusElement()" />*/
	setBackwardFocusElement: function () {
		if (this.visibleCellsPaths().length > 0) {
			if (this.__currentFocusCellPath == null) {
				this.__currentFocusCellPath = this.visibleCellsPaths()[this.getVisibleCellIndex(this.visibleCellsPaths().length - 1, true)];
			} else if (!this.doesCellPathExist(this.__currentFocusCellPath)) {
				this.clearFocusCell();
				this.__currentFocusCellPath = this.visibleCellsPaths()[0];
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::SetBackwardFocusElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ContainerGotBackwardFocus()" />*/
	containerGotBackwardFocus: function () {
		var $self = this;
		if (this.visibleCellsPaths().length > 0) {
			this.setBackwardFocusElement();
			this.scrollCellIntoView(this.__currentFocusCellPath, function (p) {
				$self.setFocusCell(p);
				if ($self.__currentFocusCell.isFocusable()) {
					$self.__currentFocusCell.elementGotFocus();
				} else {
					$self.moveFocusCellUp();
				}
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ContainerGotBackwardFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::DoesCellPathExist(Infragistics.CPCellPath)" />*/
	doesCellPathExist: function (path) {
		if (path._rowIndex >= 0) {
			var dataAtCell = this.__dsh.resolveDataObjectForRow(path);
			return dataAtCell != null && $.ig.NativeDictionaryUtility.prototype.containsKey(this.__engine._visibleCellsByPath, path._identifier);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::DoesCellPathExist(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::ContainerHasFocusableElements()" />*/
	containerHasFocusableElements: function () {
		if (this.visibleCellsPaths() != null && this.isFocusable() == true && !this.isHidden() && !this.isDisabled()) {
			for (var i = 0; i < this.visibleCellsPaths().length; i++) {
				var cp = this.visibleCellsPaths()[i];
				if ((cp._rowIndex >= 0 || cp._rowIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) && cp._columnIndex >= 0) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::ContainerHasFocusableElements()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	elementInContainerGotManualFocus: function (element) {
		if ($.ig.util.cast($.ig.CPGridViewCellBase.prototype.$type, element) !== null) {
			if (this.__currentFocusCell != null && this.__currentFocusCell != element && this.__currentFocusCell.isDisplayingFocus()) {
				this.__currentFocusCell.elementLostFocus();
			}
			var cell = element;
			if (cell._path._rowIndex >= 0 && cell._path._columnIndex >= 0 && cell._path._sectionIndex >= 0) {
				this.__currentFocusCell = cell;
				this.__hasFocusCellRefreshed = false;
				this.__currentFocusCellPath = cell._path.copy();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ElementInContainerGotManualFocus(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridView::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var combos = $.ig.CPScrollView.prototype.getSupportedKeyCommands.call(this);
		var TabScrollsCell = this.__currentFocusCell != null ? this.__currentFocusCell.capturesTabFocus() : false;
		var tabScrollSet = false;
		var shiftTabBackSet = false;
		if (this.__currentFocusCell != null) {
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(combos, this.__currentFocusCell.getSupportedKeyCommands());
		}
		if (this.__engine != null) {
			if (TabScrollsCell && this.__currentFocusCellPath != null) {
				if (this.__currentFocusCellPath._columnIndex == this.__engine._columns.length - 1 && this.__currentFocusCellPath._sectionIndex == this.__engine._sections.length - 1) {
					var section = this.__engine._sections[this.__currentFocusCellPath._sectionIndex];
					if (this.__currentFocusCellPath._rowIndex == section._numberOfRows - 1) {
						combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Move Focus Back", $.ig.Key.prototype.tab, false, true, false), function (k) {
							$self.ensureFocusCellPath();
							$self.moveFocusCellLeft();
						}));
						tabScrollSet = true;
					}
				}
				if (this.__currentFocusCellPath._columnIndex == 0 && this.__currentFocusCellPath._sectionIndex == 0 && this.__currentFocusCellPath._rowIndex == 0) {
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Previous Section", $.ig.Key.prototype.tab, false, true, false), function (k) {
						$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().moveFocusBackward();
					}));
					shiftTabBackSet = true;
				}
			}
			if (this.__engine._columns.length > 1 && this.__engine._sections.length > 0 && TabScrollsCell) {
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.tab), function (k) {
					$self.ensureFocusCellPath();
					$self.moveFocusCellRight();
				}));
				tabScrollSet = true;
				if (!shiftTabBackSet) {
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Previous Section", $.ig.Key.prototype.tab, false, true, false), function (k) {
						$self.ensureFocusCellPath();
						$self.moveFocusCellLeft();
					}));
					shiftTabBackSet = true;
				}
			}
			if (this.__engine._columns.length > 1) {
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.left), function (k) {
					$self.ensureFocusCellPath();
					$self.moveFocusCellLeft();
				}));
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.right), function (k) {
					$self.ensureFocusCellPath();
					$self.moveFocusCellRight();
				}));
				if (TabScrollsCell && !tabScrollSet) {
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.tab), function (k) {
						$self.ensureFocusCellPath();
						$self.moveFocusCellRight();
					}));
					tabScrollSet = true;
					if (!shiftTabBackSet) {
						combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Previous Section", $.ig.Key.prototype.tab, false, true, false), function (k) {
							$self.ensureFocusCellPath();
							$self.moveFocusCellLeft();
						}));
						shiftTabBackSet = true;
					}
				}
			}
			if (this.__engine._sections.length > 0) {
				var cannotMoveUpDown = this.__engine._sections.length == 1 && (this.__engine._sections[0])._numberOfRows == 0;
				if (!cannotMoveUpDown) {
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.up), function (k) {
						$self.ensureFocusCellPath();
						$self.moveFocusCellUp();
					}));
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.down), function (k) {
						$self.ensureFocusCellPath();
						$self.moveFocusCellDown();
					}));
				}
				combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.home(), function (k) {
					$self.clearFocusCell();
					$self.scrollTo(0, 0);
					$self.containerGotForwardFocus();
				}));
				combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.end(), function (k) {
					$self.clearFocusCell();
					$self.scrollTo(0, $self.getContentHeight() - $self.currentHeight());
					$self.containerGotBackwardFocus();
				}));
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.pageUp), function (k) {
					$self.clearFocusCell();
					$self.scrollTo1(0, Math.max(0, $self.getContentOffsetY() - $self.currentHeight()), $.ig.ThemeManager.prototype.theme().animationDuration(), function () {
						$self.setForwardFocusElement(true);
						if ($self.__currentFocusCell != null) {
							$self.__currentFocusCell.elementGotFocus();
						}
					});
				}));
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.pageDown), function (k) {
					$self.clearFocusCell();
					$self.scrollTo1(0, Math.min($self.getContentHeight() - $self.currentHeight(), $self.getContentOffsetY() + $self.currentHeight()), $.ig.ThemeManager.prototype.theme().animationDuration(), function () {
						$self.setForwardFocusElement(true);
						if ($self.__currentFocusCell != null) {
							$self.__currentFocusCell.elementGotFocus();
						}
					});
				}));
				if (TabScrollsCell && !tabScrollSet) {
					combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.tab), function (k) {
						$self.ensureFocusCellPath();
						$self.moveFocusCellDown();
					}));
					tabScrollSet = true;
					if (!shiftTabBackSet) {
						combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Previous Section", $.ig.Key.prototype.tab, false, true, false), function (k) {
							$self.ensureFocusCellPath();
							$self.moveFocusCellUp();
						}));
						shiftTabBackSet = true;
					}
				}
			}
			if (this.__currentFocusCell != null && !this.__currentFocusCell.isHidden() && !this.__currentFocusCell.isDisabled()) {
				combos.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
					if ($self.__currentFocusCell._keyboardAction != null) {
						$self.__currentFocusCell._keyboardAction();
					} else if ($self.__currentFocusCell != null) {
						$self.__currentFocusCell.triggerClick();
					}
				}));
				if (this.__currentFocusCell.supportsOverflow()) {
					combos.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.option(), function (k) {
						if ($self.__currentFocusCell != null) {
							$self.__currentFocusCell.triggerOverflow();
						}
					}));
				}
			}
		}
		return combos;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridView::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::SupportsSectionKeyCommands()" />*/
	supportsSectionKeyCommands: function () {
		return this.__currentFocusCell != null && this.__currentFocusCell.supportsSectionKeyCommands();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::SupportsSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridView::GetSupportedSectionKeyCommands()" />*/
	getSupportedSectionKeyCommands: function () {
		return this.__currentFocusCell.getSupportedSectionKeyCommands();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridView::GetSupportedSectionKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MoveFocus(Infragistics.CPCellPath, Infragistics.ExecutionBoolBlock)" />*/
	moveFocus: function (cellPath, cellFoundBlock) {
		var $self = this;
		if (cellPath != null) {
			this.__currentFocusCellPath = cellPath.copy();
			this.scrollCellIntoView(this.__currentFocusCellPath, function (p) {
				$self.__hasTriedToGiveFocus = true;
				var cell = $self.cellAtPath(p);
				if (cell != null && cell.isFocusable() && cell.capturesFocus()) {
					if ($self._arrowNavigationCausesAction && cell.isDisabled()) {
						cellFoundBlock(false);
						return;
					}
					if ($self.__currentFocusCell != null) {
						$self.__currentFocusCell.elementLostFocus();
					}
					$self.__currentFocusCell = cell;
					$self.__hasFocusCellRefreshed = false;
					$self.__currentFocusCell.elementGotFocus();
					if ($self._arrowNavigationCausesAction) {
						$self.__currentFocusCell.triggerClick();
					}
				}
				cellFoundBlock(cell != null && cell.isFocusable() && cell.capturesFocus());
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MoveFocus(Infragistics.CPCellPath, Infragistics.ExecutionBoolBlock)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewLayoutEngine Infragistics.CPGridView::Engine()" />*/
	engine: function () {
		return this.__engine;
	}
	/*<EndProperty Name="Infragistics.CPGridViewLayoutEngine Infragistics.CPGridView::Engine()" />*/
	,
	__scrollRightTimer: null,
	__scrollLeftTimer: null,
	__scrollUpTimer: null,
	__scrollDownTimer: null,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::CheckForVerticalAutoScroll(System.Int32)" />*/
	checkForVerticalAutoScroll: function (y) {
		var $self = this;
		var scrollThreshold = $.ig.ThemeManager.prototype.theme().autoScrollHitThreshold();
		var end = this.currentHeight() - scrollThreshold;
		var start = scrollThreshold;
		if (y > end) {
			if (this.__scrollDownTimer == null) {
				this.__scrollDownTimer = new $.ig.CPTimer();
				this.__scrollDownTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollVertical(true);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingDown();
		}
		if (y < start) {
			if (this.__scrollUpTimer == null) {
				this.__scrollUpTimer = new $.ig.CPTimer();
				this.__scrollUpTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollVertical(false);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingUp();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::CheckForVerticalAutoScroll(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridView::CheckForHorizontalAutoScroll(System.Int32)" />*/
	checkForHorizontalAutoScroll: function (x) {
		var $self = this;
		var scrollThreshold = $.ig.ThemeManager.prototype.theme().autoScrollHitThreshold();
		var end = this.currentWidth() - scrollThreshold;
		var start = scrollThreshold;
		if (x > end) {
			if (this.__scrollRightTimer == null) {
				this.__scrollRightTimer = new $.ig.CPTimer();
				this.__scrollRightTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollHorizontal(true);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingRight();
		}
		if (x < start) {
			if (this.__scrollLeftTimer == null) {
				this.__scrollLeftTimer = new $.ig.CPTimer();
				this.__scrollLeftTimer.start2($.ig.ThemeManager.prototype.theme().autoScrollTimerDuration(), true, function (percent) {
					if (percent == 1) {
						$self.scrollHorizontal(false);
					}
				});
			}
			return true;
		} else {
			this.stopScrollingLeft();
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridView::CheckForHorizontalAutoScroll(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopAutoScroll()" />*/
	stopAutoScroll: function () {
		this.stopScrollingLeft();
		this.stopScrollingRight();
		this.stopScrollingUp();
		this.stopScrollingDown();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopAutoScroll()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollHorizontal(System.Boolean)" />*/
	scrollHorizontal: function (right) {
		var stepSize = $.ig.ThemeManager.prototype.theme().autScrollStepSize();
		var diff = (right) ? stepSize : (-stepSize);
		var canScroll = false;
		var offsetX = this.getContentOffsetX() + diff;
		var limit;
		if (right) {
			limit = this.getContentWidth() - this.currentWidth();
			canScroll = offsetX <= limit;
		} else {
			limit = 0;
			canScroll = offsetX >= limit;
		}
		if (canScroll) {
			this.scrollTo(offsetX, this.getContentOffsetY());
		} else {
			if (this.getContentOffsetX() != limit) {
				this.scrollTo(limit, this.getContentOffsetY());
			}
			this.stopScrollingRight();
			this.stopScrollingLeft();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollHorizontal(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::ScrollVertical(System.Boolean)" />*/
	scrollVertical: function (down) {
		var stepSize = $.ig.ThemeManager.prototype.theme().autScrollStepSize();
		var diff = (down) ? stepSize : (-stepSize);
		var canScroll = false;
		var offsetY = this.getContentOffsetY() + diff;
		var limit;
		if (down) {
			limit = this.getContentHeight() - this.currentHeight();
			canScroll = offsetY <= limit;
		} else {
			limit = 0;
			canScroll = offsetY >= limit;
		}
		if (canScroll) {
			this.scrollTo(this.getContentOffsetX(), offsetY);
		} else {
			if (this.getContentOffsetY() != limit) {
				this.scrollTo(this.getContentOffsetX(), limit);
			}
			this.stopScrollingDown();
			this.stopScrollingUp();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::ScrollVertical(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopScrollingLeft()" />*/
	stopScrollingLeft: function () {
		if (this.__scrollLeftTimer != null) {
			this.__scrollLeftTimer.stop();
			this.__scrollLeftTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopScrollingLeft()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopScrollingRight()" />*/
	stopScrollingRight: function () {
		if (this.__scrollRightTimer != null) {
			this.__scrollRightTimer.stop();
			this.__scrollRightTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopScrollingRight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopScrollingUp()" />*/
	stopScrollingUp: function () {
		if (this.__scrollUpTimer != null) {
			this.__scrollUpTimer.stop();
			this.__scrollUpTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopScrollingUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::StopScrollingDown()" />*/
	stopScrollingDown: function () {
		if (this.__scrollDownTimer != null) {
			this.__scrollDownTimer.stop();
			this.__scrollDownTimer = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::StopScrollingDown()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::DynamicRowHeightMode()" />*/
	dynamicRowHeightMode: function (value) {
		if (arguments.length === 1) {
			this.__engine._dynamicRowHeightMode = value;
			return value;
		} else {
			return this.__engine._dynamicRowHeightMode;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::DynamicRowHeightMode()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridView::IsDynamicRowHeighReverseScrolling()" />*/
	isDynamicRowHeighReverseScrolling: function (value) {
		if (arguments.length === 1) {
			this.__engine._isDynamicRowHeighReverseScrolling = value;
			return value;
		} else {
			return this.__engine._isDynamicRowHeighReverseScrolling;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridView::IsDynamicRowHeighReverseScrolling()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::AddRowQueitly(System.Int32)" />*/
	addRowQueitly: function (section) {
		this.__engine.addRowQuielty(this, section);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::AddRowQueitly(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::UpdateRowAtIndex(System.Int32, System.Int32, System.Boolean)" />*/
	updateRowAtIndex: function (section, rowIndex, canAnimate) {
		this.__engine.updateRowAtIndex(this, section, rowIndex, canAnimate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::UpdateRowAtIndex(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridView::MarkRowDirty(System.Int32, System.Int32)" />*/
	markRowDirty: function (sectionIndex, rowIndex) {
		this.__engine.markRowDirty(this, sectionIndex, rowIndex);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridView::MarkRowDirty(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridView', $.ig.CPScrollView.prototype.$type, [$.ig.DynamicFocusableContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPGridView" />*/

/*<BeginType Name="Infragistics.CPGridViewButtonFooterCell" />*/

$.ig.util.defType('CPGridViewButtonFooterCell', 'CPGridViewItemCellBase', {
	__button: null,
	__callback: null,
	init: function (title, callback, itemGuideStyle, identifier, useVerticalButton) {
		var $self = this;
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, itemGuideStyle, identifier);
		this.setCornerRadius(0);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.setCursor($.ig.CPCursors.prototype.$default);
		this.__callback = callback;
		if (useVerticalButton) {
			this.__button = new $.ig.CPVerticalIconLabelButton($.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.standard);
		} else {
			this.__button = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.standard);
		}
		this.__button.addClickHandler(function (x, y) {
			$self.clicked();
		});
		this.__button.restOpacity(1);
		this.__button.setIcon($.ig.UIPathIcons.prototype.icons().getPlusIcon());
		this.__button.setText(title);
		this.__button.setColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().$native());
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__button, title);
		this.contentContainer().addSubview(this.__button);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewButtonFooterCell::Clicked()" />*/
	clicked: function () {
		if (this.__callback != null) {
			this.__callback(this.__button);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewButtonFooterCell::Clicked()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::SupportsHighlightBackgroundView()" />*/
	supportsHighlightBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::SupportsHighlightBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::HasCenterContentArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::SupportsEdgePadding()" />*/
	supportsEdgePadding: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::SupportsEdgePadding()" />*/
	,
	_displayButtonInTheCenter: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::DisplayButtonInTheCenter()" />*/
	displayButtonInTheCenter: function (value) {
		if (arguments.length === 1) {
			this._displayButtonInTheCenter = value;
			return value;
		} else {
			return this._displayButtonInTheCenter;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewButtonFooterCell::DisplayButtonInTheCenter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewButtonFooterCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		$.ig.CPGridViewItemCellBase.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
		this.__button.calculateSizeToFit();
		var bw = this.__button.getCalculatedWidth();
		var bh = this.__button.getCalculatedHeight();
		if (!this.__button.hasText() || this.displayButtonInTheCenter()) {
			x = x + $.ig.intDivide(w, 2) - $.ig.intDivide(bw, 2);
		}
		this.contentContainer().measureView1(this.__button, x, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), Math.min(bw, w), bh, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewButtonFooterCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPGridViewButtonFooterCell', $.ig.CPGridViewItemCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewButtonFooterCell" />*/

/*<BeginType Name="Infragistics.CPGridViewCellSetupDelegate" />*/

$.ig.util.defType('CPGridViewCellSetupDelegate', 'Object', {
	$type: new $.ig.Type('CPGridViewCellSetupDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellSetupDelegate" />*/

/*<BeginType Name="Infragistics.CPGridViewCellSectionExpansionAnimator" />*/

$.ig.util.defType('CPGridViewCellSectionExpansionAnimator', 'CPGridViewCellAnimator', {
	init: function () {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.scrollToSection(-1);
	},
	_scrollToSection: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewCellSectionExpansionAnimator::ScrollToSection()" />*/
	scrollToSection: function (value) {
		if (arguments.length === 1) {
			this._scrollToSection = value;
			return value;
		} else {
			return this._scrollToSection;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewCellSectionExpansionAnimator::ScrollToSection()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellSectionExpansionAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustVerticalScrollPosition: function (engine, grid, prevContentOffsetY) {
		if (this.scrollToSection() >= 0 && this.scrollToSection() < engine._sections.length) {
			var section = engine._sections[this.scrollToSection()];
			var sectionTop = section.getSectionTop();
			var offset = $.ig.intDivide(section._headerHeight, 2);
			var limit = grid.getContentHeight() - grid.currentHeight();
			return Math.min(Math.max(grid.topInset(), sectionTop - offset), limit);
		} else {
			return $.ig.CPGridViewCellAnimator.prototype.adjustVerticalScrollPosition.call(this, engine, grid, prevContentOffsetY);
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellSectionExpansionAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		var y = cell._frameY;
		var h = cell._frameH;
		var additionalOffset = 0;
		if (this._pathsBeingAdded != null) {
			for (var i = 0; i < this._pathsBeingAdded.length; i++) {
				var path = this._pathsBeingAdded[i];
				if (path._sectionIndex < cell._path._sectionIndex) {
					var s = engine._sections[path._sectionIndex];
					additionalOffset += s.getRowHeight(path._rowIndex);
				}
			}
		}
		var section = cell._path._sectionIndex >= 0 ? engine._sections[cell._path._sectionIndex] : null;
		if (section != null) {
			y = section.getSectionTop();
			if (cell._path._columnIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()) {
				h = Math.min(cell._frameH, section._headerHeight);
			} else {
				y += section._headerHeight;
			}
			y -= additionalOffset;
		}
		y -= this._differenceInVerticalScrollPosition;
		engine.measureCell(cell, cell._frameX, y, cell._frameW, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX, cell._frameY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
		var section = cell._path._sectionIndex >= 0 ? engine._sections[cell._path._sectionIndex] : null;
		if (section != null) {
			var y = section.getRowTop(cell._path._rowIndex);
			if (cell._path._columnIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()) {
				y += section.getRowHeight(cell._path._rowIndex);
			}
			cell.storeFrame(cell._frameX, y, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX, prevY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionExpansionAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewCellSectionExpansionAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellSectionExpansionAnimator" />*/

/*<BeginType Name="Infragistics.CPGridViewCellSectionCollapseAnimator" />*/

$.ig.util.defType('CPGridViewCellSectionCollapseAnimator', 'CPGridViewCellAnimator', {
	__section: 0,
	init: function (section) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__section = section;
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewCellSectionCollapseAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustVerticalScrollPosition: function (engine, grid, prevContentOffsetY) {
		var cell = grid.cellAtPath(new $.ig.CPCellPath(1, $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX(), this.__section, 0));
		if (cell == null || cell._frameY != prevContentOffsetY) {
			return $.ig.CPGridViewCellAnimator.prototype.adjustVerticalScrollPosition.call(this, engine, grid, prevContentOffsetY);
		} else {
			var top = (engine._sections[this.__section]).getSectionTop();
			if (!this.dontAjustScrollPositions()) {
				var maxTop = grid.getContentHeight() - grid.currentHeight();
				top = Math.min(top, maxTop);
			}
			return top;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewCellSectionCollapseAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		var y = cell._frameY;
		var offset = 0;
		if (this._cellsBeingRemoved != null) {
			var pathlookup = new $.ig.Dictionary(0);
			var count = this._cellsBeingRemoved.length;
			for (var i = 0; i < count; i++) {
				var removedCell = this._cellsBeingRemoved[i];
				if (offset > 0 || (removedCell._path._sectionIndex < cell._path._sectionIndex || (removedCell._path._sectionIndex == cell._path._sectionIndex && removedCell._path._rowIndex <= cell._path._rowIndex))) {
					var key = removedCell._path._sectionIndex + "_" + removedCell._path._rowIndex;
					if (!$.ig.NativeDictionaryUtility.prototype.containsKey(pathlookup, key)) {
						pathlookup.item(key, key);
						offset += removedCell.currentHeight();
					}
				}
			}
			if (offset == 0) {
				y = cell._gridView.getContentOffsetY() - cell._frameH;
			}
		}
		y += offset;
		engine.measureCell(cell, cell._frameX, y, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		if (this._differenceInVerticalScrollPosition > 0) {
			engine.measureCell(cell, cell._frameX, cell._frameY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
		var section = engine._sections[cell._path._sectionIndex];
		var y = section.getSectionTop();
		var h = Math.min(cell._frameH, section._headerHeight);
		if (cell._path._columnIndex == $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()) {
			y += section._headerHeight;
			h = cell._frameH;
		}
		cell.storeFrame(cell._frameX, y, cell._frameW, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX, prevY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellSectionCollapseAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewCellSectionCollapseAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellSectionCollapseAnimator" />*/

/*<BeginType Name="Infragistics.CPGridViewCellsPanelBase" />*/

$.ig.util.defType('CPGridViewCellsPanelBase', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__cells: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::Setup()" />*/
	setup: function () {
		$.ig.CPViewBase.prototype.setup.call(this);
		this.shouldSteaFocusFromTextEditors(false);
		this.__cells = new $.ig.Array();
		this.isHidden(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::AddCell(Infragistics.CPGridViewCellBase)" />*/
	addCell: function (cell) {
		if (this.isHidden()) {
			this.ensureIsMeasured();
		}
		this.isHidden(false);
		this.__cells.add(cell);
		this.addSubview(cell);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::AddCell(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::EnsureIsMeasured()" />*/
	ensureIsMeasured: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanelBase::EnsureIsMeasured()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewCellsPanelBase::GetCells()" />*/
	getCells: function () {
		return this.__cells;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewCellsPanelBase::GetCells()" />*/
	,
	$type: new $.ig.Type('CPGridViewCellsPanelBase', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellsPanelBase" />*/

/*<BeginType Name="Infragistics.CPGridViewCellsPanel" />*/

$.ig.util.defType('CPGridViewCellsPanel', 'CPGridViewCellsPanelBase', {
	init: function () {
		$.ig.CPGridViewCellsPanelBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanel::Setup()" />*/
	setup: function () {
		$.ig.CPGridViewCellsPanelBase.prototype.setup.call(this);
		this._element[0].style.pointerEvents = "none";
		this._element.css("-webkit-touch-callout", "none");
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanel::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanel::AddSubview(System.Windows.View)" />*/
	addSubview: function (subView) {
		$.ig.CPGridViewCellsPanelBase.prototype.addSubview.call(this, subView);
		subView._element[0].style.pointerEvents = "auto";
		subView._element.css("-webkit-touch-callout", "auto");
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanel::AddSubview(System.Windows.View)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewCellsPanel::EnsureIsMeasured()" />*/
	ensureIsMeasured: function () {
		var grid = this.getParent();
		grid.measureView(this, -grid.getContentOffsetX(), -grid.getContentOffsetY(), grid.getContentWidth(), grid.getContentHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewCellsPanel::EnsureIsMeasured()" />*/
	,
	$type: new $.ig.Type('CPGridViewCellsPanel', $.ig.CPGridViewCellsPanelBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewCellsPanel" />*/

/*<BeginType Name="Infragistics.CPGridViewDatasourceHelper" />*/

$.ig.util.defType('CPGridViewDatasourceHelper', 'Object', {
	__columnDefinitions: null,
	__fixedLeftColumnDefs: null,
	__fixedRightColumnDefs: null,
	__columns: null,
	_sectionExpandedLookup: null,
	_rawData: null,
	_displayData: null,
	_sectionKeys: null,
	_sectionData: null,
	_autoGenerateColumns: false,
	_sectionKey: null,
	_sectionSortType: 0,
	_rowHeightListener: null,
	_sectionHeaderHeightListener: null,
	_sectionHeaderCellGenerator: null,
	_sectionFooterCellGenerator: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._autoGenerateColumns = true;
		this.__columnDefinitions = new $.ig.Array();
		this.__columns = new $.ig.Array();
		this.__fixedLeftColumnDefs = new $.ig.Array();
		this.__fixedRightColumnDefs = new $.ig.Array();
		this._sectionKeys = new $.ig.Array();
		this._sectionData = new $.ig.Dictionary(0);
		this._sectionSortType = $.ig.CPSectionSortType.prototype.asc;
	},
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::Columns()" />*/
	columns: function () {
		return this.__columns;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::Columns()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ColumnDefinitions()" />*/
	columnDefinitions: function () {
		return this.__columnDefinitions;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ColumnDefinitions()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::FixedLeftColumnDefinitions()" />*/
	fixedLeftColumnDefinitions: function () {
		return this.__fixedLeftColumnDefs;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::FixedLeftColumnDefinitions()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::FixedRightColumnDefinitions()" />*/
	fixedRightColumnDefinitions: function () {
		return this.__fixedRightColumnDefs;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::FixedRightColumnDefinitions()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::Data()" />*/
	data: function (value) {
		if (arguments.length === 1) {
			if (this._rawData != value) {
				this._rawData = value;
				this.invalidateData();
			}
			return value;
		} else {
			return this._rawData;
		}
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::Data()" />*/
	,
	_supportsStretchRows: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::SupportsStretchRows()" />*/
	supportsStretchRows: function (value) {
		if (arguments.length === 1) {
			this._supportsStretchRows = value;
			return value;
		} else {
			return this._supportsStretchRows;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::SupportsStretchRows()" />*/
	,
	__stretchPaths: null,
	__mappedStretchPath: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::SetStretchPaths(Infragistics.CPList, Infragistics.CPList)" />*/
	setStretchPaths: function (paths, actualPaths) {
		this.__stretchPaths = paths;
		this.__mappedStretchPath = actualPaths;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::SetStretchPaths(Infragistics.CPList, Infragistics.CPList)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::StretchPaths()" />*/
	stretchPaths: function () {
		return this.__stretchPaths;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::StretchPaths()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::MappedStretchPaths()" />*/
	mappedStretchPaths: function () {
		return this.__mappedStretchPath;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::MappedStretchPaths()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::ResolveStretchRowIndex(System.Int32, System.Int32)" />*/
	resolveStretchRowIndex: function (row, section) {
		if (this.__stretchPaths != null) {
			for (var i = 0; i < this.__stretchPaths.length; i++) {
				var path = this.__stretchPaths[i];
				if (path._rowIndex == row && path._sectionIndex == section) {
					return i;
				}
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::ResolveStretchRowIndex(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::IsStretchRow(System.Int32, System.Int32)" />*/
	isStretchRow: function (row, section) {
		return this.resolveStretchRowIndex(row, section) >= 0;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::IsStretchRow(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::OnSizeChanged(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	onSizeChanged: function (gridView, w, h) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::OnSizeChanged(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::InvalidateData()" />*/
	invalidateData: function () {
		this.invalidateData1(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::InvalidateData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::ProcessColumns()" />*/
	processColumns: function () {
		this.__columns.clear();
		if (this._autoGenerateColumns && this._rawData != null && this._rawData.length > 0) {
			var keys = new $.ig.Dictionary(0);
			var count = this.__columnDefinitions.length;
			for (var i = 0; i < count; i++) {
				var col = this.__columnDefinitions[i];
				if (col._headerText == null) {
					col._headerText = col.key();
				}
				this.__columns.add(col);
				keys.item(col.key(), col.key());
			}
			count = this.__fixedLeftColumnDefs.length;
			for (var i1 = 0; i1 < count; i1++) {
				var col1 = this.__fixedLeftColumnDefs[i1];
				if (col1._headerText == null) {
					col1._headerText = col1.key();
				}
				keys.item(col1.key(), col1.key());
			}
			count = this.__fixedRightColumnDefs.length;
			for (var i2 = 0; i2 < count; i2++) {
				var col2 = this.__fixedRightColumnDefs[i2];
				if (col2._headerText == null) {
					col2._headerText = col2.key();
				}
				keys.item(col2.key(), col2.key());
			}
			var firstItem = this._rawData[0];
			var propNames = $.ig.NativeReflectorUtility.prototype.getPublicPropertyNames(firstItem);
			var propCount = propNames.length;
			for (var i3 = 0; i3 < propCount; i3++) {
				var key = propNames[i3];
				if (!$.ig.NativeDictionaryUtility.prototype.containsKey(keys, key)) {
					var col3 = new $.ig.CPGridViewColumnDefinition(0, key);
					col3._headerText = key;
					this.__columns.add(col3);
				}
			}
			if (propCount == 0 && this.__columns.length == 0) {
				var col4 = new $.ig.CPGridViewValueColumnDefinition();
				this.__columns.add(col4);
			}
		} else {
			$.ig.UIUtility.prototype.addRange(this.__columnDefinitions, this.__columns);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::ProcessColumns()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::InvalidateData(System.Boolean)" />*/
	invalidateData1: function (invalidateColumns) {
		this._sectionData.clear();
		this._sectionKeys.clear();
		this._displayData = null;
		if (invalidateColumns) {
			this.processColumns();
		}
		this.processSections();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::InvalidateData(System.Boolean)" />*/
	,
	_hideSectionHeaderForNullSectionKeys: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::ProcessSections()" />*/
	processSections: function () {
		if (this._rawData != null && this._rawData.length > 0) {
			if (this._sectionKey == null || this._sectionKey.length == 0) {
				this._displayData = new $.ig.Array();
				$.ig.UIUtility.prototype.addRange(this._rawData, this._displayData);
			} else {
				var count = this._rawData.length;
				for (var i = 0; i < count; i++) {
					var obj = this._rawData[i];
					var section = $.ig.NativeReflectorUtility.prototype.getPropertyValue(this._sectionKey, obj);
					var val = "";
					if (section != null) {
						val = $.ig.NativeStringUtility.prototype.toString1(section);
					}
					var data;
					if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this._sectionData, val)) {
						data = new $.ig.Array();
						this._sectionData.item(val, data);
						this._sectionKeys.add(val);
					} else {
						data = this._sectionData.item(val);
					}
					data.add(obj);
				}
				if (this._sectionKeys != null && this._sectionKeys.length > 0 && this._sectionSortType != $.ig.CPSectionSortType.prototype.none) {
					this._sectionKeys = $.ig.NativeSortUtility.prototype.sortListAlpha(new $.ig.CPPropertySortConverter(null), this._sectionKeys, this._sectionSortType == $.ig.CPSectionSortType.prototype.asc);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::ProcessSections()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewDatasourceHelper::ResolveSectionKey(System.Int32)" />*/
	resolveSectionKey: function (index) {
		if (this._sectionKeys == null || this._sectionKeys.length <= index) {
			return null;
		}
		return this._sectionKeys[index];
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewDatasourceHelper::ResolveSectionKey(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ResolveSectionDataForKey(System.String)" />*/
	resolveSectionDataForKey: function (key) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._sectionData, key)) {
			return this._sectionData.item(key);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ResolveSectionDataForKey(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ResolveSectionData(System.Int32)" />*/
	resolveSectionData: function (index) {
		if (this._sectionKeys == null || this._sectionKeys.length <= index) {
			return null;
		}
		return this._sectionData.item(this._sectionKeys[index]);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewDatasourceHelper::ResolveSectionData(System.Int32)" />*/
	,
	_alwaysDisplaySectionHeaders: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::AlwaysDisplaySectionHeaders()" />*/
	alwaysDisplaySectionHeaders: function (value) {
		if (arguments.length === 1) {
			this._alwaysDisplaySectionHeaders = value;
			return value;
		} else {
			return this._alwaysDisplaySectionHeaders;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::AlwaysDisplaySectionHeaders()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	normalizePath: function (path) {
		return path;
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	deNormalizePath: function (path) {
		return path;
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::ResolveDataValueForCell(Infragistics.CPCellPath)" />*/
	resolveDataValueForCell: function (path) {
		path = this.normalizePath(path);
		var obj = this.lookupObjectforPath(path);
		return this.lookUpDataValueForObject(obj, path._columnIndex);
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::ResolveDataValueForCell(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::ResolveDataObjectForRow(Infragistics.CPCellPath)" />*/
	resolveDataObjectForRow: function (path) {
		path = this.normalizePath(path);
		return this.lookupObjectforPath(path);
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::ResolveDataObjectForRow(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::LookUpDataValueForObject(System.Object, System.Int32)" />*/
	lookUpDataValueForObject: function (obj, column) {
		if (this.__columns == null || column > this.__columns.length) {
			return null;
		}
		var col = this.__columns[column];
		return $.ig.NativeReflectorUtility.prototype.getPropertyValue(col.key(), obj);
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::LookUpDataValueForObject(System.Object, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::LookupObjectforPath(Infragistics.CPRowPath)" />*/
	lookupObjectforPath: function (path) {
		var obj = null;
		if (path == null) {
			return null;
		}
		if (this._sectionKeys.length == 0) {
			if (this._displayData != null && this._displayData.length > path._rowIndex) {
				obj = this._displayData[path._rowIndex];
			}
		} else {
			var grouping = this._sectionData.item(this._sectionKeys[path._sectionIndex]);
			if (grouping.length > path._rowIndex) {
				obj = grouping[path._rowIndex];
			}
		}
		return obj;
	}
	/*<EndMethod Name="System.Object Infragistics.CPGridViewDatasourceHelper::LookupObjectforPath(Infragistics.CPRowPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::ResolveCellPathForData(System.Object)" />*/
	resolveCellPathForData: function (data) {
		if (this._displayData != null) {
			var count = this._displayData.length;
			for (var i = 0; i < count; i++) {
				var item = this._displayData[i];
				if ($.ig.NativeUIUtility.prototype.utility().equals(item, data)) {
					return new $.ig.CPCellPath(0, i, 0, 0, $.ig.CPGridViewFixedColumnDirection.prototype.none);
				}
			}
		} else {
			var count1 = this._sectionKeys.length;
			for (var groupIndex = 0; groupIndex < count1; groupIndex++) {
				var key = this._sectionKeys[groupIndex];
				var list = this._sectionData.item(key);
				var childCount = list.length;
				for (var index = 0; index < childCount; index++) {
					var item1 = list[index];
					if ($.ig.NativeUIUtility.prototype.utility().equals(item1, data)) {
						return new $.ig.CPCellPath(0, index, groupIndex, 0, $.ig.CPGridViewFixedColumnDirection.prototype.none);
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::ResolveCellPathForData(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfColumnsInGrid()" />*/
	getNumberOfColumnsInGrid: function () {
		return this.__columns.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfColumnsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfFixedLeftColumnsInGrid()" />*/
	getNumberOfFixedLeftColumnsInGrid: function () {
		return this.__fixedLeftColumnDefs.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfFixedLeftColumnsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfFixedRightColumnsInGrid()" />*/
	getNumberOfFixedRightColumnsInGrid: function () {
		return this.__fixedRightColumnDefs.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfFixedRightColumnsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfSectionsInGrid()" />*/
	getNumberOfSectionsInGrid: function () {
		var count = this._sectionKeys.length;
		if (count == 0) {
			count = 1;
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfSectionsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::ResolveRowCount(System.Int32)" />*/
	resolveRowCount: function (section) {
		var count = 0;
		if (this._sectionKeys == null || this._sectionKeys.length == 0) {
			if (this._displayData == null) {
				count = 0;
			} else {
				count = this._displayData.length;
			}
		} else {
			var grouping = section < this._sectionKeys.length ? this._sectionData.item(this._sectionKeys[section]) : null;
			count = grouping != null ? grouping.length : 0;
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::ResolveRowCount(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	getNumberOfRowsInSection: function (section) {
		return this.resolveRowCount(section);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForColumn(System.Int32)" />*/
	getWidthForColumn: function (columnIndex) {
		return (this.__columns[columnIndex]).width();
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForFixedLeftColumn(System.Int32)" />*/
	getWidthForFixedLeftColumn: function (columnIndex) {
		return (this.__fixedLeftColumnDefs[columnIndex]).width();
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForFixedLeftColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForFixedRightColumn(System.Int32)" />*/
	getWidthForFixedRightColumn: function (columnIndex) {
		return (this.__fixedRightColumnDefs[columnIndex]).width();
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewDatasourceHelper::GetWidthForFixedRightColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::UpdateSectionExpandedState(System.Int32, System.Boolean)" />*/
	updateSectionExpandedState: function (section, isExpanded) {
		if (this._sectionExpandedLookup == null) {
			this._sectionExpandedLookup = new $.ig.Dictionary(0);
		}
		var key = this.resolveKeyForSection(section);
		this._sectionExpandedLookup.item(key, isExpanded);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::UpdateSectionExpandedState(System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewDatasourceHelper::ResolveKeyForSection(System.Int32)" />*/
	resolveKeyForSection: function (section) {
		if (this._sectionKeys != null && this._sectionKeys.length > section) {
			return this._sectionKeys[section];
		} else {
			return section.toString();
		}
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewDatasourceHelper::ResolveKeyForSection(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::IsSectionCollapsed(System.Int32)" />*/
	isSectionCollapsed: function (section) {
		if (this._sectionExpandedLookup != null) {
			var key = this.resolveKeyForSection(section);
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._sectionExpandedLookup, key)) {
				return !this._sectionExpandedLookup.item(key);
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::IsSectionCollapsed(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewDatasourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	resolveColumnForIndex: function (index) {
		return this.__columns[index];
	}
	/*<EndMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewDatasourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewDatasourceHelper::GetColumnDefinitionForIndex(System.Int32)" />*/
	getColumnDefinitionForIndex: function (colIndex) {
		var colDef;
		if (this.fixedLeftColumnDefinitions().length > colIndex) {
			colDef = this.fixedLeftColumnDefinitions()[colIndex];
		} else if (this.__fixedLeftColumnDefs.length + this.columns().length > colIndex) {
			colDef = this.columnDefinitions()[colIndex - this.fixedLeftColumnDefinitions().length];
		} else {
			colDef = this.fixedRightColumnDefinitions()[colIndex - this.fixedLeftColumnDefinitions().length - this.columns().length];
		}
		return colDef;
	}
	/*<EndMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewDatasourceHelper::GetColumnDefinitionForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getCell: function (gridView, path) {
		var normPath = this.normalizePath(path);
		if (normPath != null) {
			var colDef = this.resolveColumnForIndex(normPath._columnIndex);
			if (colDef != null) {
				var cell = colDef.getCell(gridView, path, this);
				return cell;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedLeftCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getFixedLeftCell: function (gridView, path) {
		var normPath = this.normalizePath(path);
		if (normPath != null) {
			var colDef = this.__fixedLeftColumnDefs[normPath._columnIndex];
			if (colDef != null) {
				var cell = colDef.getCell(gridView, path, this);
				return cell;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedLeftCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedRightCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getFixedRightCell: function (gridView, path) {
		var normPath = this.normalizePath(path);
		if (normPath != null) {
			var colDef = this.__fixedRightColumnDefs[normPath._columnIndex];
			if (colDef != null) {
				var cell = colDef.getCell(gridView, path, this);
				return cell;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedRightCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetRowSeparatorCell(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	getRowSeparatorCell: function (gridView, row, section) {
		var cell = gridView.dequeueReusableCellWithIdentifier("rowSep");
		if (cell == null) {
			cell = new $.ig.CPGridViewRowSeparatorCell("rowSep");
		}
		cell.setBackgroundColor(gridView._rowSeparatorColor);
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetRowSeparatorCell(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	_hideSectionHeadersWithNoData: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::HideSectionHeadersWithNoData()" />*/
	hideSectionHeadersWithNoData: function (value) {
		if (arguments.length === 1) {
			this._hideSectionHeadersWithNoData = value;
			return value;
		} else {
			return this._hideSectionHeadersWithNoData;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::HideSectionHeadersWithNoData()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::DisplayHeaderForSection(Infragistics.CPGridView, System.Int32)" />*/
	displayHeaderForSection: function (gridView, section) {
		if (this._hideSectionHeaderForNullSectionKeys) {
			if (this._sectionKeys.length > section) {
				var key = this._sectionKeys[section];
				if (key.equals("")) {
					return false;
				}
			}
		}
		if (this.hideSectionHeadersWithNoData()) {
			if (this._sectionKeys.length > section) {
				var key1 = this._sectionKeys[section];
				var data = this.resolveSectionDataForKey(key1);
				if (data == null || data.length == 0) {
					return false;
				}
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::DisplayHeaderForSection(Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::DisplayFooterForSection(Infragistics.CPGridView, System.Int32)" />*/
	displayFooterForSection: function (gridView, section) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewDatasourceHelper::DisplayFooterForSection(Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getHeaderCell: function (gridView, path) {
		return (this.__columns[path._columnIndex]).getHeaderCell(gridView, path);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedLeftHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getFixedLeftHeaderCell: function (gridView, path) {
		return (this.__fixedLeftColumnDefs[path._columnIndex]).getHeaderCell(gridView, path);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedLeftHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedRightHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getFixedRightHeaderCell: function (gridView, path) {
		return (this.__fixedRightColumnDefs[path._columnIndex]).getHeaderCell(gridView, path);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetFixedRightHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetSectionHeaderCell(Infragistics.CPGridView, System.Int32)" />*/
	getSectionHeaderCell: function (gridView, section) {
		if (this._sectionHeaderCellGenerator != null) {
			return this._sectionHeaderCellGenerator(gridView, new $.ig.CPCellPath(1, -1, section, -1));
		} else {
			var cell = gridView.dequeueReusableCellWithIdentifier("sectionHeader");
			if (cell == null) {
				cell = new $.ig.CPGridViewItemSectionHeaderCell(0, $.ig.CPTheme.prototype.itemGuideStyleMedium, "sectionHeader");
			}
			if (this._sectionKeys.length > section) {
				cell.textLabel().setText(this._sectionKeys[section]);
			}
			return cell;
		}
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetSectionHeaderCell(Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetSectionFooterCell(Infragistics.CPGridView, System.Int32)" />*/
	getSectionFooterCell: function (gridView, section) {
		if (this._sectionFooterCellGenerator != null) {
			return this._sectionFooterCellGenerator(gridView, new $.ig.CPCellPath(1, -1, section, -1));
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewDatasourceHelper::GetSectionFooterCell(Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::MoveSection(System.Int32, System.Int32)" />*/
	moveSection: function (from, to) {
		if (this._sectionData != null && this._sectionData.count() > 0) {
			this.swapData(this._sectionKeys, from, to);
			return to;
		}
		return from;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewDatasourceHelper::MoveSection(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::MoveItem(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	moveItem: function (from, to) {
		from = this.normalizePath(from);
		to = this.normalizePath(to);
		if (this._sectionData != null && this._sectionData.count() > 0) {
			var key = this._sectionKeys[from._sectionIndex];
			var sectionData = this._sectionData.item(key);
			this.swapData(sectionData, from._rowIndex, to._rowIndex);
		} else {
			this.swapData(this.data(), from._rowIndex, to._rowIndex);
			this.swapData(this._displayData, from._rowIndex, to._rowIndex);
		}
		return this.deNormalizePath(to);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewDatasourceHelper::MoveItem(Infragistics.CPCellPath, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::SwapData(Infragistics.CPList, System.Int32, System.Int32)" />*/
	swapData: function (list, from, to) {
		$.ig.ArrayUtility.prototype.swapData(list, from, to);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDatasourceHelper::SwapData(Infragistics.CPList, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewDatasourceHelper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewDatasourceHelper" />*/

/*<BeginType Name="Infragistics.CPGridViewDeleteRowAnimator" />*/

$.ig.util.defType('CPGridViewDeleteRowAnimator', 'CPGridViewCellAnimator', {
	init: function () {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		var y = cell._frameY;
		var offset = 0;
		if (this._cellsBeingRemoved != null) {
			var pathlookup = new $.ig.Dictionary(0);
			var count = this._cellsBeingRemoved.length;
			for (var i = 0; i < count; i++) {
				var removedCell = this._cellsBeingRemoved[i];
				if (offset > 0 || (removedCell._path._sectionIndex < cell._path._sectionIndex || (removedCell._path._sectionIndex == cell._path._sectionIndex && removedCell._path._rowIndex <= cell._path._rowIndex))) {
					var key = removedCell._path._sectionIndex + "_" + removedCell._path._rowIndex;
					if (!$.ig.NativeDictionaryUtility.prototype.containsKey(pathlookup, key)) {
						pathlookup.item(key, key);
						offset += removedCell.currentHeight();
					}
				}
			}
			if (offset == 0) {
				y = cell._gridView.getContentOffsetY() - cell._frameH;
			}
		}
		y += offset;
		engine.measureCell(cell, cell._frameX, y, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		engine.measureCell(cell, cell._frameX, cell._frameY + this._differenceInVerticalScrollPosition * -1, cell._frameW, cell._frameH);
		cell._frameOpacity = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, prevX, prevY + this._differenceInVerticalScrollPosition * -1, prevW, prevH);
		} else {
			$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewDeleteRowAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewDeleteRowAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewDeleteRowAnimator" />*/

/*<BeginType Name="Infragistics.CPGridViewExpandableCardCell" />*/

$.ig.util.defType('CPGridViewExpandableCardCell', 'CPGridViewItemCellBase', {
	__dsh: null,
	__gridView: null,
	__expandableCell: null,
	init: function (itemGuideStyle, identifier) {
		var $self = this;
		$.ig.CPGridViewItemCellBase.prototype.init.call(this, itemGuideStyle, identifier);
		this.__expandableCell = this.createExpandableHeaderCell(itemGuideStyle);
		this.__expandableCell.addExpansionChangedListener(function (o, b) {
			$self.expansionChanged(b, true);
		});
		this.__expandableCell.expansionType($.ig.CPGridViewItemExpandableType.prototype.tree);
		this.__expandableCell.hasSeparator(false);
		this.__expandableCell.setCornerRadius(0);
		this.contentContainer().addSubview(this.__expandableCell);
		this.__gridView = new $.ig.CPGridView(0);
		this.__gridView._headerHeight = 0;
		this.__gridView._rowSeparatorHeight = 0;
		this.__gridView.alwaysBounceVertical(false);
		this.__gridView.setScrollBarVisiblitity(false, false);
		this.__gridView._rowHeight = this.rowHeight();
		this.setupGrid(this.__gridView);
		this.contentContainer().addSubview(this.__gridView);
		this.__dsh = this.createDSH(function (i) {
			return $self.createCell(i);
		});
		this.__gridView.setDataSource(this.__dsh);
		if (this.shouldApplyShadow()) {
			$.ig.ThemeManager.prototype.theme().applyLevel1Shadow(this.shadowView());
		}
		this.disable();
	},
	/*<BeginProperty Name="Infragistics.CPGridView Infragistics.CPGridViewExpandableCardCell::Grid()" />*/
	grid: function () {
		return this.__gridView;
	}
	/*<EndProperty Name="Infragistics.CPGridView Infragistics.CPGridViewExpandableCardCell::Grid()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::ShouldApplyShadow()" />*/
	shouldApplyShadow: function () {
		return this.supportsShadow();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::ShouldApplyShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetRowHeight(System.Int32)" />*/
	setRowHeight: function (rowHeight) {
		this.__gridView._rowHeight = rowHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetRowHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetupGrid(Infragistics.CPGridView)" />*/
	setupGrid: function (gridView) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetupGrid(Infragistics.CPGridView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetDataList(Infragistics.CPList)" />*/
	setDataList: function (data) {
		this.__dsh.data(data);
		this.updateGrid();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetDataList(Infragistics.CPList)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridView Infragistics.CPGridViewExpandableCardCell::ExpandedGridView()" />*/
	expandedGridView: function () {
		return this.__gridView;
	}
	/*<EndProperty Name="Infragistics.CPGridView Infragistics.CPGridViewExpandableCardCell::ExpandedGridView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateGrid()" />*/
	updateGrid: function () {
		this.__gridView.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateGrid()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPGridViewExpandableCardCell::DSHData()" />*/
	dSHData: function () {
		return this.__dsh.data();
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPGridViewExpandableCardCell::DSHData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateExpandedState(System.Boolean)" />*/
	updateExpandedState: function (expanded) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateExpandedState(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::IsExpanded()" />*/
	isExpanded: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::IsExpanded()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetExpansionState(System.Boolean, System.Boolean)" />*/
	setExpansionState: function (expanded, animate) {
		this.expansionChanged(expanded, animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SetExpansionState(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::ExpansionChanged(System.Boolean, System.Boolean)" />*/
	expansionChanged: function (expanded, animate) {
		this.updateExpandedState(expanded);
		this.updateRow(animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::ExpansionChanged(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateRow(System.Boolean)" />*/
	updateRow: function (animate) {
		this._gridView.updateRowAtIndex(this._path._sectionIndex, this._path._rowIndex, animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::UpdateRow(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewItemExpandableCell Infragistics.CPGridViewExpandableCardCell::CreateExpandableHeaderCell(System.String)" />*/
	createExpandableHeaderCell: function (sizingGuide) {
	}
	/*<EndMethod Name="Infragistics.CPGridViewItemExpandableCell Infragistics.CPGridViewExpandableCardCell::CreateExpandableHeaderCell(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper Infragistics.CPGridViewExpandableCardCell::CreateDSH(Infragistics.CreateNewCellBlock)" />*/
	createDSH: function (createCellBlock) {
		return new $.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper(0, new $.ig.CPGridViewColumnDefinition(3, this, createCellBlock));
	}
	/*<EndMethod Name="Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper Infragistics.CPGridViewExpandableCardCell::CreateDSH(Infragistics.CreateNewCellBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewExpandableCardCell::CreateCell(System.String)" />*/
	createCell: function (i) {
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewExpandableCardCell::CreateCell(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::SupportsShadow()" />*/
	supportsShadow: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewExpandableCardCell::SupportsShadow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemCellBase.prototype.sizeChanged.call(this, w, h);
		this.layoutCard(w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewExpandableCardCell::RowHeight()" />*/
	rowHeight: function () {
		return this.sizingGuide().height();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewExpandableCardCell::RowHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::LayoutCard(System.Int32, System.Int32)" />*/
	layoutCard: function (w, h) {
		var rowHeight = this.rowHeight();
		var top = 0;
		this.contentContainer().measureView1(this.__expandableCell, 0, top, w, rowHeight, 1);
		top += rowHeight;
		if (this.__dsh.data() != null) {
			var count = this.__dsh.data().length;
			var gridHeight = rowHeight * count + (this.__gridView._rowSpacing * (count + 1));
			this.measureGrid(0, top, w, gridHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::LayoutCard(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::MeasureGrid(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureGrid: function (x, y, w, h) {
		this.contentContainer().measureView1(this.__gridView, x, y, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::MeasureGrid(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewExpandableCardCell::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var rowHeight = this.rowHeight();
		var height = rowHeight;
		if (this.__dsh.data() != null && this.isExpanded()) {
			var count = this.__dsh.data().length;
			var gridHeight = rowHeight * count + (this.__gridView._rowSpacing * (count + 1));
			height += gridHeight;
		}
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewExpandableCardCell::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::OnAttached()" />*/
	onAttached: function () {
		$.ig.CPGridViewItemCellBase.prototype.onAttached.call(this);
		this.__expandableCell._gridView = this._gridView;
		this.__expandableCell._path = this._path;
		this.__expandableCell.onAttached();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::OnAttached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::OnDetached()" />*/
	onDetached: function () {
		$.ig.CPGridViewItemCellBase.prototype.onDetached.call(this);
		this.__expandableCell.onDetached();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::OnDetached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::Unload()" />*/
	unload: function () {
		$.ig.CPGridViewItemCellBase.prototype.unload.call(this);
		this.__expandableCell.unload();
		this.__gridView.unload();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::CellClicked(Infragistics.CPGridViewCellBase)" />*/
	cellClicked: function (cell) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::CellClicked(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPGridViewExpandableCardCell::CellResolveOverflowItems(Infragistics.CPGridViewCellBase)" />*/
	cellResolveOverflowItems: function (cell) {
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPGridViewExpandableCardCell::CellResolveOverflowItems(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::CellDataSet(Infragistics.CPGridViewCellBase)" />*/
	cellDataSet: function (cell) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewExpandableCardCell::CellDataSet(Infragistics.CPGridViewCellBase)" />*/
	,
	$type: new $.ig.Type('CPGridViewExpandableCardCell', $.ig.CPGridViewItemCellBase.prototype.$type, [$.ig.CPGridViewCellSetupDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPGridViewExpandableCardCell" />*/

/*<BeginType Name="Infragistics.CPGridViewInsertRowAnimator" />*/

$.ig.util.defType('CPGridViewInsertRowAnimator', 'CPGridViewCellAnimator', {
	__pathToScrollTo: null,
	__insertintAtEnd: false,
	init: function (pathToScrollTo, insertingAtEnd) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__insertintAtEnd = insertingAtEnd;
		this.__pathToScrollTo = pathToScrollTo;
	},
	_hideRowToScrollTo: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		if (this.__insertintAtEnd) {
			var amountToMove = Math.min(this._differenceInVerticalScrollPosition * -1, cell._gridView.currentHeight());
			engine.measureCell(cell, cell._frameX, cell._frameY + amountToMove, cell._frameW, cell._frameH);
		} else {
			if (this.__pathToScrollTo != null && this.__pathToScrollTo._rowIndex == cell._path._rowIndex && this.__pathToScrollTo._sectionIndex == cell._path._sectionIndex) {
				if (this._hideRowToScrollTo) {
					cell._frameOpacity = 0;
				}
			}
			engine.measureCell(cell, cell._frameX, cell._frameY, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		var scrollDiff = this._differenceInVerticalScrollPosition * -1;
		var newTop = cell._frameY + scrollDiff;
		engine.measureCell(cell, cell._frameX, newTop, cell._frameW, cell._frameH);
		if (this.__insertintAtEnd) {
			var gridTop = cell._gridView.getContentOffsetY();
			var viewportHeight = Math.min(cell._gridView.currentHeight(), scrollDiff);
			var diff = Math.max(newTop - gridTop, 0);
			cell.storeFrame(cell._frameX, gridTop - viewportHeight + diff, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, prevX, prevY + this._differenceInVerticalScrollPosition * -1, prevW, prevH);
		} else {
			$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewInsertRowAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewInsertRowAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	adjustVerticalScrollPosition: function (engine, grid, prevContentOffsetY) {
		if (this.__pathToScrollTo != null) {
			if (engine._sections.length > this.__pathToScrollTo._sectionIndex) {
				var section = engine._sections[this.__pathToScrollTo._sectionIndex];
				var rowTop = section.getRowTop(this.__pathToScrollTo._rowIndex);
				var rowHeight = section.getFullRowHeight(this.__pathToScrollTo._rowIndex);
				if (rowTop + rowHeight > grid.getContentOffsetY() + grid.currentHeight()) {
					return (rowTop + rowHeight) - grid.currentHeight();
				} else if (rowTop < grid.getContentOffsetY()) {
					return rowTop;
				}
			}
		}
		return $.ig.CPGridViewCellAnimator.prototype.adjustVerticalScrollPosition.call(this, engine, grid, prevContentOffsetY);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewInsertRowAnimator::AdjustVerticalScrollPosition(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridView, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewInsertRowAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewInsertRowAnimator" />*/

/*<BeginType Name="Infragistics.CPCheckedItemStateDelegate" />*/

$.ig.util.defType('CPCheckedItemStateDelegate', 'Object', {
	$type: new $.ig.Type('CPCheckedItemStateDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPCheckedItemStateDelegate" />*/

/*<BeginType Name="Infragistics.CPGridViewItemIconCell" />*/

$.ig.util.defType('CPGridViewItemIconCell', 'CPGridViewItemCell', {
	__iconView: null,
	__icon: null,
	__isDirty: false,
	init: function (itemGuideStyle, identifier) {
		$.ig.CPGridViewItemCell.prototype.init.call(this, itemGuideStyle, identifier);
		$.ig.UIUtility.prototype.setAccessibilityName1(this, identifier);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::EnsureIconView()" />*/
	ensureIconView: function () {
		if (this.__iconView == null) {
			this.__iconView = this.createIconView();
			this.__iconView.iconColor(this.foregroundColor().$native());
			this.__iconView._outlineOnly = false;
			this.contentContainer().addSubview(this.__iconView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::EnsureIconView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetColor(Infragistics.CPThemeColor)" />*/
	setColor: function (color) {
		$.ig.CPGridViewItemCell.prototype.setColor.call(this, color);
		if (this.__iconView != null) {
			this.__iconView.iconColor(this.foregroundColor().$native());
		}
		this.__isDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconColor(System.ColorInt)" />*/
	setIconColor: function (color) {
		this.__iconView.iconColor($.ig.ColorUtility.prototype.convertToNative(color));
		;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconColor(System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconDesaturatePercent(System.Double)" />*/
	setIconDesaturatePercent: function (percent) {
		this.ensureIconView();
		this.__iconView._desaturatePercent = percent;
		this.__isDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconDesaturatePercent(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LightenOrDarkenIconColorByPercentage(System.Boolean, System.Double)" />*/
	lightenOrDarkenIconColorByPercentage: function (lighten, percentage) {
		this.ensureIconView();
		this.__iconView.lightenOrDarkenIconColorByPercentage(lighten, percentage);
		this.__isDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LightenOrDarkenIconColorByPercentage(System.Boolean, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIconView Infragistics.CPGridViewItemIconCell::CreateIconView()" />*/
	createIconView: function () {
		return new $.ig.PathIconView();
	}
	/*<EndMethod Name="Infragistics.PathIconView Infragistics.CPGridViewItemIconCell::CreateIconView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconOutline(System.Boolean)" />*/
	setIconOutline: function (outline) {
		this.ensureIconView();
		this.__iconView._outlineOnly = outline;
		this.__isDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIconOutline(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIcon(Infragistics.PathIcon)" />*/
	setIcon: function (icon) {
		this.ensureIconView();
		this.__icon = icon;
		this.__iconView.setIcon(icon);
		this.__isDirty = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::SetIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.CPGridViewItemIconCell::GetIcon()" />*/
	getIcon: function () {
		return this.__icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.CPGridViewItemIconCell::GetIcon()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemIconCell::HasIcon()" />*/
	hasIcon: function () {
		return this.__icon != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemIconCell::HasIcon()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::RefreshIcon()" />*/
	refreshIcon: function () {
		if (this.__isDirty) {
			this.iconView().render1(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::RefreshIcon()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LayoutCell()" />*/
	layoutCell: function () {
		if (this.__isDirty) {
			this.__isDirty = false;
			this.iconView().render1(false);
		}
		$.ig.CPGridViewItemCell.prototype.layoutCell.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LayoutCell()" />*/
	,
	/*<BeginProperty Name="Infragistics.PathIconView Infragistics.CPGridViewItemIconCell::IconView()" />*/
	iconView: function () {
		this.ensureIconView();
		return this.__iconView;
	}
	/*<EndProperty Name="Infragistics.PathIconView Infragistics.CPGridViewItemIconCell::IconView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemIconCell::HasLeftContent()" />*/
	hasLeftContent: function () {
		return this.__iconView != null && this.__icon != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemIconCell::HasLeftContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemIconCell::IconLayoutIndex()" />*/
	iconLayoutIndex: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemIconCell::IconLayoutIndex()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutLeftContentArea: function (index, x, guide) {
		if (!this.layoutIcon(this.__iconView, this.iconLayoutIndex(), index, x, guide)) {
			$.ig.CPGridViewItemCell.prototype.layoutLeftContentArea.call(this, index, x, guide);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemIconCell::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPGridViewItemIconCell', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemIconCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemCheckBoxCell" />*/

$.ig.util.defType('CPGridViewItemCheckBoxCell', 'CPGridViewItemIconCell', {
	__editMode: 0,
	__checkBox: null,
	__isAttached: false,
	__checkedStateSelectsCell: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::IsRadioButton()" />*/
	isRadioButton: function (value) {
		if (arguments.length === 1) {
			this.__checkBox._isRadioButton = value;
			return value;
		} else {
			return this.__checkBox._isRadioButton;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::IsRadioButton()" />*/
	,
	__checkedStateDelegate: null,
	/*<BeginProperty Name="Infragistics.CPCheckedItemStateDelegate Infragistics.CPGridViewItemCheckBoxCell::CheckedStateDelegate()" />*/
	checkedStateDelegate: function (value) {
		if (arguments.length === 1) {
			this.__checkedStateDelegate = value;
			return value;
		} else {
			return this.__checkedStateDelegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPCheckedItemStateDelegate Infragistics.CPGridViewItemCheckBoxCell::CheckedStateDelegate()" />*/
	,
	init: function (itemGuideStyle, identifier) {
		var $self = this;
		$.ig.CPGridViewItemIconCell.prototype.init.call(this, itemGuideStyle, identifier);
		this.__checkedStateSelectsCell = true;
		this.__editMode = $.ig.CPGridViewCheckBoxEditMode.prototype.none;
		this.__checkBox = new $.ig.CPCheckBox(1, this.sizingGuide().buttonStyleName());
		this.__checkBox.ignoreDisabledOpacity(true);
		this.__checkBox.addClickHandler(function (x, y) {
			$self.checkBoxClicked();
		});
		this.__checkBox.addInteractionStateChangedHandler(function () {
			$self.checkBoxInteractionStateChanged();
		});
		this.contentContainer().addSubview(this.__checkBox);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckBoxInteractionStateChanged()" />*/
	checkBoxInteractionStateChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckBoxInteractionStateChanged()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPCheckBox Infragistics.CPGridViewItemCheckBoxCell::CheckBox()" />*/
	checkBox: function () {
		return this.__checkBox;
	}
	/*<EndProperty Name="Infragistics.CPCheckBox Infragistics.CPGridViewItemCheckBoxCell::CheckBox()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OnAttached()" />*/
	onAttached: function () {
		$.ig.CPGridViewItemIconCell.prototype.onAttached.call(this);
		this.__isAttached = true;
		this.ensureChecked(this.editMode());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OnAttached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OnDetached()" />*/
	onDetached: function () {
		$.ig.CPGridViewItemIconCell.prototype.onDetached.call(this);
		this.__isAttached = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OnDetached()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureChecked(Infragistics.CPGridViewCheckBoxEditMode)" />*/
	ensureChecked: function (editMode) {
		if (editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none) {
			if (this.checkedStateDelegate() != null) {
				this.setCheckedState(this.checkedStateDelegate().isCellChecked(this));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureChecked(Infragistics.CPGridViewCheckBoxEditMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::SetCheckedState(Infragistics.CPCheckedState)" />*/
	setCheckedState: function (state) {
		this.__checkBox.setChecked(state);
		if (this.checkedStateSelectsCell()) {
			this.forceInteractionState(this.hasCheckedCheckBox(), this.isInMouseDownState());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::SetCheckedState(Infragistics.CPCheckedState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		if (this.__editMode == $.ig.CPGridViewCheckBoxEditMode.prototype.entireCellIsHitArea) {
			this.checkBoxClicked();
		}
		$.ig.CPGridViewItemIconCell.prototype.handleClick.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckBoxClicked()" />*/
	checkBoxClicked: function () {
		if (!this.isRadioButton() || this.__checkBox.state() != $.ig.CPCheckedState.prototype.checked) {
			this.__checkBox.setChecked(this.__checkBox.state() == $.ig.CPCheckedState.prototype.checked ? $.ig.CPCheckedState.prototype.notChecked : $.ig.CPCheckedState.prototype.checked);
			this.checkStateChanged(this.__checkBox.state());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckBoxClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckStateChanged(Infragistics.CPCheckedState)" />*/
	checkStateChanged: function (state) {
		if (this.checkedStateDelegate() != null) {
			this.checkedStateDelegate().cellCheckedStateChanged(this, state);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::CheckStateChanged(Infragistics.CPCheckedState)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPCheckedState Infragistics.CPGridViewItemCheckBoxCell::CheckBoxState()" />*/
	checkBoxState: function () {
		return this.__checkBox.state();
	}
	/*<EndProperty Name="Infragistics.CPCheckedState Infragistics.CPGridViewItemCheckBoxCell::CheckBoxState()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewCheckBoxEditMode Infragistics.CPGridViewItemCheckBoxCell::EditMode()" />*/
	editMode: function (value) {
		if (arguments.length === 1) {
			this.__editMode = value;
			if (this.__isAttached) {
				this.ensureChecked(value);
			}
			this.ensureCheckBoxState();
			this.layoutCell();
			return value;
		} else {
			return this.__editMode;
		}
	}
	/*<EndProperty Name="Infragistics.CPGridViewCheckBoxEditMode Infragistics.CPGridViewItemCheckBoxCell::EditMode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureCheckBoxState()" />*/
	ensureCheckBoxState: function () {
		if (this.__editMode == $.ig.CPGridViewCheckBoxEditMode.prototype.checkBoxHitArea) {
			this.__checkBox.enable();
		} else {
			this.__checkBox.disable();
			this.__checkBox.setCursor($.ig.CPCursors.prototype.clickable);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureCheckBoxState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::Disable()" />*/
	disable: function () {
		$.ig.CPGridViewItemIconCell.prototype.disable.call(this);
		this.__checkBox.disable();
		this.__checkBox.setCursor($.ig.CPCursors.prototype.$default);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::Enable()" />*/
	enable: function () {
		$.ig.CPGridViewItemIconCell.prototype.enable.call(this);
		this.ensureCheckBoxState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::Enable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasRightContent()" />*/
	hasRightContent: function () {
		return (this.__editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none) || $.ig.CPGridViewItemIconCell.prototype.hasRightContent.call(this);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		var count = $.ig.CPGridViewItemIconCell.prototype.numberOfItemsInRightContentArea.call(this);
		if (this.__editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none) {
			if (this.isOverflowVisible()) {
				count++;
			} else {
				count = 1;
			}
		}
		return count;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::NumberOfItemsInRightContentArea()" />*/
	,
	_checkBoxBeforeOverflow: false,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::OverflowButtonLayoutIndex()" />*/
	overflowButtonLayoutIndex: function () {
		if (this.__editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none) {
			if (this.isOverflowVisible()) {
				if (this._checkBoxBeforeOverflow) {
					return 0;
				}
				return 1;
			}
		}
		return $.ig.CPGridViewItemIconCell.prototype.overflowButtonLayoutIndex.call(this);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::OverflowButtonLayoutIndex()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::CheckBoxLayoutIndex()" />*/
	checkBoxLayoutIndex: function () {
		if (this.__editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none) {
			if (this._checkBoxBeforeOverflow && this.isOverflowVisible()) {
				return 1;
			}
			return 0;
		}
		return -1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewItemCheckBoxCell::CheckBoxLayoutIndex()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasCheckBox()" />*/
	hasCheckBox: function () {
		return (this.__editMode != $.ig.CPGridViewCheckBoxEditMode.prototype.none);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasCheckBox()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasCheckedCheckBox()" />*/
	hasCheckedCheckBox: function () {
		return this.hasCheckBox() && this.checkBoxState() == $.ig.CPCheckedState.prototype.checked;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::HasCheckedCheckBox()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		if (this.checkedStateSelectsCell() && this.hasCheckedCheckBox()) {
			over = true;
		}
		$.ig.CPGridViewItemIconCell.prototype.updateInteractionStates1.call(this, over, mouseDown);
		this.ensureCheckBoxInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::ShouldCheckBoxHaveHoverPressedStates()" />*/
	shouldCheckBoxHaveHoverPressedStates: function () {
		return !this.isOverflowVisible() || !(this.overFlowButton().isInHoverState() || this.overFlowButton().isInMouseDownState());
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::ShouldCheckBoxHaveHoverPressedStates()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::CheckedStateSelectsCell()" />*/
	checkedStateSelectsCell: function (value) {
		if (arguments.length === 1) {
			this.__checkedStateSelectsCell = value;
			return value;
		} else {
			return this.__checkedStateSelectsCell;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemCheckBoxCell::CheckedStateSelectsCell()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureCheckBoxInteractionState()" />*/
	ensureCheckBoxInteractionState: function () {
		if (this.__editMode == $.ig.CPGridViewCheckBoxEditMode.prototype.entireCellIsHitArea) {
			if (this.shouldCheckBoxHaveHoverPressedStates()) {
				this.__checkBox.forceInteractionState(this.isInHoverState(), this.isInMouseDownState());
			} else {
				this.__checkBox.clearHover();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::EnsureCheckBoxInteractionState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OverFlowButtonInteractionStateChanged()" />*/
	overFlowButtonInteractionStateChanged: function () {
		$.ig.CPGridViewItemIconCell.prototype.overFlowButtonInteractionStateChanged.call(this);
		this.ensureCheckBoxInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::OverFlowButtonInteractionStateChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		if (!this.layoutButton1(this.__checkBox, this.checkBoxLayoutIndex(), false, true, index, x, guide)) {
			$.ig.CPGridViewItemIconCell.prototype.layoutRightContentArea.call(this, index, x, guide);
		}
		this.__checkBox.isHidden((this.checkBoxLayoutIndex() < 0));
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::HideRightContent()" />*/
	hideRightContent: function () {
		$.ig.CPGridViewItemIconCell.prototype.hideRightContent.call(this);
		this.__checkBox.isHidden(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemCheckBoxCell::HideRightContent()" />*/
	,
	$type: new $.ig.Type('CPGridViewItemCheckBoxCell', $.ig.CPGridViewItemIconCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemCheckBoxCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemDropDownCell" />*/

$.ig.util.defType('CPGridViewItemDropDownCell', 'CPGridViewItemCheckBoxCell', {
	__rightButton: null,
	__rightButtonClickAction: null,
	__isEditable: false,
	__rightButtonHitArea: 0,
	init: function (itemGuideStyle, cellId) {
		var $self = this;
		$.ig.CPGridViewItemCheckBoxCell.prototype.init.call(this, itemGuideStyle, cellId);
		this.__rightButton = this.createRightButton();
		this.__rightButton.ignoreDisabledOpacity(true);
		this.__rightButton.setCursor($.ig.CPCursors.prototype.$default);
		this.__rightButton.addClickHandler(function (x, y) {
			$self.rightButtonClicked(x, y);
		});
		this.contentContainer().addSubview(this.__rightButton);
		this.isEditable(true);
		this.rightButtonHitArea($.ig.CPGridViewCellItemHitArea.prototype.entireCell);
	},
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPGridViewItemDropDownCell::CreateRightButton()" />*/
	createRightButton: function () {
		return new $.ig.CPIconLabelButton(0, this.sizingGuide().buttonGuide().name(), this.buttonStyle());
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPGridViewItemDropDownCell::CreateRightButton()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPIconButtonStyle Infragistics.CPGridViewItemDropDownCell::ButtonStyle()" />*/
	buttonStyle: function () {
		return $.ig.CPIconButtonStyle.prototype.standard;
	}
	/*<EndProperty Name="Infragistics.CPIconButtonStyle Infragistics.CPGridViewItemDropDownCell::ButtonStyle()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemDropDownCell::ButtonHasDropDownIndicator()" />*/
	buttonHasDropDownIndicator: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemDropDownCell::ButtonHasDropDownIndicator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemDropDownCell::IsEditable()" />*/
	isEditable: function (value) {
		if (arguments.length === 1) {
			this.__isEditable = value;
			if (this.__isEditable) {
				if (this.buttonHasDropDownIndicator()) {
					this.__rightButton.showDropDownButton();
				}
				if (this.rightButtonHitArea() == $.ig.CPGridViewCellItemHitArea.prototype.itemOnly) {
					this.__rightButton.enable();
				}
			} else {
				this.__rightButton.hideDropDownButton();
				if (this.rightButtonHitArea() == $.ig.CPGridViewCellItemHitArea.prototype.itemOnly) {
					this.__rightButton.disable();
				}
				this.__rightButton.setCursor($.ig.CPCursors.prototype.$default);
			}
			return value;
		} else {
			return this.__isEditable;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemDropDownCell::IsEditable()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPIconLabelButton Infragistics.CPGridViewItemDropDownCell::RightButton()" />*/
	rightButton: function () {
		return this.__rightButton;
	}
	/*<EndProperty Name="Infragistics.CPIconLabelButton Infragistics.CPGridViewItemDropDownCell::RightButton()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetButtonText(System.String)" />*/
	setButtonText: function (text) {
		this.__rightButton.setText(text);
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetButtonText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetButtonIcon(Infragistics.PathIcon)" />*/
	setButtonIcon: function (icon) {
		this.__rightButton.setIcon(icon);
		this.__rightButton.update();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetButtonIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetDropDownButtonClickAction(Infragistics.PointExecutionBlock)" />*/
	setDropDownButtonClickAction: function (action) {
		this.__rightButtonClickAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::SetDropDownButtonClickAction(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewCellItemHitArea Infragistics.CPGridViewItemDropDownCell::RightButtonHitArea()" />*/
	rightButtonHitArea: function (value) {
		if (arguments.length === 1) {
			this.__rightButtonHitArea = value;
			if (this.__rightButtonHitArea == $.ig.CPGridViewCellItemHitArea.prototype.entireCell || !this.__isEditable) {
				this.__rightButton.disable();
				this.__rightButton.setCursor($.ig.CPCursors.prototype.clickable);
			} else {
				this.__rightButton.enable();
			}
			return value;
		} else {
			return this.__rightButtonHitArea;
		}
	}
	/*<EndProperty Name="Infragistics.CPGridViewCellItemHitArea Infragistics.CPGridViewItemDropDownCell::RightButtonHitArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.updateInteractionStates1.call(this, over, mouseDown);
		this.ensureExpansionInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::EnsureExpansionInteractionState()" />*/
	ensureExpansionInteractionState: function () {
		if (this.rightButtonHitArea() == $.ig.CPGridViewCellItemHitArea.prototype.entireCell) {
			if (this.isOverflowVisible() && this.overFlowButton().isInHoverState()) {
				this.__rightButton.clearHover();
			} else {
				this.__rightButton.forceInteractionState(this.isInHoverState(), this.isInMouseDownState());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::EnsureExpansionInteractionState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::RightButtonClicked(System.Int32, System.Int32)" />*/
	rightButtonClicked: function (x, y) {
		if (this.__rightButtonClickAction != null) {
			this.__rightButtonClickAction(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemDropDownCell::RightButtonClicked(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemDropDownCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	textLabelAreaChanged: function (x, y, w, h) {
		this.__rightButton.calculateSizeToFit();
		var bw = this.__rightButton.getCalculatedWidth();
		var bh = this.__rightButton.getCalculatedHeight();
		var padding = $.ig.ThemeManager.prototype.theme().padding10();
		var left = x + (w - bw);
		w -= (bw + padding * 2);
		this.contentContainer().measureView1(this.__rightButton, left, $.ig.intDivide(this.currentHeight(), 2) - $.ig.intDivide(bh, 2), bw, bh, this.resolveRightButtonOpacity());
		return w;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemDropDownCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPGridViewItemDropDownCell::ResolveRightButtonOpacity()" />*/
	resolveRightButtonOpacity: function () {
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPGridViewItemDropDownCell::ResolveRightButtonOpacity()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPGridViewItemDropDownCell::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.CPGridViewItemCheckBoxCell.prototype.accessibilityName.call(this, value);
			$.ig.UIUtility.prototype.setAccessibilityName2(this.__rightButton, "dropDown_", value);
			return value;
		} else {
			return $.ig.CPGridViewItemCheckBoxCell.prototype.accessibilityName.call(this);
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewItemDropDownCell::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPGridViewItemDropDownCell', $.ig.CPGridViewItemCheckBoxCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemDropDownCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemExpandableCell" />*/

$.ig.util.defType('CPGridViewItemExpandableCell', 'CPGridViewItemCheckBoxCell', {
	__expansionIndicator: null,
	__isExpanded: false,
	__separator: null,
	__separatorSize: 0,
	__expansionHitArea: 0,
	__expansionType: 0,
	__expansionChangedBlock: null,
	init: function (itemGuideStyle, identifier) {
		var $self = this;
		$.ig.CPGridViewItemCheckBoxCell.prototype.init.call(this, itemGuideStyle, identifier);
		this.__isExpanded = true;
		this.__expandable = true;
		this.__separatorSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
		this.__separator = new $.ig.CPViewBase();
		this.__separator.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.__separator.isHidden(true);
		this.contentContainer().addSubview(this.__separator);
		this.__expansionIndicator = new $.ig.CPIconButton(0, this.expansionIndicatorSizingGuide(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__expansionIndicator.ignoreDisabledOpacity(true);
		this.__expansionIndicator.addClickHandler(function (x, y) {
			$self.expansionClicked();
		});
		this.contentContainer().addSubview(this.__expansionIndicator);
		this.expansionType($.ig.CPGridViewItemExpandableType.prototype.header);
		this.expansionHitArea($.ig.CPGridViewCellItemHitArea.prototype.entireCell);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	applyInteractionColorSet: function (colorSet) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.applyInteractionColorSet.call(this, colorSet);
		this.__expansionIndicator.applyInteractionColorSet(colorSet);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ApplyInteractionColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPGridViewItemExpandableCell::ExpansionIndicatorSizingGuide()" />*/
	expansionIndicatorSizingGuide: function () {
		return this.sizingGuide().buttonStyleName();
	}
	/*<EndProperty Name="System.String Infragistics.CPGridViewItemExpandableCell::ExpansionIndicatorSizingGuide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::AddExpansionChangedListener(Infragistics.ObjectBoolBlock)" />*/
	addExpansionChangedListener: function (action) {
		this.__expansionChangedBlock = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::AddExpansionChangedListener(Infragistics.ObjectBoolBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetColor(Infragistics.CPThemeColor)" />*/
	setColor: function (color) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.setColor.call(this, color);
		this.__expansionIndicator.setColor(this.foregroundColor().$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetColor(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetSeparatorColor(Infragistics.CPThemeColor)" />*/
	setSeparatorColor: function (color) {
		this.__separator.setBackgroundColor(color.$native());
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetSeparatorColor(Infragistics.CPThemeColor)" />*/
	,
	_useChevronIconForTreeType: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::UseChevronIconForTreeType()" />*/
	useChevronIconForTreeType: function (value) {
		if (arguments.length === 1) {
			this._useChevronIconForTreeType = value;
			return value;
		} else {
			return this._useChevronIconForTreeType;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::UseChevronIconForTreeType()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewItemExpandableType Infragistics.CPGridViewItemExpandableCell::ExpansionType()" />*/
	expansionType: function (value) {
		if (arguments.length === 1) {
			this.__expansionType = value;
			if (this.__expansionType == $.ig.CPGridViewItemExpandableType.prototype.tree) {
				this.disableBackgroundHighlights(false);
				if (this.useChevronIconForTreeType()) {
					this.__expansionIndicator.setIcon($.ig.UIPathIcons.prototype.icons().getChevronRightIcon());
				} else {
					this.__expansionIndicator.setIcon($.ig.UIPathIcons.prototype.icons().getTreeexpansionindicatorIcon());
				}
			} else {
				this.disableBackgroundHighlights(true);
				this.__expansionIndicator.setIcon($.ig.UIPathIcons.prototype.icons().getChevronUpIcon());
			}
			this.updateExpansionState(false);
			this.triggerSizeChanged();
			return value;
		} else {
			return this.__expansionType;
		}
	}
	/*<EndProperty Name="Infragistics.CPGridViewItemExpandableType Infragistics.CPGridViewItemExpandableCell::ExpansionType()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewCellItemHitArea Infragistics.CPGridViewItemExpandableCell::ExpansionHitArea()" />*/
	expansionHitArea: function (value) {
		if (arguments.length === 1) {
			this.__expansionHitArea = value;
			if (this.__expansionHitArea == $.ig.CPGridViewCellItemHitArea.prototype.entireCell) {
				this.__expansionIndicator.disable();
				this.__expansionIndicator.setCursor($.ig.CPCursors.prototype.clickable);
				this.__expansionIndicator.restOpacity(1);
			} else {
				this.__expansionIndicator.enable();
				this.__expansionIndicator.restOpacity($.ig.ThemeManager.prototype.theme().restOpacity());
			}
			return value;
		} else {
			return this.__expansionHitArea;
		}
	}
	/*<EndProperty Name="Infragistics.CPGridViewCellItemHitArea Infragistics.CPGridViewItemExpandableCell::ExpansionHitArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	updateInteractionStates1: function (over, mouseDown) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.updateInteractionStates1.call(this, over, mouseDown);
		this.ensureExpansionInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateInteractionStates(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::EnsureExpansionInteractionState()" />*/
	ensureExpansionInteractionState: function () {
		if (this.expansionHitArea() == $.ig.CPGridViewCellItemHitArea.prototype.entireCell) {
			if ((this.isOverflowVisible() && this.overFlowButton().isInHoverState()) || this.checkBox().isInHoverState()) {
				this.__expansionIndicator.clearHover();
			} else {
				this.__expansionIndicator.forceInteractionState(this.isInHoverState(), this.isInMouseDownState());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::EnsureExpansionInteractionState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::OverFlowButtonInteractionStateChanged()" />*/
	overFlowButtonInteractionStateChanged: function () {
		$.ig.CPGridViewItemCheckBoxCell.prototype.overFlowButtonInteractionStateChanged.call(this);
		this.ensureExpansionInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::OverFlowButtonInteractionStateChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::CheckBoxInteractionStateChanged()" />*/
	checkBoxInteractionStateChanged: function () {
		$.ig.CPGridViewItemCheckBoxCell.prototype.checkBoxInteractionStateChanged.call(this);
		this.ensureExpansionInteractionState();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::CheckBoxInteractionStateChanged()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::CapturesFocus()" />*/
	capturesFocus: function () {
		return this.isExpandable();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::CapturesFocus()" />*/
	,
	__expandable: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsExpandable()" />*/
	isExpandable: function (value) {
		if (arguments.length === 1) {
			this.__expandable = value;
			this.__expansionIndicator.isHidden(!this.__expandable);
			return value;
		} else {
			return this.__expandable;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsExpandable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasSeparator()" />*/
	hasSeparator: function (value) {
		if (arguments.length === 1) {
			this.__separator.isHidden(!value);
			return value;
		} else {
			return !this.__separator.isHidden();
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasSeparator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsExpanded()" />*/
	isExpanded: function (value) {
		if (arguments.length === 1) {
			this.setExpandedInternal(value, false);
			return value;
		} else {
			return this.__isExpanded;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsExpanded()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::Indent()" />*/
	indent: function (value) {
		if (arguments.length === 1) {
			$.ig.CPGridViewItemCheckBoxCell.prototype.indent.call(this, value);
			return value;
		} else {
			return this.hasIndentContent() || $.ig.CPGridViewItemCheckBoxCell.prototype.indent.call(this);
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::Indent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasIndentContent()" />*/
	hasIndentContent: function () {
		return this.isExpandable();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasIndentContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetExpandedInternal(System.Boolean, System.Boolean)" />*/
	setExpandedInternal: function (value, animate) {
		if (this.__isExpanded != value) {
			this.__isExpanded = value;
			this.expansionStateChaged();
		}
		this.updateExpansionState(animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SetExpandedInternal(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ExpansionStateChaged()" />*/
	expansionStateChaged: function () {
		if (this._autoExpandCollapseSection && this._path != null && this._gridView != null) {
			this._gridView.getDataSource().updateSectionExpandedState(this._path._sectionIndex, this.__isExpanded);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ExpansionStateChaged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateExpansionStateQuietly(System.Boolean, System.Boolean)" />*/
	updateExpansionStateQuietly: function (isExpanded, animate) {
		this.__isExpanded = isExpanded;
		this.updateExpansionState(animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateExpansionStateQuietly(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateExpansionState(System.Boolean)" />*/
	updateExpansionState: function (animate) {
		if (this.__expansionType == $.ig.CPGridViewItemExpandableType.prototype.header) {
			this.__expansionIndicator.setRotation(this.__isExpanded ? 0 : 180, animate);
		} else {
			this.__expansionIndicator.setRotation(this.__isExpanded ? 90 : 0, animate);
		}
		if (this.__isExpanded) {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__expansionIndicator, "expansionIndicator_expanded");
		} else {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__expansionIndicator, "expansionIndicator_collapsed");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::UpdateExpansionState(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutIndentContentArea: function (x, guide) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.layoutIndentContentArea.call(this, x, guide);
		var itemOnly = (this.__expansionHitArea == $.ig.CPGridViewCellItemHitArea.prototype.itemOnly);
		this.layoutButton(this.__expansionIndicator, !itemOnly, !itemOnly, x, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPIconButton Infragistics.CPGridViewItemExpandableCell::ExpansionIndicator()" />*/
	expansionIndicator: function () {
		return this.__expansionIndicator;
	}
	/*<EndProperty Name="Infragistics.CPIconButton Infragistics.CPGridViewItemExpandableCell::ExpansionIndicator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasRightContent()" />*/
	hasRightContent: function () {
		var val = $.ig.CPGridViewItemCheckBoxCell.prototype.hasRightContent.call(this);
		if (this.isExpandable()) {
			val = val || this.__expansionType == $.ig.CPGridViewItemExpandableType.prototype.header;
		}
		return val;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::SupportsLeftEdgeIndentPadding()" />*/
	supportsLeftEdgeIndentPadding: function () {
		if (this.isExpandable()) {
			return this.__expansionHitArea == $.ig.CPGridViewCellItemHitArea.prototype.itemOnly;
		}
		return $.ig.CPGridViewItemCheckBoxCell.prototype.supportsLeftEdgeIndentPadding.call(this);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::SupportsLeftEdgeIndentPadding()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsOverInteractionArea(System.Int32, System.Int32)" />*/
	isOverInteractionArea: function (x, y) {
		if (this.__expansionHitArea == $.ig.CPGridViewCellItemHitArea.prototype.itemOnly && this.__expansionType == $.ig.CPGridViewItemExpandableType.prototype.tree) {
			var limit = this.__expansionIndicator.currentX() + this.__expansionIndicator.currentWidth();
			if (x < limit) {
				return false;
			}
		}
		return $.ig.CPGridViewItemCheckBoxCell.prototype.isOverInteractionArea.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemExpandableCell::IsOverInteractionArea(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.sizeChanged.call(this, w, h);
		this.contentContainer().measureView1(this.__separator, 0, h - this.__separatorSize, w, this.__separatorSize, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPGridViewItemCheckBoxCell.prototype.handleClick.call(this, x, y);
		if (this.__expandable && this.__expansionHitArea == $.ig.CPGridViewCellItemHitArea.prototype.entireCell) {
			this.expansionClicked();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ExpansionClicked()" />*/
	expansionClicked: function () {
		this.setExpandedInternal(!this.__isExpanded, true);
		this.animateRowExpansion(this.__isExpanded, true, -1, null);
		if (this.__expansionChangedBlock != null) {
			this.__expansionChangedBlock(this.data(), this.__isExpanded);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::ExpansionClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::Cleanup()" />*/
	cleanup: function () {
		$.ig.CPGridViewItemCheckBoxCell.prototype.cleanup.call(this);
		if (this.__expansionIndicator != null) {
			this.__expansionIndicator.resetInteractionStates();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::Cleanup()" />*/
	,
	_autoExpandCollapseSection: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::AnimateRowExpansion(System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	animateRowExpansion: function (isExpanded, adjustScrollPositions, duration, finished) {
		if (isExpanded != this.__isExpanded) {
			this.setExpandedInternal(isExpanded, true);
		}
		if (this._autoExpandCollapseSection && this._gridView != null) {
			this._gridView.expandCollapseSection(this._path._sectionIndex, isExpanded, adjustScrollPositions, duration, finished);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemExpandableCell::AnimateRowExpansion(System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	$type: new $.ig.Type('CPGridViewItemExpandableCell', $.ig.CPGridViewItemCheckBoxCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemExpandableCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemSectionHeaderCell" />*/

$.ig.util.defType('CPGridViewItemSectionHeaderCell', 'CPGridViewItemCell', {
	init: function (initNumber, sizingGuide, identifier) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewItemSectionHeaderCell.prototype.init1.call(this, 1, sizingGuide, identifier, true);
	},
	init1: function (initNumber, sizingGuide, identifier, canBeRecycled) {
		$.ig.CPGridViewItemCell.prototype.init.call(this, sizingGuide, identifier);
		this.isFocusable(false);
		this.__canBeRecycled = canBeRecycled;
		this.ignoreDisabledOpacity(true);
		this.disable();
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.font($.ig.ThemeManager.prototype.theme().boldFont());
	},
	__canBeRecycled: false,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemSectionHeaderCell::CanBeRecycled()" />*/
	canBeRecycled: function () {
		return this.__canBeRecycled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemSectionHeaderCell::CanBeRecycled()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemSectionHeaderCell::CapturesFocus()" />*/
	capturesFocus: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemSectionHeaderCell::CapturesFocus()" />*/
	,
	$type: new $.ig.Type('CPGridViewItemSectionHeaderCell', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemSectionHeaderCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemTextBoxCell" />*/

$.ig.util.defType('CPGridViewItemTextBoxCell', 'CPDialogTextBox', {
	init: function (initNumber, sizingGuide, identifier) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewItemTextBoxCell.prototype.init1.call(this, 1, false, sizingGuide, identifier);
	},
	init1: function (initNumber, multiLine, sizingGuide, identifier) {
		$.ig.CPDialogTextBox.prototype.init1.call(this, 1, multiLine, sizingGuide, identifier);
	},
	$type: new $.ig.Type('CPGridViewItemTextBoxCell', $.ig.CPDialogTextBox.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemTextBoxCell" />*/

/*<BeginType Name="Infragistics.CPGridViewItemTreeCell" />*/

$.ig.util.defType('CPGridViewItemTreeCell', 'CPGridViewItemExpandableCell', {
	__progressView: null,
	init: function (itemGuideStyle, identifier) {
		$.ig.CPGridViewItemExpandableCell.prototype.init.call(this, itemGuideStyle, identifier);
		this.indent(true);
		this.expansionType($.ig.CPGridViewItemExpandableType.prototype.tree);
		this.__progressView = new $.ig.ProgressView(true);
		this.__progressView.isHidden(true);
		this.addSubview(this.__progressView);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewItemTreeCell::HasIndentContent()" />*/
	hasIndentContent: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewItemTreeCell::HasIndentContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::ExpansionStateChaged()" />*/
	expansionStateChaged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::ExpansionStateChaged()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewItemTreeCell::GetChangeCount(System.Boolean)" />*/
	getChangeCount: function (isExpanded) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewItemTreeCell::GetChangeCount(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::AnimateRowExpansion(System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	animateRowExpansion: function (isExpanded, adjustScrollPositions, duration, finished) {
		if (this.isReadyToExpand()) {
			var count = this.getChangeCount(isExpanded);
			this.animateExpandCollapse(isExpanded, count);
		} else {
			this.loadDataForExpansion();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::AnimateRowExpansion(System.Boolean, System.Boolean, System.Double, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::ReadyToExpandCollapse()" />*/
	readyToExpandCollapse: function () {
		this.__progressView.isHidden(true);
		this.__progressView.stop();
		this.triggerSizeChanged();
		var count = this.getChangeCount(this.isExpanded());
		this.animateExpandCollapse(this.isExpanded(), count);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::ReadyToExpandCollapse()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewItemTreeCell::IsReadyToExpand()" />*/
	isReadyToExpand: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewItemTreeCell::IsReadyToExpand()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::LoadDataForExpansion()" />*/
	loadDataForExpansion: function () {
		this.__progressView.isHidden(false);
		this.triggerSizeChanged();
		this.__progressView.start();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::LoadDataForExpansion()" />*/
	,
	__actualData: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::DataSet()" />*/
	dataSet: function () {
		this.__actualData = this.data();
		$.ig.CPGridViewItemExpandableCell.prototype.dataSet.call(this);
		if (this.isExpanded() && !this.isReadyToExpand()) {
			this.loadDataForExpansion();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::DataSet()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutIndentContentArea: function (x, guide) {
		$.ig.CPGridViewItemExpandableCell.prototype.layoutIndentContentArea.call(this, x, guide);
		this.layoutButton(this.__progressView, false, false, x, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::LayoutIndentContentArea(System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::AnimateExpandCollapse(System.Boolean, System.Int32)" />*/
	animateExpandCollapse: function (isExpanded, count) {
		this._gridView.toggleRowExpansion(this._path, count, isExpanded);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::AnimateExpandCollapse(System.Boolean, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::Cleanup()" />*/
	cleanup: function () {
		$.ig.CPGridViewItemExpandableCell.prototype.cleanup.call(this);
		this.__progressView.isHidden(true);
		this.__progressView.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewItemTreeCell::Cleanup()" />*/
	,
	$type: new $.ig.Type('CPGridViewItemTreeCell', $.ig.CPGridViewItemExpandableCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewItemTreeCell" />*/

/*<BeginType Name="Infragistics.CPGridViewLayoutEngine" />*/

$.ig.util.defType('CPGridViewLayoutEngine', 'Object', {
	__availableCells: null,
	_sections: null,
	_columns: null,
	_fixedLeftColumns: null,
	_fixedRightColumns: null,
	__fixedLeftColumnTotalWidth: 0,
	__fixedRightColumnTotalWidth: 0,
	__animator: null,
	_resizeColumnIndex: 0,
	_visibleCellsByPath: null,
	__visibleCells: null,
	_layoutChangeDelegate: null,
	__ignoreRender: false,
	__borderView: null,
	__leftResizeHandle: null,
	__rightResizeHandle: null,
	__interactionBlockingView: null,
	_excludeRowSpacingOnTopAndBottom: false,
	_dynamicRowHeightMode: false,
	_sectionHeadersSupportsColumns: false,
	_isDynamicRowHeighReverseScrolling: false,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._dynamicRowHeightMode = false;
		this._sectionHeadersSupportsColumns = false;
		this.__availableCells = new $.ig.Dictionary(0);
		this._sections = new $.ig.Array();
		this._columns = new $.ig.Array();
		this._fixedLeftColumns = new $.ig.Array();
		this._fixedRightColumns = new $.ig.Array();
		this.__visibleCells = new $.ig.Array();
		this._visibleCellsByPath = new $.ig.Dictionary(0);
		this._resizeColumnIndex = -1;
	},
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewLayoutEngine::DequeueReusableCellWithIdentifier(System.String)" />*/
	dequeueReusableCellWithIdentifier: function (identifier) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__availableCells, identifier)) {
			var list = this.__availableCells.item(identifier);
			var count = list.length;
			if (count > 0) {
				var cell = list[0];
				list.removeAt(0);
				cell.isHidden(false);
				return cell;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewLayoutEngine::DequeueReusableCellWithIdentifier(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::EnqueueReusableCell(Infragistics.CPGridViewCellBase)" />*/
	enqueueReusableCell: function (cell) {
		var identifier = cell.identifier();
		var availList = null;
		if (!($.ig.NativeDictionaryUtility.prototype.containsKey(this.__availableCells, identifier))) {
			availList = new $.ig.Array();
			this.__availableCells.item(identifier, availList);
		} else {
			availList = this.__availableCells.item(identifier);
		}
		if (this._layoutChangeDelegate != null) {
			this._layoutChangeDelegate.onCellDetaching(cell);
		}
		cell.onDetached();
		cell._frameOpacity = 1;
		cell._gridView = null;
		cell.isHidden(true);
		availList.add(cell);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::EnqueueReusableCell(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InvalidateBounds(Infragistics.CPGridView, System.Boolean)" />*/
	invalidateBounds: function (gridView, resetVisibleCells) {
		var layoutChangeDelegateValue = this._layoutChangeDelegate;
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutChangeStarted();
		}
		if (resetVisibleCells) {
			var count = this.__visibleCells.length;
			for (var i = 0; i < count; i++) {
				var path = this.__visibleCells[i];
				if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, path._identifier)) {
					var cell = this._visibleCellsByPath.item(path._identifier);
					if (cell.canBeRecycled()) {
						this.enqueueReusableCell(cell);
					} else {
						if (this.__lockedCells == null) {
							this.__lockedCells = new $.ig.Array();
						}
						this.__lockedCells.add(cell);
					}
				} else {
				}
			}
			if (this.__lockedCells != null) {
				var stillLockedCells = new $.ig.Array();
				for (var j = 0; j < this.__lockedCells.length; j++) {
					var cell1 = this.__lockedCells[j];
					if (cell1.canBeRecycled()) {
						this.enqueueReusableCell(cell1);
					} else {
						stillLockedCells.add(cell1);
					}
				}
				if (stillLockedCells != null) {
					this.__lockedCells = stillLockedCells;
				} else {
					this.__lockedCells = null;
				}
			}
			this.__visibleCells.clear();
			this._visibleCellsByPath.clear();
		}
		var contentWidth = 0, contentHeight = 0;
		this._sections.clear();
		var dsh = gridView.getDataSource();
		if (dsh != null) {
			var numberOfSections = dsh.getNumberOfSectionsInGrid();
			var rowHeight = gridView._rowHeight;
			var rowSpacing = gridView._rowSpacing;
			var rowSeparatorHeight = gridView._rowSeparatorHeight;
			var headerHeight = gridView._headerHeight;
			var sectionHeaderHeight = gridView._sectionHeaderHeight;
			var sectionFooterHeight = gridView._sectionFooterHeight;
			var sectionHeaderHeightListener = dsh._sectionHeaderHeightListener;
			var rowHeightListener = dsh._rowHeightListener;
			var alwaysDisplaySectionHeader = dsh.alwaysDisplaySectionHeaders();
			var top = headerHeight + gridView._contentOffsetTop;
			var rowIndexOffset = 0;
			for (var si = 0; si < numberOfSections; si++) {
				var section = new $.ig.CPGridSectionInfo();
				section._excludeRowSpacingOnTopAndBottom = this._excludeRowSpacingOnTopAndBottom;
				section._sectionIndex = si;
				if (dsh.displayFooterForSection(gridView, si)) {
					section._footerHeight = sectionFooterHeight;
				}
				if (numberOfSections == 1 && !alwaysDisplaySectionHeader) {
					section._headerHeight = 0;
				} else if (sectionHeaderHeightListener != null) {
					section._headerHeight = sectionHeaderHeightListener(0, si);
				} else {
					section._headerHeight = sectionHeaderHeight;
				}
				if (!dsh.displayHeaderForSection(gridView, si)) {
					section._headerHeight = 0;
				}
				section._offset = top;
				section._rowSeparatorHeight = rowSeparatorHeight;
				section._ignoreLastRowSeparator = gridView._ignoreLastRowSeparator;
				section._absoluteStartRowIndex = rowIndexOffset;
				section._rowSpacing = rowSpacing;
				this._sections.add(section);
				var totalRowHeight = 0;
				section._rowHeight = rowHeight;
				if (!dsh.isSectionCollapsed(si)) {
					section._numberOfRows = dsh.getNumberOfRowsInSection(si);
					var supportsStretchRows = dsh.supportsStretchRows();
					var loopThroughRows = rowHeightListener != null;
					var customRowHeights = rowHeightListener != null;
					if (customRowHeights || supportsStretchRows) {
						if (supportsStretchRows) {
							section._stretchRows = new Array(section._numberOfRows);
						}
						section._rowHeightListener = rowHeightListener;
						if (customRowHeights) {
							section.setRowHeights(section._numberOfRows);
						}
						for (var i1 = 0; i1 < section._numberOfRows; i1++) {
							if (customRowHeights) {
								var height = gridView._rowHeight;
								if (this._dynamicRowHeightMode) {
									section.setRowHeight(i1, -1);
								} else {
									height = rowHeightListener(i1, si);
									if (height == -1) {
										height = gridView._rowHeight;
									}
									section.setRowHeight(i1, height);
								}
								totalRowHeight += height;
							}
							if (supportsStretchRows) {
								section._stretchRows[i1] = dsh.isStretchRow(i1, si);
							}
						}
					}
					if (!customRowHeights) {
						totalRowHeight = (section._numberOfRows * rowHeight);
					}
					totalRowHeight += section._footerHeight;
				} else {
					section._footerHeight = 0;
					section._rowSpacing = section._rowSeparatorHeight = 0;
					section._numberOfRows = 0;
				}
				var rowSpacingHeight = 0;
				if (this._excludeRowSpacingOnTopAndBottom) {
					rowSpacingHeight = ((section._numberOfRows - 1) * section._rowSpacing);
				} else {
					rowSpacingHeight = ((section._numberOfRows + 1) * section._rowSpacing);
				}
				var totalRowSepHeight = (section._numberOfRows * section._rowSeparatorHeight);
				if (section._ignoreLastRowSeparator && section._numberOfRows > 0) {
					totalRowSepHeight -= section._rowSeparatorHeight;
				}
				section._totalHeight = totalRowHeight + rowSpacingHeight + totalRowSepHeight + section._headerHeight;
				top += section._totalHeight;
				if (si != numberOfSections - 1) {
					top += gridView._sectionSpacing;
				}
				rowIndexOffset += section._numberOfRows;
			}
			contentHeight = top + gridView._contentOffsetBottom;
			contentWidth = this.ensureColumnWidths(gridView);
		}
		gridView.setContentSize(contentWidth, contentHeight);
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutChangeEnded();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InvalidateBounds(Infragistics.CPGridView, System.Boolean)" />*/
	,
	_hasStarWidths: false,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::EnsureColumnWidths(Infragistics.CPGridView)" />*/
	ensureColumnWidths: function (gridView) {
		this._columns.clear();
		this._fixedLeftColumns.clear();
		this._fixedRightColumns.clear();
		this.__fixedLeftColumnTotalWidth = 0;
		this.__fixedRightColumnTotalWidth = 0;
		var dsh = gridView.getDataSource();
		var columnSpacing = gridView._columnSpacing;
		var totalRequestedWidth = 0;
		var numberOfColumns = dsh.getNumberOfColumnsInGrid();
		var starColumns = new $.ig.Array();
		for (var ci = 0; ci < numberOfColumns; ci++) {
			totalRequestedWidth += this.setupColumn(gridView, ci, this._columns, dsh.getWidthForColumn(ci), starColumns, columnSpacing);
		}
		numberOfColumns = dsh.getNumberOfFixedLeftColumnsInGrid();
		for (var ci1 = 0; ci1 < numberOfColumns; ci1++) {
			totalRequestedWidth += this.setupColumn(gridView, ci1, this._fixedLeftColumns, dsh.getWidthForFixedLeftColumn(ci1), starColumns, columnSpacing);
		}
		numberOfColumns = dsh.getNumberOfFixedRightColumnsInGrid();
		for (var ci2 = 0; ci2 < numberOfColumns; ci2++) {
			totalRequestedWidth += this.setupColumn(gridView, ci2, this._fixedRightColumns, dsh.getWidthForFixedRightColumn(ci2), starColumns, columnSpacing);
		}
		var starCount = 0;
		for (var i = 0; i < starColumns.length; i++) {
			var info = starColumns[i];
			starCount += info._width._value;
		}
		this._hasStarWidths = starCount > 0;
		var additionalCount = 1;
		if (gridView._neverUseSideSpacing) {
			additionalCount = -1;
		}
		var availableWidth = gridView.currentWidth() - gridView._contentOffsetLeft - gridView._contentOffsetRight - totalRequestedWidth - ((this._columns.length + this._fixedLeftColumns.length + additionalCount) * columnSpacing);
		var sizePerStar = $.ig.truncate((availableWidth / starCount));
		var left = gridView._contentOffsetLeft;
		if (!gridView._neverUseSideSpacing) {
			left += columnSpacing;
		}
		for (var i1 = 0; i1 < this._fixedLeftColumns.length; i1++) {
			var info1 = this._fixedLeftColumns[i1];
			info1._offset = left;
			if (info1._width._fillEmptySpace) {
				info1._actualWidth = Math.max(info1._width._value * sizePerStar, info1._width._minimumWidth);
			}
			left += info1._actualWidth + columnSpacing;
		}
		this.__fixedLeftColumnTotalWidth = left;
		for (var i2 = 0; i2 < this._columns.length; i2++) {
			var info2 = this._columns[i2];
			info2._offset = left;
			if (info2._width._fillEmptySpace) {
				info2._actualWidth = Math.max(info2._width._value * sizePerStar, info2._width._minimumWidth);
			}
			left += info2._actualWidth + columnSpacing;
		}
		for (var i3 = 0; i3 < this._fixedRightColumns.length; i3++) {
			var info3 = this._fixedRightColumns[i3];
			info3._offset = -gridView._contentOffsetRight + this.__fixedRightColumnTotalWidth;
			if (info3._width._fillEmptySpace) {
				info3._actualWidth = Math.max(info3._width._value * sizePerStar, info3._width._minimumWidth);
			}
			this.__fixedRightColumnTotalWidth += info3._actualWidth;
			left += info3._actualWidth + columnSpacing;
		}
		if (gridView._neverUseSideSpacing) {
			left -= columnSpacing;
		}
		return left + gridView._contentOffsetRight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::EnsureColumnWidths(Infragistics.CPGridView)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::SetupColumn(Infragistics.CPGridView, System.Int32, Infragistics.CPList, Infragistics.CPColumnWidth, Infragistics.CPList, System.Int32)" />*/
	setupColumn: function (gridView, index, cols, width, starColumns, spacing) {
		var info = new $.ig.CPColumnInfo();
		info._index = index;
		info._width = (width == null) ? gridView._columnWidth : width;
		info._spacing = spacing;
		if (!info._width._fillEmptySpace) {
			info._actualWidth = info._width._value;
		} else {
			starColumns.add(info);
		}
		cols.add(info);
		return info._actualWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::SetupColumn(Infragistics.CPGridView, System.Int32, Infragistics.CPList, Infragistics.CPColumnWidth, Infragistics.CPList, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetNumberOfColumns()" />*/
	getNumberOfColumns: function () {
		return this._columns.length + this._fixedLeftColumns.length + this._fixedRightColumns.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetNumberOfColumns()" />*/
	,
	__inRender: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::Render(Infragistics.CPGridView, System.Boolean)" />*/
	render: function (gridView, animate) {
		var $self = this;
		if (this.__inRender) {
			return;
		}
		this.__renderNeeded = false;
		if (this.__ignoreRender) {
			return;
		}
		var layoutChangeDelegateValue = this._layoutChangeDelegate;
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutStarting();
		}
		if (!animate && (this._sections.length == 0 || this.getNumberOfColumns() == 0)) {
			this.invalidateBounds(gridView, true);
			if (this._sections.length == 0 || this.getNumberOfColumns() == 0) {
				if (layoutChangeDelegateValue != null) {
					layoutChangeDelegateValue.onLayoutEnded();
				}
				return;
			}
		}
		var dsh = gridView.getDataSource();
		if (dsh == null) {
			if (layoutChangeDelegateValue != null) {
				layoutChangeDelegateValue.onLayoutEnded();
			}
			return;
		}
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutChangeStarted();
		}
		this.__inRender = true;
		var contentOffsetY = gridView.getContentOffsetY();
		var gridHeight = gridView.currentHeight();
		var headerTop = Math.max(contentOffsetY + gridView._contentOffsetTop, 0);
		var lockedTop = headerTop + gridView._headerHeight;
		var bottom = contentOffsetY + gridHeight;
		var startSection = -1;
		var endSection = -1;
		var startRow = 0;
		var endRow = 0;
		for (var i = 0; i < this._sections.length; i++) {
			var section = this._sections[i];
			var sectionTop = section.getSectionTop();
			var sectionBottom = section.getSectionBottom();
			if (lockedTop >= sectionTop && lockedTop <= sectionBottom) {
				startSection = section._sectionIndex;
				startRow = section.getRowIndexForLocation(lockedTop);
				if (startRow == -1) {
					startRow = 0;
				} else if (startRow == -2) {
					startRow = section._numberOfRows - 1;
				}
			}
			if (sectionTop <= bottom && sectionBottom >= bottom) {
				endSection = section._sectionIndex;
				endRow = section.getRowIndexForLocation(bottom);
				if (endRow == -1) {
					endRow = 0;
				} else if (endRow == -2) {
					endRow = section._numberOfRows - 1;
				}
				break;
			}
			if (sectionTop > bottom) {
				endSection = section._sectionIndex;
				endRow = 0;
				break;
			}
		}
		if (startSection == -1) {
			startSection = 0;
			startRow = 0;
		}
		if (endSection == -1) {
			if (this._sections.length > 0) {
				endSection = this._sections.length - 1;
				endRow = (this._sections[endSection])._numberOfRows - 1;
			}
		}
		var contentOffsetX = gridView.getContentOffsetX();
		var contentWidth = gridView.getContentWidth();
		var gridWidth = gridView.currentWidth();
		var startLeft = contentOffsetX + this.__fixedLeftColumnTotalWidth + gridView._contentOffsetLeft;
		var endLeft = contentOffsetX + gridWidth;
		var startColumn = -1;
		var endColumn = -1;
		for (var i1 = 0; i1 < this._columns.length; i1++) {
			var column = this._columns[i1];
			var columnLeft = column._offset;
			var columnRight = columnLeft + column._actualWidth + column._spacing;
			if (startLeft >= columnLeft && startLeft <= columnRight) {
				startColumn = column._index;
			}
			if (columnLeft <= endLeft && columnRight >= endLeft) {
				endColumn = column._index;
				break;
			}
		}
		if (startColumn == -1) {
			startColumn = 0;
		}
		if (endColumn == -1) {
			endColumn = this._columns.length - 1;
		}
		var previouslyUsedCells = new $.ig.Array();
		for (var i2 = 0; i2 < this.__visibleCells.length; i2++) {
			var path = this.__visibleCells[i2];
			previouslyUsedCells.add(path._identifier);
		}
		this.__visibleCells.clear();
		var currentPath = new $.ig.CPCellPath(0, -1, -1, -1, $.ig.CPGridViewFixedColumnDirection.prototype.none);
		if (gridView._headerHeight > 0) {
			currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.left;
			currentPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_HEADER_ROW_INDEX();
			currentPath._sectionIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
			for (var c = 0; c < this._fixedLeftColumns.length; c++) {
				currentPath._columnIndex = c;
				var col = this._fixedLeftColumns[c];
				this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedLeftHeaderCell, Math.max(0 + col._offset, contentOffsetX + col._offset), headerTop, col._actualWidth, gridView._headerHeight, animate);
			}
			currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.right;
			for (var c1 = 0; c1 < this._fixedRightColumns.length; c1++) {
				currentPath._columnIndex = c1;
				var col1 = this._fixedRightColumns[c1];
				this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedRightHeaderCell, Math.min((gridWidth + contentOffsetX) - this.__fixedRightColumnTotalWidth + col1._offset, gridView._actualContentWidth - this.__fixedRightColumnTotalWidth + col1._offset), headerTop, col1._actualWidth, gridView._headerHeight, animate);
			}
			currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
			for (var c2 = startColumn; c2 <= endColumn; c2++) {
				currentPath._columnIndex = c2;
				var col2 = this._columns[c2];
				this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.headerCell, col2._offset, headerTop, col2._actualWidth, gridView._headerHeight, animate);
			}
		}
		var updatedRowHeightOffset = 0;
		var rowHeightUpdatedAtTop = false;
		for (var s = startSection; s <= endSection; s++) {
			var section1 = this._sections[s];
			var firstRow = (s == startSection) ? startRow : 0;
			var lastRow = (s == endSection) ? endRow : section1._numberOfRows - 1;
			currentPath._sectionIndex = s;
			if (section1._headerHeight > 0) {
				currentPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
				var sectionY = (section1._sectionIndex == startSection) ? Math.min(lockedTop, section1.getSectionBottom() - section1._headerHeight - section1._footerHeight) : section1._offset;
				if (!this._sectionHeadersSupportsColumns) {
					currentPath._columnIndex = 0;
					var sectionHeaderX = gridView._sectionHeaderUsesColumnSpacing ? contentOffsetX + gridView._columnSpacing : contentOffsetX;
					var sectionHeaderWidth = gridView._sectionHeaderUsesColumnSpacing ? gridWidth - gridView._columnSpacing * 2 : gridWidth;
					if (!gridView._sectionHeaderShouldIgnoreContentOffset) {
						sectionHeaderX += gridView._contentOffsetLeft;
						sectionHeaderWidth -= (gridView._contentOffsetLeft + gridView._contentOffsetRight);
					}
					this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.sectionHeaderCell, sectionHeaderX, sectionY, sectionHeaderWidth, section1._headerHeight, animate);
				} else {
					currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.left;
					for (var c3 = 0; c3 < this._fixedLeftColumns.length; c3++) {
						currentPath._columnIndex = c3;
						var col3 = this._fixedLeftColumns[c3];
						this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedLeftHeaderCell, Math.max(0 + col3._offset, contentOffsetX + col3._offset), sectionY, col3._actualWidth, section1._headerHeight, animate);
					}
					currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.right;
					for (var c4 = 0; c4 < this._fixedRightColumns.length; c4++) {
						currentPath._columnIndex = c4;
						var col4 = this._fixedRightColumns[c4];
						this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedRightHeaderCell, Math.min((gridWidth + contentOffsetX) - this.__fixedRightColumnTotalWidth + col4._offset, gridView._actualContentWidth - this.__fixedRightColumnTotalWidth + col4._offset), sectionY, col4._actualWidth, section1._headerHeight, animate);
					}
					currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
					for (var c5 = startColumn; c5 <= endColumn; c5++) {
						currentPath._columnIndex = c5;
						var col5 = this._columns[c5];
						this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.headerCell, col5._offset, sectionY, col5._actualWidth, section1._headerHeight, animate);
					}
				}
			}
			if (section1._footerHeight > 0) {
				currentPath._rowIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX();
				currentPath._columnIndex = 0;
				var actualLocation = section1.getRowTop(currentPath._rowIndex);
				var sectionY1 = (bottom < actualLocation + section1._footerHeight) ? Math.max(bottom - section1._footerHeight, section1.getSectionTop() + section1._headerHeight) : actualLocation;
				var sectionHeaderX1 = gridView._sectionHeaderUsesColumnSpacing ? contentOffsetX + gridView._columnSpacing : contentOffsetX;
				var sectionHeaderWidth1 = gridView._sectionHeaderUsesColumnSpacing ? gridWidth - gridView._columnSpacing * 2 : gridWidth;
				if (!gridView._sectionHeaderShouldIgnoreContentOffset) {
					sectionHeaderX1 += gridView._contentOffsetLeft;
					sectionHeaderWidth1 -= (gridView._contentOffsetLeft + gridView._contentOffsetRight);
				}
				this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.sectionFooterCell, sectionHeaderX1, sectionY1, sectionHeaderWidth1, section1._footerHeight, animate);
			}
			if (section1._numberOfRows > 0) {
				for (var r = firstRow; r <= lastRow; r++) {
					updatedRowHeightOffset += section1.ensureRowHeight(r);
					if (!rowHeightUpdatedAtTop && updatedRowHeightOffset != 0 && r == firstRow) {
						rowHeightUpdatedAtTop = true;
					}
					var rowTop = section1.getRowTop(r);
					var rowHeight = section1.getRowHeight(r);
					var rowSepWidth = 0;
					currentPath._rowIndex = r;
					if (section1.isStretchRow(r)) {
						currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
						currentPath._columnIndex = 0;
						var stretchRowX = gridView._sectionHeaderUsesColumnSpacing ? contentOffsetX + gridView._columnSpacing : contentOffsetX;
						var stretchRowW = gridView._sectionHeaderUsesColumnSpacing ? gridWidth - gridView._columnSpacing * 2 : gridWidth;
						this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.cell, stretchRowX, rowTop, stretchRowW, rowHeight, animate);
					} else {
						currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.left;
						for (var c6 = 0; c6 < this._fixedLeftColumns.length; c6++) {
							currentPath._columnIndex = c6;
							var col6 = this._fixedLeftColumns[c6];
							rowSepWidth += col6._actualWidth;
							this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedLeftCell, Math.max(0 + col6._offset, contentOffsetX + col6._offset), rowTop, col6._actualWidth, rowHeight, animate);
						}
						currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.right;
						for (var c7 = 0; c7 < this._fixedRightColumns.length; c7++) {
							currentPath._columnIndex = c7;
							var col7 = this._fixedRightColumns[c7];
							rowSepWidth += col7._actualWidth;
							this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.fixedRightCell, Math.min((gridWidth + contentOffsetX) - this.__fixedRightColumnTotalWidth + col7._offset, gridView._actualContentWidth - this.__fixedRightColumnTotalWidth + col7._offset), rowTop, col7._actualWidth, rowHeight, animate);
						}
						currentPath._fixedColumnDirection = $.ig.CPGridViewFixedColumnDirection.prototype.none;
						for (var c8 = startColumn; c8 <= endColumn; c8++) {
							currentPath._columnIndex = c8;
							var col8 = this._columns[c8];
							rowSepWidth += col8._actualWidth;
							this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.cell, col8._offset, rowTop, col8._actualWidth, rowHeight, animate);
						}
					}
					if (section1._rowSeparatorHeight > 0) {
						currentPath._columnIndex = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX();
						if (contentOffsetX + gridWidth > contentWidth) {
							rowSepWidth = gridWidth - ((contentOffsetX + gridWidth) - contentWidth);
						}
						this.loadCell(gridView, previouslyUsedCells, currentPath, $.ig.CPCellType.prototype.rowSeparatorCell, Math.max(0, contentOffsetX), rowTop + rowHeight, rowSepWidth, section1.getRowSepHeightForRow(currentPath._rowIndex), animate);
					}
				}
			}
		}
		for (var i3 = 0; i3 < previouslyUsedCells.length; i3++) {
			var pathId = previouslyUsedCells[i3];
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, pathId)) {
				var cell = this._visibleCellsByPath.item(pathId);
				if (cell.canBeRecycled()) {
					if (animate && this.__animator != null) {
						this.__animator.addCellBeingRemoved(this, cell);
					} else {
						this.enqueueReusableCell(cell);
					}
					this._visibleCellsByPath.remove(pathId);
				} else {
					this.__visibleCells.add(cell._path);
					this.updateFrameBasedOnPath(cell);
				}
			} else {
				console.log("Bad state");
			}
		}
		this.updateAdorners(gridView);
		if (animate) {
			var duration = (this.__currentDuration == -1) ? $.ig.ThemeManager.prototype.theme().animationDuration() : this.__currentDuration;
			if (layoutChangeDelegateValue != null) {
				layoutChangeDelegateValue.onAnimationStarting(duration);
			}
			this.animateCellsInPanel(duration, gridView.__cellPanel, null, null);
			this.animateCellsInPanel(duration, gridView.__fixedHeaderPanel, null, null);
			this.animateCellsInPanel(duration, gridView.__headerPanel, null, null);
			this.animateCellsInPanel(duration, gridView.__sectionPanel, null, null);
			this.animateCellsInPanel(duration, gridView.__sectionFooterPanel, null, null);
			this.animateCellsInPanel(duration, gridView.__fixedCellPanel, function (f) {
				$self.finishedAnimating(gridView);
				if (layoutChangeDelegateValue != null) {
					layoutChangeDelegateValue.onAnimationEnding();
				}
			}, function () {
				if (layoutChangeDelegateValue != null) {
					layoutChangeDelegateValue.onAnimationStarted();
				}
			});
		}
		this.__inRender = false;
		if (gridView._needsUpdate) {
			gridView._needsUpdate = false;
			gridView.updateData(false);
		}
		if (updatedRowHeightOffset != 0) {
			this.updateContentHeightBy(gridView, updatedRowHeightOffset, false, true, rowHeightUpdatedAtTop);
		}
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutChangeEnded();
		}
		if (this.__renderNeeded) {
			this.render(gridView, false);
		}
		if (layoutChangeDelegateValue != null) {
			layoutChangeDelegateValue.onLayoutEnded();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::Render(Infragistics.CPGridView, System.Boolean)" />*/
	,
	__renderNeeded: false,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateContentHeightBy(Infragistics.CPGridView, System.Int32, System.Boolean, System.Boolean, System.Boolean)" />*/
	updateContentHeightBy: function (gridView, udpateAmount, canAnimate, canRender, shouldAdjustTopContentOffset) {
		var isCurrentlyAtBottom = gridView.isCurrentlyScrolledToBottom();
		if (gridView._isInSizeChanged) {
			shouldAdjustTopContentOffset = false;
		}
		if (canRender) {
			if (isCurrentlyAtBottom || shouldAdjustTopContentOffset) {
				this.__ignoreRender = true;
			}
			this.__renderNeeded = true;
			for (var i = 1; i < this._sections.length; i++) {
				var prevSi = this._sections[i - 1];
				var si = this._sections[i];
				si._offset = prevSi._offset + prevSi._totalHeight;
			}
			var prevTop = gridView.getContentOffsetY();
			gridView.updateContentSize(gridView._actualContentWidth, gridView._actualContentHeight + udpateAmount);
			this.__ignoreRender = false;
			if (this._isDynamicRowHeighReverseScrolling || this.isAnimating()) {
				if (shouldAdjustTopContentOffset) {
					var currentTop = gridView.getContentOffsetY();
					var alreadyAdjustedOffset = prevTop - currentTop;
					var newTop = currentTop + (udpateAmount + alreadyAdjustedOffset);
					var limit = gridView.getContentHeight() - gridView.currentHeight();
					if (newTop > limit) {
						newTop = limit;
					}
					if (newTop != currentTop && newTop >= 0) {
						gridView.scrollTo(gridView.getContentOffsetX(), newTop);
					} else {
						this.render(gridView, false);
					}
				} else if (isCurrentlyAtBottom) {
					if (!this.__inRender) {
						gridView.scrollToBottom(canAnimate);
					}
				} else if (this.__renderNeeded) {
					this.render(gridView, false);
				}
			} else {
				if (this.__renderNeeded) {
					this.render(gridView, false);
				}
			}
		} else {
			this.__ignoreRender = true;
			gridView.updateContentSize(gridView._actualContentWidth, gridView._actualContentHeight + udpateAmount);
			if (isCurrentlyAtBottom && gridView._supportsAutoScrollToBottom) {
				gridView.scrollToBottom(canAnimate);
			}
			this.__ignoreRender = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateContentHeightBy(Infragistics.CPGridView, System.Int32, System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateFrameBasedOnPath(Infragistics.CPGridViewCellBase)" />*/
	updateFrameBasedOnPath: function (cell) {
		var section = this._sections[cell._path._sectionIndex];
		if (section != null) {
			cell.storeFrame(cell._frameX, section.getRowTop(cell._path._rowIndex), cell._frameW, section.getRowHeight(cell._path._rowIndex));
			this.measureCell(cell, cell._frameX, cell._frameY, cell._frameW, cell._frameH);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateFrameBasedOnPath(Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateAdorners(Infragistics.CPGridView)" />*/
	updateAdorners: function (gridView) {
		var $self = this;
		var panel = gridView.__adornerPanel;
		if (this._resizeColumnIndex > -1) {
			if (this.__borderView == null) {
				var borderWidth = $.ig.ThemeManager.prototype.theme().borderWidth2();
				var hideResizeHandler = function (x1, y1) {
					if (gridView._columnWidthChangedBlock != null) {
						gridView._columnWidthChangedBlock($self._resizeColumnIndex, $self.getColumnWidth(gridView.getDataSource(), $self._resizeColumnIndex));
					}
					$self._resizeColumnIndex = -1;
					gridView.__adornerPanel.isHidden(true);
				};
				var resizeCompleteHandler = function () {
					if (gridView._columnWidthChangedBlock != null) {
						gridView._columnWidthChangedBlock($self._resizeColumnIndex, $self.getColumnWidth(gridView.getDataSource(), $self._resizeColumnIndex));
					}
				};
				this.__interactionBlockingView = new $.ig.CPInteractionView();
				this.__interactionBlockingView.isCaptureView(true);
				this.__interactionBlockingView.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
				this.__interactionBlockingView.addClickHandler(hideResizeHandler);
				panel.addSubview(this.__interactionBlockingView);
				this.__borderView = new $.ig.CPView();
				var borderColor = $.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.lightenColor($.ig.ThemeManager.prototype.theme().accentColor().color(), 0.1));
				this.__borderView.setBorderWidth(borderWidth);
				this.__borderView.setBorderColor(borderColor);
				panel.addSubview(this.__borderView);
				this.__leftResizeHandle = new $.ig.GridColumnResizeHandle(true);
				this.__leftResizeHandle.setColor(borderColor);
				this.__leftResizeHandle._offset = $.ig.intDivide(borderWidth, 2);
				this.__leftResizeHandle.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
				this.__leftResizeHandle.addResizeCompleteHandler(resizeCompleteHandler);
				this.__leftResizeHandle.addResizeHandler(function (leftResizeX, leftResizeY) {
					var colDef = gridView.getDataSource().getColumnDefinitionForIndex($self._resizeColumnIndex);
					var newWidth = colDef.width()._value - leftResizeX;
					colDef.width()._value = Math.max(newWidth, colDef.width()._minimumWidth);
					$self.invalidateBounds(gridView, false);
					if ((leftResizeX < 0 && $self.__leftResizeHandle._willGridScrollWhenColResizedLeft) || (gridView.getContentOffsetX() != 0 && gridView._actualContentWidth != gridView.currentWidth() + gridView.getContentOffsetX() && $self.__leftResizeHandle._willGridScrollWhenColResizedRight)) {
						gridView.scrollTo(gridView.getContentOffsetX() - leftResizeX, gridView.getContentOffsetY());
					}
					$self.render(gridView, false);
				});
				panel.addSubview(this.__leftResizeHandle);
				this.__rightResizeHandle = new $.ig.GridColumnResizeHandle(false);
				this.__rightResizeHandle.setColor(borderColor);
				this.__rightResizeHandle._offset = $.ig.intDivide(borderWidth, 2);
				this.__rightResizeHandle.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
				this.__rightResizeHandle.addResizeCompleteHandler(resizeCompleteHandler);
				this.__rightResizeHandle.addResizeHandler(function (rightResizeX, rightResizeY) {
					var colDef = gridView.getDataSource().getColumnDefinitionForIndex($self._resizeColumnIndex);
					var newWidth = colDef.width()._value + rightResizeX;
					colDef.width()._value = Math.max(newWidth, colDef.width()._minimumWidth);
					$self.invalidateBounds(gridView, false);
					$self.render(gridView, false);
				});
				panel.addSubview(this.__rightResizeHandle);
			}
			var isFixedLeftColumn = false;
			var isFixedRightColumn = false;
			var colInfo;
			if (this._fixedLeftColumns.length > this._resizeColumnIndex) {
				colInfo = this._fixedLeftColumns[this._resizeColumnIndex];
				isFixedLeftColumn = true;
			} else if (this._fixedLeftColumns.length + this._columns.length > this._resizeColumnIndex) {
				colInfo = this._columns[this._resizeColumnIndex - this._fixedLeftColumns.length];
			} else {
				colInfo = this._fixedRightColumns[this._resizeColumnIndex - this._fixedLeftColumns.length - this._columns.length];
				isFixedRightColumn = true;
			}
			var doesContentFillGrid = gridView._actualContentWidth >= gridView.currentWidth();
			var isLastColumn = this._resizeColumnIndex + 1 == this._fixedLeftColumns.length + this._columns.length + this._fixedRightColumns.length;
			var isFirstColumn = this._resizeColumnIndex == 0;
			var isScrolledToFarRight = gridView.currentWidth() + gridView.getContentOffsetX() == gridView._actualContentWidth;
			var isScrolledToFarLeft = gridView.getContentOffsetX() == 0;
			this.__rightResizeHandle._willGridScrollWhenColResizedRight = !isScrolledToFarRight;
			this.__rightResizeHandle._willGridScrollWhenColResizedLeft = !isScrolledToFarRight;
			this.__leftResizeHandle._willGridScrollWhenColResizedRight = !isScrolledToFarLeft;
			this.__leftResizeHandle._willGridScrollWhenColResizedLeft = doesContentFillGrid;
			gridView.__adornerPanel.isHidden(false);
			this.__leftResizeHandle.isHidden(isFirstColumn);
			this.__rightResizeHandle.isHidden(isLastColumn && doesContentFillGrid);
			var top = Math.max(gridView.getContentOffsetY() + gridView._contentOffsetTop, 0);
			var height = 0;
			if (gridView.currentHeight() < gridView._actualContentHeight - gridView.getContentOffsetY()) {
				height = gridView.currentHeight() + Math.min(0, gridView.getContentOffsetY());
			} else {
				height = gridView._actualContentHeight - Math.max(0, gridView.getContentOffsetY());
			}
			var colOffset = colInfo._offset;
			if (isFixedLeftColumn) {
				var contentOffSetX = gridView.getContentOffsetX();
				if (contentOffSetX > 0) {
					colOffset += contentOffSetX;
				}
				this.__leftResizeHandle._willGridScrollWhenColResizedLeft = false;
			} else if (isFixedRightColumn) {
				colOffset = Math.min(gridView.currentWidth() + gridView.getContentOffsetX() - this.__fixedRightColumnTotalWidth + colInfo._offset, gridView._actualContentWidth - this.__fixedRightColumnTotalWidth + colInfo._offset);
			}
			panel.measureView1(this.__borderView, colOffset, top, colInfo._actualWidth, height, 1);
			var handleWidth = $.ig.NativeUIUtility.prototype.utility().densify(80);
			var rightHandleX = (colOffset + colInfo._actualWidth) - ($.ig.intDivide(handleWidth, 2));
			var leftHandleX = colOffset - ($.ig.intDivide(handleWidth, 2));
			panel.measureView1(this.__leftResizeHandle, leftHandleX, top, handleWidth, height, 1);
			panel.measureView1(this.__rightResizeHandle, rightHandleX, top, handleWidth, height, 1);
			panel.measureView1(this.__interactionBlockingView, 0, 0, gridView._actualContentWidth, gridView._actualContentHeight, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateAdorners(Infragistics.CPGridView)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetColumnWidth(Infragistics.CPGridViewDatasourceHelper, System.Int32)" />*/
	getColumnWidth: function (dsh, colIndex) {
		var colDef = dsh.getColumnDefinitionForIndex(colIndex);
		return colDef.width()._value;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetColumnWidth(Infragistics.CPGridViewDatasourceHelper, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::StopAnimating(Infragistics.CPGridView, System.Boolean)" />*/
	stopAnimating: function (gridView, moveToFinalPosition) {
		if (this.isAnimating()) {
			this.stopAnimationForCellsInPanel(gridView.__cellPanel, moveToFinalPosition);
			this.stopAnimationForCellsInPanel(gridView.__fixedHeaderPanel, moveToFinalPosition);
			this.stopAnimationForCellsInPanel(gridView.__headerPanel, moveToFinalPosition);
			this.stopAnimationForCellsInPanel(gridView.__sectionPanel, moveToFinalPosition);
			this.stopAnimationForCellsInPanel(gridView.__sectionFooterPanel, moveToFinalPosition);
			this.stopAnimationForCellsInPanel(gridView.__fixedCellPanel, moveToFinalPosition);
			this.finishedAnimating(gridView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::StopAnimating(Infragistics.CPGridView, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::StopAnimationForCellsInPanel(Infragistics.CPGridViewCellsPanel, System.Boolean)" />*/
	stopAnimationForCellsInPanel: function (panel, moveToFinalPosition) {
		panel.stopAnimation(moveToFinalPosition);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::StopAnimationForCellsInPanel(Infragistics.CPGridViewCellsPanel, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewLayoutEngine::IsAnimating()" />*/
	isAnimating: function () {
		return (this.__animator != null);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewLayoutEngine::IsAnimating()" />*/
	,
	__lockedCells: null,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::FinishedAnimating(Infragistics.CPGridView)" />*/
	finishedAnimating: function (gridView) {
		if (this.__animator != null) {
			if (this.__animator._cellsBeingRemoved != null) {
				var count = this.__animator._cellsBeingRemoved.length;
				for (var i = 0; i < count; i++) {
					var cell = this.__animator._cellsBeingRemoved[i];
					if (cell.canBeRecycled()) {
						this.enqueueReusableCell(cell);
					} else {
						if (this.__lockedCells == null) {
							this.__lockedCells = new $.ig.Array();
						}
						this.__lockedCells.add(cell);
						cell._frameX = cell._frameY = -1000;
						this.measureCell(cell, cell._frameX, cell._frameY, cell._frameW, cell._frameH);
					}
				}
				this.__animator._cellsBeingRemoved = null;
			}
			var animator = this.__animator;
			this.__animator = null;
			if (gridView.needsFullLayoutAfterAnimating()) {
				gridView.updateData(true);
			} else if (animator._refreshVisibleCellsAfterAnimation) {
				gridView.refreshVisibleCells(true);
			}
			animator.finished();
		}
		this.__currentDuration = -1;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::FinishedAnimating(Infragistics.CPGridView)" />*/
	,
	__currentDuration: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::AnimateCellsInPanel(System.Double, Infragistics.CPGridViewCellsPanel, Infragistics.ExecutionBoolBlock, Infragistics.ExecutionBlock)" />*/
	animateCellsInPanel: function (duration, panel, finishBlock, afterSetFramesBlock) {
		var $self = this;
		if (duration == 0) {
			this.setFramesForCellsInPanel(panel);
			if (afterSetFramesBlock != null) {
				afterSetFramesBlock();
			}
			if (finishBlock != null) {
				finishBlock(true);
			}
		} else {
			panel.animate(duration, function () {
				$self.setFramesForCellsInPanel(panel);
				if (afterSetFramesBlock != null) {
					afterSetFramesBlock();
				}
			}, finishBlock);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::AnimateCellsInPanel(System.Double, Infragistics.CPGridViewCellsPanel, Infragistics.ExecutionBoolBlock, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::SetFramesForCellsInPanel(Infragistics.CPGridViewCellsPanel)" />*/
	setFramesForCellsInPanel: function (panel) {
		var cells = panel.getCells();
		var count = cells.length;
		for (var i = 0; i < count; i++) {
			var cell = cells[i];
			if (cell._gridView != null) {
				this.measureCell(cell, cell._frameX, cell._frameY, cell._frameW, cell._frameH);
			} else if (!cell.isHidden()) {
				cell.isHidden(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::SetFramesForCellsInPanel(Infragistics.CPGridViewCellsPanel)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewLayoutEngine::EnsureCell(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPCellPath, Infragistics.CPCellType)" />*/
	ensureCell: function (gridView, previouslyUsedCells, path, type) {
		var exists = false;
		var cell = null;
		var panel = null;
		path.update();
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, path._identifier)) {
			var dsh = gridView.getDataSource();
			switch (type) {
				case $.ig.CPCellType.prototype.cell:
					{
						panel = gridView.__cellPanel;
						cell = dsh.getCell(gridView, path);
						break;
					}
				case $.ig.CPCellType.prototype.fixedLeftCell:
					{
						panel = gridView.__fixedCellPanel;
						cell = dsh.getFixedLeftCell(gridView, path);
						break;
					}
				case $.ig.CPCellType.prototype.headerCell:
					{
						panel = gridView.__headerPanel;
						cell = dsh.getHeaderCell(gridView, path);
						break;
					}
				case $.ig.CPCellType.prototype.fixedLeftHeaderCell:
					{
						panel = gridView.__fixedHeaderPanel;
						cell = dsh.getFixedLeftHeaderCell(gridView, path);
						break;
					}
				case $.ig.CPCellType.prototype.rowSeparatorCell:
					{
						panel = gridView.__cellPanel;
						cell = dsh.getRowSeparatorCell(gridView, path._rowIndex, path._sectionIndex);
						break;
					}
				case $.ig.CPCellType.prototype.sectionHeaderCell:
					{
						panel = gridView.__sectionPanel;
						cell = dsh.getSectionHeaderCell(gridView, path._sectionIndex);
						break;
					}
				case $.ig.CPCellType.prototype.sectionFooterCell:
					{
						panel = gridView.__sectionFooterPanel;
						cell = dsh.getSectionFooterCell(gridView, path._sectionIndex);
						break;
					}
				case $.ig.CPCellType.prototype.fixedRightCell:
					{
						panel = gridView.__fixedCellPanel;
						cell = dsh.getFixedRightCell(gridView, path);
						break;
					}
				case $.ig.CPCellType.prototype.fixedRightHeaderCell:
					{
						panel = gridView.__fixedHeaderPanel;
						cell = dsh.getFixedRightHeaderCell(gridView, path);
						break;
					}
			}
			if (cell == null) {
				return exists;
			}
			if (cell._path == null) {
				cell._path = path.copy();
				panel.addCell(cell);
			} else {
				cell._path.update1(path);
			}
			cell._gridView = gridView;
			cell.onAttached();
			this._visibleCellsByPath.item(cell._path._identifier, cell);
			if (this._layoutChangeDelegate != null) {
				this._layoutChangeDelegate.onCellAttached(cell);
			}
		} else {
			cell = this._visibleCellsByPath.item(path._identifier);
			panel = cell.getParent();
			previouslyUsedCells.removeItem(cell._path._identifier);
			exists = true;
		}
		cell._gridView = gridView;
		return exists;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewLayoutEngine::EnsureCell(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPCellPath, Infragistics.CPCellType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::LoadCell(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPCellPath, Infragistics.CPCellType, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	loadCell: function (gridView, previouslyUsedCells, path, type, x, y, w, h, animate) {
		var exists = this.ensureCell(gridView, previouslyUsedCells, path, type);
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, path._identifier)) {
			var cell = this._visibleCellsByPath.item(path._identifier);
			var panel = cell.getParent();
			this.layoutCell(gridView, cell, panel, x, y, w, h, !exists, animate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::LoadCell(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPCellPath, Infragistics.CPCellType, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::LayoutCell(Infragistics.CPGridView, Infragistics.CPGridViewCellBase, Infragistics.CPGridViewCellsPanel, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	layoutCell: function (gridView, cell, panel, x, y, w, h, newCell, animate) {
		var prevY = cell._frameY;
		var prevX = cell._frameX;
		var prevW = cell._frameW;
		var prevH = cell._frameH;
		cell.storeFrame(x, y, w, h);
		if (!animate) {
			this.measureCell(cell, x, y, w, h);
		} else if (this.__animator != null) {
			if (newCell) {
				this.__animator.measureNewCellToLocation(this, cell);
			} else {
				this.__animator.adjustExistingCellBeingLayedOut(this, cell, prevX, prevY, prevW, prevH);
			}
		} else {
			if (newCell) {
				this.measureCell(cell, x, y, w, h);
			}
		}
		this.__visibleCells.add(cell._path);
		if (newCell) {
			cell.wasMarkedVisible();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::LayoutCell(Infragistics.CPGridView, Infragistics.CPGridViewCellBase, Infragistics.CPGridViewCellsPanel, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MeasureCell(Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureCell: function (cell, x, y, w, h) {
		if (!this.adjustCellLocation(cell, x, y, w, h)) {
			var panel = cell.getParent();
			panel.measureView1(cell, x, y, w, h, cell._frameOpacity);
			if (this._layoutChangeDelegate != null) {
				this._layoutChangeDelegate.onCellMeasured(cell, x, y, w, h, cell._frameOpacity);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MeasureCell(Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewLayoutEngine::AdjustCellLocation(Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustCellLocation: function (cell, x, y, w, h) {
		var gridView = cell._gridView;
		var xPercent = (x - gridView._columnSpacing - gridView.getContentOffsetX()) / gridView.getContentWidth();
		var yPercent = (y - gridView._rowSpacing - gridView.getContentOffsetY()) / gridView.getContentHeight();
		return cell.cellLocationChangedInViewport(xPercent, yPercent, x, y, w, h);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewLayoutEngine::AdjustCellLocation(Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InsertCells(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	insertCells: function (gridView, paths, animator) {
		if (paths.length == 0) {
			return;
		}
		var currentTop = gridView.getContentOffsetY();
		var currentLeft = gridView.getContentOffsetX();
		var prevNumberOfSections = this._sections.length;
		this.__ignoreRender = true;
		this.invalidateBounds(gridView, false);
		var newNumberOfSections = this._sections.length;
		var newTop = animator.adjustVerticalScrollPosition(this, gridView, currentTop);
		animator._differenceInVerticalScrollPosition = currentTop - newTop;
		var newLeft = animator.adjustHorizontalScrollPosition(this, gridView, currentLeft);
		animator._differenceInHorizontalScrollPosition = currentLeft - newLeft;
		gridView.scrollTo(newLeft, newTop);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		this.__animator = animator;
		this.__currentDuration = this.__animator.duration();
		var newVisCellsbyPath = null;
		var pathCount = paths.length;
		var adjustingSectionIndex = -1000;
		if (newNumberOfSections != prevNumberOfSections) {
			var insertPath = paths[0];
			adjustingSectionIndex = insertPath._sectionIndex;
		}
		if (gridView._rowSeparatorHeight > 0) {
			for (var i = 0; i < pathCount; i++) {
				var insertPath1 = paths[i];
				paths.add(new $.ig.CPCellPath(1, insertPath1._rowIndex, insertPath1._sectionIndex, $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()));
			}
			pathCount = paths.length;
		}
		for (var i1 = 0; i1 < pathCount; i1++) {
			var insertPath2 = paths[i1];
			var currentVisCellsByPath = newVisCellsbyPath == null ? this._visibleCellsByPath : newVisCellsbyPath;
			newVisCellsbyPath = new $.ig.Dictionary(0);
			var visCellCount = this.__visibleCells.length;
			for (var j = 0; j < visCellCount; j++) {
				var visPath = this.__visibleCells[j];
				var cell = currentVisCellsByPath.item(visPath._identifier);
				if (visPath._sectionIndex <= adjustingSectionIndex) {
					visPath._sectionIndex++;
					visPath.update();
				}
				if (visPath._sectionIndex == insertPath2._sectionIndex) {
					if (visPath._rowIndex >= insertPath2._rowIndex) {
						if (visPath._rowIndex != insertPath2._rowIndex || visPath._columnIndex >= insertPath2._columnIndex) {
							var colCount = this._columns.length;
							visPath._columnIndex++;
							if (visPath._columnIndex >= colCount) {
								visPath._columnIndex = 0;
								visPath._rowIndex++;
							}
							visPath.update();
						}
					}
				}
				newVisCellsbyPath.item(visPath._identifier, cell);
			}
		}
		this._visibleCellsByPath = newVisCellsbyPath;
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InsertCells(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InsertRows(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	insertRows: function (gridView, paths, animator) {
		if (paths.length == 0) {
			return;
		}
		var currentTop = gridView.getContentOffsetY();
		var currentLeft = gridView.getContentOffsetX();
		var prevNumberOfSections = this._sections.length;
		this.__ignoreRender = true;
		this.invalidateBounds(gridView, false);
		var newNumberOfSections = this._sections.length;
		var newTop = animator.adjustVerticalScrollPosition(this, gridView, currentTop);
		animator._differenceInVerticalScrollPosition = currentTop - newTop;
		var newLeft = animator.adjustHorizontalScrollPosition(this, gridView, currentLeft);
		animator._differenceInHorizontalScrollPosition = currentLeft - newLeft;
		gridView.scrollTo(newLeft, newTop);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		this.__animator = animator;
		this.__currentDuration = this.__animator.duration();
		var newVisCellsbyPath = null;
		var pathCount = paths.length;
		var adjustingSectionIndex = this._sections.length;
		if (newNumberOfSections != prevNumberOfSections) {
			var insertPath = paths[0];
			adjustingSectionIndex = insertPath._sectionIndex;
		}
		for (var i = 0; i < pathCount; i++) {
			var insertPath1 = paths[i];
			animator.addPathBeingInserted(this, insertPath1);
			var currentVisCellsByPath = newVisCellsbyPath == null ? this._visibleCellsByPath : newVisCellsbyPath;
			newVisCellsbyPath = new $.ig.Dictionary(0);
			var visCellCount = this.__visibleCells.length;
			for (var j = 0; j < visCellCount; j++) {
				var visPath = this.__visibleCells[j];
				var cell = currentVisCellsByPath.item(visPath._identifier);
				if (visPath._sectionIndex >= adjustingSectionIndex) {
					visPath._sectionIndex++;
					visPath.update();
				}
				if (visPath._sectionIndex == insertPath1._sectionIndex && visPath._rowIndex >= insertPath1._rowIndex && visPath._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX() && visPath._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()) {
					visPath._rowIndex++;
					visPath.update();
				}
				newVisCellsbyPath.item(visPath._identifier, cell);
			}
		}
		this._visibleCellsByPath = newVisCellsbyPath;
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::InsertRows(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::RemoveCells(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	removeCells: function (gridView, paths, animator) {
		if (paths.length == 0) {
			return;
		}
		var currentTop = gridView.getContentOffsetY();
		var currentLeft = gridView.getContentOffsetX();
		this.__ignoreRender = true;
		var prevNumberOfSections = this._sections.length;
		this.invalidateBounds(gridView, false);
		var newNumberOfSections = this._sections.length;
		var newTop = animator.adjustVerticalScrollPosition(this, gridView, currentTop);
		animator._differenceInVerticalScrollPosition = currentTop - newTop;
		var newLeft = animator.adjustHorizontalScrollPosition(this, gridView, currentLeft);
		animator._differenceInHorizontalScrollPosition = currentLeft - newLeft;
		gridView.scrollTo(newLeft, newTop);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		this.__animator = animator;
		this.__currentDuration = this.__animator.duration();
		var adjustingSectionIndex = this._sections.length;
		if (newNumberOfSections != prevNumberOfSections) {
			var removePath = paths[0];
			adjustingSectionIndex = removePath._sectionIndex;
		}
		var pathCount = paths.length;
		if (gridView._rowSeparatorHeight > 0) {
			for (var i = 0; i < pathCount; i++) {
				var removePath1 = paths[i];
				paths.add(new $.ig.CPCellPath(1, removePath1._rowIndex, removePath1._sectionIndex, $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()));
			}
			pathCount = paths.length;
		}
		for (var i1 = 0; i1 < pathCount; i1++) {
			var removePath2 = paths[i1];
			var cell = gridView.cellAtPath(removePath2);
			if (cell != null) {
				animator.addCellBeingRemoved(this, cell);
				this._visibleCellsByPath.remove(removePath2._identifier);
			}
		}
		var visCellCount = this.__visibleCells.length;
		var newVisibleCells = new $.ig.Array();
		for (var i2 = 0; i2 < visCellCount; i2++) {
			var visPath = this.__visibleCells[i2];
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, visPath._identifier)) {
				if (visPath._sectionIndex == adjustingSectionIndex) {
					animator.addCellBeingRemoved(this, this._visibleCellsByPath.item(visPath._identifier));
					this._visibleCellsByPath.remove(visPath._identifier);
					continue;
				}
				newVisibleCells.add(this._visibleCellsByPath.item(visPath._identifier));
				if (visPath._sectionIndex > adjustingSectionIndex) {
					visPath._sectionIndex--;
					visPath.update();
				}
				for (var j = 0; j < pathCount; j++) {
					var removePath3 = paths[j];
					if (visPath._sectionIndex == removePath3._sectionIndex && visPath._sectionIndex != adjustingSectionIndex) {
						if (visPath._rowIndex >= removePath3._rowIndex) {
							if (visPath._rowIndex != removePath3._rowIndex || visPath._columnIndex > removePath3._columnIndex) {
								if (visPath._sectionIndex < this._sections.length) {
									var colCount = this._columns.length;
									visPath._columnIndex--;
									if (visPath._columnIndex < 0) {
										visPath._columnIndex = colCount - 1;
										visPath._rowIndex--;
									}
									visPath.update();
								}
							}
						}
					}
				}
			}
		}
		this.__visibleCells = new $.ig.Array();
		this._visibleCellsByPath.clear();
		for (var i3 = 0; i3 < newVisibleCells.length; i3++) {
			var cell1 = newVisibleCells[i3];
			var path = cell1._path;
			if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, path._identifier)) {
				this._visibleCellsByPath.item(path._identifier, cell1);
				this.__visibleCells.add(cell1._path);
			}
		}
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::RemoveCells(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::RemoveRows(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	removeRows: function (gridView, paths, animator) {
		if (paths.length == 0) {
			return;
		}
		var currentTop = gridView.getContentOffsetY();
		var currentLeft = gridView.getContentOffsetX();
		this.__ignoreRender = true;
		var prevNumberOfSections = this._sections.length;
		this.invalidateBounds(gridView, false);
		var newNumberOfSections = this._sections.length;
		var newTop = animator.adjustVerticalScrollPosition(this, gridView, currentTop);
		animator._differenceInVerticalScrollPosition = currentTop - newTop;
		var newLeft = animator.adjustHorizontalScrollPosition(this, gridView, currentLeft);
		animator._differenceInHorizontalScrollPosition = currentLeft - newLeft;
		gridView.scrollTo(newLeft, newTop);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		this.__animator = animator;
		this.__currentDuration = this.__animator.duration();
		var adjustingSectionIndex = this._sections.length;
		if (newNumberOfSections != prevNumberOfSections) {
			var removePath = paths[0];
			adjustingSectionIndex = removePath._sectionIndex;
		}
		var pathCount = paths.length;
		var visCellCount = this.__visibleCells.length;
		for (var i = 0; i < pathCount; i++) {
			var removePath1 = paths[i];
			for (var j = 0; j < visCellCount; j++) {
				var visPath = this.__visibleCells[j];
				if (visPath._rowIndex == removePath1._rowIndex && visPath._sectionIndex == removePath1._sectionIndex) {
					var cell = gridView.cellAtPath(visPath);
					animator.addCellBeingRemoved(this, cell);
					this._visibleCellsByPath.remove(visPath._identifier);
				}
			}
		}
		var newVisibleCells = new $.ig.Array();
		for (var i1 = 0; i1 < visCellCount; i1++) {
			var visPath1 = this.__visibleCells[i1];
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, visPath1._identifier)) {
				newVisibleCells.add(this._visibleCellsByPath.item(visPath1._identifier));
				var originalSectionIndex = visPath1._sectionIndex;
				if (visPath1._sectionIndex >= adjustingSectionIndex) {
					visPath1._sectionIndex--;
					visPath1.update();
				}
				var originalRowIndex = visPath1._rowIndex;
				for (var j1 = 0; j1 < pathCount; j1++) {
					var removePath2 = paths[j1];
					if (originalSectionIndex == removePath2._sectionIndex && originalRowIndex >= removePath2._rowIndex && visPath1._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX() && visPath1._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_FOOTER_ROW_INDEX()) {
						visPath1._rowIndex--;
						visPath1.update();
					}
				}
			}
		}
		this.__visibleCells = new $.ig.Array();
		this._visibleCellsByPath.clear();
		for (var i2 = 0; i2 < newVisibleCells.length; i2++) {
			var cell1 = newVisibleCells[i2];
			var path = cell1._path;
			if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, path._identifier)) {
				this._visibleCellsByPath.item(path._identifier, cell1);
				this.__visibleCells.add(cell1._path);
			}
		}
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::RemoveRows(Infragistics.CPGridView, Infragistics.CPList, Infragistics.CPGridViewCellAnimator)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewLayoutEngine::CellAtPoint(System.Int32, System.Int32)" />*/
	cellAtPoint: function (x, y) {
		var s = 0;
		var r = 0;
		var c = 0;
		var count = this._sections.length;
		for (var i = 0; i < count; i++) {
			r = 0;
			var section = this._sections[i];
			if (y >= section.getSectionTop()) {
				s = i;
				if (y <= section.getSectionBottom()) {
					if (section._headerHeight > 0) {
						r = $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX();
					}
					for (var j = 0; j < section._numberOfRows; j++) {
						var rowTop = section.getRowTop(j);
						var rowHeight = section.getFullRowHeight(j);
						if (y >= rowTop) {
							r = j;
							if (y <= rowTop + rowHeight) {
								break;
							}
						} else {
							break;
						}
					}
					break;
				} else {
					r = section._numberOfRows - 1;
				}
			} else {
				break;
			}
		}
		count = this._columns.length;
		for (var i1 = 0; i1 < count; i1++) {
			var column = this._columns[i1];
			if (x >= column._offset) {
				c = i1;
				if (x <= column._offset + column._actualWidth) {
					break;
				}
			} else {
				break;
			}
		}
		return new $.ig.CPCellPath(1, r, s, c);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewLayoutEngine::CellAtPoint(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetXForCell(System.Int32)" />*/
	getXForCell: function (col) {
		if (this._columns.length > col) {
			return (this._columns[col])._offset;
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetXForCell(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetYForCell(System.Int32, System.Int32)" />*/
	getYForCell: function (row, section) {
		var s = this._sections[section];
		return s.getRowTop(row);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewLayoutEngine::GetYForCell(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveRow(Infragistics.CPGridView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	moveRow: function (gridView, fromSection, from, toSection, to) {
		this.__ignoreRender = true;
		this.invalidateBounds(gridView, false);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		var visCellCount = this.__visibleCells.length;
		var newVisibleCellPaths = new $.ig.Array();
		var newVisibleCells = new $.ig.Array();
		for (var i = 0; i < visCellCount; i++) {
			var visPath = this.__visibleCells[i];
			newVisibleCellPaths.add(visPath);
			var cell = this._visibleCellsByPath.item(visPath._identifier);
			newVisibleCells.add(cell);
			if (fromSection == toSection) {
				if (visPath._sectionIndex == fromSection) {
					if (visPath._rowIndex == from) {
						visPath._rowIndex = to;
					} else if (from < to) {
						if (visPath._rowIndex > from && visPath._rowIndex <= to) {
							visPath._rowIndex--;
						}
					} else if (to < from) {
						if (visPath._rowIndex < from && visPath._rowIndex >= to) {
							visPath._rowIndex++;
						}
					}
					visPath.update();
				}
			} else if (visPath._rowIndex == from && visPath._sectionIndex == fromSection) {
				visPath._rowIndex = to;
				visPath._sectionIndex = toSection;
				visPath.update();
			} else if (visPath._rowIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_SECTION_HEADER_ROW_INDEX()) {
				if (visPath._sectionIndex == fromSection && visPath._rowIndex > from) {
					visPath._rowIndex--;
					visPath.update();
				} else if (visPath._sectionIndex == toSection && visPath._rowIndex >= to) {
					visPath._rowIndex++;
					visPath.update();
				}
			}
		}
		this._visibleCellsByPath.clear();
		for (var i1 = 0; i1 < newVisibleCellPaths.length; i1++) {
			var cell1 = newVisibleCells[i1];
			this._visibleCellsByPath.item(cell1._path._identifier, cell1);
		}
		this.__visibleCells = newVisibleCellPaths;
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveRow(Infragistics.CPGridView, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveColumn(Infragistics.CPGridView, System.Int32, System.Int32, System.Int32)" />*/
	moveColumn: function (gridView, section, from, to) {
		this.__ignoreRender = true;
		this.invalidateBounds(gridView, false);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		var visCellCount = this.__visibleCells.length;
		var newVisibleCellPaths = new $.ig.Array();
		var newVisibleCells = new $.ig.Array();
		for (var i = 0; i < visCellCount; i++) {
			var visPath = this.__visibleCells[i];
			newVisibleCellPaths.add(visPath);
			var cell = this._visibleCellsByPath.item(visPath._identifier);
			newVisibleCells.add(cell);
			if (visPath._sectionIndex == section) {
				if (visPath._columnIndex == from) {
					visPath._columnIndex = to;
				} else if (from < to) {
					if (visPath._columnIndex > from && visPath._columnIndex <= to) {
						visPath._columnIndex--;
					}
				} else if (to < from) {
					if (visPath._columnIndex < from && visPath._columnIndex >= to) {
						visPath._columnIndex++;
					}
				}
				visPath.update();
			}
		}
		this._visibleCellsByPath.clear();
		for (var i1 = 0; i1 < newVisibleCellPaths.length; i1++) {
			var cell1 = newVisibleCells[i1];
			this._visibleCellsByPath.item(cell1._path._identifier, cell1);
		}
		this.__visibleCells = newVisibleCellPaths;
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveColumn(Infragistics.CPGridView, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveSection(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	moveSection: function (gridView, from, to) {
		this.__ignoreRender = true;
		this.invalidateBounds(gridView, false);
		this.__ignoreRender = false;
		this.stopAnimating(gridView, false);
		var visCellCount = this.__visibleCells.length;
		var newVisibleCellPaths = new $.ig.Array();
		var newVisibleCells = new $.ig.Array();
		for (var i = 0; i < visCellCount; i++) {
			var visPath = this.__visibleCells[i];
			newVisibleCellPaths.add(visPath);
			var cell = this._visibleCellsByPath.item(visPath._identifier);
			newVisibleCells.add(cell);
			if (visPath._sectionIndex == from) {
				visPath._sectionIndex = to;
			} else if (from < to) {
				if (visPath._sectionIndex > from && visPath._sectionIndex <= to) {
					visPath._sectionIndex--;
				}
			} else if (to < from) {
				if (visPath._sectionIndex < from && visPath._sectionIndex >= to) {
					visPath._sectionIndex++;
				}
			}
			visPath.update();
		}
		this._visibleCellsByPath.clear();
		for (var i1 = 0; i1 < newVisibleCellPaths.length; i1++) {
			var cell1 = newVisibleCells[i1];
			this._visibleCellsByPath.item(cell1._path._identifier, cell1);
		}
		this.__visibleCells = newVisibleCellPaths;
		this.render(gridView, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MoveSection(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::AddRowQuielty(Infragistics.CPGridView, System.Int32)" />*/
	addRowQuielty: function (grid, sectionIndex) {
		var section = this._sections[sectionIndex];
		var offset = section.addRow(grid.isCurrentlyScrolledToBottom());
		this.updateContentHeightBy(grid, offset, true, true, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::AddRowQuielty(Infragistics.CPGridView, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MarkRowDirty(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	markRowDirty: function (grid, sectionIndex, rowIndex) {
		if (this._sections.length > sectionIndex) {
			var section = this._sections[sectionIndex];
			var offset = section.markRowHeightDirty(rowIndex);
			if (offset != 0) {
				this.updateContentHeightBy(grid, offset, false, true, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::MarkRowDirty(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateRowAtIndex(Infragistics.CPGridView, System.Int32, System.Int32, System.Boolean)" />*/
	updateRowAtIndex: function (grid, sectionIndex, rowIndex, animate) {
		if (this._sections.length <= sectionIndex) {
			return;
		}
		var section = this._sections[sectionIndex];
		var offset = section.updateRowAtIndex(rowIndex);
		var cellsInRowAreVisible = false;
		for (var i = 0; i < this._columns.length; i++) {
			var path = new $.ig.CPCellPath(1, rowIndex, sectionIndex, i);
			var cell = grid.cellAtPath(path);
			if (cell != null) {
				if (offset == 0 || !animate) {
					cell.data(grid.getDataSource().resolveDataObjectForRow(path));
				}
				cellsInRowAreVisible = true;
			}
		}
		this.stopAnimating(grid, true);
		if (offset != 0) {
			if (cellsInRowAreVisible && animate) {
				var currentTop = grid.getContentOffsetY();
				this.updateContentHeightBy(grid, offset, false, false, false);
				this.__animator = new $.ig.CPGridViewUpdateCellAnimator(rowIndex, sectionIndex, offset);
				var newTop = this.__animator.adjustVerticalScrollPosition(this, grid, currentTop);
				this.__animator._differenceInVerticalScrollPosition = currentTop - newTop;
				this.render(grid, true);
			} else {
				this.updateContentHeightBy(grid, offset, false, true, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::UpdateRowAtIndex(Infragistics.CPGridView, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::Unload()" />*/
	unload: function () {
		var count = this.__visibleCells.length;
		for (var i = 0; i < count; i++) {
			var path = this.__visibleCells[i];
			var pathId = path._identifier;
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this._visibleCellsByPath, pathId)) {
				var cell = this._visibleCellsByPath.item(pathId);
				cell.unload();
			} else {
				console.log("Bad state");
			}
		}
		this.__visibleCells.clear();
		this._visibleCellsByPath.clear();
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__availableCells);
		count = keys.length;
		for (var i1 = 0; i1 < count; i1++) {
			var key = keys[i1];
			var list = this.__availableCells.item(key);
			var cCount = list.length;
			for (var j = 0; j < cCount; j++) {
				var cell1 = list[j];
				cell1.unload();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewLayoutEngine::Unload()" />*/
	,
	$type: new $.ig.Type('CPGridViewLayoutEngine', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewLayoutEngine" />*/

/*<BeginType Name="Infragistics.GridLayoutChangeDelegate" />*/

$.ig.util.defType('GridLayoutChangeDelegate', 'Object', {
	$type: new $.ig.Type('GridLayoutChangeDelegate', null)
}, true);

/*<EndType Name="Infragistics.GridLayoutChangeDelegate" />*/

/*<BeginType Name="Infragistics.GridColumnResizeHandle" />*/

$.ig.util.defType('GridColumnResizeHandle', 'CPView', {
	__resizeBlock: null,
	__initX: 0,
	_willGridScrollWhenColResizedLeft: false,
	_willGridScrollWhenColResizedRight: false,
	__resizeCompleteBlock: null,
	__resizeHandleIcon: null,
	__isLeftHandle: false,
	_offset: 0,
	init: function (isLeftSide) {
		$.ig.CPView.prototype.init.call(this);
		this.__isLeftHandle = isLeftSide;
		this.__resizeHandleIcon = new $.ig.PathIconView();
		this.__resizeHandleIcon.setIcon($.ig.UIPathIcons.prototype.icons().getResizeHandle());
		this.__resizeHandleIcon._outlineOnly = false;
		this.addSubview(this.__resizeHandleIcon);
	},
	/*<BeginMethod Name="System.Void Infragistics.GridColumnResizeHandle::SetColor(System.String)" />*/
	setColor: function (color) {
		this.__resizeHandleIcon.iconColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.GridColumnResizeHandle::SetColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.__initX = x;
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this.__initX = -1;
		if (this.__resizeCompleteBlock != null) {
			this.__resizeCompleteBlock();
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.GridColumnResizeHandle::AddResizeCompleteHandler(Infragistics.ExecutionBlock)" />*/
	addResizeCompleteHandler: function (block) {
		this.__resizeCompleteBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.GridColumnResizeHandle::AddResizeCompleteHandler(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.GridColumnResizeHandle::AddResizeHandler(Infragistics.PointExecutionBlock)" />*/
	addResizeHandler: function (block) {
		this.__resizeBlock = block;
	}
	/*<EndMethod Name="System.Void Infragistics.GridColumnResizeHandle::AddResizeHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this.isMouseDown()) {
			var parent = this.getParent();
			x = Math.min(x, parent.currentWidth() - this.currentX());
			if (this.isHidden()) {
				return true;
			}
			var xDiff = x - this.__initX;
			if (((this.__isLeftHandle && xDiff > 0) || (!this.__isLeftHandle && xDiff < 0)) && this._willGridScrollWhenColResizedRight == false) {
				this.__initX = x;
			} else if (((this.__isLeftHandle && xDiff < 0) || (!this.__isLeftHandle && xDiff > 0)) && this._willGridScrollWhenColResizedLeft == false) {
				this.__initX = x;
			}
			if (this.__resizeBlock != null) {
				this.__resizeBlock(xDiff, y);
			}
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.GridColumnResizeHandle::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.GridColumnResizeHandle::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var iconSize = $.ig.truncate((w * 0.5));
		var iconX = $.ig.intDivide((w - iconSize), 2);
		if (this.__isLeftHandle) {
			iconX += this._offset;
		} else {
			iconX -= this._offset;
		}
		this.measureView(this.__resizeHandleIcon, iconX, $.ig.intDivide((h - iconSize), 2), iconSize, iconSize);
	}
	/*<EndMethod Name="System.Void Infragistics.GridColumnResizeHandle::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('GridColumnResizeHandle', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.GridColumnResizeHandle" />*/

/*<BeginType Name="Infragistics.CPGridViewNumericTextBoxCell" />*/

$.ig.util.defType('CPGridViewNumericTextBoxCell', 'CPGridViewItemCell', {
	__numericTextBox: null,
	init: function (sizingGuide, identifier) {
		$.ig.CPGridViewItemCell.prototype.init.call(this, sizingGuide, identifier);
		this.__numericTextBox = new $.ig.CPNumericTextView();
		this.__numericTextBox.textBoxPadding(0);
		this.__numericTextBox.isFocusable(false);
		this.addSubview(this.__numericTextBox);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__numericTextBox.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__numericTextBox.setHintTextColor($.ig.ThemeManager.prototype.theme().hintTextColor().$native());
		this.__numericTextBox.setTextAlignment($.ig.TextAlignment.prototype.right);
		this.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.setCornerRadius($.ig.ThemeManager.prototype.theme().smallCornerRadius());
		this.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.ensureFont();
	},
	/*<BeginProperty Name="Infragistics.CPNumericTextView Infragistics.CPGridViewNumericTextBoxCell::NumericTextView()" />*/
	numericTextView: function () {
		return this.__numericTextBox;
	}
	/*<EndProperty Name="Infragistics.CPNumericTextView Infragistics.CPGridViewNumericTextBoxCell::NumericTextView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::Disable()" />*/
	disable: function () {
		$.ig.CPGridViewItemCell.prototype.disable.call(this);
		this.__numericTextBox.disable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::Disable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::Enable()" />*/
	enable: function () {
		$.ig.CPGridViewItemCell.prototype.enable.call(this);
		this.__numericTextBox.enable();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::Enable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPGridViewNumericTextBoxCell::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPGridViewNumericTextBoxCell::HasCenterContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::ElementGotFocus()" />*/
	elementGotFocus: function () {
		$.ig.CPGridViewItemCell.prototype.elementGotFocus.call(this);
		this.numericTextView().setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::ApplyFont(System.Single, System.String)" />*/
	applyFont: function (fontSize, font) {
		$.ig.CPGridViewItemCell.prototype.applyFont.call(this, fontSize, font);
		this.__numericTextBox.setFont(fontSize, font);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::ApplyFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		$.ig.CPGridViewItemCell.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
		this.measureView1(this.__numericTextBox, x, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewNumericTextBoxCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPGridViewNumericTextBoxCell', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewNumericTextBoxCell" />*/

/*<BeginType Name="Infragistics.CPGridViewRowSeparatorCell" />*/

$.ig.util.defType('CPGridViewRowSeparatorCell', 'CPGridViewCellBase', {
	init: function (identifier) {
		$.ig.CPGridViewCellBase.prototype.init.call(this, identifier);
		this.isFocusable(false);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewRowSeparatorCell::CapturesFocus()" />*/
	capturesFocus: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewRowSeparatorCell::CapturesFocus()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewRowSeparatorCell::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewRowSeparatorCell::HandlesUIInteraction()" />*/
	,
	$type: new $.ig.Type('CPGridViewRowSeparatorCell', $.ig.CPGridViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewRowSeparatorCell" />*/

/*<BeginType Name="Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper" />*/

$.ig.util.defType('CPGridViewSingleFieldMultiColumnDataSourceHelper', 'CPGridViewDatasourceHelper', {
	__column: null,
	_numberOfColumns: 0,
	init: function (initNumber, columnDefinition) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewDatasourceHelper.prototype.init.call(this);
		this.__column = columnDefinition;
		this._numberOfColumns = 1;
	},
	init1: function (initNumber, columnDefinition, numOfCols) {
		$.ig.CPGridViewDatasourceHelper.prototype.init.call(this);
		this.__column = columnDefinition;
		this._numberOfColumns = numOfCols;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::SetColumn(Infragistics.CPGridViewColumnDefinition)" />*/
	setColumn: function (column) {
		this.__column = column;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::SetColumn(Infragistics.CPGridViewColumnDefinition)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::Column()" />*/
	column: function () {
		return this.__column;
	}
	/*<EndProperty Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::Column()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::InvalidateData()" />*/
	invalidateData: function () {
		this._autoGenerateColumns = false;
		this.columnDefinitions().clear();
		if (this.__column != null) {
			this.columnDefinitions().add(this.__column);
		}
		$.ig.CPGridViewDatasourceHelper.prototype.invalidateData.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::InvalidateData()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	resolveColumnForIndex: function (index) {
		return this.__column;
	}
	/*<EndMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetNumberOfColumnsInGrid()" />*/
	getNumberOfColumnsInGrid: function () {
		if (this._numberOfColumns <= 0) {
			return 1;
		}
		return this._numberOfColumns;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetNumberOfColumnsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	getNumberOfRowsInSection: function (section) {
		var count = this.resolveRowCount(section);
		return this.transformRowCount(count);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::TransformRowCount(System.Int32)" />*/
	transformRowCount: function (count) {
		var addtional = 0;
		var stretchPaths = this.stretchPaths();
		if (stretchPaths != null) {
			addtional = stretchPaths.length;
			count -= addtional;
		}
		var val = count / this.getNumberOfColumnsInGrid();
		if (val > $.ig.truncate(val)) {
			val = $.ig.truncate(val) + 1;
		}
		return $.ig.truncate(val) + addtional;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::TransformRowCount(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	normalizePath: function (path) {
		var stretchPaths = this.stretchPaths();
		if (stretchPaths != null) {
			if (path._columnIndex == 0 && path._fixedColumnDirection == $.ig.CPGridViewFixedColumnDirection.prototype.none && this.isStretchRow(path._rowIndex, path._sectionIndex)) {
				var stretchIndex = this.resolveStretchRowIndex(path._rowIndex, path._sectionIndex);
				if (stretchIndex >= 0) {
					return this.mappedStretchPaths()[stretchIndex];
				}
			}
		}
		var colCount = this.getNumberOfColumnsInGrid();
		if (colCount == 1) {
			return new $.ig.CPCellPath(0, path._rowIndex, path._sectionIndex, 0, path._fixedColumnDirection);
		}
		var normalizedRowIndex = (path._rowIndex * colCount) + path._columnIndex;
		var count = this.resolveRowCount(path._sectionIndex);
		if (normalizedRowIndex >= count) {
			return null;
		}
		return new $.ig.CPCellPath(0, normalizedRowIndex, path._sectionIndex, 0, path._fixedColumnDirection);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	deNormalizePath: function (path) {
		var columns = this.getNumberOfColumnsInGrid();
		var row = path._rowIndex / columns;
		var col = Math.round(((row - $.ig.truncate(row)) * columns));
		return new $.ig.CPCellPath(0, $.ig.truncate(row), path._sectionIndex, $.ig.truncate(col), path._fixedColumnDirection);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getCell: function (gridView, path) {
		var cell = null;
		var newPath = this.normalizePath(path);
		if (newPath != null) {
			cell = $.ig.CPGridViewDatasourceHelper.prototype.getCell.call(this, gridView, path);
		} else {
			var CellIdentifier = "SIMPLEEMPTYCELL";
			cell = gridView.dequeueReusableCellWithIdentifier(CellIdentifier);
			if (cell == null) {
				cell = new $.ig.CPGridViewCellBase(CellIdentifier);
				cell.disable();
			}
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetWidthForColumn(System.Int32)" />*/
	getWidthForColumn: function (columnIndex) {
		return this.__column.width();
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetWidthForColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::ResolveCellPathForData(System.Object)" />*/
	resolveCellPathForData: function (data) {
		var path = $.ig.CPGridViewDatasourceHelper.prototype.resolveCellPathForData.call(this, data);
		if (path != null) {
			var column = path._columnIndex;
			var row = path._rowIndex;
			var val = $.ig.truncate((path._rowIndex / this.getNumberOfColumnsInGrid()));
			column = row - (val * this.getNumberOfColumnsInGrid());
			row = val;
			path._rowIndex = row;
			path._columnIndex = column;
			path.update();
		}
		return path;
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::ResolveCellPathForData(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getHeaderCell: function (gridView, path) {
		return this.__column.getHeaderCell(gridView, path);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	$type: new $.ig.Type('CPGridViewSingleFieldMultiColumnDataSourceHelper', $.ig.CPGridViewDatasourceHelper.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewSingleFieldMultiColumnDataSourceHelper" />*/

/*<BeginType Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper" />*/

$.ig.util.defType('CPGridViewSingleFieldDynamicColumnDataSourceHelper', 'CPGridViewSingleFieldMultiColumnDataSourceHelper', {
	__targetColumnWidth: 0,
	__rowHeightApsect: 0,
	__rowHeight: 0,
	__maxNumberOfColumns: 0,
	_forcedNumberOfColumns: 0,
	init: function (initNumber, columnDefinition) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.init.call(this, 0, columnDefinition);
		this.__targetColumnWidth = $.ig.NativeUIUtility.prototype.utility().densify(250);
		this.__rowHeight = $.ig.ThemeManager.prototype.theme().resolveItemGuide($.ig.CPTheme.prototype.buttonGuideStyleLarge).height();
		this.__maxNumberOfColumns = -1;
	},
	init1: function (initNumber, columnDefinition, targetColumnWidth) {
		$.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.init.call(this, 0, columnDefinition);
		this.__targetColumnWidth = targetColumnWidth;
		this.__rowHeightApsect = 1;
		this.__rowHeight = -1;
		this.__maxNumberOfColumns = -1;
	},
	init2: function (initNumber, columnDefinition, targetColumnWidth, rowHeightAspect) {
		$.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.init.call(this, 0, columnDefinition);
		this.__targetColumnWidth = targetColumnWidth;
		this.__rowHeightApsect = rowHeightAspect;
		this.__rowHeight = -1;
		this.__maxNumberOfColumns = -1;
	},
	init3: function (initNumber, columnDefinition, targetColumnWidth, rowHeightAspect, maxNumberOfColumns) {
		$.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.init.call(this, 0, columnDefinition);
		this.__targetColumnWidth = targetColumnWidth;
		this.__rowHeightApsect = rowHeightAspect;
		this.__rowHeight = -1;
		this.__maxNumberOfColumns = maxNumberOfColumns;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::TargetColumnWidth()" />*/
	targetColumnWidth: function () {
		return this.__targetColumnWidth;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::TargetColumnWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::RowHeight()" />*/
	rowHeight: function (value) {
		if (arguments.length === 1) {
			this.__rowHeight = value;
			return value;
		} else {
			return this.__rowHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::RowHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::OnSizeChanged(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	onSizeChanged: function (gridView, w, h) {
		$.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.onSizeChanged.call(this, gridView, w, h);
		if (this.__targetColumnWidth > 0) {
			if (this.updateSizes(gridView, w, h)) {
				gridView.updateData(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::OnSizeChanged(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::CalculateNumberOfColumns(System.Int32, System.Int32)" />*/
	calculateNumberOfColumns: function (w, h) {
		var minWidth = this.__targetColumnWidth;
		var numOfColumns = $.ig.truncate((Math.floor($.ig.intDivide(w, minWidth))));
		var threshold = (w / minWidth) - numOfColumns;
		if (threshold >= 0.7) {
			numOfColumns++;
		}
		if (numOfColumns <= 0) {
			numOfColumns = 1;
		}
		if (this.__maxNumberOfColumns != -1) {
			numOfColumns = Math.min(this.__maxNumberOfColumns, numOfColumns);
		}
		return numOfColumns;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::CalculateNumberOfColumns(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::UpdateSizes(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	updateSizes: function (gridView, w, h) {
		var prevNumOfCols = this._numberOfColumns;
		var prevRowHeight = gridView._rowHeight;
		this._numberOfColumns = this._forcedNumberOfColumns <= 0 ? this.calculateNumberOfColumns(w, h) : this._forcedNumberOfColumns;
		if (this.__rowHeight <= 0) {
			var additionalCount = 1;
			if (gridView._neverUseSideSpacing) {
				additionalCount = -1;
			}
			var availWidth = w - gridView._columnSpacing * (this._numberOfColumns + additionalCount);
			var colWidth = $.ig.intDivide(availWidth, this._numberOfColumns);
			gridView._rowHeight = $.ig.truncate((colWidth * this.__rowHeightApsect));
		} else {
			gridView._rowHeight = this.__rowHeight;
		}
		return (this._numberOfColumns != prevNumOfCols || prevRowHeight != gridView._rowHeight);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper::UpdateSizes(Infragistics.CPGridView, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewSingleFieldDynamicColumnDataSourceHelper', $.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewSingleFieldDynamicColumnDataSourceHelper" />*/

/*<BeginType Name="Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper" />*/

$.ig.util.defType('CPGridViewSingleRowSingleFieldDataSourceHelper', 'CPGridViewDatasourceHelper', {
	__column: null,
	__fieldIndex: 0,
	init: function (columnDefinition) {
		$.ig.CPGridViewDatasourceHelper.prototype.init.call(this);
		this.__column = columnDefinition;
		this.__fieldIndex = 0;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::SetColumn(Infragistics.CPGridViewColumnDefinition)" />*/
	setColumn: function (columnDefinition) {
		this.__column = columnDefinition;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::SetColumn(Infragistics.CPGridViewColumnDefinition)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::Column()" />*/
	column: function () {
		return this.__column;
	}
	/*<EndProperty Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::Column()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	resolveColumnForIndex: function (index) {
		return this.__column;
	}
	/*<EndMethod Name="Infragistics.CPGridViewColumnDefinition Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::ResolveColumnForIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::InvalidateData()" />*/
	invalidateData: function () {
		this._autoGenerateColumns = false;
		this.columnDefinitions().clear();
		if (this.__column != null) {
			this.columnDefinitions().add(this.__column);
		}
		$.ig.CPGridViewDatasourceHelper.prototype.invalidateData.call(this);
		this.__fieldIndex = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::InvalidateData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetNumberOfColumnsInGrid()" />*/
	getNumberOfColumnsInGrid: function () {
		return this.resolveRowCount(0);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetNumberOfColumnsInGrid()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	getNumberOfRowsInSection: function (section) {
		return 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetNumberOfRowsInSection(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	normalizePath: function (path) {
		var normalizedRowIndex = path._columnIndex;
		return new $.ig.CPCellPath(0, normalizedRowIndex, path._sectionIndex, this.__fieldIndex, path._fixedColumnDirection);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::NormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	deNormalizePath: function (path) {
		return new $.ig.CPCellPath(0, path._columnIndex, path._sectionIndex, path._rowIndex, path._fixedColumnDirection);
	}
	/*<EndMethod Name="Infragistics.CPCellPath Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::DeNormalizePath(Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getCell: function (gridView, path) {
		var cell = null;
		var newPath = this.normalizePath(path);
		if (newPath != null) {
			cell = $.ig.CPGridViewDatasourceHelper.prototype.getCell.call(this, gridView, path);
		} else {
			var CellIdentifier = "SIMPLEEMPTYCELL";
			cell = gridView.dequeueReusableCellWithIdentifier(CellIdentifier);
			if (cell == null) {
				cell = new $.ig.CPGridViewCellBase(CellIdentifier);
			}
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetWidthForColumn(System.Int32)" />*/
	getWidthForColumn: function (columnIndex) {
		return this.__column.width();
	}
	/*<EndMethod Name="Infragistics.CPColumnWidth Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetWidthForColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	getHeaderCell: function (gridView, path) {
		return this.__column.getHeaderCell(gridView, path);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper::GetHeaderCell(Infragistics.CPGridView, Infragistics.CPCellPath)" />*/
	,
	$type: new $.ig.Type('CPGridViewSingleRowSingleFieldDataSourceHelper', $.ig.CPGridViewDatasourceHelper.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewSingleRowSingleFieldDataSourceHelper" />*/

/*<BeginType Name="Infragistics.CPGridViewUpdateCellAnimator" />*/

$.ig.util.defType('CPGridViewUpdateCellAnimator', 'CPGridViewCellAnimator', {
	__rowToUpdate: 0,
	__sectionToUpdate: 0,
	__offsetAmount: 0,
	init: function (row, section, offset) {
		$.ig.CPGridViewCellAnimator.prototype.init.call(this);
		this.__offsetAmount = offset;
		this.__rowToUpdate = row;
		this.__sectionToUpdate = section;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	measureNewCellToLocation: function (engine, cell) {
		engine.measureCell(cell, cell._frameX, cell._frameY - this.__offsetAmount, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::MeasureNewCellToLocation(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	addCellBeingRemoved: function (engine, cell) {
		$.ig.CPGridViewCellAnimator.prototype.addCellBeingRemoved.call(this, engine, cell);
		if (this._differenceInVerticalScrollPosition > 0) {
			engine.measureCell(cell, cell._frameX, cell._frameY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
		cell.storeFrame(cell._frameX, cell._frameY + this.__offsetAmount, cell._frameW, cell._frameH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::AddCellBeingRemoved(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	adjustExistingCellBeingLayedOut: function (engine, cell, prevX, prevY, prevW, prevH) {
		if (cell._path._rowIndex == this.__rowToUpdate && cell._path._sectionIndex == this.__sectionToUpdate && cell._path._columnIndex != $.ig.CPGridView.prototype.cPGRIDVIEWCELL_ROW_SEPARATOR_COLUMN_INDEX()) {
			cell.data(cell._gridView.getDataSource().resolveDataObjectForRow(cell._path));
		}
		if (this._differenceInVerticalScrollPosition != 0) {
			engine.measureCell(cell, cell._frameX, prevY - this._differenceInVerticalScrollPosition, cell._frameW, cell._frameH);
		}
		$.ig.CPGridViewCellAnimator.prototype.adjustExistingCellBeingLayedOut.call(this, engine, cell, prevX, prevY, prevW, prevH);
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewUpdateCellAnimator::AdjustExistingCellBeingLayedOut(Infragistics.CPGridViewLayoutEngine, Infragistics.CPGridViewCellBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewUpdateCellAnimator', $.ig.CPGridViewCellAnimator.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewUpdateCellAnimator" />*/

/*<BeginType Name="Infragistics.CPGridViewValueCell" />*/

$.ig.util.defType('CPGridViewValueCell', 'CPGridViewItemCell', {
	__valueLabel: null,
	init: function (sizingGuide, identifier) {
		$.ig.CPGridViewItemCell.prototype.init.call(this, sizingGuide, identifier);
		this.__valueLabel = new $.ig.CPLabel();
		this.contentContainer().addSubview(this.__valueLabel);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewValueCell::ApplyFont(System.Single, System.String)" />*/
	applyFont: function (fontSize, font) {
		$.ig.CPGridViewItemCell.prototype.applyFont.call(this, fontSize, font);
		if (this.__valueLabel != null) {
			this.__valueLabel.setFont(fontSize, font);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewValueCell::ApplyFont(System.Single, System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPLabel Infragistics.CPGridViewValueCell::ValueLabel()" />*/
	valueLabel: function () {
		return this.__valueLabel;
	}
	/*<EndProperty Name="Infragistics.CPLabel Infragistics.CPGridViewValueCell::ValueLabel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPGridViewValueCell::SetValue(System.String)" />*/
	setValue: function (value) {
		this.__valueLabel.setText(value);
		this.layoutCell();
	}
	/*<EndMethod Name="System.Void Infragistics.CPGridViewValueCell::SetValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPGridViewValueCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	textLabelAreaChanged: function (x, y, w, h) {
		this.__valueLabel.calculateSizeToFit();
		var vh = this.__valueLabel.getCalculatedHeight();
		var vw = this.__valueLabel.getCalculatedWidth();
		this.measureView1(this.__valueLabel, x + w - vw, $.ig.intDivide(h, 2) - $.ig.intDivide(vh, 2), vw, vh, this.resolveOpacity(this.restOpacity(), true));
		return w - vw - $.ig.ThemeManager.prototype.theme().padding10();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPGridViewValueCell::TextLabelAreaChanged(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPGridViewValueCell', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewValueCell" />*/

/*<BeginType Name="Infragistics.CPGridViewValueColumnDefinition" />*/

$.ig.util.defType('CPGridViewValueColumnDefinition', 'CPGridViewColumnDefinition', {
	init: function () {
		$.ig.CPGridViewColumnDefinition.prototype.init.call(this, 0, "self");
	},
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewValueColumnDefinition::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	getCell: function (gridView, path, dsh) {
		return $.ig.CPGridViewColumnDefinition.prototype.getCell.call(this, gridView, path, dsh);
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPGridViewValueColumnDefinition::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPGridViewValueColumnDefinition::ResolveValueForObject(System.Object, Infragistics.CPGridViewDatasourceHelper)" />*/
	resolveValueForObject: function (obj, dsh) {
		if (obj != null) {
			return $.ig.NativeStringUtility.prototype.toString1(obj);
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPGridViewValueColumnDefinition::ResolveValueForObject(System.Object, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	$type: new $.ig.Type('CPGridViewValueColumnDefinition', $.ig.CPGridViewColumnDefinition.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPGridViewValueColumnDefinition" />*/

/*<BeginType Name="Infragistics.InteractiveLabel" />*/

$.ig.util.defType('InteractiveLabel', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
	},
	__label: null,
	__interactiveTriggerIndex: 0,
	__isOverTrigger: false,
	/*<BeginProperty Name="System.Windows.TextAlignment Infragistics.InteractiveLabel::LabelTextAlignment()" />*/
	labelTextAlignment: function (value) {
		if (arguments.length === 1) {
			this.__label._textAlignment = value;
			return value;
		} else {
			return this.__label._textAlignment;
		}
	}
	/*<EndProperty Name="System.Windows.TextAlignment Infragistics.InteractiveLabel::LabelTextAlignment()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::Setup()" />*/
	setup: function () {
		$.ig.CPViewBase.prototype.setup.call(this);
		this.__label = new $.ig.InterativeLabelCanvas();
		this.__label.clipToBounds(false);
		this.addSubview(this.__label);
		this.clipToBounds(false);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SetColors(System.ColorInt, System.ColorInt)" />*/
	setColors: function (textColor, actionColor) {
		this.__label._textColor = textColor;
		this.__label._interationColor = actionColor;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SetColors(System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SetText(System.String, Infragistics.CPList)" />*/
	setText: function (text, triggers) {
		this.__label.setText(text, triggers);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SetText(System.String, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SetTextWrapping(System.Boolean)" />*/
	setTextWrapping: function (allowWrapping) {
		this.__label._wordWrap = allowWrapping;
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SetTextWrapping(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureView(this.__label, 0, 0, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		this.__isOverTrigger = false;
		var trigger = this.__label.resolveWordForLocation(x, y);
		if (trigger != null) {
			this.__interactiveTriggerIndex = trigger._wordIndex;
			this.__isOverTrigger = true;
			if (!quietly) {
				this.__label.setHighlight(this.__interactiveTriggerIndex);
			}
			return true;
		}
		this.__interactiveTriggerIndex = -1;
		return $.ig.CPViewBase.prototype.handlePointerDown.call(this, x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		var overIndex = this.isOverTriggerWord(x, y);
		if (overIndex > -1 && overIndex == this.__interactiveTriggerIndex) {
			if (!this.__isOverTrigger) {
				this.__isOverTrigger = true;
				this.__label.setHighlight(this.__interactiveTriggerIndex);
			}
		} else {
			if (this.__isOverTrigger) {
				this.__isOverTrigger = false;
				this.__label.setHighlight(-1);
			}
		}
		return $.ig.CPViewBase.prototype.handlePointerMove.call(this, x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InteractiveLabel::IsOverTriggerWord(System.Int32, System.Int32)" />*/
	isOverTriggerWord: function (x, y) {
		var trigger = this.__label.resolveWordForLocation(x, y);
		if (trigger != null && trigger._action != null) {
			return trigger._wordIndex;
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InteractiveLabel::IsOverTriggerWord(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		if (this.isOverTriggerWord(x, y) > -1) {
			this.setCursor($.ig.CPCursors.prototype.clickable);
		} else {
			this.setCursor($.ig.CPCursors.prototype.$default);
		}
		$.ig.CPViewBase.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		var handled = $.ig.CPViewBase.prototype.handlePointerUp.call(this, x, y);
		var trigger = this.__label.resolveWordForLocation(x, y);
		if (trigger != null && this.__interactiveTriggerIndex == trigger._wordIndex) {
			trigger._action();
			handled = true;
		}
		this.__label.setHighlight(-1);
		this.__interactiveTriggerIndex = -1;
		this.__isOverTrigger = false;
		return handled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPViewBase.prototype.handleClick.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.InteractiveLabel::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SetFont(System.Single, System.String)" />*/
	setFont: function (fontSize, font) {
		this.setFont1(fontSize, font, font);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SetFont(System.Single, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::SetFont(System.Single, System.String, System.String)" />*/
	setFont1: function (fontSize, font, triggerFont) {
		this.__label.setFont(fontSize, font, triggerFont);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::SetFont(System.Single, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.__label.calculate(0);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::CalculateSizeToFit(System.Int32)" />*/
	calculateSizeToFit1: function (limitWidth) {
		this.__label.calculate(limitWidth);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::CalculateSizeToFit(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InteractiveLabel::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__label._measuredWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InteractiveLabel::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.InteractiveLabel::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__label._measuredHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.InteractiveLabel::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InteractiveLabel::Render(System.Boolean)" />*/
	render: function (async) {
		this.__label.render1(async);
	}
	/*<EndMethod Name="System.Void Infragistics.InteractiveLabel::Render(System.Boolean)" />*/
	,
	$type: new $.ig.Type('InteractiveLabel', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InteractiveLabel" />*/

/*<BeginType Name="Infragistics.InterativeLabelCanvas" />*/

$.ig.util.defType('InterativeLabelCanvas', 'DrawingViewBase', {
	init: function () {
		this._textColor = new $.ig.Number();
		this._interationColor = new $.ig.Number();
		$.ig.DrawingViewBase.prototype.init.call(this);
	},
	__space: null,
	__newline: null,
	__triggers: null,
	__wordList: null,
	__renderWordList: null,
	__fontSize: 0,
	__font: null,
	__triggerFont: null,
	_measuredWidth: 0,
	_measuredHeight: 0,
	__hilightWord: 0,
	_wordWrap: false,
	__characterCount: 0,
	_textAlignment: 0,
	_sidePadding: 0,
	_lineHeightMultiplier: 0,
	_textColor: null,
	_interationColor: null,
	/*<BeginProperty Name="System.Boolean Infragistics.InterativeLabelCanvas::SupportsGlyphs()" />*/
	supportsGlyphs: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.InterativeLabelCanvas::SupportsGlyphs()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::Setup()" />*/
	setup: function () {
		$.ig.DrawingViewBase.prototype.setup.call(this);
		this.__hilightWord = -1;
		this._sidePadding = 0;
		this._lineHeightMultiplier = 1;
		this._textAlignment = $.ig.TextAlignment.prototype.center;
		this.__space = new $.ig.WordRenderInfo();
		this.__space._isSpace = true;
		this.__newline = new $.ig.WordRenderInfo();
		this.__newline._isNewline = true;
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		var ri = info;
		var count = ri._words.length;
		var font = $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(ri._font);
		var triggerFont = $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(ri._triggerFont);
		var hilightColor = $.ig.ColorUtility.prototype.lightenOrDarkenColor(ri._interactionColor, 0.2);
		for (var i = 0; i < count; i++) {
			var word = ri._words[i];
			if (word._isNewline) {
				continue;
			}
			var color = word._isInteractive ? ri._interactionColor : ri._textColor;
			var wordFont = word._isInteractive ? triggerFont : font;
			if (i == ri._highlightWord) {
				color = hilightColor;
			}
			this.drawText2(canvas, word._word, word._x, word._y, word._w, word._h, color, wordFont, ri._fontSize);
			if (word._hasInteraction && word._underlineInteraction) {
				this.drawLine(canvas, word._x, word._y + word._h, word._x + word._w, word._y + word._h, color, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.InteractionTrigger Infragistics.InterativeLabelCanvas::ResolveWordForLocation(System.Int32, System.Int32)" />*/
	resolveWordForLocation: function (x, y) {
		if (this.__wordList != null) {
			var count = this.__wordList.length;
			for (var i = 0; i < count; i++) {
				var word = this.__wordList[i];
				if (x >= word._x && x <= (word._x + word._w) && y >= word._y && y <= (word._y + word._h)) {
					if (word._hasInteraction) {
						return this.__triggers[word._triggerIndex];
					}
					return null;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.InteractionTrigger Infragistics.InterativeLabelCanvas::ResolveWordForLocation(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetText(System.String, Infragistics.CPList)" />*/
	setText: function (text, triggers) {
		this.__characterCount = text.length;
		var words = $.ig.NativeStringUtility.prototype.split(text, " ");
		this.__wordList = new $.ig.Array();
		this.__triggers = triggers;
		var hasTriggers = triggers != null && triggers.length > 0;
		var triggerIndex = 0;
		var current = hasTriggers ? triggers[0] : null;
		for (var i = 0; i < words.length; i++) {
			var word = words[i];
			if (hasTriggers && $.ig.NativeStringUtility.prototype.contains(word, "%@")) {
				var triggerInfo = new $.ig.WordRenderInfo();
				triggerInfo._word = current._value;
				triggerInfo._isInteractive = true;
				triggerInfo._hasInteraction = current._action != null;
				if (triggerInfo._hasInteraction) {
					triggerInfo._underlineInteraction = current._underline;
				}
				triggerInfo._index = triggerIndex;
				this.__wordList.add(triggerInfo);
				triggerInfo._triggerIndex = triggerIndex;
				var additionalWord = $.ig.NativeStringUtility.prototype.replace(word, "%@", "");
				if (additionalWord != null && additionalWord.length > 0) {
					var info = new $.ig.WordRenderInfo();
					info._word = additionalWord;
					info._triggerIndex = triggerIndex;
					this.__wordList.add(info);
				}
				current._wordIndex = i;
				triggerIndex++;
				if (triggerIndex < this.__triggers.length) {
					current = triggers[triggerIndex];
				}
			} else if ($.ig.NativeStringUtility.prototype.contains(word, "\r\n")) {
				this.separateByNewline(word, "\r\n");
			} else if ($.ig.NativeStringUtility.prototype.contains(word, "\n")) {
				this.separateByNewline(word, "\n");
			} else {
				var info1 = new $.ig.WordRenderInfo();
				info1._word = word;
				this.__wordList.add(info1);
			}
			if (i != words.length - 1) {
				this.__wordList.add(this.__space);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetText(System.String, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::SeparateByNewline(System.String, System.String)" />*/
	separateByNewline: function (text, splitVal) {
		var words = $.ig.NativeStringUtility.prototype.split(text, splitVal);
		for (var wordIndex = 0; wordIndex < words.length; wordIndex++) {
			var word = words[wordIndex];
			if (!word.equals("")) {
				var info = new $.ig.WordRenderInfo();
				info._word = word;
				this.__wordList.add(info);
			}
			if (wordIndex != words.length - 1) {
				this.__wordList.add(this.__newline);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::SeparateByNewline(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetFont(System.Single, System.String, System.String)" />*/
	setFont: function (fontSize, font, triggerFont) {
		this.__font = font;
		this.__fontSize = fontSize;
		this.__triggerFont = triggerFont;
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetFont(System.Single, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetHighlight(System.Int32)" />*/
	setHighlight: function (word) {
		this.__hilightWord = word;
		this.render1(true);
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::SetHighlight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.InterativeLabelCanvas::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		var info = new $.ig.InteractiveLabelRenderInfo();
		info._textColor = this._textColor;
		info._interactionColor = this._interationColor;
		info._font = this.__font;
		info._triggerFont = this.__triggerFont;
		info._fontSize = this.__fontSize;
		info._words = new $.ig.Array();
		info._highlightWord = this.__hilightWord;
		if (this.__renderWordList != null && this.__renderWordList.length > 0) {
			for (var i = 0; i < this.__renderWordList.length; i++) {
				var wi = this.__renderWordList[i];
				if (!wi._isSpace && !wi._isNewline) {
					var nwi = new $.ig.WordRenderInfo();
					nwi._x = wi._x;
					nwi._y = wi._y;
					nwi._w = wi._w;
					nwi._h = wi._h;
					nwi._word = wi._word;
					nwi._hasInteraction = wi._hasInteraction;
					nwi._isInteractive = wi._isInteractive;
					nwi._underlineInteraction = wi._underlineInteraction;
					info._words.add(nwi);
				}
			}
		}
		return info;
	}
	/*<EndMethod Name="System.Object Infragistics.InterativeLabelCanvas::ResolveDrawingInfo()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::Calculate(System.Int32)" />*/
	calculate: function (limitingWidth) {
		limitingWidth -= (this._sidePadding * 2);
		this._measuredHeight = 0;
		this._measuredWidth = 0;
		if (this.__wordList != null) {
			var lineWrap = limitingWidth > 0;
			var font = $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(this.__font);
			var triggerFont = $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(this.__triggerFont);
			this.measureText(" ", font, this.__fontSize);
			var widthOfSpace = this.measuredTextWidth();
			var wordCount = this.__wordList.length;
			var maxLineCount = (this._wordWrap) ? this.__characterCount + 1 : wordCount * 2 + 1;
			var lineWidths = new Array(maxLineCount);
			var line = 0;
			var lineHeight = this.measuredTextHeight();
			var maxLineWidth = 0;
			var currentLineWidth = 0;
			this.__renderWordList = new $.ig.Array();
			for (var i = 0; i < wordCount; i++) {
				var word = this.__wordList[i];
				this.__renderWordList.add(word);
				if (!word._isNewline) {
					if (word._isSpace) {
						word._w = widthOfSpace;
					} else {
						word._w = this.measureWord(word, font, triggerFont);
						if (this._wordWrap && word._w > limitingWidth && word._word != null && word._word.length > 1) {
							var splitWords = new $.ig.Array();
							this.splitWordToFitOnLine(word._word, 0, splitWords, limitingWidth, word._isInteractive, font, triggerFont);
							if (splitWords.length > 0) {
								this.__renderWordList.removeAt(this.__renderWordList.length - 1);
								for (var j = 0; j < splitWords.length; j++) {
									var splitWord = splitWords[j];
									var renderInfo = new $.ig.WordRenderInfo();
									renderInfo._word = splitWord;
									renderInfo._triggerIndex = word._triggerIndex;
									renderInfo._underlineInteraction = word._underlineInteraction;
									renderInfo._isInteractive = word._isInteractive;
									renderInfo._hasInteraction = word._hasInteraction;
									renderInfo._index = word._index;
									renderInfo._w = this.measureWord(renderInfo, font, triggerFont);
									this.__renderWordList.add(renderInfo);
								}
							}
						}
						lineHeight = Math.max(lineHeight, this.measuredTextHeight());
					}
				}
			}
			wordCount = this.__renderWordList.length;
			for (var i1 = 0; i1 < wordCount; i1++) {
				var word1 = this.__renderWordList[i1];
				if (word1._isNewline) {
					lineWidths[line] = currentLineWidth;
					maxLineWidth = Math.max(maxLineWidth, currentLineWidth);
					line++;
					currentLineWidth = 0;
				} else if (!lineWrap) {
					currentLineWidth += word1._w;
				} else {
					if (this._textAlignment == $.ig.TextAlignment.prototype.center && word1._isSpace && (currentLineWidth == 0 || currentLineWidth + widthOfSpace > limitingWidth)) {
						continue;
					}
					if ((currentLineWidth + word1._w) > limitingWidth) {
						if (currentLineWidth == 0) {
							lineWidths[line] = word1._w;
							maxLineWidth = Math.max(maxLineWidth, word1._w);
							word1._lineNumber = line;
							line++;
							currentLineWidth = 0;
						} else {
							lineWidths[line] = currentLineWidth;
							maxLineWidth = Math.max(maxLineWidth, currentLineWidth);
							line++;
							word1._lineNumber = line;
							currentLineWidth = word1._w;
						}
					} else {
						word1._lineNumber = line;
						currentLineWidth += word1._w;
					}
					if (i1 < wordCount - 1) {
						if (((currentLineWidth) > limitingWidth) || word1._isNewline) {
							lineWidths[line] = currentLineWidth;
							maxLineWidth = Math.max(maxLineWidth, currentLineWidth);
							line++;
							currentLineWidth = 0;
						}
					}
				}
			}
			lineWidths[line] = currentLineWidth;
			maxLineWidth = Math.max(maxLineWidth, currentLineWidth);
			this._measuredWidth = $.ig.truncate((lineWrap ? limitingWidth : (maxLineWidth + (this._sidePadding * 2))));
			lineHeight = (lineHeight * this._lineHeightMultiplier);
			this._measuredHeight = $.ig.truncate(((line + 1) * lineHeight));
			var currentLine = 0;
			var x = this._sidePadding;
			if (this._textAlignment == $.ig.TextAlignment.prototype.center) {
				x = ($.ig.intDivide(this._measuredWidth, 2) - lineWidths[currentLine] / 2);
			} else if (this._textAlignment == $.ig.TextAlignment.prototype.right) {
				x = (this._measuredWidth - lineWidths[currentLine]);
			}
			for (var i2 = 0; i2 < wordCount; i2++) {
				var wi = this.__renderWordList[i2];
				if (!wi._isSpace && !wi._isNewline) {
					wi._h = lineHeight;
					wi._y = wi._lineNumber * lineHeight;
					if (wi._lineNumber != currentLine) {
						currentLine = wi._lineNumber;
						x = this._sidePadding;
						if (this._textAlignment == $.ig.TextAlignment.prototype.center) {
							x = ($.ig.intDivide(this._measuredWidth, 2) - lineWidths[currentLine] / 2);
						} else if (this._textAlignment == $.ig.TextAlignment.prototype.right) {
							x = (this._measuredWidth - lineWidths[currentLine]);
						}
					}
					wi._x = x;
				}
				x += wi._w;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::Calculate(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.InterativeLabelCanvas::SplitWordToFitOnLine(System.String, System.Int32, Infragistics.CPList, System.Single, System.Boolean, System.String, System.String)" />*/
	splitWordToFitOnLine: function (word, startCharacterIndex, words, lineWidth, isInteractive, font, triggerFont) {
		var length = word.length - startCharacterIndex;
		var subStringOffset = 0;
		while (length - subStringOffset > 0) {
			var substringVal = $.ig.NativeStringUtility.prototype.substring(word, startCharacterIndex, length - subStringOffset);
			var subStringWidth = this.measureWord1(substringVal, isInteractive, font, triggerFont);
			if (subStringWidth <= lineWidth) {
				words.add(substringVal);
				this.splitWordToFitOnLine(word, startCharacterIndex + length - subStringOffset, words, lineWidth, isInteractive, font, triggerFont);
				return;
			}
			subStringOffset++;
		}
		if (length > 0) {
			var substringVal1 = $.ig.NativeStringUtility.prototype.substring(word, startCharacterIndex, 1);
			words.add(substringVal1);
			this.splitWordToFitOnLine(word, startCharacterIndex + 1, words, lineWidth, isInteractive, font, triggerFont);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.InterativeLabelCanvas::SplitWordToFitOnLine(System.String, System.Int32, Infragistics.CPList, System.Single, System.Boolean, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.InterativeLabelCanvas::MeasureWord(Infragistics.WordRenderInfo, System.String, System.String)" />*/
	measureWord: function (word, font, triggerFont) {
		return this.measureWord1(word._word, word._isInteractive, font, triggerFont);
	}
	/*<EndMethod Name="System.Single Infragistics.InterativeLabelCanvas::MeasureWord(Infragistics.WordRenderInfo, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.InterativeLabelCanvas::MeasureWord(System.String, System.Boolean, System.String, System.String)" />*/
	measureWord1: function (word, isInteractive, font, triggerFont) {
		if (isInteractive) {
			this.measureText(word, triggerFont, this.__fontSize);
		} else {
			this.measureText(word, font, this.__fontSize);
		}
		return this.measuredTextWidth();
	}
	/*<EndMethod Name="System.Single Infragistics.InterativeLabelCanvas::MeasureWord(System.String, System.Boolean, System.String, System.String)" />*/
	,
	$type: new $.ig.Type('InterativeLabelCanvas', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InterativeLabelCanvas" />*/

/*<BeginType Name="Infragistics.InteractiveLabelRenderInfo" />*/

$.ig.util.defType('InteractiveLabelRenderInfo', 'Object', {
	init: function () {
		this._textColor = new $.ig.Number();
		this._interactionColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
	},
	_words: null,
	_fontSize: 0,
	_font: null,
	_triggerFont: null,
	_textColor: null,
	_interactionColor: null,
	_highlightWord: 0,
	$type: new $.ig.Type('InteractiveLabelRenderInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InteractiveLabelRenderInfo" />*/

/*<BeginType Name="Infragistics.WordRenderInfo" />*/

$.ig.util.defType('WordRenderInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_word: null,
	_x: 0,
	_y: 0,
	_w: 0,
	_h: 0,
	_index: 0,
	_lineNumber: 0,
	_isInteractive: false,
	_triggerIndex: 0,
	_hasInteraction: false,
	_underlineInteraction: false,
	_isSpace: false,
	_isNewline: false,
	$type: new $.ig.Type('WordRenderInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.WordRenderInfo" />*/

/*<BeginType Name="Infragistics.InteractionTrigger" />*/

$.ig.util.defType('InteractionTrigger', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._underline = true;
	},
	init1: function (initNumber, val, block) {
		$.ig.Object.prototype.init.call(this);
		this._value = val;
		this._action = block;
		this._underline = true;
	},
	_value: null,
	_action: null,
	_wordIndex: 0,
	_underline: false,
	$type: new $.ig.Type('InteractionTrigger', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.InteractionTrigger" />*/

/*<BeginType Name="Infragistics.CPKeyboardDelegate" />*/

$.ig.util.defType('CPKeyboardDelegate', 'Object', {
	$type: new $.ig.Type('CPKeyboardDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPKeyboardDelegate" />*/

/*<BeginType Name="Infragistics.CPKeyCombo" />*/

$.ig.util.defType('CPKeyCombo', 'Object', {
	init: function (initNumber, comboKey) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._key = comboKey;
	},
	init1: function (initNumber, desc, comboKey, ctrl, shift, alt) {
		$.ig.Object.prototype.init.call(this);
		this._description = desc;
		this._key = comboKey;
		this._isAltDown = alt;
		this._isShiftDown = shift;
		this._isCtrlDown = ctrl;
	},
	_key: 0,
	_description: null,
	_isShiftDown: false,
	_isCtrlDown: false,
	_isAltDown: false,
	/*<BeginMethod Name="System.Boolean Infragistics.CPKeyCombo::EqualsKeyCombo(Infragistics.CPKeyCombo)" />*/
	equalsKeyCombo: function (combo) {
		return combo._key == this._key && combo._isShiftDown == this._isShiftDown && combo._isCtrlDown == this._isCtrlDown && combo._isAltDown == this._isAltDown;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPKeyCombo::EqualsKeyCombo(Infragistics.CPKeyCombo)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Close()" />*/
	close: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "Close", $.ig.Key.prototype.escape, false, false, false));
		combos.add(new $.ig.CPKeyCombo(1, "Close", $.ig.Key.prototype.w, true, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Close()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Undo()" />*/
	undo: function () {
		return new $.ig.CPKeyCombo(1, "Undo", $.ig.Key.prototype.z, true, false, false);
	}
	/*<EndProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Undo()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Redo()" />*/
	redo: function () {
		return new $.ig.CPKeyCombo(1, "Redo", $.ig.Key.prototype.y, true, false, false);
	}
	/*<EndProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Redo()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Save()" />*/
	save: function () {
		return new $.ig.CPKeyCombo(1, "Save", $.ig.Key.prototype.s, true, false, false);
	}
	/*<EndProperty Name="Infragistics.CPKeyCombo Infragistics.CPKeyCombo::Save()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Option()" />*/
	option: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "Option", $.ig.Key.prototype.f10, false, true, false));
		combos.add(new $.ig.CPKeyCombo(1, "Option", $.ig.Key.prototype.oemPeriod, true, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Option()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Home()" />*/
	home: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "Home", $.ig.Key.prototype.home, false, false, false));
		combos.add(new $.ig.CPKeyCombo(1, "Home", $.ig.Key.prototype.up, true, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Home()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::End()" />*/
	end: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "End", $.ig.Key.prototype.end, false, false, false));
		combos.add(new $.ig.CPKeyCombo(1, "End", $.ig.Key.prototype.down, true, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::End()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Right()" />*/
	right: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "Right", $.ig.Key.prototype.right, false, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Right()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Left()" />*/
	left: function () {
		var combos = new $.ig.Array();
		combos.add(new $.ig.CPKeyCombo(1, "Left", $.ig.Key.prototype.left, false, false, false));
		return combos;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPKeyCombo::Left()" />*/
	,
	$type: new $.ig.Type('CPKeyCombo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPKeyCombo" />*/

/*<BeginType Name="Infragistics.CPKeyCommand" />*/

$.ig.util.defType('CPKeyCommand', 'Object', {
	init: function (initNumber, keyCombo, keyComboAction) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._combos = new $.ig.Array();
		this._combos.add(keyCombo);
		this._action = keyComboAction;
	},
	init1: function (initNumber, keyCombos, keyCombosAction) {
		$.ig.Object.prototype.init.call(this);
		this._combos = keyCombos;
		this._action = keyCombosAction;
	},
	_combos: null,
	_action: null,
	$type: new $.ig.Type('CPKeyCommand', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPKeyCommand" />*/

/*<BeginType Name="Infragistics.CPKeyboardEventManager" />*/

$.ig.util.defType('CPKeyboardEventManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPKeyboardEventManager::NotifyKeyPressed(Infragistics.CPKeyCombo)" />*/
	notifyKeyPressed: function (combo) {
		$.ig.UIUtility.prototype.trackActivity();
		if (!$.ig.CPKeyboardEventManager.prototype.ignoreKeyPresses) {
			if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null) {
				var currentFocusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
				if (currentFocusManager != null) {
					var commands = currentFocusManager.getCurrentListOfSupportedKeyCombos($.ig.CPKeyboardEventManager.prototype.getTextViewCommandsFromNonCurrentFocusManager());
					for (var i = 0; i < commands.length; i++) {
						var command = commands[i];
						for (var x = 0; x < command._combos.length; x++) {
							var commandCombo = command._combos[x];
							if (commandCombo.equalsKeyCombo(combo)) {
								command._action(combo);
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPKeyboardEventManager::NotifyKeyPressed(Infragistics.CPKeyCombo)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::RegisterNewListenerLayer()" />*/
	registerNewListenerLayer: function () {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack == null) {
			$.ig.CPKeyboardEventManager.prototype._listenerLayerStack = new $.ig.Array();
		}
		var focusManager = new $.ig.CPFocusManager();
		$.ig.CPKeyboardEventManager.prototype._listenerLayerStack.add(focusManager);
		return focusManager;
	}
	/*<EndMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::RegisterNewListenerLayer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPKeyboardEventManager::EnsureLayer()" />*/
	ensureLayer: function () {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack == null) {
			$.ig.CPKeyboardEventManager.prototype._listenerLayerStack = new $.ig.Array();
			var focusManager = new $.ig.CPFocusManager();
			$.ig.CPKeyboardEventManager.prototype._listenerLayerStack.add(focusManager);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPKeyboardEventManager::EnsureLayer()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::GetCurrentFocusManager()" />*/
	getCurrentFocusManager: function () {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null && $.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length > 0) {
			return $.ig.CPKeyboardEventManager.prototype._listenerLayerStack[$.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length - 1];
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::GetCurrentFocusManager()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPKeyboardEventManager::GetTextViewCommandsFromNonCurrentFocusManager()" />*/
	getTextViewCommandsFromNonCurrentFocusManager: function () {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null) {
			var topMost = $.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length - 1;
			for (var i = topMost; i >= 0; i--) {
				var manager = $.ig.CPKeyboardEventManager.prototype._listenerLayerStack[i];
				var list = manager.getFocusedTextViewCommands(i == topMost);
				if (list != null) {
					return list;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPKeyboardEventManager::GetTextViewCommandsFromNonCurrentFocusManager()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPKeyboardEventManager::UnregisterListenerLayer()" />*/
	unregisterListenerLayer: function () {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null && $.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length > 0) {
			$.ig.CPKeyboardEventManager.prototype._listenerLayerStack.removeAt($.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length - 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPKeyboardEventManager::UnregisterListenerLayer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPKeyboardEventManager::UnregisterListenerLayer(Infragistics.CPFocusManager)" />*/
	unregisterListenerLayer1: function (focusManager) {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null && $.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length > 0) {
			if (focusManager != null) {
				$.ig.CPKeyboardEventManager.prototype._listenerLayerStack.removeItem(focusManager);
				focusManager.unload();
				focusManager = null;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPKeyboardEventManager::UnregisterListenerLayer(Infragistics.CPFocusManager)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPKeyboardEventManager::ClearAllLayers()" />*/
	clearAllLayers: function () {
		$.ig.CPKeyboardEventManager.prototype._listenerLayerStack = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPKeyboardEventManager::ClearAllLayers()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::GetFocusManagerWithSectionId(System.String)" />*/
	getFocusManagerWithSectionId: function (sectionId) {
		if ($.ig.CPKeyboardEventManager.prototype._listenerLayerStack != null) {
			for (var i = $.ig.CPKeyboardEventManager.prototype._listenerLayerStack.length - 1; i >= 0; i--) {
				var manager = $.ig.CPKeyboardEventManager.prototype._listenerLayerStack[i];
				if (manager.getSectionById(sectionId) != null) {
					return manager;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPFocusManager Infragistics.CPKeyboardEventManager::GetFocusManagerWithSectionId(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPKeyboardEventManager::ProcessKeyDown(System.JQuery.JQueryEvent)" />*/
	processKeyDown: function (e) {
		var code = e.keyCode ? e.keyCode : e.which;
		var combo = new $.ig.CPKeyCombo(0, code);
		combo._isAltDown = e.altKey;
		combo._isCtrlDown = e.ctrlKey || e.metaKey;
		combo._isShiftDown = e.shiftKey;
		if ($.ig.CPKeyboardEventManager.prototype.notifyKeyPressed(combo)) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPKeyboardEventManager::ProcessKeyDown(System.JQuery.JQueryEvent)" />*/
	,
	$type: new $.ig.Type('CPKeyboardEventManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPKeyboardEventManager" />*/

/*<BeginType Name="Infragistics.CPSection" />*/

$.ig.util.defType('CPSection', 'CPKeyboardCommandListener', {
	_sectionId: null,
	_nextSectionId: null,
	_sectionContainer: null,
	_index: 0,
	init: function (sid, sectionIndex, container) {
		$.ig.CPKeyboardCommandListener.prototype.init.call(this);
		this._sectionId = sid;
		this._index = sectionIndex;
		this._sectionContainer = container;
	},
	$type: new $.ig.Type('CPSection', $.ig.CPKeyboardCommandListener.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSection" />*/

/*<BeginType Name="Infragistics.CPTriggersOnboardingBubbleDelegate" />*/

$.ig.util.defType('CPTriggersOnboardingBubbleDelegate', 'Object', {
	$type: new $.ig.Type('CPTriggersOnboardingBubbleDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPTriggersOnboardingBubbleDelegate" />*/

/*<BeginType Name="Infragistics.PathIconView" />*/

$.ig.util.defType('PathIconView', 'AnimatableDrawingView', {
	init: function () {
		this.__color = new $.ig.Number();
		$.ig.AnimatableDrawingView.prototype.init.call(this);
	},
	__color: null,
	_hasIcon: false,
	__degrees: 0,
	__modifyColorPercentage: 0,
	__modifyColorByLighten: false,
	__animatingRotation: false,
	__targetDegrees: 0,
	__startDegrees: 0,
	_desaturatePercent: 0,
	/*<BeginProperty Name="System.String Infragistics.PathIconView::IconColor()" />*/
	iconColor: function (value) {
		if (arguments.length === 1) {
			this.__color = $.ig.ColorUtility.prototype.convertToInt(value);
			return value;
		} else {
			return $.ig.ColorUtility.prototype.convertToNative(this.__color);
		}
	}
	/*<EndProperty Name="System.String Infragistics.PathIconView::IconColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::SetRotation(System.Single, System.Boolean)" />*/
	setRotation: function (degrees, animate) {
		if (animate) {
			this.__startDegrees = this.__degrees;
			this.__targetDegrees = degrees;
			this.startWhereWeLeftOff();
			this.__animatingRotation = true;
		} else {
			this.__degrees = degrees;
			this.render1(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::SetRotation(System.Single, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::Rotate(System.Single)" />*/
	rotate: function (degrees) {
		this.__degrees = degrees;
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::Rotate(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::LightenOrDarkenIconColorByPercentage(System.Boolean, System.Double)" />*/
	lightenOrDarkenIconColorByPercentage: function (lighten, percentage) {
		this.__modifyColorPercentage = percentage;
		this.__modifyColorByLighten = lighten;
		if (percentage > 0) {
			if (this.__modifyColorByLighten) {
				this.setIntColor($.ig.ColorUtility.prototype.lightenColor(this.__color, this.__modifyColorPercentage));
			} else {
				this.setIntColor($.ig.ColorUtility.prototype.darkenColor(this.__color, this.__modifyColorPercentage));
			}
		} else {
			this.setIntColor($.ig.ThemeManager.prototype.theme().foregroundColor().color());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::LightenOrDarkenIconColorByPercentage(System.Boolean, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::Tick(System.Double)" />*/
	tick: function (percent) {
		if (this.__animatingRotation) {
			this.__degrees = $.ig.CPMathUtility.prototype.transitionDouble(this.__startDegrees, this.__targetDegrees, percent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::Tick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::AnimationComplete()" />*/
	animationComplete: function () {
		this.__animatingRotation = false;
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::AnimationComplete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::SetIntColor(System.ColorInt)" />*/
	setIntColor: function (color) {
		this.__color = color;
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::SetIntColor(System.ColorInt)" />*/
	,
	_outlineOnly: false,
	__icon: null,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::Setup()" />*/
	setup: function () {
		$.ig.AnimatableDrawingView.prototype.setup.call(this);
		this._outlineOnly = true;
		this.__color = $.ig.ThemeManager.prototype.theme().foregroundColor().color();
		this.clipToBounds(false);
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		var iconInfo = info;
		if (iconInfo._icon != null) {
			this.drawIcon(canvas, iconInfo._icon, iconInfo._color, 0, 0, w, h, iconInfo._outlineOnly, iconInfo._rotationDegrees, iconInfo._desaturatePercent);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::DrawIcon(System.CanvasContext, Infragistics.PathIcon, System.ColorInt, System.Single, System.Single, System.Single, System.Single, System.Boolean, System.Single, System.Double)" />*/
	drawIcon: function (canvas, icon, color, x, y, w, h, shouldOutline, rotationDegrees, desaturatePercentage) {
		var multiplier = w / icon._divider;
		if (color == 0) {
			color = icon._color;
		}
		var centerX = (w / 2);
		var centerY = (h / 2);
		this.translateCanvas(canvas, centerX, centerY);
		this.rotateCanvas(canvas, $.ig.UIUtility.prototype.convertDegreesToRadians(rotationDegrees));
		this.translateCanvas(canvas, -centerX, -centerY);
		var parts = icon._parts;
		var count = parts.length;
		for (var i = 0; i < count; i++) {
			var part = parts[i];
			if (part._fillAndOutline) {
				this.drawPath(canvas, x, y, w, h, multiplier, part, false, part._fillColor, part._gradient);
				this.drawPath(canvas, x, y, w, h, multiplier, part, true, part._color, part._gradient);
			} else {
				var renderColor = part._color;
				if (renderColor == 0) {
					renderColor = color;
				}
				if (desaturatePercentage > 0) {
					renderColor = $.ig.ColorUtility.prototype.desaturateColor(renderColor, desaturatePercentage);
				}
				if (this.__modifyColorPercentage > 0) {
					if (this.__modifyColorByLighten) {
						renderColor = $.ig.ColorUtility.prototype.lightenColor(renderColor, this.__modifyColorPercentage);
					} else {
						renderColor = $.ig.ColorUtility.prototype.darkenColor(renderColor, this.__modifyColorPercentage);
					}
				}
				var outline = part._outlineOnly ? true : shouldOutline;
				this.drawPath(canvas, x, y, w, h, multiplier, part, outline, renderColor, part._gradient);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::DrawIcon(System.CanvasContext, Infragistics.PathIcon, System.ColorInt, System.Single, System.Single, System.Single, System.Single, System.Boolean, System.Single, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::SetIcon(Infragistics.PathIcon)" />*/
	setIcon: function (icon) {
		this.__icon = icon;
		this._hasIcon = this.__icon != null;
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::SetIcon(Infragistics.PathIcon)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconView::DrawPath(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, Infragistics.PathIconPart, System.Boolean, System.ColorInt, Infragistics.CPLinearGradientBrush)" />*/
	drawPath: function (canvas, x, y, w, h, multiplier, part, stroke, color, brush) {
		this.saveCanvas(canvas);
		this.resetPath(canvas);
		var count = part._commands.length;
		for (var i = 0; i < count; i++) {
			var command = part._commands[i];
			switch (command._commandType) {
				case $.ig.PathCommandType.prototype.move:
					this.moveTo(canvas, x + command._values[0] * multiplier, y + command._values[1] * multiplier);
					break;
				case $.ig.PathCommandType.prototype.line:
					this.lineTo(canvas, x + command._values[0] * multiplier, y + command._values[1] * multiplier);
					break;
				case $.ig.PathCommandType.prototype.curve:
					this.cubicTo(canvas, x + command._values[0] * multiplier, y + command._values[1] * multiplier, x + command._values[2] * multiplier, y + command._values[3] * multiplier, x + command._values[4] * multiplier, y + command._values[5] * multiplier);
					break;
				case $.ig.PathCommandType.prototype.arc: break;
				case $.ig.PathCommandType.prototype.end:
					{
						this.closePath(canvas);
						break;
					}
				case $.ig.PathCommandType.prototype.none: break;
			}
		}
		if (part._hasShadow) {
			this.addShadow(canvas, part._shadowColor, x + part._shadowX, y + part._shadowY, part._blur);
		}
		if (part._colorAlpha != 0) {
			color = $.ig.ColorUtility.prototype.applyAlphaToColor((255 * part._colorAlpha), color);
		}
		if (brush != null) {
			this.fillGradientShape(canvas, brush, w, h);
		} else if (stroke) {
			this.fillShape1(canvas, 0, color, $.ig.NativeUIUtility.prototype.utility().densifyDontScale(1), part._strokeCap, part._strokeJoin);
		} else {
			this.fillShape(canvas, color, 0, 0);
		}
		this.restoreCanvas(canvas);
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconView::DrawPath(System.CanvasContext, System.Single, System.Single, System.Single, System.Single, System.Single, Infragistics.PathIconPart, System.Boolean, System.ColorInt, Infragistics.CPLinearGradientBrush)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.PathIconView::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		var info = new $.ig.PathIconRenderInfo();
		info._icon = this.__icon;
		info._color = this.__color;
		info._rotationDegrees = this.__degrees;
		info._outlineOnly = this._outlineOnly;
		info._desaturatePercent = this._desaturatePercent;
		return info;
	}
	/*<EndMethod Name="System.Object Infragistics.PathIconView::ResolveDrawingInfo()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.PathIconView::AnimationDuration()" />*/
	animationDuration: function () {
		return $.ig.ThemeManager.prototype.theme().animationDuration() * 1000;
	}
	/*<EndMethod Name="System.Double Infragistics.PathIconView::AnimationDuration()" />*/
	,
	$type: new $.ig.Type('PathIconView', $.ig.AnimatableDrawingView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathIconView" />*/

/*<BeginType Name="Infragistics.PathIconRenderInfo" />*/

$.ig.util.defType('PathIconRenderInfo', 'Object', {
	init: function () {
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
	},
	_icon: null,
	_color: null,
	_outlineOnly: false,
	_rotationDegrees: 0,
	_desaturatePercent: 0,
	$type: new $.ig.Type('PathIconRenderInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathIconRenderInfo" />*/

/*<BeginType Name="Infragistics.PathIcon" />*/

$.ig.util.defType('PathIcon', 'Object', {
	_color: null,
	_parts: null,
	_divider: 0,
	init: function (initNumber, pathColor, pathDivider, pathParts) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._color = pathColor;
		this._divider = pathDivider;
		this._parts = pathParts;
	},
	init1: function (initNumber, pathColor, pathDivider, path) {
		this._color = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._color = pathColor;
		this._divider = pathDivider;
		this._parts = new $.ig.Array();
		this._parts.add(new $.ig.PathIconPart(0, 0, path));
	},
	$type: new $.ig.Type('PathIcon', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathIcon" />*/

/*<BeginType Name="Infragistics.PathIconPart" />*/

$.ig.util.defType('PathIconPart', 'Object', {
	_color: null,
	_shadowColor: null,
	_fillColor: null,
	_hasShadow: false,
	_commands: null,
	_shadowX: 0,
	_shadowY: 0,
	_blur: 0,
	_outlineOnly: false,
	_strokeCap: 0,
	_strokeJoin: 0,
	_fillAndOutline: false,
	_colorAlpha: 0,
	_gradient: null,
	init: function (initNumber, partColor, path) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
				case 5:
					this.init5.apply(this, arguments);
					break;
				case 6:
					this.init6.apply(this, arguments);
					break;
				case 7:
					this.init7.apply(this, arguments);
					break;
			}
			return;
		}
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = partColor;
		this.processPath(path);
		this._strokeCap = $.ig.CPStrokeCap.prototype.butt;
		this._strokeJoin = $.ig.CPStrokeJoin.prototype.miter;
		this._fillAndOutline = false;
	},
	init1: function (initNumber, partColor, outline, path) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = partColor;
		this._outlineOnly = outline;
		this.processPath(path);
		this._strokeCap = $.ig.CPStrokeCap.prototype.butt;
		this._strokeJoin = $.ig.CPStrokeJoin.prototype.miter;
		this._fillAndOutline = false;
	},
	init2: function (initNumber, brush, iconPath) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = 0;
		this._gradient = brush;
		this._outlineOnly = false;
		this.processPath(iconPath);
		this._strokeCap = $.ig.CPStrokeCap.prototype.butt;
		this._strokeJoin = $.ig.CPStrokeJoin.prototype.miter;
		this._fillAndOutline = false;
	},
	init3: function (initNumber, partColor, outline, path, offset) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = partColor;
		this._outlineOnly = outline;
		this.processPath1(path, offset);
		this._strokeCap = $.ig.CPStrokeCap.prototype.butt;
		this._strokeJoin = $.ig.CPStrokeJoin.prototype.miter;
		this._fillAndOutline = false;
	},
	init4: function (initNumber, partColor, outline, cap, join, path) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = partColor;
		this._outlineOnly = outline;
		this.processPath(path);
		this._strokeCap = cap;
		this._strokeJoin = join;
		this._fillAndOutline = false;
	},
	init5: function (initNumber, partColor, outline, cap, join, path, offset) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = partColor;
		this._outlineOnly = outline;
		this.processPath1(path, offset);
		this._strokeCap = cap;
		this._strokeJoin = join;
		this._fillAndOutline = false;
	},
	init6: function (initNumber, stroke, fill, outline, cap, join, path) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._hasShadow = false;
		this._color = stroke;
		this._fillColor = fill;
		this._outlineOnly = outline;
		this.processPath(path);
		this._strokeCap = cap;
		this._strokeJoin = join;
		this._fillAndOutline = true;
	},
	init7: function (initNumber, partColor, sx, sy, b, sc, path) {
		this._color = new $.ig.Number();
		this._shadowColor = new $.ig.Number();
		this._fillColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this._shadowX = sx;
		this._shadowY = sy;
		this._blur = b;
		this._shadowColor = sc;
		this._hasShadow = true;
		this._color = partColor;
		this.processPath(path);
		this._strokeCap = $.ig.CPStrokeCap.prototype.butt;
		this._strokeJoin = $.ig.CPStrokeJoin.prototype.miter;
		this._fillAndOutline = false;
	},
	/*<BeginMethod Name="System.Void Infragistics.PathIconPart::ProcessPath(System.String)" />*/
	processPath: function (path) {
		this.processPath1(path, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconPart::ProcessPath(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconPart::ProcessPath(System.String, System.Single)" />*/
	processPath1: function (path, offset) {
		this._commands = new $.ig.Array();
		var bytes = $.ig.NativeUIUtility.prototype.utility().getChartArrayFromString(path);
		var count = bytes.length;
		var numbers = new Array(7);
		var numberCount = 0;
		var numberString = "";
		var currentCommand = $.ig.PathCommandType.prototype.none;
		for (var i = 0; i < count; i++) {
			var curentVal = bytes[i];
			switch (curentVal) {
				case 'M':
				case 'm':
					{
						if (numberCount > 0) {
							if (numberString.length > 0) {
								var val = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
								numberString = "";
								numbers[numberCount] = val + offset;
							}
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
						}
						currentCommand = $.ig.PathCommandType.prototype.move;
						break;
					}
				case 'Z':
				case 'z':
					{
						if (numberCount > 0) {
							if (numberString.length > 0) {
								var val1 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
								numberString = "";
								numbers[numberCount] = val1 + offset;
							}
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
						}
						currentCommand = $.ig.PathCommandType.prototype.end;
						this._commands.add(new $.ig.PathCommand(currentCommand, null));
						break;
					}
				case 'L':
				case 'l':
					{
						if (numberCount > 0) {
							if (numberString.length > 0) {
								var val2 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
								numberString = "";
								numbers[numberCount] = val2 + offset;
							}
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
						}
						currentCommand = $.ig.PathCommandType.prototype.line;
						break;
					}
				case 'S':
				case 's':
				case 'C':
				case 'c':
					{
						if (numberCount > 0) {
							if (numberString.length > 0) {
								var val3 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
								numberString = "";
								numbers[numberCount] = val3 + offset;
							}
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
						}
						currentCommand = $.ig.PathCommandType.prototype.curve;
						break;
					}
				case 'A':
				case 'a':
					{
						if (numberCount > 0) {
							if (numberString.length > 0) {
								var val4 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
								numberString = "";
								numbers[numberCount] = val4 + offset;
							}
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
						}
						currentCommand = $.ig.PathCommandType.prototype.arc;
						break;
					}
				case ',':
				case ' ':
				case '-':
				case '.':
					{
						if (curentVal == '.' && !$.ig.NativeStringUtility.prototype.contains(numberString, ".")) {
							numberString = $.ig.NativeUIUtility.prototype.utility().addCharToString(numberString, curentVal);
							continue;
						}
						if (numberString.length > 0) {
							var val5 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
							numberString = "";
							if (curentVal == '-') {
								numberString = "-";
							} else if (curentVal == '.') {
								numberString = ".";
							}
							numbers[numberCount] = val5 + offset;
							numberCount++;
						} else if (curentVal == '-') {
							numberString = "-";
						}
						var completeCommand = false;
						switch (currentCommand) {
							case $.ig.PathCommandType.prototype.move:
							case $.ig.PathCommandType.prototype.line:
								{
									completeCommand = (numberCount == 2);
									break;
								}
							case $.ig.PathCommandType.prototype.curve:
								{
									completeCommand = (numberCount == 6);
									break;
								}
							case $.ig.PathCommandType.prototype.arc:
								{
									completeCommand = (numberCount == 7);
									break;
								}
							case $.ig.PathCommandType.prototype.end:
							case $.ig.PathCommandType.prototype.none:
								{
									break;
								}
						}
						if (completeCommand) {
							numberCount = 0;
							this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
							currentCommand = $.ig.PathCommandType.prototype.line;
						}
						break;
					}
				default:
					{
						numberString = $.ig.NativeUIUtility.prototype.utility().addCharToString(numberString, curentVal);
						break;
					}
			}
		}
		if (numberString.length > 0) {
			var val6 = $.ig.NativeStringUtility.prototype.convertToDouble(numberString);
			numbers[numberCount] = val6 + offset;
			numberCount++;
		}
		if (numberCount > 0) {
			this._commands.add(new $.ig.PathCommand(currentCommand, numbers));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconPart::ProcessPath(System.String, System.Single)" />*/
	,
	$type: new $.ig.Type('PathIconPart', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathIconPart" />*/

/*<BeginType Name="Infragistics.PathCommand" />*/

$.ig.util.defType('PathCommand', 'Object', {
	_values: null,
	_commandType: 0,
	init: function (command, pts) {
		$.ig.Object.prototype.init.call(this);
		this._commandType = command;
		switch (command) {
			case $.ig.PathCommandType.prototype.move:
			case $.ig.PathCommandType.prototype.line:
				{
					this._values = new Array(2);
					this._values[0] = pts[0];
					this._values[1] = pts[1];
					break;
				}
			case $.ig.PathCommandType.prototype.curve:
				{
					this._values = new Array(6);
					this._values[0] = pts[0];
					this._values[1] = pts[1];
					this._values[2] = pts[2];
					this._values[3] = pts[3];
					this._values[4] = pts[4];
					this._values[5] = pts[5];
					break;
				}
			case $.ig.PathCommandType.prototype.arc:
				{
					this._values = new Array(7);
					this._values[0] = pts[0];
					this._values[1] = pts[1];
					this._values[2] = pts[2];
					this._values[3] = pts[3];
					this._values[4] = pts[4];
					this._values[5] = pts[5];
					this._values[6] = pts[6];
					break;
				}
			case $.ig.PathCommandType.prototype.end:
			case $.ig.PathCommandType.prototype.none:
				{
					break;
				}
		}
	},
	$type: new $.ig.Type('PathCommand', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathCommand" />*/

/*<BeginType Name="Infragistics.PathIconsBase" />*/

$.ig.util.defType('PathIconsBase', 'Object', {
	__iconsByKey: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__iconsByKey = new $.ig.Dictionary(0);
	},
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.PathIconsBase::CheckForIcon(System.String)" />*/
	checkForIcon: function (key) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__iconsByKey, key)) {
			return this.__iconsByKey.item(key);
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.PathIconsBase::CheckForIcon(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.PathIconsBase::Reset()" />*/
	reset: function () {
		this.__iconsByKey.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.PathIconsBase::Reset()" />*/
	,
	$type: new $.ig.Type('PathIconsBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.PathIconsBase" />*/

/*<BeginType Name="Infragistics.UIPathIcons" />*/

$.ig.util.defType('UIPathIcons', 'PathIconsBase', {
	init: function () {
		$.ig.PathIconsBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.UIPathIcons Infragistics.UIPathIcons::Icons()" />*/
	icons: function () {
		if ($.ig.UIPathIcons.prototype.__icons == null) {
			$.ig.UIPathIcons.prototype.__icons = new $.ig.UIPathIcons();
		}
		return $.ig.UIPathIcons.prototype.__icons;
	}
	/*<EndMethod Name="Infragistics.UIPathIcons Infragistics.UIPathIcons::Icons()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetArrowEastIcon()" />*/
	getArrowEastIcon: function () {
		var icon = this.checkForIcon("ArrowEast");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12.906253, 5.925195L18.954956, 12.026100L12.906253, 18.074804"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M18.3409091,12 L5.59090909,12 L18.3409091,12 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ArrowEast", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetArrowEastIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetArrowWestIcon()" />*/
	getArrowWestIcon: function () {
		var icon = this.checkForIcon("ArrowWest");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M11.093747, 18.074804L5.045043, 11.973900L11.093747, 5.925195"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M 5.65909091,12 L5.59090909,12 L18.4090909,12 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ArrowWest", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetArrowWestIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetBackArrowIcon()" />*/
	getBackArrowIcon: function () {
		var icon = this.checkForIcon("BackArrow");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 18, "M 14 2.5297 L 7.6274 9 L 14 15.4703 L 12.0248 17.5 L 4 9.3332 L 4 8.6668 L 12.0248 0.5 L 14 2.5297 Z");
			this.__iconsByKey.item("BackArrow", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetBackArrowIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCloseIcon()" />*/
	getCloseIcon: function () {
		var icon = this.checkForIcon("Close");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M6.16938601,17.830614 L17.830614,6.16938601"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M17.830614,17.830614 L6.16938601,6.16938601"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Close", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCloseIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetEMCloseIcon()" />*/
	getEMCloseIcon: function () {
		var icon = this.checkForIcon("EMClose");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M6.16938601,17.830614 L17.830614,6.16938601"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M17.830614,17.830614 L6.16938601,6.16938601"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("EMClose", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetEMCloseIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetOpenIcon()" />*/
	getOpenIcon: function () {
		var icon = this.checkForIcon("Open");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M3.51680738,18.1079313 L3.51680738,6.01304055 C3.51680738,5.36100072 4.064025,4.83036239 4.73622006,4.83036239 L9.87747671,4.83036239 L11.2143352,6.41670637 L18.3903,6.41670637 C19.0627304,6.41670637 19.6094773,6.94711257 19.6094773,7.59938453 L19.6094773,10.2526804"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M4.73622006,19.2906094 C4.064025,19.2906094 3.51680738,18.7599711 3.51680738,18.1079313 L5.30514694,11.4353585 C5.30514694,10.7833187 5.85236456,10.2526804 6.52455963,10.2526804 L20.2222765,10.2526804 C20.894707,10.2526804 21.4414539,10.7830866 21.4414539,11.4353585 L19.6094773,18.1079313 C19.6094773,18.7599711 19.0627304,19.2906094 18.3903,19.2906094 L4.73622006,19.2906094 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Open", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetOpenIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetOverflowIcon()" />*/
	getOverflowIcon: function () {
		var icon = this.checkForIcon("Overflow");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(0, 0, "M13,17 C13,17.5522847 12.5561352,18 12,18 C11.4477153,18 11,17.5561352 11,17 C11,16.4477153 11.4438648,16 12,16 C12.5522847,16 13,16.4438648 13,17 Z"));
			parts.add(new $.ig.PathIconPart(0, 0, "M13,12 C13,12.5522847 12.5561352,13 12,13 C11.4477153,13 11,12.5561352 11,12 C11,11.4477153 11.4438648,11 12,11 C12.5522847,11 13,11.4438648 13,12 Z"));
			parts.add(new $.ig.PathIconPart(0, 0, "M13,7 C13,7.55228475 12.5561352,8 12,8 C11.4477153,8 11,7.55613518 11,7 C11,6.44771525 11.4438648,6 12,6 C12.5522847,6 13,6.44386482 13,7 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Overflow", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetOverflowIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFileIcon()" />*/
	getFileIcon: function () {
		var icon = this.checkForIcon("File");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M14.3299999,1.5 L5.00747252,1.5 C3.89188665,1.5 3,2.39693527 3,3.50336101 L3.00747252,20.496639 C3.00747252,21.6035444 3.90624857,22.5 5.01494503,22.5 L18.5,22.5 C19.6155859,22.5 20.5074725,21.6030647 20.5074725,20.496639 L20.5,7.11000013"));
			parts.add(new $.ig.PathIconPart(0, $.ig.ColorUtility.prototype.createColor1(255, 204, 204, 204), "M21,7.11111111 L16,7.11111111 C15.0796667,7.11111111 14.3333333,6.42697222 14.3333333,5.58333333 L14.3299999,1 L21,7.11111111 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("File", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFileIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFolderIcon()" />*/
	getFolderIcon: function () {
		var icon = this.checkForIcon("Folder");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(0, 0, "M5.27299491,18.5812189 C4.61063793,18.5812189 4.07142925,18.062321 4.07142925,17.4247076 L4.07142925,6.57529243 C4.07142925,5.93767904 4.61063793,5.41878113 5.27299491,5.41878113 L10.3390054,5.41878113 L11.656298,6.97002709 L18.727237,6.97002709 C19.3898259,6.97002709 19.9285707,7.48869801 19.9285707,8.12653839 L19.9285707,17.4247076 C19.9285707,18.062321 19.3898259,18.5812189 18.727237,18.5812189 L5.27299491,18.5812189 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Folder", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFolderIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetPortraitIcon()" />*/
	getPortraitIcon: function () {
		var icon = this.checkForIcon("Portrait");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M18.6197125,4.73135034 L18.6197125,19.2686497 C18.6197125,19.8209344 18.1719972,20.2686497 17.6197125,20.2686497 L6.38028755,20.2686497 C5.8280028,20.2686497 5.38028755,19.8209344 5.38028755,19.2686497 L5.38028755,4.73135034 C5.38028755,4.17906559 5.8280028,3.73135034 6.38028755,3.73135034 L17.6197125,3.73135034 C18.1719972,3.73135034 18.6197125,4.17906559 18.6197125,4.73135034 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, false, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.round, "M12,12 L12,8 C14.1421954,8 15.8910789,9.68396847 15.9951047,11.8003597 L16,12 L12,12 L12,8 L12,12 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12,12 L16,12 C16,14.209139 14.209139,16 12,16 C9.790861,16 8,14.209139 8,12 C8,9.85780461 9.68396847,8.10892112 11.8003597,8.00489531 L12,8 L12,12 L16,12 L12,12 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Portrait", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetPortraitIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLandscapeIcon()" />*/
	getLandscapeIcon: function () {
		var icon = this.checkForIcon("Landscape");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M4.73135034,5.38028755 L19.2686497,5.38028755 C19.8209344,5.38028755 20.2686497,5.8280028 20.2686497,6.38028755 L20.2686497,17.6197125 C20.2686497,18.1719972 19.8209344,18.6197125 19.2686497,18.6197125 L4.73135034,18.6197125 C4.17906559,18.6197125 3.73135034,18.1719972 3.73135034,17.6197125 L3.73135034,6.38028755 C3.73135034,5.8280028 4.17906559,5.38028755 4.73135034,5.38028755 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, false, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.round, "M12,12 L12,8 C14.1421954,8 15.8910789,9.68396847 15.9951047,11.8003597 L16,12 L12,12 L12,8 L12,12 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12,12 L16,12 C16,14.209139 14.209139,16 12,16 C9.790861,16 8,14.209139 8,12 C8,9.85780461 9.68396847,8.10892112 11.8003597,8.00489531 L12,8 L12,12 L16,12 L12,12 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Landscape", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLandscapeIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIllustrationLandscapeIcon()" />*/
	getIllustrationLandscapeIcon: function () {
		var icon = this.checkForIcon("IllustrationLandscape");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 204, 204, 204), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.miter, "M81.4470588,7.5 L4.46,7.5 C2.27295239,7.5 0.5,9.27295239 0.5,11.46 L0.5,87.69 C0.5,89.8770476 2.27295239,91.65 4.46,91.65 L95.54,91.65 C97.7270476,91.65 99.5,89.8770476 99.5,87.69 L99.5,27.795 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 204, 204, 204), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M81.4470588,7.5 L81.4470588,22.4143693 C81.4470588,25.1613279 83.4189245,27.8742737 85.8403755,27.8742737 L99.5,27.8823529 L81.4470588,7.5 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M40.45,63.5942029 L90.5833333,63.5942029 C91.6879028,63.5942029 92.5833333,64.4896334 92.5833333,65.5942029 L92.5833333,79.0724638 C92.5833333,80.1770333 91.6879028,81.0724638 90.5833333,81.0724638 L40.45,81.0724638 C39.3454305,81.0724638 38.45,80.1770333 38.45,79.0724638 L38.45,65.5942029 C38.45,64.4896334 39.3454305,63.5942029 40.45,63.5942029 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M59.331393,75.9322962 L60.0263926,78.3813753 L60.6365751,80.5675354 C60.6838896,80.7387604 60.7303205,80.9072467 60.775868,81.0729943 L54.6976146,81.0729943 L54.4303331,80.54792 L54.1572678,80.0276364 C52.8081474,77.4921584 51.0693236,74.7133299 50.4726978,74.2088217 C49.7893924,73.6310171 48.2675332,73.9600448 45.9071201,75.1959046 L38.7302003,80.0939961 C38.5522242,79.7950092 38.45,79.4456744 38.45,79.0724638 L38.45,65.5942029 C38.45,64.4896334 39.3454305,63.5942029 40.45,63.5942029 L49.1849102,63.592987 L49.6466993,63.8679884 L50.11555,64.1546706 C53.5761962,66.3028733 57.4914792,69.4935719 59.331393,75.9322962 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 111, 181, 229), false, "M58.5042829,63.593428 L62.8717858,69.3953295 C65.0420894,72.0712834 66.5046622,74.3763173 67.2595044,76.3104314 C67.895735,77.9406297 67.8169563,79.5052731 67.6258252,81.0731351 L62.7096231,81.0727368 L62.5797798,80.3603667 L62.4520623,79.7059363 C62.2198624,78.5592585 61.9983806,77.7046932 61.7876171,77.1422403 C60.9064889,74.7908229 59.119278,70.9593335 57.7315692,69.0134395 C57.0158129,68.0097809 54.4563551,65.7424435 52.0032821,63.5925508 L58.5042829,63.593428 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M87.937103,65.2396211 L87.9958321,65.3717829 L91.4339106,74.2184219 C91.62648,74.7139289 91.5378843,75.2494076 91.2456319,75.6488098 L91.1390432,75.7807965 C90.9105022,76.0562225 90.584866,76.2594223 90.1964857,76.432498 L90.0901821,76.4720693 L89.9411275,76.5110195 C89.4692531,76.6143809 88.5645474,76.658811 86.9304546,76.6582451 L85.7963734,76.6520129 L84.4916709,76.6351907 L82.2802631,76.593259 C82.325969,76.9637364 82.3815029,77.0777927 82.4784936,77.1499338 C82.8013988,77.3901087 85.5725053,77.4312584 90.1139762,77.1082685 L90.4860697,77.0812789 L91.5883924,76.9954293 L93.151965,76.8597689 L93.3463199,78.985736 L93.4621769,78.9858206 L93.4621769,81.9858206 L77.2593105,81.9858206 L77.2583199,81.170736 L76.3162537,81.682889 C75.7959679,80.7236252 75.4469148,79.979982 75.2606141,79.4081624 L75.209598,79.2417274 C74.7959609,77.7954213 74.6613017,75.5627994 74.7749969,72.4736769 L74.7929253,72.0265396 L77.1893199,72.129736 L76.7489202,71.5043835 L79.1939342,69.7660203 C80.2475103,71.2478788 81.0489979,72.4692555 81.6022731,73.4394864 L81.6795759,73.5811521 L84.1430147,73.626376 L85.3822157,73.6430191 L86.6327047,73.6531673 L87.6814614,73.6530472 L87.9931911,73.648736 L85.1995746,66.4584953 C84.9171394,65.7317516 85.2395216,64.9190244 85.9221853,64.5757394 L86.0543471,64.5170103 C86.7810908,64.2345752 87.593818,64.5569573 87.937103,65.2396211 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M77.7620859,72.9658198 L77.7512885,73.2923112 L77.7382986,74.0733882 C77.7213577,76.0872503 77.8453299,77.5474805 78.0939554,78.4168139 C78.1332595,78.554243 78.2070495,78.7449348 78.3144949,78.9846009 L80.0638862,78.9863162 C79.5325628,78.3647426 79.3509052,77.630236 79.2545067,76.4710474 L79.2214435,76.0262217 L79.1892845,75.6698032 C79.1482969,75.3092664 79.0888451,75.088013 78.9962227,74.9255892 C78.6846437,74.3792 78.2729452,73.7251736 77.7620859,72.9658198 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M90.5833333,63.5942029 C91.6879028,63.5942029 92.5833333,64.4896334 92.5833333,65.5942029 L92.5817699,67.8554587 L91.0034342,67.7994884 C88.3966806,67.7192361 87.0548811,67.7496535 86.9780358,67.8907405 C86.8310866,68.1605372 87.8931931,69.3996365 87.5923754,69.5397807 C87.2915577,69.6799248 79.128475,70.5215073 78.9222016,70.6291279 C78.7159283,70.7367484 76.7801233,73.2704967 76.6327204,73.4730927 C76.4853175,73.6756888 75.9766951,75.4305825 75.7284525,75.5329573 C75.4802098,75.6353321 75.7284525,74.5513962 74.8073968,74.065475 C73.8863411,73.5795537 72.151138,73.5458705 72.0578415,73.4730927 C71.9645449,73.400315 71.9538257,72.1601113 72.0578415,71.992358 L72.1696617,71.8474538 L73.8860008,69.7370067 C74.7752676,68.6356633 75.6669164,67.5031078 75.7284525,67.2943825 C75.8515246,66.8769319 74.2075763,67.5447424 74.0769044,67.2943825 C73.9462324,67.0440226 74.4455535,64.9323632 74.0769044,64.9323632 C73.7082552,64.9323632 68.7837835,67.4553992 68.4920402,67.2943825 C68.200297,67.1333659 69.0274322,65.7556685 69.0274322,65.4281134 C69.0274322,65.1775686 68.4856373,64.0898419 68.0219956,63.5922278 L90.5833333,63.5942029 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M64.5985507,63.5935515 L66.828864,63.5926003 C66.6038698,63.7005363 66.3456458,63.8433495 66.0541919,64.0210399 C65.3660453,63.8871963 64.8808316,63.7447002 64.5985507,63.5935515 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M47.4095169,80.0994226 L47.3938015,80.1896447 C47.2838254,80.7633189 46.9389947,81.6032503 46.3535192,82.6716821 L45.9767412,83.1838202 C45.4923037,83.8558409 45.6443699,84.7933355 46.3163905,85.277773 C46.9884112,85.7622105 47.9259058,85.6101443 48.4103433,84.9381237 L48.821066,84.3809346 L48.9302379,84.2116917 C50.643614,81.1175084 51.0570799,78.9607248 49.4390707,77.6761329 C47.9910189,76.5264758 46.1143351,77.0173234 43.7653417,78.6493312 L37.8203515,82.8597809 C37.1443288,83.3386178 36.984478,84.2748165 37.4633149,84.9508392 C37.9421517,85.626862 38.8783504,85.7867127 39.5543732,85.3078759 L45.2625561,81.264686 C46.0469188,80.7015114 46.6907348,80.3400853 47.1731314,80.1714153 L47.3129869,80.1265881 C47.3493329,80.116069 47.381383,80.1071206 47.4095169,80.0994226 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 249, 233, 111), false, "M54.8192372,79.6246973 L55.1915426,79.6851497 L55.5899564,79.7599591 C55.7994707,79.801604 56.0272812,79.8500974 56.2861463,79.9076364 L57.6387112,80.2110039 L58.1507645,80.3204633 L58.6447504,80.4181235 C59.7861801,80.6300703 60.2648478,80.6018973 60.9526216,80.3652945 L61.1758307,80.2844231 C61.4690818,80.1736927 61.8157116,80.0730962 62.3640299,79.9398525 L64.3060467,79.4916003 C65.7961603,79.1365077 66.4885191,78.8888114 67.1391913,78.3920719 L67.3317744,78.2365934 L67.7131179,77.8986409 C68.961178,76.7662777 72.1937419,73.668794 77.5968787,68.4341086 C78.2860731,67.8715671 79.0978552,67.6603213 80.1666807,67.7977574 C80.9553108,67.8991643 81.7195667,68.1447084 82.779998,68.6085088 L84.4555571,69.3658593 C85.0267168,69.6135507 85.4965441,69.7868498 85.9642431,69.9075092 C87.3366925,70.261581 90.5381793,70.6335947 92.568379,70.6495942 L92.5999011,66.6497184 C90.8793583,66.6361592 87.9988793,66.3014468 86.9634676,66.0343257 C86.7721591,65.984971 86.5381931,65.9022061 86.2364144,65.7766345 L86.0470084,65.6960796 C85.786561,65.5831329 84.7507065,65.1074268 84.7222579,65.0945873 C83.1733199,64.3955168 82.0155992,64.0025695 80.676825,63.8304217 C78.5002023,63.5505382 76.5493075,64.0807211 74.9678275,65.4181773 L74.8676311,65.5088948 L69.3750101,70.812858 L66.2340007,73.8128519 C65.4113108,74.5902592 64.9058338,75.0558962 64.7287435,75.199429 L64.4299881,75.3083914 L64.2055338,75.3807058 L63.9730399,75.4483205 L63.7143514,75.5173542 L63.2399807,75.6333632 L63.2399807,75.6333632 L61.8077839,75.9605456 L61.2885066,76.0845927 C60.8096848,76.2027065 60.4424898,76.3060565 60.099266,76.4219683 L59.8351753,76.5126721 L59.8351753,76.5126721 L59.819399,76.5120205 C59.7275355,76.5125942 59.6015746,76.5031091 59.442729,76.4821596 L58.9604496,76.4051334 L58.1271372,76.2231218 L57.4417006,76.0675998 C56.6017172,75.8768347 56.0198013,75.7592915 55.4078968,75.6682494 C53.3446998,75.3612769 51.6658583,75.5031514 50.2113432,76.3789837 C48.8821272,77.1793675 48.4574036,79.2315936 48.4574036,81.0724638 L52.4574036,81.0724638 C52.4574036,80.8567621 52.5022631,80.4201922 52.5731176,80.0262465 L52.6298848,79.7465977 L52.6550901,79.641929 C53.154065,79.4928627 53.864941,79.4827124 54.8192372,79.6246973 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 249, 233, 111), false, "M67.2159242,79.6369762 L67.1104504,80.0434445 C67.0259874,80.4057149 66.9774532,80.7343685 66.9774532,81.0742357 L70.9774532,81.0742357 C70.9774532,81.0925856 70.9849355,81.0419189 71.0059739,80.9516828 L71.2849148,79.9511083 L71.2364463,79.5537935 C70.9386791,77.1128846 70.6280566,75.4140276 70.270384,74.2239821 L70.20677,74.0192084 C69.9729759,73.2914342 69.3366185,72.4847179 67.3166521,70.3285034 L62.1376015,64.8712824 L61.6178594,64.3033177 L61.4076672,64.0609929 L61.4076672,64.0609929 C61.3188522,63.8231189 61.2812114,63.6614957 61.2812114,63.5942029 L57.2812114,63.5942029 C57.2812114,64.3081568 57.4758585,65.0603621 57.8343018,65.8920336 L57.9458392,66.1508263 L58.5677483,66.8944639 L58.9731208,67.3430447 C59.3066109,67.7044541 59.7951201,68.2212268 60.6098626,69.0772763 L63.8860673,72.5225702 L64.8902714,73.6023144 L65.3675867,74.1281375 C65.7075235,74.5068281 65.9821818,74.8238758 66.1870758,75.0743139 L66.404576,75.349827 L66.4508652,75.4126324 C66.708095,76.2810005 66.9623921,77.6430451 67.2159242,79.6369762 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 216, 216, 216), false, "M22.3573364,68.9395239 C27.0882536,68.9395239 30.9394153,72.7231465 31.0754482,77.4422656 L31.0791667,77.7005828 L29.6962337,77.7005828 C29.6962337,73.6291916 26.4104975,70.3286769 22.3573364,70.3286769 C18.3041754,70.3286769 15.0184391,73.6291916 15.0184391,77.7005828 L13.6355062,77.7005828 C13.6355062,72.8619836 17.5404026,68.9395239 22.3573364,68.9395239 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 6), false, "M18.6869325,69.7507625 L19.3817047,70.9598152 C16.811168,72.1064828 15.0184391,74.693234 15.0184391,77.7005828 L13.6355062,77.7005828 C13.6355062,74.1790433 15.70391,71.1427783 18.6869325,69.7507625 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M71.026100, 60.883698L71.026100, 51.883698L73.026100, 51.883698L73.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M74.026100, 60.883698L74.026100, 42.883698L76.026100, 42.883698L76.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M77.026100, 60.883698L77.026100, 47.883698L79.026100, 47.883698L79.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M80.026100, 60.883698L80.026100, 51.883698L82.026100, 51.883698L82.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M83.026100, 60.883698L83.026100, 42.883698L85.026100, 42.883698L85.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M86.026100, 60.883698L86.026100, 47.883698L88.026100, 47.883698L88.026100, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M43.003624, 60.883698L43.003624, 51.883698L45.003624, 51.883698L45.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M46.003624, 60.883698L46.003624, 42.883698L48.003624, 42.883698L48.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M49.003624, 60.883698L49.003624, 46.883698L51.003624, 46.883698L51.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M52.003624, 60.883698L52.003624, 51.883698L54.003624, 51.883698L54.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M55.003624, 60.883698L55.003624, 42.883698L57.003624, 42.883698L57.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M58.003624, 60.883698L58.003624, 46.883698L60.003624, 46.883698L60.003624, 60.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 162, 149), false, "M10.416667, 42.717392L22.416666, 42.717392L22.416666, 44.717392L10.416667, 44.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 247, 1, 16), false, "M10.416667, 45.717392L33.416668, 45.717392L33.416668, 47.717392L10.416667, 47.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 7), false, "M10.416667, 48.717392L27.416666, 48.717392L27.416666, 50.717392L10.416667, 50.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 162, 149), false, "M10.416667, 54.717392L22.416666, 54.717392L22.416666, 56.717392L10.416667, 56.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 247, 1, 16), false, "M10.416667, 57.717392L33.416668, 57.717392L33.416668, 59.717392L10.416667, 59.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 7), false, "M10.416667, 60.717392L27.416666, 60.717392L27.416666, 62.717392L10.416667, 62.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M38.450001, 32.326088L44.450001, 32.326088L44.450001, 37.326088L38.450001, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M45.450001, 22.326088L51.450001, 22.326088L51.450001, 37.326088L45.450001, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M55.450001, 30.326088L61.450001, 30.326088L61.450001, 37.326088L55.450001, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M62.450001, 24.326088L68.449997, 24.326088L68.449997, 37.326088L62.450001, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M72.449997, 32.326088L78.449997, 32.326088L78.449997, 37.326088L72.449997, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M79.449997, 34.326088L85.449997, 34.326088L85.449997, 37.326088L79.449997, 37.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M16.1355062,24.8408628 L30.1355062,24.8408628 C30.4116486,24.8408628 30.6355062,25.0647204 30.6355062,25.3408628 C30.6355062,25.6170051 30.4116486,25.8408628 30.1355062,25.8408628 L16.1355062,25.8408628 C15.8593638,25.8408628 15.6355062,25.6170051 15.6355062,25.3408628 C15.6355062,25.0647204 15.8593638,24.8408628 16.1355062,24.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M14.1355062,28.8408628 L31.1355062,28.8408628 C31.4116486,28.8408628 31.6355062,29.0647204 31.6355062,29.3408628 C31.6355062,29.6170051 31.4116486,29.8408628 31.1355062,29.8408628 L14.1355062,29.8408628 C13.8593638,29.8408628 13.6355062,29.6170051 13.6355062,29.3408628 C13.6355062,29.0647204 13.8593638,28.8408628 14.1355062,28.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M17.1355062,32.8408628 L28.1355062,32.8408628 C28.4116486,32.8408628 28.6355062,33.0647204 28.6355062,33.3408628 C28.6355062,33.6170051 28.4116486,33.8408628 28.1355062,33.8408628 L17.1355062,33.8408628 C16.8593638,33.8408628 16.6355062,33.6170051 16.6355062,33.3408628 C16.6355062,33.0647204 16.8593638,32.8408628 17.1355062,32.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M16.1355062,36.8408628 L30.1355062,36.8408628 C30.4116486,36.8408628 30.6355062,37.0647204 30.6355062,37.3408628 C30.6355062,37.6170051 30.4116486,37.8408628 30.1355062,37.8408628 L16.1355062,37.8408628 C15.8593638,37.8408628 15.6355062,37.6170051 15.6355062,37.3408628 C15.6355062,37.0647204 15.8593638,36.8408628 16.1355062,36.8408628 Z"));
			icon = new $.ig.PathIcon(0, 0, 100, parts);
			this.__iconsByKey.item("IllustrationLandscape", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIllustrationLandscapeIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIllustrationPortraitIcon()" />*/
	getIllustrationPortraitIcon: function () {
		var icon = this.checkForIcon("IllustrationPortrait");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 204, 204, 204), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.miter, "M92.505,18.6574541 L92.01,95.54 C92.01,97.7270476 90.2370476,99.5 88.05,99.5 L11.82,99.5 C9.63295239,99.5 7.86,97.7270476 7.86,95.54 L7.86,4.46 C7.86,2.27295239 9.63295239,0.5 11.82,0.5 L71.715,0.5 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 204, 204, 204), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M92.3823529,18.5529412 L77.4679837,18.5529412 C74.7210251,18.5529412 72.0080793,16.5810755 72.0080793,14.1596245 L72,0.5 L92.3823529,18.5529412 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M39.3103448,61.5 L84.6896552,61.5 C85.689481,61.5 86.5,62.3196976 86.5,63.3308458 L86.5,75.6691542 C86.5,76.6803024 85.689481,77.5 84.6896552,77.5 L39.3103448,77.5 C38.310519,77.5 37.5,76.6803024 37.5,75.6691542 L37.5,63.3308458 C37.5,62.3196976 38.310519,61.5 39.3103448,61.5 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M56.2060078,72.7945575 L56.8286036,75.0362765 L57.3752184,77.0373376 C57.4176037,77.1940652 57.4591976,77.348286 57.5,77.5 L52.0549679,77.5 L51.8155313,77.019383 L51.5709134,76.5431511 C50.3623419,74.2223483 48.8046656,71.6787993 48.2701952,71.2170071 C47.6580753,70.6881244 46.2947606,70.9892937 44.180251,72.1205151 L37.7510096,76.6038922 C37.5915747,76.3302201 37.5,76.0104629 37.5,75.6688515 L37.5,63.3317758 C37.5,62.3207286 38.3021462,61.5011129 39.2916437,61.5011129 L47.1165669,61.5 L47.5302477,61.7517174 L47.9502544,62.0141266 C51.0503768,63.980444 54.5577728,66.9009908 56.2060078,72.7945575 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 111, 181, 229), false, "M55.2752021,61.5008029 L59.1550989,66.8112904 C61.0831007,69.2605942 62.3823859,71.3703946 63.0529544,73.1406915 C63.6181535,74.632814 63.54817,76.064934 63.3783776,77.5 L59.0110407,77.4996355 L58.8956936,76.8476023 L58.782235,76.2486013 C58.5759589,75.1990457 58.3792043,74.416861 58.1919712,73.9020472 C57.4092159,71.749792 55.8215366,68.2428251 54.5887574,66.461746 C53.9529111,65.543096 51.6792017,63.4677994 49.5,61.5 L55.2752021,61.5008029 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M82.4841411,62.2511295 L82.5374574,62.3714744 L85.6586675,70.4271082 C85.8334889,70.8783105 85.7530586,71.3659104 85.4877415,71.7296008 L85.3909765,71.8497861 C85.1834988,72.1005855 84.8878747,72.2856165 84.5352892,72.4432171 L84.438783,72.4792501 L84.3034659,72.5147177 C83.8750816,72.6088372 83.0537574,72.6492947 81.5702698,72.6487794 L80.5407105,72.6431044 L79.3562551,72.6277863 L77.3486604,72.5896039 C77.3901538,72.9269558 77.4405695,73.0308139 77.5286211,73.0965047 C77.8217659,73.3152048 80.3374751,73.3526752 84.4603841,73.0585648 L84.7981839,73.0339884 L85.7989117,72.9558149 L87.2183785,72.8322843 L87.3948208,74.7681622 L87.5,74.7682392 L87.5,77.5 L72.7904608,77.5 L72.7895614,76.7577947 L71.9343202,77.2241545 C71.4619862,76.3506614 71.1451034,75.6735097 70.975973,75.1528182 L70.9296588,75.0012646 C70.5541442,73.6842772 70.4318959,71.6512808 70.5351124,68.8383663 L70.5513884,68.4312089 L72.7269208,68.5251782 L72.3271103,67.9557404 L74.546781,66.3728095 C75.503255,67.7221705 76.230874,68.8343402 76.7331569,69.7178198 L76.8033352,69.8468187 L79.0397326,69.887999 L80.1647234,69.903154 L81.2999619,69.9123948 L82.2520606,69.9122855 L82.5350599,69.9083597 L79.9989153,63.3610205 C79.7425106,62.6992572 80.0351806,61.9591985 80.654927,61.6466076 L80.7749082,61.5931297 C81.4346721,61.3359479 82.1724947,61.6295049 82.4841411,62.2511295 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M73.5217595,69.5 L73.5124798,69.7711499 L73.5013158,70.4198315 C73.4867563,72.0923365 73.593302,73.3050523 73.8069787,74.0270304 C73.8407579,74.1411648 73.9041753,74.2995336 73.9965174,74.4985754 L75.5,74.5 C75.0433637,73.9837854 74.8872414,73.3737804 74.8043934,72.4110785 L74.7759779,72.0416525 L74.7483395,71.7456482 C74.7131134,71.4462238 74.6620186,71.2624736 74.582416,71.1275812 C74.3146351,70.673807 73.9608082,70.1306405 73.5217595,69.5 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M84.7085666,61.5018184 C85.697948,61.5018184 86.5,62.3262361 86.5,63.3432069 L86.4985996,65.4251321 L85.0848579,65.3736005 L84.0511174,65.3459597 C82.394352,65.3112828 81.5370601,65.3485015 81.4792415,65.4576158 C81.3476166,65.7060161 82.2989631,66.8468477 82.0295157,66.9758776 C81.7600683,67.1049074 74.4482589,67.8797476 74.2634964,67.9788332 C74.0787339,68.0779188 72.3448012,70.4107262 72.2127699,70.5972553 C72.0807386,70.7837843 71.6251571,72.3995048 71.402802,72.4937607 C71.1804469,72.5880165 71.402802,71.5900431 70.5777971,71.1426582 C69.7527922,70.6952732 68.1985418,70.6642613 68.1149745,70.5972553 C68.0314072,70.5302492 68.0218058,69.3884008 68.1149745,69.2339513 L68.3609158,68.9148375 C69.1110932,67.9647365 71.310035,65.2319851 71.402802,64.9085524 C71.5130397,64.5242081 70.0405279,65.1390574 69.9234828,64.9085524 C69.8064378,64.6780475 70.253688,62.7338549 69.9234828,62.7338549 C69.5932777,62.7338549 65.1823462,65.0567995 64.9210269,64.9085524 C64.6597076,64.7603053 65.4005864,63.4918674 65.4005864,63.1902893 C65.4005864,62.9596141 64.9152916,61.9581504 64.5,61.5 L84.7085666,61.5018184 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 152, 204, 98), false, "M61.5,60.7867314 L63.5,60.7857802 C63.2982398,60.8937161 63.0666813,61.0365293 62.8053244,61.2142198 C62.1882393,61.0803762 61.7531311,60.93788 61.5,60.7867314 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M45.7436899,76.3595504 L45.7294789,76.4441124 C45.6300309,76.9817965 45.3182112,77.7690339 44.7887836,78.7704364 L44.4480749,79.250445 C44.010013,79.8803057 44.1475217,80.7589856 44.7552094,81.2130314 C45.362897,81.6670772 46.2106445,81.524551 46.6487065,80.8946903 L47.0201104,80.3724571 L47.1188311,80.2138318 C48.6681844,77.3137656 49.0420689,75.2922901 47.578953,74.0882885 C46.2695242,73.0107564 44.5724969,73.4708101 42.4483743,75.0004322 L37.0725026,78.9467347 C36.461196,79.3955312 36.3166479,80.2729964 36.7496453,80.9066081 C37.1826428,81.5402199 38.0292184,81.6900422 38.640525,81.2412457 L43.8022593,77.4517098 C44.5115343,76.9238666 45.0937174,76.5851149 45.5299338,76.4270267 L45.7436899,76.3595504 L45.7436899,76.3595504 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 249, 233, 111), false, "M52.2648153,76.1621529 L52.6021821,76.2180156 L52.9632073,76.2871452 C53.15306,76.3256283 53.3594919,76.3704399 53.5940641,76.4236103 L54.8196993,76.7039451 L55.2836995,76.805094 C56.6533442,77.0947129 57.116292,77.0943124 57.8226199,76.8465214 L58.0248822,76.77179 C58.2906135,76.6694667 58.6047143,76.5765078 59.1015763,76.4533805 L60.861347,76.0391611 L61.3645271,75.9124202 C62.3782539,75.6458997 62.9176228,75.4209347 63.4286187,75.0231127 L63.6031291,74.8794387 L64.1181788,74.4093354 C65.3563628,73.2502204 68.2365562,70.433454 72.9049175,65.8211923 C73.5294353,65.3013609 74.2650367,65.1061535 75.2335596,65.233155 C75.9481817,65.3268628 76.640717,65.5537644 77.6016334,65.9823514 L79.1199518,66.6822012 C79.6375117,66.911087 80.0632487,67.0712287 80.487057,67.1827273 C81.7307106,67.5099167 84.6317579,67.8536858 86.471436,67.8684706 L86.5,64.1722791 C84.9409194,64.1597494 82.3307554,63.8504495 81.3925105,63.6036092 C81.2538263,63.5671231 81.0904031,63.510878 80.8905704,63.4304281 L80.5620553,63.2910439 C80.3260493,63.1866725 79.3874032,62.7470836 79.3616243,62.7352189 C77.9580445,62.0892243 76.9089687,61.7261108 75.6958301,61.5670331 C73.7234698,61.3083994 71.9556542,61.798329 70.5225863,63.0342408 L70.4317927,63.1180707 L64.7212234,68.737343 C62.6997658,70.7139445 61.5231264,71.8424696 61.2443763,72.0728662 L60.9736572,72.1735558 L60.7702666,72.2403799 L60.5595908,72.302861 L60.3251786,72.3666535 C60.1994685,72.3995673 60.059075,72.434525 59.8953247,72.4738547 L58.5975305,72.7761963 L58.1269842,72.8908253 C57.6930968,72.9999715 57.3603608,73.0954748 57.0493463,73.2025862 L56.8100389,73.2864034 L56.8100389,73.2864034 L56.7957431,73.2858013 C56.7125004,73.2863315 56.5983602,73.2775665 56.4544213,73.2582076 L56.0174008,73.1870294 L55.2622895,73.0188368 L54.110078,72.7549235 C53.6146689,72.6460621 53.2140936,72.5691896 52.7982328,72.5060922 C50.928654,72.2224261 49.4073613,72.353529 48.0893433,73.1628651 C46.8848659,73.902481 46.5,75.798895 46.5,77.5 L50.124625,77.5 C50.124625,77.3006751 50.1652747,76.8972511 50.2294799,76.5332152 L50.2809199,76.2747983 L50.3037598,76.1780763 C50.755909,76.0403277 51.4000738,76.030948 52.2648153,76.1621529 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 249, 233, 111), false, "M63.7226507,76.1812991 L63.6247368,76.5532724 C63.5463275,76.8847986 63.501272,77.1855609 63.501272,77.4965853 L67.2145754,77.4965853 C67.2145754,77.5133779 67.2215214,77.467011 67.2410519,77.3844329 L67.5,76.4687723 L67.4550054,76.1051758 C67.1785804,73.8714153 66.8902215,72.3167322 66.5581848,71.2276802 L66.4991303,71.0402846 L66.444378,70.8906203 C66.1875274,70.258126 65.5524434,69.4898541 63.8161591,67.6627923 L59.0083125,62.6686998 L58.5258224,62.1489355 L58.3306956,61.9271757 L58.3306956,61.9271757 L58.2636165,61.7333617 C58.2288336,61.620476 58.2133034,61.5410547 58.2133034,61.5 L54.5,61.5 C54.5,62.153364 54.680696,62.8417333 55.0134481,63.6028247 L55.1169911,63.8396549 L55.6943254,64.5201835 L56.3323001,65.2080373 C56.6259068,65.5172972 57.0228131,65.9302005 57.5900729,66.5177509 L60.6314585,69.6706591 L61.5636871,70.6587705 L62.0067913,71.1399695 L62.3561234,71.5284645 C62.5159791,71.7088824 62.6534192,71.8683376 62.7675442,72.0058484 L62.9694553,72.25798 L63.0124267,72.3154554 C63.2512198,73.1101292 63.4872904,74.3565835 63.7226507,76.1812991 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 216, 216, 216), false, "M24.8573364,65.9395239 C29.5882536,65.9395239 33.4394153,69.7231465 33.5754482,74.4422656 L33.5791667,74.7005828 L32.1962337,74.7005828 C32.1962337,70.6291916 28.9104975,67.3286769 24.8573364,67.3286769 C20.8041754,67.3286769 17.5184391,70.6291916 17.5184391,74.7005828 L16.1355062,74.7005828 C16.1355062,69.8619836 20.0404026,65.9395239 24.8573364,65.9395239 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 6), false, "M21.1869325,66.7507625 L21.8817047,67.9598152 C19.311168,69.1064828 17.5184391,71.693234 17.5184391,74.7005828 L16.1355062,74.7005828 C16.1355062,71.1790433 18.20391,68.1427783 21.1869325,66.7507625 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M65.526100, 57.883698L65.526100, 48.883698L67.526100, 48.883698L67.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M68.526100, 57.883698L68.526100, 39.883698L70.526100, 39.883698L70.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M71.526100, 57.883698L71.526100, 44.883698L73.526100, 44.883698L73.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M74.526100, 57.883698L74.526100, 48.883698L76.526100, 48.883698L76.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M77.526100, 57.883698L77.526100, 39.883698L79.526100, 39.883698L79.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M80.526100, 57.883698L80.526100, 44.883698L82.526100, 44.883698L82.526100, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M41.503624, 57.883698L41.503624, 48.883698L43.503624, 48.883698L43.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M44.503624, 57.883698L44.503624, 39.883698L46.503624, 39.883698L46.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M47.503624, 57.883698L47.503624, 43.883698L49.503624, 43.883698L49.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M50.503624, 57.883698L50.503624, 48.883698L52.503624, 48.883698L52.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 164, 192), false, "M53.503624, 57.883698L53.503624, 39.883698L55.503624, 39.883698L55.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 143, 225, 213), false, "M56.503624, 57.883698L56.503624, 43.883698L58.503624, 43.883698L58.503624, 57.883698 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 162, 149), false, "M12.916667, 39.717392L23.916666, 39.717392L23.916666, 41.717392L12.916667, 41.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 247, 1, 16), false, "M12.916667, 42.717392L33.916668, 42.717392L33.916668, 44.717392L12.916667, 44.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 7), false, "M12.916667, 45.717392L28.916666, 45.717392L28.916666, 47.717392L12.916667, 47.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 162, 149), false, "M12.916667, 51.717392L23.916666, 51.717392L23.916666, 53.717392L12.916667, 53.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 247, 1, 16), false, "M12.916667, 54.717392L33.916668, 54.717392L33.916668, 56.717392L12.916667, 56.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 230, 237, 7), false, "M12.916667, 57.717392L28.916666, 57.717392L28.916666, 59.717392L12.916667, 59.717392 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M39.950001, 30.326088L45.950001, 30.326088L45.950001, 35.326088L39.950001, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M46.950001, 21.326088L51.950001, 21.326088L51.950001, 35.326088L46.950001, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M55.950001, 28.326088L61.950001, 28.326088L61.950001, 35.326088L55.950001, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M62.950001, 23.326088L67.949997, 23.326088L67.949997, 35.326088L62.950001, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 199, 244, 101), false, "M71.949997, 30.326088L76.949997, 30.326088L76.949997, 35.326088L71.949997, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 1, 163, 192), false, "M77.949997, 32.326088L83.949997, 32.326088L83.949997, 35.326088L77.949997, 35.326088 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M18.6355062,21.8408628 L32.6355062,21.8408628 C32.9116486,21.8408628 33.1355062,22.0647204 33.1355062,22.3408628 C33.1355062,22.6170051 32.9116486,22.8408628 32.6355062,22.8408628 L18.6355062,22.8408628 C18.3593638,22.8408628 18.1355062,22.6170051 18.1355062,22.3408628 C18.1355062,22.0647204 18.3593638,21.8408628 18.6355062,21.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M16.6355062,25.8408628 L33.6355062,25.8408628 C33.9116486,25.8408628 34.1355062,26.0647204 34.1355062,26.3408628 C34.1355062,26.6170051 33.9116486,26.8408628 33.6355062,26.8408628 L16.6355062,26.8408628 C16.3593638,26.8408628 16.1355062,26.6170051 16.1355062,26.3408628 C16.1355062,26.0647204 16.3593638,25.8408628 16.6355062,25.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M19.6355062,29.8408628 L30.6355062,29.8408628 C30.9116486,29.8408628 31.1355062,30.0647204 31.1355062,30.3408628 C31.1355062,30.6170051 30.9116486,30.8408628 30.6355062,30.8408628 L19.6355062,30.8408628 C19.3593638,30.8408628 19.1355062,30.6170051 19.1355062,30.3408628 C19.1355062,30.0647204 19.3593638,29.8408628 19.6355062,29.8408628 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 242, 242, 242), false, "M18.6355062,33.8408628 L32.6355062,33.8408628 C32.9116486,33.8408628 33.1355062,34.0647204 33.1355062,34.3408628 C33.1355062,34.6170051 32.9116486,34.8408628 32.6355062,34.8408628 L18.6355062,34.8408628 C18.3593638,34.8408628 18.1355062,34.6170051 18.1355062,34.3408628 C18.1355062,34.0647204 18.3593638,33.8408628 18.6355062,33.8408628 Z"));
			icon = new $.ig.PathIcon(0, 0, 100, parts);
			this.__iconsByKey.item("IllustrationPortrait", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIllustrationPortraitIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronRightIcon()" />*/
	getChevronRightIcon: function () {
		var icon = this.checkForIcon("ChevronRight");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M10.180716, 6.343146L15.819284, 12.018285L10.180716, 17.656855"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ChevronRight", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronRightIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronRightSmallIcon()" />*/
	getChevronRightSmallIcon: function () {
		var icon = this.checkForIcon("ChevronRightSmall");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12.180716, 8.343146L15.819284, 12.018285L12.180716, 15.656855"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ChevronRightSmall", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronRightSmallIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronDownIcon()" />*/
	getChevronDownIcon: function () {
		var icon = this.checkForIcon("ChevronDown");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M17.476139, 8.837569L11.801000, 14.476139L6.162430, 8.837569"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ChevronDown", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronDownIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronUpIcon()" />*/
	getChevronUpIcon: function () {
		var icon = this.checkForIcon("ChevronUp");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M6.162430, 14.476139L11.837569, 8.837569L17.476139, 14.476139"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ChevronUp", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronUpIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronLeftIcon()" />*/
	getChevronLeftIcon: function () {
		var icon = this.checkForIcon("ChevronLeft");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M13.8192848 17.6568542 8.18071525 11.9817153 13.8192848 6.34314575"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ChevronLeft", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetChevronLeftIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDashIcon()" />*/
	getDashIcon: function () {
		var icon = this.checkForIcon("Dash");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 40, "M 5 15 L 33 15 L 33 25 L 5 25 Z");
			this.__iconsByKey.item("Dash", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDashIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFLeftTriangleIcon()" />*/
	getCFLeftTriangleIcon: function () {
		var icon = this.checkForIcon("CFLeftTriangle");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 40, "M 10 20 L 30 5 L 30 35 Z");
			this.__iconsByKey.item("CFLeftTriangle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFLeftTriangleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFRightTriangleIcon()" />*/
	getCFRightTriangleIcon: function () {
		var icon = this.checkForIcon("CFRightTriangle");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 40, "M 10 5 L 10 35 L 30 20 Z");
			this.__iconsByKey.item("CFRightTriangle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFRightTriangleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFUpTriangleIcon()" />*/
	getCFUpTriangleIcon: function () {
		var icon = this.checkForIcon("CFUpTriangle");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 40, "M 20 10 L 5 30 L 35 30 Z");
			this.__iconsByKey.item("CFUpTriangle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFUpTriangleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFDownTriangleIcon()" />*/
	getCFDownTriangleIcon: function () {
		var icon = this.checkForIcon("CFDownTriangle");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 40, "M 5 10 L 35 10 L 20 30 Z");
			this.__iconsByKey.item("CFDownTriangle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCFDownTriangleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetGridIcon()" />*/
	getGridIcon: function () {
		var icon = this.checkForIcon("Grid");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 20, "M 7 12 L 7 8 L 12 8 L 12 12 L 7 12 ZM 12 1 L 12 6 L 7 6 L 7 1 L 5 1 L 5 6 L 1 6 L 1 8 L 5 8 L 5 12 L 1 12 L 1 14 L 5 14 L 5 19 L 7 19 L 7 14 L 12 14 L 12 19 L 14 19 L 14 14 L 18 14 L 18 12 L 14 12 L 14 8 L 18 8 L 18 6 L 14 6 L 14 1 L 12 1 Z");
			this.__iconsByKey.item("Grid", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetGridIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetBackButtonArrowIcon()" />*/
	getBackButtonArrowIcon: function () {
		var icon = this.checkForIcon("BackButtonArrow");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M13.093747, 20.074804L5.045043, 11.973900L13.093747, 3.925195L13.093747, 3.925195"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M5.65909091,12 L18.4090909,12"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("BackButtonArrow", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetBackButtonArrowIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetTickIcon()" />*/
	getTickIcon: function () {
		var icon = this.checkForIcon("Tick");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M4.471287, 11.506817L9.819218, 16.854748L19.528713, 7.145252"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Tick", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetTickIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetResizeHandle()" />*/
	getResizeHandle: function () {
		var icon = this.checkForIcon("ResizeHandle");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(0, 0, "M25,43.10605 L25,43.10605 C27.6643923,43.10605 29.8243091,40.9461332 29.8243091,38.2817409 L29.8243091,11.7480409 C29.8243091,9.08364854 27.6643923,6.92373179 25,6.92373179 L25,6.92373179 C22.3356077,6.92373179 20.1756909,9.08364854 20.1756909,11.7480409 L20.1756909,38.2817409 C20.1756909,40.9461332 22.3356077,43.10605 25,43.10605 Z"));
			parts.add(new $.ig.PathIconPart(0, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), "M26.2060773,31.0452772 C26.2060773,31.7113753 25.670742,32.2513545 25,32.2513545 C24.3339019,32.2513545 23.7939227,31.7160192 23.7939227,31.0452772 C23.7939227,30.3791792 24.329258,29.8392 25,29.8392 C25.6660981,29.8392 26.2060773,30.3745352 26.2060773,31.0452772 Z"));
			parts.add(new $.ig.PathIconPart(0, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), "M26.2060773,25.0148909 C26.2060773,25.680989 25.670742,26.2209682 25,26.2209682 C24.3339019,26.2209682 23.7939227,25.6856329 23.7939227,25.0148909 C23.7939227,24.3487928 24.329258,23.8088136 25,23.8088136 C25.6660981,23.8088136 26.2060773,24.3441489 26.2060773,25.0148909 Z"));
			parts.add(new $.ig.PathIconPart(0, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), "M26.2060773,18.9845045 C26.2060773,19.6506026 25.670742,20.1905818 25,20.1905818 C24.3339019,20.1905818 23.7939227,19.6552465 23.7939227,18.9845045 C23.7939227,18.3184064 24.329258,17.7784272 25,17.7784272 C25.6660981,17.7784272 26.2060773,18.3137625 26.2060773,18.9845045 Z"));
			icon = new $.ig.PathIcon(0, 0, 50, parts);
			this.__iconsByKey.item("ResizeHandle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetResizeHandle()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetRightArrowIcon()" />*/
	getRightArrowIcon: function () {
		var icon = this.checkForIcon("Rightarrow");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M10.180716, 6.343146L15.819284, 12.018285L10.180716, 17.656855"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Rightarrow", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetRightArrowIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDragHandleIcon()" />*/
	getDragHandleIcon: function () {
		var icon = this.checkForIcon("Draghandle");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, false, "M10.5,14.5 C10.5,15.0522847 10.0561352,15.5 9.5,15.5 C8.94771525,15.5 8.5,15.0561352 8.5,14.5 C8.5,13.9477153 8.94386482,13.5 9.5,13.5 C10.0522847,13.5 10.5,13.9438648 10.5,14.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M15.5,14.5 C15.5,15.0522847 15.0561352,15.5 14.5,15.5 C13.9477153,15.5 13.5,15.0561352 13.5,14.5 C13.5,13.9477153 13.9438648,13.5 14.5,13.5 C15.0522847,13.5 15.5,13.9438648 15.5,14.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M10.5,19.5 C10.5,20.0522847 10.0561352,20.5 9.5,20.5 C8.94771525,20.5 8.5,20.0561352 8.5,19.5 C8.5,18.9477153 8.94386482,18.5 9.5,18.5 C10.0522847,18.5 10.5,18.9438648 10.5,19.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M15.5,19.5 C15.5,20.0522847 15.0561352,20.5 14.5,20.5 C13.9477153,20.5 13.5,20.0561352 13.5,19.5 C13.5,18.9477153 13.9438648,18.5 14.5,18.5 C15.0522847,18.5 15.5,18.9438648 15.5,19.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M10.5,9.5 C10.5,10.0522847 10.0561352,10.5 9.5,10.5 C8.94771525,10.5 8.5,10.0561352 8.5,9.5 C8.5,8.94771525 8.94386482,8.5 9.5,8.5 C10.0522847,8.5 10.5,8.94386482 10.5,9.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M15.5,9.5 C15.5,10.0522847 15.0561352,10.5 14.5,10.5 C13.9477153,10.5 13.5,10.0561352 13.5,9.5 C13.5,8.94771525 13.9438648,8.5 14.5,8.5 C15.0522847,8.5 15.5,8.94386482 15.5,9.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M10.5,4.5 C10.5,5.05228475 10.0561352,5.5 9.5,5.5 C8.94771525,5.5 8.5,5.05613518 8.5,4.5 C8.5,3.94771525 8.94386482,3.5 9.5,3.5 C10.0522847,3.5 10.5,3.94386482 10.5,4.5 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, false, "M15.5,4.5 C15.5,5.05228475 15.0561352,5.5 14.5,5.5 C13.9477153,5.5 13.5,5.05613518 13.5,4.5 C13.5,3.94771525 13.9438648,3.5 14.5,3.5 C15.0522847,3.5 15.5,3.94386482 15.5,4.5 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Draghandle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDragHandleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDropContentIcon()" />*/
	getDropContentIcon: function () {
		var icon = this.checkForIcon("DropContent");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M29.630026,101.232916 C28.242208,100.727791 27.5266129,99.1933422 28.0316996,97.805628 L36.7293481,73.909035 C37.2344348,72.5213207 38.7689373,71.8058403 40.1567553,72.3109647 L64.0529726,81.0084765 C65.4407906,81.513601 66.1563858,83.0480499 65.6512991,84.4357642 L56.9536505,108.332357 C56.4485638,109.720071 54.9140614,110.435552 53.5262434,109.930427 L29.630026,101.232916 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M39.3635126,35.9048928 C33.786096,33.8748792 27.8343193,34.9700648 23.4201289,38.2920086 C31.3406585,18.1755988 53.9023123,7.92692222 74.3397084,15.3655261 C94.7750312,22.8033753 105.470538,45.1566685 98.6095104,65.6587055 C97.3633487,60.2765619 93.507995,55.6118727 87.9305784,53.5818591 C83.0332334,51.7993713 77.8488315,52.4248274 73.6720514,54.8493445 C72.0288284,50.3065195 68.4573082,46.4941684 63.5620366,44.7124352 C58.7123795,42.9473044 53.582465,43.5456311 49.4211591,45.9147307 C47.7603885,41.4265686 44.2131697,37.6700236 39.3635126,35.9048928 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M74.3895643,15.3827329 C79.7861173,22.1674846 76.5762828,46.7081083 73.7190792,54.86787 C72.0766108,50.3229717 68.5092374,46.5121298 63.6118924,44.729642 C58.7622354,42.9645112 53.6315663,43.5649114 49.4730884,45.9326922 C53.7643513,33.0845405 65.7722559,17.1114693 74.3895643,15.3827329 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M49.471279, 45.932503L52.078590, 76.528091L23.420486, 38.291668L23.420486, 38.291668"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M98.609245, 65.658142L52.077969, 76.527863L73.720795, 54.868965"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M46.1487506,86.5240974 C46.2663938,86.8273352 46.4020836,87.1638792 46.5111751,87.3978267 C47.2147582,88.9066656 48.7304062,90.5116878 49.8183211,91.5445074 L50.2628317,91.3372288 C50.7258137,91.1213367 51.2800462,91.3232048 51.4975348,91.7896106 L52.3929052,93.7097386 L44.099014,97.5772436 L43.2036436,95.6571156 C42.989099,95.1970232 43.1863317,94.6370549 43.6507508,94.4204927 L44.0952614,94.213214 C44.0033739,92.7159392 43.7480953,90.5231971 43.0445121,89.0143581 C42.9354206,88.7804106 42.7648326,88.46014 42.6081586,88.1751025 L42.4535999,88.2471744 C41.9938727,88.4615488 41.4375149,88.2606717 41.2200263,87.7942659 L40.7184538,86.7186403 C40.5039092,86.2585479 40.7006363,85.6988153 41.1644316,85.482544 L45.014141,83.6873951 C45.4738682,83.4730208 46.030226,83.6738978 46.2477146,84.1403036 L46.7492871,85.2159292 C46.9638317,85.6760216 46.7671046,86.2357542 46.3033093,86.4520255 L46.1487506,86.5240974 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M48.2459596,95.6434911 L50.1797121,99.7904367 L48.2459596,95.6434911 Z"));
			icon = new $.ig.PathIcon(0, 0, 120, parts);
			this.__iconsByKey.item("DropContent", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDropContentIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDropPinHoverIcon()" />*/
	getDropPinHoverIcon: function () {
		var icon = this.checkForIcon("DropPinHover");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().accentColor().color(), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M29.630026,101.232916 C28.242208,100.727791 27.5266129,99.1933422 28.0316996,97.805628 L36.7293481,73.909035 C37.2344348,72.5213207 38.7689373,71.8058403 40.1567553,72.3109647 L64.0529726,81.0084765 C65.4407906,81.513601 66.1563858,83.0480499 65.6512991,84.4357642 L56.9536505,108.332357 C56.4485638,109.720071 54.9140614,110.435552 53.5262434,109.930427 L29.630026,101.232916 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M46.1487506,86.5240974 C46.2663938,86.8273352 46.4020836,87.1638792 46.5111751,87.3978267 C47.2147582,88.9066656 48.7304062,90.5116878 49.8183211,91.5445074 L50.2628317,91.3372288 C50.7258137,91.1213367 51.2800462,91.3232048 51.4975348,91.7896106 L52.3929052,93.7097386 L44.099014,97.5772436 L43.2036436,95.6571156 C42.989099,95.1970232 43.1863317,94.6370549 43.6507508,94.4204927 L44.0952614,94.213214 C44.0033739,92.7159392 43.7480953,90.5231971 43.0445121,89.0143581 C42.9354206,88.7804106 42.7648326,88.46014 42.6081586,88.1751025 L42.4535999,88.2471744 C41.9938727,88.4615488 41.4375149,88.2606717 41.2200263,87.7942659 L40.7184538,86.7186403 C40.5039092,86.2585479 40.7006363,85.6988153 41.1644316,85.482544 L45.014141,83.6873951 C45.4738682,83.4730208 46.030226,83.6738978 46.2477146,84.1403036 L46.7492871,85.2159292 C46.9638317,85.6760216 46.7671046,86.2357542 46.3033093,86.4520255 L46.1487506,86.5240974 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M48.2459596,95.6434911 L50.1797121,99.7904367 L48.2459596,95.6434911 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().accentColor().color(), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M39.3635126,35.9048928 C33.786096,33.8748792 27.8343193,34.9700648 23.4201289,38.2920086 C31.3406585,18.1755988 53.9023123,7.92692222 74.3397084,15.3655261 C94.7750312,22.8033753 105.470538,45.1566685 98.6095104,65.6587055 C97.3633487,60.2765619 93.507995,55.6118727 87.9305784,53.5818591 C83.0332334,51.7993713 77.8488315,52.4248274 73.6720514,54.8493445 C72.0288284,50.3065195 68.4573082,46.4941684 63.5620366,44.7124352 C58.7123795,42.9473044 53.582465,43.5456311 49.4211591,45.9147307 C47.7603885,41.4265686 44.2131697,37.6700236 39.3635126,35.9048928 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M74.3895643,15.3827329 C79.7861173,22.1674846 76.5762828,46.7081083 73.7190792,54.86787 C72.0766108,50.3229717 68.5092374,46.5121298 63.6118924,44.729642 C58.7622354,42.9645112 53.6315663,43.5649114 49.4730884,45.9326922 C53.7643513,33.0845405 65.7722559,17.1114693 74.3895643,15.3827329 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().accentColor().color(), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M74.3895643,15.3827329 C79.7861173,22.1674846 76.5762828,46.7081083 73.7190792,54.86787 C72.0766108,50.3229717 68.5092374,46.5121298 63.6118924,44.729642 C58.7622354,42.9645112 53.6315663,43.5649114 49.4730884,45.9326922 C53.7643513,33.0845405 65.7722559,17.1114693 74.3895643,15.3827329 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().accentColor().color(), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M49.471279, 45.932503L52.078590, 76.528091L23.420486, 38.291668L23.420486, 38.291668"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().accentColor().color(), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M98.609245, 65.658142L52.077969, 76.527863L73.720795, 54.868965"));
			icon = new $.ig.PathIcon(0, 0, 120, parts);
			this.__iconsByKey.item("DropPinHover", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDropPinHoverIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetErrorAlertIcon()" />*/
	getErrorAlertIcon: function () {
		var icon = this.checkForIcon("ErrorAlert");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 208, 2, 27), false, "M12,24 C18.627417,24 24,18.627417 24,12 C24,5.372583 18.627417,0 12,0 C5.372583,0 0,5.372583 0,12 C0,18.627417 5.372583,24 12,24 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M13.168831, 15.000000L10.831169, 15.000000L10.500000, 5.000000L13.500000, 5.000000"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M11.995356,17 C12.4473707,17 12.8111441,17.1409822 13.0866873,17.4229508 C13.3622305,17.7049194 13.5,18.0655716 13.5,18.504918 C13.5,18.9377071 13.3622305,19.2950806 13.0866873,19.5770492 C12.8111441,19.8590178 12.4473707,20 11.995356,20 C11.5495334,20 11.1888559,19.8590178 10.9133127,19.5770492 C10.6377695,19.2950806 10.5,18.9377071 10.5,18.504918 C10.5,18.072129 10.6377695,17.7131162 10.9133127,17.4278689 C11.1888559,17.1426215 11.5495334,17 11.995356,17 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ErrorAlert", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetErrorAlertIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFilledCircleIcon()" />*/
	getFilledCircleIcon: function () {
		var icon = this.checkForIcon("FilledCircle");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, false, "M12,4 C16.418,4 20,7.582 20,12 C20,16.418 16.418,20 12,20 C7.582,20 4,16.418 4,12 C4,7.582 7.582,4 12,4 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("FilledCircle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetFilledCircleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDeleteIcon()" />*/
	getDeleteIcon: function () {
		var icon = this.checkForIcon("Delete");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M12.1358875,9.1906087 L12.1358875,18.4166957"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M14.56865,9.1906087 L14.56865,18.4166957"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M9.7032125,9.1906087 L9.7032125,18.4166957"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M16.238325,20.978087 L8.034325,20.978087 C7.57145,20.978087 7.1882,20.6198261 7.1602,20.1615652 L6.33595,6.63026087 L17.9367,6.63026087 L17.111575,20.1615652 C17.08445,20.6198261 16.7012,20.978087 16.238325,20.978087 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M17.96015,4.71704348 L6.31215,4.71704348 C5.82915,4.71704348 5.43715,5.1066087 5.43715,5.5866087 L5.43715,6.63008696 L18.83515,6.63008696 L18.83515,5.5866087 C18.83515,5.1066087 18.44315,4.71704348 17.96015,4.71704348 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M14.56865,4.71704348 L14.56865,3.76052174 C14.56865,3.23269565 14.13815,2.804 13.60615,2.804 L10.66615,2.804 C10.135025,2.804 9.702775,3.23269565 9.702775,3.76052174 L9.702775,4.71704348"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Delete", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDeleteIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDashedCircleIcon()" />*/
	getDashedCircleIcon: function () {
		var icon = this.checkForIcon("DashedCircle");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 151, 151, 151), false, "M12.0000115,24 C11.8527351,24 11.7333439,23.8805059 11.7333439,23.7331025 C11.7333439,23.5856991 11.8527351,23.466205 12.0000115,23.466205 C12.8800298,23.466205 13.7469395,23.367034 14.589322,23.1724539 C14.7328263,23.1393062 14.8760079,23.2288681 14.9091271,23.3724961 C14.9422463,23.516124 14.8527615,23.6594291 14.7092572,23.6925768 C13.8276107,23.8962264 12.9204672,24 12.0000115,24 Z M17.2798849,22.7779277 C17.1476703,22.8428656 16.987892,22.7882347 16.92301,22.6559062 C16.858128,22.5235777 16.9127118,22.3636617 17.0449263,22.2987238 C17.8272897,21.9144616 18.5633004,21.4417288 19.2388434,20.8907132 C19.3530091,20.7975924 19.520983,20.8147325 19.6140236,20.9289966 C19.7070642,21.0432607 19.6899389,21.2113793 19.5757732,21.3045001 C18.868907,21.8810649 18.0986979,22.375763 17.2798849,22.7779277 Z M21.4810567,19.3528516 C21.39069,19.4692455 21.2231587,19.4902816 21.106865,19.399837 C20.9905713,19.3093925 20.9695533,19.1417167 21.05992,19.0253228 C21.594602,18.3366428 22.0496402,17.5892554 22.415195,16.7973204 C22.4769627,16.6635073 22.6354188,16.6051462 22.7691166,16.6669671 C22.9028145,16.728788 22.9611254,16.8873807 22.8993577,17.0211938 C22.5167547,17.850062 22.0405514,18.6322123 21.4810567,19.3528516 Z M23.7615031,14.3840601 C23.7322957,14.5285358 23.5915985,14.6219587 23.4472473,14.5927261 C23.302896,14.5634934 23.2095536,14.422675 23.238761,14.2781993 C23.3875804,13.5420602 23.4643381,12.7886732 23.4666646,12.026134 C23.4667176,11.8794916 23.4651563,11.7641191 23.4616639,11.6454029 C23.4573294,11.4980633 23.5731551,11.3751042 23.7203678,11.370766 C23.8675805,11.3664278 23.9904337,11.4823533 23.9947681,11.6296929 C23.998422,11.7538964 24.0000547,11.874547 23.9999986,12.0270452 C23.997564,12.8253589 23.9172495,13.6136566 23.7615031,14.3840601 Z M23.6057463,8.92476393 C23.6432276,9.06731391 23.5581521,9.21328428 23.4157249,9.25079789 C23.2732977,9.28831149 23.127453,9.20316269 23.0899717,9.06061271 C22.8676551,8.21509177 22.5494668,7.40058992 22.1426227,6.63085471 C22.0737551,6.50055951 22.123461,6.33905803 22.253644,6.27013106 C22.383827,6.20120408 22.5451894,6.25095286 22.614057,6.38124805 C23.0399169,7.18696051 23.373011,8.03961831 23.6057463,8.92476393 Z M21.057141,4.11049121 C21.1538026,4.22170362 21.1420844,4.39028629 21.0309678,4.48703114 C20.9198511,4.583776 20.7514136,4.57204773 20.6547521,4.46083532 C20.0827885,3.80277169 19.4377332,3.21123347 18.7328288,2.69862963 C18.6136812,2.61198593 18.587271,2.44507586 18.6738401,2.32582555 C18.7604092,2.20657525 18.9271756,2.18014237 19.0463232,2.26678607 C19.783859,2.80311938 20.458733,3.4220023 21.057141,4.11049121 Z M16.6789381,0.926513088 C16.8145392,0.984031843 16.8778775,1.14068113 16.8204083,1.27639907 C16.7629391,1.41211701 16.6064247,1.47550998 16.4708236,1.41799122 C15.6710597,1.07875032 14.833444,0.831394026 13.9711263,0.681895377 C13.8260109,0.656736934 13.7287489,0.518601253 13.7538857,0.373360698 C13.7790225,0.228120143 13.9170392,0.130774358 14.0621547,0.1559328 C14.9648194,0.312426364 15.8417111,0.571381241 16.6789381,0.926513088 Z M11.2803861,0.000474165033 C11.4274054,-0.00823199493 11.5536398,0.103995734 11.5623385,0.251141814 C11.5710372,0.398287894 11.4589061,0.524631098 11.3118867,0.533337258 C10.4353708,0.585242582 9.57579041,0.736237075 8.7452278,0.981850996 C8.60398747,1.02361858 8.4556594,0.942881295 8.41392778,0.801519224 C8.37219617,0.660157153 8.45286392,0.511701236 8.59410426,0.469933653 C9.46352119,0.212829734 10.3632312,0.0547860351 11.2803861,0.000474165033 Z M6.07931146,1.54053361 C6.20735506,1.46770279 6.37014511,1.51255107 6.4429132,1.64070503 C6.51568129,1.768859 6.47087164,1.93178935 6.34282804,2.00462016 C5.58539751,2.43544435 4.87908489,2.95166095 4.23782025,3.54224031 C4.12944397,3.64205058 3.96074509,3.63503073 3.86102077,3.52656103 C3.76129645,3.41809133 3.76831025,3.24924706 3.87668654,3.14943678 C4.54763311,2.53152154 5.28668467,1.99137732 6.07931146,1.54053361 Z M2.09174519,5.21220486 C2.1749515,5.09058029 2.34091483,5.05949427 2.46243467,5.14277229 C2.5839545,5.22605031 2.61501375,5.39215669 2.53180744,5.51378126 C2.03972439,6.23307038 1.6307335,7.00627705 1.31376949,7.81926303 C1.26023199,7.95658222 1.10560793,8.02446328 0.968407001,7.97087963 C0.831206069,7.91729599 0.76338346,7.76253866 0.816920965,7.62521948 C1.148703,6.77422653 1.57677017,5.9649557 2.09174519,5.21220486 Z M0.115476682,10.3167142 C0.135808702,10.1707222 0.270539038,10.0688689 0.416405309,10.0892184 C0.56227158,10.109568 0.664037197,10.2444144 0.643705176,10.3904064 C0.571586704,10.9082457 0.534555003,11.4330891 0.533334635,11.9619408 C0.533303801,12.3321078 0.548299114,12.6764005 0.578983412,13.0212299 C0.592048246,13.1680522 0.483718909,13.2976754 0.337023067,13.3107515 C0.190327225,13.3238276 0.0608156074,13.2154049 0.0477507738,13.0685826 C0.0156511048,12.7078473 0,12.3477446 0,11.9613024 C0.00127707846,11.4075978 0.0400169215,10.8585453 0.115476682,10.3167142 Z M0.600829644,15.7526382 C0.554720984,15.612645 0.630731696,15.4617474 0.770604322,15.415599 C0.910476948,15.3694506 1.06124457,15.4455269 1.10735323,15.5855201 C1.38051346,16.4148777 1.74765297,17.2085985 2.20064437,17.9526726 C2.27727793,18.0785493 2.23744638,18.2427698 2.11167811,18.3194694 C1.98590984,18.396169 1.82183074,18.3563032 1.74519718,18.2304265 C1.27108401,17.4516582 0.886780785,16.6208311 0.600829644,15.7526382 Z M3.43988909,20.4067028 C3.3366695,20.3015596 3.33815556,20.132576 3.44320829,20.0292674 C3.54826103,19.9259589 3.7170991,19.9274462 3.82031869,20.0325895 C4.43117982,20.6548351 5.11084106,21.2061619 5.84562227,21.6748744 C5.96981855,21.7540985 6.00633104,21.91909 5.92717522,22.0433933 C5.84801939,22.1676967 5.68316993,22.2042406 5.55897366,22.1250166 C4.79011549,21.6345666 4.07900002,21.0577248 3.43988909,20.4067028 Z M7.99980358,23.3164406 C7.86094639,23.2673163 7.78816921,23.1148302 7.8372512,22.9758533 C7.88633318,22.8368765 8.03868799,22.7640366 8.17754517,22.8131609 C8.99534067,23.102477 9.84618544,23.2982181 10.7174668,23.395245 C10.86384,23.4115453 10.9692964,23.5435205 10.9530101,23.6900199 C10.9367239,23.8365192 10.8048623,23.9420665 10.6584891,23.9257662 C9.74659447,23.8242166 8.85590893,23.6193098 7.99980358,23.3164406 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("DashedCircle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetDashedCircleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetInfragisticsIcon()" />*/
	getInfragisticsIcon: function () {
		var icon = this.checkForIcon("Infragistics");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 153, 255), false, "M2.500000, 20.500000L21.134615, 20.500000L21.134615, 3.500000L2.500000, 3.500000"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M18.2278109,17.614231 L7.23930789,17.614231 C6.21062933,17.614231 5.37638948,16.7821315 5.37638948,15.7601787 L5.37638948,10.2359923 L8.26798646,10.2359923 L8.26798646,14.7273772 L15.3362139,14.7273772 L15.3362139,9.2747926 L12.123087,9.2747926 L12.123087,12.1616465 L9.23149003,12.1616465 L9.23149003,6.38685386 L16.3638062,6.38685386 C17.3913986,6.38685386 18.2278109,7.21786854 18.2278109,8.24090619 L18.2278109,17.614231 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M5.376390, 9.273707L8.267986, 9.273707L8.267986, 6.386854L5.376390, 6.386854"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Infragistics", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetInfragisticsIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIgSquareIcon()" />*/
	getIgSquareIcon: function () {
		var icon = this.checkForIcon("IgSquare");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M30.4972617,75.4006663 L30.4972617,62.8857987 L38.1852321,70.2469255 C38.3932736,70.4539795 38.6060977,70.6753131 38.821313,70.9121162 C39.0341371,71.1477294 39.2601132,71.4142817 39.4968501,71.7093931 L39.4968501,63.3617849 L41.3190067,63.3617849 L41.3190067,75.8718926 L33.4708204,68.3786796 C33.2627789,68.1751955 33.0607156,67.9633816 32.8634349,67.7384781 C32.6685454,67.5123847 32.4844168,67.2779615 32.3074619,67.0316386 L32.3074619,75.4006663 L30.4972617,75.4006663 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M105.249016, 64.938698L105.249016, 75.511169L103.302078, 75.511169L103.302078, 64.938698L100.117157, 64.938698L100.117157, 63.246525L108.413826, 63.246525L108.413826, 64.938698"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M110.217453, 75.511169L112.021072, 75.511169L112.021072, 63.246525L110.217453, 63.246525"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M124.899621,66.0917325 C124.335304,65.6213547 123.741985,65.2697591 123.11604,65.0345702 C122.486469,64.7993813 121.829106,64.680599 121.140324,64.680599 C119.802638,64.680599 118.716297,65.1010883 117.876467,65.9444425 C117.036636,66.7866089 116.618534,67.8794059 116.618534,69.2204579 C116.618534,70.5175605 117.025761,71.5877889 117.845048,72.4311431 C118.659502,73.2733095 119.689049,73.6937988 120.928856,73.6937988 C121.653889,73.6937988 122.343879,73.5678896 122.998826,73.3148833 C123.652564,73.0666283 124.280926,72.6841494 124.881495,72.1781368 L124.881495,74.3827361 C124.346179,74.7628394 123.763736,75.0431656 123.134165,75.2296538 C122.505803,75.4161419 121.823064,75.5111678 121.089572,75.5111678 C120.153071,75.5111678 119.287864,75.3603143 118.495162,75.0574194 C117.70125,74.7557124 117.00401,74.3126545 116.399816,73.7270578 C115.807705,73.1533394 115.346101,72.4762804 115.028295,71.6970686 C114.705655,70.916669 114.546148,70.0840052 114.546148,69.2026406 C114.546148,68.321276 114.705655,67.496927 115.028295,66.7200908 C115.346101,65.948006 115.81133,65.2661957 116.417942,64.680599 C117.025761,64.0890632 117.723001,63.6436296 118.504829,63.3383592 C119.29149,63.0366522 120.142195,62.8857987 121.05332,62.8857987 C121.772311,62.8857987 122.458676,62.9867636 123.108789,63.1910691 C123.763736,63.3977503 124.392098,63.7065842 125.007168,64.1211344 L124.899621,66.0917325 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M126.450067,72.7820332 L128.039678,72.0590206 C128.189801,72.5929559 128.467044,73.0044071 128.867776,73.2850501 C129.27214,73.5704498 129.784254,73.7107714 130.407749,73.7107714 C131.000978,73.7107714 131.470718,73.5490449 131.818181,73.2255919 C132.169275,72.9021389 132.341191,72.4692827 132.341191,71.9246449 C132.341191,71.2182807 131.746751,70.588023 130.550609,70.0362502 C130.382325,69.9518195 130.257626,69.8923612 130.166826,69.8531188 C128.813296,69.2062128 127.914979,68.6235217 127.46703,68.0990998 C127.016661,67.575867 126.793898,66.9349069 126.793898,66.1797868 C126.793898,65.1987254 127.130464,64.4079304 127.810861,63.7990777 C128.487626,63.1914142 129.376258,62.8857987 130.475547,62.8857987 C131.381129,62.8857987 132.136587,63.0570385 132.745555,63.3983289 C133.35089,63.7419977 133.773414,64.2319339 134.009495,64.8752724 L132.452572,65.663689 C132.204385,65.2867236 131.935616,65.0084589 131.642634,64.8324624 C131.348441,64.6576551 131.013085,64.5696569 130.632934,64.5696569 C130.099028,64.5696569 129.672872,64.7064109 129.358098,64.9799189 C129.043324,65.2546161 128.885936,65.6208791 128.885936,66.0810861 C128.885936,66.8052878 129.577229,67.4807338 130.962237,68.1026673 L131.212845,68.2192055 C132.423516,68.7674108 133.254036,69.301346 133.705616,69.825768 C134.159618,70.3490007 134.386013,71.0030417 134.386013,71.7878909 C134.386013,72.9259222 134.020391,73.8308771 133.289146,74.5015663 C132.555479,75.1734448 131.571204,75.5111678 130.325424,75.5111678 C129.283036,75.5111678 128.427092,75.2721455 127.761223,74.8036144 C127.091722,74.3291374 126.65467,73.6572589 126.450067,72.7820332"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M135.828913,63.7802697 C135.828913,64.2873626 135.436099,64.6894228 134.929314,64.6894228 C134.424741,64.6894228 134.025289,64.2873626 134.025289,63.7802697 C134.025289,63.2833414 134.424741,62.8857987 134.929314,62.8857987 C135.436099,62.8857987 135.828913,63.2833414 135.828913,63.7802697 L135.828913,63.7802697 Z M134.247699,63.7802697 C134.247699,64.1800712 134.538713,64.495169 134.934846,64.495169 C135.322127,64.495169 135.603183,64.1800712 135.603183,63.787046 C135.603183,63.3861152 135.322127,63.0653705 134.929314,63.0653705 C134.538713,63.0653705 134.247699,63.3861152 134.247699,63.7802697 L134.247699,63.7802697 Z M134.792105,64.2512223 L134.585187,64.2512223 L134.585187,63.3567512 C134.667069,63.3386811 134.777721,63.3262579 134.922675,63.3262579 C135.089759,63.3262579 135.163895,63.3567512 135.22918,63.3928915 C135.275654,63.4290317 135.315488,63.503571 135.315488,63.5905335 C135.315488,63.686531 135.240245,63.763329 135.131806,63.7972105 L135.131806,63.8062456 C135.217008,63.8412564 135.265695,63.9067606 135.292251,64.0276046 C135.322127,64.1642599 135.334299,64.2184702 135.357536,64.2512223 L135.138446,64.2512223 C135.111889,64.2184702 135.095291,64.1371547 135.069841,64.0309927 C135.053244,63.9338658 134.997918,63.8909493 134.886159,63.8909493 L134.792105,63.8909493 L134.792105,64.2512223 Z M134.794318,63.7441295 L134.892799,63.7441295 C135.00345,63.7441295 135.095291,63.7034717 135.095291,63.6142505 C135.095291,63.5295468 135.036646,63.4764658 134.909396,63.4764658 C134.85407,63.4764658 134.817555,63.479854 134.794318,63.4866302 L134.794318,63.7441295 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M44.204803, 75.511169L44.204803, 63.246525L51.058578, 63.246525L51.058578, 64.937653L46.200638, 64.937653L46.200638, 67.998665L51.058578, 67.998665L51.058578, 69.747986L46.200638, 69.747986L46.200638, 75.511169"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M55.0614608,70.0243851 L55.0614608,75.5111678 L53.2229261,75.5111678 L53.2229261,63.2465235 L55.9610424,63.2465235 C56.7627914,63.2465235 57.3867717,63.2998638 57.828211,63.4077568 C58.2720363,63.512013 58.6502424,63.6865814 58.9640221,63.935099 C59.3386489,64.2321077 59.627374,64.6115516 59.8290044,65.0819165 C60.0330209,65.5522815 60.1356257,66.0638639 60.1356257,66.6227254 C60.1356257,67.6083096 59.899396,68.3756833 59.4340952,68.9321202 C58.9676014,69.4873448 58.2756156,69.8195097 57.3617171,69.9346764 L61.5195973,75.5111678 L59.3028566,75.5111678 L55.2845666,70.0243851 L55.0614608,70.0243851 Z M55.185541,68.4763026 L55.5410786,68.4763026 C56.5790573,68.4763026 57.2710431,68.3538623 57.6086844,68.106557 C57.9510981,67.8628886 58.1205153,67.4252552 58.1205153,66.7985061 C58.1205153,66.124478 57.9379742,65.6480516 57.5740851,65.3716516 C57.2066168,65.0964639 56.528948,64.9558393 55.5410786,64.9558393 L55.185541,64.9558393 L55.185541,68.4763026 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M70.9532366,75.5111678 L69.5594232,72.3851374 L64.6853296,72.3851374 L63.2574912,75.5111678 L61.1588724,75.5111678 L67.1144777,62.8857987 L73.0627919,75.5111678 L70.9532366,75.5111678 Z M65.4253752,70.7404901 L68.8534027,70.7404901 L67.5920441,67.973401 C67.5203484,67.7945306 67.4450071,67.5892499 67.3660203,67.3623606 C67.2870335,67.1318698 67.2116923,66.8761692 67.1327054,66.5916572 C67.0646553,66.8581621 66.9929596,67.1066599 66.9164031,67.3371506 C66.8410618,67.5640399 66.7657206,67.777724 66.6867338,67.973401 L65.4253752,70.7404901 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M80.4172009,69.0242705 L85.294604,69.0242705 C85.294604,69.1087012 85.298252,69.2204828 85.3019,69.3691285 C85.3201401,69.7591747 85.3274362,70.0231694 85.3274362,70.1599234 C85.3274362,71.8509167 84.8300894,73.1649444 83.8414759,74.1043851 C82.8492144,75.0402583 81.4495906,75.5111678 79.6438205,75.5111678 C78.6369669,75.5111678 77.7383379,75.3637113 76.9467175,75.0747441 C76.1550971,74.7833985 75.4644053,74.3445965 74.868562,73.7595271 C74.2848787,73.1756469 73.8386042,72.4978226 73.5297385,71.7141626 C73.2172248,70.9305026 73.0627919,70.0897627 73.0627919,69.1966995 C73.0627919,68.2893663 73.2208728,67.4498155 73.5370345,66.6828038 C73.8531963,65.9169813 74.3213589,65.2367787 74.9463864,64.6540876 C75.5434457,64.0773424 76.2487296,63.6385404 77.0549421,63.3388707 C77.8635866,63.0368227 78.7269514,62.8857987 79.6438205,62.8857987 C80.61541,62.8857987 81.4812068,63.0570385 82.248507,63.4018964 C83.0109433,63.7503219 83.6943391,64.2783113 84.2938304,64.9870539 L82.8309743,66.0680053 C82.417532,65.5959066 81.9493694,65.2439137 81.4289185,65.0120264 C80.9060356,64.7848958 80.3235683,64.6683576 79.6766527,64.6683576 C78.3451253,64.6683576 77.2555832,65.0857547 76.4104585,65.9241163 C75.5689819,66.7565321 75.1482435,67.8434292 75.1482435,69.1824295 C75.1482435,70.5392672 75.5689819,71.6428127 76.4104585,72.4871201 C77.2555832,73.3349951 78.3487733,73.7595271 79.6948928,73.7595271 C80.8379392,73.7595271 81.7365682,73.5002891 82.3956439,72.9794346 C83.0498555,72.4597693 83.3781773,71.7486484 83.3781773,70.8484502 L83.3781773,70.6772104 L80.4172009,70.6772104 L80.4172009,69.0242705 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M87.491783, 75.511169L89.295410, 75.511169L89.295410, 63.246525L87.491783, 63.246525"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M91.4597583,72.7820332 L93.053244,72.0590206 C93.2033901,72.5929559 93.4794651,73.0044071 93.8802583,73.2850501 C94.2822623,73.5704498 94.7968758,73.7107714 95.4204664,73.7107714 C96.0113638,73.7107714 96.4835974,73.5490449 96.8323238,73.2255919 C97.1786284,72.9021389 97.3542024,72.4692827 97.3542024,71.9246449 C97.3542024,71.2182807 96.7572507,70.588023 95.5633473,70.0362502 C95.3950384,69.9518195 95.2666877,69.8923612 95.1770844,69.8531188 C93.8269806,69.2062128 92.9273151,68.6235217 92.4768769,68.0990998 C92.0288604,67.575867 91.8036413,66.9349069 91.8036413,66.1797868 C91.8036413,65.1987254 92.1438916,64.4079304 92.8207598,63.7990777 C93.5012605,63.1914142 94.3888176,62.8857987 95.4882743,62.8857987 C96.3915724,62.8857987 97.1471462,63.0570385 97.7562064,63.3983289 C98.3640558,63.7419977 98.7866444,64.2319339 99.0203395,64.8752724 L97.4619686,65.663689 C97.2185866,65.2867236 96.9497767,65.0084589 96.6567497,64.8324624 C96.3625119,64.6576551 96.0258941,64.5696569 95.6468963,64.5696569 C95.1129091,64.5696569 94.686688,64.7064109 94.3706547,64.9799189 C94.0558323,65.2546161 93.8984211,65.6208791 93.8984211,66.0810861 C93.8984211,66.8052878 94.5898195,67.4807338 95.9726164,68.1026673 L96.2232635,68.2192055 C97.4365406,68.7674108 98.2683983,69.301346 98.7188365,69.825768 C99.1704855,70.3490007 99.3957046,71.0030417 99.3957046,71.7878909 C99.3957046,72.9259222 99.0300263,73.8308771 98.2998805,74.5015663 C97.5697347,75.1734448 96.5804658,75.5111678 95.3381282,75.5111678 C94.2919491,75.5111678 93.4358743,75.2721455 92.7711147,74.8036144 C92.1039334,74.3291374 91.6668146,73.6572589 91.4597583,72.7820332"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 102, 102, 102), false, "M25.807838, 75.511169L27.611464, 75.511169L27.611464, 63.246525L25.807838, 63.246525"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 0, 153, 255), false, "M2.000000, 78.757690L22.561316, 78.757690L22.561316, 60.000000L2.000000, 60.000000"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M19.353966,75.5735522 L7.22932202,75.5735522 C6.09428467,75.5735522 5.17378975,74.6554189 5.17378975,73.5278027 L5.17378975,67.4324509 L8.36435936,67.4324509 L8.36435936,72.3882161 L16.1633963,72.3882161 L16.1633963,66.3718692 L12.6180527,66.3718692 L12.6180527,69.5572053 L9.42748305,69.5572053 L9.42748305,63.1853361 L17.2972351,63.1853361 C18.4310739,63.1853361 19.353966,64.1022724 19.353966,65.2310856 L19.353966,75.5735522 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M5.173790, 66.370674L8.364359, 66.370674L8.364359, 63.185337L5.173790, 63.185337"));
			icon = new $.ig.PathIcon(0, 0, 138, parts);
			this.__iconsByKey.item("IgSquare", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetIgSquareIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetTreeexpansionindicatorIcon()" />*/
	getTreeexpansionindicatorIcon: function () {
		var icon = this.checkForIcon("Treeexpansionindicator");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, false, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.round, "M10.000000, 7.000000L16.000000, 12.016162L10.000000, 17.000000"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Treeexpansionindicator", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetTreeexpansionindicatorIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetSelectedIcon()" />*/
	getSelectedIcon: function () {
		var icon = this.checkForIcon("Selected");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().checkedColor().color(), false, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.round, "M6,4 L18,4 C19.1045695,4 20,4.8954305 20,6 L20,18 C20,19.1045695 19.1045695,20 18,20 L6,20 C4.8954305,20 4,19.1045695 4,18 L4,6 C4,4.8954305 4.8954305,4 6,4 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M15.5469304,8.77780228 C15.9374547,8.38727799 16.5706197,8.38727799 16.961144,8.77780228 C17.3516683,9.16832658 17.3516683,9.80149155 16.961144,10.1920158 L11.9364457,15.2167142 C11.5459214,15.6072384 10.9127564,15.6072384 10.5222321,15.2167142 L7.29289322,11.9873752 C6.90236893,11.5968509 6.90236893,10.963686 7.29289322,10.5731617 C7.68341751,10.1826374 8.31658249,10.1826374 8.70710678,10.5731617 L11.2293389,13.0953938 L15.5469304,8.77780228 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Selected", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetSelectedIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCheckedIcon()" />*/
	getCheckedIcon: function () {
		var icon = this.checkForIcon("Checked");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().checkedColor().color(), false, $.ig.CPStrokeCap.prototype.butt, $.ig.CPStrokeJoin.prototype.round, "M12,3 C16.97025,3 21,7.02975 21,12 C21,16.97025 16.97025,21 12,21 C7.02975,21 3,16.97025 3,12 C3,7.02975 7.02975,3 12,3 Z"));
			parts.add(new $.ig.PathIconPart(1, $.ig.ColorUtility.prototype.createColor1(255, 255, 255, 255), false, "M15.5469304,8.77780228 C15.9374547,8.38727799 16.5706197,8.38727799 16.961144,8.77780228 C17.3516683,9.16832658 17.3516683,9.80149155 16.961144,10.1920158 L11.9364457,15.2167142 C11.5459214,15.6072384 10.9127564,15.6072384 10.5222321,15.2167142 L7.29289322,11.9873752 C6.90236893,11.5968509 6.90236893,10.963686 7.29289322,10.5731617 C7.68341751,10.1826374 8.31658249,10.1826374 8.70710678,10.5731617 L11.2293389,13.0953938 L15.5469304,8.77780228 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Checked", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetCheckedIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetUnselectedIcon()" />*/
	getUnselectedIcon: function () {
		var icon = this.checkForIcon("Unselected");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().itemBackgroundColor().color(), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M6,4 L18,4 C19.1045695,4 20,4.8954305 20,6 L20,18 C20,19.1045695 19.1045695,20 18,20 L6,20 C4.8954305,20 4,19.1045695 4,18 L4,6 C4,4.8954305 4.8954305,4 6,4 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().uncheckedColor().color(), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M6,4 L18,4 C19.1045695,4 20,4.8954305 20,6 L20,18 C20,19.1045695 19.1045695,20 18,20 L6,20 C4.8954305,20 4,19.1045695 4,18 L4,6 C4,4.8954305 4.8954305,4 6,4 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Unselected", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetUnselectedIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetUncheckedIcon()" />*/
	getUncheckedIcon: function () {
		var icon = this.checkForIcon("Unchecked");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().itemBackgroundColor().color(), false, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12,21 C16.9705627,21 21,16.9705627 21,12 C21,7.02943725 16.9705627,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 Z"));
			parts.add(new $.ig.PathIconPart(4, $.ig.ThemeManager.prototype.theme().uncheckedColor().color(), true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12,21 C16.9705627,21 21,16.9705627 21,12 C21,7.02943725 16.9705627,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Unchecked", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetUncheckedIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetSearchIcon()" />*/
	getSearchIcon: function () {
		var icon = this.checkForIcon("Search");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M15.5983496,15.9874369 C18.2245761,13.3612103 18.2245761,9.10325578 15.5983496,6.47702923 C12.972123,3.85080267 8.71416848,3.85080267 6.08794193,6.47702923 C3.46171538,9.10325578 3.46171538,13.3612103 6.08794193,15.9874369 C8.71416848,18.6136634 12.972123,18.6136634 15.5983496,15.9874369 Z"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M14.8990549,16.9664494 L18.3955283,20.4629228 L14.8990549,16.9664494"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Search", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetSearchIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeSquareIcon()" />*/
	getLegendBadgeSquareIcon: function () {
		var icon = this.checkForIcon("LegendBadgeSquare");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 2, 2 L 10 2 L 10 10 L 2 10 Z");
			this.__iconsByKey.item("LegendBadgeSquare", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeSquareIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeDashIcon()" />*/
	getLegendBadgeDashIcon: function () {
		var icon = this.checkForIcon("LegendBadgeDash");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 2, 5 L 11 5 L 11 8 L 2 8 Z");
			this.__iconsByKey.item("LegendBadgeDash", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeDashIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeCircleIcon()" />*/
	getLegendBadgeCircleIcon: function () {
		var icon = this.checkForIcon("LegendBadgeCircle");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, false, "M12,4 C16.418,4 20,7.582 20,12 C20,16.418 16.418,20 12,20 C7.582,20 4,16.418 4,12 C4,7.582 7.582,4 12,4 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("LegendBadgeCircle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeCircleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetPlusIcon()" />*/
	getPlusIcon: function () {
		var icon = this.checkForIcon("Plus");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(1, 0, true, "M4,12 L20,12"));
			parts.add(new $.ig.PathIconPart(1, 0, true, "M12,20 L12,4"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Plus", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetPlusIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetMinusIcon()" />*/
	getMinusIcon: function () {
		var icon = this.checkForIcon("Minus");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M4,12 L20,12"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Minus", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetMinusIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetKeyIcon()" />*/
	getKeyIcon: function () {
		var icon = this.checkForIcon("Key");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M12.2213959,5.88804898 C13.9179881,4.19145687 16.6779003,4.19145687 18.3744924,5.88804898 C20.0710845,7.5846411 20.0710845,10.3445533 18.3744924,12.0411454 C17.1466265,13.2690114 15.3412112,13.6439923 13.7304976,13.0205537 L13.7304976,13.0205537 L13.2506269,13.5004244 C13.2099821,13.5410692 13.1575372,13.5659805 13.1011589,13.5725362 L13.1011589,13.5725362 L11.8883709,13.7062706 L11.7559476,14.9177475 C11.7434919,15.0337818 11.6510578,15.1249048 11.535679,15.138016 L11.535679,15.138016 L10.3215799,15.2730616 L10.1878454,16.4858497 C10.1753898,16.601884 10.0836112,16.6936625 9.9675769,16.7061182 L9.9675769,16.7061182 L8.75347775,16.8411638 L8.6177766,18.0559185 C8.60466538,18.1712972 8.51419795,18.2630758 8.39750808,18.276187 L8.39750808,18.276187 L7.18406449,18.410577 L7.04770778,19.6259873 C7.04180773,19.68171 7.01624085,19.7348105 6.97625162,19.7747997 L6.97625162,19.7747997 L6.92905122,19.8220001 C6.87857302,19.8724783 6.80842798,19.8993563 6.73631626,19.8941118 L6.73631626,19.8941118 L4.72767706,19.7682441 C4.60246489,19.7597218 4.5028196,19.6600765 4.49429731,19.5348643 L4.49429731,19.5348643 L4.36842958,17.5262251 C4.36384065,17.454769 4.3900631,17.3839684 4.4405413,17.3334902 L4.4405413,17.3334902 L11.2419877,10.5320438 C10.6185491,8.92133017 10.99353,7.11591492 12.2213959,5.88804898 Z M16.8806653,7.38226939 C16.468973,6.97057702 15.8009562,6.96992146 15.3892638,7.38161383 C14.9769159,7.79396176 14.9775715,8.46197851 15.3892638,8.87367088 C15.8009562,9.28536325 16.4683174,9.28536325 16.8806653,8.87301532 C17.2923577,8.46132295 17.2923577,7.79396176 16.8806653,7.38226939 Z"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("Key", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetKeyIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeTriangleIcon()" />*/
	getLegendBadgeTriangleIcon: function () {
		var icon = this.checkForIcon("LegendBadgeTriangle");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 2, 2 L 10, 2 L 6, 10 Z");
			this.__iconsByKey.item("LegendBadgeTriangle", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeTriangleIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePyramidIcon()" />*/
	getLegendBadgePyramidIcon: function () {
		var icon = this.checkForIcon("LegendBadgePyramid");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 2, 10 L 10, 10 L 6, 2 Z");
			this.__iconsByKey.item("LegendBadgePyramid", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePyramidIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeDiamondIcon()" />*/
	getLegendBadgeDiamondIcon: function () {
		var icon = this.checkForIcon("LegendBadgeDiamond");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 2, 6 L 6, 2 L 10, 6 L 6, 10 Z");
			this.__iconsByKey.item("LegendBadgeDiamond", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeDiamondIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePentagonIcon()" />*/
	getLegendBadgePentagonIcon: function () {
		var icon = this.checkForIcon("LegendBadgePentagon");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 6, 0.5 L 11.2308111, 4.30040646 L 9.232819, 10.4495935 L 2.76718116, 10.4495935 L 0.769189, 4.30040646 Z");
			this.__iconsByKey.item("LegendBadgePentagon", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePentagonIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeHexagonIcon()" />*/
	getLegendBadgeHexagonIcon: function () {
		var icon = this.checkForIcon("LegendBadgeHexagon");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 6, 0.5 L 10.76314, 3.25 L 10.76314, 8.75 L 6, 11.5 L 1.23686039, 8.75 L 1.23686039, 3.25 Z");
			this.__iconsByKey.item("LegendBadgeHexagon", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeHexagonIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeTetragramIcon()" />*/
	getLegendBadgeTetragramIcon: function () {
		var icon = this.checkForIcon("LegendBadgeTetragram");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 6, 0.5 L 7.944544, 4.055456 L 11.5, 6 L 7.944544, 7.944544 L 6, 11.5 L 4.055456, 7.944544 L 0.5, 6 L 4.055456, 4.055456 Z");
			this.__iconsByKey.item("LegendBadgeTetragram", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeTetragramIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePentagramIcon()" />*/
	getLegendBadgePentagramIcon: function () {
		var icon = this.checkForIcon("LegendBadgePentagram");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 6, 0.5 L 7.6164093, 3.77520323 L 11.2308111, 4.30040646 L 8.615405, 6.849797 L 9.232819, 10.4495935 L 6, 8.75 L 2.76718116, 10.4495935 L 3.3849444, 6.849797 L 0.769189, 4.30040646 L 4.3835907, 3.77520323 Z");
			this.__iconsByKey.item("LegendBadgePentagram", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgePentagramIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeHexagramIcon()" />*/
	getLegendBadgeHexagramIcon: function () {
		var icon = this.checkForIcon("LegendBadgeHexagram");
		if (icon == null) {
			icon = new $.ig.PathIcon(1, 0, 13, "M 6, 0.5 L 7.375, 3.61843014 L 10.76314, 3.25 L 8.75, 6 L 10.76314, 8.75 L 7.375, 8.38157 L 6, 11.5 L 4.625, 8.38157 L 1.23686039, 8.75 L 3.25, 6 L 1.23686039, 3.25 L 4.625, 3.61843014 Z");
			this.__iconsByKey.item("LegendBadgeHexagram", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetLegendBadgeHexagramIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetZoomInIcon()" />*/
	getZoomInIcon: function () {
		var icon = this.checkForIcon("ZoomIn");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M16.5983496,15.9874369 C19.2245761,13.3612103 19.2245761,9.10325578 16.5983496,6.47702923 C13.972123,3.85080267 9.71416848,3.85080267 7.08794193,6.47702923 C4.46171538,9.10325578 4.46171538,13.3612103 7.08794193,15.9874369 C9.71416848,18.6136634 13.972123,18.6136634 16.5983496,15.9874369 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M15.8990549,16.9664494 L19.3955283,20.4629228 L15.8990549,16.9664494 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M15.8990549,16.9664494 L19.3955283,20.4629228 L15.8990549,16.9664494 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M7.84314575,11.232233 L15.8431458,11.232233"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M11.8431458,15.232233 L11.8431458,7.23223305"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ZoomIn", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetZoomInIcon()" />*/
	,
	/*<BeginMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetZoomOutIcon()" />*/
	getZoomOutIcon: function () {
		var icon = this.checkForIcon("ZoomOut");
		if (icon == null) {
			var parts = new $.ig.Array();
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M16.4800776,15.4800776 C19.1063041,12.853851 19.1063041,8.59589647 16.4800776,5.96966991 C13.853851,3.34344336 9.59589647,3.34344336 6.96966991,5.96966991 C4.34344336,8.59589647 4.34344336,12.853851 6.96966991,15.4800776 C9.59589647,18.1063041 13.853851,18.1063041 16.4800776,15.4800776 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M15.7807829,16.4590901 L19.2772563,19.9555635 L15.7807829,16.4590901 Z"));
			parts.add(new $.ig.PathIconPart(4, 0, true, $.ig.CPStrokeCap.prototype.round, $.ig.CPStrokeJoin.prototype.round, "M7.72487373,10.7248737 L15.7248737,10.7248737"));
			icon = new $.ig.PathIcon(0, 0, 24, parts);
			this.__iconsByKey.item("ZoomOut", icon);
		}
		return icon;
	}
	/*<EndMethod Name="Infragistics.PathIcon Infragistics.UIPathIcons::GetZoomOutIcon()" />*/
	,
	$type: new $.ig.Type('UIPathIcons', $.ig.PathIconsBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.UIPathIcons" />*/

/*<BeginType Name="Infragistics.CPPopupManagerBase" />*/

$.ig.util.defType('CPPopupManagerBase', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_navController: null,
	_focusManager: null,
	_relativeView: null,
	_rootView: null,
	__popupId: null,
	/*<BeginProperty Name="System.String Infragistics.CPPopupManagerBase::PopupId()" />*/
	popupId: function (value) {
		if (arguments.length === 1) {
			this.__popupId = value;
			this.popupIdChanged(value);
			return value;
		} else {
			return this.__popupId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupManagerBase::PopupId()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::ConsiderAsTopMostPopup()" />*/
	considerAsTopMostPopup: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::ConsiderAsTopMostPopup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::PopupIdChanged(System.String)" />*/
	popupIdChanged: function (popupId) {
		var vd = this.viewDelegate();
		if (vd != null) {
			vd.popupId(popupId);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::PopupIdChanged(System.String)" />*/
	,
	_containerWidth: 0,
	_containerHeight: 0,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::IsFullScreen()" />*/
	isFullScreen: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::IsFullScreen()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AcceptsInput()" />*/
	acceptsInput: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPPopupManagerBase::BackgroundViewColor()" />*/
	backgroundViewColor: function () {
		return $.ig.ThemeManager.prototype.theme().modalShadeColor().color();
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPPopupManagerBase::BackgroundViewColor()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPPopupManagerBase::SmallScreenBackgroundViewColor()" />*/
	smallScreenBackgroundViewColor: function () {
		return $.ig.ThemeManager.prototype.theme().smallScreenModalShadeColor().color();
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPPopupManagerBase::SmallScreenBackgroundViewColor()" />*/
	,
	_closePopupAction: null,
	/*<BeginProperty Name="Infragistics.ExecutionBoolBlock Infragistics.CPPopupManagerBase::ClosePopupAction()" />*/
	closePopupAction: function (value) {
		if (arguments.length === 1) {
			this._closePopupAction = value;
			return value;
		} else {
			return this._closePopupAction;
		}
	}
	/*<EndProperty Name="Infragistics.ExecutionBoolBlock Infragistics.CPPopupManagerBase::ClosePopupAction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::ClosePopup(System.Boolean)" />*/
	closePopup: function (animate) {
		if (this.closePopupAction() != null) {
			this.closePopupAction()(animate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::ClosePopup(System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPPopupManagerBase::OverrideAnimationInDuration()" />*/
	overrideAnimationInDuration: function () {
		return -1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPPopupManagerBase::OverrideAnimationInDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPPopupManagerBase::OverrideAnimationOutDuration()" />*/
	overrideAnimationOutDuration: function () {
		return -1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPPopupManagerBase::OverrideAnimationOutDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsKeyboard()" />*/
	supportsKeyboard: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsKeyboard()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPPopupManagerBase::AutoHideDuration()" />*/
	autoHideDuration: function () {
		return 1500;
	}
	/*<EndProperty Name="System.Double Infragistics.CPPopupManagerBase::AutoHideDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::FinishedShowing()" />*/
	finishedShowing: function () {
		var vd = this.viewDelegate();
		if (vd != null) {
			vd.popupFinishedShowing();
		}
		if (this.supportsKeyboard()) {
			this.focusManagerRegistered();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::FinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		root.measureView1(popup, 0, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::Closing()" />*/
	closing: function () {
		var vd = this.viewDelegate();
		if (vd != null) {
			vd.popupClosing();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::Closing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		root.measureView1(popup, 0, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::CleanUp()" />*/
	cleanUp: function () {
		if (this.supportsKeyboard()) {
			var fm = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
			if (fm != null) {
				fm.unregisterFocusableElements(this._focusElements, this.popupSectionId());
			}
		}
		var vd = this.viewDelegate();
		if (vd != null) {
			vd.cleanupAfterPopupCloses();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::CleanUp()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::SupportsAnimating()" />*/
	,
	__popupSectionId: null,
	/*<BeginProperty Name="System.String Infragistics.CPPopupManagerBase::PopupSectionId()" />*/
	popupSectionId: function () {
		if (this.__popupSectionId == null) {
			this.__popupSectionId = "PopupSectionId: " + $.ig.NativeStringUtility.prototype.generateUID();
		}
		return this.__popupSectionId;
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupManagerBase::PopupSectionId()" />*/
	,
	_isShowing: false,
	_focusElements: null,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		this._focusElements = new $.ig.Array();
		$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().createNewSection(this.popupSectionId(), this);
		if (this._navController != null) {
			this._navController.focusManagerRegistered();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::FocusManagerRegistered()" />*/
	,
	/*<BeginMethod Name="Infragistics.FocusableElementDelegate Infragistics.CPPopupManagerBase::GetSectionView()" />*/
	getSectionView: function () {
		return null;
	}
	/*<EndMethod Name="Infragistics.FocusableElementDelegate Infragistics.CPPopupManagerBase::GetSectionView()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupManagerBase::CanSectionGetFocus()" />*/
	canSectionGetFocus: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupManagerBase::CanSectionGetFocus()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPPopupManagerBase::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		return new $.ig.Array();
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPPopupManagerBase::GetSupportedKeyCommands()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupManagerBase::KeepTopMost()" />*/
	keepTopMost: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupManagerBase::KeepTopMost()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManagerBase::InvalidateBounds()" />*/
	invalidateBounds: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManagerBase::InvalidateBounds()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPPopupManagerBase::ViewDelegate()" />*/
	viewDelegate: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPPopupManagerBase::ViewDelegate()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPPopupManagerBase::CloseDelegate()" />*/
	closeDelegate: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPPopupManagerBase::CloseDelegate()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupManagerBase::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			return value;
		} else {
			return null;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupManagerBase::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPPopupManagerBase', $.ig.Object.prototype.$type, [$.ig.CPSectionContainer.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPPopupManagerBase" />*/

/*<BeginType Name="Infragistics.CPLocalPopupManager" />*/

$.ig.util.defType('CPLocalPopupManager', 'CPPopupManagerBase', {
	__captureView: null,
	__imageView: null,
	__imageClickHandler: null,
	__preferedLocation: 0,
	__currentLocation: 0,
	__shadowView: null,
	__backgroundView: null,
	__dimissedBlock: null,
	__cw: 0,
	__ch: 0,
	__wasMenu: false,
	__prevW: 0,
	__prevH: 0,
	__supportsBackgroundView: false,
	__forceBackgroundView: false,
	__relView: null,
	__headerHeight: 0,
	__footerHeight: 0,
	__clippingView: null,
	__containerView: null,
	__absolutePoint: null,
	__secondaryAbsolutePoint: null,
	__isAbsolutePositioned: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return this.__supportsBackgroundView;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::HasShadowBackground()" />*/
	hasShadowBackground: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::HasShadowBackground()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return this.__preferedLocation != $.ig.CPPopupPosition.prototype.modal && this.__currentLocation != $.ig.CPPopupPosition.prototype.modal;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::AutoHidesAfterDuration()" />*/
	,
	_customBackgroundColor: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::CustomBackgroundColor()" />*/
	customBackgroundColor: function (value) {
		if (arguments.length === 1) {
			this._customBackgroundColor = value;
			return value;
		} else {
			return this._customBackgroundColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::CustomBackgroundColor()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::BackgroundViewColor()" />*/
	backgroundViewColor: function () {
		if (this.__preferedLocation == $.ig.CPPopupPosition.prototype.modal) {
			return $.ig.CPPopupManagerBase.prototype.backgroundViewColor.call(this);
		}
		if (this.customBackgroundColor() != -1) {
			return this.customBackgroundColor();
		}
		if (this.__forceBackgroundView || this.__captureView != null) {
			return $.ig.ThemeManager.prototype.theme().popupShadeColor().color();
		}
		return 0;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::BackgroundViewColor()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::SmallScreenBackgroundViewColor()" />*/
	smallScreenBackgroundViewColor: function () {
		if (this.__currentLocation == $.ig.CPPopupPosition.prototype.menu || this.__currentLocation == $.ig.CPPopupPosition.prototype.modal) {
			return $.ig.CPPopupManagerBase.prototype.smallScreenBackgroundViewColor.call(this);
		}
		if (this.customBackgroundColor() != -1) {
			return this.customBackgroundColor();
		}
		if (this.__forceBackgroundView || this.__captureView != null) {
			return this.backgroundViewColor();
		}
		return 0;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPLocalPopupManager::SmallScreenBackgroundViewColor()" />*/
	,
	init: function (initNumber, relativeView, captureView, forceBackgroundColor, dismiss, preferedLocation, supportsBackgroundView, title) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPLocalPopupManager.prototype.init1.call(this, 1, relativeView, captureView, forceBackgroundColor, dismiss, preferedLocation, supportsBackgroundView, title != null ? new $.ig.CPPopupHeader(0, title) : null, -1, -1, null);
	},
	__header: null,
	__footer: null,
	init1: function (initNumber, relativeView, captureView, forceBackgroundColor, dismiss, preferedLocation, supportsBackgroundView, header, x, y, footer) {
		var $self = this;
		this._customBackgroundColor = new $.ig.Number();
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.customBackgroundColor(-1);
		this.__relView = relativeView;
		this.__dimissedBlock = dismiss;
		this.__preferedLocation = preferedLocation;
		this.__supportsBackgroundView = supportsBackgroundView;
		this.__forceBackgroundView = forceBackgroundColor;
		this.__header = header;
		this.__footer = footer;
		this.__containerView = this.createContentContainer();
		this.__captureView = captureView;
		if (this.__captureView != null) {
			this.__captureView.addDirtyListener(function () {
				$self.forceCaptureImageUpdate();
			});
		}
		this.setCoordinates(x, y, -1, -1);
		this.customAnimationInDuration(-1);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::SetCoordinates(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setCoordinates: function (x, y, x2, y2) {
		this.setCoordinatesHelper(x, y, false);
		if (this.__isAbsolutePositioned) {
			this.setCoordinatesHelper(x2, y2, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::SetCoordinates(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::SetCoordinatesHelper(System.Int32, System.Int32, System.Boolean)" />*/
	setCoordinatesHelper: function (x, y, isSecondary) {
		if (x != -1 && y != -1) {
			if (x > this.__relView.currentWidth()) {
				x = this.__relView.currentWidth();
			} else if (x < 0) {
				x = 0;
			}
			if (y > this.__relView.currentHeight()) {
				y = this.__relView.currentHeight();
			} else if (y < 0) {
				y = 0;
			}
			if (isSecondary) {
				this.__secondaryAbsolutePoint = new $.ig.CPPoint(x, y);
			} else {
				this.__absolutePoint = new $.ig.CPPoint(x, y);
				this.__isAbsolutePositioned = true;
			}
		} else if (!isSecondary) {
			this.__absolutePoint = this.__secondaryAbsolutePoint = new $.ig.CPPoint(0, 0);
			this.__isAbsolutePositioned = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::SetCoordinatesHelper(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupContentContainerView Infragistics.CPLocalPopupManager::CreateContentContainer()" />*/
	createContentContainer: function () {
		return new $.ig.CPPopupContentContainerView();
	}
	/*<EndMethod Name="Infragistics.CPPopupContentContainerView Infragistics.CPLocalPopupManager::CreateContentContainer()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPLocalPopupManager::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		return $.ig.ThemeManager.prototype.theme().itemBackgroundColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPLocalPopupManager::GetBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPLocalPopupManager::OutlineColor()" />*/
	outlineColor: function () {
		return $.ig.ThemeManager.prototype.theme().dividerColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPLocalPopupManager::OutlineColor()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::OutlineThickness()" />*/
	outlineThickness: function () {
		return 1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::OutlineThickness()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::CornerRadius()" />*/
	cornerRadius: function () {
		if (this.__preferedLocation == $.ig.CPPopupPosition.prototype.modal) {
			return $.ig.ThemeManager.prototype.theme().modalCornerRadius();
		}
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::CornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::ApplyShadow(Infragistics.CPView)" />*/
	applyShadow: function (shadowView) {
		var pos = this.__preferedLocation;
		if (this.forcedPopupPosition() != $.ig.CPPopupPosition.prototype.none) {
			pos = this.forcedPopupPosition();
		}
		if (pos == $.ig.CPPopupPosition.prototype.menu) {
			this.__wasMenu = true;
		}
		this.applyShadowForPosition(pos, shadowView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::ApplyShadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::ApplyShadowForPosition(Infragistics.CPPopupPosition, Infragistics.CPView)" />*/
	applyShadowForPosition: function (pos, shadowView) {
		if (this.hasShadowBackground()) {
			if (pos == $.ig.CPPopupPosition.prototype.modal || pos == $.ig.CPPopupPosition.prototype.menu) {
				$.ig.ThemeManager.prototype.theme().applyModalDialogShadowToView(shadowView);
			} else {
				$.ig.ThemeManager.prototype.theme().applyPopoverShadow(shadowView);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::ApplyShadowForPosition(Infragistics.CPPopupPosition, Infragistics.CPView)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPLocalPopupManager::CaptureView()" />*/
	captureView: function () {
		return this.__captureView;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPLocalPopupManager::CaptureView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPLocalPopupManager::ShadowView()" />*/
	shadowView: function () {
		return this.__shadowView;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPLocalPopupManager::ShadowView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPView Infragistics.CPLocalPopupManager::ContainerView()" />*/
	containerView: function () {
		return this.__containerView;
	}
	/*<EndProperty Name="Infragistics.CPView Infragistics.CPLocalPopupManager::ContainerView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::ManuallyHandleCaptureView()" />*/
	manuallyHandleCaptureView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::ManuallyHandleCaptureView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::AddCaptureView(Infragistics.CPPopupContainerView)" />*/
	addCaptureView: function (popup) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::AddCaptureView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		var $self = this;
		var cornerRadius = this.cornerRadius();
		var bgColor = this.getBackgroundColor();
		if (this.__captureView != null && !this.manuallyHandleCaptureView()) {
			this.__imageView = new $.ig.CPImageView();
			popup.addSubview(this.__imageView);
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__imageView, "popupImageView");
			this.__imageClickHandler = new $.ig.CPInteractionView();
			this.__imageClickHandler.addClickHandler(function (x, y) {
				$self.captureViewClicked();
			});
			this.__imageClickHandler.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.createColor1(0, 0, 0, 0)));
			popup.addSubview(this.__imageClickHandler);
		}
		this.__shadowView = new $.ig.CPView();
		if (this.hasShadowBackground()) {
			this.__shadowView.setBackgroundColor(bgColor.$native());
			this.__shadowView.setCornerRadius(cornerRadius);
			this.applyShadow(this.__shadowView);
		}
		popup.addSubview(this.__shadowView);
		if (this.__captureView != null && this.manuallyHandleCaptureView()) {
			this.addCaptureView(popup);
		}
		this.__clippingView = new $.ig.CPView();
		this.__clippingView.setBackgroundColor(bgColor.$native());
		this.__clippingView.clipToBounds(true);
		this.__clippingView.setCornerRadius(this.containerCornerRadius());
		popup.addSubview(this.__clippingView);
		this.addContainerView(popup);
		this.initializeContainerView(this.__containerView);
		this.__backgroundView = new $.ig.CPPopupBackgroundView();
		this.__backgroundView._backgroundColor = bgColor.color();
		this.__backgroundView._borderWidth = this.outlineThickness();
		this.__backgroundView._borderColor = this.outlineColor().color();
		popup.addSubview(this.__backgroundView);
		this.__containerView.push(this.__header, this.__footer, this.resolveContentView(popup), null, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::AddContainerView(Infragistics.CPPopupContainerView)" />*/
	addContainerView: function (popup) {
		this.__clippingView.addSubview(this.__containerView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::AddContainerView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::ContainerCornerRadius()" />*/
	containerCornerRadius: function () {
		return this.cornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::ContainerCornerRadius()" />*/
	,
	__managers: null,
	/*<BeginProperty Name="Infragistics.CPLocalPopupManager Infragistics.CPLocalPopupManager::CurrentManager()" />*/
	currentManager: function () {
		if (this.__managers != null && this.__managers.length > 0) {
			return this.__managers[this.__managers.length - 1];
		}
		return this;
	}
	/*<EndProperty Name="Infragistics.CPLocalPopupManager Infragistics.CPLocalPopupManager::CurrentManager()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::Push(Infragistics.CPLocalPopupManager, System.String)" />*/
	push: function (manager, title) {
		var $self = this;
		if (this.__managers == null) {
			this.__managers = new $.ig.Array();
		}
		this.__managers.add(manager);
		manager.popupId(this.popupId());
		this.__containerView.push(null, manager.__footer, manager.resolveContentView(this.__popup), title, function (x, y) {
			$self.pop();
		});
		var prevW = this.__cw;
		var prevH = this.__ch;
		var needsManualUpdate = this.checkUpdateSizes();
		this.ensureContainerSizesAreUpdated(this.__cw, this.__ch);
		var duration = $.ig.ThemeManager.prototype.theme().animationDuration();
		this.__animationFinished = false;
		this.__popup.animate(duration, function () {
			$self.__containerView.animate(duration, function () {
				$self.animatePushedManager(needsManualUpdate);
			}, function (finished) {
				$self.finishedShowingPushedManager(manager);
			});
		}, function (f) {
			$self.finishedShowingPushedManager(manager);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::Push(Infragistics.CPLocalPopupManager, System.String)" />*/
	,
	__animationFinished: false,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::FinishedShowingPushedManager(Infragistics.CPPopupManagerBase)" />*/
	finishedShowingPushedManager: function (manager) {
		if (this.__animationFinished) {
			manager.finishedShowing();
		}
		this.__animationFinished = true;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::FinishedShowingPushedManager(Infragistics.CPPopupManagerBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::AnimatePushedManager(System.Boolean)" />*/
	animatePushedManager: function (needsManualUpdate) {
		this.triggerLayout(needsManualUpdate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::AnimatePushedManager(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::Pop()" />*/
	pop: function () {
		var $self = this;
		if (this.__managers != null && this.__managers.length > 0) {
			var manager = this.__managers[this.__managers.length - 1];
			this.__managers.removeAt(this.__managers.length - 1);
			this.__containerView.prepareToPop(true);
			var duration = $.ig.ThemeManager.prototype.theme().animationDuration();
			manager.hide();
			manager._isShowing = false;
			manager.closing();
			this.__popup.animate(duration, function () {
				$self.__containerView.animate(duration, function () {
					$self.triggerLayout($self.checkUpdateSizes());
				}, function (x) {
					$self.actualPop();
				});
			}, null);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::Pop()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPLocalPopupManager::CheckUpdateSizes()" />*/
	checkUpdateSizes: function () {
		var prevW = this.__cw;
		var prevH = this.__ch;
		this.updateSizes();
		return prevW == this.__cw && prevH == this.__ch;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPLocalPopupManager::CheckUpdateSizes()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::ActualPop()" />*/
	actualPop: function () {
		this.__containerView.pop();
		this.triggerLayout(this.checkUpdateSizes());
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::ActualPop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::TriggerLayout(System.Boolean)" />*/
	triggerLayout: function (manuallyUpdateContainer) {
		if (manuallyUpdateContainer) {
			this.__containerView.triggerLayout();
		}
		this.layout(this.__popup, this.__root, this.__previousWidth, this.__previousHeight, false, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::TriggerLayout(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::CaptureViewClicked()" />*/
	captureViewClicked: function () {
		this.closePopup(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::CaptureViewClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::UpdateSizes()" />*/
	updateSizes: function () {
		var manager = this.currentManager();
		manager.calculateContentSize();
		this.__cw = manager.getContentWidth();
		this.__ch = manager.getContentHeight();
		if (this.__containerView.hasHeader()) {
			var header = this.__containerView.currentHeader();
			header.calculateSizeToFit();
			this.__cw = Math.max(this.__cw, header.getCalculatedWidth());
			this.__headerHeight = (header.getCalculatedHeight());
			this.__ch += this.__headerHeight;
		}
		if (this.__containerView.hasFooter()) {
			var footer = this.__containerView.currentFooter();
			footer.calculateSizeToFit();
			this.__cw = Math.max(this.__cw, footer.getCalculatedWidth());
			this.__footerHeight = (footer.getCalculatedHeight());
			this.__ch += this.__footerHeight;
		}
		this.__ch += this.__containerView.navHeight();
		if (manager.fitPopupToContentSize()) {
			this.__ch = manager.getContentHeight();
			this.__cw = manager.getContentWidth();
		}
		this.__cw = Math.max(manager.minSize(), this.__cw);
		if (!this.canBeFullScreen()) {
			var topInset = $.ig.NativeUIUtility.prototype.utility().screenTopInset();
			var totalInset = topInset;
			if (this.__root != null) {
				var padding = 0;
				if (!this.disableEdgePadding()) {
					if ($.ig.ThemeManager.prototype.theme().isSmallScreen()) {
						padding = $.ig.ThemeManager.prototype.theme().padding40();
					} else {
						padding = $.ig.ThemeManager.prototype.theme().padding10();
					}
				}
				var limit = (this.__root.currentHeight() - totalInset) - padding;
				if (this.__ch > limit) {
					this.__ch = limit;
				}
				var percent = (this.disableEdgePadding()) ? 1 : 0.95;
				limit = $.ig.truncate((this.__root.currentWidth() * percent));
				if (this.__cw > limit) {
					this.__cw = limit;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::UpdateSizes()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::FitPopupToContentSize()" />*/
	fitPopupToContentSize: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::FitPopupToContentSize()" />*/
	,
	_disableEdgePadding: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::DisableEdgePadding()" />*/
	disableEdgePadding: function (value) {
		if (arguments.length === 1) {
			this._disableEdgePadding = value;
			return value;
		} else {
			return this._disableEdgePadding;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::DisableEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::MinSize()" />*/
	minSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(180);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::MinSize()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPLocalPopupManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	resolveContentView: function (popup) {
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPLocalPopupManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::CalculateContentSize()" />*/
	calculateContentSize: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::CalculateContentSize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLocalPopupManager::GetContentWidth()" />*/
	getContentWidth: function () {
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLocalPopupManager::GetContentWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLocalPopupManager::GetContentHeight()" />*/
	getContentHeight: function () {
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLocalPopupManager::GetContentHeight()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::FallbackPosition()" />*/
	fallbackPosition: function () {
		return $.ig.CPPopupPosition.prototype.menu;
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::FallbackPosition()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::ForcedPopupPosition()" />*/
	forcedPopupPosition: function () {
		return $.ig.CPPopupPosition.prototype.none;
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::ForcedPopupPosition()" />*/
	,
	_hideArrow: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::HideArrow()" />*/
	hideArrow: function (value) {
		if (arguments.length === 1) {
			this._hideArrow = value;
			return value;
		} else {
			return this._hideArrow;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::HideArrow()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::IsDynamicSizing()" />*/
	isDynamicSizing: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::IsDynamicSizing()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLocalPopupManager::CanBeFullScreen()" />*/
	canBeFullScreen: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLocalPopupManager::CanBeFullScreen()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::ArrowSize()" />*/
	arrowSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(20);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::ArrowSize()" />*/
	,
	_customAnimationInDuration: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPLocalPopupManager::CustomAnimationInDuration()" />*/
	customAnimationInDuration: function (value) {
		if (arguments.length === 1) {
			this._customAnimationInDuration = value;
			return value;
		} else {
			return this._customAnimationInDuration;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.CPLocalPopupManager::CustomAnimationInDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPLocalPopupManager::OverrideAnimationInDuration()" />*/
	overrideAnimationInDuration: function () {
		if (this.customAnimationInDuration() != -1) {
			return this.customAnimationInDuration();
		}
		if (this.__preferedLocation == $.ig.CPPopupPosition.prototype.menu || this.forcedPopupPosition() == $.ig.CPPopupPosition.prototype.menu) {
			return $.ig.ThemeManager.prototype.theme().visualizeAnimationDuration();
		}
		return $.ig.CPPopupManagerBase.prototype.overrideAnimationInDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPLocalPopupManager::OverrideAnimationInDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPLocalPopupManager::OverrideAnimationOutDuration()" />*/
	overrideAnimationOutDuration: function () {
		if (this.__preferedLocation == $.ig.CPPopupPosition.prototype.menu || this.forcedPopupPosition() == $.ig.CPPopupPosition.prototype.menu) {
			return $.ig.ThemeManager.prototype.theme().visualizeAnimationDuration();
		}
		return $.ig.CPPopupManagerBase.prototype.overrideAnimationOutDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPLocalPopupManager::OverrideAnimationOutDuration()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::AddjustedOffsetForAnimation()" />*/
	addjustedOffsetForAnimation: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(20);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::AddjustedOffsetForAnimation()" />*/
	,
	_belowLocationOffsetAdjustment: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPLocalPopupManager::BelowLocationOffsetAdjustment()" />*/
	belowLocationOffsetAdjustment: function (value) {
		if (arguments.length === 1) {
			this._belowLocationOffsetAdjustment = value;
			return value;
		} else {
			return this._belowLocationOffsetAdjustment;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPLocalPopupManager::BelowLocationOffsetAdjustment()" />*/
	,
	__acw: 0,
	__ach: 0,
	__prevPoint: null,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::Layout(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	layout: function (popup, root, w, h, hiddenLocation, isSecondaryPass) {
		this.__backgroundView._backgroundColor = this.getBackgroundColor().color();
		var fullH = h;
		var topInset = $.ig.NativeUIUtility.prototype.utility().screenTopInset();
		var totalInset = topInset;
		h -= totalInset;
		var rp = this.__prevPoint;
		var prevPointIsNull = this.__prevPoint == null;
		var popupLocation = this.__preferedLocation;
		if (isSecondaryPass) {
			var secondaryLocation = this.preferredSecondaryLocation();
			if (secondaryLocation != $.ig.CPPopupPosition.prototype.none) {
				popupLocation = secondaryLocation;
			} else {
				switch (this.__preferedLocation) {
					case $.ig.CPPopupPosition.prototype.above:
						popupLocation = $.ig.CPPopupPosition.prototype.below;
						break;
					case $.ig.CPPopupPosition.prototype.below:
						popupLocation = $.ig.CPPopupPosition.prototype.above;
						break;
					case $.ig.CPPopupPosition.prototype.left:
						popupLocation = $.ig.CPPopupPosition.prototype.right;
						break;
					case $.ig.CPPopupPosition.prototype.right:
						popupLocation = $.ig.CPPopupPosition.prototype.left;
						break;
				}
			}
		}
		if (this.__relView.getParent() != null && !this.__relView.isHidden()) {
			var p = isSecondaryPass && this.preferredSecondaryLocation() != $.ig.CPPopupPosition.prototype.none ? this.__relView.translatePoint(this.__secondaryAbsolutePoint, root) : this.__relView.translatePoint(this.__absolutePoint, root);
			if (p._x != 0 || p._y != 0 || prevPointIsNull) {
				rp = p;
			}
		} else if (prevPointIsNull) {
			rp = this.__absolutePoint;
		}
		this.__prevPoint = rp;
		var rw = this.__isAbsolutePositioned ? 1 : this.__relView.currentWidth();
		var rh = this.__isAbsolutePositioned ? 1 : this.__relView.currentHeight();
		var contentWidth = this.__cw;
		var contentHeight = this.__ch;
		var finalContentWidth = contentWidth;
		var finalContentHeight = contentHeight;
		var adjustedOffset = 0;
		if (hiddenLocation) {
			adjustedOffset = this.addjustedOffsetForAnimation();
			contentWidth = $.ig.truncate((contentWidth * 0.75));
			contentHeight = $.ig.truncate((contentHeight * 0.75));
		}
		var opacity = (hiddenLocation ? 0 : 1);
		var arrowWidth = this.arrowSize();
		var arrowHeight = $.ig.intDivide(arrowWidth, 2);
		var totalPossibleHeight = arrowHeight + finalContentHeight;
		var totalPossibleWidth = arrowHeight + finalContentWidth;
		var padding = $.ig.ThemeManager.prototype.theme().isSmallArea(w) ? $.ig.ThemeManager.prototype.theme().padding5() : $.ig.ThemeManager.prototype.theme().padding10();
		if (this.disableEdgePadding()) {
			padding = 0;
		}
		var diff = w - (finalContentWidth + padding * 2);
		if (diff < 0) {
			finalContentWidth += diff;
		}
		this.__acw = finalContentWidth;
		this.__ach = finalContentHeight;
		var x = 0, y = topInset, menuH = 0, menuW = 0;
		var arrowLocation = 0;
		var canBeBelow = rp._y + rh + totalPossibleHeight < h;
		var canBeAbove = rp._y - totalPossibleHeight >= topInset;
		var canBeLeft = rp._x - totalPossibleWidth >= 0;
		var canBeRight = rp._x + rw + totalPossibleWidth < w;
		if (this.forcedPopupPosition() != $.ig.CPPopupPosition.prototype.none) {
			popupLocation = this.forcedPopupPosition();
		} else {
			if (!isSecondaryPass) {
				if ((popupLocation == $.ig.CPPopupPosition.prototype.left && !canBeLeft) || (popupLocation == $.ig.CPPopupPosition.prototype.right && !canBeRight) || (popupLocation == $.ig.CPPopupPosition.prototype.above && !canBeAbove) || (popupLocation == $.ig.CPPopupPosition.prototype.below && !canBeBelow)) {
					this.layout(popup, root, w, h, hiddenLocation, true);
					return;
				}
			}
			if ((popupLocation == $.ig.CPPopupPosition.prototype.above && !canBeAbove) || (popupLocation == $.ig.CPPopupPosition.prototype.below && !canBeBelow) || (popupLocation == $.ig.CPPopupPosition.prototype.left && !canBeLeft) || (popupLocation == $.ig.CPPopupPosition.prototype.right && !canBeRight)) {
				popupLocation = $.ig.CPPopupPosition.prototype.auto;
			}
			if (popupLocation == $.ig.CPPopupPosition.prototype.auto) {
				if (canBeBelow) {
					popupLocation = $.ig.CPPopupPosition.prototype.below;
				} else if (canBeAbove) {
					popupLocation = $.ig.CPPopupPosition.prototype.above;
				} else if (canBeLeft) {
					popupLocation = $.ig.CPPopupPosition.prototype.left;
				} else if (canBeRight) {
					popupLocation = $.ig.CPPopupPosition.prototype.right;
				} else {
					popupLocation = this.fallbackPosition();
				}
			}
		}
		this.__currentLocation = popupLocation;
		if (this.__containerView.hasHeader()) {
			if (popupLocation == $.ig.CPPopupPosition.prototype.below) {
				this.__backgroundView._backgroundColor = this.getBackgroundColor().color();
			}
		}
		if (this.__containerView.hasFooter()) {
			if (popupLocation == $.ig.CPPopupPosition.prototype.above) {
				this.__backgroundView._backgroundColor = this.getBackgroundColor().color();
			}
		}
		if (this.__wasMenu && popupLocation != $.ig.CPPopupPosition.prototype.menu) {
			this.__clippingView.setCornerRadius(this.containerCornerRadius());
			this.__shadowView.setCornerRadius(this.cornerRadius());
			this.applyShadowForPosition(popupLocation, this.__shadowView);
			this.__wasMenu = false;
		}
		if (popupLocation == $.ig.CPPopupPosition.prototype.below || popupLocation == $.ig.CPPopupPosition.prototype.above) {
			if (popupLocation == $.ig.CPPopupPosition.prototype.below) {
				y = $.ig.truncate((rp._y + rh)) + this.belowLocationOffsetAdjustment();
			} else {
				y = $.ig.truncate((rp._y - totalPossibleHeight));
			}
			var itemMiddle = $.ig.truncate((rp._x + $.ig.intDivide(rw, 2)));
			x = itemMiddle - $.ig.intDivide(finalContentWidth, 2);
			menuH = totalPossibleHeight;
			menuW = finalContentWidth;
			var arrowX = ($.ig.intDivide(finalContentWidth, 2));
			if (x + finalContentWidth > w - padding) {
				var originalX = x;
				x = w - finalContentWidth - padding;
				arrowX += (originalX - x);
			}
			if (x < padding) {
				var originalX1 = x;
				x = padding;
				arrowX += (originalX1 - x);
			}
			arrowLocation = arrowX;
			if (popupLocation == $.ig.CPPopupPosition.prototype.below) {
				var total = $.ig.truncate((rp._y + finalContentHeight + rh + arrowHeight + this.belowLocationOffsetAdjustment()));
				if (total > fullH) {
					finalContentHeight -= (total - fullH);
				}
			}
			if (hiddenLocation) {
				if (popupLocation == $.ig.CPPopupPosition.prototype.below) {
					y = $.ig.truncate((rp._y + rh + arrowHeight + this.belowLocationOffsetAdjustment())) - adjustedOffset;
				} else {
					y = $.ig.truncate((rp._y - finalContentHeight - arrowHeight)) + adjustedOffset;
				}
			}
			if (this.hideArrow()) {
				arrowHeight = 0;
				popupLocation = $.ig.CPPopupPosition.prototype.none;
			}
			var actualArrowHeight = arrowHeight;
			var listTop = (popupLocation == $.ig.CPPopupPosition.prototype.below) ? (y + actualArrowHeight) : y;
			this.measureContainer(popup, hiddenLocation, x, listTop, finalContentWidth, finalContentHeight, opacity);
			popup.measureView1(this.__shadowView, x, listTop, finalContentWidth, finalContentHeight, opacity);
			this.__backgroundView.isHidden(false);
			this.__backgroundView._popupLocation = popupLocation;
			this.__backgroundView._arrowPosition = (arrowLocation / finalContentWidth);
			this.__backgroundView._arrowSize = (arrowWidth / finalContentWidth);
			popup.measureView1(this.__backgroundView, x, (popupLocation == $.ig.CPPopupPosition.prototype.below) ? y : y + finalContentHeight, menuW, actualArrowHeight, opacity);
			this.__backgroundView.render1(false);
		} else if (popupLocation == $.ig.CPPopupPosition.prototype.left || popupLocation == $.ig.CPPopupPosition.prototype.right) {
			if (popupLocation == $.ig.CPPopupPosition.prototype.right) {
				x = $.ig.truncate((rp._x + rw));
			} else {
				x = $.ig.truncate((rp._x - totalPossibleWidth));
			}
			var itemMiddle1 = $.ig.truncate((rp._y + $.ig.intDivide(rh, 2)));
			y = itemMiddle1 - $.ig.intDivide(finalContentHeight, 2);
			var arrowY = ($.ig.intDivide(finalContentHeight, 2));
			if (y + finalContentHeight > h - padding) {
				var originalY = y;
				y = Math.max(h - finalContentHeight - padding, padding + topInset);
				arrowY += (originalY - y);
			} else if (y < padding) {
				var originalY1 = y;
				y = padding + topInset;
				arrowY += (originalY1 - y);
			}
			arrowLocation = arrowY;
			menuH = finalContentHeight;
			menuW = totalPossibleWidth;
			if (hiddenLocation) {
				if (popupLocation == $.ig.CPPopupPosition.prototype.right) {
					x = $.ig.truncate((rp._x + rw + arrowHeight)) - adjustedOffset;
				} else {
					x = $.ig.truncate((rp._x - finalContentWidth - arrowHeight)) + adjustedOffset;
				}
			}
			var actualArrowWidth = arrowHeight;
			var listLeft = (popupLocation == $.ig.CPPopupPosition.prototype.right) ? (x + actualArrowWidth) : x;
			this.measureContainer(popup, hiddenLocation, listLeft, y, finalContentWidth, finalContentHeight, opacity);
			popup.measureView1(this.__shadowView, listLeft, y, finalContentWidth, finalContentHeight, opacity);
			this.__backgroundView.isHidden(false);
			this.__backgroundView._popupLocation = popupLocation;
			this.__backgroundView._arrowPosition = (arrowLocation / finalContentHeight);
			this.__backgroundView._arrowSize = (arrowWidth / finalContentHeight);
			var backgroundLeft = (popupLocation == $.ig.CPPopupPosition.prototype.right) ? x : x + finalContentWidth;
			popup.measureView1(this.__backgroundView, backgroundLeft, y, actualArrowWidth, menuH, opacity);
			this.__backgroundView.render1(false);
		} else if (popupLocation == $.ig.CPPopupPosition.prototype.menu) {
			this.__backgroundView.isHidden(true);
			this.__backgroundView._popupLocation = popupLocation;
			this.__backgroundView.render1(false);
			var limit = Math.max(topInset, $.ig.ThemeManager.prototype.theme().padding15());
			var menuY = h + topInset - contentHeight;
			if (menuY < limit) {
				var diffY = limit - menuY;
				contentHeight -= diffY;
				menuY = h + topInset - contentHeight;
			}
			if (hiddenLocation) {
				menuY = fullH;
			}
			var cr = $.ig.ThemeManager.prototype.theme().modalCornerRadius();
			if (!this.__wasMenu || this.__clippingView.getCornerRadius() != cr) {
				this.__clippingView.setCornerRadius(cr);
				this.__shadowView.setCornerRadius(cr);
				this.applyShadowForPosition(popupLocation, this.__shadowView);
				this.__wasMenu = true;
			}
			this.measureContainer(popup, hiddenLocation, 0, menuY, w, contentHeight, 1);
			popup.measureView1(this.__shadowView, 0, menuY, w, contentHeight, 1);
		} else if (popupLocation == $.ig.CPPopupPosition.prototype.toast) {
			this.__backgroundView._popupLocation = popupLocation;
			this.__backgroundView.render1(false);
			var offset = $.ig.ThemeManager.prototype.theme().padding20();
			var top = hiddenLocation ? h : h - finalContentHeight - offset;
			var left = offset;
			this.measureContainer(popup, hiddenLocation, left, top, finalContentWidth, finalContentHeight, opacity);
			popup.measureView1(this.__shadowView, left, top, finalContentWidth, finalContentHeight, opacity);
		} else if (popupLocation == $.ig.CPPopupPosition.prototype.modal) {
			this.__backgroundView._popupLocation = popupLocation;
			this.__backgroundView.render1(false);
			contentHeight = Math.min(fullH, finalContentHeight);
			contentWidth = Math.min(w, finalContentWidth);
			var top1 = ($.ig.intDivide(fullH, 2) - $.ig.intDivide(finalContentHeight, 2)) + adjustedOffset;
			var left1 = $.ig.intDivide(w, 2) - $.ig.intDivide(finalContentWidth, 2);
			if (contentHeight == fullH && contentWidth == w) {
				this.__clippingView.setCornerRadius(0);
			} else {
				this.__clippingView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
			}
			this.measureContainer(popup, hiddenLocation, left1, top1, finalContentWidth, finalContentHeight, opacity);
			popup.measureView1(this.__shadowView, left1, top1, finalContentWidth, finalContentHeight, opacity);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::Layout(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32, System.Boolean, System.Boolean)" />*/
	,
	__popup: null,
	__root: null,
	__previousWidth: 0,
	__previousHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::InvalidateBounds()" />*/
	invalidateBounds: function () {
		if (this.__popup != null && this.__root != null) {
			this.updateSizes();
			this.layoutPopup(this.__popup, this.__root, this.__previousWidth, this.__previousHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::InvalidateBounds()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::AnimateInvalidateBounds()" />*/
	animateInvalidateBounds: function () {
		var $self = this;
		this.__popup.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
			$self.__containerView.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.invalidateBounds();
			}, null);
		}, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::AnimateInvalidateBounds()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::MeasureContainer(Infragistics.CPPopupContainerView, System.Boolean, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureContainer: function (popup, hiddenLocation, x, y, w, h, opacity) {
		if (!hiddenLocation) {
			this.__clippingView.measureView1(this.__containerView, x, y, 1, 1, opacity);
		}
		var offset = 0;
		if (y + h >= this._containerHeight) {
			offset = $.ig.truncate(this.__clippingView.getCornerRadius());
		}
		this.ensureContainerSizesAreUpdated(w, h);
		popup.measureView1(this.__clippingView, x, y, w, h + offset, opacity);
		this.__clippingView.measureView1(this.__containerView, 0, 0, w, h, opacity);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::MeasureContainer(Infragistics.CPPopupContainerView, System.Boolean, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::EnsureContainerSizesAreUpdated(System.Int32, System.Int32)" />*/
	ensureContainerSizesAreUpdated: function (w, h) {
		this.__containerView.updateCurrentSizes(w, h, this.__headerHeight, this.__footerHeight);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::EnsureContainerSizesAreUpdated(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::MovePopup(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPPopupPosition)" />*/
	movePopup: function (x, y, x2, y2, position) {
		var $self = this;
		this.__preferedLocation = position;
		this.setCoordinates(x, y, x2, y2);
		if (this.__root == null) {
			return;
		}
		if (this.supportsAnimating()) {
			this.__popup.animate($.ig.ThemeManager.prototype.theme().animationDuration(), function () {
				$self.layoutPopup($self.__popup, $self.__root, $self.__previousWidth, $self.__previousHeight);
			}, function (c) {
				$self.layoutPopup($self.__popup, $self.__root, $self.__previousWidth, $self.__previousHeight);
			});
		} else {
			this.layoutPopup(this.__popup, this.__root, this.__previousWidth, this.__previousHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::MovePopup(System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPPopupPosition)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		this.__popup = popup;
		this.__root = root;
		this.ensureSizes(w, h);
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.layout(popup, root, w, h, false, false);
		this.updateCapture(popup);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	__hasFirstMeasureOccurred: false,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::EnsureSizes(System.Int32, System.Int32)" />*/
	ensureSizes: function (w, h) {
		if (w != this.__previousWidth || h != this.__previousHeight) {
			this.__previousWidth = w;
			this.__previousHeight = h;
			if (this.isDynamicSizing() || !this.__hasFirstMeasureOccurred) {
				this.__hasFirstMeasureOccurred = true;
				this.updateSizes();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::EnsureSizes(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		this.__popup = popup;
		this.__root = root;
		this.ensureSizes(w, h);
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		this.layout(popup, popup.getParent(), w, h, true, false);
		this.updateCapture(popup);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::ForceCaptureImageUpdate()" />*/
	forceCaptureImageUpdate: function () {
		if (this.__captureView != null && this.__imageView != null) {
			this.__imageView.setImage(this.__captureView.captureImage());
			if (this.__popup != null) {
				this.updateCapture(this.__popup);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::ForceCaptureImageUpdate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::UpdateCapture(Infragistics.CPPopupContainerView)" />*/
	updateCapture: function (popup) {
		if (this.__captureView != null) {
			if (this.manuallyHandleCaptureView()) {
				this.layoutCaptureView(popup);
			} else if (this.__imageView != null && this.__captureView.getParent() != null) {
				var w = this.__captureView.currentWidth();
				var h = this.__captureView.currentHeight();
				if ((this.__prevW != w || this.__prevH != h) && w > 0 && h > 0) {
					this.__prevW = w;
					this.__prevH = h;
					this.__imageView.setImage(this.__captureView.captureImage());
				}
				var rp = this.__captureView.translatePoint(new $.ig.CPPoint(0, 0), popup);
				popup.measureView1(this.__imageView, $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h, 1);
				popup.measureView1(this.__imageClickHandler, $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::UpdateCapture(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::LayoutCaptureView(Infragistics.CPPopupContainerView)" />*/
	layoutCaptureView: function (popup) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::LayoutCaptureView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::Hide()" />*/
	hide: function () {
		if (this.__imageView != null) {
			this.__imageView.isHidden(true);
		}
		if (this.__dimissedBlock != null) {
			this.__dimissedBlock();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPLocalPopupManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPPopupManagerBase.prototype.getSupportedKeyCommands.call(this);
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.close(), function (k) {
			$self.closePopup(true);
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPLocalPopupManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPPopupManagerBase.prototype.cleanUp.call(this);
		if (this.__captureView != null) {
			this.__captureView.removeDirtyListener();
		}
		if (this.__managers != null && this.__managers.length > 0) {
			for (var i = 0; i < this.__managers.length; i++) {
				var manager = this.__managers[i];
				manager.cleanUp();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::CleanUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLocalPopupManager::InitializeContainerView(Infragistics.CPPopupContentContainerView)" />*/
	initializeContainerView: function (container) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLocalPopupManager::InitializeContainerView(Infragistics.CPPopupContentContainerView)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::PreferredSecondaryLocation()" />*/
	preferredSecondaryLocation: function () {
		return $.ig.CPPopupPosition.prototype.none;
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPLocalPopupManager::PreferredSecondaryLocation()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPLocalPopupManager::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			if (this.__containerView != null) {
				this.__containerView.accessibilityName(value);
			}
			return value;
		} else {
			if (this.__containerView != null) {
				return this.__containerView.accessibilityName();
			}
			return "";
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPLocalPopupManager::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPLocalPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLocalPopupManager" />*/

/*<BeginType Name="Infragistics.CPContentPopupManager" />*/

$.ig.util.defType('CPContentPopupManager', 'CPLocalPopupManager', {
	__contentView: null,
	__contentWidth: 0,
	__contentHeight: 0,
	__acceptsInput: false,
	__hasBackground: false,
	__fitPopupToContentSize: false,
	_disableKeyboardCommands: false,
	init: function (initNumber, relativeView, captureView, contentView, contentWidth, contentHeight, dismiss, preferedLocation, supportsBackgroundView, title, acceptsInput) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPLocalPopupManager.prototype.init.call(this, 0, relativeView, captureView, false, dismiss, preferedLocation, supportsBackgroundView, title);
		this.__acceptsInput = acceptsInput;
		this.__contentView = contentView;
		this.__contentWidth = contentWidth;
		this.__contentHeight = contentHeight;
		this.__hasBackground = true;
	},
	init1: function (initNumber, relativeView, captureView, contentView, contentWidth, contentHeight, fitContentToSize, dismiss, preferedLocation, supportsBackgroundView, title, acceptsInput, hasBackground) {
		$.ig.CPLocalPopupManager.prototype.init.call(this, 0, relativeView, captureView, false, dismiss, preferedLocation, supportsBackgroundView, title);
		this.__acceptsInput = acceptsInput;
		this.__contentView = contentView;
		this.__contentWidth = contentWidth;
		this.__contentHeight = contentHeight;
		this.__hasBackground = hasBackground;
		this.__fitPopupToContentSize = fitContentToSize;
	},
	init2: function (initNumber, relativeView, captureView, contentView, contentWidth, contentHeight, dismiss, preferedLocation, header, x, y, footer, supportsBackgroundView, title, acceptsInput) {
		$.ig.CPLocalPopupManager.prototype.init1.call(this, 1, relativeView, captureView, false, dismiss, preferedLocation, supportsBackgroundView, header, x, y, footer);
		this.__acceptsInput = acceptsInput;
		this.__contentView = contentView;
		this.__contentWidth = contentWidth;
		this.__contentHeight = contentHeight;
		this.__hasBackground = true;
	},
	_dontUnloadContentView: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::DontUnloadContentView()" />*/
	dontUnloadContentView: function (value) {
		if (arguments.length === 1) {
			this._dontUnloadContentView = value;
			return value;
		} else {
			return this._dontUnloadContentView;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::DontUnloadContentView()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPContentPopupManager::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		if (this.__hasBackground) {
			return $.ig.CPLocalPopupManager.prototype.getBackgroundColor.call(this);
		}
		return $.ig.CPTheme.prototype.clearColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPContentPopupManager::GetBackgroundColor()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::HasShadowBackground()" />*/
	hasShadowBackground: function () {
		return this.__hasBackground;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::HasShadowBackground()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return this.__acceptsInput;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPContentPopupManager::ContentView()" />*/
	contentView: function () {
		return this.__contentView;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPContentPopupManager::ContentView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::FitPopupToContentSize()" />*/
	fitPopupToContentSize: function () {
		return this.__fitPopupToContentSize;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::FitPopupToContentSize()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPContentPopupManager::ViewDelegate()" />*/
	viewDelegate: function () {
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, this.__contentView) !== null) {
			return this.__contentView;
		}
		return $.ig.CPLocalPopupManager.prototype.viewDelegate.call(this);
	}
	/*<EndProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPContentPopupManager::ViewDelegate()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPContentPopupManager::CloseDelegate()" />*/
	closeDelegate: function () {
		if ($.ig.util.cast($.ig.CPPopupCloseDelegate.prototype.$type, this.__contentView) !== null) {
			return this.__contentView;
		}
		return $.ig.CPLocalPopupManager.prototype.closeDelegate.call(this);
	}
	/*<EndProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPContentPopupManager::CloseDelegate()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPContentPopupManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	resolveContentView: function (popup) {
		return this.__contentView;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPContentPopupManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentPopupManager::CalculateContentSize()" />*/
	calculateContentSize: function () {
		$.ig.CPLocalPopupManager.prototype.calculateContentSize.call(this);
		if ($.ig.util.cast($.ig.CPContentPopupViewDelegate.prototype.$type, this.__contentView) !== null) {
			(this.__contentView).contentPopupSizeProvided(this._containerWidth, this._containerHeight);
		} else if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			(this.__contentView).contentPopupContainerSizeChanged(this._containerWidth, this._containerHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentPopupManager::CalculateContentSize()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::IsDynamicSizing()" />*/
	isDynamicSizing: function () {
		return ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::IsDynamicSizing()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPContentPopupManager::CanBeFullScreen()" />*/
	canBeFullScreen: function () {
		if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			return (this.__contentView).canContentPopupBeFullScreen();
		}
		return $.ig.CPLocalPopupManager.prototype.canBeFullScreen.call(this);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPContentPopupManager::CanBeFullScreen()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPContentPopupManager::GetContentWidth()" />*/
	getContentWidth: function () {
		if (this.__contentWidth == -1) {
			return this.__contentView.getCalculatedWidth();
		}
		return this.__contentWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPContentPopupManager::GetContentWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPContentPopupManager::GetContentHeight()" />*/
	getContentHeight: function () {
		if (this.__contentHeight == -1) {
			return this.__contentView.getCalculatedHeight();
		}
		return this.__contentHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPContentPopupManager::GetContentHeight()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentPopupManager::FallbackPosition()" />*/
	fallbackPosition: function () {
		if ($.ig.util.cast($.ig.CPContentPopupViewDelegate.prototype.$type, this.__contentView) !== null) {
			return (this.__contentView).resolvefallbackPopupPosition();
		}
		return $.ig.CPLocalPopupManager.prototype.fallbackPosition.call(this);
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentPopupManager::FallbackPosition()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentPopupManager::ForcedPopupPosition()" />*/
	forcedPopupPosition: function () {
		if ($.ig.util.cast($.ig.CPContentPopupDynamicSizingViewDelegate.prototype.$type, this.__contentView) !== null) {
			return (this.__contentView).forcedPopupPosition();
		}
		return $.ig.CPLocalPopupManager.prototype.forcedPopupPosition.call(this);
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPContentPopupManager::ForcedPopupPosition()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentPopupManager::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		$.ig.CPLocalPopupManager.prototype.focusManagerRegistered.call(this);
		if ($.ig.util.cast($.ig.FocusableElementDelegate.prototype.$type, this.__contentView) !== null) {
			this._focusElements.add(new $.ig.FocusableElement(new $.ig.CPWeakObject(this.__contentView)));
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().registerFocusableElements(this._focusElements, this.popupSectionId());
			$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this.__contentView, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentPopupManager::FocusManagerRegistered()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPContentPopupManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		if (!this._disableKeyboardCommands) {
			return $.ig.CPLocalPopupManager.prototype.getSupportedKeyCommands.call(this);
		} else {
			return new $.ig.Array();
		}
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPContentPopupManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPContentPopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPLocalPopupManager.prototype.cleanUp.call(this);
		if (this.__contentView != null && !this.dontUnloadContentView()) {
			if ($.ig.util.cast($.ig.CPViewBase.prototype.$type, this.__contentView) !== null) {
				this.__contentView.unload();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPContentPopupManager::CleanUp()" />*/
	,
	$type: new $.ig.Type('CPContentPopupManager', $.ig.CPLocalPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPContentPopupManager" />*/

/*<BeginType Name="Infragistics.CPBubblePopupManager" />*/

$.ig.util.defType('CPBubblePopupManager', 'CPContentPopupManager', {
	__captureViewClickAction: null,
	__closeButtonPressedBlock: null,
	__leftButtonPressedBlock: null,
	__rightButtonPressedBlock: null,
	init: function (initNumber, relativeView, captureView, captureViewClickAction, title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, captureView, new $.ig.CPBubblePopupView(title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth), -1, -1, null, $.ig.CPPopupPosition.prototype.below, true, null, true);
		this.__captureViewClickAction = captureViewClickAction;
		this.__closeButtonPressedBlock = closeButtonPressedBlock;
		this.__leftButtonPressedBlock = leftButtonPressedBlock;
		this.__rightButtonPressedBlock = rightButtonPressedBlock;
	},
	init1: function (initNumber, relativeView, captureView, captureViewClickAction, title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth, x, y) {
		$.ig.CPContentPopupManager.prototype.init2.call(this, 2, relativeView, captureView, new $.ig.CPBubblePopupView(title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth), -1, -1, null, $.ig.CPPopupPosition.prototype.below, null, x, y, null, true, null, true);
		this.__captureViewClickAction = captureViewClickAction;
		this.__closeButtonPressedBlock = closeButtonPressedBlock;
		this.__leftButtonPressedBlock = leftButtonPressedBlock;
		this.__rightButtonPressedBlock = rightButtonPressedBlock;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPBubblePopupManager::ConsiderAsTopMostPopup()" />*/
	considerAsTopMostPopup: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPBubblePopupManager::ConsiderAsTopMostPopup()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPBubblePopupManager::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		return $.ig.ThemeManager.prototype.theme().accentColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPBubblePopupManager::GetBackgroundColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPBubblePopupManager::CaptureViewClicked()" />*/
	captureViewClicked: function () {
		$.ig.CPContentPopupManager.prototype.captureViewClicked.call(this);
		if (this.__captureViewClickAction != null) {
			this.__captureViewClickAction();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPBubblePopupManager::CaptureViewClicked()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPBubblePopupManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = new $.ig.Array();
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.close(), function (k) {
			if ($self.__closeButtonPressedBlock != null) {
				$self.__closeButtonPressedBlock();
			}
		}));
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.right(), function (k) {
			if ($self.__rightButtonPressedBlock != null) {
				$self.__rightButtonPressedBlock();
			}
		}));
		commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.left(), function (k) {
			if ($self.__leftButtonPressedBlock != null) {
				$self.__leftButtonPressedBlock();
			}
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPBubblePopupManager::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('CPBubblePopupManager', $.ig.CPContentPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPBubblePopupManager" />*/

/*<BeginType Name="Infragistics.CPBubblePopupView" />*/

$.ig.util.defType('CPBubblePopupView', 'CPView', {
	__closeButton: null,
	__leftButton: null,
	__rightButton: null,
	__titleLabel: null,
	__messageLabel: null,
	__indexIndicator: null,
	__leftButtonPressed: null,
	__rightButtonPressed: null,
	__preferredWidth: 0,
	__calcW: 0,
	__hasIndexIndicator: false,
	__showDisableHints: false,
	init: function (titleText, messageText, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth) {
		var $self = this;
		$.ig.CPView.prototype.init.call(this);
		this.__leftButtonPressed = leftButtonPressedBlock;
		this.__rightButtonPressed = rightButtonPressedBlock;
		this.__preferredWidth = preferredWidth;
		this.__showDisableHints = false;
		this.__hasIndexIndicator = sequenceCount > 1;
		this.setCornerRadius($.ig.ThemeManager.prototype.theme().containerCornerRadius());
		this.__closeButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__closeButton.setIcon($.ig.UIPathIcons.prototype.icons().getCloseIcon());
		this.__closeButton.isHidden(closeButtonPressedBlock == null);
		this.__closeButton.setColor($.ig.ThemeManager.prototype.theme().accentColor().foreground().$native());
		this.__closeButton.addClickHandler(function (x, y) {
			if (closeButtonPressedBlock != null) {
				closeButtonPressedBlock();
			}
		});
		this.addSubview(this.__closeButton);
		this.__titleLabel = new $.ig.CPLabel();
		this.__titleLabel.setText(titleText);
		this.__titleLabel.setTextColor($.ig.ThemeManager.prototype.theme().accentColor().foreground().$native());
		this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH3(), $.ig.ThemeManager.prototype.theme().boldFont());
		this.addSubview(this.__titleLabel);
		this.__messageLabel = new $.ig.CPLabel();
		this.__messageLabel.setTextWrapping(true);
		this.__messageLabel.setText(messageText);
		this.__messageLabel.setTextColor($.ig.ThemeManager.prototype.theme().accentColor().foreground().$native());
		this.__messageLabel.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__messageLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.addSubview(this.__messageLabel);
		this.__leftButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__leftButton.setText(leftButtonText);
		this.__leftButton.setColor($.ig.ThemeManager.prototype.theme().accentColor().foreground().$native());
		this.__leftButton.isHidden(leftButtonPressedBlock == null);
		this.addSubview(this.__leftButton);
		this.__leftButton.addClickHandler(function (x, y) {
			if ($self.__leftButtonPressed != null) {
				$self.__leftButtonPressed();
			}
		});
		this.__rightButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__rightButton.setText(rightButtonText);
		this.__rightButton.setFont($.ig.ThemeManager.prototype.theme().boldFont());
		this.__rightButton.setColor($.ig.ThemeManager.prototype.theme().accentColor().foreground().$native());
		this.__rightButton.isHidden(rightButtonPressedBlock == null);
		this.addSubview(this.__rightButton);
		this.__rightButton.addClickHandler(function (x, y) {
			if ($self.__rightButtonPressed != null) {
				$self.__rightButtonPressed();
			}
		});
		if (this.__hasIndexIndicator) {
			if (sequenceIndex == 0) {
				this.__leftButton.disable();
			} else {
				this.__leftButton.enable();
			}
		}
		this.__indexIndicator = new $.ig.CPProgressIndexIndicator();
		this.__indexIndicator._maxValue = sequenceCount;
		this.__indexIndicator._value = sequenceIndex;
		this.__indexIndicator._activeIndexColor = $.ig.ThemeManager.prototype.theme().accentColor().foreground().color();
		this.__indexIndicator._inactiveIndexColor = $.ig.ThemeManager.prototype.theme().accentColor().foreground().color();
		this.__indexIndicator._activeIndexBubbleRadius = $.ig.NativeUIUtility.prototype.utility().densify(6);
		this.__indexIndicator._inactiveIndexBubbleRadius = $.ig.NativeUIUtility.prototype.utility().densify(3);
		this.__indexIndicator.isHidden(!this.__hasIndexIndicator);
		this.addSubview(this.__indexIndicator);
		var t = "bubble_";
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "BubblePopupView");
		$.ig.UIUtility.prototype.setAccessibilityName(this.__titleLabel, t + "title");
		$.ig.UIUtility.prototype.setAccessibilityName(this.__messageLabel, t + "message");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__leftButton, t + "leftButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__rightButton, t + "rightButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__indexIndicator, t + "indexIndicator");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__closeButton, t + "closeButton");
	},
	/*<BeginMethod Name="System.Void Infragistics.CPBubblePopupView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var lp = $.ig.ThemeManager.prototype.theme().padding15();
		var mp = $.ig.ThemeManager.prototype.theme().padding20();
		var bh = $.ig.ThemeManager.prototype.theme().smallHitSize();
		var sp = $.ig.ThemeManager.prototype.theme().padding10();
		var top = mp;
		var btnSize = $.ig.ThemeManager.prototype.theme().verySmallHitSize();
		this.measureView1(this.__closeButton, w - btnSize, 0, btnSize, btnSize, 1);
		this.__titleLabel.calculateSizeToFit();
		var lw = this.__titleLabel.getCalculatedWidth();
		var lh = this.__titleLabel.getCalculatedHeight();
		this.measureView(this.__titleLabel, $.ig.intDivide(w, 2) - $.ig.intDivide(lw, 2), top, lw, lh);
		top += sp + lh;
		this.__messageLabel.calculateSizeToFit1(w - 4 * lp);
		lw = this.__messageLabel.getCalculatedWidth();
		lh = this.__messageLabel.getCalculatedHeight();
		this.measureView(this.__messageLabel, $.ig.intDivide(w, 2) - $.ig.intDivide(lw, 2), top, lw, lh);
		this.__leftButton.calculateSizeToFit();
		this.__rightButton.calculateSizeToFit();
		var leftButtonWidth = this.__leftButton.getCalculatedWidth();
		var rightButtonWidth = this.__rightButton.getCalculatedWidth();
		var labelTop = h - bh;
		if (this.__showDisableHints) {
			labelTop -= bh;
		}
		this.measureView1(this.__leftButton, lp, labelTop, leftButtonWidth, bh, this.__leftButton.isDisabled() ? $.ig.ThemeManager.prototype.theme().disabledOpacity() : 1);
		this.measureView(this.__rightButton, w - lp - rightButtonWidth, labelTop, rightButtonWidth, bh);
		var indicatorWidth = Math.max(w - lp * 3 - rightButtonWidth - lp * 3 - leftButtonWidth, this.__indexIndicator.getCalculatedWidth());
		this.measureView1(this.__indexIndicator, $.ig.intDivide(w, 2) - $.ig.intDivide(indicatorWidth, 2), labelTop, indicatorWidth, bh, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPBubblePopupView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPBubblePopupView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		if (this.__preferredWidth != -1) {
			this.__calcW = this.__preferredWidth;
		} else {
			this.__titleLabel.calculateSizeToFit();
			this.__calcW = this.__titleLabel.getCalculatedWidth() + 4 * $.ig.ThemeManager.prototype.theme().padding15();
		}
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPBubblePopupView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPBubblePopupView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var lp = $.ig.ThemeManager.prototype.theme().padding15();
		var mp = $.ig.ThemeManager.prototype.theme().padding20();
		var sp = $.ig.ThemeManager.prototype.theme().padding10();
		this.__titleLabel.calculateSizeToFit();
		this.__messageLabel.calculateSizeToFit1(this.__calcW - 4 * lp);
		var height = mp + this.__titleLabel.getCalculatedHeight() + sp + this.__messageLabel.getCalculatedHeight() + $.ig.ThemeManager.prototype.theme().mediumHitSize();
		if (this.__showDisableHints) {
			height += $.ig.ThemeManager.prototype.theme().mediumHitSize();
		}
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPBubblePopupView::GetCalculatedHeight()" />*/
	,
	$type: new $.ig.Type('CPBubblePopupView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPBubblePopupView" />*/

/*<BeginType Name="Infragistics.CPProgressIndexIndicator" />*/

$.ig.util.defType('CPProgressIndexIndicator', 'DrawingViewBase', {
	_maxValue: 0,
	_value: 0,
	_activeIndexColor: 0,
	_inactiveIndexColor: 0,
	_activeIndexBubbleRadius: 0,
	_inactiveIndexBubbleRadius: 0,
	__maxStepSize: 0,
	__minStepSize: 0,
	init: function () {
		$.ig.DrawingViewBase.prototype.init.call(this);
		this.__maxStepSize = $.ig.NativeUIUtility.prototype.utility().densify(40);
		this.__minStepSize = $.ig.NativeUIUtility.prototype.utility().densify(20);
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPProgressIndexIndicator::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__minStepSize * this._maxValue;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPProgressIndexIndicator::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressIndexIndicator::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		$.ig.DrawingViewBase.prototype.draw.call(this, canvas, w, h, info);
		var stepSize = Math.min(this.__maxStepSize, Math.max(this.__minStepSize, $.ig.intDivide(w, this._maxValue)));
		var left = $.ig.intDivide(w, 2) - $.ig.intDivide(stepSize * this._maxValue, 2);
		var cx = 0;
		var cy = $.ig.intDivide(h, 2);
		var r = 0;
		var fill = 0;
		for (var i = 0; i < this._maxValue; i++) {
			var activeIndex = this._value == i;
			cx = left + $.ig.intDivide(stepSize, 2) + stepSize * i;
			r = activeIndex ? this._activeIndexBubbleRadius : this._inactiveIndexBubbleRadius;
			fill = activeIndex ? this._activeIndexColor : this._inactiveIndexColor;
			this.drawCircle(canvas, cx, cy, r, fill, 0, 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressIndexIndicator::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	$type: new $.ig.Type('CPProgressIndexIndicator', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPProgressIndexIndicator" />*/

/*<BeginType Name="Infragistics.CPContentPopupViewDelegate" />*/

$.ig.util.defType('CPContentPopupViewDelegate', 'Object', {
	$type: new $.ig.Type('CPContentPopupViewDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPContentPopupViewDelegate" />*/

/*<BeginType Name="Infragistics.CPPopupCloseDelegate" />*/

$.ig.util.defType('CPPopupCloseDelegate', 'Object', {
	$type: new $.ig.Type('CPPopupCloseDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPPopupCloseDelegate" />*/

/*<BeginType Name="Infragistics.CPEditTextPopupManager" />*/

$.ig.util.defType('CPEditTextPopupManager', 'CPContentPopupManager', {
	init: function (initNumber, relativeView, startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, maxCharacterCount) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, relativeView, new $.ig.CPEditTextPopupView(startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, maxCharacterCount, false), -1, -1, null, $.ig.CPPopupPosition.prototype.below, true, null, true);
	},
	init1: function (initNumber, relativeView, captureView, startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction) {
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, captureView, new $.ig.CPEditTextPopupView(startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, -1, false), -1, -1, null, $.ig.CPPopupPosition.prototype.below, true, null, true);
	},
	init2: function (initNumber, relativeView, captureView, startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, allowEmpty) {
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, captureView, new $.ig.CPEditTextPopupView(startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, -1, allowEmpty), -1, -1, null, $.ig.CPPopupPosition.prototype.below, true, null, true);
	},
	/*<BeginProperty Name="Infragistics.CPEditTextPopupView Infragistics.CPEditTextPopupManager::Editor()" />*/
	editor: function () {
		return this.contentView();
	}
	/*<EndProperty Name="Infragistics.CPEditTextPopupView Infragistics.CPEditTextPopupManager::Editor()" />*/
	,
	$type: new $.ig.Type('CPEditTextPopupManager', $.ig.CPContentPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPEditTextPopupManager" />*/

/*<BeginType Name="Infragistics.CPEditTextPopupView" />*/

$.ig.util.defType('CPEditTextPopupView', 'CPViewBase', {
	__textView: null,
	__applyButton: null,
	__cancelButton: null,
	__verticalPadding: 0,
	__sidePadding: 0,
	__preferredWidth: 0,
	__buttonSpacing: 0,
	__textBoxHeight: 0,
	__applyAction: null,
	__cancelAction: null,
	__startingText: null,
	__maxCharacterCount: 0,
	__allowEmpty: false,
	init: function (startingText, hintText, applyText, cancelText, applyIcon, preferredWidth, applyAction, cancelAction, maxCharacterCount, allowEmptyString) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.__startingText = startingText;
		this.__sidePadding = $.ig.ThemeManager.prototype.theme().padding10();
		this.__verticalPadding = $.ig.ThemeManager.prototype.theme().padding10();
		this.__buttonSpacing = $.ig.ThemeManager.prototype.theme().padding10();
		this.__textBoxHeight = $.ig.ThemeManager.prototype.theme().mediumHitSize();
		this.__preferredWidth = preferredWidth;
		this.__applyAction = applyAction;
		this.__cancelAction = cancelAction;
		this.__maxCharacterCount = maxCharacterCount;
		this.__allowEmpty = allowEmptyString;
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__textView = new $.ig.CPGridViewItemTextBoxCell(0, $.ig.CPTheme.prototype.itemGuideStyleMedium, "x");
		if (startingText != null) {
			this.__textView.textView().setText(startingText);
		}
		this.__textView.textView().setHintText(hintText);
		this.__textView.textView().keyboardResizeMode($.ig.CPTextViewOnScreenKeyboardResizeMode.prototype.moveWindow);
		$.ig.CPTextViewManager.prototype.register(this.__textView.textView(), null);
		this.__textView.registerTextChanged(function () {
			$self.textChanged();
		});
		this.__textView.textView().registerEnterKeyPressed(function () {
			$self.applyClicked();
		});
		this.__textView.textView().registerEscapeKeyPressed(function () {
			$self.cancelClicked();
		});
		$.ig.UIUtility.prototype.setAccessibilityName2(this.__textView, "textBox_", hintText);
		$.ig.UIUtility.prototype.setAccessibilityName3(this.__textView.textView(), "textBox_", hintText, "_text");
		this.addSubview(this.__textView);
		this.__applyButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.accent);
		this.__applyButton.setText(applyText);
		this.__applyButton.setIcon(applyIcon);
		this.__applyButton.addClickHandler(function (x, y) {
			$self.applyClicked();
		});
		$.ig.UIUtility.prototype.setAccessibilityName2(this.__applyButton, "applyButton_", applyText);
		this.addSubview(this.__applyButton);
		this.__cancelButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__cancelButton.setText(cancelText);
		this.__cancelButton.addClickHandler(function (x, y) {
			$self.cancelClicked();
		});
		this.addSubview(this.__cancelButton);
		this.textChanged();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::TextChanged()" />*/
	textChanged: function () {
		var val = this.__textView.textView().getText();
		val = $.ig.NativeStringUtility.prototype.trim(val);
		if (val.length <= this.__maxCharacterCount || this.__maxCharacterCount < 0) {
			if (this.__textView.isInErrorState()) {
				this.__textView.clearError();
			}
			if (val.length > 0 && (this.__startingText == null || !this.__startingText.equals(val))) {
				this.__applyButton.enable();
			} else if (this.__allowEmpty && this.__startingText != null && !this.__startingText.equals(val)) {
				this.__applyButton.enable();
			} else {
				this.__applyButton.disable();
			}
		} else if (!this.__textView.isInErrorState()) {
			this.__textView.setError(null);
			this.__applyButton.disable();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::TextChanged()" />*/
	,
	_popupId: null,
	/*<BeginProperty Name="System.String Infragistics.CPEditTextPopupView::PopupId()" />*/
	popupId: function (value) {
		if (arguments.length === 1) {
			this._popupId = value;
			return value;
		} else {
			return this._popupId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPEditTextPopupView::PopupId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::ApplyClicked()" />*/
	applyClicked: function () {
		if (!this.__applyButton.isDisabled()) {
			if (this.__applyAction != null) {
				this.__applyAction($.ig.NativeStringUtility.prototype.trim(this.__textView.textView().getText()));
			}
			this.close();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::ApplyClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::Close()" />*/
	close: function () {
		if (this.popupId() != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.popupId(), true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::Close()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::CancelClicked()" />*/
	cancelClicked: function () {
		if (this.__cancelAction != null) {
			this.__cancelAction();
		}
		this.close();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::CancelClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.__applyButton.calculateSizeToFit();
		this.__cancelButton.calculateSizeToFit();
		this.__textView.calculateSizeToFit();
		var bh = this.__applyButton.getCalculatedHeight();
		var abw = this.__applyButton.getCalculatedWidth();
		var cbw = this.__cancelButton.getCalculatedWidth();
		this.measureView(this.__textView, this.__sidePadding, this.__verticalPadding, w - this.__sidePadding * 2, this.__textBoxHeight);
		var right = w - abw - this.__sidePadding;
		var bottom = h - bh - this.__verticalPadding;
		this.measureView1(this.__applyButton, right, bottom, abw, bh, 1);
		right -= (cbw);
		this.measureView1(this.__cancelButton, right, bottom, cbw, bh, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::SetFocus()" />*/
	setFocus: function () {
		this.__textView.textView().setFocus();
		this.__textView.textView().selectAllText();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::SetFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::ClearFocus()" />*/
	clearFocus: function () {
		this.__textView.textView().clearFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::ClearFocus()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPEditTextPopupView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		if (this.__preferredWidth != -1) {
			return this.__preferredWidth;
		} else {
			this.__applyButton.calculateSizeToFit();
			this.__cancelButton.calculateSizeToFit();
			var maxButtonWidth = Math.max(this.__applyButton.getCalculatedWidth(), this.__cancelButton.getCalculatedWidth());
			return maxButtonWidth * 3 + this.__buttonSpacing + this.__sidePadding * 2;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPEditTextPopupView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPEditTextPopupView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		var height = this.__verticalPadding * 2;
		height += this.__applyButton.sizingGuide().size() + this.__verticalPadding + this.__textBoxHeight;
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPEditTextPopupView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::Unload()" />*/
	unload: function () {
		$.ig.CPViewBase.prototype.unload.call(this);
		$.ig.CPTextViewManager.prototype.unregisterTextView(this.__textView.textView());
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::PopupFinishedShowing()" />*/
	popupFinishedShowing: function () {
		this.setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::PopupFinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::PopupClosing()" />*/
	popupClosing: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::PopupClosing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPEditTextPopupView::CleanupAfterPopupCloses()" />*/
	cleanupAfterPopupCloses: function () {
		this.clearFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPEditTextPopupView::CleanupAfterPopupCloses()" />*/
	,
	$type: new $.ig.Type('CPEditTextPopupView', $.ig.CPViewBase.prototype.$type, [$.ig.CPPopupViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPEditTextPopupView" />*/

/*<BeginType Name="Infragistics.CPHighlightAreaPopupManager" />*/

$.ig.util.defType('CPHighlightAreaPopupManager', 'CPPopupManagerBase', {
	__blackoutAreas: null,
	__highlightView: null,
	init: function (highlightView) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__highlightView = highlightView;
		this.__blackoutAreas = new $.ig.Array();
		for (var i = 0; i < 4; i++) {
			var bov = new $.ig.CPViewBase();
			bov.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(this.backgroundViewColor()));
			this.__blackoutAreas.add(bov);
		}
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsAnimating()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsKeyboard()" />*/
	supportsKeyboard: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::SupportsKeyboard()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPHighlightAreaPopupManager::AutoHideDuration()" />*/
	autoHideDuration: function () {
		return 750;
	}
	/*<EndProperty Name="System.Double Infragistics.CPHighlightAreaPopupManager::AutoHideDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightAreaPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		for (var i = 0; i < this.__blackoutAreas.length; i++) {
			popup.addSubview(this.__blackoutAreas[i]);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::LayoutBlackOutAreas(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Double)" />*/
	layoutBlackOutAreas: function (popup, w, h, opacity) {
		var daPt = this.__highlightView.translatePoint(new $.ig.CPPoint(0, 0), popup);
		var daX = $.ig.truncate(daPt._x);
		var daY = $.ig.truncate(daPt._y);
		var daW = this.__highlightView.currentWidth();
		var daH = this.__highlightView.currentHeight();
		popup.measureView1(this.__blackoutAreas[0], daX, 0, daW, daY, opacity);
		popup.measureView1(this.__blackoutAreas[1], daX + daW, 0, w - (daX + daW), h, opacity);
		popup.measureView1(this.__blackoutAreas[2], daX, daY + daH, daW, h - (daY + daH), opacity);
		popup.measureView1(this.__blackoutAreas[3], 0, 0, daX, h, opacity);
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::LayoutBlackOutAreas(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		this.layoutBlackOutAreas(popup, w, h, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.layoutBlackOutAreas(popup, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightAreaPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPHighlightAreaPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPHighlightAreaPopupManager" />*/

/*<BeginType Name="Infragistics.CPHighlightViewPopupManager" />*/

$.ig.util.defType('CPHighlightViewPopupManager', 'CPPopupManagerBase', {
	__imageView: null,
	__imageClickHandler: null,
	__captureView: null,
	__captureViewClicked: null,
	__prevW: 0,
	__prevH: 0,
	init: function (captureView, captureViewClicked) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__captureView = captureView;
		this.__captureViewClicked = captureViewClicked;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPHighlightViewPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		var $self = this;
		if (this.__captureView != null) {
			this.__imageView = new $.ig.CPImageView();
			popup.addSubview(this.__imageView);
			this.__imageClickHandler = new $.ig.CPInteractionView();
			this.__imageClickHandler.addClickHandler(function (x, y) {
				if ($self.__captureViewClicked != null) {
					$self.__captureViewClicked();
				}
				$self.closePopup(true);
			});
			this.__imageClickHandler.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.createColor1(0, 0, 0, 0)));
			popup.addSubview(this.__imageClickHandler);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.updateCapture(popup);
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		this.updateCapture(popup);
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::UpdateCapture(Infragistics.CPPopupContainerView)" />*/
	updateCapture: function (popup) {
		if (this.__captureView != null && this.__captureView.getParent() != null) {
			var w = this.__captureView.currentWidth();
			var h = this.__captureView.currentHeight();
			if (this.__prevW != w || this.__prevH != h) {
				this.__prevW = w;
				this.__prevH = h;
				this.__imageView.setImage(this.__captureView.captureImage());
			}
			var rp = this.__captureView.translatePoint(new $.ig.CPPoint(0, 0), popup);
			popup.measureView1(this.__imageView, $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h, 1);
			popup.measureView1(this.__imageClickHandler, $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPHighlightViewPopupManager::UpdateCapture(Infragistics.CPPopupContainerView)" />*/
	,
	$type: new $.ig.Type('CPHighlightViewPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPHighlightViewPopupManager" />*/

/*<BeginType Name="Infragistics.CPIslandDialogView" />*/

$.ig.util.defType('CPIslandDialogView', 'CPView', {
	__contentView: null,
	__title: null,
	__icon: null,
	__relView: null,
	__hasCloseButton: false,
	init: function (icon, title, view, relView, hasCloseButton) {
		$.ig.CPView.prototype.init.call(this);
		this.__icon = icon;
		this.__title = title;
		this.__relView = relView;
		this.__hasCloseButton = hasCloseButton;
		this.__contentView = new $.ig.CPContentView();
		this.__contentView.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		view.clipToBounds(true);
		this.__contentView.addContentView(view);
		this.__contentView.setCornerRadius($.ig.ThemeManager.prototype.theme().islandCornerRadius());
		this.__contentView.setBackgroundColor($.ig.ThemeManager.prototype.theme().appBackgroundColor().$native());
		this.addSubview(this.__contentView);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var padding = $.ig.ThemeManager.prototype.theme().isLargeScreen() ? $.ig.ThemeManager.prototype.theme().outerIslandPadding() : 0;
		this.measureView1(this.__contentView, padding, padding, w - (padding * 2), h - (padding * 2), 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPView.prototype.calculateSizeToFit.call(this);
		this.__contentView.calculateSizeToFit();
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIslandDialogView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__contentView.getCalculatedWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIslandDialogView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPIslandDialogView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__contentView.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPIslandDialogView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::Show()" />*/
	show: function () {
		$.ig.CPPopupManager.prototype.showModalDialogWithView2(this.__relView, this, this.__title, this.__icon, null, this.__hasCloseButton, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::Show()" />*/
	,
	_popupId: null,
	/*<BeginProperty Name="System.String Infragistics.CPIslandDialogView::PopupId()" />*/
	popupId: function (value) {
		if (arguments.length === 1) {
			this._popupId = value;
			return value;
		} else {
			return this._popupId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPIslandDialogView::PopupId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::PopupFinishedShowing()" />*/
	popupFinishedShowing: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::PopupFinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::CleanupAfterPopupCloses()" />*/
	cleanupAfterPopupCloses: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::CleanupAfterPopupCloses()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPIslandDialogView::PopupClosing()" />*/
	popupClosing: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPIslandDialogView::PopupClosing()" />*/
	,
	$type: new $.ig.Type('CPIslandDialogView', $.ig.CPView.prototype.$type, [$.ig.CPPopupViewDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPIslandDialogView" />*/

/*<BeginType Name="Infragistics.CPMaximizePopupManager" />*/

$.ig.util.defType('CPMaximizePopupManager', 'CPPopupManagerBase', {
	__view: null,
	__parent: null,
	init: function (viewToMaximize) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__view = viewToMaximize;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPMaximizePopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPMaximizePopupManager::BackgroundViewColor()" />*/
	backgroundViewColor: function () {
		return $.ig.ColorUtility.prototype.createColor1(0, 0, 0, 0);
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPMaximizePopupManager::BackgroundViewColor()" />*/
	,
	__root: null,
	__popup: null,
	__rp: null,
	__vw: 0,
	__vh: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::Hide()" />*/
	hide: function () {
		var x = this.__view.currentX();
		var y = this.__view.currentY();
		var w = this.__view.currentWidth();
		var h = this.__view.currentHeight();
		this.addBackToParent();
		this.__rp = this.__view.translatePoint(new $.ig.CPPoint(0, 0), this.__root);
		this.__vw = this.__view.currentWidth();
		this.__vh = this.__view.currentHeight();
		this.removeFromParent(this.__popup);
		this.__popup.measureView(this.__view, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		var x = 0;
		var y = $.ig.NativeUIUtility.prototype.utility().screenTopInset();
		this.layingOutView(popup, this.__view, x, y, w, h - y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		this.__root = root;
		this.__popup = popup;
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		if (this._isShowing) {
			var rp = this.__view.translatePoint(new $.ig.CPPoint(0, 0), root);
			var vw = this.__view.currentWidth();
			var vh = this.__view.currentHeight();
			this.removeFromParent(popup);
			this.showingView(popup, this.__view, $.ig.truncate(rp._x), $.ig.truncate(rp._y), vw, vh);
		} else {
			this.hidingView(popup, this.__view, $.ig.truncate(this.__rp._x), $.ig.truncate(this.__rp._y), this.__vw, this.__vh);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::LayingOutView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	layingOutView: function (parent, view, x, y, w, h) {
		parent.measureView(view, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::LayingOutView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::ShowingView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	showingView: function (parent, view, x, y, w, h) {
		parent.measureView(view, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::ShowingView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::HidingView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	hidingView: function (parent, view, x, y, w, h) {
		parent.measureView(view, x, y, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::HidingView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::RemoveFromParent(Infragistics.CPPopupContainerView)" />*/
	removeFromParent: function (popup) {
		this.__parent = this.__view.getParent();
		this.__parent.removeSubview(this.__view);
		popup.addSubview(this.__view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::RemoveFromParent(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::AddBackToParent()" />*/
	addBackToParent: function () {
		var currentParent = this.__view.getParent();
		currentParent.removeSubview(this.__view);
		this.__parent.addSubview(this.__view);
		this.__parent.sizeChanged(this.__parent.currentWidth(), this.__parent.currentHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::AddBackToParent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMaximizePopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPPopupManagerBase.prototype.cleanUp.call(this);
		this.addBackToParent();
	}
	/*<EndMethod Name="System.Void Infragistics.CPMaximizePopupManager::CleanUp()" />*/
	,
	$type: new $.ig.Type('CPMaximizePopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMaximizePopupManager" />*/

/*<BeginType Name="Infragistics.CPModalDialogPopupManager" />*/

$.ig.util.defType('CPModalDialogPopupManager', 'CPPopupManagerBase', {
	__nav: null,
	__containerView: null,
	__shadowView: null,
	__contentView: null,
	__relView: null,
	__displayView: null,
	__fullScreen: false,
	__maxWidth: 0,
	__maxHeight: 0,
	__viewDelegate: null,
	init: function (nav, relativeView, displayView, viewDelegate, fullScreen, maxWidth, maxHeight) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__maxWidth = maxWidth;
		this.__maxHeight = maxHeight;
		this.__viewDelegate = viewDelegate;
		this.__containerView = new $.ig.CPModalDialogContentView();
		this.__displayView = displayView;
		this.__fullScreen = fullScreen;
		this.__nav = nav;
		this.__contentView = this.__nav.view();
		this.__shadowView = new $.ig.CPView();
		this.__shadowView.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.__containerView.clipToBounds(true);
		$.ig.ThemeManager.prototype.theme().applyModalDialogShadowToView(this.__shadowView);
		this.__shadowView.addSubview(this.__containerView);
		this.__relView = relativeView;
	},
	/*<BeginProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPModalDialogPopupManager::ViewDelegate()" />*/
	viewDelegate: function () {
		return this.__viewDelegate;
	}
	/*<EndProperty Name="Infragistics.CPPopupViewDelegate Infragistics.CPModalDialogPopupManager::ViewDelegate()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPModalDialogPopupManager::CloseDelegate()" />*/
	closeDelegate: function () {
		if ($.ig.util.cast($.ig.CPPopupCloseDelegate.prototype.$type, this.__displayView) !== null) {
			return this.__displayView;
		}
		return $.ig.CPPopupManagerBase.prototype.closeDelegate.call(this);
	}
	/*<EndProperty Name="Infragistics.CPPopupCloseDelegate Infragistics.CPModalDialogPopupManager::CloseDelegate()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		popup.addSubview(this.__shadowView);
		this.__containerView.setContent(this.__contentView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::IsFullScreen()" />*/
	isFullScreen: function () {
		return this.__fullScreen;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPModalDialogPopupManager::IsFullScreen()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::FinishedShowing()" />*/
	finishedShowing: function () {
		$.ig.CPPopupManagerBase.prototype.finishedShowing.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::FinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.layoutStuff(popup, root, w, h, 0, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::LayoutStuff(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	layoutStuff: function (popup, root, w, h, offset, opacity) {
		var maxWidth = $.ig.NativeUIUtility.prototype.utility().densify(5000);
		var maxHeight = $.ig.NativeUIUtility.prototype.utility().densify(5000);
		if (this.__displayView != null) {
			this.__displayView.calculateSizeToFit();
		}
		if (this.__maxWidth == -1 && this.__displayView != null) {
			var val = this.__displayView.getCalculatedWidth();
			if (val > 0) {
				maxWidth = val;
			}
		} else if (this.__maxWidth != -1) {
			maxWidth = this.__maxWidth;
		}
		if (this.__maxHeight == -1 && this.__displayView != null) {
			var val1 = this.__displayView.getCalculatedHeight();
			if (val1 > 0) {
				maxHeight = val1;
			}
		} else if (this.__maxHeight != -1) {
			maxHeight = this.__maxHeight;
		}
		var topInset = $.ig.NativeUIUtility.prototype.utility().screenTopInset();
		var overrideTop = -1;
		var limitWidth = w, limitHeight = h;
		var contentOverrideHeight = 0;
		if (this.__fullScreen) {
			maxWidth = w;
			maxHeight = h;
			this.__containerView.setCornerRadius(0);
			this.__shadowView.setCornerRadius(0);
		} else if (this.isSmallFullScreenMode(w)) {
			maxWidth = w;
			if (topInset > 0) {
				overrideTop = topInset;
			} else {
				overrideTop = $.ig.ThemeManager.prototype.theme().padding40();
			}
			maxHeight = (h - overrideTop);
			contentOverrideHeight = maxHeight;
			maxHeight += $.ig.ThemeManager.prototype.theme().modalCornerRadius();
			this.__containerView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
			this.__shadowView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
		} else {
			var padding = $.ig.ThemeManager.prototype.theme().resolvePadding(w);
			limitWidth -= padding * 2;
			limitHeight -= padding * 2;
			this.__containerView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
			this.__shadowView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
		}
		var width = Math.min(maxWidth, limitWidth);
		var height = Math.min(maxHeight, limitHeight);
		var x = $.ig.intDivide(w, 2) - $.ig.intDivide(width, 2);
		var y = $.ig.intDivide(h, 2) - $.ig.intDivide(height, 2);
		if (overrideTop > 0) {
			y = overrideTop;
		}
		if (y < topInset) {
			var diff = topInset - y;
			y = topInset;
			height -= diff;
		}
		if (contentOverrideHeight > 0) {
			this.__containerView._contentHeight = contentOverrideHeight;
		} else {
			this.__containerView._contentHeight = height;
		}
		popup.measureView1(this.__shadowView, x, y + offset, width, height, opacity);
		popup.measureView1(this.__containerView, 0, 0, width, height, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::LayoutStuff(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPModalDialogPopupManager::IsSmallFullScreenMode(System.Int32)" />*/
	isSmallFullScreenMode: function (w) {
		return $.ig.NativeUIUtility.prototype.utility().isPhone() || w < $.ig.ThemeManager.prototype.theme().wideScreenThreshold();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPModalDialogPopupManager::IsSmallFullScreenMode(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPModalDialogPopupManager::OverrideAnimationInDuration()" />*/
	overrideAnimationInDuration: function () {
		if (this.isSmallFullScreenMode(this.__dialogW)) {
			return $.ig.ThemeManager.prototype.theme().visualizeAnimationDuration();
		}
		return $.ig.CPPopupManagerBase.prototype.overrideAnimationInDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPModalDialogPopupManager::OverrideAnimationInDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPModalDialogPopupManager::OverrideAnimationOutDuration()" />*/
	overrideAnimationOutDuration: function () {
		if (this.isSmallFullScreenMode(this.__dialogW)) {
			return $.ig.ThemeManager.prototype.theme().visualizeAnimationDuration();
		}
		return $.ig.CPPopupManagerBase.prototype.overrideAnimationOutDuration.call(this);
	}
	/*<EndProperty Name="System.Double Infragistics.CPModalDialogPopupManager::OverrideAnimationOutDuration()" />*/
	,
	__dialogW: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		this.__dialogW = w;
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		var opacity = 0;
		var offset = $.ig.NativeUIUtility.prototype.utility().densify(50);
		if (this.isSmallFullScreenMode(w)) {
			offset = h;
			opacity = 1;
		}
		this.layoutStuff(popup, root, w, h, offset, opacity);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogPopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPPopupManagerBase.prototype.cleanUp.call(this);
		this.__nav.unload();
		this.__nav = null;
		if (this.__displayView != null) {
			this.__displayView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogPopupManager::CleanUp()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPModalDialogPopupManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var commands = $.ig.CPPopupManagerBase.prototype.getSupportedKeyCommands.call(this);
		if (this.__nav != null) {
			$.ig.ArrayUtility.prototype.addToCPReadOnlyList(commands, this.__nav.getSupportedKeyCommands());
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPModalDialogPopupManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPModalDialogPopupManager::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			if (this.__containerView != null) {
				this.__containerView.accessibilityName(value);
			}
			return value;
		} else {
			if (this.__containerView != null) {
				return this.__containerView.accessibilityName();
			}
			return "";
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPModalDialogPopupManager::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPModalDialogPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPModalDialogPopupManager" />*/

/*<BeginType Name="Infragistics.CPModalDialogContentView" />*/

$.ig.util.defType('CPModalDialogContentView', 'CPView', {
	init: function () {
		$.ig.CPView.prototype.init.call(this);
	},
	__content: null,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogContentView::SetContent(Infragistics.CPViewBase)" />*/
	setContent: function (content) {
		this.__content = content;
		this.addSubview(this.__content);
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogContentView::SetContent(Infragistics.CPViewBase)" />*/
	,
	_contentHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPModalDialogContentView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		if (this.__content != null) {
			this.measureView1(this.__content, 0, 0, w, this._contentHeight, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPModalDialogContentView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPModalDialogContentView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPModalDialogContentView" />*/

/*<BeginType Name="Infragistics.CPPopupAnimatorDelegate" />*/

$.ig.util.defType('CPPopupAnimatorDelegate', 'Object', {
	__finished: null,
	__animationDuration: 0,
	init: function (finished, animationDuration) {
		$.ig.Object.prototype.init.call(this);
		this.__finished = finished;
		this.__animationDuration = animationDuration;
	},
	/*<BeginMethod Name="System.Double Infragistics.CPPopupAnimatorDelegate::AnimationDuration()" />*/
	animationDuration: function () {
		return this.__animationDuration;
	}
	/*<EndMethod Name="System.Double Infragistics.CPPopupAnimatorDelegate::AnimationDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupAnimatorDelegate::AnimationTick(System.Double)" />*/
	animationTick: function (percent) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupAnimatorDelegate::AnimationTick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupAnimatorDelegate::AnimationFinished()" />*/
	animationFinished: function () {
		if (this.__finished != null) {
			this.__finished();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupAnimatorDelegate::AnimationFinished()" />*/
	,
	$type: new $.ig.Type('CPPopupAnimatorDelegate', $.ig.Object.prototype.$type, [$.ig.AnimationHelperDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPPopupAnimatorDelegate" />*/

/*<BeginType Name="Infragistics.CPPopupBackgroundView" />*/

$.ig.util.defType('CPPopupBackgroundView', 'DrawingViewBase', {
	init: function () {
		this._backgroundColor = new $.ig.Number();
		this._borderColor = new $.ig.Number();
		$.ig.DrawingViewBase.prototype.init.call(this);
	},
	_popupLocation: 0,
	_backgroundColor: null,
	_borderColor: null,
	_borderWidth: 0,
	_arrowPosition: 0,
	_arrowSize: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupBackgroundView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, obj) {
		$.ig.DrawingViewBase.prototype.draw.call(this, canvas, w, h, obj);
		var info = obj;
		var sc = info._borderColor;
		var bc = info._backgroundColor;
		var sw = this._borderWidth;
		if (info._popupLocation == $.ig.CPPopupPosition.prototype.below || info._popupLocation == $.ig.CPPopupPosition.prototype.above) {
			var apos = $.ig.truncate((info._arrowPosition * w));
			var aw = $.ig.truncate(((info._arrowSize * w) * 1.25));
			var ah = $.ig.intDivide(aw, 2);
			if (info._popupLocation == $.ig.CPPopupPosition.prototype.below) {
				var ax1 = apos - $.ig.intDivide(aw, 2);
				var ay1 = ah;
				this.drawCustomShape1(canvas, ax1, ay1, apos, 0, apos + $.ig.intDivide(aw, 2), ay1, ax1, ay1, bc, sc, sw);
				this.drawLine(canvas, ax1 + sw, ay1, apos + $.ig.intDivide(aw, 2) - sw, ay1, bc, sw * 2);
			} else if (info._popupLocation == $.ig.CPPopupPosition.prototype.above) {
				var ax11 = apos - $.ig.intDivide(aw, 2);
				var ay11 = (h - ah);
				this.drawCustomShape1(canvas, ax11, ay11, apos, h, apos + $.ig.intDivide(aw, 2), ay11, ax11, ay11, bc, sc, sw);
				this.drawLine(canvas, ax11 + sw, ay11, apos + $.ig.intDivide(aw, 2) - sw, ay11, bc, sw * 2);
			}
		} else if (info._popupLocation == $.ig.CPPopupPosition.prototype.left || info._popupLocation == $.ig.CPPopupPosition.prototype.right) {
			var apos1 = $.ig.truncate((info._arrowPosition * h));
			var ah1 = $.ig.truncate((info._arrowSize * h));
			var aw1 = $.ig.intDivide(ah1, 2) + sw;
			if (info._popupLocation == $.ig.CPPopupPosition.prototype.left) {
				var ax12 = (w - aw1);
				var ay12 = apos1 - $.ig.intDivide(ah1, 2);
				this.drawCustomShape1(canvas, ax12, ay12, w, apos1, ax12, apos1 + $.ig.intDivide(ah1, 2), ax12, ay12, bc, sc, sw);
				this.drawLine(canvas, ax12, ay12 + sw, ax12, apos1 + $.ig.intDivide(ah1, 2) - sw, bc, sw);
			} else if (info._popupLocation == $.ig.CPPopupPosition.prototype.right) {
				var ax13 = aw1;
				var ay13 = apos1 - $.ig.intDivide(ah1, 2);
				this.drawCustomShape1(canvas, ax13, ay13, 0, apos1, ax13, apos1 + $.ig.intDivide(ah1, 2), ax13, ay13, bc, sc, sw);
				this.drawLine(canvas, ax13, ay13 + sw, ax13, apos1 + $.ig.intDivide(ah1, 2) - sw, bc, sw);
			}
		} else if (info._popupLocation == $.ig.CPPopupPosition.prototype.menu) {
		} else if (info._popupLocation == $.ig.CPPopupPosition.prototype.modal) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupBackgroundView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.CPPopupBackgroundView::ResolveDrawingInfo()" />*/
	resolveDrawingInfo: function () {
		var info = new $.ig.CPPopupBackgroundViewInfo();
		info._backgroundColor = this._backgroundColor;
		info._borderColor = this._borderColor;
		info._popupLocation = this._popupLocation;
		info._arrowPosition = this._arrowPosition;
		info._arrowSize = this._arrowSize;
		info._borderWidth = this._borderWidth;
		return info;
	}
	/*<EndMethod Name="System.Object Infragistics.CPPopupBackgroundView::ResolveDrawingInfo()" />*/
	,
	$type: new $.ig.Type('CPPopupBackgroundView', $.ig.DrawingViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupBackgroundView" />*/

/*<BeginType Name="Infragistics.CPPopupBackgroundViewInfo" />*/

$.ig.util.defType('CPPopupBackgroundViewInfo', 'Object', {
	init: function () {
		this._backgroundColor = new $.ig.Number();
		this._borderColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
	},
	_popupLocation: 0,
	_backgroundColor: null,
	_borderColor: null,
	_borderWidth: 0,
	_arrowPosition: 0,
	_arrowSize: 0,
	$type: new $.ig.Type('CPPopupBackgroundViewInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupBackgroundViewInfo" />*/

/*<BeginType Name="Infragistics.CPPopupContainerBackgroundView" />*/

$.ig.util.defType('CPPopupContainerBackgroundView', 'CPViewBase', {
	init: function () {
		$.ig.CPViewBase.prototype.init.call(this);
		this.shouldSteaFocusFromTextEditors(false);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerBackgroundView::Setup()" />*/
	setup: function () {
		$.ig.CPViewBase.prototype.setup.call(this);
		this._element[0].style.pointerEvents = "auto";
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerBackgroundView::Setup()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupContainerBackgroundView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupContainerBackgroundView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupContainerBackgroundView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	handlePointerDown: function (x, y, quietly) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupContainerBackgroundView::HandlePointerDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	$type: new $.ig.Type('CPPopupContainerBackgroundView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupContainerBackgroundView" />*/

/*<BeginType Name="Infragistics.CPPopupContainerView" />*/

$.ig.util.defType('CPPopupContainerView', 'CPViewBase', {
	__manager: null,
	__backgroundView: null,
	__sizeChangeBlock: null,
	__autoHideAnimator: null,
	__animatorDelegate: null,
	_closingBlock: null,
	__isOpen: false,
	__isContainerChangingSize: false,
	__finishedTimer: null,
	__root: null,
	init: function (uniqueID, manager, root) {
		var $self = this;
		this.__prevBackGroundColor = new $.ig.Number();
		$.ig.CPViewBase.prototype.init.call(this);
		this.__prevBackGroundColor = -1;
		this.__root = root;
		this.clipToBounds(true);
		this.__popupId = uniqueID;
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "CPPopupContainerView");
		this.__manager = manager;
		this.__manager.closePopupAction(function (animate) {
			$self.close(animate);
		});
		this.__isOpen = true;
		this.__sizeChangeBlock = function (width, height) {
			$self.containerSizeChanged(width, height);
		};
		root.registerAfterSizeChangedListener(this.__sizeChangeBlock);
		var w = root.currentWidth();
		var h = root.currentHeight();
		this.__manager._containerWidth = w;
		this.__manager._containerHeight = h;
		if (this.__manager.supportsBackgroundView()) {
			this.__backgroundView = new $.ig.CPPopupContainerBackgroundView();
			this.addSubview(this.__backgroundView);
			if (this.__manager.autoHideWhenClickingOutsideView()) {
				this.__backgroundView.addClickHandler(function (x, y) {
					$self.backgroundClicked();
				});
			}
		} else {
			this._element[0].style.pointerEvents = "none";
		}
		if (this.__manager.autoHidesAfterDuration()) {
			this.__animatorDelegate = new $.ig.CPPopupAnimatorDelegate(function () {
				$self.close(true);
			}, manager.autoHideDuration());
			this.__autoHideAnimator = new $.ig.AnimationHelper(1, this.__animatorDelegate);
		}
		root.addSubview(this);
		this.bringToFront();
		this.startShowingPopup();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::StartShowingPopup()" />*/
	startShowingPopup: function () {
		var $self = this;
		var w = this.__manager._containerWidth;
		var h = this.__manager._containerHeight;
		var hideOpacity = 0;
		this.__manager.show(this);
		this.__manager._isShowing = true;
		this.__manager.prepareForAnimation(this, this.__root, w, h);
		if (this.__backgroundView != null) {
			this.ensureBgColor();
			this.measureView1(this.__backgroundView, 0, 0, w, h, hideOpacity);
		}
		var duration = this.__manager.overrideAnimationInDuration();
		if (duration == -1) {
			duration = $.ig.ThemeManager.prototype.theme().animationDuration();
		}
		if (this.__manager.supportsAnimating() && duration > 0) {
			this.animate(duration, function () {
				$self.layoutPopup(w, h);
				if ($self.__backgroundView != null) {
					$self.ensureBgColor();
					$self.measureView1($self.__backgroundView, 0, 0, w, h, 1);
				}
			}, function (finished) {
				$self.finishedShowing();
			});
		} else {
			this.layoutPopup(w, h);
			if (this.__backgroundView != null) {
				this.ensureBgColor();
				this.measureView1(this.__backgroundView, 0, 0, w, h, 1);
			}
			this.__finishedTimer = new $.ig.CPTimer();
			this.__finishedTimer.start1(0.0001, function (d) {
			}, function () {
				$self.finishedShowing();
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::StartShowingPopup()" />*/
	,
	__popupId: null,
	/*<BeginProperty Name="System.String Infragistics.CPPopupContainerView::PopupId()" />*/
	popupId: function () {
		return this.__popupId;
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupContainerView::PopupId()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::BackgroundClicked()" />*/
	backgroundClicked: function () {
		if (this.__manager.autoHideWhenClickingOutsideView()) {
			this.close(true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::BackgroundClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::Close(System.Boolean)" />*/
	close: function (animate) {
		$.ig.CPPopupManager.prototype.closePopup(this.popupId(), animate);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::Close(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::AutoHide()" />*/
	autoHide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::AutoHide()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupContainerView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupContainerView::HandlesUIInteraction()" />*/
	,
	__prevW: 0,
	__prevH: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::ContainerSizeChanged(System.Int32, System.Int32)" />*/
	containerSizeChanged: function (w, h) {
		if ((w != this.__prevW || h != this.__prevH) && this.getParent() != null) {
			this.__isContainerChangingSize = true;
			this.layoutPopup(w, h);
			this.__isContainerChangingSize = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::ContainerSizeChanged(System.Int32, System.Int32)" />*/
	,
	__prevBackGroundColor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::LayoutPopup(System.Int32, System.Int32)" />*/
	layoutPopup: function (w, h) {
		this.__prevW = w;
		this.__prevH = h;
		this.__manager._containerWidth = w;
		this.__manager._containerHeight = h;
		var root = (this.getParent());
		this.__manager.layoutPopup(this, root, w, h);
		if (this.__backgroundView != null) {
			this.ensureBgColor();
			this.measureView1(this.__backgroundView, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::LayoutPopup(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::EnsureBgColor()" />*/
	ensureBgColor: function () {
		if (this.__backgroundView != null) {
			var bgColor = 0;
			if ($.ig.ThemeManager.prototype.theme().isLargeScreen()) {
				bgColor = this.__manager.backgroundViewColor();
			} else {
				bgColor = this.__manager.smallScreenBackgroundViewColor();
			}
			if (this.__prevBackGroundColor != bgColor) {
				this.__prevBackGroundColor = bgColor;
				this.__backgroundView.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(this.__prevBackGroundColor));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::EnsureBgColor()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::FinishedShowing()" />*/
	finishedShowing: function () {
		if (this.__finishedTimer != null) {
			this.__finishedTimer.stop();
			this.__finishedTimer = null;
		}
		if ($.ig.CPPopupManager.prototype.isPopupOpen(this.popupId())) {
			if (this.__manager.autoHidesAfterDuration()) {
				this.__autoHideAnimator.start();
			}
			this.__manager.finishedShowing();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::FinishedShowing()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupManagerBase Infragistics.CPPopupContainerView::Manager()" />*/
	manager: function () {
		return this.__manager;
	}
	/*<EndProperty Name="Infragistics.CPPopupManagerBase Infragistics.CPPopupContainerView::Manager()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		if (!this.__isContainerChangingSize) {
			this.layoutPopup(w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContainerView::Hide(System.Boolean)" />*/
	hide: function (animate) {
		var $self = this;
		if (this.__isOpen) {
			this.__isOpen = false;
			if (this._closingBlock != null) {
				this._closingBlock(this);
			}
			var root = (this.getParent());
			root.unregisterAfterSizeChangedListener(this.__sizeChangeBlock);
			this.__manager.hide();
			this.__manager._isShowing = false;
			this.__manager.closing();
			if (animate && this.__manager.supportsAnimating()) {
				var duration = this.__manager.overrideAnimationOutDuration();
				if (duration == -1) {
					duration = $.ig.ThemeManager.prototype.theme().animationDuration();
				}
				this.animate(duration, function () {
					if ($self.__backgroundView != null) {
						$self.measureView1($self.__backgroundView, 0, 0, $self.__backgroundView.currentWidth(), $self.__backgroundView.currentHeight(), 0);
					}
					$self.__manager.prepareForAnimation($self, root, root.currentWidth(), root.currentHeight());
				}, function (finished) {
					$self.__manager.cleanUp();
					root.removeSubview($self);
					$.ig.NativeUIUtility.prototype.utility().cleanUpRoot(root);
				});
			} else {
				this.__manager.cleanUp();
				root.removeSubview(this);
				$.ig.NativeUIUtility.prototype.utility().cleanUpRoot(root);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContainerView::Hide(System.Boolean)" />*/
	,
	$type: new $.ig.Type('CPPopupContainerView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupContainerView" />*/

/*<BeginType Name="Infragistics.CPPopupContentContainerView" />*/

$.ig.util.defType('CPPopupContentContainerView', 'CPView', {
	__contentInfo: null,
	init: function () {
		$.ig.CPView.prototype.init.call(this);
		this.__contentInfo = new $.ig.Array();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::Push(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PointExecutionBlock)" />*/
	push: function (header, footer, content, title, action) {
		var info = new $.ig.CPPopupContentContainerInfo();
		info._header = header;
		info._footer = footer;
		info._content = content;
		if (action != null) {
			info._navBar = new $.ig.CPPopupContentContainerNavBar(action);
			info._navBar.textLabel().setText(title);
			this.addSubview(info._navBar);
		}
		this.__contentInfo.add(info);
		this.addSubview(content);
		if (header != null) {
			this.addSubview(header);
		}
		if (footer != null) {
			this.addSubview(footer);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::Push(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PointExecutionBlock)" />*/
	,
	_prepareToPop: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::PrepareToPop()" />*/
	prepareToPop: function (value) {
		if (arguments.length === 1) {
			this._prepareToPop = value;
			return value;
		} else {
			return this._prepareToPop;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::PrepareToPop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::Pop()" />*/
	pop: function () {
		this.prepareToPop(false);
		var index = this.__contentInfo.length - 1;
		var info = this.__contentInfo[index];
		if (info._header != null) {
			this.removeSubview(info._header);
		}
		if (info._footer != null) {
			this.removeSubview(info._footer);
		}
		if (info._navBar != null) {
			this.removeSubview(info._navBar);
		}
		this.removeSubview(info._content);
		this.__contentInfo.removeAt(index);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::Pop()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupContentContainerInfo Infragistics.CPPopupContentContainerView::CurrentInfo()" />*/
	currentInfo: function () {
		var index = this.__contentInfo.length - 1;
		if (this.prepareToPop()) {
			index -= 1;
		}
		return this.__contentInfo[index];
	}
	/*<EndProperty Name="Infragistics.CPPopupContentContainerInfo Infragistics.CPPopupContentContainerView::CurrentInfo()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::HasHeader()" />*/
	hasHeader: function () {
		return this.currentInfo()._header != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::HasHeader()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::HasFooter()" />*/
	hasFooter: function () {
		return this.currentInfo()._footer != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupContentContainerView::HasFooter()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentHeader()" />*/
	currentHeader: function () {
		return this.currentInfo()._header;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentHeader()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentFooter()" />*/
	currentFooter: function () {
		return this.currentInfo()._footer;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentFooter()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentContent()" />*/
	currentContent: function () {
		return this.currentInfo()._content;
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPPopupContentContainerView::CurrentContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupContentContainerView::NavHeight()" />*/
	navHeight: function () {
		var navBar = this.currentInfo()._navBar;
		if (navBar != null) {
			return navBar.sizingGuide().height();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupContentContainerView::NavHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		if (w > 1 && h > 1) {
			this.layout(this.prepareToPop());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::UpdateCurrentSizes(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	updateCurrentSizes: function (w, h, hh, fh) {
		var info = this.currentInfo();
		var isEmpty = info._width == 0;
		info._width = w;
		info._height = h;
		info._headerHeight = hh;
		info._footerHeight = fh;
		if (isEmpty && this.__contentInfo.length > 1) {
			this.layoutItem(w, this.__contentInfo.length - 1);
		} else {
			this.layout(this.prepareToPop());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::UpdateCurrentSizes(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::TriggerLayout()" />*/
	triggerLayout: function () {
		this.layout(this.prepareToPop());
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::TriggerLayout()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerView::Layout(System.Boolean)" />*/
	layout: function (prepare) {
		var count = this.__contentInfo.length;
		var index = count - 1;
		if (prepare && count > 1) {
			index = count - 2;
		}
		var left = 0;
		for (var i = 0; i < index; i++) {
			var info = this.__contentInfo[i];
			left -= info._width;
		}
		for (var i1 = 0; i1 < count; i1++) {
			left += this.layoutItem(left, i1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerView::Layout(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupContentContainerView::LayoutItem(System.Int32, System.Int32)" />*/
	layoutItem: function (left, i) {
		var top = 0;
		var info = this.__contentInfo[i];
		var w = info._width;
		var h = info._height;
		var hh = 0;
		var fh = 0;
		var nh = 0;
		if (info._navBar != null) {
			nh = info._navBar.sizingGuide().height();
			this.measureView1(info._navBar, left, top, w, nh, 1);
			top += nh;
		}
		if (info._header != null) {
			hh = info._headerHeight;
			this.measureView1(info._header, left, top, w, hh, 1);
			top += hh;
		}
		if (info._footer != null) {
			fh = info._footerHeight;
			this.measureView1(info._footer, left, h - fh, w, fh, 1);
		}
		var containerSize = h - hh - fh - nh;
		this.measureView1(info._content, left, top, w, containerSize, 1);
		return w;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupContentContainerView::LayoutItem(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupContentContainerView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupContentContainerView" />*/

/*<BeginType Name="Infragistics.CPPopupContentContainerInfo" />*/

$.ig.util.defType('CPPopupContentContainerInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_header: null,
	_footer: null,
	_content: null,
	_width: 0,
	_height: 0,
	_headerHeight: 0,
	_footerHeight: 0,
	_navBar: null,
	$type: new $.ig.Type('CPPopupContentContainerInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupContentContainerInfo" />*/

/*<BeginType Name="Infragistics.CPPopupContentContainerNavBar" />*/

$.ig.util.defType('CPPopupContentContainerNavBar', 'CPGridViewItemCell', {
	__backButton: null,
	init: function (action) {
		$.ig.CPGridViewItemCell.prototype.init.call(this, $.ig.CPTheme.prototype.itemGuideStyleMedium, "x");
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.disable();
		this.ignoreDisabledOpacity(true);
		this.setCornerRadius(0);
		this.__backButton = new $.ig.CPIconButton(0, this.sizingGuide().buttonStyleName(), $.ig.CPIconButtonStyle.prototype.standard);
		this.__backButton.setIcon($.ig.UIPathIcons.prototype.icons().getBackButtonArrowIcon());
		this.__backButton.addClickHandler(action);
		this.contentContainer().addSubview(this.__backButton);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupContentContainerNavBar::HasLeftContent()" />*/
	hasLeftContent: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupContentContainerNavBar::HasLeftContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupContentContainerNavBar::NumberOfItemsInLeftContentArea()" />*/
	numberOfItemsInLeftContentArea: function () {
		return 1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupContentContainerNavBar::NumberOfItemsInLeftContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupContentContainerNavBar::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutLeftContentArea: function (index, x, guide) {
		this.layoutButton(this.__backButton, false, false, x, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupContentContainerNavBar::LayoutLeftContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPPopupContentContainerNavBar', $.ig.CPGridViewItemCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupContentContainerNavBar" />*/

/*<BeginType Name="Infragistics.CPPopupListItemBase" />*/

$.ig.util.defType('CPPopupListItemBase', 'Object', {
	_tag: null,
	_action: null,
	_isSelected: false,
	_returnCellInCallback: false,
	_selectionMode: 0,
	_alwaysShowRadialSelectionIndicator: false,
	_allowMultipleSelection: false,
	_shouldStretch: false,
	_hasFocus: false,
	init: function (initNumber, itemTag, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._tag = itemTag;
		this._action = actionItem;
		this._calculatedHeight = 0;
		this._calculatedWidth = 0;
		this._isSelected = false;
		this._selectionMode = $.ig.CPPopupListItemSelectionMode.prototype.radial;
	},
	init1: function (initNumber, selected, itemTag, actionItem) {
		$.ig.Object.prototype.init.call(this);
		this._isSelected = selected;
		this._tag = itemTag;
		this._action = actionItem;
		this._calculatedHeight = 0;
		this._calculatedWidth = 0;
		this._selectionMode = $.ig.CPPopupListItemSelectionMode.prototype.radial;
	},
	init2: function (initNumber, selected, itemTag, actionItem, alwaysShowSelectionIndicator) {
		$.ig.Object.prototype.init.call(this);
		this._isSelected = selected;
		this._tag = itemTag;
		this._action = actionItem;
		this._calculatedHeight = 0;
		this._calculatedWidth = 0;
		this._selectionMode = $.ig.CPPopupListItemSelectionMode.prototype.radial;
		this._alwaysShowRadialSelectionIndicator = alwaysShowSelectionIndicator;
	},
	_supportsDrillDown: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListItemBase::SupportsDrillDown()" />*/
	supportsDrillDown: function (value) {
		if (arguments.length === 1) {
			this._supportsDrillDown = value;
			return value;
		} else {
			return this._supportsDrillDown;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListItemBase::SupportsDrillDown()" />*/
	,
	_drillDownTitle: null,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListItemBase::DrillDownTitle()" />*/
	drillDownTitle: function (value) {
		if (arguments.length === 1) {
			this._drillDownTitle = value;
			return value;
		} else {
			return this._drillDownTitle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListItemBase::DrillDownTitle()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListItemBase::DoesItemSupportsDrillDown()" />*/
	doesItemSupportsDrillDown: function () {
		return this.supportsDrillDown();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListItemBase::DoesItemSupportsDrillDown()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListItemBase::CellIdentifier()" />*/
	cellIdentifier: function () {
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListItemBase::CellIdentifier()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemBase::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemBase::CreateNewCell(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListItemBase::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListItemBase::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	_calculatedHeight: 0,
	_calculatedWidth: 0,
	$type: new $.ig.Type('CPPopupListItemBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListItemBase" />*/

/*<BeginType Name="Infragistics.CPPopupListItem" />*/

$.ig.util.defType('CPPopupListItem', 'CPPopupListItemBase', {
	_icon: null,
	_name: null,
	_description: null,
	_iconColor: null,
	_textColorMatchesIcon: false,
	_outlineOnly: false,
	_textAlignment: 0,
	_itemHeight: 0,
	_iconDesaturatePercent: 0,
	_lightenIconColorByPercentage: 0,
	_darkenIconColorByPercentage: 0,
	_fontSize: 0,
	_font: null,
	_customRestOpacity: 0,
	init: function (initNumber, itemIcon, itemName, itemTag, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
				case 5:
					this.init5.apply(this, arguments);
					break;
				case 6:
					this.init6.apply(this, arguments);
					break;
				case 7:
					this.init7.apply(this, arguments);
					break;
			}
			return;
		}
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(0);
		this._icon = itemIcon;
		this._name = itemName;
		this.updateFont();
	},
	/*<BeginProperty Name="System.String Infragistics.CPPopupListItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		if (this._customRestOpacity > 0) {
			return "itemWithCustomOpacity";
		}
		return "item";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListItem::CellIdentifier()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListItem::UpdateIconColor(System.ColorInt)" />*/
	updateIconColor: function (itemIconColor) {
		if (itemIconColor == 0) {
			this._iconColor = $.ig.ThemeManager.prototype.theme().foregroundColor().color();
		} else {
			this._iconColor = itemIconColor;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListItem::UpdateIconColor(System.ColorInt)" />*/
	,
	init1: function (initNumber, itemIcon, itemIconColor, itemName, itemTag, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this.updateFont();
	},
	init2: function (initNumber, itemIcon, itemIconColor, itemName, selected, itemTag, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init1.call(this, 1, selected, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this.updateFont();
	},
	init3: function (initNumber, itemIcon, itemIconColor, itemName, selected, itemTag, cellHeight, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init1.call(this, 1, selected, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this._itemHeight = cellHeight;
		this.updateFont();
	},
	init4: function (initNumber, itemIcon, itemIconColor, itemName, selected, itemTag, actionItem, alwaysShowSelectionIndicator) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init2.call(this, 2, selected, itemTag, actionItem, alwaysShowSelectionIndicator);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this.updateFont();
	},
	init5: function (initNumber, itemIcon, itemIconColor, itemName, selected, itemSelectionMode, itemTag, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init1.call(this, 1, selected, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this._selectionMode = itemSelectionMode;
		this.updateFont();
	},
	init6: function (initNumber, itemIcon, itemIconColor, itemName, itemDescription, selected, itemTag, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init1.call(this, 1, selected, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this._textColorMatchesIcon = true;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this._description = itemDescription;
		this.updateFont();
	},
	init7: function (initNumber, itemIcon, itemIconColor, textColorMatchesIconColor, itemName, itemTag, actionItem) {
		this._iconColor = new $.ig.Number();
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._textAlignment = $.ig.TextAlignment.prototype.left;
		this.updateIconColor(itemIconColor);
		this._icon = itemIcon;
		this._name = itemName;
		this._textColorMatchesIcon = textColorMatchesIconColor;
		this.updateFont();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListItem::UpdateFont()" />*/
	updateFont: function () {
		this._fontSize = this.resolveFontSize();
		this._font = this.resolveFont();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListItem::UpdateFont()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItem::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		var cell = new $.ig.CPPopupListViewCell(identifier);
		if (this._customRestOpacity > 0) {
			cell.restOpacity(this._customRestOpacity);
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItem::CreateNewCell(System.String)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CPPopupListItem::ResolveFontSize()" />*/
	resolveFontSize: function () {
		return $.ig.ThemeManager.prototype.theme().popupListSizingGuide().fontSize();
	}
	/*<EndMethod Name="System.Single Infragistics.CPPopupListItem::ResolveFontSize()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupListItem::ResolveFont()" />*/
	resolveFont: function () {
		return $.ig.ThemeManager.prototype.theme().regularFont();
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupListItem::ResolveFont()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		var guide = $.ig.ThemeManager.prototype.theme().popupListSizingGuide();
		if (this._name != null) {
			measureLabel.setFont(this.resolveFontSize(), this.resolveFont());
			measureLabel.setText(this._name);
			measureLabel.calculateSizeToFit();
			var calculatedWidth = measureLabel.getCalculatedWidth();
			if (this._description != null) {
				var subLabelFontSize = $.ig.ThemeManager.prototype.theme().fontSizeSecondary();
				measureLabel.setFont(subLabelFontSize, $.ig.ThemeManager.prototype.theme().regularFont());
				measureLabel.setText(this._description);
				measureLabel.calculateSizeToFit();
				calculatedWidth = Math.max(calculatedWidth, measureLabel.getCalculatedWidth());
			}
			this._calculatedHeight = this._itemHeight > 0 ? this._itemHeight : guide.height();
			if (this._icon != null) {
				this._calculatedWidth = calculatedWidth + $.ig.truncate((this._calculatedHeight * 1.5));
			} else {
				this._calculatedWidth = calculatedWidth + $.ig.truncate((this._calculatedHeight / 1.5));
			}
		} else {
			this._calculatedWidth = this._calculatedHeight = this._itemHeight > 0 ? this._itemHeight : guide.height();
		}
		if (this._alwaysShowRadialSelectionIndicator && this._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.radial) {
			this._calculatedWidth += guide.buttonGuide().size();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	$type: new $.ig.Type('CPPopupListItem', $.ig.CPPopupListItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListItem" />*/

/*<BeginType Name="Infragistics.CPPopupListViewCellBase" />*/

$.ig.util.defType('CPPopupListViewCellBase', 'CPGridViewItemIconCell', {
	__item: null,
	_popup: null,
	__selectedCheckView: null,
	__selectedBorderView: null,
	_selectionBoxBaseSize: 0,
	init: function (identifier) {
		$.ig.CPGridViewItemIconCell.prototype.init.call(this, $.ig.ThemeManager.prototype.theme().popupListSizingGuide().name(), identifier);
		this.setCornerRadius(0);
		this.textLabel().shouldSteaFocusFromTextEditors(false);
		this.subTextLabel().shouldSteaFocusFromTextEditors(false);
		if (this.supportsSelectedView()) {
			this.__selectedBorderView = new $.ig.CPView();
			this.__selectedBorderView.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
			this.__selectedBorderView.setBorderColor($.ig.ThemeManager.prototype.theme().accentColor().$native());
			this.__selectedBorderView.isHidden(true);
			this.__selectedBorderView.shouldSteaFocusFromTextEditors(false);
			this.addSubview(this.__selectedBorderView);
			this.__selectedCheckView = new $.ig.PathIconView();
			this.__selectedCheckView.setIcon($.ig.UIPathIcons.prototype.icons().getCheckedIcon());
			this.__selectedCheckView._outlineOnly = false;
			this.__selectedCheckView.iconColor($.ig.ThemeManager.prototype.theme().checkedColor().$native());
			this.__selectedCheckView.isHidden(true);
			this.__selectedCheckView.shouldSteaFocusFromTextEditors(false);
			this.addSubview(this.__selectedCheckView);
		}
		this.shouldSteaFocusFromTextEditors(false);
		this.iconView().shouldSteaFocusFromTextEditors(false);
		this.iconRestOpacity(this.restOpacity());
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetSelectedBorderWidth(System.Int32)" />*/
	setSelectedBorderWidth: function (width) {
		this.__selectedBorderView.setBorderWidth(width);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetSelectedBorderWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetSelectedBorderColor(System.String)" />*/
	setSelectedBorderColor: function (color) {
		this.__selectedBorderView.setBorderColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetSelectedBorderColor(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsDrillDown()" />*/
	supportsDrillDown: function () {
		return this.__item.doesItemSupportsDrillDown();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsDrillDown()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsSelectedView()" />*/
	supportsSelectedView: function () {
		return !this.hideSelectedView();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsSelectedView()" />*/
	,
	_hideSelectedView: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::HideSelectedView()" />*/
	hideSelectedView: function (value) {
		if (arguments.length === 1) {
			this._hideSelectedView = value;
			return value;
		} else {
			return this._hideSelectedView;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::HideSelectedView()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupListItemBase Infragistics.CPPopupListViewCellBase::PopupItem()" />*/
	popupItem: function () {
		return this.__item;
	}
	/*<EndProperty Name="Infragistics.CPPopupListItemBase Infragistics.CPPopupListViewCellBase::PopupItem()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetItem(Infragistics.CPPopupListItemBase)" />*/
	setItem: function (item) {
		this.__item = item;
		if (this.supportsSelectedView()) {
			if (this.__item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.border) {
				this.__selectedBorderView.isHidden(!this.__item._isSelected);
			} else if (this.__item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.none) {
				this.__selectedBorderView.isHidden(true);
				this.__selectedCheckView.isHidden(true);
			} else {
				if (item._alwaysShowRadialSelectionIndicator) {
					var checkedIcon = this.__item._allowMultipleSelection ? $.ig.UIPathIcons.prototype.icons().getSelectedIcon() : $.ig.UIPathIcons.prototype.icons().getCheckedIcon();
					var uncheckedIcon = this.__item._allowMultipleSelection ? $.ig.UIPathIcons.prototype.icons().getUnselectedIcon() : $.ig.UIPathIcons.prototype.icons().getUncheckedIcon();
					this.__selectedCheckView.setIcon(item._isSelected ? checkedIcon : uncheckedIcon);
					this.__selectedCheckView.iconColor(item._isSelected ? $.ig.ThemeManager.prototype.theme().checkedColor().$native() : $.ig.ThemeManager.prototype.theme().uncheckedColor().$native());
					this.__selectedCheckView.isHidden(false);
					this.__selectedCheckView.render1(false);
					if (item._isSelected) {
						$.ig.UIUtility.prototype.setAccessibilityName1(this.__selectedCheckView, "icon_checked");
					} else {
						$.ig.UIUtility.prototype.setAccessibilityName1(this.__selectedCheckView, "icon_unchecked");
					}
				} else {
					this.__selectedCheckView.isHidden(!this.__item._isSelected);
				}
			}
		}
		this.processItem(item);
		this.sizeChanged(this.currentWidth(), this.currentHeight());
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SetItem(Infragistics.CPPopupListItemBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		if (this.hasTextArea()) {
			$.ig.CPGridViewItemIconCell.prototype.sizeChanged.call(this, w, h);
		} else {
			var size = this.sizingGuide().buttonGuide().iconSize();
			this.contentContainer().measureView1(this.iconView(), $.ig.intDivide((w - size), 2), $.ig.intDivide((h - size), 2), size, size, this.resolveOpacity(this.restOpacity(), true));
		}
		if (this.supportsSelectedView()) {
			var baseSize = Math.min(w, h);
			var p = $.ig.truncate((baseSize * 0.1));
			this._selectionBoxBaseSize = baseSize - p * 2;
			if (this.__item != null && this.__item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.border) {
				this.measureSelectedView(p, p, w - p * 2, h - p * 2, $.ig.ThemeManager.prototype.theme().itemCornerRadius());
			} else {
				this.measureSelectedView(0, 0, w, h, $.ig.ThemeManager.prototype.theme().itemCornerRadius());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::MeasureSelectedView(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	measureSelectedView: function (x, y, w, h, cornerRadius) {
		if (this.__item != null && this.__item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.border) {
			this.__selectedBorderView.setCornerRadius(cornerRadius);
			this.measureView(this.__selectedBorderView, x, y, w, h);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::MeasureSelectedView(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupListViewCellBase::RightEdgePadding()" />*/
	rightEdgePadding: function () {
		return this.leftEdgePadding();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupListViewCellBase::RightEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::HasRightContent()" />*/
	hasRightContent: function () {
		return this.supportsSelectedView() && this.__item != null && this.__item._alwaysShowRadialSelectionIndicator && this.__item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.radial;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::HasRightContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		$.ig.CPGridViewItemIconCell.prototype.layoutRightContentArea.call(this, index, x, guide);
		this.layoutIcon(this.__selectedCheckView, 0, index, x, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	processItem: function (item) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.CPPopupListViewCellBase::CellTag()" />*/
	cellTag: function () {
		return this.__item._tag;
	}
	/*<EndProperty Name="System.Object Infragistics.CPPopupListViewCellBase::CellTag()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCellBase::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPGridViewItemIconCell.prototype.handleClick.call(this, x, y);
		var multiSelect = this.__item != null && this.__item._allowMultipleSelection;
		if (this._gridView != null && !multiSelect) {
			var dsh = this._gridView.getDataSource();
			if (dsh != null) {
				var data = dsh.data();
				for (var i = 0; i < data.length; i++) {
					var item = data[i];
					item._isSelected = false;
				}
			}
		}
		if (this.__item != null) {
			if (multiSelect) {
				this.__item._isSelected = !this.__item._isSelected;
				this.setItem(this.__item);
			} else {
				this.__item._isSelected = true;
			}
			var obj = this.__item._returnCellInCallback ? this : this.__item._tag;
			if (this.__item._action != null && this.__item._action(obj)) {
				if (this._popup != null) {
					this._popup.hide(true);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCellBase::HandleClick(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsTooltips()" />*/
	supportsTooltips: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCellBase::SupportsTooltips()" />*/
	,
	$type: new $.ig.Type('CPPopupListViewCellBase', $.ig.CPGridViewItemIconCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListViewCellBase" />*/

/*<BeginType Name="Infragistics.CPPopupListViewCell" />*/

$.ig.util.defType('CPPopupListViewCell', 'CPPopupListViewCellBase', {
	__hasText: false,
	init: function (identifier) {
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	processItem: function (item) {
		$.ig.CPPopupListViewCellBase.prototype.processItem.call(this, item);
		var listItem = item;
		this.__hasText = listItem._name != null && listItem._name.length > 0;
		this.setIconOutline(listItem._outlineOnly);
		this.setIcon(listItem._icon);
		if (listItem._textColorMatchesIcon) {
			this.setColor(new $.ig.CPThemeColor(0, listItem._iconColor));
		} else {
			this.setIconColor(listItem._iconColor);
		}
		if (listItem._iconDesaturatePercent != 0) {
			this.setIconDesaturatePercent(listItem._iconDesaturatePercent);
		}
		if (listItem._lightenIconColorByPercentage != 0) {
			this.lightenOrDarkenIconColorByPercentage(true, listItem._lightenIconColorByPercentage);
		}
		if (listItem._darkenIconColorByPercentage != 0) {
			this.lightenOrDarkenIconColorByPercentage(false, listItem._darkenIconColorByPercentage);
		}
		this.refreshIcon();
		if (this.__hasText) {
			this.textLabel().setText(listItem._name);
			this.textLabel().setTextAlignment(listItem._textAlignment);
			this.textLabel().setFont(listItem._fontSize, listItem._font);
		}
		if (listItem._description != null && listItem._description.length > 0) {
			this.subTextLabel().setText(listItem._description);
			this.subTextLabel().setTextAlignment(listItem._textAlignment);
		} else {
			this.subTextLabel().setText(null);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasTextArea()" />*/
	hasTextArea: function () {
		return this.__hasText;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasTextArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return $.ig.CPPopupListViewCellBase.prototype.hasCenterContentArea.call(this) || this.hasIcon();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasCenterContentArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasLeftContent()" />*/
	hasLeftContent: function () {
		return $.ig.CPPopupListViewCellBase.prototype.hasLeftContent.call(this) && this.__hasText;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewCell::HasLeftContent()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		if (this.__hasText) {
			$.ig.CPPopupListViewCellBase.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
		} else {
			this.layoutIcon(this.iconView(), 0, 0, $.ig.intDivide((x + w), 2) - $.ig.intDivide(guide.buttonGuide().size(), 2), guide);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPPopupListViewCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListViewCell" />*/

/*<BeginType Name="Infragistics.CPPopupListDrillItem" />*/

$.ig.util.defType('CPPopupListDrillItem', 'CPPopupListItem', {
	init: function (initNumber, drillDownTitle, itemIcon, itemName, itemTag, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItem.prototype.init.call(this, 0, itemIcon, itemName, itemTag, actionItem);
		this.drillDownTitle(drillDownTitle);
		this._returnCellInCallback = true;
	},
	init1: function (initNumber, drillDownTitle, itemIcon, itemIconColor, itemName, itemTag, actionItem) {
		$.ig.CPPopupListItem.prototype.init1.call(this, 1, itemIcon, itemIconColor, itemName, itemTag, actionItem);
		this.drillDownTitle(drillDownTitle);
		this._returnCellInCallback = true;
	},
	init2: function (initNumber, drillDownTitle, itemIcon, itemIconColor, itemName, itemDescription, selected, itemTag, actionItem) {
		$.ig.CPPopupListItem.prototype.init6.call(this, 6, itemIcon, itemIconColor, itemName, itemDescription, selected, itemTag, actionItem);
		this.drillDownTitle(drillDownTitle);
		this._returnCellInCallback = true;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListDrillItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		$.ig.CPPopupListItem.prototype.calculateSizeToFit.call(this, measureLabel);
		this._calculatedWidth += this._calculatedHeight;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListDrillItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListDrillItem::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		return new $.ig.CPPopupListViewDrillItemCell(identifier);
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListDrillItem::CreateNewCell(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListDrillItem::DoesItemSupportsDrillDown()" />*/
	doesItemSupportsDrillDown: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListDrillItem::DoesItemSupportsDrillDown()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListDrillItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "drillItem";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListDrillItem::CellIdentifier()" />*/
	,
	$type: new $.ig.Type('CPPopupListDrillItem', $.ig.CPPopupListItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListDrillItem" />*/

/*<BeginType Name="Infragistics.CPPopupListViewDrillItemCell" />*/

$.ig.util.defType('CPPopupListViewDrillItemCell', 'CPPopupListViewCell', {
	__drillIcon: null,
	init: function (identifier) {
		$.ig.CPPopupListViewCell.prototype.init.call(this, identifier);
		this.__drillIcon = new $.ig.PathIconView();
		this.__drillIcon.iconColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__drillIcon.setIcon($.ig.UIPathIcons.prototype.icons().getRightArrowIcon());
		this.addSubview(this.__drillIcon);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewDrillItemCell::HasRightContent()" />*/
	hasRightContent: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewDrillItemCell::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupListViewDrillItemCell::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		return 1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupListViewDrillItemCell::NumberOfItemsInRightContentArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListViewDrillItemCell::SupportsSelectedView()" />*/
	supportsSelectedView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListViewDrillItemCell::SupportsSelectedView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewDrillItemCell::SetDrillIconColor(System.String)" />*/
	setDrillIconColor: function (color) {
		this.__drillIcon.iconColor(color);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewDrillItemCell::SetDrillIconColor(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListViewDrillItemCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		this.layoutIcon(this.__drillIcon, 0, 0, x, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListViewDrillItemCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPPopupListViewDrillItemCell', $.ig.CPPopupListViewCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListViewDrillItemCell" />*/

/*<BeginType Name="Infragistics.CPPopupListItemSpacer" />*/

$.ig.util.defType('CPPopupListItemSpacer', 'CPPopupListItemBase', {
	__hasSeparator: false,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItemSpacer.prototype.init1.call(this, 1, false);
	},
	init1: function (initNumber, hasSeparator) {
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, null, null);
		this.__hasSeparator = hasSeparator;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListItemSpacer::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		this._calculatedHeight = $.ig.ThemeManager.prototype.theme().padding10();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListItemSpacer::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemSpacer::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		if (this.__hasSeparator) {
			return new $.ig.CPPopupSeparatorViewCell(this.cellIdentifier());
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemSpacer::CreateNewCell(System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListItemSpacer::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "spacer";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListItemSpacer::CellIdentifier()" />*/
	,
	$type: new $.ig.Type('CPPopupListItemSpacer', $.ig.CPPopupListItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListItemSpacer" />*/

/*<BeginType Name="Infragistics.CPPopupListItemLabel" />*/

$.ig.util.defType('CPPopupListItemLabel', 'CPPopupListItem', {
	__overrideBackgroundColor: null,
	__appearsDisabled: false,
	init: function (initNumber, label) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItemLabel.prototype.init1.call(this, 1, label, null, false);
	},
	init1: function (initNumber, label, overrideBackgroundColor, appearsDisbled) {
		$.ig.CPPopupListItem.prototype.init.call(this, 0, null, label, null, null);
		this.__overrideBackgroundColor = overrideBackgroundColor;
		this.__appearsDisabled = appearsDisbled;
	},
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemLabel::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		var cell = new $.ig.CPPopupListViewCell(identifier);
		cell.setBackgroundColor(this.__overrideBackgroundColor != null ? this.__overrideBackgroundColor.$native() : $.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		cell.font($.ig.ThemeManager.prototype.theme().mediumFont());
		cell.textLabel().setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		cell.hideSelectedView(true);
		cell.isFocusable(false);
		cell.disableBackgroundHighlights(true);
		cell.ignoreDisabledOpacity(!this.__appearsDisabled);
		cell.disable();
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListItemLabel::CreateNewCell(System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListItemLabel::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "label";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListItemLabel::CellIdentifier()" />*/
	,
	$type: new $.ig.Type('CPPopupListItemLabel', $.ig.CPPopupListItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListItemLabel" />*/

/*<BeginType Name="Infragistics.CPPopupListDeleteItem" />*/

$.ig.util.defType('CPPopupListDeleteItem', 'CPPopupListItem', {
	init: function (itemIcon, itemName, itemTag, actionItem) {
		$.ig.CPPopupListItem.prototype.init7.call(this, 7, itemIcon, $.ig.ThemeManager.prototype.theme().errorColorTextOnly().color(), true, itemName, itemTag, actionItem);
	},
	/*<BeginProperty Name="System.String Infragistics.CPPopupListDeleteItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "deleteItem";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListDeleteItem::CellIdentifier()" />*/
	,
	$type: new $.ig.Type('CPPopupListDeleteItem', $.ig.CPPopupListItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListDeleteItem" />*/

/*<BeginType Name="Infragistics.CPPopupListOpenItem" />*/

$.ig.util.defType('CPPopupListOpenItem', 'CPPopupListItem', {
	init: function (initNumber, itemName, itemTag, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItem.prototype.init7.call(this, 7, $.ig.UIPathIcons.prototype.icons().getOpenIcon(), $.ig.ThemeManager.prototype.theme().foregroundColor().color(), true, itemName, itemTag, actionItem);
	},
	init1: function (initNumber, icon, itemName, itemTag, actionItem) {
		$.ig.CPPopupListItem.prototype.init7.call(this, 7, icon, $.ig.ThemeManager.prototype.theme().foregroundColor().color(), true, itemName, itemTag, actionItem);
	},
	/*<BeginMethod Name="System.String Infragistics.CPPopupListOpenItem::ResolveFont()" />*/
	resolveFont: function () {
		return $.ig.ThemeManager.prototype.theme().boldFont();
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupListOpenItem::ResolveFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPPopupListOpenItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "openItem";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListOpenItem::CellIdentifier()" />*/
	,
	$type: new $.ig.Type('CPPopupListOpenItem', $.ig.CPPopupListItem.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListOpenItem" />*/

/*<BeginType Name="Infragistics.CPPopupSeciton" />*/

$.ig.util.defType('CPPopupSeciton', 'CPView', {
	init: function () {
		$.ig.CPView.prototype.init.call(this);
	},
	__sectionBackgroundColor: null,
	/*<BeginProperty Name="System.String Infragistics.CPPopupSeciton::SectionBackgroundColor()" />*/
	sectionBackgroundColor: function (value) {
		if (arguments.length === 1) {
			this.__sectionBackgroundColor = value;
			this.setBackgroundColor(this.__sectionBackgroundColor);
			return value;
		} else {
			return this.__sectionBackgroundColor;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupSeciton::SectionBackgroundColor()" />*/
	,
	$type: new $.ig.Type('CPPopupSeciton', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSeciton" />*/

/*<BeginType Name="Infragistics.CPPopupFooter" />*/

$.ig.util.defType('CPPopupFooter', 'CPPopupSeciton', {
	init: function () {
		$.ig.CPPopupSeciton.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupFooter::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return $.ig.ThemeManager.prototype.theme().mediumHitSize();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupFooter::GetCalculatedHeight()" />*/
	,
	$type: new $.ig.Type('CPPopupFooter', $.ig.CPPopupSeciton.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupFooter" />*/

/*<BeginType Name="Infragistics.CPPopupListFooterWithTextInput" />*/

$.ig.util.defType('CPPopupListFooterWithTextInput', 'CPPopupFooter', {
	__textInput: null,
	init: function (text, hintText, buttonText, buttonClicked) {
		$.ig.CPPopupFooter.prototype.init.call(this);
		this.__textInput = new $.ig.CPPopupTextInputCell(text, hintText, buttonText, buttonClicked, "footer");
		this.addSubview(this.__textInput);
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListFooterWithTextInput::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return $.ig.ThemeManager.prototype.theme().smallHitSize();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListFooterWithTextInput::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListFooterWithTextInput::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__textInput.getCalculatedWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListFooterWithTextInput::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListFooterWithTextInput::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPPopupFooter.prototype.sizeChanged.call(this, w, h);
		this.measureView1(this.__textInput, 0, 0, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListFooterWithTextInput::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupListFooterWithTextInput', $.ig.CPPopupFooter.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListFooterWithTextInput" />*/

/*<BeginType Name="Infragistics.CPPopupTextInputCell" />*/

$.ig.util.defType('CPPopupTextInputCell', 'CPPopupListViewCellBase', {
	__button: null,
	__textbox: null,
	__measureLabel: null,
	init: function (text, hintText, buttonText, buttonClicked, identifier) {
		var $self = this;
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
		this.__button = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleLarge, $.ig.CPIconButtonStyle.prototype.standard);
		this.__button.setText(buttonText);
		this.__button.setColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().$native());
		this.__button.disable();
		this.__button.addClickHandler(function (x, y) {
			if (buttonClicked != null) {
				buttonClicked($self.__textbox.getText());
			}
		});
		this.addSubview(this.__button);
		this.__textbox = new $.ig.CPDialogTextBox(1, false, $.ig.CPTheme.prototype.itemGuideStyleLarge, "inputText");
		this.__textbox._useBorder = false;
		this.__textbox._useShadow = false;
		this.__textbox._supportsHoverBackground = false;
		this.__textbox.setCornerRadius(0);
		this.__textbox.setText(text);
		this.__textbox.setHintText(hintText);
		this.__textbox.ensureStates();
		this.__textbox.registerGotFocus(function () {
		});
		this.__textbox.registerLostFocus(function () {
		});
		this.__textbox.registerTextChanged(function () {
			$self.textChanged();
		});
		this.addSubview(this.__textbox);
		var sizingGuide = $.ig.ThemeManager.prototype.theme().resolveItemGuide($.ig.CPTheme.prototype.itemGuideStyleLarge);
		this.__measureLabel = new $.ig.CPLabel();
		this.__measureLabel.setFont(this.sizingGuide().fontSize(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__measureLabel.setText(hintText);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupTextInputCell::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupTextInputCell::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupTextInputCell::GetText()" />*/
	getText: function () {
		return this.__textbox.getText();
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupTextInputCell::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupTextInputCell::TextChanged()" />*/
	textChanged: function () {
		var text = this.__textbox.getText();
		if (!$.ig.CPStringUtility.prototype.isNullOrEmpty(text)) {
			this.__button.enable();
		} else {
			this.__button.disable();
		}
		this.triggerSizeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupTextInputCell::TextChanged()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupTextInputCell::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		this.__measureLabel.calculateSizeToFit();
		this.__button.calculateSizeToFit();
		var calcW = this.__measureLabel.getCalculatedWidth() + this.__button.getCalculatedWidth() + $.ig.ThemeManager.prototype.theme().padding40();
		return calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupTextInputCell::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupTextInputCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPPopupListViewCellBase.prototype.sizeChanged.call(this, w, h);
		this.__button.calculateSizeToFit();
		var bw = this.__button.getCalculatedWidth();
		var bh = this.__button.getCalculatedHeight();
		this.measureView1(this.__button, w - bw, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh, this.__button.isDisabled() ? $.ig.ThemeManager.prototype.theme().disabledOpacity() : 1);
		this.__textbox.calculateSizeToFit();
		this.measureView1(this.__textbox, 0, 0, w - bw, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupTextInputCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupTextInputCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupTextInputCell" />*/

/*<BeginType Name="Infragistics.CPPopupSeparatorViewCell" />*/

$.ig.util.defType('CPPopupSeparatorViewCell', 'CPPopupListViewCellBase', {
	__separator: null,
	init: function (identifier) {
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.hideSelectedView(true);
		this.isFocusable(false);
		this.disableBackgroundHighlights(true);
		this.ignoreDisabledOpacity(true);
		this.disable();
		this.__separator = new $.ig.CPViewBase();
		this.__separator.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
		this.addSubview(this.__separator);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSeparatorViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPPopupListViewCellBase.prototype.sizeChanged.call(this, w, h);
		var padding15 = $.ig.ThemeManager.prototype.theme().padding15();
		var sepSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
		var y = h - $.ig.intDivide(sepSize, 2);
		this.measureView1(this.__separator, padding15, y, w - (padding15 * 2), sepSize, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSeparatorViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupSeparatorViewCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSeparatorViewCell" />*/

/*<BeginType Name="Infragistics.CPPopupListButtonItem" />*/

$.ig.util.defType('CPPopupListButtonItem', 'CPPopupListItemBase', {
	__uid: null,
	__button: null,
	__title: null,
	init: function (initNumber, button, itemTag, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this.__button = button;
		this.__button.disable();
		this.__button.ignoreDisabledOpacity(true);
		this.__button.setCursor($.ig.CPCursors.prototype.clickable);
	},
	init1: function (initNumber, title, button, itemTag, actionItem) {
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this.__button = button;
		this.__title = title;
	},
	/*<BeginProperty Name="System.String Infragistics.CPPopupListButtonItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		if (this.__uid == null) {
			this.__uid = $.ig.NativeStringUtility.prototype.generateUID();
		}
		return this.__uid;
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupListButtonItem::CellIdentifier()" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.CPPopupListButtonItem::ResolveFontSize()" />*/
	resolveFontSize: function () {
		return $.ig.ThemeManager.prototype.theme().popupListSizingGuide().fontSize();
	}
	/*<EndMethod Name="System.Single Infragistics.CPPopupListButtonItem::ResolveFontSize()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupListButtonItem::ResolveFont()" />*/
	resolveFont: function () {
		return $.ig.ThemeManager.prototype.theme().regularFont();
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupListButtonItem::ResolveFont()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListButtonItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		var cw = 0;
		if (this.__title != null) {
			measureLabel.setFont(this.resolveFontSize(), this.resolveFont());
			measureLabel.setText(this.__title);
			measureLabel.calculateSizeToFit();
			cw = measureLabel.getCalculatedWidth() + $.ig.ThemeManager.prototype.theme().padding20();
		}
		this.__button.calculateSizeToFit();
		this._calculatedHeight = $.ig.ThemeManager.prototype.theme().popupListSizingGuide().height();
		this._calculatedWidth = cw + this.__button.getCalculatedWidth();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListButtonItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListButtonItem::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		return new $.ig.CPPopupListButtonCell(this.__title, this.__button, identifier);
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupListButtonItem::CreateNewCell(System.String)" />*/
	,
	$type: new $.ig.Type('CPPopupListButtonItem', $.ig.CPPopupListItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListButtonItem" />*/

/*<BeginType Name="Infragistics.CPPopupListButtonCell" />*/

$.ig.util.defType('CPPopupListButtonCell', 'CPPopupListViewCellBase', {
	__button: null,
	__hasTitle: false,
	init: function (title, button, identifier) {
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
		this.__hasTitle = (title != null);
		if (this.__hasTitle) {
			this.textLabel().setFont($.ig.ThemeManager.prototype.theme().popupListSizingGuide().fontSize(), $.ig.ThemeManager.prototype.theme().regularFont());
			this.textLabel().setText(title);
		}
		this.__button = button;
		if (this.__button.getParent() != null) {
			var p = this.__button.getParent();
			p.removeSubview(this.__button);
		}
		this.contentContainer().addSubview(this.__button);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListButtonCell::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListButtonCell::HasCenterContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListButtonCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		this.__button.calculateSizeToFit();
		var bh = this.__button.getCalculatedHeight();
		if (this.__hasTitle) {
			var bw = this.__button.getCalculatedWidth();
			this.contentContainer().measureView1(this.__button, x + w - bw, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw, bh, 1);
			w -= bw;
		} else {
			var additionalOffset = 0;
			if (this.supportsSelectedView()) {
				additionalOffset = h - $.ig.truncate(((h * 0.1) * 2));
			}
			var bw1 = w - additionalOffset;
			this.contentContainer().measureView1(this.__button, x, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bw1, bh, 1);
		}
		$.ig.CPPopupListViewCellBase.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListButtonCell::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPPopupListButtonCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListButtonCell" />*/

/*<BeginType Name="Infragistics.CPPopupListManager" />*/

$.ig.util.defType('CPPopupListManager', 'CPLocalPopupManager', {
	__numberOfColumns: 0,
	__items: null,
	__header: null,
	__footer: null,
	__contentHeight: 0,
	__contentWidth: 0,
	init: function (initNumber, relativeView, captureView, forceBackgroundColor, dismiss, numberOfColumns, items, preferedLocation, supportsBackgroundView, title, contentHeight, contentWidth) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListManager.prototype.init1.call(this, 1, relativeView, captureView, forceBackgroundColor, dismiss, numberOfColumns, items, preferedLocation, supportsBackgroundView, contentHeight, contentWidth, title != null ? new $.ig.CPPopupHeader(0, title) : null, -1, -1, null);
	},
	init1: function (initNumber, relativeView, captureView, forceBackgroundColor, dismiss, numberOfColumns, items, preferedLocation, supportsBackgroundView, contentHeight, contentWidth, header, x, y, footer) {
		$.ig.CPLocalPopupManager.prototype.init1.call(this, 1, relativeView, captureView, forceBackgroundColor, dismiss, preferedLocation, supportsBackgroundView, header, x, y, footer);
		this.__contentHeight = contentHeight;
		this.__contentWidth = contentWidth;
		this.__numberOfColumns = numberOfColumns;
		this.__items = items;
		this.__header = header;
		this.__footer = footer;
		var selectionMode = false;
		for (var i = 0; i < this.__items.length; i++) {
			var item = this.__items[i];
			if (item._alwaysShowRadialSelectionIndicator) {
				break;
			}
			if (item._isSelected && item._selectionMode == $.ig.CPPopupListItemSelectionMode.prototype.radial) {
				selectionMode = true;
			}
		}
		if (selectionMode) {
			for (var i1 = 0; i1 < this.__items.length; i1++) {
				var item1 = this.__items[i1];
				item1._alwaysShowRadialSelectionIndicator = true;
			}
		}
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPPopupListView Infragistics.CPPopupListManager::ListView()" />*/
	listView: function () {
		return this.__listView;
	}
	/*<EndProperty Name="Infragistics.CPPopupListView Infragistics.CPPopupListManager::ListView()" />*/
	,
	_canOptionKeyClosePopup: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupListManager::CanOptionKeyClosePopup()" />*/
	canOptionKeyClosePopup: function (value) {
		if (arguments.length === 1) {
			this._canOptionKeyClosePopup = value;
			return value;
		} else {
			return this._canOptionKeyClosePopup;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupListManager::CanOptionKeyClosePopup()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListManager::NumberOfItems()" />*/
	numberOfItems: function () {
		return this.__items.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListManager::NumberOfItems()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupContentContainerView Infragistics.CPPopupListManager::CreateContentContainer()" />*/
	createContentContainer: function () {
		return new $.ig.CPPopupListContainerView();
	}
	/*<EndMethod Name="Infragistics.CPPopupContentContainerView Infragistics.CPPopupListManager::CreateContentContainer()" />*/
	,
	__listView: null,
	/*<BeginMethod Name="Infragistics.CPViewBase Infragistics.CPPopupListManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	resolveContentView: function (popup) {
		this.__listView = new $.ig.CPPopupListView(this.__numberOfColumns);
		this.__listView.setScrollbarsAlwaysVisible(false, true);
		this.__listView.setData(popup, this.__items);
		return this.__listView;
	}
	/*<EndMethod Name="Infragistics.CPViewBase Infragistics.CPPopupListManager::ResolveContentView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListManager::UpdateItems(Infragistics.CPList)" />*/
	updateItems: function (items) {
		this.__items = items;
		if (this.__listView != null) {
			this.calculateContentSize();
			this.__listView.replaceData(items);
			this.invalidateBounds();
			this.givePopupKeyboardFocus();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListManager::UpdateItems(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListManager::GivePopupKeyboardFocus()" />*/
	givePopupKeyboardFocus: function () {
		$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().setCurrentActiveElement(this.__listView, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListManager::GivePopupKeyboardFocus()" />*/
	,
	__lw: 0,
	__lh: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListManager::CalculateContentSize()" />*/
	calculateContentSize: function () {
		var measureLabel = new $.ig.CPLabel();
		var maxWidth = 0, maxHeight = 0;
		this.__listView.addSubview(measureLabel);
		var otherMaxWidth = 0;
		var count = this.__items.length;
		for (var i = 0; i < count; i++) {
			var item = this.__items[i];
			item.calculateSizeToFit(measureLabel);
			var mw = Math.max(maxWidth, item._calculatedWidth);
			if (item._shouldStretch) {
				otherMaxWidth = Math.max(otherMaxWidth, mw);
			} else {
				maxWidth = Math.max(maxWidth, mw);
			}
			maxHeight = Math.max(maxHeight, item._calculatedHeight);
		}
		if (maxHeight > 0) {
			this.__listView._rowHeight = maxHeight;
		}
		if (maxWidth == 0) {
			maxWidth = this.__listView._rowHeight;
		}
		this.__lw = Math.max(otherMaxWidth, (maxWidth * this.__numberOfColumns));
		this.__listView.removeSubview(measureLabel);
		this.__listView.calculateSizeToFit();
		this.__lh = this.__listView.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListManager::CalculateContentSize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListManager::GetContentHeight()" />*/
	getContentHeight: function () {
		if (this.__contentHeight <= 0) {
			return this.__lh;
		}
		return Math.min(this.__lh, this.__contentHeight);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListManager::GetContentHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListManager::GetContentWidth()" />*/
	getContentWidth: function () {
		if (this.__contentWidth <= 0) {
			return this.__lw;
		}
		return this.__contentWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListManager::GetContentWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListManager::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		$.ig.CPLocalPopupManager.prototype.focusManagerRegistered.call(this);
		this._focusElements.add(new $.ig.FocusableElement(new $.ig.CPWeakObject(this.__listView)));
		$.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager().registerFocusableElements(this._focusElements, this.popupSectionId());
		this.givePopupKeyboardFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListManager::FocusManagerRegistered()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPPopupListManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPLocalPopupManager.prototype.getSupportedKeyCommands.call(this);
		if (this.canOptionKeyClosePopup()) {
			commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.option(), function (k) {
				$self.closePopup(true);
			}));
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPPopupListManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPLocalPopupManager.prototype.cleanUp.call(this);
		if (this.__listView != null) {
			this.__listView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListManager::CleanUp()" />*/
	,
	$type: new $.ig.Type('CPPopupListManager', $.ig.CPLocalPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListManager" />*/

/*<BeginType Name="Infragistics.CPPopupListContainerView" />*/

$.ig.util.defType('CPPopupListContainerView', 'CPPopupContentContainerView', {
	init: function () {
		$.ig.CPPopupContentContainerView.prototype.init.call(this);
		this.__firstTime = true;
	},
	__firstTime: false,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPPopupContentContainerView.prototype.sizeChanged.call(this, w, h);
		if ($.ig.util.cast($.ig.CPPopupListView.prototype.$type, this.currentContent()) !== null) {
			var list = this.currentContent();
			if (this.__firstTime && list._scale == 1 && w > 1 && h > 1) {
				var cell = list.cellAtPath(new $.ig.CPCellPath(1, 0, 0, 0));
				if (cell != null) {
					this.__firstTime = false;
					var item = cell.popupItem();
					if (item != null && item._alwaysShowRadialSelectionIndicator) {
						var path = null;
						var data = list.getDataSource().data();
						for (var i = 0; i < data.length; i++) {
							var obj = data[i];
							if (obj._isSelected) {
								path = list.getDataSource().resolveCellPathForData(obj);
								if (path != null) {
									list.scrollCellIntoView(path, null);
								}
								break;
							}
						}
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListContainerView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupListContainerView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return this.__pointerActionHandler != null;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupListContainerView::HandlesUIInteraction()" />*/
	,
	__pointerActionHandler: null,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListContainerView::AddPointerActionHandler(Infragistics.PointExecutionBlock)" />*/
	addPointerActionHandler: function (action) {
		this.__pointerActionHandler = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListContainerView::AddPointerActionHandler(Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListContainerView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	handleMouseMoveWhileNotDown: function (x, y) {
		if (this.__pointerActionHandler != null) {
			this.__pointerActionHandler(x, y);
		}
		$.ig.CPPopupContentContainerView.prototype.handleMouseMoveWhileNotDown.call(this, x, y);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListContainerView::HandleMouseMoveWhileNotDown(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupListContainerView', $.ig.CPPopupContentContainerView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListContainerView" />*/

/*<BeginType Name="Infragistics.CPPopupListView" />*/

$.ig.util.defType('CPPopupListView', 'CPGridView', {
	__dsh: null,
	__calcHeight: 0,
	init: function (numberOfColumns) {
		var $self = this;
		$.ig.CPGridView.prototype.init.call(this, 0);
		this._scale = 1;
		this._headerHeight = 0;
		$.ig.UIUtility.prototype.setAccessibilityName1(this, "CPPopupListView");
		this._selectionType = $.ig.CPGridViewSelectionType.prototype.cell;
		this._rowSeparatorHeight = 0;
		this._rowSeparatorColor = $.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native();
		this._rowHeight = $.ig.ThemeManager.prototype.theme().popupListSizingGuide().height();
		this.alwaysBounceVertical(true);
		this.__dsh = new $.ig.CPGridViewSingleFieldMultiColumnDataSourceHelper(0, new $.ig.CPPopupListViewColumn("col"));
		this.__dsh._numberOfColumns = numberOfColumns;
		if (numberOfColumns > 1) {
			this.__dsh.supportsStretchRows(true);
		}
		this.__dsh._rowHeightListener = function (r, s) {
			return $self.resolveHeightForRow(r);
		};
		this.shouldSteaFocusFromTextEditors(false);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListView::SetData(Infragistics.CPPopupContainerView, Infragistics.CPList)" />*/
	setData: function (popup, data) {
		(this.__dsh.column())._popup = popup;
		this.internalSetData(data);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListView::SetData(Infragistics.CPPopupContainerView, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListView::ReplaceData(Infragistics.CPList)" />*/
	replaceData: function (data) {
		this.internalSetData(data);
		this.updateData(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListView::ReplaceData(Infragistics.CPList)" />*/
	,
	__checkForFocus: false,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListView::InternalSetData(Infragistics.CPList)" />*/
	internalSetData: function (data) {
		this.__checkForFocus = false;
		if (this.__dsh._numberOfColumns > 1) {
			var stretchRows = new $.ig.Array();
			var actualRows = new $.ig.Array();
			for (var i = 0; i < data.length; i++) {
				var item = data[i];
				if (item._shouldStretch) {
					var prevRows = stretchRows.length;
					var adjustedI = i - prevRows;
					var val = adjustedI / this.__dsh._numberOfColumns;
					if (val > $.ig.truncate(val)) {
						val = $.ig.truncate(val) + 1;
					}
					var index = $.ig.truncate((prevRows + val));
					stretchRows.add(new $.ig.CPRowPath(index, 0));
					actualRows.add(new $.ig.CPCellPath(1, i, 0, 0));
				}
			}
			if (stretchRows.length > 0) {
				this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
				this.__dsh.setStretchPaths(stretchRows, actualRows);
			} else {
				this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
				this.__dsh.setStretchPaths(null, null);
			}
		}
		this.__dsh.data(data);
		this.setDataSource(this.__dsh);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListView::InternalSetData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListView::ForceRender()" />*/
	forceRender: function () {
		$.ig.CPGridView.prototype.forceRender.call(this);
		if ($.ig.PlatformInfo.prototype.isPrimaryInputTouch()) {
			this.__checkForFocus = false;
		}
		if (this.__checkForFocus) {
			var data = this.__dsh.data();
			if (data != null && data.length > 0) {
				for (var i = 0; i < data.length; i++) {
					var item = data[i];
					if (item._hasFocus) {
						this.__checkForFocus = false;
						item._hasFocus = false;
						var path = new $.ig.CPCellPath(1, i, 0, 0);
						this.setFocusToCell(path);
						break;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListView::ForceRender()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupListView::CanFocusCycle()" />*/
	canFocusCycle: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupListView::CanFocusCycle()" />*/
	,
	_scale: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListView::ResolveHeightForRow(System.Int32)" />*/
	resolveHeightForRow: function (row) {
		var item = this.__dsh.resolveDataObjectForRow(new $.ig.CPCellPath(1, row, 0, 0));
		if (item._hasFocus) {
			this.__checkForFocus = true;
		}
		return $.ig.truncate((item._calculatedHeight * this._scale));
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListView::ResolveHeightForRow(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupListView::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPGridView.prototype.calculateSizeToFit.call(this);
		if (this.__dsh.data() != null) {
			this.__calcHeight = 0;
			var count = this.__dsh.getNumberOfRowsInSection(0);
			for (var i = 0; i < count; i++) {
				this.__calcHeight += this.resolveHeightForRow(i) + this._rowSeparatorHeight + this._rowSpacing;
			}
		} else {
			this.__calcHeight = 0;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupListView::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupListView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupListView::GetCalculatedHeight()" />*/
	,
	$type: new $.ig.Type('CPPopupListView', $.ig.CPGridView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListView" />*/

/*<BeginType Name="Infragistics.CPPopupListViewColumn" />*/

$.ig.util.defType('CPPopupListViewColumn', 'CPGridViewColumnDefinition', {
	_popup: null,
	init: function (key) {
		$.ig.CPGridViewColumnDefinition.prototype.init.call(this, 0, key);
	},
	/*<BeginMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPPopupListViewColumn::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	getCell: function (gridView, path, dsh) {
		var item = dsh.resolveDataObjectForRow(path);
		var cell = gridView.dequeueReusableCellWithIdentifier(item.cellIdentifier());
		if (cell == null) {
			cell = item.createNewCell(item.cellIdentifier());
		}
		if (cell != null) {
			cell._popup = this._popup;
			if (item != null && $.ig.util.cast($.ig.CPPopupListItem.prototype.$type, item) !== null) {
				if ((item)._name != null && (item)._name != "") {
					$.ig.UIUtility.prototype.setAccessibilityName2(cell, "popupListItem_", (item)._name);
				} else if (item._tag != null && item._tag.toString() != "") {
					$.ig.UIUtility.prototype.setAccessibilityName2(cell, "itemCell_", item._tag.toString());
				}
			}
			cell.setItem(item);
			cell.refreshIcon();
		}
		return cell;
	}
	/*<EndMethod Name="Infragistics.CPGridViewCellBase Infragistics.CPPopupListViewColumn::GetCell(Infragistics.CPGridView, Infragistics.CPCellPath, Infragistics.CPGridViewDatasourceHelper)" />*/
	,
	$type: new $.ig.Type('CPPopupListViewColumn', $.ig.CPGridViewColumnDefinition.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupListViewColumn" />*/

/*<BeginType Name="Infragistics.CPPopupHeader" />*/

$.ig.util.defType('CPPopupHeader', 'CPGridViewItemIconCell', {
	__sep: null,
	init: function (initNumber, text) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupHeader.prototype.init1.call(this, 1, text, $.ig.CPTheme.prototype.itemGuideStyleMedium);
	},
	init1: function (initNumber, text, itemGuideStyle) {
		$.ig.CPGridViewItemIconCell.prototype.init.call(this, itemGuideStyle, "popup");
		this.setTitle(text);
		this.disable();
		this.ignoreDisabledOpacity(true);
		this.font($.ig.ThemeManager.prototype.theme().boldFont());
		this.setCornerRadius(0);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		if (this.showSeparator()) {
			this.__sep = new $.ig.CPViewBase();
			this.__sep.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColor().$native());
			this.contentContainer().addSubview(this.__sep);
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupHeader::SetTitle(System.String)" />*/
	setTitle: function (title) {
		if (title != null) {
			this.textLabel().setText(title);
			this.textLabel().setTextAlignment($.ig.TextAlignment.prototype.left);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupHeader::SetTitle(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupHeader::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemIconCell.prototype.sizeChanged.call(this, w, h);
		if (this.showSeparator()) {
			var sepSize = $.ig.NativeUIUtility.prototype.utility().densify(1);
			this.contentContainer().measureView1(this.__sep, 0, h - sepSize, w, sepSize, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupHeader::SizeChanged(System.Int32, System.Int32)" />*/
	,
	__alreadyCalculated: false,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupHeader::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		if (!this.__alreadyCalculated) {
			this.__alreadyCalculated = true;
			this.textLabel().calculateSize(-1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupHeader::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupHeader::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.sizingGuide().height();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupHeader::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupHeader::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return (this.textLabel().getCalculatedWidth() + this.getCalculatedHeight());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupHeader::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupHeader::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupHeader::HandlesUIInteraction()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupHeader::ShowSeparator()" />*/
	showSeparator: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupHeader::ShowSeparator()" />*/
	,
	$type: new $.ig.Type('CPPopupHeader', $.ig.CPGridViewItemIconCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupHeader" />*/

/*<BeginType Name="Infragistics.CPPopupHeaderCell" />*/

$.ig.util.defType('CPPopupHeaderCell', 'CPPopupHeader', {
	__cell: null,
	init: function (cell) {
		$.ig.CPPopupHeader.prototype.init.call(this, 0, null);
		this.__cell = cell;
		this.addSubview(this.__cell);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupHeaderCell::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.__cell.calculateSizeToFit();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupHeaderCell::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupHeaderCell::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__cell.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupHeaderCell::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPPopupHeaderCell::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__cell.getCalculatedWidth();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPPopupHeaderCell::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupHeaderCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		this.measureView(this.__cell, 0, 0, w, h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupHeaderCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupHeaderCell', $.ig.CPPopupHeader.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupHeaderCell" />*/

/*<BeginType Name="Infragistics.CPComplexPopupHeader" />*/

$.ig.util.defType('CPComplexPopupHeader', 'CPPopupHeader', {
	__hasWarning: false,
	init: function (title, message, warning) {
		$.ig.CPPopupHeader.prototype.init.call(this, 0, null);
		this.font($.ig.ThemeManager.prototype.theme().boldFont());
		this.textLabel().setText(title);
		this.textLabel().setTextAlignment($.ig.TextAlignment.prototype.left);
		this.textLabel().setTextWrapping(true);
		this.textLabel().setTextClipping(false);
		message = $.ig.NativeStringUtility.prototype.replace(message, "\\n", "\n");
		this.subTextLabel().setText(message);
		this.subTextLabel().setTextWrapping(true);
		this.subTextLabel().setTextClipping(false);
		this.__hasWarning = warning != null;
		if (this.__hasWarning) {
		}
		this.__outerPadding = $.ig.ThemeManager.prototype.theme().padding20();
		this.__spacing = $.ig.ThemeManager.prototype.theme().padding5();
	},
	__headerCalcWidth: 0,
	__headerCalcHeight: 0,
	__outerPadding: 0,
	__spacing: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPComplexPopupHeader::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		this.textLabel().calculateSize(-1);
		this.subTextLabel().calculateSize(-1);
		this.__headerCalcHeight = this.__outerPadding * 2 + this.__spacing;
		this.__headerCalcWidth = this.textLabel().getCalculatedWidth();
		this.__headerCalcWidth = Math.max(this.__headerCalcWidth, this.subTextLabel().getCalculatedWidth());
		if (this.__hasWarning) {
		}
		this.__headerCalcWidth += this.__outerPadding * 2;
		this.__headerCalcWidth = Math.min(this.__headerCalcWidth, $.ig.NativeUIUtility.prototype.utility().densify(320));
		var limit = this.__headerCalcWidth - this.__outerPadding * 2;
		this.__headerCalcHeight += this.textLabel().calculateSize(limit);
		this.__headerCalcHeight += this.subTextLabel().calculateSize(limit);
		if (this.__hasWarning) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPComplexPopupHeader::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPComplexPopupHeader::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__headerCalcHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPComplexPopupHeader::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPComplexPopupHeader::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__headerCalcWidth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPComplexPopupHeader::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPComplexPopupHeader::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPComplexPopupHeader::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPComplexPopupHeader::LayoutContent(System.Int32, System.Int32)" />*/
	layoutContent1: function (w, h) {
		var top = this.__outerPadding;
		var aw = w - this.__outerPadding * 2;
		var left = this.__outerPadding;
		var lh = this.textLabel().getCalculatedHeight();
		this.measureView1(this.textLabel(), left, top, aw, lh, this.resolveOpacity(this.restOpacity(), true));
		top += lh + this.__spacing;
		lh = this.subTextLabel().getCalculatedHeight();
		this.measureView1(this.subTextLabel(), left, top, aw, lh, this.resolveOpacity(this.restOpacity(), true));
		if (this.__hasWarning) {
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPComplexPopupHeader::LayoutContent(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPComplexPopupHeader', $.ig.CPPopupHeader.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPComplexPopupHeader" />*/

/*<BeginType Name="Infragistics.CPPopupManager" />*/

$.ig.util.defType('CPPopupManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_showingPopup: null,
	/*<BeginProperty Name="Infragistics.ExecutionBlock Infragistics.CPPopupManager::ShowingPopup()" />*/
	showingPopup: function (value) {
		if (arguments.length === 1) {
			this._showingPopup = value;
			return value;
		} else {
			return this._showingPopup;
		}
	}
	/*<EndProperty Name="Infragistics.ExecutionBlock Infragistics.CPPopupManager::ShowingPopup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::RegisterRootLayer(Infragistics.CPViewBase)" />*/
	registerRootLayer: function (rootLayer) {
		$.ig.CPPopupManager.prototype.__rootLayer = rootLayer;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::RegisterRootLayer(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowPopup(Infragistics.CPViewBase, Infragistics.CPNavigationViewController, Infragistics.CPPopupManagerBase)" />*/
	showPopup: function (relativeView, nav, manager) {
		manager._navController = nav;
		manager._relativeView = relativeView;
		var root = $.ig.NativeUIUtility.prototype.utility().getRootParentAndRegisterViewController(relativeView, nav, manager.acceptsInput());
		return $.ig.CPPopupManager.prototype.showPopupWithRootView(root, manager);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowPopup(Infragistics.CPViewBase, Infragistics.CPNavigationViewController, Infragistics.CPPopupManagerBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowPopup(Infragistics.CPViewBase, Infragistics.CPPopupManagerBase)" />*/
	showPopup1: function (relativeView, manager) {
		if ($.ig.CPPopupManager.prototype.__popupStack != null && $.ig.CPPopupManager.prototype.__popupStack.length > 0) {
			if ($.ig.util.cast($.ig.CPPopupListViewCellBase.prototype.$type, relativeView) !== null && (relativeView).supportsDrillDown() && $.ig.util.cast($.ig.CPLocalPopupManager.prototype.$type, manager) !== null) {
				var popupId = $.ig.CPPopupManager.prototype.pushLocalPopup(relativeView, manager, ((relativeView).popupItem()).drillDownTitle());
				if (popupId != null) {
					return popupId;
				}
			}
		}
		manager._relativeView = relativeView;
		var root = $.ig.NativeUIUtility.prototype.utility().getRootParent1(relativeView, manager.acceptsInput());
		return $.ig.CPPopupManager.prototype.showPopupWithRootView(root, manager);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowPopup(Infragistics.CPViewBase, Infragistics.CPPopupManagerBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::PushLocalPopup(Infragistics.CPViewBase, Infragistics.CPLocalPopupManager, System.String)" />*/
	pushLocalPopup: function (relativeView, manager, drillDownTitle) {
		if ($.ig.CPPopupManager.prototype.__popupStack != null && $.ig.CPPopupManager.prototype.__popupStack.length > 0) {
			var index = $.ig.CPPopupManager.prototype.__popupStack.length - 1;
			var container = $.ig.CPPopupManager.prototype.__popupStack[index];
			if ($.ig.util.cast($.ig.CPLocalPopupManager.prototype.$type, container.manager()) !== null) {
				(container.manager()).push(manager, drillDownTitle);
				return container.popupId();
			}
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::PushLocalPopup(Infragistics.CPViewBase, Infragistics.CPLocalPopupManager, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::SetEmbedded(System.Boolean)" />*/
	setEmbedded: function (embedded) {
		$.ig.CPPopupManager.prototype.__isEmbedded = embedded;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::SetEmbedded(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowPopupWithRootView(Infragistics.CPViewBase, Infragistics.CPPopupManagerBase)" />*/
	showPopupWithRootView: function (root, manager) {
		if (root != null) {
			if ($.ig.CPPopupManager.prototype.showingPopup() != null && manager.considerAsTopMostPopup()) {
				var action = $.ig.CPPopupManager.prototype.showingPopup();
				action();
			}
			if (manager.supportsKeyboard()) {
				manager._focusManager = $.ig.CPKeyboardEventManager.prototype.registerNewListenerLayer();
			}
			manager._rootView = root;
			if ($.ig.CPPopupManager.prototype.__popupStack == null) {
				$.ig.CPPopupManager.prototype.__popupStack = new $.ig.Array();
				$.ig.CPPopupManager.prototype.__popupLookup = new $.ig.Dictionary(0);
			}
			var container = new $.ig.CPPopupContainerView($.ig.CPStringUtility.prototype.generateUniquieID(), manager, root);
			container._closingBlock = function (o) {
				$.ig.CPPopupManager.prototype.popupClosed(o);
			};
			$.ig.CPPopupManager.prototype.__popupStack.add(container);
			manager.popupId(container.popupId());
			$.ig.CPPopupManager.prototype.__popupLookup.item(container.popupId(), container);
			if (manager.isFullScreen() && !$.ig.CPPopupManager.prototype.__isEmbedded) {
				for (var i = 0; i < $.ig.CPPopupManager.prototype.__popupStack.length - 1; i++) {
					var prevLayer = $.ig.CPPopupManager.prototype.__popupStack[i];
					prevLayer.isHidden(true);
				}
				if ($.ig.CPPopupManager.prototype.__rootLayer != null) {
					$.ig.CPPopupManager.prototype.__rootLayer.isHidden(true);
				}
			}
			if (manager.keepTopMost() && $.ig.CPPopupManager.prototype.__lockedTopMostPopup == null) {
				$.ig.CPPopupManager.prototype.__lockedTopMostPopup = container.popupId();
			} else if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup != null) {
				var lockedManger = $.ig.CPPopupManager.prototype.getPopupManagerById($.ig.CPPopupManager.prototype.__lockedTopMostPopup);
				$.ig.CPPopupManager.prototype.closePopup($.ig.CPPopupManager.prototype.__lockedTopMostPopup, false);
				if (lockedManger._navController != null) {
					$.ig.CPPopupManager.prototype.showPopup(lockedManger._relativeView, lockedManger._navController, lockedManger);
				} else {
					$.ig.CPPopupManager.prototype.showPopup1(lockedManger._relativeView, lockedManger);
				}
			}
			return container.popupId();
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowPopupWithRootView(Infragistics.CPViewBase, Infragistics.CPPopupManagerBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::RegisterNotifyPopupShowing(Infragistics.ExecutionBlock)" />*/
	registerNotifyPopupShowing: function (action) {
		$.ig.CPPopupManager.prototype.showingPopup(action);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::RegisterNotifyPopupShowing(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::UnregisterNotifyPopupShowing()" />*/
	unregisterNotifyPopupShowing: function () {
		$.ig.CPPopupManager.prototype.showingPopup(null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::UnregisterNotifyPopupShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::SubscribeToBeNotifiedWhenPopupCloses(System.String, Infragistics.ExecutionBlock)" />*/
	subscribeToBeNotifiedWhenPopupCloses: function (popupId, block) {
		if ($.ig.CPPopupManager.prototype.__subscribedPopups == null) {
			$.ig.CPPopupManager.prototype.__subscribedPopups = new $.ig.Dictionary(0);
		}
		var list;
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPPopupManager.prototype.__subscribedPopups, popupId)) {
			$.ig.CPPopupManager.prototype.__subscribedPopups.item(popupId, new $.ig.Array());
		}
		list = $.ig.CPPopupManager.prototype.__subscribedPopups.item(popupId);
		list.add(block);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::SubscribeToBeNotifiedWhenPopupCloses(System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupManagerBase Infragistics.CPPopupManager::GetPopupManagerById(System.String)" />*/
	getPopupManagerById: function (id) {
		if ($.ig.CPPopupManager.prototype.__popupLookup != null && id != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPPopupManager.prototype.__popupLookup, id)) {
			var container = $.ig.CPPopupManager.prototype.__popupLookup.item(id);
			return container.manager();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPPopupManagerBase Infragistics.CPPopupManager::GetPopupManagerById(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupManager::IsPopupOpen(System.String)" />*/
	isPopupOpen: function (id) {
		if ($.ig.CPPopupManager.prototype.__popupLookup != null && id != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPPopupManager.prototype.__popupLookup, id)) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupManager::IsPopupOpen(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupManager::IsPopupBeingShown()" />*/
	isPopupBeingShown: function () {
		return ($.ig.CPPopupManager.prototype.__popupStack != null && $.ig.CPPopupManager.prototype.__popupStack.length > 0);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupManager::IsPopupBeingShown()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::PopupClosed(Infragistics.CPPopupContainerView)" />*/
	popupClosed: function (container) {
		$.ig.CPKeyboardEventManager.prototype.unregisterListenerLayer1(container.manager()._focusManager);
		if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup != null && $.ig.CPPopupManager.prototype.__lockedTopMostPopup.equals(container.popupId())) {
			$.ig.CPPopupManager.prototype.__lockedTopMostPopup = null;
		}
		if (container.manager()._navController != null) {
			container.manager()._navController.unload();
		}
		$.ig.CPPopupManager.prototype.__popupStack.removeItem(container);
		$.ig.NativeDictionaryUtility.prototype.removeValue($.ig.CPPopupManager.prototype.__popupLookup, container.popupId());
		if (container.manager().isFullScreen() && !$.ig.CPPopupManager.prototype.__isEmbedded) {
			var unhideRootLayer = true;
			for (var i = $.ig.CPPopupManager.prototype.__popupStack.length - 1; i >= 0; i--) {
				var prevContainer = $.ig.CPPopupManager.prototype.__popupStack[i];
				prevContainer.isHidden(false);
				if (prevContainer.manager().isFullScreen()) {
					unhideRootLayer = false;
					break;
				}
			}
			if (unhideRootLayer && $.ig.CPPopupManager.prototype.__rootLayer != null) {
				$.ig.CPPopupManager.prototype.__rootLayer.isHidden(false);
			}
		}
		if ($.ig.CPPopupManager.prototype.__subscribedPopups != null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPPopupManager.prototype.__subscribedPopups, container.popupId())) {
				var list = $.ig.CPPopupManager.prototype.__subscribedPopups.item(container.popupId());
				for (var i1 = 0; i1 < list.length; i1++) {
					var block = list[i1];
					block();
				}
				$.ig.NativeDictionaryUtility.prototype.removeValue($.ig.CPPopupManager.prototype.__subscribedPopups, container.popupId());
			}
		}
		container.unload();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::PopupClosed(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::CloseAllPopups()" />*/
	closeAllPopups: function () {
		if ($.ig.CPPopupManager.prototype.__popupStack != null) {
			var count = $.ig.CPPopupManager.prototype.__popupStack.length;
			for (var i = count - 1; i >= 0; i--) {
				var container = $.ig.CPPopupManager.prototype.__popupStack[i];
				if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup == null || !container.popupId().equals($.ig.CPPopupManager.prototype.__lockedTopMostPopup)) {
					container.hide(false);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::CloseAllPopups()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::HideAllPopupsFromParentView(Infragistics.CPViewBase)" />*/
	hideAllPopupsFromParentView: function (parentView) {
		if ($.ig.CPPopupManager.prototype.__popupStack != null) {
			var count = $.ig.CPPopupManager.prototype.__popupStack.length;
			for (var i = count - 1; i >= 0; i--) {
				var container = $.ig.CPPopupManager.prototype.__popupStack[i];
				if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup == null || !container.popupId().equals($.ig.CPPopupManager.prototype.__lockedTopMostPopup)) {
					if ($.ig.CPPopupManager.prototype.isAncestor(parentView, container)) {
						container.isHidden(true);
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::HideAllPopupsFromParentView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::ShowAllPopupsFromParentView(Infragistics.CPViewBase)" />*/
	showAllPopupsFromParentView: function (parentView) {
		if ($.ig.CPPopupManager.prototype.__popupStack != null) {
			var count = $.ig.CPPopupManager.prototype.__popupStack.length;
			for (var i = 0; i < count; i++) {
				var container = $.ig.CPPopupManager.prototype.__popupStack[i];
				if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup == null || !container.popupId().equals($.ig.CPPopupManager.prototype.__lockedTopMostPopup)) {
					if ($.ig.CPPopupManager.prototype.isAncestor(parentView, container)) {
						container.isHidden(false);
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::ShowAllPopupsFromParentView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupManager::IsAncestor(Infragistics.CPViewBase, Infragistics.CPViewBase)" />*/
	isAncestor: function (ancestor, view) {
		var parent;
		if ($.ig.util.cast($.ig.CPPopupContainerView.prototype.$type, view) !== null) {
			parent = (view).manager()._relativeView;
		} else {
			parent = view.getParent();
		}
		if (parent == null || !($.ig.util.cast($.ig.CPViewBase.prototype.$type, parent) !== null)) {
			return false;
		} else {
			return parent == ancestor ? true : $.ig.CPPopupManager.prototype.isAncestor(ancestor, parent);
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupManager::IsAncestor(Infragistics.CPViewBase, Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::CloseTopMostPopup(System.Boolean)" />*/
	closeTopMostPopup: function (animate) {
		if ($.ig.CPPopupManager.prototype.__popupStack != null && $.ig.CPPopupManager.prototype.__popupStack.length > 0) {
			var stackCount = $.ig.CPPopupManager.prototype.__popupStack.length;
			var index = stackCount - 1;
			for (var i = index; i >= 0; i--) {
				var container = $.ig.CPPopupManager.prototype.__popupStack[i];
				if ($.ig.CPPopupManager.prototype.__lockedTopMostPopup != null && container.popupId().equals($.ig.CPPopupManager.prototype.__lockedTopMostPopup) || !container.manager().considerAsTopMostPopup()) {
					continue;
				} else if (!$.ig.CPPopupManager.prototype.__isEmbedded || !container.isHidden()) {
					$.ig.CPPopupManager.prototype.internalClosePopup(container, animate, false);
					break;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::CloseTopMostPopup(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::ForceClosePopup(System.String, System.Boolean)" />*/
	forceClosePopup: function (id, animate) {
		$.ig.CPPopupManager.prototype.closePopup1(id, animate, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::ForceClosePopup(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::ClosePopup(System.String, System.Boolean)" />*/
	closePopup: function (id, animate) {
		$.ig.CPPopupManager.prototype.closePopup1(id, animate, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::ClosePopup(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::ClosePopup(System.String, System.Boolean, System.Boolean)" />*/
	closePopup1: function (id, animate, force) {
		if ($.ig.CPPopupManager.prototype.__popupLookup != null && id != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPPopupManager.prototype.__popupLookup, id)) {
			if ($.ig.CPStringUtility.prototype.areStringsEqual($.ig.CPPopupManager.prototype.__tooltipPopupId, id)) {
				$.ig.CPPopupManager.prototype.__tooltipPopupId = null;
			}
			$.ig.CPPopupManager.prototype.internalClosePopup($.ig.CPPopupManager.prototype.__popupLookup.item(id), animate, force);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::ClosePopup(System.String, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::InternalClosePopup(Infragistics.CPPopupContainerView, System.Boolean, System.Boolean)" />*/
	internalClosePopup: function (container, animate, force) {
		if (force || container.manager().closeDelegate() == null || container.manager().closeDelegate().canPopupClose(container.popupId())) {
			container.hide(animate);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::InternalClosePopup(Infragistics.CPPopupContainerView, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPNavigationViewController Infragistics.CPPopupManager::GetTopMostViewController()" />*/
	getTopMostViewController: function () {
		if ($.ig.CPPopupManager.prototype.__popupStack != null && $.ig.CPPopupManager.prototype.__popupStack.length > 0) {
			for (var i = $.ig.CPPopupManager.prototype.__popupStack.length - 1; i >= 0; i--) {
				var container = $.ig.CPPopupManager.prototype.__popupStack[i];
				if (container.manager()._navController != null) {
					return container.manager()._navController;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPNavigationViewController Infragistics.CPPopupManager::GetTopMostViewController()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::Ask(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	ask: function (relativeView, title, question, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(1, title, question, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::Ask(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askRich: function (relativeView, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(2, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::Ask(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	ask1: function (relativeView, title, question, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock, closeBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(1, title, question, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, closeBlock));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::Ask(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askRich1: function (relativeView, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock, closeBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(2, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, closeBlock));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askWithView: function (relativeView, view, title, question, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock, closeBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(0, view, title, question, false, null, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, closeBlock));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskRichWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askRichWithView: function (relativeView, view, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, info, confirmBlock, cancelBlock, closeBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(0, view, title, question, true, questionFormattingBlocks, confirmText, cancelText, confirmColor, true, false, info, confirmBlock, cancelBlock, closeBlock));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskRichWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskNonModal(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Boolean, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askNonModal: function (relativeView, title, question, confirmText, cancelText, confirmColor, oldStyle, info, confirmBlock, cancelBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(1, title, question, confirmText, cancelText, confirmColor, false, oldStyle, info, confirmBlock, cancelBlock, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskNonModal(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, System.String, System.Boolean, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AskRichNonModal(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Boolean, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	askRichNonModal: function (relativeView, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, oldStyle, info, confirmBlock, cancelBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(2, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, false, oldStyle, info, confirmBlock, cancelBlock, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AskRichNonModal(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.String, System.String, System.Boolean, System.Object, Infragistics.ObjectBlock, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::Alert(Infragistics.CPViewBase, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock)" />*/
	alert: function (relativeView, title, message, okText, info, doneBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(1, title, message, okText, null, $.ig.ThemeManager.prototype.theme().accentColor().$native(), true, false, info, doneBlock, null, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::Alert(Infragistics.CPViewBase, System.String, System.String, System.String, System.Object, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::AlertRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.Object, Infragistics.ObjectBlock)" />*/
	alertRich: function (relativeView, title, message, messageFormattingBlocks, okText, info, doneBlock) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupMessageBoxManager(2, title, message, messageFormattingBlocks, okText, null, $.ig.ThemeManager.prototype.theme().accentColor().$native(), true, false, info, doneBlock, null, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::AlertRich(Infragistics.CPViewBase, System.String, System.String, Infragistics.CPList, System.String, System.Object, Infragistics.ObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.ExecutionBlock)" />*/
	showList1: function (relativeView, items, dismissedBlock) {
		return $.ig.CPPopupManager.prototype.showList(relativeView, items, $.ig.CPPopupPosition.prototype.auto, dismissedBlock);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, Infragistics.ExecutionBlock)" />*/
	showList: function (relativeView, items, preferedLocation, dismissedBlock) {
		return $.ig.CPPopupManager.prototype.showList3(relativeView, null, items, preferedLocation, null, dismissedBlock);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, Infragistics.CPPopupHeader, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPPopupFooter, Infragistics.ExecutionBlock)" />*/
	showList2: function (relativeView, captureView, items, preferedLocation, header, x, y, contentHeight, contentWidth, footerView, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(1, relativeView, captureView, false, dismissedBlock, 1, items, preferedLocation, true, contentHeight, contentWidth, header, x, y, footerView));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, Infragistics.CPPopupHeader, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.CPPopupFooter, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showList3: function (relativeView, captureView, items, preferedLocation, title, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(0, relativeView, captureView, false, dismissedBlock, 1, items, preferedLocation, true, title, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowListWithoutCaptureView(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showListWithoutCaptureView: function (relativeView, items, preferedLocation, title, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(0, relativeView, null, true, dismissedBlock, 1, items, preferedLocation, true, title, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowListWithoutCaptureView(Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	showList4: function (relativeView, captureView, items, preferedLocation, title, contentHeight, contentWdith, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(0, relativeView, captureView, false, dismissedBlock, 1, items, preferedLocation, true, title, contentHeight, contentWdith));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowList(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowListWithNoArrow(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	showListWithNoArrow: function (relativeView, captureView, items, preferedLocation, title, contentHeight, contentWdith, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		var manager = new $.ig.CPPopupListManager(0, relativeView, captureView, false, dismissedBlock, 1, items, preferedLocation, true, title, contentHeight, contentWdith);
		manager.hideArrow(true);
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, manager);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowListWithNoArrow(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, System.Int32, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowListNonModal(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showListNonModal: function (relativeView, captureView, items, preferedLocation, title, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(0, relativeView, captureView, false, dismissedBlock, 1, items, preferedLocation, false, title, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowListNonModal(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	showGrid1: function (relativeView, items, numberOfColumns, dismissedBlock) {
		return $.ig.CPPopupManager.prototype.showGrid(relativeView, items, numberOfColumns, $.ig.CPPopupPosition.prototype.auto, dismissedBlock);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, Infragistics.ExecutionBlock)" />*/
	showGrid: function (relativeView, items, numberOfColumns, preferedLocation, dismissedBlock) {
		return $.ig.CPPopupManager.prototype.showGrid3(relativeView, null, items, numberOfColumns, preferedLocation, null, dismissedBlock);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showGrid3: function (relativeView, captureView, items, numberOfColumns, preferedLocation, title, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(0, relativeView, captureView, false, dismissedBlock, numberOfColumns, items, preferedLocation, true, title, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, Infragistics.CPPopupHeader, System.Int32, System.Int32, Infragistics.CPPopupFooter, Infragistics.ExecutionBlock)" />*/
	showGrid2: function (relativeView, captureView, items, numberOfColumns, preferedLocation, header, x, y, footerView, dismissedBlock) {
		if (items == null || items.length == 0) {
			return null;
		}
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupListManager(1, relativeView, captureView, false, dismissedBlock, numberOfColumns, items, preferedLocation, true, -1, -1, header, x, y, footerView));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowGrid(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPList, System.Int32, Infragistics.CPPopupPosition, Infragistics.CPPopupHeader, System.Int32, System.Int32, Infragistics.CPPopupFooter, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean, System.Int32, System.Int32)" />*/
	showModalDialog1: function (relativeView, vc, animateFromRelativeView, maxWidth, maxHeight) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, maxWidth, maxHeight));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showModalDialog: function (relativeView, vc, animateFromRelativeView) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalQuickActionDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showModalQuickActionDialog: function (relativeView, vc, animateFromRelativeView) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, $.ig.NativeUIUtility.prototype.utility().densify(400), $.ig.NativeUIUtility.prototype.utility().densify(700)));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalQuickActionDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowModalQuickActionDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showNarrowModalQuickActionDialog: function (relativeView, vc, animateFromRelativeView) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, $.ig.NativeUIUtility.prototype.utility().densify(400), $.ig.NativeUIUtility.prototype.utility().densify(700)));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowModalQuickActionDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithNav(Infragistics.CPViewBase, Infragistics.CPNavigationViewController, System.Boolean, System.Int32, System.Int32)" />*/
	showModalDialogWithNav: function (relativeView, nav, animateFromRelativeView, maxWidth, maxHeight) {
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, maxWidth, maxHeight));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithNav(Infragistics.CPViewBase, Infragistics.CPNavigationViewController, System.Boolean, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowFullScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showFullScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		var viewDelegate = null;
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, vc) !== null) {
			viewDelegate = vc;
		}
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, viewDelegate, true, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowFullScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, System.Boolean)" />*/
	showModalDialogWithView5: function (relativeView, view, title, icon, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showModalDialogWithView1(relativeView, view, title, icon, null, animateFromRelativeView);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean)" />*/
	showModalDialogWithView1: function (relativeView, view, title, icon, additionalNavButtons, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showModalDialogWithView2(relativeView, view, title, icon, additionalNavButtons, true, animateFromRelativeView);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean)" />*/
	showModalDialogWithView2: function (relativeView, view, title, icon, additionalNavButtons, hasCloseButton, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showModalDialogWithView3(relativeView, view, title, icon, additionalNavButtons, hasCloseButton, animateFromRelativeView, false);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean, System.Boolean)" />*/
	showModalDialogWithView3: function (relativeView, view, title, icon, additionalNavButtons, hasCloseButton, animateFromRelativeView, fullScreen) {
		return $.ig.CPPopupManager.prototype.showModalDialogWithView4(relativeView, view, title, icon, additionalNavButtons, hasCloseButton, animateFromRelativeView, fullScreen, true);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithViewNoNavbar(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Boolean)" />*/
	showModalDialogWithViewNoNavbar: function (relativeView, view, fullScreen) {
		return $.ig.CPPopupManager.prototype.showModalDialogWithView4(relativeView, view, null, null, null, false, false, fullScreen, false);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithViewNoNavbar(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean, System.Boolean, System.Boolean)" />*/
	showModalDialogWithView4: function (relativeView, view, title, icon, additionalNavButtons, hasCloseButton, animateFromRelativeView, fullScreen, hasNavBar) {
		var viewDelegate = null;
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, view) !== null) {
			viewDelegate = view;
		}
		var vc = new $.ig.CPContentViewController(view, title, icon, hasNavBar);
		if (hasNavBar) {
			vc.addNavBarButtons(additionalNavButtons);
			vc.setHasCloseButton(hasCloseButton);
		}
		var nav = new $.ig.CPNavigationViewController(1, vc);
		nav.accessibilityName("navBar_" + $.ig.UIUtility.prototype.getValidAccessibilityName(title));
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, view, viewDelegate, fullScreen, -1, -1));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.PathIcon, Infragistics.CPList, System.Boolean, System.Boolean, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Boolean, System.Int32, System.Int32)" />*/
	showModalDialogWithView: function (relativeView, view, animateFromRelativeView, maxWidth, maxHeight) {
		var viewDelegate = null;
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, view) !== null) {
			viewDelegate = view;
		}
		var nav = new $.ig.CPNavigationViewController(1, new $.ig.CPContentViewController(view, null, null, false));
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, view, viewDelegate, false, maxWidth, maxHeight));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowModalDialogWithView(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Boolean, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showTallScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.ThemeManager.prototype.theme().mediumDialogWidth(), -1);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowTallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showNarrowTallScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.ThemeManager.prototype.theme().narrowDialogWidth(), $.ig.ThemeManager.prototype.theme().narrowDialogHeight());
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowTallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowMediumScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showMediumScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.ThemeManager.prototype.theme().mediumDialogWidth(), $.ig.ThemeManager.prototype.theme().mediumDialogHeight());
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowMediumScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowSmallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showSmallScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.NativeUIUtility.prototype.utility().densify(550), $.ig.ThemeManager.prototype.theme().mediumDialogHeight());
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowSmallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowVerySmallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showVerySmallScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.NativeUIUtility.prototype.utility().densify(450), $.ig.NativeUIUtility.prototype.utility().densify(370));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowVerySmallScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowLargeScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showLargeScreenModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.ThemeManager.prototype.theme().mediumDialogWidth(), $.ig.NativeUIUtility.prototype.utility().densify(768));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowLargeScreenModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowEditorModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	showNarrowEditorModalDialog: function (relativeView, vc, animateFromRelativeView) {
		return $.ig.CPPopupManager.prototype.showCustomSizedModalDialog(relativeView, vc, animateFromRelativeView, $.ig.ThemeManager.prototype.theme().mediumDialogWidth(), $.ig.NativeUIUtility.prototype.utility().densify(438));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowNarrowEditorModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowCustomSizedModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean, System.Int32, System.Int32)" />*/
	showCustomSizedModalDialog: function (relativeView, vc, animateFromRelativeView, w, h) {
		var nav = new $.ig.CPNavigationViewController(1, vc);
		if (vc.accessibilityName() != null) {
			nav.accessibilityName(vc.accessibilityName());
		}
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPModalDialogPopupManager(nav, animateFromRelativeView ? relativeView : null, null, null, false, w, h));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowCustomSizedModalDialog(Infragistics.CPViewBase, Infragistics.ViewControllerBase, System.Boolean, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showContentPopup: function (relativeView, captureView, content, contentWidth, contentHeight, preferedLocation, title, dismissedBlock) {
		var popupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPContentPopupManager(0, relativeView, captureView, content, contentWidth, contentHeight, dismissedBlock, preferedLocation, true, title, true));
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, content) !== null) {
			(content).popupId(popupId);
		}
		return popupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, System.Boolean, Infragistics.ExecutionBlock)" />*/
	showContentPopup1: function (relativeView, captureView, content, contentWidth, contentHeight, preferedLocation, title, acceptsInput, dismissedBlock) {
		var popupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPContentPopupManager(0, relativeView, captureView, content, contentWidth, contentHeight, dismissedBlock, preferedLocation, true, title, acceptsInput));
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, content) !== null) {
			(content).popupId(popupId);
		}
		return popupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Boolean, Infragistics.CPPopupPosition, System.String, System.Boolean, System.Boolean, Infragistics.ExecutionBlock)" />*/
	showContentPopup2: function (relativeView, captureView, content, contentWidth, contentHeight, fitContentToSize, preferedLocation, title, acceptsInput, hasBackground, dismissedBlock) {
		var popupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPContentPopupManager(1, relativeView, captureView, content, contentWidth, contentHeight, fitContentToSize, dismissedBlock, preferedLocation, hasBackground, title, acceptsInput, true));
		if ($.ig.util.cast($.ig.CPPopupViewDelegate.prototype.$type, content) !== null) {
			(content).popupId(popupId);
		}
		return popupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, System.Boolean, Infragistics.CPPopupPosition, System.String, System.Boolean, System.Boolean, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTooltip(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, Infragistics.CPThemeColor, System.Boolean)" />*/
	showTooltip: function (relativeView, content, contentWidth, contentHeight, preferedLocation, bgColor, clickToDismiss) {
		var captureView = null;
		if (clickToDismiss) {
			captureView = relativeView;
		}
		$.ig.CPPopupManager.prototype.closeTooltipPopup();
		$.ig.CPPopupManager.prototype.__tooltipPopupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPTooltipPopupManager(relativeView, captureView, content, contentWidth, contentHeight, preferedLocation, bgColor, clickToDismiss));
		return $.ig.CPPopupManager.prototype.__tooltipPopupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTooltip(Infragistics.CPViewBase, Infragistics.CPViewBase, System.Int32, System.Int32, Infragistics.CPPopupPosition, Infragistics.CPThemeColor, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::CloseTooltipPopup()" />*/
	closeTooltipPopup: function () {
		if ($.ig.CPPopupManager.prototype.__tooltipPopupId != null) {
			$.ig.CPPopupManager.prototype.closePopup($.ig.CPPopupManager.prototype.__tooltipPopupId, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::CloseTooltipPopup()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowNavigationControllerPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPNavigationViewController, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	showNavigationControllerPopup: function (relativeView, captureView, vc, contentWidth, contentHeight, preferedLocation, title, dismissedBlock) {
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(vc);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, vc, new $.ig.CPContentPopupManager(0, relativeView, captureView, vc.view(), contentWidth, contentHeight, dismissedBlock, preferedLocation, true, title, true));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowNavigationControllerPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPNavigationViewController, System.Int32, System.Int32, Infragistics.CPPopupPosition, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32)" />*/
	showBubblePopup: function (relativeView, captureView, captureViewAction, title, message, turnOffText, gotItText, turnOffAll, turnOffCurrent, preferredWidth) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPBubblePopupManager(0, relativeView, captureView, captureViewAction, title, message, turnOffText, gotItText, 0, 0, false, null, turnOffAll, turnOffCurrent, null, preferredWidth));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32, System.Int32, System.Int32)" />*/
	showBubblePopup1: function (relativeView, captureView, captureViewAction, title, message, turnOffText, gotItText, turnOffAll, turnOffCurrent, x, y, preferredWidth) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPBubblePopupManager(1, relativeView, captureView, captureViewAction, title, message, turnOffText, gotItText, 0, 0, false, null, turnOffAll, turnOffCurrent, null, preferredWidth, x, y));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowOnboardingBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, System.Int32, System.Int32, System.Boolean, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32, System.Int32, System.Int32)" />*/
	showOnboardingBubblePopup: function (relativeView, captureView, captureViewAction, title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, x, y, preferredWidth) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPBubblePopupManager(1, relativeView, captureView, captureViewAction, title, message, leftButtonText, rightButtonText, sequenceIndex, sequenceCount, showDisableHints, disableHintsText, leftButtonPressedBlock, rightButtonPressedBlock, closeButtonPressedBlock, preferredWidth, x, y));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowOnboardingBubblePopup(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.ExecutionBlock, System.String, System.String, System.String, System.String, System.Int32, System.Int32, System.Boolean, System.String, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, Infragistics.ExecutionBlock, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock)" />*/
	showTextEditorPopup2: function (relativeView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, applyAction) {
		return $.ig.CPPopupManager.prototype.showTextEditorPopup3(relativeView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, applyAction, -1);
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock, System.Int32)" />*/
	showTextEditorPopup3: function (relativeView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, applyAction, maxCharacterCount) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPEditTextPopupManager(0, relativeView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, -1, applyAction, null, maxCharacterCount));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock)" />*/
	showTextEditorPopup: function (relativeView, catpureView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, applyAction) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPEditTextPopupManager(1, relativeView, catpureView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, -1, applyAction, null));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock, System.Boolean)" />*/
	showTextEditorPopup1: function (relativeView, catpureView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, applyAction, allowEmpty) {
		return $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPEditTextPopupManager(2, relativeView, catpureView, startText, hintText, applyButtonText, cancelButtonText, applyIcon, -1, applyAction, null, allowEmpty));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowTextEditorPopup(Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, System.String, System.String, System.String, Infragistics.PathIcon, Infragistics.StringBlock, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::NotifyPositiveMessage(Infragistics.CPViewBase, System.String, System.String, System.String)" />*/
	notifyPositiveMessage: function (relativeView, title, message, url) {
		if (null == relativeView) {
			return null;
		}
		if (title == null) {
			title = message;
			message = null;
		}
		var view = new $.ig.CPNotificationMessageView(title, message, url, $.ig.ThemeManager.prototype.theme().successColor().$native());
		view.calculateSizeToFit();
		view._popupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupNotificationMessageManager(relativeView, view, view.getCalculatedWidth(), view.getCalculatedHeight(), $.ig.CPPopupPosition.prototype.toast));
		$.ig.UIUtility.prototype.setAccessibilityName2(view, "notificationOK_", title);
		return view._popupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::NotifyPositiveMessage(Infragistics.CPViewBase, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::NotifyErrorMessage(Infragistics.CPViewBase, System.String, System.String, System.String)" />*/
	notifyErrorMessage: function (relativeView, title, message, url) {
		if (null == relativeView) {
			return null;
		}
		if (title == null) {
			title = message;
			message = null;
		}
		var view = new $.ig.CPNotificationMessageView(title, message, url, $.ig.ThemeManager.prototype.theme().errorColor().$native());
		view.calculateSizeToFit();
		view._popupId = $.ig.CPPopupManager.prototype.showPopup1(relativeView, new $.ig.CPPopupNotificationMessageManager(relativeView, view, view.getCalculatedWidth(), view.getCalculatedHeight(), $.ig.CPPopupPosition.prototype.toast));
		$.ig.UIUtility.prototype.setAccessibilityName2(view, "notificationError_", title);
		return view._popupId;
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::NotifyErrorMessage(Infragistics.CPViewBase, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::MaximizeView(Infragistics.CPViewBase)" />*/
	maximizeView: function (view) {
		return $.ig.CPPopupManager.prototype.showPopup1(view, new $.ig.CPMaximizePopupManager(view));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::MaximizeView(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowHighlightPopup(Infragistics.CPViewBase)" />*/
	showHighlightPopup: function (view) {
		return $.ig.CPPopupManager.prototype.showPopup1(view, new $.ig.CPHighlightAreaPopupManager(view));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowHighlightPopup(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowHighlightViewPopup(Infragistics.CPViewBase, Infragistics.ExecutionBlock)" />*/
	showHighlightViewPopup: function (captureView, viewClicked) {
		return $.ig.CPPopupManager.prototype.showPopup1(captureView, new $.ig.CPHighlightViewPopupManager(captureView, viewClicked));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowHighlightViewPopup(Infragistics.CPViewBase, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::ShowFullScreenProgress(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock)" />*/
	showFullScreenProgress: function (rootView, labelText, cancelBlock) {
		$.ig.CPPopupManager.prototype.hideFullScreenProgress();
		var cancelPopupBlock = null;
		if (cancelBlock != null) {
			cancelPopupBlock = function () {
				$.ig.CPPopupManager.prototype.hideFullScreenProgress();
				cancelBlock();
			};
		}
		$.ig.CPPopupManager.prototype.__fullScreenProgressId = $.ig.CPPopupManager.prototype.showPopup1(rootView, new $.ig.CPProgressPopupManager(labelText, cancelPopupBlock));
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::ShowFullScreenProgress(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupManager::HideFullScreenProgress()" />*/
	hideFullScreenProgress: function () {
		if ($.ig.CPPopupManager.prototype.__fullScreenProgressId != null) {
			$.ig.CPPopupManager.prototype.closePopup($.ig.CPPopupManager.prototype.__fullScreenProgressId, true);
			$.ig.CPPopupManager.prototype.__fullScreenProgressId = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupManager::HideFullScreenProgress()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopupWithNav(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.CPPopupPosition)" />*/
	showContentPopupWithNav: function (relativeView, captureView, view, title, preferredLocation) {
		var nav = new $.ig.CPNavigationViewController(1, new $.ig.CPContentViewController(view, title, null, true));
		$.ig.ThemeManager.prototype.theme().styleNavigationBarForModal(nav);
		return $.ig.CPPopupManager.prototype.showPopup(relativeView, nav, new $.ig.CPContentPopupManager(1, relativeView, captureView, view, -1, -1, false, null, preferredLocation, true, title, false, true));
	}
	/*<EndMethod Name="System.String Infragistics.CPPopupManager::ShowContentPopupWithNav(Infragistics.CPViewBase, Infragistics.CPViewBase, Infragistics.CPViewBase, System.String, Infragistics.CPPopupPosition)" />*/
	,
	$type: new $.ig.Type('CPPopupManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupManager" />*/

/*<BeginType Name="Infragistics.CPPopupMessageBoxManager" />*/

$.ig.util.defType('CPPopupMessageBoxManager', 'CPPopupManagerBase', {
	__confirmAction: null,
	__cancelAction: null,
	__closeAction: null,
	__messageBox: null,
	__info: null,
	__isModal: false,
	__totalWidth: 0,
	__totalHeight: 0,
	__isOldPopupStyle: false,
	__shadowView: null,
	__popup: null,
	__view: null,
	__hasCancelButton: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return !this.__isModal;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupMessageBoxManager::AcceptsInput()" />*/
	,
	init: function (initNumber, view, title, question, useRichQuestion, questionFormattingBlocks, confirmText, cancelText, confirmColor, isModal, oldStye, info, confirmBlock, cancelBlock, closeBlock) {
		var $self = this;
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__view = view;
		this.__isOldPopupStyle = oldStye;
		this.__isModal = isModal;
		this.__info = info;
		if (useRichQuestion) {
			this.__messageBox = new $.ig.CPRichMessageBoxView(this.__view, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, function () {
				$self.confirm();
			}, function () {
				$self.cancel();
			}, closeBlock == null ? null : function () {
				$self.close();
			});
		} else {
			this.__messageBox = new $.ig.CPMessageBoxView(this.__view, title, question, confirmText, cancelText, confirmColor, function () {
				$self.confirm();
			}, function () {
				$self.cancel();
			}, closeBlock == null ? null : function () {
				$self.close();
			});
		}
		if (title != null) {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__messageBox, "MessageBoxView_" + title);
		}
		this.__messageBox.clipToBounds(true);
		this.__messageBox.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
		this.__hasCancelButton = cancelText != null;
		this.__cancelAction = cancelBlock;
		this.__confirmAction = confirmBlock;
		this.__closeAction = closeBlock;
	},
	init1: function (initNumber, title, question, confirmText, cancelText, confirmColor, isModal, oldStye, info, confirmBlock, cancelBlock, closeBlock) {
		$.ig.CPPopupMessageBoxManager.prototype.init.call(this, 0, null, title, question, false, null, confirmText, cancelText, confirmColor, isModal, oldStye, info, confirmBlock, cancelBlock, closeBlock);
	},
	init2: function (initNumber, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, isModal, oldStye, info, confirmBlock, cancelBlock, closeBlock) {
		$.ig.CPPopupMessageBoxManager.prototype.init.call(this, 0, null, title, question, true, questionFormattingBlocks, confirmText, cancelText, confirmColor, isModal, oldStye, info, confirmBlock, cancelBlock, closeBlock);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::FinishedShowing()" />*/
	finishedShowing: function () {
		$.ig.CPPopupManagerBase.prototype.finishedShowing.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::FinishedShowing()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Cancel()" />*/
	cancel: function () {
		this.__popup.close(true);
		if (this.__cancelAction != null) {
			this.__cancelAction(this.__info);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Cancel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Confirm()" />*/
	confirm: function () {
		this.__popup.close(true);
		if (this.__confirmAction != null) {
			this.__confirmAction(this.__info);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Confirm()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Close()" />*/
	close: function () {
		this.__popup.close(true);
		if (this.__closeAction != null) {
			this.__closeAction(this.__info);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Close()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::FocusManagerRegistered()" />*/
	focusManagerRegistered: function () {
		$.ig.CPPopupManagerBase.prototype.focusManagerRegistered.call(this);
		var currentFocusManager = $.ig.CPKeyboardEventManager.prototype.getCurrentFocusManager();
		this.__messageBox.focusManagerRegistered(currentFocusManager._currentSection._sectionId);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::FocusManagerRegistered()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		this.__popup = popup;
		this.__shadowView = new $.ig.CPView();
		this.__shadowView.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		this.__shadowView.setCornerRadius($.ig.ThemeManager.prototype.theme().modalCornerRadius());
		$.ig.ThemeManager.prototype.theme().applyModalDialogShadowToView(this.__shadowView);
		popup.addSubview(this.__shadowView);
		popup.addSubview(this.__messageBox);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPPopupMessageBoxManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPPopupManagerBase.prototype.getSupportedKeyCommands.call(this);
		if (this.__closeAction != null) {
			commands.add(new $.ig.CPKeyCommand(1, $.ig.CPKeyCombo.prototype.close(), function (k) {
				$self.close();
			}));
		}
		if (this.__confirmAction != null) {
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(1, "Confirm", $.ig.Key.prototype.enter, false, false, false), function (k) {
				$self.confirm();
			}));
		}
		if (this.__confirmAction == null && this.__closeAction == null && this.__cancelAction == null) {
			var combos = $.ig.CPKeyCombo.prototype.close();
			combos.add(new $.ig.CPKeyCombo(1, "Close", $.ig.Key.prototype.enter, false, false, false));
			commands.add(new $.ig.CPKeyCommand(1, combos, function (k) {
				$self.__popup.close(true);
			}));
		}
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPPopupMessageBoxManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Layout(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Boolean)" />*/
	layout: function (popup, w, h, hiddenPosition) {
		var width = this.__totalWidth;
		var height = this.__totalHeight;
		var opacity = (hiddenPosition ? 0 : 1);
		var offset = hiddenPosition ? $.ig.ThemeManager.prototype.theme().navigationOffsetDistance() : 0;
		var top = ($.ig.intDivide(h, 2) - $.ig.intDivide(height, 2)) + offset;
		var left = $.ig.intDivide(w, 2) - $.ig.intDivide(width, 2);
		popup.measureView1(this.__messageBox, left, top, width, height, opacity);
		popup.measureView1(this.__shadowView, left, top, width, height, opacity);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Layout(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		this.calculateMessageBoxSize(w);
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.layout(popup, w, h, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		this.calculateMessageBoxSize(w);
		$.ig.CPPopupManagerBase.prototype.prepareForAnimation.call(this, popup, root, w, h);
		this.layout(popup, w, h, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::CalculateMessageBoxSize(System.Int32)" />*/
	calculateMessageBoxSize: function (w) {
		var preferredWidth = $.ig.NativeUIUtility.prototype.utility().densify(440);
		var outerPadding = $.ig.NativeUIUtility.prototype.utility().densify(40);
		if (w > 0 && w < (preferredWidth + outerPadding * 2)) {
			preferredWidth = w - outerPadding * 2;
		}
		this.__totalHeight = this.__messageBox.calculateSize(preferredWidth);
		this.__totalWidth = preferredWidth;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::CalculateMessageBoxSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::ApplyColorSet(Infragistics.CPThemeColorSet)" />*/
	applyColorSet: function (colorSet) {
		this.__messageBox.applyColorSet(colorSet);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::ApplyColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::SetConfirmColorSet(Infragistics.CPThemeColorSet)" />*/
	setConfirmColorSet: function (colorSet) {
		this.__messageBox.setConfirmColorSet(colorSet);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupMessageBoxManager::SetConfirmColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	$type: new $.ig.Type('CPPopupMessageBoxManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupMessageBoxManager" />*/

/*<BeginType Name="Infragistics.CPMessageBoxView" />*/

$.ig.util.defType('CPMessageBoxView', 'CPView', {
	__titleLabel: null,
	__questionLabel: null,
	__cancelButton: null,
	__confirmButton: null,
	__closeButton: null,
	__hasQuestion: false,
	__stackButtons: false,
	__numberOfButtons: 0,
	__largePadding: 0,
	__hButtonSpacing: 0,
	__vButtonSpacing: 0,
	__vLabelSpacing: 0,
	__hLabelSpacing: 0,
	__labelButtonSpacing: 0,
	__viewSpacing: 0,
	__view: null,
	init: function (view, title, question, confirmText, cancelText, confirmColor, confirm, cancel, close) {
		$.ig.CPView.prototype.init.call(this);
		this.__largePadding = $.ig.ThemeManager.prototype.theme().padding30();
		this.__hButtonSpacing = $.ig.ThemeManager.prototype.theme().padding15();
		this.__vButtonSpacing = $.ig.ThemeManager.prototype.theme().padding10();
		this.__hLabelSpacing = $.ig.ThemeManager.prototype.theme().padding20();
		this.__vLabelSpacing = $.ig.ThemeManager.prototype.theme().padding15();
		this.__labelButtonSpacing = $.ig.ThemeManager.prototype.theme().padding30();
		this.__viewSpacing = $.ig.ThemeManager.prototype.theme().padding10();
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().mainBackgroundColor().$native());
		if (view != null) {
			this.__view = view;
			this.addSubview(this.__view);
		}
		this.__titleLabel = new $.ig.CPLabel();
		this.__titleLabel.setText(title);
		this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeH2(), $.ig.ThemeManager.prototype.theme().boldFont());
		this.__titleLabel.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__titleLabel.setTextWrapping(true);
		this.__titleLabel.setTextClipping(false);
		this.__titleLabel.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		if (title != null) {
			this.__titleLabel.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName1("message_TitleLabel_", title));
		}
		this.addSubview(this.__titleLabel);
		this.createQuestionLabel(question);
		this.__hasQuestion = question != null && !question.equals("");
		this.__numberOfButtons = 0;
		if (cancelText != null) {
			this.__numberOfButtons++;
			this.__cancelButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.bordered);
			this.__cancelButton.setText(cancelText);
			this.__cancelButton.addClickHandler(function (x, y) {
				if (cancel != null) {
					cancel();
				}
			});
			this.addSubview(this.__cancelButton);
			if (cancelText != null) {
				$.ig.UIUtility.prototype.setAccessibilityName2(this.__cancelButton, "cancelButton_", cancelText);
			} else {
				$.ig.UIUtility.prototype.setAccessibilityName1(this.__cancelButton, "cancelButton_");
			}
		}
		if (confirmText != null) {
			this.__numberOfButtons++;
			this.__confirmButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.accent);
			this.__confirmButton.setText(confirmText);
			this.__confirmButton.setAccentColor(new $.ig.CPThemeColorSet(0, $.ig.ColorUtility.prototype.convertToInt(confirmColor)));
			this.__confirmButton.addClickHandler(function (x, y) {
				if (confirm != null) {
					confirm();
				}
			});
			this.addSubview(this.__confirmButton);
		}
		if (confirmText != null) {
			$.ig.UIUtility.prototype.setAccessibilityName2(this.__confirmButton, "confirmButton_", confirmText);
		} else {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__confirmButton, "confirmButton_");
		}
		if (close != null) {
			this.__closeButton = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, $.ig.UIPathIcons.prototype.icons().getEMCloseIcon(), function (x, y) {
				close();
			});
			this.addSubview(this.__closeButton);
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.CPMessageBoxView::SetConfirmColorSet(Infragistics.CPThemeColorSet)" />*/
	setConfirmColorSet: function (colorSet) {
		if (this.__confirmButton != null) {
			this.__confirmButton.setAccentColor(colorSet);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageBoxView::SetConfirmColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMessageBoxView::ApplyColorSet(Infragistics.CPThemeColorSet)" />*/
	applyColorSet: function (color) {
		this.setBackgroundColor(color.$native());
		if (this.__closeButton != null) {
			this.__closeButton.applyInteractionColorSet(color);
		}
		if (this.__cancelButton != null) {
			this.__cancelButton.applyInteractionColorSet(color);
		}
		this.__titleLabel.setTextColor(color.foreground().$native());
		if (this.__questionLabel != null) {
			this.__questionLabel.setTextColor(color.foreground().$native());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageBoxView::ApplyColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMessageBoxView::CreateQuestionLabel(System.String)" />*/
	createQuestionLabel: function (text) {
		this.__questionLabel = new $.ig.CPLabel();
		this.__questionLabel.setText(text);
		this.__questionLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__questionLabel.setTextWrapping(true);
		this.__questionLabel.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__questionLabel.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__questionLabel.name($.ig.UIUtility.prototype.getValidAccessibilityName1("message_QuestionLabel_", text));
		this.addSubview(this.__questionLabel);
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageBoxView::CreateQuestionLabel(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMessageBoxView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var top = this.__largePadding;
		if (this.__closeButton != null) {
			var cbw = this.__closeButton.getCalculatedWidth();
			var cbh = this.__closeButton.getCalculatedHeight();
			this.measureView1(this.__closeButton, w - cbw, 0, cbw, cbh, 1);
		}
		var availWidth = w - this.__largePadding * 2;
		this.measureView1(this.__titleLabel, this.__largePadding, top, availWidth, this.__tlh, $.ig.ThemeManager.prototype.theme().restOpacity());
		top += this.__tlh;
		if (this.__hasQuestion) {
			top += (this.__stackButtons) ? this.__vLabelSpacing : this.__hLabelSpacing;
			this.measureView1(this.getQuestionLabelView(), this.__largePadding, top, availWidth, this.__qlh, $.ig.ThemeManager.prototype.theme().restOpacity());
			top += this.__qlh;
		}
		if (this.__view != null) {
			top += this.__viewSpacing;
			this.measureView1(this.__view, $.ig.intDivide(w, 2) - $.ig.intDivide(this.__vw, 2), top, this.__vw, this.__vh, $.ig.ThemeManager.prototype.theme().restOpacity());
			top += this.__vh;
		}
		top += this.__labelButtonSpacing;
		if (this.__stackButtons) {
			if (this.__confirmButton != null) {
				this.measureView1(this.__confirmButton, $.ig.intDivide(w, 2) - $.ig.intDivide(this.__bw, 2), top, this.__bw, this.__bh, 1);
				top += this.__bh;
			}
			if (this.__cancelButton != null) {
				if (this.__confirmButton != null) {
					top += this.__vButtonSpacing;
				}
				this.measureView1(this.__cancelButton, $.ig.intDivide(w, 2) - $.ig.intDivide(this.__bw, 2), top, this.__bw, this.__bh, 1);
			}
		} else {
			var tbw = this.__bw * this.__numberOfButtons + (this.__hButtonSpacing * (this.__numberOfButtons - 1));
			var left = $.ig.intDivide(w, 2) - $.ig.intDivide(tbw, 2);
			if (this.__cancelButton != null) {
				this.measureView1(this.__cancelButton, left, top, this.__bw, this.__bh, 1);
				left += this.__bw + this.__hButtonSpacing;
			}
			if (this.__confirmButton != null) {
				this.measureView1(this.__confirmButton, left, top, this.__bw, this.__bh, 1);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageBoxView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	__bw: 0,
	__bh: 0,
	__tlh: 0,
	__qlh: 0,
	__vh: 0,
	__vw: 0,
	/*<BeginMethod Name="System.Int32 Infragistics.CPMessageBoxView::CalculateSize(System.Int32)" />*/
	calculateSize: function (w) {
		$.ig.CPView.prototype.calculateSizeToFit.call(this);
		var preferredButtonWidth = $.ig.ThemeManager.prototype.theme().fixedButtonWidth();
		this.__bw = preferredButtonWidth;
		this.__bh = 0;
		if (this.__confirmButton != null) {
			this.__confirmButton.calculateSizeToFit();
			this.__bw = Math.max(this.__confirmButton.getCalculatedWidth(), this.__bw);
			this.__bh = this.__confirmButton.getCalculatedHeight();
		}
		if (this.__cancelButton != null) {
			this.__cancelButton.calculateSizeToFit();
			this.__bw = Math.max(this.__cancelButton.getCalculatedWidth(), this.__bw);
			this.__bh = Math.max(this.__cancelButton.getCalculatedHeight(), this.__bh);
		}
		this.__stackButtons = (this.__bw * this.__numberOfButtons + this.__hButtonSpacing + this.__labelButtonSpacing * 2 > w);
		var totalHeight = this.__largePadding;
		var availWidth = w - this.__largePadding * 2;
		this.__titleLabel.calculateSizeToFit1(availWidth);
		this.__tlh = this.__titleLabel.getCalculatedHeight();
		totalHeight += this.__tlh;
		this.__qlh = 0;
		if (this.__hasQuestion) {
			if (this.__stackButtons) {
				totalHeight += this.__vLabelSpacing;
			} else {
				totalHeight += this.__hLabelSpacing;
			}
			this.__qlh = this.getQuestionLabelCalculatedHeight(availWidth);
			totalHeight += this.__qlh;
		}
		this.__vh = 0;
		if (this.__view != null) {
			this.__view.calculateSizeToFit();
			this.__vh = this.__view.getCalculatedHeight();
			this.__vw = this.__view.getCalculatedWidth() == 0 ? availWidth : Math.max(this.__view.getCalculatedWidth(), availWidth);
			totalHeight += this.__viewSpacing + this.__vh;
		}
		totalHeight += this.__labelButtonSpacing;
		if (this.__stackButtons) {
			totalHeight += this.__bh * this.__numberOfButtons + (this.__vButtonSpacing * (this.__numberOfButtons - 1));
		} else {
			totalHeight += this.__bh;
		}
		totalHeight += this.__largePadding;
		return totalHeight;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPMessageBoxView::CalculateSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPMessageBoxView::GetQuestionLabelCalculatedHeight(System.Int32)" />*/
	getQuestionLabelCalculatedHeight: function (width) {
		this.__questionLabel.calculateSizeToFit1(width);
		return this.__questionLabel.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPMessageBoxView::GetQuestionLabelCalculatedHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Windows.View Infragistics.CPMessageBoxView::GetQuestionLabelView()" />*/
	getQuestionLabelView: function () {
		return this.__questionLabel;
	}
	/*<EndMethod Name="System.Windows.View Infragistics.CPMessageBoxView::GetQuestionLabelView()" />*/
	,
	$type: new $.ig.Type('CPMessageBoxView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMessageBoxView" />*/

/*<BeginType Name="Infragistics.CPRichMessageBoxView" />*/

$.ig.util.defType('CPRichMessageBoxView', 'CPMessageBoxView', {
	__richQuestionLabel: null,
	init: function (view, title, question, questionFormattingBlocks, confirmText, cancelText, confirmColor, confirm, cancel, close) {
		$.ig.CPMessageBoxView.prototype.init.call(this, view, title, question, confirmText, cancelText, confirmColor, confirm, cancel, close);
		if (questionFormattingBlocks != null && questionFormattingBlocks.length > 0) {
			this.__richQuestionLabel.setRichTextFormattingBlocks(questionFormattingBlocks);
		}
	},
	/*<BeginMethod Name="System.Void Infragistics.CPRichMessageBoxView::CreateQuestionLabel(System.String)" />*/
	createQuestionLabel: function (text) {
		this.__richQuestionLabel = new $.ig.CPMessageTextView();
		this.__richQuestionLabel.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__richQuestionLabel.turnOffAutoCapitalization();
		this.__richQuestionLabel.setReadOnly(true);
		this.__richQuestionLabel.setTextAlignment($.ig.TextAlignment.prototype.center);
		this.__richQuestionLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		this.__richQuestionLabel.setText(text);
		this.__richQuestionLabel.name($.ig.UIUtility.prototype.getValidAccessibilityName1("message_RichQuestionLabel_", text));
		this.addSubview(this.__richQuestionLabel);
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichMessageBoxView::CreateQuestionLabel(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPRichMessageBoxView::GetQuestionLabelCalculatedHeight(System.Int32)" />*/
	getQuestionLabelCalculatedHeight: function (width) {
		this.__richQuestionLabel.calculateSizeToFit1(width);
		return this.__richQuestionLabel.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPRichMessageBoxView::GetQuestionLabelCalculatedHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Windows.View Infragistics.CPRichMessageBoxView::GetQuestionLabelView()" />*/
	getQuestionLabelView: function () {
		return this.__richQuestionLabel;
	}
	/*<EndMethod Name="System.Windows.View Infragistics.CPRichMessageBoxView::GetQuestionLabelView()" />*/
	,
	$type: new $.ig.Type('CPRichMessageBoxView', $.ig.CPMessageBoxView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichMessageBoxView" />*/

/*<BeginType Name="Infragistics.CPPopupNotificationMessageManager" />*/

$.ig.util.defType('CPPopupNotificationMessageManager', 'CPContentPopupManager', {
	init: function (relativeView, contentView, contentWidth, contentHeight, preferedLocation) {
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, null, contentView, contentWidth, contentHeight, null, preferedLocation, false, null, false);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupNotificationMessageManager::CornerRadius()" />*/
	cornerRadius: function () {
		return $.ig.intDivide(this.getContentHeight(), 2);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupNotificationMessageManager::CornerRadius()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPPopupNotificationMessageManager::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		return $.ig.CPTheme.prototype.clearColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPPopupNotificationMessageManager::GetBackgroundColor()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPPopupNotificationMessageManager::AutoHideDuration()" />*/
	autoHideDuration: function () {
		return 3000;
	}
	/*<EndProperty Name="System.Double Infragistics.CPPopupNotificationMessageManager::AutoHideDuration()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupNotificationMessageManager::MinSize()" />*/
	minSize: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupNotificationMessageManager::MinSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupNotificationMessageManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupNotificationMessageManager::Hide()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::SupportsKeyboard()" />*/
	supportsKeyboard: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::SupportsKeyboard()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::ConsiderAsTopMostPopup()" />*/
	considerAsTopMostPopup: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupNotificationMessageManager::ConsiderAsTopMostPopup()" />*/
	,
	$type: new $.ig.Type('CPPopupNotificationMessageManager', $.ig.CPContentPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupNotificationMessageManager" />*/

/*<BeginType Name="Infragistics.CPNotificationMessageView" />*/

$.ig.util.defType('CPNotificationMessageView', 'CPInteractionView', {
	__messageLabel: null,
	__titleLabel: null,
	__closeButton: null,
	__url: null,
	init: function (title, message, url, color) {
		var $self = this;
		$.ig.CPInteractionView.prototype.init.call(this);
		this.setBackgroundColor(color);
		var foreground = $.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.resolveForgroundColorForColor($.ig.ColorUtility.prototype.convertToInt(color)));
		this.__titleLabel = new $.ig.CPLabel();
		this.__titleLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().boldFont());
		this.__titleLabel.setText(title);
		this.__titleLabel.setTextColor(foreground);
		this.addSubview(this.__titleLabel);
		if (message != null) {
			this.__messageLabel = new $.ig.CPLabel();
			this.__messageLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__messageLabel.setText(message);
			this.__messageLabel.setTextColor(foreground);
			this.addSubview(this.__messageLabel);
		}
		this.__url = url;
		this.__lineSpacinig = $.ig.ThemeManager.prototype.theme().padding5();
		this.__edgePadding = $.ig.NativeUIUtility.prototype.utility().densify(15);
		this.__closeButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.standard);
		this.__closeButton.setColor(foreground);
		this.__closeButton.setIcon($.ig.UIPathIcons.prototype.icons().getEMCloseIcon());
		this.__closeButton.addClickHandler(function (x, y) {
			$self.close();
		});
		this.addSubview(this.__closeButton);
	},
	_popupId: null,
	/*<BeginMethod Name="System.Void Infragistics.CPNotificationMessageView::Close()" />*/
	close: function () {
		$.ig.CPPopupManager.prototype.closePopup(this._popupId, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPNotificationMessageView::Close()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNotificationMessageView::HandleClick(System.Int32, System.Int32)" />*/
	handleClick: function (x, y) {
		$.ig.CPInteractionView.prototype.handleClick.call(this, x, y);
		if (this.__url != null) {
		}
		this.close();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNotificationMessageView::HandleClick(System.Int32, System.Int32)" />*/
	,
	__calcH: 0,
	__calcW: 0,
	__mlw: 0,
	__mlh: 0,
	__titlelw: 0,
	__titlelh: 0,
	__edgePadding: 0,
	__lineSpacinig: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPNotificationMessageView::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPInteractionView.prototype.calculateSizeToFit.call(this);
		var totalPadding = this.__edgePadding * 2;
		var max = $.ig.ThemeManager.prototype.theme().maxTooltipWidth() - totalPadding;
		var lineSpacing = 0;
		this.__titlelw = 0;
		this.__titlelh = 0;
		this.__titleLabel.calculateSizeToFit();
		this.__titlelw = this.__titleLabel.getCalculatedWidth();
		if (this.__titlelw > max) {
			this.__titleLabel.setTextWrapping(true);
			this.__titleLabel.calculateSizeToFit1(max);
			this.__titlelw = this.__titleLabel.getCalculatedWidth();
		}
		this.__titlelh = this.__titleLabel.getCalculatedHeight();
		if (this.__messageLabel != null) {
			this.__messageLabel.calculateSizeToFit();
			this.__mlw = this.__messageLabel.getCalculatedWidth();
			if (this.__mlw > max) {
				this.__messageLabel.setTextWrapping(true);
				this.__messageLabel.calculateSizeToFit1(max);
				this.__mlw = this.__messageLabel.getCalculatedWidth();
			}
			this.__mlh = this.__messageLabel.getCalculatedHeight();
			lineSpacing += this.__lineSpacinig;
		}
		this.__calcH = (this.__mlh + this.__titlelh + (this.__edgePadding * 2)) + lineSpacing;
		this.__calcW = Math.max(this.__titlelw, this.__mlw) + (this.__edgePadding * 2) + this.__closeButton.getCalculatedHeight();
	}
	/*<EndMethod Name="System.Void Infragistics.CPNotificationMessageView::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNotificationMessageView::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNotificationMessageView::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPNotificationMessageView::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPNotificationMessageView::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPNotificationMessageView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		if (this.__titlelw == 0) {
			this.calculateSizeToFit();
		}
		var top = this.__edgePadding;
		this.__closeButton.calculateSizeToFit();
		var bh = this.__closeButton.getCalculatedHeight();
		this.measureView1(this.__closeButton, w - bh, $.ig.intDivide(h, 2) - $.ig.intDivide(bh, 2), bh, bh, this.resolveOpacity(1, true));
		this.measureView(this.__titleLabel, this.__edgePadding, top, this.__titlelw, this.__titlelh);
		top += this.__titlelh + this.__lineSpacinig;
		if (this.__messageLabel != null) {
			this.measureView(this.__messageLabel, this.__edgePadding, top, this.__mlw, this.__mlh);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPNotificationMessageView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPNotificationMessageView', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPNotificationMessageView" />*/

/*<BeginType Name="Infragistics.CPPopupProgressView" />*/

$.ig.util.defType('CPPopupProgressView', 'CPViewBase', {
	__progressView: null,
	__contentPadding: 0,
	init: function (isIndeterminate, labelText, cancelBlock) {
		$.ig.CPViewBase.prototype.init.call(this);
		this.__contentPadding = $.ig.ThemeManager.prototype.theme().padding3();
		this.__progressView = new $.ig.ProgressDisplayView(isIndeterminate, labelText, cancelBlock);
		this.addSubview(this.__progressView);
		this.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
	},
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupProgressView::ContentPadding()" />*/
	contentPadding: function (value) {
		if (arguments.length === 1) {
			this.__contentPadding = value;
			return value;
		} else {
			return this.__contentPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupProgressView::ContentPadding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupProgressView::Start()" />*/
	start: function () {
		this.__progressView.start();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupProgressView::Start()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupProgressView::Stop()" />*/
	stop: function () {
		this.__progressView.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupProgressView::Stop()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupProgressView::Unload()" />*/
	unload: function () {
		this.removeSubview(this.__progressView);
		this.__progressView = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupProgressView::Unload()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupProgressView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureView(this.__progressView, this.__contentPadding, this.__contentPadding, w - this.__contentPadding * 2, h - this.__contentPadding * 2);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupProgressView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPPopupProgressView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupProgressView" />*/

/*<BeginType Name="Infragistics.CPPopupSliderItem" />*/

$.ig.util.defType('CPPopupSliderItem', 'CPPopupListItemBase', {
	_minValue: 0,
	_maxValue: 0,
	_itemValue: 0,
	_stepInterval: 0,
	_maxIcon: null,
	_minIcon: null,
	init: function (initNumber, min, max, value, step, itemTag, maxValIcon, minValIcon, actionItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._minValue = min;
		this._maxValue = max;
		this._itemValue = value;
		this._stepInterval = step;
		this._maxIcon = maxValIcon;
		this._minIcon = minValIcon;
	},
	init1: function (initNumber, min, max, value, step, itemTag, maxValIcon, minValIcon, actionItem, minAction, maxAction) {
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._minValue = min;
		this._maxValue = max;
		this._itemValue = value;
		this._stepInterval = step;
		this._maxIcon = maxValIcon;
		this._minIcon = minValIcon;
	},
	/*<BeginProperty Name="System.String Infragistics.CPPopupSliderItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "slider";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupSliderItem::CellIdentifier()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupSliderItem::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		return new $.ig.CPPopupSliderViewCell(identifier);
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupSliderItem::CreateNewCell(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSliderItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		this._calculatedHeight = $.ig.ThemeManager.prototype.theme().largeHitSize();
		var iconsize = 0;
		if (this._maxIcon != null) {
			iconsize = this._calculatedHeight;
		}
		this._calculatedWidth = $.ig.NativeUIUtility.prototype.utility().densify(150) + iconsize * 2;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSliderItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	$type: new $.ig.Type('CPPopupSliderItem', $.ig.CPPopupListItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSliderItem" />*/

/*<BeginType Name="Infragistics.CPPopupSliderViewCell" />*/

$.ig.util.defType('CPPopupSliderViewCell', 'CPPopupListViewCellBase', {
	__minIconView: null,
	__maxIconView: null,
	__slider: null,
	__step: 0,
	init: function (identifier) {
		var $self = this;
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
		this.__slider = new $.ig.CPSlider(false);
		this.addSubview(this.__slider);
		this.__maxIconView = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, null, function (x, y) {
			$self.__slider._value = Math.min($self.__slider._maxValue, $self.__slider._value + $self.__step);
			$self.updateSlider();
		});
		this.__maxIconView.supportsRapidClicks(true);
		this.addSubview(this.__maxIconView);
		this.__minIconView = $.ig.ThemeManager.prototype.theme().createNavBarButton(null, null, function (x, y) {
			$self.__slider._value = Math.max($self.__slider._minValue, $self.__slider._value - $self.__step);
			$self.updateSlider();
		});
		this.__minIconView.supportsRapidClicks(true);
		this.addSubview(this.__minIconView);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSliderViewCell::UpdateSlider()" />*/
	updateSlider: function () {
		this.__slider.sizeChanged(this.__slider.currentWidth(), this.__slider.currentHeight());
		if (this.__slider._valueChanged != null) {
			this.__slider._valueChanged(this.__slider._value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSliderViewCell::UpdateSlider()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSliderViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	processItem: function (item) {
		$.ig.CPPopupListViewCellBase.prototype.processItem.call(this, item);
		var listItem = item;
		this.__slider._minValue = listItem._minValue;
		this.__slider._maxValue = listItem._maxValue;
		this.__slider._value = listItem._itemValue;
		this.__step = listItem._stepInterval;
		this.__maxIconView.setIcon(listItem._maxIcon);
		this.__minIconView.setIcon(listItem._minIcon);
		this.__slider._valueChanged = item._action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSliderViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSliderViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPPopupListViewCellBase.prototype.sizeChanged.call(this, w, h);
		var iconSize = 0;
		var padding = 0;
		if (this.__minIconView.iconView()._hasIcon) {
			iconSize = this.__minIconView.getCalculatedHeight();
			padding = $.ig.truncate(((h - iconSize) / 2));
			this.measureView(this.__minIconView, padding, $.ig.intDivide(h, 2) - $.ig.intDivide(iconSize, 2), iconSize, iconSize);
			this.measureView(this.__maxIconView, w - padding - iconSize, $.ig.intDivide(h, 2) - $.ig.intDivide(iconSize, 2), iconSize, iconSize);
		}
		this.measureView(this.__slider, iconSize + padding * 2, 0, w - (iconSize * 2 + padding * 4), h);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSliderViewCell::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPPopupSliderViewCell::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPPopupSliderViewCell::HandlesUIInteraction()" />*/
	,
	$type: new $.ig.Type('CPPopupSliderViewCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSliderViewCell" />*/

/*<BeginType Name="Infragistics.CPPopupSwitchItem" />*/

$.ig.util.defType('CPPopupSwitchItem', 'CPPopupListItemBase', {
	_label: null,
	_icon: null,
	_switchValue: false,
	init: function (isSelected, labelValue, itemIcon, itemTag, actionItem) {
		$.ig.CPPopupListItemBase.prototype.init.call(this, 0, itemTag, actionItem);
		this._switchValue = isSelected;
		this._label = labelValue;
		this._icon = itemIcon;
	},
	/*<BeginProperty Name="System.String Infragistics.CPPopupSwitchItem::CellIdentifier()" />*/
	cellIdentifier: function () {
		return "switch";
	}
	/*<EndProperty Name="System.String Infragistics.CPPopupSwitchItem::CellIdentifier()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupSwitchItem::CreateNewCell(System.String)" />*/
	createNewCell: function (identifier) {
		return new $.ig.CPPopupSwitchViewCell(identifier);
	}
	/*<EndMethod Name="Infragistics.CPPopupListViewCellBase Infragistics.CPPopupSwitchItem::CreateNewCell(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSwitchItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	calculateSizeToFit: function (measureLabel) {
		this._calculatedHeight = $.ig.ThemeManager.prototype.theme().mediumHitSize();
		measureLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
		measureLabel.setText(this._label);
		measureLabel.calculateSizeToFit();
		var calculatedWidth = measureLabel.getCalculatedWidth();
		if (this._icon != null) {
			calculatedWidth = calculatedWidth + $.ig.truncate((this._calculatedHeight * 1.5));
		}
		this._calculatedWidth = calculatedWidth + $.ig.truncate((this._calculatedHeight * 1.5));
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSwitchItem::CalculateSizeToFit(Infragistics.CPLabel)" />*/
	,
	$type: new $.ig.Type('CPPopupSwitchItem', $.ig.CPPopupListItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSwitchItem" />*/

/*<BeginType Name="Infragistics.CPPopupSwitchViewCell" />*/

$.ig.util.defType('CPPopupSwitchViewCell', 'CPPopupListViewCellBase', {
	__switch: null,
	_cellItem: null,
	init: function (identifier) {
		var $self = this;
		$.ig.CPPopupListViewCellBase.prototype.init.call(this, identifier);
		this.__switch = new $.ig.CPSwitch(function (o) {
			$self.valueChanged(o);
		});
		this.addSubview(this.__switch);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::ValueChanged(System.Boolean)" />*/
	valueChanged: function (changed) {
		if (this._cellItem != null && this._cellItem._action != null) {
			if (this._cellItem._action(changed) && this._popup != null) {
				this._popup.close(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::ValueChanged(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	processItem: function (item) {
		$.ig.CPPopupListViewCellBase.prototype.processItem.call(this, item);
		this._cellItem = item;
		var listItem = item;
		this.iconView().setIcon(listItem._icon);
		this.iconView().setIntColor($.ig.ThemeManager.prototype.theme().foregroundColor().color());
		this.textLabel().setText(listItem._label);
		this.__switch.setValue(listItem._switchValue, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::ProcessItem(Infragistics.CPPopupListItemBase)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupSwitchViewCell::HasLeftContent()" />*/
	hasLeftContent: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupSwitchViewCell::HasLeftContent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPPopupSwitchViewCell::HasRightContent()" />*/
	hasRightContent: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPPopupSwitchViewCell::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPPopupSwitchViewCell::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		return 2;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPPopupSwitchViewCell::NumberOfItemsInRightContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		if (index == 1) {
			var size = guide.buttonGuide().size();
			var width = size * this.numberOfItemsInRightContentArea();
			this.measureView1(this.__switch, x, $.ig.intDivide(this.currentHeight(), 2) - $.ig.intDivide(size, 2), width, size, this.resolveOpacity(1, false));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPPopupSwitchViewCell::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	$type: new $.ig.Type('CPPopupSwitchViewCell', $.ig.CPPopupListViewCellBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPPopupSwitchViewCell" />*/

/*<BeginType Name="Infragistics.CPProgressPopupManager" />*/

$.ig.util.defType('CPProgressPopupManager', 'CPPopupManagerBase', {
	__progressView: null,
	__labelText: null,
	__cancelBlock: null,
	init: function (label, cancelBlock) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.__labelText = label;
		this.__cancelBlock = cancelBlock;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPProgressPopupManager::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPProgressPopupManager::SupportsAnimating()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPProgressPopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPProgressPopupManager::KeepTopMost()" />*/
	keepTopMost: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPProgressPopupManager::KeepTopMost()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(this.__labelText)) {
			var progressSize = $.ig.truncate(Math.min((Math.min(w, h) * 0.25), $.ig.NativeUIUtility.prototype.utility().densify(100)));
			popup.measureView(this.__progressView, $.ig.intDivide(w, 2) - $.ig.intDivide(progressSize, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(progressSize, 2), progressSize, progressSize);
		} else {
			var indicatorHeight = $.ig.NativeUIUtility.prototype.utility().densify(40);
			var indicatorWidth = this.__progressView.calculateWidth(indicatorHeight);
			popup.measureView(this.__progressView, $.ig.intDivide(w, 2) - $.ig.intDivide(indicatorWidth, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(indicatorHeight, 2), indicatorWidth, indicatorHeight);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressPopupManager::Hide()" />*/
	hide: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressPopupManager::Hide()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressPopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPPopupManagerBase.prototype.cleanUp.call(this);
		this.killProgress();
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressPopupManager::CleanUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressPopupManager::KillProgress()" />*/
	killProgress: function () {
		if (this.__progressView != null) {
			this.__progressView.stop();
			this.__progressView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressPopupManager::KillProgress()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPProgressPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		this.__progressView = new $.ig.ProgressDisplayView(true, this.__labelText, this.__cancelBlock);
		this.__progressView.setColors($.ig.ThemeManager.prototype.theme().itemBackgroundColor().color(), $.ig.ThemeManager.prototype.theme().accentColor().color());
		popup.addSubview(this.__progressView);
		this.__progressView.start();
	}
	/*<EndMethod Name="System.Void Infragistics.CPProgressPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	$type: new $.ig.Type('CPProgressPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPProgressPopupManager" />*/

/*<BeginType Name="Infragistics.CPReorderCellPopupManager" />*/

$.ig.util.defType('CPReorderCellPopupManager', 'CPPopupManagerBase', {
	__draggingView: null,
	__original: null,
	__draggableArea: null,
	__blackoutAreas: null,
	__dropViewsByDropLookupKey: null,
	__dropDelegatesByDropLookupKey: null,
	__wasOverView: null,
	__offsetY: 0,
	__offsetX: 0,
	__xPercentPos: 0,
	__dropLookupKeys: null,
	__smallDraggingMode: false,
	__snapInDraggableAera: false,
	__orginaCornerRadius: 0,
	init: function (original, draggableArea, snapInDraggableAera, dropLookupKeys, offsetX, offsetY) {
		$.ig.CPPopupManagerBase.prototype.init.call(this);
		this.shouldAnimateCellBackToPosition(true);
		this.__snapInDraggableAera = snapInDraggableAera;
		this.__dropLookupKeys = dropLookupKeys;
		this.__draggableArea = draggableArea;
		this.__offsetY = offsetY;
		this.__offsetX = offsetX;
		this.__xPercentPos = this.__offsetX / original.currentWidth();
		this.__draggingView = original.resolveDraggingView();
		this.__draggingView.clipToBounds(false);
		$.ig.ThemeManager.prototype.theme().applyLevel3Shadow(this.__draggingView);
		this.__orginaCornerRadius = this.__draggingView.getCornerRadius();
		this.__original = original;
		if (this.__draggableArea != null) {
			this.__blackoutAreas = new $.ig.Array();
			for (var i = 0; i < 4; i++) {
				var bov = new $.ig.CPViewBase();
				bov.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
				this.__blackoutAreas.add(bov);
			}
		}
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AcceptsInput()" />*/
	acceptsInput: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AcceptsInput()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::SupportsAnimating()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPReorderCellPopupManager::OverrideAnimationInDuration()" />*/
	overrideAnimationInDuration: function () {
		return 0;
	}
	/*<EndProperty Name="System.Double Infragistics.CPReorderCellPopupManager::OverrideAnimationInDuration()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::AutoHidesAfterDuration()" />*/
	,
	__popup: null,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		this.__popup = popup;
		if (this.__draggableArea != null) {
			for (var i = 0; i < this.__blackoutAreas.length; i++) {
				popup.addSubview(this.__blackoutAreas[i]);
			}
		}
		if (this.__dropLookupKeys != null) {
			this.__dropViewsByDropLookupKey = new $.ig.Dictionary(0);
			this.__dropDelegatesByDropLookupKey = new $.ig.Dictionary(0);
			this.__wasOverView = new $.ig.CPJSONObject(1);
			for (var i1 = 0; i1 < this.__dropLookupKeys.length; i1++) {
				var dropLookupKey = this.__dropLookupKeys[i1];
				this.setupByDropLookupKey(dropLookupKey);
			}
		}
		popup.addSubview(this.__draggingView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::SetupByDropLookupKey(System.String)" />*/
	setupByDropLookupKey: function (dropLookupKey) {
		var $self = this;
		this.__dropViewsByDropLookupKey.item(dropLookupKey, new $.ig.Dictionary(0));
		this.__dropDelegatesByDropLookupKey.item(dropLookupKey, new $.ig.Dictionary(0));
		var dropObjects = $.ig.CPDroppableViewManager.prototype.getDroppableObjects(dropLookupKey, function (k, o) {
			$self.addDroppableObject(dropLookupKey, k, o);
		}, function (k) {
			$self.removeDroppableObject(dropLookupKey, k);
		});
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(dropObjects);
		for (var j = 0; j < keys.length; j++) {
			var key = keys[j];
			var obj = dropObjects.item(key);
			this.addDroppableObject(dropLookupKey, key, obj);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::SetupByDropLookupKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::AddDroppableObject(System.String, System.String, Infragistics.CPDroppableViewDelegate)" />*/
	addDroppableObject: function (dropLookupKey, key, obj) {
		if (obj.acceptsDropObject(dropLookupKey, this.__original.resolveDropContent(dropLookupKey))) {
			var dropViews = this.__dropViewsByDropLookupKey.item(dropLookupKey);
			var dropDelegates = this.__dropDelegatesByDropLookupKey.item(dropLookupKey);
			var view = new $.ig.CPViewBase();
			dropViews.item(key, view);
			dropDelegates.item(key, obj);
			this.__wasOverView.setValueForKey(key, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::AddDroppableObject(System.String, System.String, Infragistics.CPDroppableViewDelegate)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::RemoveDroppableObject(System.String, System.String)" />*/
	removeDroppableObject: function (dropLookupKey, key) {
		var dropViews = this.__dropViewsByDropLookupKey.item(dropLookupKey);
		var dropDelegates = this.__dropDelegatesByDropLookupKey.item(dropLookupKey);
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(dropDelegates, key)) {
			var view = dropViews.item(key);
			var obj = dropDelegates.item(key);
			if (this.__wasOverView.resolveBoolForKey(key)) {
				obj.dragHasLeftView(view);
			}
			if (view.getParent() != null) {
				this.__popup.removeSubview(view);
			}
			$.ig.NativeDictionaryUtility.prototype.removeValue(dropViews, key);
			$.ig.NativeDictionaryUtility.prototype.removeValue(dropDelegates, key);
			this.__wasOverView.removeForKey(key);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::RemoveDroppableObject(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::UpdateDragPosition(System.Int32, System.Int32)" />*/
	updateDragPosition: function (x, y) {
		return this.layoutClone(x, y, this.__offsetY);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::UpdateDragPosition(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccuredInDraggableArea(System.Int32, System.Int32)" />*/
	dropOccuredInDraggableArea: function (x, y) {
		if (this.__draggableArea != null) {
			var popup = this.__draggingView.getParent();
			var zeroPt = this.__original.translatePoint(new $.ig.CPPoint(0, y), popup);
			var cursorPt = this.__original.translatePoint(new $.ig.CPPoint(x, y), popup);
			var daPt = this.__draggableArea.translatePoint(new $.ig.CPPoint(0, 0), popup);
			var daX = $.ig.truncate(daPt._x);
			var daY = $.ig.truncate(daPt._y);
			var daW = this.__draggableArea.currentWidth();
			var daH = this.__draggableArea.currentHeight();
			return ($.ig.CPMathUtility.prototype.rectContainsPoint(daX, daY, daW, daH, cursorPt._x, zeroPt._y));
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccuredInDraggableArea(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccurred(System.Int32, System.Int32)" />*/
	dropOccurred: function (x, y) {
		if (this.__dropLookupKeys != null) {
			for (var i = 0; i < this.__dropLookupKeys.length; i++) {
				var dropLookupKey = this.__dropLookupKeys[i];
				if (this.dropOccurrecByDropLookupKey(dropLookupKey, x, y)) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccurred(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccurrecByDropLookupKey(System.String, System.Int32, System.Int32)" />*/
	dropOccurrecByDropLookupKey: function (dropLookupKey, x, y) {
		var dropViews = this.__dropViewsByDropLookupKey.item(dropLookupKey);
		var dropDelegates = this.__dropDelegatesByDropLookupKey.item(dropLookupKey);
		var dropCaptured = false;
		if (dropDelegates != null && dropDelegates.count() > 0) {
			var popup = this.__draggingView.getParent();
			var cursorPt = this.__original.translatePoint(new $.ig.CPPoint(x, y), popup);
			var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(dropDelegates);
			for (var i = 0; i < keys.length; i++) {
				var key = keys[i];
				if ($.ig.NativeDictionaryUtility.prototype.containsKey(dropDelegates, key)) {
					var obj = dropDelegates.item(key);
					var original = obj.resolveDroppableRelativeView();
					var pt = original.translatePoint(new $.ig.CPPoint(0, 0), popup);
					var ignore = false;
					var clippingContainer = obj.resolveDropViewClippingContainer();
					if (clippingContainer != null) {
						var clippPt = popup.translatePoint(new $.ig.CPPoint(cursorPt._x, cursorPt._y), clippingContainer);
						if (clippPt._x < 0 || clippPt._y < 0) {
							ignore = true;
						}
					}
					var dropContent = this.__original.resolveDropContent(dropLookupKey);
					var hit = false;
					if (!ignore) {
						if ($.ig.CPMathUtility.prototype.rectContainsPoint(pt._x, pt._y, original.currentWidth(), original.currentHeight(), cursorPt._x, cursorPt._y)) {
							dropCaptured = hit = true;
							obj.onContentDropped(dropContent);
						}
					}
					obj.dropOperationFinished(hit, dropLookupKey, dropContent);
					if (this.__popup != null && $.ig.NativeDictionaryUtility.prototype.containsKey(dropViews, key)) {
						var view = dropViews.item(key);
						if (!hit && this.__wasOverView.resolveBoolForKey(key)) {
							obj.dragHasLeftView(view);
						}
						if (view.getParent() != null) {
							this.__popup.removeSubview(view);
						}
					}
				}
			}
		}
		return dropCaptured;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::DropOccurrecByDropLookupKey(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::LayoutClone(System.Int32, System.Int32, System.Int32)" />*/
	layoutClone: function (x, y, offset) {
		var popup = this.__draggingView.getParent();
		var zeroPt = this.__original.translatePoint(new $.ig.CPPoint(0, y), popup);
		var cursorPt = this.__original.translatePoint(new $.ig.CPPoint(x, y), popup);
		var measureY = $.ig.truncate(zeroPt._y) - offset;
		var px = $.ig.truncate(zeroPt._x);
		var w = this.__original.resolveDraggingViewWidth(this.__draggingView);
		var insideOfDraggableView = false;
		var opacity = this.__original.resolveDraggingViewOpacity();
		if (this.__draggableArea != null) {
			var daPt = this.__draggableArea.translatePoint(new $.ig.CPPoint(0, 0), popup);
			var daX = $.ig.truncate(daPt._x);
			var daY = $.ig.truncate(daPt._y);
			var daW = this.__draggableArea.currentWidth();
			var daH = this.__draggableArea.currentHeight();
			if ($.ig.CPMathUtility.prototype.rectContainsPoint(daX, daY, daW, daH, cursorPt._x, zeroPt._y)) {
				insideOfDraggableView = true;
			}
		}
		var smallDraggingObject = false;
		var wasAnythingHit = false;
		for (var i = 0; i < this.__dropLookupKeys.length; i++) {
			var dropLookupKey = this.__dropLookupKeys[i];
			if (this.__dropViewsByDropLookupKey != null) {
				var dropViews = this.__dropViewsByDropLookupKey.item(dropLookupKey);
				var dropDelegates = this.__dropDelegatesByDropLookupKey.item(dropLookupKey);
				if (dropDelegates != null && dropDelegates.count() > 0) {
					var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(dropDelegates);
					for (var j = 0; j < keys.length; j++) {
						var key = keys[j];
						if ($.ig.NativeDictionaryUtility.prototype.containsKey(dropDelegates, key)) {
							var view = dropViews.item(key);
							var obj = dropDelegates.item(key);
							var original = obj.resolveDroppableRelativeView();
							var isOutsideOfView = false;
							var clippingContainer = obj.resolveDropViewClippingContainer();
							if (clippingContainer != null) {
								var clippPt = popup.translatePoint(new $.ig.CPPoint(cursorPt._x, cursorPt._y), clippingContainer);
								if (clippPt._x < 0 || clippPt._y < 0) {
									isOutsideOfView = true;
								}
							}
							if (!isOutsideOfView) {
								var pt = original.translatePoint(new $.ig.CPPoint(0, 0), popup);
								if ($.ig.CPMathUtility.prototype.rectContainsPoint(pt._x, pt._y, original.currentWidth(), original.currentHeight(), cursorPt._x, cursorPt._y)) {
									this.__wasOverView.setValueForKey(key, true);
									var ptInView = popup.translatePoint(new $.ig.CPPoint(cursorPt._x, cursorPt._y), original);
									obj.dragIsOverView(view, $.ig.truncate(ptInView._x), $.ig.truncate(ptInView._y));
									if (!smallDraggingObject) {
										if (obj.preferSmallModeDroppableContent(dropLookupKey)) {
											smallDraggingObject = true;
										}
									}
									wasAnythingHit = true;
								} else {
									isOutsideOfView = true;
								}
							}
							if (isOutsideOfView && this.__wasOverView.resolveBoolForKey(key)) {
								this.__wasOverView.setValueForKey(key, false);
								obj.dragHasLeftView(view);
							}
						}
					}
				}
				if (wasAnythingHit) {
					break;
				}
			}
		}
		var itemHeight = this.__original.resolveDraggingViewHeight(this.__draggingView);
		this.__smallDraggingMode = false;
		if ((smallDraggingObject || !wasAnythingHit) && this.__original.supportSmallDragMode() && !insideOfDraggableView) {
			this.__smallDraggingMode = true;
			this.__draggingView.setCornerRadius($.ig.ThemeManager.prototype.theme().itemCornerRadius());
		} else {
			this.__draggingView.setCornerRadius(this.__orginaCornerRadius);
		}
		if (popup != null) {
			this.__draggingView.smallDraggingMode(this.__smallDraggingMode);
			if (this.__smallDraggingMode) {
				w = this.__original.smallDraggingWidth();
				itemHeight = this.__original.smallDraggingHeight();
			}
			var xOffset = $.ig.truncate(((w < this.__offsetX) ? w * this.__xPercentPos : this.__offsetX));
			px = $.ig.truncate(cursorPt._x) - xOffset;
			popup.measureView1(this.__draggingView, px, measureY, w, itemHeight, opacity);
		}
		return insideOfDraggableView;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPReorderCellPopupManager::LayoutClone(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupManagerBase.prototype.layoutPopup.call(this, popup, root, w, h);
		this.layoutDraggableArea(popup, w, h, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutDraggableArea(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Double)" />*/
	layoutDraggableArea: function (popup, w, h, opacity) {
		if (this.__draggableArea != null) {
			var daPt = this.__draggableArea.translatePoint(new $.ig.CPPoint(0, 0), popup);
			var daX = $.ig.truncate(daPt._x);
			var daY = $.ig.truncate(daPt._y);
			var daW = this.__draggableArea.currentWidth();
			var daH = this.__draggableArea.currentHeight();
			popup.measureView1(this.__blackoutAreas[0], daX, 0, daW, daY, opacity);
			popup.measureView1(this.__blackoutAreas[1], daX + daW, 0, w - (daX + daW), h, opacity);
			popup.measureView1(this.__blackoutAreas[2], daX, daY + daH, daW, h - (daY + daH), opacity);
			popup.measureView1(this.__blackoutAreas[3], 0, 0, daX, h, opacity);
		}
		for (var i = 0; i < this.__dropLookupKeys.length; i++) {
			var dropLookupKey = this.__dropLookupKeys[i];
			this.layoutDraggableAreaByDropLookoutKey(dropLookupKey, popup);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutDraggableArea(Infragistics.CPPopupContainerView, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutDraggableAreaByDropLookoutKey(System.String, Infragistics.CPPopupContainerView)" />*/
	layoutDraggableAreaByDropLookoutKey: function (dropLookupKey, popup) {
		var dropViews = this.__dropViewsByDropLookupKey.item(dropLookupKey);
		var dropDelegates = this.__dropDelegatesByDropLookupKey.item(dropLookupKey);
		if (dropDelegates != null && dropDelegates.count() > 0) {
			var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(dropDelegates);
			for (var i = 0; i < keys.length; i++) {
				var key = keys[i];
				var view = dropViews.item(key);
				if (view.getParent() != null) {
					var obj = dropDelegates.item(key);
					var original = obj.resolveDroppableRelativeView();
					var pt = original.translatePoint(new $.ig.CPPoint(0, 0), popup);
					popup.measureView(view, $.ig.truncate(pt._x), $.ig.truncate(pt._y), original.currentWidth(), original.currentHeight());
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::LayoutDraggableAreaByDropLookoutKey(System.String, Infragistics.CPPopupContainerView)" />*/
	,
	_shouldAnimateCellBackToPosition: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::ShouldAnimateCellBackToPosition()" />*/
	shouldAnimateCellBackToPosition: function (value) {
		if (arguments.length === 1) {
			this._shouldAnimateCellBackToPosition = value;
			return value;
		} else {
			return this._shouldAnimateCellBackToPosition;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPReorderCellPopupManager::ShouldAnimateCellBackToPosition()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	prepareForAnimation: function (popup, root, w, h) {
		var parent = this.__draggingView.getParent();
		var originalParent = this.__original.getParent();
		var p1 = originalParent.translatePoint(new $.ig.CPPoint(this.__original._frameX, this.__original._frameY), parent);
		var measureY = $.ig.truncate(p1._y);
		this.layoutDraggableArea(popup, w, h, 0);
		if (this.shouldAnimateCellBackToPosition()) {
			parent.measureView1(this.__draggingView, $.ig.truncate(p1._x), measureY, this.__original.resolveDraggingViewWidth(this.__draggingView), this.__original.resolveDraggingViewHeight(this.__draggingView), 1);
		} else {
			parent.measureView1(this.__draggingView, this.__draggingView.currentX(), this.__draggingView.currentY(), this.__draggingView.currentWidth(), this.__draggingView.currentHeight(), 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::PrepareForAnimation(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPReorderCellPopupManager::Hide()" />*/
	hide: function () {
		this.__popup = null;
		$.ig.CPDroppableViewManager.prototype.finishedDragOperation();
		if (this.__draggingView != null) {
			this.__draggingView.unload();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPReorderCellPopupManager::Hide()" />*/
	,
	$type: new $.ig.Type('CPReorderCellPopupManager', $.ig.CPPopupManagerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPReorderCellPopupManager" />*/

/*<BeginType Name="Infragistics.ProgressHelper" />*/

$.ig.util.defType('ProgressHelper', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::EnsureHelper()" />*/
	ensureHelper: function () {
		if ($.ig.ProgressHelper.prototype.__helper == null) {
			$.ig.ProgressHelper.prototype.__helper = new $.ig.ProgressHelper();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::EnsureHelper()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::ShowProgress(Infragistics.CPViewBase)" />*/
	showProgress1: function (parent) {
		$.ig.ProgressHelper.prototype.showProgress(parent, null, null, false, true);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::ShowProgress(Infragistics.CPViewBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.ProgressHelper Infragistics.ProgressHelper::ShowProgress(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean)" />*/
	showProgress: function (parent, label, cancelBlock, disabledStyleBackground, isIndeterminate) {
		$.ig.ProgressHelper.prototype.ensureHelper();
		$.ig.ProgressHelper.prototype.__label = label;
		$.ig.ProgressHelper.prototype.__helper.show1(parent, $.ig.ProgressHelper.prototype.__label, cancelBlock, disabledStyleBackground, isIndeterminate, label);
		return $.ig.ProgressHelper.prototype.__helper;
	}
	/*<EndMethod Name="Infragistics.ProgressHelper Infragistics.ProgressHelper::ShowProgress(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::HideProgress(Infragistics.CPViewBase, System.Boolean)" />*/
	hideProgress: function (parent, animate) {
		$.ig.ProgressHelper.prototype.ensureHelper();
		$.ig.ProgressHelper.prototype.__helper.hide(parent, animate);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::HideProgress(Infragistics.CPViewBase, System.Boolean)" />*/
	,
	__progressContainer: null,
	__progress: null,
	__block: null,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::UpdateProgress(System.Double)" />*/
	updateProgress: function (p) {
		this.__progress.updateProgress(p);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::UpdateProgress(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::Show(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean)" />*/
	show: function (parent, label, cancelBlock, disabledStyleBackground, isIndeterminate) {
		this.show1(parent, label, cancelBlock, disabledStyleBackground, isIndeterminate, null);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::Show(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::Show(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean, System.String)" />*/
	show1: function (parent, label, cancelBlock, disabledStyleBackground, isIndeterminate, accessibilityName) {
		var $self = this;
		if (this.__progress != null) {
			this.hide(this.__progressContainer.getParent(), false);
		}
		if (this.__progress == null) {
			this.__progressContainer = new $.ig.CPViewBase();
			if (disabledStyleBackground) {
				this.__progressContainer.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.createColor1(100, 0, 0, 0)));
			} else {
				this.__progressContainer.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative($.ig.ColorUtility.prototype.createColor1(0, 0, 0, 0)));
			}
			parent.addSubview(this.__progressContainer);
			this.__progress = new $.ig.ProgressDisplayView(isIndeterminate, label, cancelBlock);
			if (accessibilityName != null) {
				$.ig.UIUtility.prototype.setAccessibilityName2(this.__progress, "progressIndicator", accessibilityName);
			}
			this.__progressContainer.addSubview(this.__progress);
			this.__progress.start();
			this.__block = function (w, h) {
				$self.sizeChanged(w, h);
			};
			parent.registerSizeChangedListener(this.__block);
			if (parent.currentWidth() != 0) {
				this.sizeChanged(parent.currentWidth(), parent.currentHeight());
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::Show(Infragistics.CPViewBase, System.String, Infragistics.ExecutionBlock, System.Boolean, System.Boolean, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		if (this.__progressContainer != null) {
			if ($.ig.ProgressHelper.prototype.__label == null || $.ig.ProgressHelper.prototype.__label.equals("")) {
				var progressSize = $.ig.truncate(Math.min((Math.min(w, h) * 0.25), $.ig.NativeUIUtility.prototype.utility().densify(100)));
				this.__progressContainer.measureView(this.__progress, $.ig.intDivide(w, 2) - $.ig.intDivide(progressSize, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(progressSize, 2), progressSize, progressSize);
			} else {
				var indicatorHeight = $.ig.NativeUIUtility.prototype.utility().densify(40);
				var indicatorWidth = this.__progress.calculateWidth(indicatorHeight);
				this.__progressContainer.measureView(this.__progress, $.ig.intDivide(w, 2) - $.ig.intDivide(indicatorWidth, 2), $.ig.intDivide(h, 2) - $.ig.intDivide(indicatorHeight, 2), indicatorWidth, indicatorHeight);
			}
			(this.__progressContainer.getParent()).measureView1(this.__progressContainer, 0, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::Hide(Infragistics.CPViewBase, System.Boolean)" />*/
	hide: function (parent, animate) {
		var $self = this;
		if (this.__progress != null) {
			var currentParent = this.__progressContainer.getParent();
			if (currentParent == parent) {
				this.__progress.stop();
				if (animate && currentParent != null && currentParent.currentWidth() > 0 && currentParent.currentHeight() > 0) {
					currentParent.animate(0.45, function () {
						currentParent.measureView1($self.__progressContainer, 0, 0, currentParent.currentWidth(), currentParent.currentHeight(), 0);
					}, function (finished) {
						$self.finishHide();
					});
				} else {
					this.finishHide();
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::Hide(Infragistics.CPViewBase, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressHelper::FinishHide()" />*/
	finishHide: function () {
		if (this.__progressContainer != null) {
			var parent = this.__progressContainer.getParent();
			parent.removeSubview(this.__progressContainer);
			this.__progress = null;
			this.__progressContainer = null;
			parent.unregisterSizeChangedListener(this.__block);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressHelper::FinishHide()" />*/
	,
	$type: new $.ig.Type('ProgressHelper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ProgressHelper" />*/

/*<BeginType Name="Infragistics.ProgressView" />*/

$.ig.util.defType('ProgressView', 'AnimatableDrawingView', {
	__progress: 0,
	__indeterminateProgress: 0,
	__isIndeterminate: false,
	_progressColor: null,
	init: function (isIndeterminate) {
		this._progressColor = new $.ig.Number();
		$.ig.AnimatableDrawingView.prototype.init.call(this);
		this.__isIndeterminate = isIndeterminate;
		this._progressColor = $.ig.ThemeManager.prototype.theme().accentColor().color();
	},
	/*<BeginProperty Name="Infragistics.AnimationType Infragistics.ProgressView::AnimationType()" />*/
	animationType: function () {
		return $.ig.AnimationType.prototype.linear;
	}
	/*<EndProperty Name="Infragistics.AnimationType Infragistics.ProgressView::AnimationType()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressView::UpdateProgress(System.Double)" />*/
	updateProgress: function (progress) {
		if (this.__progress > 0) {
			this.__isIndeterminate = false;
		} else if (this.__progress < 0) {
			this.__isIndeterminate = true;
		}
		this.__progress = progress;
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressView::UpdateProgress(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ProgressView::AnimationDuration()" />*/
	animationDuration: function () {
		return 750;
	}
	/*<EndMethod Name="System.Double Infragistics.ProgressView::AnimationDuration()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressView::Tick(System.Double)" />*/
	tick: function (tick) {
		this.__indeterminateProgress = tick;
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressView::Tick(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressView::AnimationComplete()" />*/
	animationComplete: function () {
		this.start();
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressView::AnimationComplete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	draw: function (canvas, w, h, info) {
		var progress = this.__isIndeterminate ? this.__indeterminateProgress : this.__progress;
		var size = (Math.min(w, h));
		var startDegrees = -90;
		var endDegrees = (startDegrees + (360 * progress));
		if (this.__isIndeterminate) {
			startDegrees = endDegrees - 40;
		}
		var goalSizeInPixels = 2;
		var innerextent = Math.max(0.5, 1 - (goalSizeInPixels / (size / 2)));
		this.drawSlice(canvas, ($.ig.intDivide(w, 2) - size / 2), ($.ig.intDivide(h, 2) - size / 2), size, size, startDegrees, endDegrees, innerextent, 1, this._progressColor, 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressView::Draw(System.CanvasContext, System.Int32, System.Int32, System.Object)" />*/
	,
	$type: new $.ig.Type('ProgressView', $.ig.AnimatableDrawingView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ProgressView" />*/

/*<BeginType Name="Infragistics.ProgressDisplayView" />*/

$.ig.util.defType('ProgressDisplayView', 'CPView', {
	__progress: null,
	__contentView: null,
	__label: null,
	__numericProgressLabel: null,
	__cancelButton: null,
	__labelText: null,
	__cancelBlock: null,
	__displayNumericProgress: false,
	init: function (isIndeterminate, labelText, cancelBlock) {
		var $self = this;
		this.__lastProgress = -1;
		$.ig.CPView.prototype.init.call(this);
		this.__labelText = labelText;
		this.__cancelBlock = cancelBlock;
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__contentView = new $.ig.CPView();
		this.__contentView.clipToBounds(true);
		this.__contentView.setBackgroundColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.addSubview(this.__contentView);
		this.__progress = new $.ig.ProgressView(isIndeterminate);
		this.__contentView.addSubview(this.__progress);
		this.__label = new $.ig.CPLabel();
		this.__label.setText(this.__labelText);
		this.__label.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__contentView.addSubview(this.__label);
		this.__cancelButton = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
		this.__cancelButton.isFocusable(false);
		this.__cancelButton.setIcon($.ig.UIPathIcons.prototype.icons().getEMCloseIcon());
		this.__cancelButton.addClickHandler(function (x, y) {
			$self.cancel();
		});
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__cancelButton, "button_progressView_cancel");
		this.__cancelButton.isHidden(this.__cancelBlock == null);
		this.__contentView.addSubview(this.__cancelButton);
		$.ig.ThemeManager.prototype.theme().applyProgressShadowToView(this);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__progress, "progressView");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__contentView, "progressContentView");
	},
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::SetLabelText(System.String)" />*/
	setLabelText: function (labelText) {
		this.__labelText = labelText;
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::SetLabelText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::SetDisplayNumericProgress(System.Boolean)" />*/
	setDisplayNumericProgress: function (show) {
		this.__displayNumericProgress = show;
		if (this.__displayNumericProgress && this.__numericProgressLabel == null) {
			this.__numericProgressLabel = new $.ig.CPLabel();
			this.__numericProgressLabel.setTextColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
			this.__contentView.addSubview(this.__numericProgressLabel);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::SetDisplayNumericProgress(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::SetCancelBlock(Infragistics.ExecutionBlock)" />*/
	setCancelBlock: function (cancelAction) {
		this.__cancelBlock = cancelAction;
		this.__cancelButton.isHidden(this.__cancelBlock == null);
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::SetCancelBlock(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::SetColors(System.ColorInt, System.ColorInt)" />*/
	setColors: function (bgColor, progressColor) {
		this.__progress._progressColor = progressColor;
		this.__contentView.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(bgColor));
		this.setBackgroundColor($.ig.ColorUtility.prototype.convertToNative(bgColor));
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::SetColors(System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::Cancel()" />*/
	cancel: function () {
		if (this.__cancelBlock != null) {
			this.__cancelBlock();
		}
		this.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::Cancel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::Start()" />*/
	start: function () {
		this.__progress.start();
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::Start()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::Stop()" />*/
	stop: function () {
		this.__progress.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::Stop()" />*/
	,
	__lastProgress: 0,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::UpdateProgress(System.Double)" />*/
	updateProgress: function (progress) {
		this.__progress.updateProgress(progress);
		if (this.__displayNumericProgress && this.__lastProgress != progress) {
			this.__lastProgress = progress;
			var prog = $.ig.truncate((this.__lastProgress * 100));
			this.__numericProgressLabel.setText(prog.toString() + "%");
			this.markSizeDirty();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::UpdateProgress(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculatePadding(System.Int32)" />*/
	calculatePadding: function (height) {
		return $.ig.truncate((height * 0.4));
	}
	/*<EndMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculatePadding(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateFontSize(System.Int32)" />*/
	calculateFontSize: function (height) {
		return Math.max(Math.min($.ig.NativeUIUtility.prototype.utility().dedensify($.ig.truncate((height * 0.3))), $.ig.ThemeManager.prototype.theme().fontSizeSecondary()), 2);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateFontSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateNumericDisplayFontSize(System.Int32)" />*/
	calculateNumericDisplayFontSize: function (height) {
		return Math.max(Math.min($.ig.NativeUIUtility.prototype.utility().dedensify($.ig.truncate((height * 0.3))), $.ig.ThemeManager.prototype.theme().fontSizeBody()), 2);
	}
	/*<EndMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateNumericDisplayFontSize(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateWidth(System.Int32)" />*/
	calculateWidth: function (height) {
		if (this.__labelText != null) {
			this.__label.setFont(this.calculateFontSize(height), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__label.calculateSizeToFit();
			return this.__label.getCalculatedWidth() + (this.calculatePadding(height) * 2) + height;
		}
		return height;
	}
	/*<EndMethod Name="System.Int32 Infragistics.ProgressDisplayView::CalculateWidth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ProgressDisplayView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		this.setCornerRadius($.ig.intDivide(h, 2));
		this.__contentView.setCornerRadius($.ig.intDivide(h, 2));
		this.measureView1(this.__contentView, 0, 0, w, h, 1);
		this.__contentView.measureView1(this.__progress, 0, $.ig.intDivide(0, 2), h, h, 1);
		var iconSize = this.__cancelButton.getCalculatedHeight();
		this.__contentView.measureView1(this.__cancelButton, $.ig.intDivide((h - iconSize), 2), $.ig.intDivide((h - iconSize), 2), iconSize, iconSize, 1);
		if (this.__labelText != null) {
			this.__label.setFont(this.calculateFontSize(h), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__label.calculateSizeToFit();
			var lh = this.__label.getCalculatedHeight();
			this.__contentView.measureView1(this.__label, h + this.calculatePadding(h), $.ig.intDivide((h - lh), 2), this.__label.getCalculatedWidth(), lh, $.ig.ThemeManager.prototype.theme().restOpacity());
		}
		if (this.__displayNumericProgress) {
			this.__numericProgressLabel.setFont(this.calculateNumericDisplayFontSize(h), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__numericProgressLabel.calculateSizeToFit();
			var npH = this.__numericProgressLabel.getCalculatedHeight();
			var npW = this.__numericProgressLabel.getCalculatedWidth();
			this.__contentView.measureView1(this.__numericProgressLabel, $.ig.intDivide((w - npW), 2), $.ig.intDivide((h - npH), 2), npW, npH, $.ig.ThemeManager.prototype.theme().restOpacity());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ProgressDisplayView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('ProgressDisplayView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ProgressDisplayView" />*/

/*<BeginType Name="Infragistics.RoundedImageDrawingDelegate" />*/

$.ig.util.defType('RoundedImageDrawingDelegate', 'Object', {
	$type: new $.ig.Type('RoundedImageDrawingDelegate', null)
}, true);

/*<EndType Name="Infragistics.RoundedImageDrawingDelegate" />*/

/*<BeginType Name="Infragistics.CPScrollBarThumbView" />*/

$.ig.util.defType('CPScrollBarThumbView', 'CPView', {
	__isVerticalOrientation: false,
	__startMoveLocation: 0,
	_thumbLocation: 0,
	_thumbMoved: null,
	_thumbReleased: null,
	init: function (vertical) {
		$.ig.CPView.prototype.init.call(this);
		this.__isVerticalOrientation = vertical;
	},
	_supportsTouch: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPScrollBarThumbView::SupportsTouch()" />*/
	supportsTouch: function (value) {
		if (arguments.length === 1) {
			this._supportsTouch = value;
			return value;
		} else {
			return this._supportsTouch;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPScrollBarThumbView::SupportsTouch()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlesUIInteraction()" />*/
	handlesUIInteraction: function () {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlesUIInteraction()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleMouseDown: function (x, y, quietly) {
		return this.handleDown(x, y, quietly);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleMouseDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleTouchDown: function (x, y, quietly) {
		if (this.supportsTouch()) {
			return this.handleDown(x, y, quietly);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleTouchDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleDown(System.Int32, System.Int32, System.Boolean)" />*/
	handleDown: function (x, y, quietly) {
		var parent = this.getParent();
		var p = this.translatePoint(new $.ig.CPPoint(x, y), parent);
		this.__startMoveLocation = this.__isVerticalOrientation ? $.ig.truncate(p._y) - this.currentY() : $.ig.truncate(p._x) - this.currentX();
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandleDown(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlePointerUp(System.Int32, System.Int32)" />*/
	handlePointerUp: function (x, y) {
		this._thumbLocation = -1;
		this.__startMoveLocation = -1;
		if (this._thumbReleased != null) {
			this._thumbReleased();
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlePointerUp(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlePointerMove(System.Int32, System.Int32)" />*/
	handlePointerMove: function (x, y) {
		if (this.isMouseDown()) {
			if (this._thumbMoved != null) {
				var parent = this.getParent();
				var p = this.translatePoint(new $.ig.CPPoint(x, y), parent);
				var moveValue = this.__isVerticalOrientation ? $.ig.truncate(p._y) : $.ig.truncate(p._x);
				var change = (moveValue - (this._thumbLocation + this.__startMoveLocation));
				if (change != 0) {
					this._thumbMoved(change);
				}
			}
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPScrollBarThumbView::HandlePointerMove(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPScrollBarThumbView', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPScrollBarThumbView" />*/

/*<BeginType Name="Infragistics.ScrollEventProcessor" />*/

$.ig.util.defType('ScrollEventProcessor', 'Object', {
	_scrollHelperDelegate: null,
	__velocityX: 0,
	__velocityY: 0,
	__scrollDisplacementX: 0,
	__scrollDisplacementY: 0,
	__previousContentOffsetX: 0,
	__previousContentOffsetY: 0,
	__finalContentOffsetX: 0,
	__finalContentOffsetY: 0,
	__lastX: 0,
	__lastY: 0,
	__anchorPointX: 0,
	__anchorPointY: 0,
	__anchorPointX2: 0,
	__anchorPointY2: 0,
	__maxZoomScale: 0,
	__minZoomScale: 0,
	__zoomScale: 0,
	__pinchGestureEnabled: false,
	__scrollAnimationTimerHorizontal: null,
	__scrollAnimationTimerVertical: null,
	__delayMouseWheelAnimator: null,
	__scrollHDuration: 0,
	__scrollVDuration: 0,
	__previousTouchMoveTimeStamp: 0,
	__tempTouchMoveTimeStamp: 0,
	__previousTouchX: 0,
	__previousTouchY: 0,
	__mouseDown: false,
	__isScrolling: false,
	__startDragPage: 0,
	__scrollAnimationRunning: false,
	__hTickBlock: null,
	__vTickBlock: null,
	__hBTickBlock: null,
	__vBTickBlock: null,
	__scrollAnimationComplete: null,
	__isMultitouch: false,
	__wasMultitouch: false,
	__prevZoomScale: 0,
	__prevContentWidth: 0,
	__prevContentHeight: 0,
	init: function () {
		var $self = this;
		this.__zoomScale = 1;
		this.__pinchGestureEnabled = true;
		this.__previousTouchMoveTimeStamp = 0;
		this.__tempTouchMoveTimeStamp = 0;
		this.__previousTouchX = NaN;
		this.__previousTouchY = NaN;
		this.__mouseDown = false;
		this.__isMultitouch = false;
		this.__wasMultitouch = false;
		$.ig.Object.prototype.init.call(this);
		this.directionalLockEnabled(true);
		this.allowMouseDrag(true);
		this.__minZoomScale = 1;
		this.alwaysBounceVertical(true);
		this.__scrollAnimationTimerHorizontal = new $.ig.CPTimer();
		this.__scrollAnimationTimerVertical = new $.ig.CPTimer();
		this.__delayMouseWheelAnimator = new $.ig.CPTimer();
		this.__hTickBlock = function (p) {
			$self.animateScrollH(p);
		};
		this.__vTickBlock = function (p) {
			$self.animateScrollV(p);
		};
		this.__hBTickBlock = function (p) {
			$self.animateBounceH(p);
		};
		this.__vBTickBlock = function (p) {
			$self.animateBounceV(p);
		};
		this.__scrollAnimationComplete = function () {
			$self.__scrollAnimationRunning = false;
			$self._scrollHelperDelegate.scrollAnimationComplete();
		};
	},
	__contentWidth: 0,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentWidth()" />*/
	contentWidth: function () {
		return this.__contentWidth;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentWidth()" />*/
	,
	__contentHeight: 0,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentHeight()" />*/
	contentHeight: function () {
		return this.__contentHeight;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentHeight()" />*/
	,
	_allowMouseDrag: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AllowMouseDrag()" />*/
	allowMouseDrag: function (value) {
		if (arguments.length === 1) {
			this._allowMouseDrag = value;
			return value;
		} else {
			return this._allowMouseDrag;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AllowMouseDrag()" />*/
	,
	_alwaysBounceVertical: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AlwaysBounceVertical()" />*/
	alwaysBounceVertical: function (value) {
		if (arguments.length === 1) {
			this._alwaysBounceVertical = value;
			return value;
		} else {
			return this._alwaysBounceVertical;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AlwaysBounceVertical()" />*/
	,
	_directionalLockEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollEventProcessor::DirectionalLockEnabled()" />*/
	directionalLockEnabled: function (value) {
		if (arguments.length === 1) {
			this._directionalLockEnabled = value;
			return value;
		} else {
			return this._directionalLockEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollEventProcessor::DirectionalLockEnabled()" />*/
	,
	_alwaysBounceHorizontal: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AlwaysBounceHorizontal()" />*/
	alwaysBounceHorizontal: function (value) {
		if (arguments.length === 1) {
			this._alwaysBounceHorizontal = value;
			return value;
		} else {
			return this._alwaysBounceHorizontal;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollEventProcessor::AlwaysBounceHorizontal()" />*/
	,
	_pagingEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.ScrollEventProcessor::PagingEnabled()" />*/
	pagingEnabled: function (value) {
		if (arguments.length === 1) {
			this._pagingEnabled = value;
			return value;
		} else {
			return this._pagingEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.ScrollEventProcessor::PagingEnabled()" />*/
	,
	_interceptHPosAction: null,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::SetInterceptHorizontalScroll(Infragistics.UpdateValueBlock)" />*/
	setInterceptHorizontalScroll: function (block) {
		this._interceptHPosAction = block;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::SetInterceptHorizontalScroll(Infragistics.UpdateValueBlock)" />*/
	,
	_interceptVPosAction: null,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::SetInterceptVerticalScroll(Infragistics.UpdateValueBlock)" />*/
	setInterceptVerticalScroll: function (block) {
		this._interceptVPosAction = block;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::SetInterceptVerticalScroll(Infragistics.UpdateValueBlock)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::IsScrollAnimationRunning()" />*/
	isScrollAnimationRunning: function () {
		return this.__scrollAnimationRunning;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::IsScrollAnimationRunning()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::SetContentSize(System.Double, System.Double)" />*/
	setContentSize: function (cw, ch) {
		if (this.zoomScale() != 1) {
			this.__contentWidth = this._scrollHelperDelegate.viewportWidth() * this.zoomScale();
			this.__contentHeight = this._scrollHelperDelegate.viewportHeight() * this.zoomScale();
		} else {
			this.__contentWidth = cw;
			this.__contentHeight = ch;
		}
		this.__contentHeight += this._bottomInset;
		this.__contentWidth += this._rightInset;
		var left = this.__contentOffsetX;
		var top = this.__contentOffsetY;
		this.ensureValidScrollPositions();
		if (left != this.__contentOffsetX || top != this.__contentOffsetY) {
			this.notifyUpdateOccurred();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::SetContentSize(System.Double, System.Double)" />*/
	,
	__contentOffsetX: 0,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentOffsetX()" />*/
	contentOffsetX: function () {
		return this.__contentOffsetX;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentOffsetX()" />*/
	,
	__contentOffsetY: 0,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentOffsetY()" />*/
	contentOffsetY: function () {
		return this.__contentOffsetY;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::ContentOffsetY()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::ZoomScale()" />*/
	zoomScale: function (value) {
		if (arguments.length === 1) {
			if (this.__zoomScale != value) {
				this.__zoomScale = value;
				this.setContentSize(this._scrollHelperDelegate.viewportWidth() * this.__zoomScale, this._scrollHelperDelegate.viewportHeight() * this.__zoomScale);
			}
			return value;
		} else {
			return this.__zoomScale;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::ZoomScale()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::MaximumZoomScale()" />*/
	maximumZoomScale: function (value) {
		if (arguments.length === 1) {
			this.__maxZoomScale = value;
			return value;
		} else {
			return this.__maxZoomScale;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::MaximumZoomScale()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::MinimumZoomScale()" />*/
	minimumZoomScale: function (value) {
		if (arguments.length === 1) {
			this.__minZoomScale = value;
			return value;
		} else {
			return this.__minZoomScale;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::MinimumZoomScale()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::ScrollTo(System.Double, System.Double)" />*/
	scrollTo: function (x, y) {
		this.stopAnimationTimers();
		this.__contentOffsetX = x;
		this.__contentOffsetY = y;
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::ScrollTo(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::EnsureValidScrollPositions()" />*/
	ensureValidScrollPositions: function () {
		if (this.zoomScale() == 1) {
			this.__contentOffsetY = Math.max(this.minYPosition(), this.__contentOffsetY);
			this.__contentOffsetY = Math.min(this.__contentHeight - this._scrollHelperDelegate.viewportHeight(), this.__contentOffsetY);
			this.__contentOffsetX = Math.max(this.minXPosition(), this.__contentOffsetX);
			this.__contentOffsetX = Math.min(this.__contentWidth - this._scrollHelperDelegate.viewportWidth(), this.__contentOffsetX);
		} else {
			this.__contentOffsetX = (this.__contentWidth - this._scrollHelperDelegate.viewportWidth()) / 2;
			this.__contentOffsetY = (this.__contentHeight - this._scrollHelperDelegate.viewportHeight()) / 2;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::EnsureValidScrollPositions()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::PinchGestureIsEnabled(System.Boolean)" />*/
	pinchGestureIsEnabled: function (enabled) {
		this.__pinchGestureEnabled = enabled;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::PinchGestureIsEnabled(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::IsPinchGestureEnabled()" />*/
	isPinchGestureEnabled: function () {
		return this.__pinchGestureEnabled;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::IsPinchGestureEnabled()" />*/
	,
	_topInset: 0,
	_leftInset: 0,
	_bottomInset: 0,
	_rightInset: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::SetInsets(System.Double, System.Double, System.Double, System.Double)" />*/
	setInsets: function (top, left, bottom, right) {
		var prevX = this.minXPosition();
		var prevY = this.minYPosition();
		this._topInset = top;
		this._leftInset = left;
		this._rightInset = right;
		this._bottomInset = bottom;
		if (this.__contentOffsetX == prevX && this.__contentOffsetY == prevY) {
			this.__contentOffsetX = this.minXPosition();
			this.__contentOffsetY = this.minYPosition();
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::SetInsets(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::MinXPosition()" />*/
	minXPosition: function () {
		return this._leftInset * -1;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::MinXPosition()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::MinYPosition()" />*/
	minYPosition: function () {
		return this._topInset * -1;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::MinYPosition()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::StopAnimationTimers()" />*/
	stopAnimationTimers: function () {
		this.__scrollAnimationTimerHorizontal.stop();
		this.__scrollAnimationTimerVertical.stop();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::StopAnimationTimers()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::CanScrollHorizontally()" />*/
	canScrollHorizontally: function () {
		return this.alwaysBounceHorizontal() || (this.__contentWidth > this._scrollHelperDelegate.viewportWidth());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::CanScrollHorizontally()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::CanScrollVertically()" />*/
	canScrollVertically: function () {
		return this.alwaysBounceVertical() || (this.__contentHeight > this._scrollHelperDelegate.viewportHeight());
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::CanScrollVertically()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::ResetTouchAnchors(, )" />*/
	resetTouchAnchors: function (x, y) {
		if (this.__wasMultitouch && !this.__isMultitouch) {
			this.__anchorPointX = x[0];
			this.__anchorPointY = y[0];
			this.__wasMultitouch = false;
			this.__isMultitouch = false;
			return;
		}
		if (!this.__wasMultitouch && this.__isMultitouch) {
			this.__wasMultitouch = true;
			this.startMultiTouch(x, y);
			return;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::ResetTouchAnchors(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::BounceHelperH(System.Double)" />*/
	bounceHelperH: function (duration) {
		if (!this.canScrollHorizontally()) {
			return;
		}
		this.__finalContentOffsetX = (this.__contentOffsetX < this.minXPosition()) ? this.minXPosition() : (this.__contentOffsetX > this.hScrollLimit()) ? this.hScrollLimit() : this.__contentOffsetX;
		this.__previousContentOffsetX = this.__contentOffsetX;
		if (this.__finalContentOffsetX == this.__previousContentOffsetX) {
			return;
		}
		this.__scrollHDuration = duration;
		this.__scrollAnimationTimerHorizontal.start1(this.__scrollHDuration, this.__hTickBlock, this.__scrollAnimationComplete);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::BounceHelperH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::BounceHelperV(System.Double)" />*/
	bounceHelperV: function (duration) {
		if (!this.canScrollVertically()) {
			return;
		}
		this.__finalContentOffsetY = (this.__contentOffsetY < this.minYPosition()) ? this.minYPosition() : (this.__contentOffsetY > this.vScrollLimit()) ? this.vScrollLimit() : this.__contentOffsetY;
		this.__previousContentOffsetY = this.__contentOffsetY;
		if (this.__finalContentOffsetY == this.__previousContentOffsetY) {
			return;
		}
		this.__scrollVDuration = duration;
		this.__scrollAnimationTimerVertical.start1(this.__scrollVDuration, this.__vTickBlock, this.__scrollAnimationComplete);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::BounceHelperV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::StartScrollAnimationH(System.Double)" />*/
	startScrollAnimationH: function (duration) {
		if (!this.canScrollHorizontally()) {
			return;
		}
		this.__lastX = this.__contentOffsetX;
		this.__scrollHDuration = duration;
		this.__scrollAnimationTimerHorizontal.start1(this.__scrollHDuration, this.__hTickBlock, this.__scrollAnimationComplete);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::StartScrollAnimationH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::StartScrollAnimationV(System.Double)" />*/
	startScrollAnimationV: function (duration) {
		if (!this.canScrollVertically()) {
			return;
		}
		this.__lastY = this.__contentOffsetY;
		this.__scrollVDuration = duration;
		this.__scrollAnimationTimerVertical.start1(this.__scrollVDuration, this.__vTickBlock, this.__scrollAnimationComplete);
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::StartScrollAnimationV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ScrollEventProcessor::CalculateNewScalePositionForBounce(System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)" />*/
	calculateNewScalePositionForBounce: function (oldOffset, contentOffset, lastPos, limit, percentComplete, minPos) {
		var pos = oldOffset;
		if (contentOffset <= minPos) {
			var peak = contentOffset * 0.3;
			pos = lastPos + $.ig.CPMathUtility.prototype.easeOutCubic(percentComplete) * (peak - lastPos);
			if (pos < peak / 2) {
				pos = peak - pos;
			}
			pos += minPos;
		}
		if (contentOffset >= limit) {
			var peak1 = limit + (contentOffset - limit) * 0.3;
			pos = lastPos + $.ig.CPMathUtility.prototype.easeOutCubic(percentComplete) * (peak1 - lastPos);
			if (pos > (limit + peak1) / 2) {
				pos = limit + peak1 - pos;
			}
		}
		return pos;
	}
	/*<EndMethod Name="System.Double Infragistics.ScrollEventProcessor::CalculateNewScalePositionForBounce(System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::NotifyUpdateOccurred()" />*/
	notifyUpdateOccurred: function () {
		this._scrollHelperDelegate.scrollPositionUpdated();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::NotifyUpdateOccurred()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateBounceH(System.Double)" />*/
	animateBounceH: function (percentComplete) {
		var x = this.calculateNewScalePositionForBounce(this.__contentOffsetX, this.__finalContentOffsetX, this.__lastX, this.hScrollLimit(), percentComplete, this.minXPosition());
		this.__contentOffsetX = x;
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateBounceH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateBounceV(System.Double)" />*/
	animateBounceV: function (percentComplete) {
		var y = this.calculateNewScalePositionForBounce(this.__contentOffsetY, this.__finalContentOffsetY, this.__lastY, this.vScrollLimit(), percentComplete, this.minYPosition());
		this.__contentOffsetY = y;
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateBounceV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateScrollH(System.Double)" />*/
	animateScrollH: function (percentComplete) {
		if ((this.__finalContentOffsetX < this.minXPosition() && this.__contentOffsetX <= this.minXPosition()) || (this.__finalContentOffsetX > this.hScrollLimit() && this.__contentOffsetX >= this.hScrollLimit())) {
			this.__scrollHDuration = Math.min($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION, (this.__scrollHDuration * (1 - percentComplete)));
			this.__scrollAnimationTimerHorizontal.start1(this.__scrollHDuration, this.__hBTickBlock, this.__scrollAnimationComplete);
		} else {
			this.__contentOffsetX = (this.__previousContentOffsetX + $.ig.CPMathUtility.prototype.easeOutCubic(percentComplete) * (this.__finalContentOffsetX - this.__previousContentOffsetX));
			this.__lastX = this.__contentOffsetX;
		}
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateScrollH(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateScrollV(System.Double)" />*/
	animateScrollV: function (percentComplete) {
		if ((this.__finalContentOffsetY < this.minYPosition() && this.__contentOffsetY <= this.minYPosition()) || (this.__finalContentOffsetY > this.vScrollLimit() && this.__contentOffsetY >= this.vScrollLimit())) {
			this.__scrollVDuration = Math.min($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION, (this.__scrollVDuration * (1 - percentComplete)));
			this.__scrollAnimationTimerVertical.start1(this.__scrollVDuration, this.__vBTickBlock, this.__scrollAnimationComplete);
		} else {
			this.__contentOffsetY = (this.__previousContentOffsetY + $.ig.CPMathUtility.prototype.easeOutCubic(percentComplete) * (this.__finalContentOffsetY - this.__previousContentOffsetY));
			this.__lastY = this.__contentOffsetY;
		}
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::AnimateScrollV(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::ScrollEventHelper(System.Double, System.Double, System.Double)" />*/
	scrollEventHelper: function (ptX, ptY, timestamp) {
		if (!this.canScrollHorizontally() && !this.canScrollVertically()) {
			return;
		}
		var prevContentOffsetX = this.__contentOffsetX;
		var prevContentOffsetY = this.__contentOffsetY;
		if ($.ig.util.isNaN(this.__previousTouchX) || $.ig.util.isNaN(this.__previousTouchY)) {
			this.__previousTouchX = ptX;
			this.__previousTouchY = ptY;
		}
		var scrollFactorX = 1;
		var scrollFactorY = 1;
		if (this.__contentOffsetX < this.minXPosition() || this.__contentOffsetX > this.hScrollLimit()) {
			scrollFactorX = 3;
		}
		if (this.__contentOffsetY < this.minYPosition() || this.__contentOffsetY > this.vScrollLimit()) {
			scrollFactorY = 3;
		}
		var left = this.minXPosition();
		var top = this.minYPosition();
		if (this.canScrollHorizontally()) {
			left = this.__contentOffsetX + (this.__anchorPointX - ptX) / scrollFactorX;
		}
		if (this.canScrollVertically()) {
			top = this.__contentOffsetY + (this.__anchorPointY - ptY) / scrollFactorY;
		}
		this.__anchorPointX = ptX;
		this.__anchorPointY = ptY;
		var timeElapsed = (timestamp - this.__previousTouchMoveTimeStamp);
		if (timeElapsed <= 0) {
			timeElapsed = 2;
		}
		var diffX = (ptX - this.__previousTouchX);
		if (diffX != 0) {
			this.__velocityX = Math.max(Math.min(15, diffX / timeElapsed), -15);
		}
		var diffY = (ptY - this.__previousTouchY);
		if (diffY != 0) {
			this.__velocityY = Math.max(Math.min(15, diffY / timeElapsed), -15);
		}
		this.__previousTouchMoveTimeStamp = timestamp;
		this.__previousTouchX = ptX;
		this.__previousTouchY = ptY;
		this.__tempTouchMoveTimeStamp = this.getNow();
		this.__contentOffsetX = left;
		this.__contentOffsetY = top;
		this.notifyUpdateOccurred();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::ScrollEventHelper(System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::MouseWheelHelper(System.Double, System.Double, System.Double, System.Double)" />*/
	mouseWheelHelper: function (deltaX, deltaY, ptX, ptY) {
		this.stopAnimationTimers();
		this.__delayMouseWheelAnimator.stop();
		this.__scrollAnimationTimerVertical.stop();
		var left = this.__contentOffsetX;
		var top = this.__contentOffsetY;
		var xModified = false;
		var yModified = false;
		var currentScale = this.__zoomScale;
		if (this.__pinchGestureEnabled) {
			var calculatedScale = this.__contentWidth / this._scrollHelperDelegate.viewportWidth();
			var scaleFactor = 1 - Math.min(0.5, Math.max(-0.5, deltaY));
			if (deltaY > 0 && calculatedScale < this.__maxZoomScale || deltaY < 0 && calculatedScale > this.__minZoomScale) {
				var cx = this.__contentOffsetX / this.__contentWidth + 1 / calculatedScale * ptX / this._scrollHelperDelegate.viewportWidth();
				var cy = this.__contentOffsetY / this.__contentHeight + 1 / calculatedScale * ptY / this._scrollHelperDelegate.viewportHeight();
				var prevContentWidth = this.__contentWidth;
				var prevContentHeight = this.__contentHeight;
				var temp = this.__contentWidth / scaleFactor;
				currentScale = temp / this._scrollHelperDelegate.viewportWidth();
				currentScale = Math.min(Math.max(currentScale, this.__minZoomScale), this.__maxZoomScale);
				this.__contentWidth = this._scrollHelperDelegate.viewportWidth() * currentScale;
				this.__contentHeight = this._scrollHelperDelegate.viewportHeight() * currentScale;
				if (currentScale < 1) {
					left = (this.__contentWidth - this._scrollHelperDelegate.viewportWidth()) / 2;
					top = (this.__contentHeight - this._scrollHelperDelegate.viewportHeight()) / 2;
				} else {
					left = Math.max(0, Math.min(this.__contentWidth - this._scrollHelperDelegate.viewportWidth(), left + (this.__contentWidth - prevContentWidth) * cx));
					top = Math.max(0, Math.min(this.__contentHeight - this._scrollHelperDelegate.viewportHeight(), top + (this.__contentHeight - prevContentHeight) * cy));
				}
			}
		} else {
			if (this.__contentOffsetX < this.minXPosition() || this.__contentOffsetX > this.hScrollLimit()) {
				deltaX /= 25;
			}
			if (this.canScrollHorizontally() && deltaX != 0) {
				left -= deltaX * 1000;
			}
			if (this.__contentOffsetY < this.minYPosition() || this.__contentOffsetY > this.vScrollLimit()) {
				deltaY /= 25;
			}
			if (this.canScrollVertically() && deltaY != 0) {
				top -= deltaY * 1000;
			}
		}
		if (this.__contentOffsetY != left) {
			xModified = true;
			this.__contentOffsetX = left;
		}
		if (this.__contentOffsetY != top) {
			yModified = true;
			this.__contentOffsetY = top;
		}
		if (this.__zoomScale != currentScale) {
			this.__zoomScale = currentScale;
		}
		if (!this.__pinchGestureEnabled) {
			if (this.__contentOffsetX < this.minXPosition() || this.__contentOffsetX > this.hScrollLimit()) {
				this.bounceHelperH(0.7);
			}
			if (this.__contentOffsetY < this.minYPosition() || this.__contentOffsetY > this.vScrollLimit()) {
				var bounceLimit = 0;
				if (this.__contentOffsetY < -bounceLimit) {
					this.__contentOffsetY = -bounceLimit;
				} else if (this.__contentOffsetY > this.vScrollLimit() + bounceLimit) {
					this.__contentOffsetY = this.vScrollLimit() + bounceLimit;
				}
				this.bounceHelperV(0.5);
			}
		}
		if (xModified == true || yModified == true) {
			this.notifyUpdateOccurred();
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::MouseWheelHelper(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::MouseUpHelper()" />*/
	mouseUpHelper: function () {
		this.stopAnimationTimers();
		var now = this.getNow();
		if (!this.pagingEnabled() && this._interceptHPosAction == null && this._interceptVPosAction == null && (now - this.__tempTouchMoveTimeStamp > 100 || ($.ig.util.isNaN(this.__previousTouchX) || $.ig.util.isNaN(this.__previousTouchY)))) {
			if (this.__contentOffsetX < this.minXPosition() || this.__contentOffsetX > this.hScrollLimit()) {
				this.bounceHelperH($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION);
			}
			if (this.__contentOffsetY < this.minYPosition() || this.__contentOffsetY > this.vScrollLimit()) {
				this.bounceHelperV($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION);
			}
			return;
		}
		this.__previousContentOffsetX = this.__contentOffsetX;
		this.__previousContentOffsetY = this.__contentOffsetY;
		this.__scrollDisplacementX = this.__velocityX / $.ig.ScrollEventProcessor.prototype._dECELERATION;
		this.__scrollDisplacementY = this.__velocityY / $.ig.ScrollEventProcessor.prototype._dECELERATION;
		var xLimitOffset = this._scrollHelperDelegate.viewportWidth() / 2;
		var yLimitOffset = this._scrollHelperDelegate.viewportHeight() / 2;
		var minContentOffsetX = this.minXPosition() - xLimitOffset;
		var minContentOffsetY = this.minYPosition() - yLimitOffset;
		var maxContentOffsetX = this.__contentWidth - xLimitOffset;
		var maxContentOffsetY = this.__contentHeight - yLimitOffset;
		this.__finalContentOffsetX = Math.min(maxContentOffsetX, Math.max(minContentOffsetX, this.__contentOffsetX + this.__scrollDisplacementX));
		this.__finalContentOffsetY = Math.min(maxContentOffsetY, Math.max(minContentOffsetY, this.__contentOffsetY + this.__scrollDisplacementY));
		if (this._interceptVPosAction != null) {
			this.__finalContentOffsetY = this._interceptVPosAction(this.__finalContentOffsetY);
			var vY = Math.abs(this.__velocityY);
			var duration = (-0.02 * vY * vY + 0.3 * vY + 1) * $.ig.ScrollEventProcessor.prototype._mUlTIPLIER;
			this.startScrollAnimationV(duration);
		} else if (this.__contentOffsetY < this.minYPosition() || this.__contentOffsetY > this.vScrollLimit()) {
			this.bounceHelperV($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION);
		} else if (this.__finalContentOffsetY != this.__contentOffsetY) {
			var vY1 = Math.abs(this.__velocityY);
			var duration1 = (-0.02 * vY1 * vY1 + 0.3 * vY1 + 1) * $.ig.ScrollEventProcessor.prototype._mUlTIPLIER;
			this.startScrollAnimationV(duration1);
		}
		if (this._interceptHPosAction != null) {
			this.__finalContentOffsetX = this._interceptHPosAction(this.__finalContentOffsetX);
			var vX = Math.abs(this.__velocityX);
			var duration2 = (-0.02 * vX * vX + 0.3 * vX + 1) * $.ig.ScrollEventProcessor.prototype._mUlTIPLIER;
			this.startScrollAnimationH(duration2);
		} else if (this.__contentOffsetX < this.minXPosition() || this.__contentOffsetX > this.hScrollLimit()) {
			this.bounceHelperH($.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION);
		} else if (this.__finalContentOffsetX != this.__contentOffsetX) {
			var duration3 = 0;
			if (this.pagingEnabled()) {
				var newPage = this.__startDragPage;
				var maxPage = $.ig.truncate((this.__contentWidth / this._scrollHelperDelegate.viewportWidth())) - 1;
				if (this.__scrollDisplacementX > 350) {
					newPage++;
				} else if (this.__scrollDisplacementX < -350) {
					newPage--;
				}
				if (newPage < 0) {
					newPage = 0;
				} else if (newPage > maxPage) {
					newPage = maxPage;
				}
				duration3 = 0.5;
				this.__finalContentOffsetX = newPage * this._scrollHelperDelegate.viewportWidth();
			} else {
				var vX1 = Math.abs(this.__velocityX);
				duration3 = (-0.02 * vX1 * vX1 + 0.3 * vX1 + 1) * $.ig.ScrollEventProcessor.prototype._mUlTIPLIER;
			}
			this.startScrollAnimationH(duration3);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::MouseUpHelper()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::TouchMoveHelper(, )" />*/
	touchMoveHelper: function (x, y) {
		this.__isMultitouch = x.length > 1;
		if (!this.__isMultitouch) {
			return this.processMouseMove(x[0], y[0], false);
		}
		if (x.length == 2) {
			var pt1X = x[0];
			var pt1Y = y[0];
			var pt2X = x[1];
			var pt2Y = y[1];
			var centerX = Math.min(pt1X, pt2X) + Math.abs(pt1X - pt2X) / 2;
			var centerY = Math.min(pt1Y, pt2Y) + Math.abs(pt1Y - pt2Y) / 2;
			if (centerX < 0 || centerX > this._scrollHelperDelegate.viewportWidth() || centerY < 0 || centerY > this._scrollHelperDelegate.viewportHeight()) {
				return false;
			}
			var originalDistance = Math.sqrt(Math.pow(this.__anchorPointX - this.__anchorPointX2, 2) + Math.pow(this.__anchorPointY - this.__anchorPointY2, 2));
			var currentDistance = Math.sqrt(Math.pow(pt1X - pt2X, 2) + Math.pow(pt1Y - pt2Y, 2));
			var zoomingIn = originalDistance < currentDistance;
			var scale = this.__contentWidth / this._scrollHelperDelegate.viewportWidth();
			var left = this.__contentOffsetX;
			var top = this.__contentOffsetY;
			if (this.__pinchGestureEnabled && (!zoomingIn && scale > this.__minZoomScale || zoomingIn && scale < this.__maxZoomScale)) {
				scale = Math.max(this.__minZoomScale, Math.min(this.__maxZoomScale, this.__prevZoomScale * currentDistance / originalDistance));
				var cx = this.__previousContentOffsetX / this.__prevContentWidth + 1 / this.__prevZoomScale * centerX / this._scrollHelperDelegate.viewportWidth();
				var cy = this.__previousContentOffsetY / this.__prevContentWidth + 1 / this.__prevZoomScale * centerY / this._scrollHelperDelegate.viewportHeight();
				this.__contentWidth = this._scrollHelperDelegate.viewportWidth() * scale;
				this.__contentHeight = this._scrollHelperDelegate.viewportHeight() * scale;
				if (scale < 1) {
					left = (this.__contentWidth - this._scrollHelperDelegate.viewportWidth()) / 2;
					top = (this.__contentHeight - this._scrollHelperDelegate.viewportHeight()) / 2;
				} else {
					left = Math.max(0, this.__previousContentOffsetX + cx * (this.__contentWidth - this.__prevContentWidth));
					top = Math.max(0, this.__previousContentOffsetY + cy * (this.__contentHeight - this.__prevContentHeight));
				}
			}
			if (this.__contentOffsetX != left || this.__contentOffsetY != top || scale != this.__zoomScale) {
				this.__contentOffsetX = left;
				this.__contentOffsetY = top;
				this.__zoomScale = scale;
				this.notifyUpdateOccurred();
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::TouchMoveHelper(, )" />*/
	,
	__startX: 0,
	__startY: 0,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseDown(System.Double, System.Double)" />*/
	handleMouseDown: function (x, y) {
		if (this.allowMouseDrag()) {
			this.__isScrolling = false;
			this.stopAnimationTimers();
			var val = (this.__contentOffsetX / this._scrollHelperDelegate.viewportWidth());
			this.__startDragPage = $.ig.truncate(val);
			if (val - this.__startDragPage > 0.5) {
				this.__startDragPage++;
			}
			this.__previousTouchMoveTimeStamp = this.getNow();
			this.__startX = x;
			this.__startY = y;
			this.__mouseDown = true;
			this.__previousTouchX = x;
			this.__previousTouchY = y;
			this.__anchorPointX = x;
			this.__anchorPointY = y;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseDown(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseUp()" />*/
	handleMouseUp: function () {
		if (this.allowMouseDrag()) {
			this.__mouseDown = false;
			if (this.__isScrolling) {
				this.__isScrolling = false;
				this.mouseUpHelper();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::StartMultiTouch(, )" />*/
	startMultiTouch: function (x, y) {
		this.__isMultitouch = true;
		this.__prevZoomScale = this.__zoomScale;
		this.__prevContentWidth = this.__contentWidth;
		this.__prevContentHeight = this.__contentHeight;
		this.__previousContentOffsetX = this.__contentOffsetX;
		this.__previousContentOffsetY = this.__contentOffsetY;
		this.__anchorPointX = x[0];
		this.__anchorPointY = y[0];
		this.__anchorPointX2 = x[1];
		this.__anchorPointY2 = y[1];
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::StartMultiTouch(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchStart(, )" />*/
	handleTouchStart: function (x, y) {
		this.handleMouseDown(x[0], y[0]);
		if (x.length > 1) {
			this.startMultiTouch(x, y);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchStart(, )" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleTouchMove(, )" />*/
	handleTouchMove: function (x, y) {
		this.__isMultitouch = x.length > 1;
		this.resetTouchAnchors(x, y);
		return this.touchMoveHelper(x, y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleTouchMove(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchEnd(System.Int32)" />*/
	handleTouchEnd: function (numTouches) {
		this.__isMultitouch = false;
		this.__wasMultitouch = false;
		this.__mouseDown = false;
		if (this.__zoomScale < this.__minZoomScale) {
			this.__zoomScale = this.__minZoomScale;
		}
		this.handleMouseUp();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchEnd(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchVelocity(System.Double, System.Double)" />*/
	handleTouchVelocity: function (x, y) {
		this.__velocityX = x;
		this.__velocityY = y;
		this.mouseUpHelper();
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleTouchVelocity(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleMouseWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	handleMouseWheel: function (x, y, deltaX, deltaY) {
		if (this.allowMouseDrag()) {
			return this.mouseWheelHelper(deltaX, deltaY, x, y);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleMouseWheel(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::HScrollLimit()" />*/
	hScrollLimit: function () {
		return this.__contentWidth - this._scrollHelperDelegate.viewportWidth();
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::HScrollLimit()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollEventProcessor::VScrollLimit()" />*/
	vScrollLimit: function () {
		return this.__contentHeight - this._scrollHelperDelegate.viewportHeight();
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollEventProcessor::VScrollLimit()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::EnsureIsScrolling(System.Double, System.Double)" />*/
	ensureIsScrolling: function (x, y) {
		if (!this.__isScrolling) {
			var touchSlop = $.ig.NativeUIUtility.prototype.utility().scrollingTouchSlop();
			var distanceX = x - this.__previousTouchX;
			var distanceY = y - this.__previousTouchY;
			if (this.canScrollHorizontally() && Math.abs(distanceX) > touchSlop) {
				this.__isScrolling = true;
			} else if (this.canScrollVertically() && Math.abs(distanceY) > touchSlop) {
				this.__isScrolling = true;
			}
		}
		return this.__isScrolling;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::EnsureIsScrolling(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleMouseMove(System.Double, System.Double)" />*/
	handleMouseMove: function (x, y) {
		return this.processMouseMove(x, y, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::HandleMouseMove(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.ScrollEventProcessor::ProcessMouseMove(System.Double, System.Double, System.Boolean)" />*/
	processMouseMove: function (x, y, isMouse) {
		if (!isMouse || this.allowMouseDrag()) {
			if (this.__mouseDown) {
				this.__isScrolling = this.ensureIsScrolling(x, y);
				if (this.__isScrolling) {
					this.scrollEventHelper(x, y, this.getNow());
				}
			}
			return this.__isScrolling;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.ScrollEventProcessor::ProcessMouseMove(System.Double, System.Double, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.ScrollEventProcessor::GetNow()" />*/
	getNow: function () {
		return this.__scrollAnimationTimerHorizontal.getNow();
	}
	/*<EndMethod Name="System.Double Infragistics.ScrollEventProcessor::GetNow()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseEnter()" />*/
	handleMouseEnter: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseEnter()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseLeave()" />*/
	handleMouseLeave: function () {
		this.__mouseDown = false;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollEventProcessor::HandleMouseLeave()" />*/
	,
	$type: new $.ig.Type('ScrollEventProcessor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScrollEventProcessor" />*/

/*<BeginType Name="Infragistics.CPFocusableTextView" />*/

$.ig.util.defType('CPFocusableTextView', 'CPInteractionView', {
	__textView: null,
	init: function () {
		$.ig.CPInteractionView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPFocusableTextView::ElementGotFocus()" />*/
	elementGotFocus: function () {
		$.ig.CPInteractionView.prototype.elementGotFocus.call(this);
		if (this.__textView != null) {
			this.__textView.setFocus();
			this.__textView.selectAllText();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusableTextView::ElementGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusableTextView::SetTextView(Infragistics.CPTextView)" />*/
	setTextView: function (textView) {
		this.__textView = textView;
		this.addSubview(this.__textView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusableTextView::SetTextView(Infragistics.CPTextView)" />*/
	,
	_textViewInset: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPFocusableTextView::TextViewInset()" />*/
	textViewInset: function (value) {
		if (arguments.length === 1) {
			this._textViewInset = value;
			return value;
		} else {
			return this._textViewInset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPFocusableTextView::TextViewInset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPFocusableTextView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPInteractionView.prototype.sizeChanged.call(this, w, h);
		if (this.__textView != null) {
			this.measureView(this.__textView, this.textViewInset(), this.textViewInset(), w - (this.textViewInset() * 2), h - (this.textViewInset() * 2));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPFocusableTextView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPFocusableTextView::AccessibilityName()" />*/
	accessibilityName: function (value) {
		if (arguments.length === 1) {
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__textView, value);
			return value;
		} else {
			return this.__textView.accessibilityName();
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPFocusableTextView::AccessibilityName()" />*/
	,
	$type: new $.ig.Type('CPFocusableTextView', $.ig.CPInteractionView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPFocusableTextView" />*/

/*<BeginType Name="Infragistics.CPTextProcessorView" />*/

$.ig.util.defType('CPTextProcessorView', 'CPRichTextView', {
	__textTracker: null,
	init: function () {
		$.ig.CPRichTextView.prototype.init.call(this);
		this.__textTracker = new $.ig.CPTextTracker(this);
		this.registerDetectors();
		this.registerLiveInputProcessors();
	},
	__inSelectionChanged: false,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::SelectionChanged()" />*/
	selectionChanged: function () {
		if (this.__inSelectionChanged) {
			return;
		}
		$.ig.CPRichTextView.prototype.selectionChanged.call(this);
		if (!this.getIsReadOnly()) {
			this.__inSelectionChanged = true;
			this.__textTracker.update(this.currentSelectionRange()._location, this.currentSelectionRange()._length, this.getText());
			this.__inSelectionChanged = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::SelectionChanged()" />*/
	,
	_textProcessingDisabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextProcessorView::TextProcessingDisabled()" />*/
	textProcessingDisabled: function (value) {
		if (arguments.length === 1) {
			this._textProcessingDisabled = value;
			return value;
		} else {
			return this._textProcessingDisabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextProcessorView::TextProcessingDisabled()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::SetText(System.String)" />*/
	setText: function (text) {
		$.ig.CPRichTextView.prototype.setText.call(this, text);
		this.selectionChanged();
		if (!this.textProcessingDisabled() && this.getIsReadOnly()) {
			this.__textTracker.setText(0, 0, text);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::InsertText(System.String)" />*/
	insertText: function (text) {
		this.__textTracker.insertText(text);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::InsertText(System.String)" />*/
	,
	__requestKeyboardCommands: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterKeyboardCommandsBlock(Infragistics.ListBoolBlock)" />*/
	registerKeyboardCommandsBlock: function (requestKeyboardCommands) {
		this.__requestKeyboardCommands = requestKeyboardCommands;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterKeyboardCommandsBlock(Infragistics.ListBoolBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextProcessorView::GetAdditionalKeyboardCommands(System.Boolean)" />*/
	getAdditionalKeyboardCommands: function (isTopMostManager) {
		if (this.__requestKeyboardCommands != null) {
			var list = new $.ig.Array();
			this.__requestKeyboardCommands(list, isTopMostManager);
			if (list.length > 0) {
				return list;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextProcessorView::GetAdditionalKeyboardCommands(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextProcessorView::GetSupportedKeyCommands(System.Boolean)" />*/
	getSupportedKeyCommands1: function (isTopMostManager) {
		var addtionalCommands = this.getAdditionalKeyboardCommands(isTopMostManager);
		if (addtionalCommands != null) {
			return addtionalCommands;
		}
		var commands = this.__textTracker.getSupportedKeyCommands();
		if (commands != null) {
			return commands;
		}
		return $.ig.CPRichTextView.prototype.getSupportedKeyCommands1.call(this, isTopMostManager);
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextProcessorView::GetSupportedKeyCommands(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterLiveInputProcessors()" />*/
	registerLiveInputProcessors: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterLiveInputProcessors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::AddLiveInputProcessor(Infragistics.CPLiveInputProcessor)" />*/
	addLiveInputProcessor: function (processor) {
		this.__textTracker.addLiveInputProcessor(processor);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::AddLiveInputProcessor(Infragistics.CPLiveInputProcessor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterDetectors()" />*/
	registerDetectors: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::RegisterDetectors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::ClearDetectors()" />*/
	clearDetectors: function () {
		this.__textTracker.clearDetectors();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::ClearDetectors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextProcessorView::AddDetector(Infragistics.CPTextDetectorBase)" />*/
	addDetector: function (detector) {
		this.__textTracker.addDetector(detector);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextProcessorView::AddDetector(Infragistics.CPTextDetectorBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTextDetectorMatchDelegate Infragistics.CPTextProcessorView::DetectorDelegate()" />*/
	detectorDelegate: function (value) {
		if (arguments.length === 1) {
			this.__textTracker.detectorDelegate(value);
			return value;
		} else {
			return this.__textTracker.detectorDelegate();
		}
	}
	/*<EndProperty Name="Infragistics.CPTextDetectorMatchDelegate Infragistics.CPTextProcessorView::DetectorDelegate()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPTextProcessorView::Words()" />*/
	words: function () {
		if (null != this.__textTracker) {
			return this.__textTracker.words();
		}
		return new $.ig.Array();
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPTextProcessorView::Words()" />*/
	,
	$type: new $.ig.Type('CPTextProcessorView', $.ig.CPRichTextView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextProcessorView" />*/

/*<BeginType Name="Infragistics.CPMessageTextView" />*/

$.ig.util.defType('CPMessageTextView', 'CPTextProcessorView', {
	init: function () {
		$.ig.CPTextProcessorView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPMessageTextView::RegisterLiveInputProcessors()" />*/
	registerLiveInputProcessors: function () {
		$.ig.CPTextProcessorView.prototype.registerLiveInputProcessors.call(this);
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":)", "🙂"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":-)", "🙂"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":D", "😀"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(";)", "😉"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(";-)", "😉"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":-P", "😛"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":P", "😛"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":-p", "😛"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":p", "😛"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(";-P", "😜"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(";P", "😜"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":*", "😗"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(";*", "😘"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":(", "🙁"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":|", "😐"));
		this.addLiveInputProcessor(new $.ig.CPLiveInputReplaceProcessor(":#", "😶"));
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageTextView::RegisterLiveInputProcessors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPMessageTextView::RegisterDetectors()" />*/
	registerDetectors: function () {
		$.ig.CPTextProcessorView.prototype.registerDetectors.call(this);
		this.addDetector(new $.ig.CPTextURLDetector());
	}
	/*<EndMethod Name="System.Void Infragistics.CPMessageTextView::RegisterDetectors()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPMessageTextView::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var commands = $.ig.CPTextProcessorView.prototype.getSupportedKeyCommands.call(this);
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPMessageTextView::GetSupportedKeyCommands()" />*/
	,
	$type: new $.ig.Type('CPMessageTextView', $.ig.CPTextProcessorView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPMessageTextView" />*/

/*<BeginType Name="Infragistics.CPRichTextBoxToolBar" />*/

$.ig.util.defType('CPRichTextBoxToolBar', 'CPView', {
	__boldFormatButton: null,
	__italicFormatButton: null,
	__underlineFormatButton: null,
	__strikethroughFormatButton: null,
	__boldButtonIcon: null,
	__italicButtonIcon: null,
	__underlineButtonIcon: null,
	__strikethroughButtonIcon: null,
	__buttonStyle: 0,
	__boldButtonTooltip: null,
	__italicButtonTooltip: null,
	__underlineButtonTooltip: null,
	__strikethroughButtonTooltip: null,
	__richTextView: null,
	init: function (richTextView, boldButtonIcon, italicButtonIcon, underlineButtonIcon, strikethroughButtonIcon, buttonStyle, boldButtonToolTip, italicButtonToolTip, underlineButtonToolTip, strikethroughButtonToolTip) {
		var $self = this;
		$.ig.CPView.prototype.init.call(this);
		this.__boldButtonIcon = boldButtonIcon;
		this.__italicButtonIcon = italicButtonIcon;
		this.__underlineButtonIcon = underlineButtonIcon;
		this.__strikethroughButtonIcon = strikethroughButtonIcon;
		this.__buttonStyle = buttonStyle;
		this.__boldButtonTooltip = boldButtonToolTip;
		this.__italicButtonTooltip = italicButtonToolTip;
		this.__underlineButtonTooltip = underlineButtonToolTip;
		this.__strikethroughButtonTooltip = strikethroughButtonToolTip;
		this.createToolbarButtons();
		this.__richTextView = richTextView;
		this.__richTextView.registerSelectionChanged(function (r) {
			$self.evaluateButtonsSelectedState();
		});
		this.__richTextView.registerRichTextFormattingChanged(function () {
			$self.evaluateButtonsSelectedState();
		});
	},
	/*<BeginMethod Name="System.Int32 Infragistics.CPRichTextBoxToolBar::CalculateHeight(System.Int32)" />*/
	calculateHeight: function (w) {
		var bh = this.__boldFormatButton.sizingGuide().size();
		return bh + ($.ig.ThemeManager.prototype.theme().indentSpacing() * 2);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPRichTextBoxToolBar::CalculateHeight(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPView.prototype.sizeChanged.call(this, w, h);
		var bh = this.__boldFormatButton.sizingGuide().size();
		var padding = $.ig.ThemeManager.prototype.theme().indentSpacing();
		var formatToolLeft = padding;
		var formatToolTop = $.ig.intDivide((h - bh), 2);
		this.measureView1(this.__boldFormatButton, formatToolLeft, formatToolTop, bh, bh, 1);
		formatToolLeft += bh;
		this.measureView1(this.__italicFormatButton, formatToolLeft, formatToolTop, bh, bh, 1);
		formatToolLeft += bh;
		this.measureView1(this.__underlineFormatButton, formatToolLeft, formatToolTop, bh, bh, 1);
		formatToolLeft += bh;
		this.measureView1(this.__strikethroughFormatButton, formatToolLeft, formatToolTop, bh, bh, 1);
		formatToolLeft += bh;
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::EvaluateButtonsSelectedState()" />*/
	evaluateButtonsSelectedState: function () {
		this.__boldFormatButton.selectedState(this.__richTextView.getDoesSelectionContainBoldFormatting());
		this.__italicFormatButton.selectedState(this.__richTextView.getDoesSelectionContainItalicFormatting());
		this.__underlineFormatButton.selectedState(this.__richTextView.getDoesSelectionContainUnderlineFormatting());
		this.__strikethroughFormatButton.selectedState(this.__richTextView.getDoesSelectionContainStrikethroughFormatting());
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::EvaluateButtonsSelectedState()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconButton Infragistics.CPRichTextBoxToolBar::CreateButton(Infragistics.PathIcon, Infragistics.CPIconButtonStyle, System.String, Infragistics.PointExecutionBlock)" />*/
	createButton: function (icon, style, tooltip, action) {
		var button = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, style);
		button.setIcon(icon);
		button.addClickHandler(action);
		button.shouldSteaFocusFromTextEditors(false);
		button.setTooltip(tooltip, "");
		this.addSubview(button);
		return button;
	}
	/*<EndMethod Name="Infragistics.CPIconButton Infragistics.CPRichTextBoxToolBar::CreateButton(Infragistics.PathIcon, Infragistics.CPIconButtonStyle, System.String, Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::CreateToolbarButtons()" />*/
	createToolbarButtons: function () {
		var $self = this;
		this.__boldFormatButton = this.createButton(this.__boldButtonIcon, this.__buttonStyle, this.__boldButtonTooltip, function (x, y) {
			$self.__richTextView.toggleTextFormattingInSelection(true, false, false, false);
		});
		this.__italicFormatButton = this.createButton(this.__italicButtonIcon, this.__buttonStyle, this.__italicButtonTooltip, function (x, y) {
			$self.__richTextView.toggleTextFormattingInSelection(false, true, false, false);
		});
		this.__underlineFormatButton = this.createButton(this.__underlineButtonIcon, this.__buttonStyle, this.__underlineButtonTooltip, function (x, y) {
			$self.__richTextView.toggleTextFormattingInSelection(false, false, true, false);
		});
		this.__strikethroughFormatButton = this.createButton(this.__strikethroughButtonIcon, this.__buttonStyle, this.__strikethroughButtonTooltip, function (x, y) {
			$self.__richTextView.toggleTextFormattingInSelection(false, false, false, true);
		});
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichTextBoxToolBar::CreateToolbarButtons()" />*/
	,
	$type: new $.ig.Type('CPRichTextBoxToolBar', $.ig.CPView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichTextBoxToolBar" />*/

/*<BeginType Name="Infragistics.CPRichTextStylingBlock" />*/

$.ig.util.defType('CPRichTextStylingBlock', 'Object', {
	__start: 0,
	__end: 0,
	__startOffset: 0,
	__endOffset: 0,
	init: function () {
		this._textColor = new $.ig.Number();
		this._backgroundColor = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
	},
	_textColor: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPRichTextStylingBlock::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			this._textColor = value;
			return value;
		} else {
			return this._textColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPRichTextStylingBlock::TextColor()" />*/
	,
	_underline: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPRichTextStylingBlock::Underline()" />*/
	underline: function (value) {
		if (arguments.length === 1) {
			this._underline = value;
			return value;
		} else {
			return this._underline;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPRichTextStylingBlock::Underline()" />*/
	,
	_backgroundColor: null,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPRichTextStylingBlock::BackgroundColor()" />*/
	backgroundColor: function (value) {
		if (arguments.length === 1) {
			this._backgroundColor = value;
			return value;
		} else {
			return this._backgroundColor;
		}
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPRichTextStylingBlock::BackgroundColor()" />*/
	,
	_hREFVal: null,
	/*<BeginProperty Name="System.String Infragistics.CPRichTextStylingBlock::HREFVal()" />*/
	hREFVal: function (value) {
		if (arguments.length === 1) {
			this._hREFVal = value;
			return value;
		} else {
			return this._hREFVal;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPRichTextStylingBlock::HREFVal()" />*/
	,
	_action: null,
	/*<BeginProperty Name="Infragistics.ExecutionBlock Infragistics.CPRichTextStylingBlock::Action()" />*/
	action: function (value) {
		if (arguments.length === 1) {
			this._action = value;
			return value;
		} else {
			return this._action;
		}
	}
	/*<EndProperty Name="Infragistics.ExecutionBlock Infragistics.CPRichTextStylingBlock::Action()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this.__start = value;
			return value;
		} else {
			return this.__start;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::Start()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this.__end = value;
			return value;
		} else {
			return this.__end;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::End()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::StartOffset()" />*/
	startOffset: function (value) {
		if (arguments.length === 1) {
			this.__startOffset = value;
			return value;
		} else {
			return this.__startOffset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::StartOffset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::EndOffset()" />*/
	endOffset: function (value) {
		if (arguments.length === 1) {
			this.__endOffset = value;
			return value;
		} else {
			return this.__endOffset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPRichTextStylingBlock::EndOffset()" />*/
	,
	_bold: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPRichTextStylingBlock::Bold()" />*/
	bold: function (value) {
		if (arguments.length === 1) {
			this._bold = value;
			return value;
		} else {
			return this._bold;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPRichTextStylingBlock::Bold()" />*/
	,
	$type: new $.ig.Type('CPRichTextStylingBlock', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichTextStylingBlock" />*/

/*<BeginType Name="Infragistics.CPSearchBox" />*/

$.ig.util.defType('CPSearchBox', 'CPGridViewItemTextBoxCell', {
	__popupListId: null,
	__cancellableTextChanged: null,
	__inPopup: false,
	__hintText: null,
	__sep: null,
	__captureView: null,
	__addButton: null,
	__addButtonClicked: null,
	__addButtonTooltip: null,
	__addButtonIcon: null,
	__onTextBoxTextChanged: null,
	__onPopupVisibilityChanged: null,
	__isPopupOpen: false,
	init: function (initNumber, sizingGuide, hintText, textChanged, addButtonClicked, addButtonTooltip, addButtonIcon, onTextBoxTextChanged, onPopupVisibilityChanged) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPSearchBox.prototype.init1.call(this, 1, sizingGuide, hintText, textChanged, addButtonClicked, addButtonTooltip, addButtonIcon, onTextBoxTextChanged, onPopupVisibilityChanged, false);
	},
	init1: function (initNumber, sizingGuide, hintText, textChanged, addButtonClicked, addButtonTooltip, addButtonIcon, onTextBoxTextChanged, onPopupVisibilityChanged, popupMode) {
		var $self = this;
		$.ig.CPGridViewItemTextBoxCell.prototype.init.call(this, 0, sizingGuide, "x");
		this.__cancellableTextChanged = textChanged;
		this.__addButtonClicked = addButtonClicked;
		this.__addButtonTooltip = addButtonTooltip;
		this.__addButtonIcon = addButtonIcon;
		this.__onTextBoxTextChanged = onTextBoxTextChanged;
		this.__onPopupVisibilityChanged = onPopupVisibilityChanged;
		this.__inPopup = popupMode;
		this.textView().turnOffAutoCapitalization();
		this.setIcon($.ig.UIPathIcons.prototype.icons().getSearchIcon());
		this.setHintText(hintText);
		this.textView().turnOffAutoCapitalization();
		this.textView().useAutoCorrect(false);
		$.ig.UIUtility.prototype.setAccessibilityName1(this.textView(), "search_textbox");
		if (this.__inPopup) {
			this.__sep = new $.ig.CPViewBase();
			this.__sep.isHidden(true);
			this.__sep.setBackgroundColor($.ig.ThemeManager.prototype.theme().dividerColorOverMain().$native());
			this.contentContainer().addSubview(this.__sep);
			this.setCornerRadius(0);
			this.textView()._allowOutsideKeyCommandsAtSameLevel = true;
		}
		this.textView().registerEscapeKeyPressed(function () {
			$self.close();
		});
		if (!this.__inPopup) {
			this.__captureView = new $.ig.CPInteractionView();
			this.__captureView.isCaptureView(true);
			this.__captureView.setCursor($.ig.CPCursors.prototype.text);
			this.__captureView.addClickHandler(function (x, y) {
				if (null == $self.__clickedAction) {
					$self.updatePopup(new $.ig.Array());
				} else {
					$self.onClicked();
				}
			});
			this.contentContainer().addSubview(this.__captureView);
		} else {
			this.textView().registerEnterKeyPressed(function () {
				if ($self.__enterAction != null) {
					$self.__enterAction($self.textView().getText());
				}
			});
		}
		if (this.__addButtonClicked != null) {
			this.__addButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.CPIconButtonStyle.prototype.standard);
			this.__addButton.shouldSteaFocusFromTextEditors(false);
			this.__addButton.setTooltip(addButtonTooltip, null);
			this.__addButton.setIcon(addButtonIcon);
			this.__addButton.addClickHandler(function (x, y) {
				$self.onAddButtonClicked();
				$self.__addButtonClicked();
			});
			$.ig.UIUtility.prototype.setAccessibilityName1(this.__addButton, "searchBox_addButton");
			this.addSubview(this.__addButton);
			this.__addButton.disable();
			this.__addButton.isHidden(true);
		}
	},
	__bv: null,
	/*<BeginProperty Name="Infragistics.CPViewBase Infragistics.CPSearchBox::BlackoutView()" />*/
	blackoutView: function (value) {
		if (arguments.length === 1) {
			this.__bv = value;
			return value;
		} else {
			if (this.__bv == null) {
				return this;
			}
			return this.__bv;
		}
	}
	/*<EndProperty Name="Infragistics.CPViewBase Infragistics.CPSearchBox::BlackoutView()" />*/
	,
	_disableBlackoutArea: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchBox::DisableBlackoutArea()" />*/
	disableBlackoutArea: function (value) {
		if (arguments.length === 1) {
			this._disableBlackoutArea = value;
			return value;
		} else {
			return this._disableBlackoutArea;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchBox::DisableBlackoutArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::OnAddButtonClicked()" />*/
	onAddButtonClicked: function () {
		if (this.__addButtonClickedAction != null) {
			this.__addButtonClickedAction(this.getText());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::OnAddButtonClicked()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::EnterPressed()" />*/
	enterPressed: function () {
		if (this.__enterAction != null) {
			this.__enterAction(this.getText());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::EnterPressed()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPSearchBox::HintTextOpacity()" />*/
	hintTextOpacity: function () {
		return $.ig.ThemeManager.prototype.theme().restOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPSearchBox::HintTextOpacity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::SetHintText(System.String)" />*/
	setHintText: function (hintText) {
		this.__hintText = hintText;
		$.ig.CPGridViewItemTextBoxCell.prototype.setHintText.call(this, hintText);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::SetHintText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::Close()" />*/
	close: function () {
		if (this.__popupListId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__popupListId, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::Close()" />*/
	,
	__enterAction: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::RegisterEnterAction(Infragistics.StringBlock)" />*/
	registerEnterAction: function (action) {
		this.__enterAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::RegisterEnterAction(Infragistics.StringBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::TextViewTextChanged()" />*/
	textViewTextChanged: function () {
		$.ig.CPGridViewItemTextBoxCell.prototype.textViewTextChanged.call(this);
		var currentText = this.textView().getText();
		if (this.__onTextBoxTextChanged != null) {
			this.__onTextBoxTextChanged(currentText);
		}
		if (this.__addButton != null) {
			if (null != this.shouldEnableButton() && this.shouldEnableButton()(currentText)) {
				this.__addButton.enable();
				this.__addButton.isHidden(false);
			} else {
				this.__addButton.isHidden(true);
				this.__addButton.disable();
			}
		}
		if (this.__inPopup && !this.__ignoreTextChanged) {
			if (this.__cancellableTextChanged != null) {
				if (this.__cancellableTextChanged(this.textView().getText())) {
					this.updatePopup(new $.ig.Array());
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::TextViewTextChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::UpdatePopup(Infragistics.CPList)" />*/
	updatePopup: function (items) {
		this.updatePopup1(items, true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::UpdatePopup(Infragistics.CPList)" />*/
	,
	__ignoreTextChanged: false,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::UpdatePopup(Infragistics.CPList, System.Boolean)" />*/
	updatePopup1: function (items, setFocusToFirstItem) {
		var $self = this;
		if (setFocusToFirstItem && items != null && items.length > 0) {
			var item = items[0];
			item._hasFocus = true;
		}
		var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupListId);
		if (manager == null) {
			var search = new $.ig.CPSearchBox(1, this.sizingGuide().name(), this.__hintText, this.__cancellableTextChanged, this.__addButtonClicked, this.__addButtonTooltip, this.__addButtonIcon, this.__onTextBoxTextChanged, null, true);
			search.blackoutView(this.blackoutView());
			search.disableBlackoutArea(this.disableBlackoutArea());
			search.__ignoreTextChanged = true;
			search.textView().setText(this.textView().getText());
			search.__ignoreTextChanged = false;
			search.registerEnterAction(this.__enterAction);
			search.registerAddButtonClickedAction(this.__addButtonClickedAction);
			search.shouldEnableButton(this.shouldEnableButton());
			manager = new $.ig.CPSearchPopupManager(this, search, items);
			this.__isPopupOpen = true;
			if (this.__onPopupVisibilityChanged != null) {
				this.__onPopupVisibilityChanged(true);
			}
			this.__popupListId = search.__popupListId = $.ig.CPPopupManager.prototype.showPopup1(this, manager);
			$.ig.CPPopupManager.prototype.subscribeToBeNotifiedWhenPopupCloses(this.__popupListId, function () {
				$self.onPopupClosed();
			});
			if (null != this.__embeddedSearchBoxCreatedAction) {
				this.__embeddedSearchBoxCreatedAction(search);
			}
		} else {
			manager.updateItems(items);
		}
		if (manager.searchBox().__sep != null) {
			manager.searchBox().__sep.isHidden((items.length == 0));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::UpdatePopup(Infragistics.CPList, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::OnPopupClosed()" />*/
	onPopupClosed: function () {
		this.__isPopupOpen = false;
		if (this.__onPopupVisibilityChanged != null) {
			this.__onPopupVisibilityChanged(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::OnPopupClosed()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchBox::IsPopupOpen()" />*/
	isPopupOpen: function () {
		return this.__isPopupOpen;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchBox::IsPopupOpen()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPSearchBox::GetText()" />*/
	getText: function () {
		if (!this.__inPopup) {
			var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupListId);
			if (manager != null) {
				if (manager.searchBox() != this) {
					return manager.searchBox().getText();
				}
			}
		}
		return $.ig.CPGridViewItemTextBoxCell.prototype.getText.call(this);
	}
	/*<EndMethod Name="System.String Infragistics.CPSearchBox::GetText()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::SetText(System.String)" />*/
	setText: function (text) {
		if (!this.__inPopup) {
			var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupListId);
			if (manager != null) {
				manager.searchBox().setText(text);
			}
		} else {
			$.ig.CPGridViewItemTextBoxCell.prototype.setText.call(this, text);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::ClearFocus()" />*/
	clearFocus: function () {
		if (!this.__inPopup) {
			var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupListId);
			if (manager != null) {
				this.close();
			}
		} else {
			$.ig.CPGridViewItemTextBoxCell.prototype.clearFocus.call(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::ClearFocus()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchBox::HasCenterContentArea()" />*/
	hasCenterContentArea: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchBox::HasCenterContentArea()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchBox::HasRightContent()" />*/
	hasRightContent: function () {
		return this.numberOfItemsInRightContentArea() > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchBox::HasRightContent()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPSearchBox::NumberOfItemsInRightContentArea()" />*/
	numberOfItemsInRightContentArea: function () {
		return this.__addButton != null ? 1 : 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPSearchBox::NumberOfItemsInRightContentArea()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutRightContentArea: function (index, x, guide) {
		$.ig.CPGridViewItemTextBoxCell.prototype.layoutRightContentArea.call(this, index, x, guide);
		this.__addButton.calculateSizeToFit();
		var buttonWidth = this.__addButton.getCalculatedWidth();
		var buttonHeight = this.__addButton.getCalculatedHeight();
		var top = ($.ig.intDivide(guide.height(), 2)) - ($.ig.intDivide(buttonHeight, 2));
		this.contentContainer().measureView(this.__addButton, x, top, buttonWidth, buttonHeight);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::LayoutRightContentArea(System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	layoutCenterContentArea: function (x, w, h, guide) {
		$.ig.CPGridViewItemTextBoxCell.prototype.layoutCenterContentArea.call(this, x, w, h, guide);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::LayoutCenterContentArea(System.Int32, System.Int32, System.Int32, Infragistics.CPItemLayoutGuide)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPGridViewItemTextBoxCell.prototype.sizeChanged.call(this, w, h);
		var x = 0;
		if (this.__sep != null) {
			var sepSize = $.ig.ThemeManager.prototype.theme().borderWidth1();
			this.contentContainer().measureView1(this.__sep, x, h - sepSize, w, sepSize, 1);
		}
		if (this.__captureView != null) {
			this.contentContainer().measureView1(this.__captureView, x, 0, w, h, 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::SizeChanged(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::TextboxGotFocus()" />*/
	textboxGotFocus: function () {
		$.ig.CPGridViewItemTextBoxCell.prototype.textboxGotFocus.call(this);
		if (!this.__inPopup) {
			this.updatePopup(new $.ig.Array());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::TextboxGotFocus()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::TextboxLostFocus()" />*/
	textboxLostFocus: function () {
		$.ig.CPGridViewItemTextBoxCell.prototype.textboxLostFocus.call(this);
		if (!this.__inPopup) {
			var x = 0;
			x++;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::TextboxLostFocus()" />*/
	,
	__clickedAction: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::RegisterClickedAction(Infragistics.ExecutionBlock)" />*/
	registerClickedAction: function (action) {
		this.__clickedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::RegisterClickedAction(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::OnClicked()" />*/
	onClicked: function () {
		if (null != this.__clickedAction) {
			this.__clickedAction();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::OnClicked()" />*/
	,
	_shouldEnableButton: null,
	/*<BeginProperty Name="Infragistics.CancellableStringBlock Infragistics.CPSearchBox::ShouldEnableButton()" />*/
	shouldEnableButton: function (value) {
		if (arguments.length === 1) {
			this._shouldEnableButton = value;
			return value;
		} else {
			return this._shouldEnableButton;
		}
	}
	/*<EndProperty Name="Infragistics.CancellableStringBlock Infragistics.CPSearchBox::ShouldEnableButton()" />*/
	,
	__embeddedSearchBoxCreatedAction: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::RegisterEmbeddedSearchBoxCreatedAction(Infragistics.ObjectBlock)" />*/
	registerEmbeddedSearchBoxCreatedAction: function (action) {
		this.__embeddedSearchBoxCreatedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::RegisterEmbeddedSearchBoxCreatedAction(Infragistics.ObjectBlock)" />*/
	,
	__addButtonClickedAction: null,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchBox::RegisterAddButtonClickedAction(Infragistics.StringBlock)" />*/
	registerAddButtonClickedAction: function (action) {
		this.__addButtonClickedAction = action;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchBox::RegisterAddButtonClickedAction(Infragistics.StringBlock)" />*/
	,
	$type: new $.ig.Type('CPSearchBox', $.ig.CPGridViewItemTextBoxCell.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSearchBox" />*/

/*<BeginType Name="Infragistics.CPSearchPopupManager" />*/

$.ig.util.defType('CPSearchPopupManager', 'CPPopupListManager', {
	__captureContainer: null,
	__blackoutAreas: null,
	init: function (searchBox, clonedSearchBox, items) {
		var $self = this;
		$.ig.CPPopupListManager.prototype.init.call(this, 0, searchBox, clonedSearchBox, false, null, 1, items, $.ig.CPPopupPosition.prototype.below, true, null, $.ig.NativeUIUtility.prototype.utility().densify(500), searchBox.currentWidth());
		this.hideArrow(true);
		this.__blackoutAreas = new $.ig.Array();
		for (var i = 0; i < 4; i++) {
			var bov = new $.ig.CPPopupContainerBackgroundView();
			bov.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(0, 0, 0, 0));
			bov.addClickHandler(function (x, y) {
				$self.onBlackoutAreaClicked();
			});
			this.__blackoutAreas.add(bov);
		}
	},
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPSearchPopupManager::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		var commands = $.ig.CPPopupListManager.prototype.getSupportedKeyCommands.call(this);
		commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
			$self.enterPressed();
		}));
		return commands;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPSearchPopupManager::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::EnterPressed()" />*/
	enterPressed: function () {
		this.searchBox().enterPressed();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::EnterPressed()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::OnBlackoutAreaClicked()" />*/
	onBlackoutAreaClicked: function () {
		this.closePopup(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::OnBlackoutAreaClicked()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchPopupManager::ManuallyHandleCaptureView()" />*/
	manuallyHandleCaptureView: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchPopupManager::ManuallyHandleCaptureView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchPopupManager::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchPopupManager::SupportsAnimating()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPSearchBox Infragistics.CPSearchPopupManager::SearchBox()" />*/
	searchBox: function () {
		return (this.captureView());
	}
	/*<EndProperty Name="Infragistics.CPSearchBox Infragistics.CPSearchPopupManager::SearchBox()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::FinishedShowing()" />*/
	finishedShowing: function () {
		$.ig.CPPopupListManager.prototype.finishedShowing.call(this);
		(this.captureView()).textView().setFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::FinishedShowing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPSearchPopupManager::CornerRadius()" />*/
	cornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPSearchPopupManager::CornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::CleanUp()" />*/
	cleanUp: function () {
		$.ig.CPPopupListManager.prototype.cleanUp.call(this);
		(this.captureView()).textView().clearFocus();
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::CleanUp()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::AddCaptureView(Infragistics.CPPopupContainerView)" />*/
	addCaptureView: function (popup) {
		this.__captureContainer = new $.ig.CPView();
		this.__captureContainer.setCornerRadius(this.cornerRadius());
		this.__captureContainer.setBorderWidth($.ig.ThemeManager.prototype.theme().borderWidth1());
		this.__captureContainer.setBorderColor($.ig.ThemeManager.prototype.theme().dividerColorOverMain().$native());
		this.__captureContainer.clipToBounds(true);
		popup.addSubview(this.__captureContainer);
		this.__captureContainer.addSubview(this.captureView());
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::AddCaptureView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::AddContainerView(Infragistics.CPPopupContainerView)" />*/
	addContainerView: function (popup) {
		this.__captureContainer.addSubview(this.containerView());
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::AddContainerView(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPSearchPopupManager::ContainerCornerRadius()" />*/
	containerCornerRadius: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPSearchPopupManager::ContainerCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchPopupManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchPopupManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPSearchPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPSearchPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	show: function (popup) {
		for (var i = 0; i < this.__blackoutAreas.length; i++) {
			popup.addSubview(this.__blackoutAreas[i]);
		}
		$.ig.UIUtility.prototype.setAccessibilityName1(popup, "searchResultPopup");
		$.ig.CPPopupListManager.prototype.show.call(this, popup);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::Show(Infragistics.CPPopupContainerView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	layoutPopup: function (popup, root, w, h) {
		$.ig.CPPopupListManager.prototype.layoutPopup.call(this, popup, root, w, h);
		var opacity = 1;
		if (this.searchBox().disableBlackoutArea()) {
			popup.measureView1(this.__blackoutAreas[0], 0, 0, 0, 0, 0);
			popup.measureView1(this.__blackoutAreas[1], 0, 0, 0, 0, 0);
			popup.measureView1(this.__blackoutAreas[2], 0, 0, 0, 0, 0);
			popup.measureView1(this.__blackoutAreas[3], 0, 0, 0, 0, 0);
		} else {
			var parentView = this.searchBox().blackoutView();
			var daPt = parentView.translatePoint(new $.ig.CPPoint(0, 0), popup);
			var daX = $.ig.truncate(daPt._x);
			var daY = $.ig.truncate(daPt._y);
			var daW = parentView.currentWidth();
			var daH = parentView.currentHeight();
			popup.measureView1(this.__blackoutAreas[0], daX, 0, daW, daY, opacity);
			popup.measureView1(this.__blackoutAreas[1], daX + daW, 0, w - (daX + daW), h, opacity);
			popup.measureView1(this.__blackoutAreas[2], daX, daY + daH, daW, h - (daY + daH), opacity);
			popup.measureView1(this.__blackoutAreas[3], 0, 0, daX, h, opacity);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::LayoutPopup(Infragistics.CPPopupContainerView, Infragistics.CPViewBase, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::LayoutCaptureView(Infragistics.CPPopupContainerView)" />*/
	layoutCaptureView: function (popup) {
		var w = this._relativeView.currentWidth();
		var h = this._relativeView.currentHeight();
		var rp = this._relativeView.translatePoint(new $.ig.CPPoint(0, 0), popup);
		this.__captureContainer.measureView1(this.captureView(), 0, 0, w, h, 1);
		popup.measureView1(this.__captureContainer, $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h + this.__containerHeight, 1);
		this.ensureContainerSizesAreUpdated(w, this.__containerHeight);
		this.__captureContainer.measureView1(this.containerView(), 0, h, w, this.__containerHeight, 1);
		popup.measureView1(this.shadowView(), $.ig.truncate(rp._x), $.ig.truncate(rp._y), w, h + this.__containerHeight, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::LayoutCaptureView(Infragistics.CPPopupContainerView)" />*/
	,
	__containerHeight: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPSearchPopupManager::MeasureContainer(Infragistics.CPPopupContainerView, System.Boolean, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	measureContainer: function (popup, hiddenLocation, x, y, w, h, opacity) {
		this.__containerHeight = h;
	}
	/*<EndMethod Name="System.Void Infragistics.CPSearchPopupManager::MeasureContainer(Infragistics.CPPopupContainerView, System.Boolean, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)" />*/
	,
	$type: new $.ig.Type('CPSearchPopupManager', $.ig.CPPopupListManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPSearchPopupManager" />*/

/*<BeginType Name="Infragistics.CPTextViewKeyboardDelegate" />*/

$.ig.util.defType('CPTextViewKeyboardDelegate', 'Object', {
	$type: new $.ig.Type('CPTextViewKeyboardDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPTextViewKeyboardDelegate" />*/

/*<BeginType Name="Infragistics.CPTextViewManager" />*/

$.ig.util.defType('CPTextViewManager', 'Object', {
	__groups: null,
	__textViews: null,
	__activeTextView: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__groups = new $.ig.Dictionary(0);
		this.__textViews = new $.ig.Dictionary(0);
	},
	/*<BeginProperty Name="Infragistics.CPTextViewManager Infragistics.CPTextViewManager::Manager()" />*/
	manager: function () {
		if ($.ig.CPTextViewManager.prototype.__manager == null) {
			$.ig.CPTextViewManager.prototype.__manager = new $.ig.CPTextViewManager();
			$.ig.NativeCPTextViewManager.prototype.setup();
		}
		return $.ig.CPTextViewManager.prototype.__manager;
	}
	/*<EndProperty Name="Infragistics.CPTextViewManager Infragistics.CPTextViewManager::Manager()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPTextView Infragistics.CPTextViewManager::GetNextTextView(Infragistics.CPTextView)" />*/
	getNextTextView: function (currentTextView) {
		if (currentTextView.textViewGroup() != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.CPTextViewManager.prototype.manager().__groups, currentTextView.textViewGroup())) {
			var group = $.ig.CPTextViewManager.prototype.manager().__groups.item(currentTextView.textViewGroup());
			var index = group.indexOf(currentTextView.textViewRegistrationId());
			if (index != -1 && group.length > index + 1) {
				var nextTextViewId = group[index + 1];
				return $.ig.CPTextViewManager.prototype.manager().__textViews.item(nextTextViewId);
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPTextView Infragistics.CPTextViewManager::GetNextTextView(Infragistics.CPTextView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewManager::Register(Infragistics.CPTextView, System.String)" />*/
	register: function (textView, group) {
		$.ig.CPTextViewManager.prototype.unregisterTextView(textView);
		if (group == null) {
			group = $.ig.NativeStringUtility.prototype.generateUID();
		}
		var textViewId = $.ig.NativeStringUtility.prototype.generateUID();
		textView.textViewRegistrationId(textViewId);
		textView.textViewGroup(group);
		var manager = $.ig.CPTextViewManager.prototype.manager();
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(manager.__groups, group)) {
			manager.__groups.item(group, new $.ig.Array());
		}
		var textViews = manager.__groups.item(group);
		textViews.add(textViewId);
		manager.__textViews.item(textViewId, textView);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewManager::Register(Infragistics.CPTextView, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewManager::UnregisterGroup(System.String)" />*/
	unregisterGroup: function (group) {
		if (group != null) {
			var manager = $.ig.CPTextViewManager.prototype.manager();
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(manager.__groups, group)) {
				var textViews = manager.__groups.item(group);
				for (var i = 0; i < textViews.length; i++) {
					var textViewId = textViews[i];
					var textView = manager.__textViews.item(textViewId);
					textView.textViewGroup(null);
					textView.textViewRegistrationId(null);
					$.ig.NativeDictionaryUtility.prototype.removeValue(manager.__textViews, textViewId);
				}
				$.ig.NativeDictionaryUtility.prototype.removeValue(manager.__groups, group);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewManager::UnregisterGroup(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewManager::UnregisterTextView(Infragistics.CPTextView)" />*/
	unregisterTextView: function (textView) {
		var textViewId = textView.textViewRegistrationId();
		if (textViewId != null) {
			var manager = $.ig.CPTextViewManager.prototype.manager();
			var group = textView.textViewGroup();
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(manager.__groups, group)) {
				var textViews = manager.__groups.item(group);
				textViews.removeItem(textViewId);
				if (textViews.length == 0) {
					$.ig.NativeDictionaryUtility.prototype.removeValue(manager.__groups, group);
				}
			}
			$.ig.NativeDictionaryUtility.prototype.removeValue(manager.__textViews, textViewId);
			textView.textViewRegistrationId(null);
			textView.textViewGroup(null);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewManager::UnregisterTextView(Infragistics.CPTextView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewManager::GotFocus(Infragistics.CPTextView)" />*/
	gotFocus: function (textView) {
		$.ig.CPTextViewManager.prototype.manager().__activeTextView = textView.textViewRegistrationId();
		if ($.ig.CPTextViewManager.prototype.manager().__activeTextView != null) {
			$.ig.NativeCPTextViewManager.prototype.textViewGotFocus(textView);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewManager::GotFocus(Infragistics.CPTextView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextViewManager::LostFocus(Infragistics.CPTextView)" />*/
	lostFocus: function (textView) {
		var manager = $.ig.CPTextViewManager.prototype.manager();
		if (textView.textViewRegistrationId() != null && manager.__activeTextView != null) {
			if (textView.textViewRegistrationId() == manager.__activeTextView) {
				manager.__activeTextView = null;
				$.ig.NativeCPTextViewManager.prototype.textViewLostFocus(textView);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextViewManager::LostFocus(Infragistics.CPTextView)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPTextView Infragistics.CPTextViewManager::CurrentlyFocusedTextView()" />*/
	currentlyFocusedTextView: function () {
		var manager = $.ig.CPTextViewManager.prototype.manager();
		if (manager.__activeTextView != null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(manager.__textViews, manager.__activeTextView)) {
				return manager.__textViews.item(manager.__activeTextView);
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPTextView Infragistics.CPTextViewManager::CurrentlyFocusedTextView()" />*/
	,
	$type: new $.ig.Type('CPTextViewManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextViewManager" />*/

/*<BeginType Name="Infragistics.CPTextDetectorBase" />*/

$.ig.util.defType('CPTextDetectorBase', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextDetectorBase::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextDetectorBase::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextDetectorBase::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextDetectorBase::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPTextDetectorBase::GetDetectorType()" />*/
	getDetectorType: function () {
	}
	/*<EndMethod Name="System.String Infragistics.CPTextDetectorBase::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextDetectorBase::MatchedWordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	matchedWordLocationChanged: function (word) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextDetectorBase::MatchedWordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextDetectorBase::MatchedWordNoLongerMatched(Infragistics.CPTextTrackerWord)" />*/
	matchedWordNoLongerMatched: function (word) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextDetectorBase::MatchedWordNoLongerMatched(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextDetectorBase::Reset()" />*/
	reset: function () {
		this.fullStylingInvalidationNeeded(false);
		this.wordToRemoveId(null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextDetectorBase::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextDetectorBase::Cleanup()" />*/
	cleanup: function () {
		this.reset();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextDetectorBase::Cleanup()" />*/
	,
	_fullStylingInvalidationNeeded: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextDetectorBase::FullStylingInvalidationNeeded()" />*/
	fullStylingInvalidationNeeded: function (value) {
		if (arguments.length === 1) {
			this._fullStylingInvalidationNeeded = value;
			return value;
		} else {
			return this._fullStylingInvalidationNeeded;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextDetectorBase::FullStylingInvalidationNeeded()" />*/
	,
	_wordToRemoveId: null,
	/*<BeginProperty Name="System.String Infragistics.CPTextDetectorBase::WordToRemoveId()" />*/
	wordToRemoveId: function (value) {
		if (arguments.length === 1) {
			this._wordToRemoveId = value;
			return value;
		} else {
			return this._wordToRemoveId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextDetectorBase::WordToRemoveId()" />*/
	,
	$type: new $.ig.Type('CPTextDetectorBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextDetectorBase" />*/

/*<BeginType Name="Infragistics.CPTextCurlyBraceDetector" />*/

$.ig.util.defType('CPTextCurlyBraceDetector', 'CPTextDetectorBase', {
	init: function () {
		$.ig.CPTextDetectorBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.CPTextCurlyBraceDetector::GetDetectorType()" />*/
	getDetectorType: function () {
		return $.ig.CPTextCurlyBraceDetector.prototype.typeName;
	}
	/*<EndMethod Name="System.String Infragistics.CPTextCurlyBraceDetector::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextCurlyBraceDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
		return $.ig.NativeStringUtility.prototype.contains(val, "{") && $.ig.NativeStringUtility.prototype.contains(val, "}");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextCurlyBraceDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextCurlyBraceDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
		var start = $.ig.NativeStringUtility.prototype.indexOf(val, "{");
		var end = 0;
		var openBrace = false;
		if (start >= 0) {
			for (var i = start; i < val.length; i++) {
				var cur = $.ig.NativeStringUtility.prototype.charAt(val, i);
				if (cur == '{') {
					start = i;
					openBrace = true;
				}
				if (cur == '}' && openBrace) {
					end = i;
					var style = new $.ig.CPRichTextStylingBlock();
					style.textColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().color());
					word.addStyle1(style, start, end + 1);
					openBrace = false;
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextCurlyBraceDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	$type: new $.ig.Type('CPTextCurlyBraceDetector', $.ig.CPTextDetectorBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextCurlyBraceDetector" />*/

/*<BeginType Name="Infragistics.CPTextDetectorMatchDelegate" />*/

$.ig.util.defType('CPTextDetectorMatchDelegate', 'Object', {
	$type: new $.ig.Type('CPTextDetectorMatchDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPTextDetectorMatchDelegate" />*/

/*<BeginType Name="Infragistics.CPTextEmailDetector" />*/

$.ig.util.defType('CPTextEmailDetector', 'CPTextDetectorBase', {
	init: function () {
		$.ig.CPTextDetectorBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.CPTextEmailDetector::GetDetectorType()" />*/
	getDetectorType: function () {
		return $.ig.CPTextEmailDetector.prototype.typeName;
	}
	/*<EndMethod Name="System.String Infragistics.CPTextEmailDetector::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextEmailDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
		return $.ig.CPStringUtility.prototype.isValidEmailAddress(val);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextEmailDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextEmailDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
		var style = new $.ig.CPRichTextStylingBlock();
		style.textColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().color());
		style.hREFVal("mailto:" + val);
		style.action(function () {
			$.ig.NativeUIUtility.prototype.utility().openUrl("mailto:" + val);
		});
		return style;
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextEmailDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	$type: new $.ig.Type('CPTextEmailDetector', $.ig.CPTextDetectorBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextEmailDetector" />*/

/*<BeginType Name="Infragistics.CPTextMetaDataDetector" />*/

$.ig.util.defType('CPTextMetaDataDetector', 'CPTextDetectorBase', {
	__metaDataLookup: null,
	__cachedList: null,
	init: function () {
		$.ig.CPTextDetectorBase.prototype.init.call(this);
		this.__metaDataLookup = new $.ig.Dictionary(0);
		this.__cachedList = new $.ig.Array();
	},
	/*<BeginMethod Name="System.String Infragistics.CPTextMetaDataDetector::GetDetectorType()" />*/
	getDetectorType: function () {
		return $.ig.CPTextMetaDataDetector.prototype.typeName;
	}
	/*<EndMethod Name="System.String Infragistics.CPTextMetaDataDetector::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextMetaDataDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
		if (this.__metaDataLookup.count() > 0) {
			var item = this.getItemForWord(word);
			if (item != null) {
				if (this.itemMatches(item, val)) {
					if (val.length > item.length()) {
						item.modified(true);
					}
					return true;
				} else {
					this.removeMetadataForWord(word, val.length >= item.value().length);
				}
			} else {
				var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__metaDataLookup);
				for (var i = 0; i < keys.length; i++) {
					var key = keys[i];
					item = this.__metaDataLookup.item(key);
					if (word.start() == item.start()) {
						if (this.itemMatches(item, val)) {
							word.detectorTag(item.identifier());
							return true;
						}
					}
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextMetaDataDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextMetaDataDetector::ItemMatches(Infragistics.CPTextMetaData, System.String)" />*/
	itemMatches: function (item, value) {
		if (item.groupCount() == 1) {
			return $.ig.NativeStringUtility.prototype.contains(value, item.value());
		} else if (item.groupIndex() == 0) {
			return $.ig.NativeStringUtility.prototype.endsWith(value, item.value());
		} else if (item.groupIndex() == item.groupCount() - 1) {
			return $.ig.NativeStringUtility.prototype.startsWith(value, item.value());
		} else {
			return item.value() == value;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextMetaDataDetector::ItemMatches(Infragistics.CPTextMetaData, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::MatchedWordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	matchedWordLocationChanged: function (word) {
		$.ig.CPTextDetectorBase.prototype.matchedWordLocationChanged.call(this, word);
		var item = this.getItemForWord(word);
		if (item != null) {
			item.start(word.start());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::MatchedWordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextMetaDataDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
		var style = new $.ig.CPRichTextStylingBlock();
		var item = this.getItemForWord(word);
		if (item != null) {
			if (item.colorToUse() == null) {
				style.textColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().color());
			} else {
				style.textColor(item.colorToUse().color());
				style.bold(true);
			}
			var index = $.ig.NativeStringUtility.prototype.indexOf(val, item.value());
			style.startOffset(index);
			style.endOffset(index + item.value().length);
		}
		return style;
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextMetaDataDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::MatchedWordNoLongerMatched(Infragistics.CPTextTrackerWord)" />*/
	matchedWordNoLongerMatched: function (word) {
		$.ig.CPTextDetectorBase.prototype.matchedWordNoLongerMatched.call(this, word);
		this.removeMetadataForWord(word, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::MatchedWordNoLongerMatched(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::RemoveMetadataForWord(Infragistics.CPTextTrackerWord, System.Boolean)" />*/
	removeMetadataForWord: function (word, removeGroup) {
		var item = this.getItemForWord(word);
		if (item != null) {
			$.ig.NativeDictionaryUtility.prototype.removeValue(this.__metaDataLookup, item.identifier());
			if (!removeGroup && !item.modified()) {
				this.wordToRemoveId(word.identifier());
			}
			if (item.groupId() != null && item.groupCount() > 1) {
				var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__metaDataLookup);
				for (var i = 0; i < keys.length; i++) {
					var key = keys[i];
					var sibling = this.__metaDataLookup.item(key);
					if (item.groupId() == sibling.groupId()) {
						if (removeGroup) {
							this.fullStylingInvalidationNeeded(true);
							$.ig.NativeDictionaryUtility.prototype.removeValue(this.__metaDataLookup, sibling.identifier());
						} else {
							if (item.groupIndex() < sibling.groupIndex()) {
								sibling.groupIndex(sibling.groupIndex() - 1);
							}
							sibling.groupCount(sibling.groupCount() - 1);
						}
					}
				}
			}
			this.updateCachedList();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::RemoveMetadataForWord(Infragistics.CPTextTrackerWord, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPTextMetaData Infragistics.CPTextMetaDataDetector::GetItemForWord(Infragistics.CPTextTrackerWord)" />*/
	getItemForWord: function (word) {
		if (word.detectorTag() != null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__metaDataLookup, word.detectorTag())) {
				return this.__metaDataLookup.item(word.detectorTag());
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPTextMetaData Infragistics.CPTextMetaDataDetector::GetItemForWord(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::AddMetaDataGroup(Infragistics.CPList)" />*/
	addMetaDataGroup: function (metaData) {
		var groupId = $.ig.NativeStringUtility.prototype.generateUID();
		var count = metaData.length;
		for (var i = 0; i < count; i++) {
			var item = metaData[i];
			item.identifier($.ig.NativeStringUtility.prototype.generateUID());
			item.groupIndex(i);
			item.groupCount(count);
			item.groupId(groupId);
			this.__metaDataLookup.item(item.identifier(), item);
			this.__cachedList.add(item);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::AddMetaDataGroup(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::SetMetaData(Infragistics.CPList)" />*/
	setMetaData: function (metaData) {
		this.clearMetaData();
		for (var i = 0; i < metaData.length; i++) {
			var item = metaData[i];
			this.__cachedList.add(item);
			this.__metaDataLookup.item(item.identifier(), item);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::SetMetaData(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::ClearMetaData()" />*/
	clearMetaData: function () {
		this.__metaDataLookup = new $.ig.Dictionary(0);
		this.__cachedList.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::ClearMetaData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::Cleanup()" />*/
	cleanup: function () {
		$.ig.CPTextDetectorBase.prototype.cleanup.call(this);
		this.clearMetaData();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::Cleanup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextMetaDataDetector::UpdateCachedList()" />*/
	updateCachedList: function () {
		this.__cachedList.clear();
		var keys = $.ig.NativeDictionaryUtility.prototype.getKeys(this.__metaDataLookup);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			this.__cachedList.add(this.__metaDataLookup.item(key));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextMetaDataDetector::UpdateCachedList()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextMetaDataDetector::ResolveMetaData()" />*/
	resolveMetaData: function () {
		return this.__cachedList;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextMetaDataDetector::ResolveMetaData()" />*/
	,
	$type: new $.ig.Type('CPTextMetaDataDetector', $.ig.CPTextDetectorBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextMetaDataDetector" />*/

/*<BeginType Name="Infragistics.CPTextMetaData" />*/

$.ig.util.defType('CPTextMetaData', 'BackingStoreObjectBase', {
	init: function (initNumber, value, trackingRange, metaData) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.BackingStoreObjectBase.prototype.init.call(this, 0);
		this.value(value);
		this.start(trackingRange._location);
		this.length(trackingRange._length);
		this.metaData(metaData);
	},
	init1: function (initNumber, json) {
		$.ig.BackingStoreObjectBase.prototype.init1.call(this, 1, json);
	},
	_modified: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextMetaData::Modified()" />*/
	modified: function (value) {
		if (arguments.length === 1) {
			this._modified = value;
			return value;
		} else {
			return this._modified;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextMetaData::Modified()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTextMetaData::Identifier()" />*/
	identifier: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("id", value);
			return value;
		} else {
			return this.resolveStringForKey("id");
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextMetaData::Identifier()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTextMetaData::GroupId()" />*/
	groupId: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("gid", value);
			return value;
		} else {
			return this.resolveStringForKey("gid");
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextMetaData::GroupId()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextMetaData::GroupIndex()" />*/
	groupIndex: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("gi", value);
			return value;
		} else {
			return this.resolveIntegerForKey("gi");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextMetaData::GroupIndex()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextMetaData::GroupCount()" />*/
	groupCount: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("gc", value);
			return value;
		} else {
			return this.resolveIntegerForKey("gc");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextMetaData::GroupCount()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTextMetaData::Value()" />*/
	value: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("v", value);
			return value;
		} else {
			return this.resolveStringForKey("v");
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextMetaData::Value()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextMetaData::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("s", value);
			return value;
		} else {
			return this.resolveIntegerForKey("s");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextMetaData::Start()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextMetaData::Length()" />*/
	length: function (value) {
		if (arguments.length === 1) {
			this.setValueForKey("l", value);
			return value;
		} else {
			return this.resolveIntegerForKey("l");
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextMetaData::Length()" />*/
	,
	_colorToUse: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTextMetaData::ColorToUse()" />*/
	colorToUse: function (value) {
		if (arguments.length === 1) {
			this._colorToUse = value;
			return value;
		} else {
			return this._colorToUse;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTextMetaData::ColorToUse()" />*/
	,
	__metaData: null,
	/*<BeginProperty Name="Infragistics.CPJSONObject Infragistics.CPTextMetaData::MetaData()" />*/
	metaData: function (value) {
		if (arguments.length === 1) {
			if (value != null) {
				this.setJSONForKey("m", value);
			} else {
				this.removeForKey("m");
			}
			this.__metaData = null;
			return value;
		} else {
			if (this.__metaData == null) {
				if (this.containsKey("m")) {
					this.__metaData = this.resolveJSONForKey("m");
				}
			}
			return this.__metaData;
		}
	}
	/*<EndProperty Name="Infragistics.CPJSONObject Infragistics.CPTextMetaData::MetaData()" />*/
	,
	$type: new $.ig.Type('CPTextMetaData', $.ig.BackingStoreObjectBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextMetaData" />*/

/*<BeginType Name="Infragistics.CPTextPhoneNumberDetector" />*/

$.ig.util.defType('CPTextPhoneNumberDetector', 'CPTextDetectorBase', {
	init: function () {
		$.ig.CPTextDetectorBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.CPTextPhoneNumberDetector::GetDetectorType()" />*/
	getDetectorType: function () {
		return $.ig.CPTextPhoneNumberDetector.prototype.typeName;
	}
	/*<EndMethod Name="System.String Infragistics.CPTextPhoneNumberDetector::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextPhoneNumberDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
		return $.ig.NativeStringUtility.prototype.isValidPhoneNumber(val);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextPhoneNumberDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextPhoneNumberDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
		var style = new $.ig.CPRichTextStylingBlock();
		style.textColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().color());
		style.hREFVal("tel:" + val);
		style.action(function () {
			$.ig.NativeUIUtility.prototype.utility().openUrl("tel:" + val);
		});
		return style;
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextPhoneNumberDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	$type: new $.ig.Type('CPTextPhoneNumberDetector', $.ig.CPTextDetectorBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextPhoneNumberDetector" />*/

/*<BeginType Name="Infragistics.CPTextURLDetector" />*/

$.ig.util.defType('CPTextURLDetector', 'CPTextDetectorBase', {
	init: function () {
		$.ig.CPTextDetectorBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.CPTextURLDetector::GetDetectorType()" />*/
	getDetectorType: function () {
		return $.ig.CPTextURLDetector.prototype.typeName;
	}
	/*<EndMethod Name="System.String Infragistics.CPTextURLDetector::GetDetectorType()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextURLDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	isMatch: function (word, val) {
		if ($.ig.CPStringUtility.prototype.isNullOrEmpty(val) || val.length < 5 || $.ig.NativeStringUtility.prototype.indexOf(val, ".") == -1) {
			return false;
		}
		return $.ig.CPTextURLDetector.prototype.isValidUrl(val) || $.ig.CPStringUtility.prototype.isWWWUrlWithNoScheme(val);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextURLDetector::IsMatch(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextURLDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	createStyle: function (word, val) {
		var style = new $.ig.CPRichTextStylingBlock();
		style.textColor($.ig.ThemeManager.prototype.theme().accentColorTextOnly().color());
		val = $.ig.CPStringUtility.prototype.ensureSchemeForWWWUrl(val);
		if ($.ig.NativeStringUtility.prototype.endsWith(val, ".")) {
			val = $.ig.NativeStringUtility.prototype.substring(val, 0, val.length - 1);
		}
		var url = val;
		style.hREFVal(url);
		style.action(function () {
			$.ig.UIUtility.prototype.openUrl(url);
		});
		return style;
	}
	/*<EndMethod Name="Infragistics.CPRichTextStylingBlock Infragistics.CPTextURLDetector::CreateStyle(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextURLDetector::IsValidUrl(System.String)" />*/
	isValidUrl: function (url) {
		return $.ig.NativeStringUtility.prototype.isValidUrl(url);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextURLDetector::IsValidUrl(System.String)" />*/
	,
	$type: new $.ig.Type('CPTextURLDetector', $.ig.CPTextDetectorBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextURLDetector" />*/

/*<BeginType Name="Infragistics.CPLiveInputProcessor" />*/

$.ig.util.defType('CPLiveInputProcessor', 'Object', {
	__characterChain: null,
	__triggerChar: null,
	init: function (triggerString) {
		$.ig.Object.prototype.init.call(this);
		this.__characterChain = new $.ig.Array();
		var count = triggerString.length;
		for (var i = 0; i < count - 1; i++) {
			this.__characterChain.add($.ig.NativeStringUtility.prototype.substring(triggerString, i, 1));
		}
		this.__triggerChar = $.ig.NativeStringUtility.prototype.substring(triggerString, count - 1, 1);
	},
	/*<BeginProperty Name="System.String Infragistics.CPLiveInputProcessor::TriggerChar()" />*/
	triggerChar: function () {
		return this.__triggerChar;
	}
	/*<EndProperty Name="System.String Infragistics.CPLiveInputProcessor::TriggerChar()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPLiveInputProcessor::CharacterChain()" />*/
	characterChain: function () {
		return this.__characterChain;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPLiveInputProcessor::CharacterChain()" />*/
	,
	__editor: null,
	/*<BeginProperty Name="Infragistics.CPTextProcessorView Infragistics.CPLiveInputProcessor::Editor()" />*/
	editor: function (value) {
		if (arguments.length === 1) {
			this.__editor = value;
			return value;
		} else {
			return this.__editor;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextProcessorView Infragistics.CPLiveInputProcessor::Editor()" />*/
	,
	_matchStartLocation: 0,
	/*<BeginMethod Name="System.Boolean Infragistics.CPLiveInputProcessor::Match(System.String, System.Int32)" />*/
	match: function (fullText, cursorPosition) {
		var chainCount = this.__characterChain.length;
		if (cursorPosition > chainCount) {
			var currentLoc = cursorPosition - 1;
			var match = true;
			for (var j = chainCount - 1; j >= 0; j--) {
				currentLoc -= 1;
				var prevChar = $.ig.NativeStringUtility.prototype.substring(fullText, currentLoc, 1);
				if (!prevChar.equals(this.__characterChain[j])) {
					match = false;
					break;
				}
			}
			this._matchStartLocation = currentLoc;
			return match;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPLiveInputProcessor::Match(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	performAction: function (fullText, cursorPosition, tracker) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLiveInputProcessor::SupportsCapture()" />*/
	supportsCapture: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLiveInputProcessor::SupportsCapture()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::ContinueCapture(System.String, System.Int32)" />*/
	continueCapture: function (fullText, cursorPosition) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::ContinueCapture(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::CancelCapture()" />*/
	cancelCapture: function () {
		this.endCapture();
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::CancelCapture()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::CaptureBestMatch(System.String, System.Int32)" />*/
	captureBestMatch: function (fullText, cursorPosition) {
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::CaptureBestMatch(System.String, System.Int32)" />*/
	,
	__captureEndedBlock: null,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::StartCapture(Infragistics.ExecutionBlock)" />*/
	startCapture: function (captureEnded) {
		this.__captureEndedBlock = captureEnded;
		this.__isCaptureInactive = false;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::StartCapture(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::EndCapture()" />*/
	endCapture: function () {
		if (this.__captureEndedBlock != null) {
			this.__captureEndedBlock();
			this.__captureEndedBlock = null;
			this.__isCaptureInactive = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::EndCapture()" />*/
	,
	__isCaptureInactive: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLiveInputProcessor::IsCaptureInactive()" />*/
	isCaptureInactive: function () {
		return this.__isCaptureInactive;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLiveInputProcessor::IsCaptureInactive()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::MarkCaptureInactive()" />*/
	markCaptureInactive: function () {
		if (this.__captureEndedBlock != null) {
			this.__isCaptureInactive = true;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::MarkCaptureInactive()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputProcessor::MarkCaptureActive()" />*/
	markCaptureActive: function () {
		if (this.__captureEndedBlock != null) {
			this.__isCaptureInactive = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputProcessor::MarkCaptureActive()" />*/
	,
	$type: new $.ig.Type('CPLiveInputProcessor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLiveInputProcessor" />*/

/*<BeginType Name="Infragistics.CPLiveInputListProcessor" />*/

$.ig.util.defType('CPLiveInputListProcessor', 'CPLiveInputProcessor', {
	__popupId: null,
	__getListAction: null,
	__itemSelected: null,
	__tracker: null,
	__metaDataCallback: null,
	init: function (triggerString, getListAction, itemSelectedBlock, meataDataCallback) {
		$.ig.CPLiveInputProcessor.prototype.init.call(this, triggerString);
		this.__getListAction = getListAction;
		this.__itemSelected = itemSelectedBlock;
		this.__metaDataCallback = meataDataCallback;
	},
	__startCursorPos: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	performAction: function (fullText, cursorPosition, tracker) {
		this.__tracker = tracker;
		this.__startCursorPos = cursorPosition;
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	,
	__bestMatch: null,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::UpdateList(Infragistics.CPList)" />*/
	updateList: function (list) {
		var $self = this;
		this.__bestMatch = null;
		for (var i = 0; i < list.length; i++) {
			var item = list[i];
			item._action = function (o) {
				$self.itemSelected(o);
				return true;
			};
			if (i == 0) {
				item._hasFocus = true;
				this.__bestMatch = item._tag;
			}
		}
		if (this.__popupId == null) {
			this.__popupId = $.ig.CPPopupManager.prototype.showList4(this.editor(), null, list, $.ig.CPPopupPosition.prototype.above, null, $.ig.NativeUIUtility.prototype.utility().densify(300), this.editor().currentWidth(), null);
			if (this.__popupId != null) {
				$.ig.CPPopupManager.prototype.subscribeToBeNotifiedWhenPopupCloses(this.__popupId, function () {
					$self.popupClosed();
				});
			}
		} else {
			var manager = $.ig.CPPopupManager.prototype.getPopupManagerById(this.__popupId);
			manager.updateItems(list);
			if (list.length == 0) {
				this.markCaptureInactive();
				$.ig.CPPopupManager.prototype.closePopup(this.__popupId, true);
			} else {
				this.markCaptureActive();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::UpdateList(Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::ItemSelected(System.Object)" />*/
	itemSelected: function (o) {
		var tracker = this.__tracker;
		this.endCapture();
		var displayValue = this.__itemSelected(o);
		var lengthOfOldText = this.characterChain().length + 1;
		var start = this.__currentRangeStart - lengthOfOldText;
		var end = this.__currentRangeEnd - start;
		var metaData = new $.ig.Array();
		var values = $.ig.NativeStringUtility.prototype.split(displayValue, " ");
		var pos = start;
		if (start > 0) {
			var c = $.ig.NativeStringUtility.prototype.charAt(tracker.currentText(), start - 1);
			if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
				displayValue = " " + displayValue;
				pos += 1;
			}
		}
		for (var i = 0; i < values.length; i++) {
			var val = values[i];
			if (val.length > 0) {
				metaData.add(new $.ig.CPTextMetaData(0, val, new $.ig.CPRange(pos, val.length), o));
				pos += val.length + 1;
			}
		}
		if (this.__metaDataCallback != null) {
			this.__metaDataCallback(metaData);
		}
		tracker.replaceText(displayValue, start, end);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::ItemSelected(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::EndCapture()" />*/
	endCapture: function () {
		$.ig.CPLiveInputProcessor.prototype.endCapture.call(this);
		if (this.__popupId != null) {
			$.ig.CPPopupManager.prototype.closePopup(this.__popupId, true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::EndCapture()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::PopupClosed()" />*/
	popupClosed: function () {
		this.__popupId = null;
		if (this.isCaptureInactive()) {
			return;
		}
		this.__tracker = null;
		this.__currentText = null;
		this.endCapture();
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::PopupClosed()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPLiveInputListProcessor::SupportsCapture()" />*/
	supportsCapture: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPLiveInputListProcessor::SupportsCapture()" />*/
	,
	__currentRangeStart: 0,
	__currentRangeEnd: 0,
	__currentText: null,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::ContinueCapture(System.String, System.Int32)" />*/
	continueCapture: function (fullText, cursorPosition) {
		var $self = this;
		if (cursorPosition < this.__startCursorPos) {
			this.cancelCapture();
		} else if (this.__currentText == null || !this.__currentText.equals(fullText)) {
			var endOfTextWithSpace = $.ig.NativeStringUtility.prototype.indexOf1(fullText, " ", this.__startCursorPos);
			var endOfTextWithNewLine = $.ig.NativeStringUtility.prototype.indexOf1(fullText, "\n", this.__startCursorPos);
			var endOfText = endOfTextWithSpace;
			if (endOfTextWithNewLine != -1 && (endOfText == -1 || endOfText > endOfTextWithNewLine)) {
				endOfText = endOfTextWithNewLine;
				var endOfTextCarriageReturn = $.ig.NativeStringUtility.prototype.indexOf1(fullText, "\r", this.__startCursorPos);
				if (endOfTextCarriageReturn >= this.__startCursorPos && endOfTextCarriageReturn == endOfTextWithNewLine - 1) {
					endOfText = endOfTextCarriageReturn;
				}
			}
			if (endOfText == -1) {
				endOfText = fullText.length;
			}
			if (cursorPosition > endOfText) {
				this.cancelCapture();
				return;
			}
			this.__currentRangeStart = this.__startCursorPos;
			this.__currentRangeEnd = endOfText;
			this.__currentText = fullText;
			var val = $.ig.NativeStringUtility.prototype.substring(fullText, this.__startCursorPos, endOfText - this.__startCursorPos);
			this.__getListAction(val, function (list) {
				$self.updateList(list);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::ContinueCapture(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputListProcessor::CaptureBestMatch(System.String, System.Int32)" />*/
	captureBestMatch: function (fullText, cursorPosition) {
		this.continueCapture(fullText, cursorPosition);
		if (this.__bestMatch != null) {
			this.itemSelected(this.__bestMatch);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputListProcessor::CaptureBestMatch(System.String, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPLiveInputListProcessor', $.ig.CPLiveInputProcessor.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLiveInputListProcessor" />*/

/*<BeginType Name="Infragistics.CPLiveInputReplaceProcessor" />*/

$.ig.util.defType('CPLiveInputReplaceProcessor', 'CPLiveInputProcessor', {
	__replacement: null,
	init: function (triggerString, replacement) {
		$.ig.CPLiveInputProcessor.prototype.init.call(this, triggerString);
		this.__replacement = replacement;
	},
	/*<BeginMethod Name="System.Void Infragistics.CPLiveInputReplaceProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	performAction: function (fullText, cursorPosition, tracker) {
		var chainCount = this.characterChain().length;
		var currentLoc = cursorPosition - (chainCount + 1);
		tracker.replaceText(this.__replacement, currentLoc, chainCount + 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLiveInputReplaceProcessor::PerformAction(System.String, System.Int32, Infragistics.CPTextTracker)" />*/
	,
	$type: new $.ig.Type('CPLiveInputReplaceProcessor', $.ig.CPLiveInputProcessor.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLiveInputReplaceProcessor" />*/

/*<BeginType Name="Infragistics.CPTextTrackerWordProcessorDelegate" />*/

$.ig.util.defType('CPTextTrackerWordProcessorDelegate', 'Object', {
	$type: new $.ig.Type('CPTextTrackerWordProcessorDelegate', null)
}, true);

/*<EndType Name="Infragistics.CPTextTrackerWordProcessorDelegate" />*/

/*<BeginType Name="Infragistics.CPTextTracker" />*/

$.ig.util.defType('CPTextTracker', 'Object', {
	__wordProcessor: null,
	__detectors: null,
	__detectorLookup: null,
	__inputProcessors: null,
	__editor: null,
	init: function (editor) {
		$.ig.Object.prototype.init.call(this);
		this.__editor = editor;
		this.__text = "";
		this.__lastText = "";
		this.__cursorPos = 0;
		this.__selectionLength = 0;
		this.__wordProcessor = new $.ig.CPTextTrackerWordProcessor();
		this.__wordProcessor.wordTrackingDelegate(this);
		this.__detectors = new $.ig.Array();
		this.__detectorLookup = new $.ig.Dictionary(0);
		this.__inputProcessors = new $.ig.Dictionary(0);
	},
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::SetText(System.Int32, System.Int32, System.String)" />*/
	setText: function (cursorPos, selectionLength, text) {
		this.__wordProcessor.clear();
		this.__text = text;
		this.__lastText = text;
		this.__cursorPos = cursorPos;
		this.__selectionLength = selectionLength;
		this.textAdded(0, this.__text, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::SetText(System.Int32, System.Int32, System.String)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTextTracker::CurrentText()" />*/
	currentText: function () {
		return this.__text;
	}
	/*<EndProperty Name="System.String Infragistics.CPTextTracker::CurrentText()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTracker::CurrentCursorPos()" />*/
	currentCursorPos: function () {
		return this.__cursorPos;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTracker::CurrentCursorPos()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTracker::CurrentSelectionLength()" />*/
	currentSelectionLength: function () {
		return this.__selectionLength;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTracker::CurrentSelectionLength()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::UpdateCursorPos(System.Int32)" />*/
	updateCursorPos: function (newCursorPos) {
		this.__cursorPos = newCursorPos;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::UpdateCursorPos(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::UpdateSelectionLength(System.Int32)" />*/
	updateSelectionLength: function (newSelectionLength) {
		this.__selectionLength = newSelectionLength;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::UpdateSelectionLength(System.Int32)" />*/
	,
	__text: null,
	__lastText: null,
	__cursorPos: 0,
	__selectionLength: 0,
	__ignoreProcessing: false,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::Update(System.Int32, System.Int32, System.String)" />*/
	update: function (cursorPos, selectionLength, text) {
		var previousText = this.__text;
		var previousCursorPos = this.__cursorPos;
		var prevoiusSelectionLength = this.__selectionLength;
		this.__lastText = this.__text;
		this.__text = text;
		this.__cursorPos = cursorPos;
		this.__selectionLength = selectionLength;
		if (!this.__ignoreProcessing) {
			if (!text.equals(previousText)) {
				if (text.length == 0) {
					this.__wordProcessor.reset(previousText);
				} else if (selectionLength == 0) {
					var selectionDiff = cursorPos - previousCursorPos;
					if (prevoiusSelectionLength > 0) {
						var lengthOfTextRemoved = previousText.length - text.length;
						if (selectionDiff <= 0) {
							if (lengthOfTextRemoved > 0) {
								if (previousCursorPos + lengthOfTextRemoved > previousText.length) {
									var diff = previousCursorPos + lengthOfTextRemoved - previousText.length;
									previousCursorPos -= diff;
								}
								var removedText = $.ig.NativeStringUtility.prototype.substring(previousText, previousCursorPos, lengthOfTextRemoved);
								this.textRemoved(previousCursorPos, removedText);
							} else {
								this.badState();
							}
						} else {
							var removedText1 = $.ig.NativeStringUtility.prototype.substring(previousText, previousCursorPos, prevoiusSelectionLength);
							var replacementText = $.ig.NativeStringUtility.prototype.substring(text, previousCursorPos, selectionDiff);
							this.textReplaced(previousCursorPos, removedText1, replacementText, true);
						}
					} else {
						if (selectionDiff > 0) {
							if (this.__lastText.length == this.__text.length) {
								var newText = $.ig.NativeStringUtility.prototype.substring(this.__text, previousCursorPos, selectionDiff);
								var replacedText = $.ig.NativeStringUtility.prototype.substring(this.__lastText, previousCursorPos, selectionDiff);
								this.textReplaced(previousCursorPos, replacedText, newText, false);
							} else {
								var insertedText = $.ig.NativeStringUtility.prototype.substring(text, previousCursorPos, selectionDiff);
								this.textAdded(previousCursorPos, insertedText, true);
							}
						} else if (selectionDiff < 0) {
							var absVal = Math.abs(selectionDiff);
							var removedText2 = $.ig.NativeStringUtility.prototype.substring(previousText, previousCursorPos - absVal, absVal);
							this.textRemoved(previousCursorPos - absVal, removedText2);
						} else {
							if (text.length == previousText.length - 1 && (previousCursorPos < previousText.length)) {
								var removedText3 = $.ig.NativeStringUtility.prototype.substring(previousText, previousCursorPos, 1);
								this.textRemoved(previousCursorPos, removedText3);
							} else if (text.length > previousText.length) {
								var lengthDiff = text.length - previousText.length;
								var insertedText1 = $.ig.NativeStringUtility.prototype.substring(this.__text, previousCursorPos, lengthDiff);
								this.textAdded(previousCursorPos, insertedText1, true);
							} else {
								this.badState();
							}
						}
					}
				} else {
					var newText1 = $.ig.NativeStringUtility.prototype.substring(this.__text, cursorPos, selectionLength);
					var diff1 = (this.__lastText.length - this.__text.length) + selectionLength;
					if (diff1 >= 0) {
						var replacedText1 = $.ig.NativeStringUtility.prototype.substring(this.__lastText, cursorPos, diff1);
						this.textReplaced(this.__cursorPos, replacedText1, newText1, false);
					} else {
						this.badState();
					}
				}
			}
			if (this.__capturedProcessor != null) {
				this.__capturedProcessor.continueCapture(this.__text, this.__cursorPos);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::Update(System.Int32, System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	replaceText: function (replacementText, startOfExistingText, lengthOfExisting) {
		var updatedText = $.ig.NativeStringUtility.prototype.substring(this.__text, 0, startOfExistingText);
		var oldText = $.ig.NativeStringUtility.prototype.substring(this.__text, startOfExistingText, lengthOfExisting);
		updatedText = updatedText + replacementText;
		var newCursorPos = updatedText.length;
		var endLoc = startOfExistingText + lengthOfExisting;
		updatedText = updatedText + $.ig.NativeStringUtility.prototype.substring(this.__text, endLoc, this.__text.length - endLoc);
		var lastText = this.__text;
		this.__ignoreProcessing = true;
		this.__text = updatedText;
		this.__editor.replaceText(replacementText, startOfExistingText, lengthOfExisting);
		this.__editor.selectText(newCursorPos, 0);
		this.__ignoreProcessing = false;
		this.__cursorPos = newCursorPos;
		this.__selectionLength = 0;
		this.__lastText = lastText;
		this.textReplaced(startOfExistingText, oldText, replacementText, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::ReplaceText(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::InsertText(System.String)" />*/
	insertText: function (text) {
		this.replaceText(text, this.__cursorPos, this.__selectionLength);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::InsertText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::TextRemoved(System.Int32, System.String)" />*/
	textRemoved: function (startPos, removedText) {
		this.__wordProcessor.textRemoved(this.__lastText, this.__text, startPos, removedText.length);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::TextRemoved(System.Int32, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::TextReplaced(System.Int32, System.String, System.String, System.Boolean)" />*/
	textReplaced: function (startPos, previousText, newText, typed) {
		this.__wordProcessor.textReplaced(this.__lastText, this.__text, newText, startPos, previousText.length);
		if (newText.length == 1 && typed) {
			this.processLiveInput(newText);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::TextReplaced(System.Int32, System.String, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::TextAdded(System.Int32, System.String, System.Boolean)" />*/
	textAdded: function (startPos, newText, typed) {
		this.__wordProcessor.textAdded(this.__lastText, this.__text, newText, startPos);
		if (newText.length == 1 && typed) {
			this.processLiveInput(newText);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::TextAdded(System.Int32, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::ProcessLiveInput(System.String)" />*/
	processLiveInput: function (character) {
		if (this.__capturedProcessor == null || this.__capturedProcessor.isCaptureInactive()) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__inputProcessors, character)) {
				var processors = this.__inputProcessors.item(character);
				for (var i = 0; i < processors.length; i++) {
					var processor = processors[i];
					if (processor.match(this.__text, this.__cursorPos)) {
						processor.performAction(this.__text, this.__cursorPos, this);
						if (processor.supportsCapture()) {
							this.startCapture(processor);
						}
						break;
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::ProcessLiveInput(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::AddLiveInputProcessor(Infragistics.CPLiveInputProcessor)" />*/
	addLiveInputProcessor: function (processor) {
		if (!$.ig.NativeDictionaryUtility.prototype.containsKey(this.__inputProcessors, processor.triggerChar())) {
			this.__inputProcessors.item(processor.triggerChar(), new $.ig.Array());
		}
		processor.editor(this.__editor);
		var list = this.__inputProcessors.item(processor.triggerChar());
		list.add(processor);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::AddLiveInputProcessor(Infragistics.CPLiveInputProcessor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::AddDetector(Infragistics.CPTextDetectorBase)" />*/
	addDetector: function (detector) {
		this.__detectors.add(detector);
		this.__detectorLookup.item(detector.getDetectorType(), detector);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::AddDetector(Infragistics.CPTextDetectorBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::ClearDetectors()" />*/
	clearDetectors: function () {
		this.__detectors.clear();
		this.__detectorLookup.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::ClearDetectors()" />*/
	,
	__capturedProcessor: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::StartCapture(Infragistics.CPLiveInputProcessor)" />*/
	startCapture: function (processor) {
		var $self = this;
		processor.startCapture(function () {
			$self.endCapture();
		});
		this.__capturedProcessor = processor;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::StartCapture(Infragistics.CPLiveInputProcessor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::EndCapture()" />*/
	endCapture: function () {
		this.__capturedProcessor = null;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::EndCapture()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextTracker::GetSupportedKeyCommands()" />*/
	getSupportedKeyCommands: function () {
		var $self = this;
		if (this.__capturedProcessor != null && false == this.__capturedProcessor.isCaptureInactive()) {
			var commands = new $.ig.Array();
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.tab), function (k) {
				$self.keyboardTriggeredCapture();
			}));
			commands.add(new $.ig.CPKeyCommand(0, new $.ig.CPKeyCombo(0, $.ig.Key.prototype.enter), function (k) {
				$self.keyboardTriggeredCapture();
			}));
			return commands;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextTracker::GetSupportedKeyCommands()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::KeyboardTriggeredCapture()" />*/
	keyboardTriggeredCapture: function () {
		if (this.__capturedProcessor != null && false == this.__capturedProcessor.isCaptureInactive()) {
			this.__capturedProcessor.captureBestMatch(this.__text, this.__cursorPos);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::KeyboardTriggeredCapture()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::BadState()" />*/
	badState: function () {
		this.__wordProcessor.reset(this.__lastText);
		this.__wordProcessor.textAdded("", this.__text, this.__text, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::BadState()" />*/
	,
	__detectorDelegate: null,
	/*<BeginProperty Name="Infragistics.CPTextDetectorMatchDelegate Infragistics.CPTextTracker::DetectorDelegate()" />*/
	detectorDelegate: function (value) {
		if (arguments.length === 1) {
			this.__detectorDelegate = value;
			return value;
		} else {
			return this.__detectorDelegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextDetectorMatchDelegate Infragistics.CPTextTracker::DetectorDelegate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::NotifyDetectorMatched(System.String, System.String, System.String)" />*/
	notifyDetectorMatched: function (wordId, detectorType, value) {
		if (this.__detectorDelegate != null) {
			this.__detectorDelegate.detectorMatched(wordId, detectorType, value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::NotifyDetectorMatched(System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::NotifyDetectorRemoved(System.String, System.String)" />*/
	notifyDetectorRemoved: function (wordId, detectorType) {
		if (this.__detectorDelegate != null && detectorType != null) {
			this.__detectorDelegate.detectorRemoved(wordId, detectorType);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::NotifyDetectorRemoved(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::WordUpdated(Infragistics.CPTextTrackerWord, System.String)" />*/
	wordUpdated: function (word, value) {
		word.clearStyles();
		var matched = false;
		for (var i = 0; i < this.__detectors.length; i++) {
			var detector = this.__detectors[i];
			if (detector.isMatch(word, value)) {
				var style = detector.createStyle(word, value);
				if (style != null) {
					word.addStyle(style);
				}
				var detectorType = detector.getDetectorType();
				if (word.appliedDetector() != null && !word.appliedDetector().equals(detectorType)) {
					this.detachDetector(word);
				}
				word.appliedDetector(detectorType);
				matched = true;
				break;
			}
		}
		if (matched) {
			this.notifyDetectorMatched(word.identifier(), word.appliedDetector(), value);
		} else if (word.appliedDetector() != null) {
			this.detachDetector(word);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::WordUpdated(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::WordAdded(Infragistics.CPTextTrackerWord, System.String)" />*/
	wordAdded: function (word, value) {
		for (var i = 0; i < this.__detectors.length; i++) {
			var detector = this.__detectors[i];
			if (detector.isMatch(word, value)) {
				var style = detector.createStyle(word, value);
				if (style != null) {
					word.addStyle(style);
				}
				word.appliedDetector(detector.getDetectorType());
				this.notifyDetectorMatched(word.identifier(), word.appliedDetector(), value);
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::WordAdded(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::WordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	wordLocationChanged: function (word) {
		if (word.appliedDetector() != null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__detectorLookup, word.appliedDetector())) {
				var detector = this.__detectorLookup.item(word.appliedDetector());
				detector.matchedWordLocationChanged(word);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::WordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::DetachDetector(Infragistics.CPTextTrackerWord)" />*/
	detachDetector: function (word) {
		if (word.appliedDetector() != null) {
			if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__detectorLookup, word.appliedDetector())) {
				var detector = this.__detectorLookup.item(word.appliedDetector());
				detector.matchedWordNoLongerMatched(word);
			}
		}
		this.notifyDetectorRemoved(word.identifier(), word.appliedDetector());
		word.appliedDetector(null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::DetachDetector(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::WordRemoved(Infragistics.CPTextTrackerWord)" />*/
	wordRemoved: function (word) {
		this.detachDetector(word);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::WordRemoved(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTracker::WordsUpdated(Infragistics.CPList, System.String)" />*/
	wordsUpdated: function (words, newFullText) {
		var recheckStyles = false;
		var wordToRemoveId = null;
		for (var i = 0; i < this.__detectors.length; i++) {
			var detector = this.__detectors[i];
			if (detector.fullStylingInvalidationNeeded()) {
				recheckStyles = true;
			}
			if (detector.wordToRemoveId() != null) {
				wordToRemoveId = detector.wordToRemoveId();
			}
			detector.reset();
		}
		var wordToRemove = null;
		var styles = new $.ig.Array();
		for (var i1 = 0; i1 < words.length; i1++) {
			var word = words[i1];
			if (wordToRemoveId != null && wordToRemoveId == word.identifier()) {
				wordToRemove = word;
			}
			if (recheckStyles) {
				this.wordUpdated(word, word.resolveWord(newFullText));
			}
			var wordStyles = word.getStyles();
			if (wordStyles.length > 0) {
				$.ig.ArrayUtility.prototype.addToCPReadOnlyList(styles, wordStyles);
			}
		}
		if (wordToRemove != null) {
			var newStart = wordToRemove.start();
			this.__cursorPos = newStart + wordToRemove.length();
			this.__selectionLength = 0;
			this.__editor.replaceText("", wordToRemove.start(), wordToRemove.length());
			this.update(newStart, 0, this.__editor.getText());
		} else {
			this.__editor.applyStylingToBlocks(styles);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTracker::WordsUpdated(Infragistics.CPList, System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPTextTracker::Words()" />*/
	words: function () {
		if (null != this.__wordProcessor) {
			return this.__wordProcessor.words();
		}
		return new $.ig.Array();
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPTextTracker::Words()" />*/
	,
	$type: new $.ig.Type('CPTextTracker', $.ig.Object.prototype.$type, [$.ig.CPTextTrackerWordProcessorDelegate.prototype.$type])
}, true);

/*<EndType Name="Infragistics.CPTextTracker" />*/

/*<BeginType Name="Infragistics.CPTextTrackerWord" />*/

$.ig.util.defType('CPTextTrackerWord', 'Object', {
	__styles: null,
	__length: 0,
	__identifier: null,
	init: function (startPos, length, identifier) {
		$.ig.Object.prototype.init.call(this);
		this.start(startPos);
		this.__length = length;
		this.__styles = new $.ig.Array();
		this.__identifier = identifier;
		this.isNew(true);
	},
	__stylesNeedUpdating: false,
	__start: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this.__stylesNeedUpdating = true;
			this.__start = value;
			return value;
		} else {
			return this.__start;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Start()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTextTrackerWord::Identifier()" />*/
	identifier: function () {
		return this.__identifier;
	}
	/*<EndProperty Name="System.String Infragistics.CPTextTrackerWord::Identifier()" />*/
	,
	_index: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Index()" />*/
	index: function (value) {
		if (arguments.length === 1) {
			this._index = value;
			return value;
		} else {
			return this._index;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Index()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Length()" />*/
	length: function () {
		return this.__length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTrackerWord::Length()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWord::UpdateLength(System.Int32)" />*/
	updateLength: function (newValue) {
		this.__stylesNeedUpdating = true;
		this.__length = newValue;
		this.isDirty(true);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWord::UpdateLength(System.Int32)" />*/
	,
	_isDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextTrackerWord::IsDirty()" />*/
	isDirty: function (value) {
		if (arguments.length === 1) {
			this._isDirty = value;
			return value;
		} else {
			return this._isDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextTrackerWord::IsDirty()" />*/
	,
	_isNew: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextTrackerWord::IsNew()" />*/
	isNew: function (value) {
		if (arguments.length === 1) {
			this._isNew = value;
			return value;
		} else {
			return this._isNew;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextTrackerWord::IsNew()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextTrackerWord::SupportsTracking()" />*/
	supportsTracking: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextTrackerWord::SupportsTracking()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTextTrackerWord::End()" />*/
	end: function () {
		return this.start() + this.length();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTextTrackerWord::End()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWord::AddStyle(Infragistics.CPRichTextStylingBlock)" />*/
	addStyle: function (style) {
		style.start(this.start());
		style.end(this.end());
		this.__styles.add(style);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWord::AddStyle(Infragistics.CPRichTextStylingBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWord::AddStyle(Infragistics.CPRichTextStylingBlock, System.Int32, System.Int32)" />*/
	addStyle1: function (style, startOffset, endOffset) {
		style.start(this.start() + startOffset);
		style.end(endOffset == 0 ? this.end() : style.start() + (endOffset - startOffset));
		style.startOffset(startOffset);
		style.endOffset(endOffset);
		this.__styles.add(style);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWord::AddStyle(Infragistics.CPRichTextStylingBlock, System.Int32, System.Int32)" />*/
	,
	_appliedDetector: null,
	/*<BeginProperty Name="System.String Infragistics.CPTextTrackerWord::AppliedDetector()" />*/
	appliedDetector: function (value) {
		if (arguments.length === 1) {
			this._appliedDetector = value;
			return value;
		} else {
			return this._appliedDetector;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextTrackerWord::AppliedDetector()" />*/
	,
	_detectorTag: null,
	/*<BeginProperty Name="System.String Infragistics.CPTextTrackerWord::DetectorTag()" />*/
	detectorTag: function (value) {
		if (arguments.length === 1) {
			this._detectorTag = value;
			return value;
		} else {
			return this._detectorTag;
		}
	}
	/*<EndProperty Name="System.String Infragistics.CPTextTrackerWord::DetectorTag()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWord::ClearStyles()" />*/
	clearStyles: function () {
		this.__styles.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWord::ClearStyles()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWord::GetStyles()" />*/
	getStyles: function () {
		if (this.__stylesNeedUpdating) {
			this.__stylesNeedUpdating = false;
			for (var i = 0; i < this.__styles.length; i++) {
				var style = this.__styles[i];
				style.start(this.start() + style.startOffset());
				style.end(style.endOffset() == 0 ? this.end() : style.start() + (style.endOffset() - style.startOffset()));
			}
		}
		return this.__styles;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWord::GetStyles()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.CPTextTrackerWord::ResolveWord(System.String)" />*/
	resolveWord: function (fullText) {
		return $.ig.NativeStringUtility.prototype.substring(fullText, this.start(), this.length());
	}
	/*<EndMethod Name="System.String Infragistics.CPTextTrackerWord::ResolveWord(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextTrackerWord::SupportsString(System.String)" />*/
	supportsString: function (val) {
		return !$.ig.CPTextTrackerWord.prototype.containsWhiteSpace(val);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextTrackerWord::SupportsString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTextTrackerWord::GetLengthOfCharactersSupportedAtBeginningOfString(System.String)" />*/
	getLengthOfCharactersSupportedAtBeginningOfString: function (val) {
		var count = 0;
		for (var i = 0; i < val.length; i++) {
			var character = $.ig.NativeStringUtility.prototype.substring(val, i, 1);
			if (this.supportsString(character)) {
				count++;
			} else {
				break;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTextTrackerWord::GetLengthOfCharactersSupportedAtBeginningOfString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTextTrackerWord::GetLengthOfCharactersSupportedAtEndOfString(System.String)" />*/
	getLengthOfCharactersSupportedAtEndOfString: function (val) {
		var count = 0;
		for (var i = val.length - 1; i >= 0; i--) {
			var character = $.ig.NativeStringUtility.prototype.substring(val, i, 1);
			if (this.supportsString(character)) {
				count++;
			} else {
				break;
			}
		}
		return count;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTextTrackerWord::GetLengthOfCharactersSupportedAtEndOfString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextTrackerWord::IsWhiteSpace(System.String)" />*/
	isWhiteSpace: function (val) {
		if (val.length == 0) {
			return false;
		}
		for (var i = 0; i < val.length; i++) {
			var character = $.ig.NativeStringUtility.prototype.substring(val, i, 1);
			if (character != " " && character != "\r" && character != "\n" && character != "\t") {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextTrackerWord::IsWhiteSpace(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextTrackerWord::ContainsWhiteSpace(System.String)" />*/
	containsWhiteSpace: function (val) {
		return $.ig.NativeStringUtility.prototype.contains(val, " ") || $.ig.NativeStringUtility.prototype.contains(val, "\r") || $.ig.NativeStringUtility.prototype.contains(val, "\n") || $.ig.NativeStringUtility.prototype.contains(val, "\t");
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextTrackerWord::ContainsWhiteSpace(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPTextTrackerWord Infragistics.CPTextTrackerWord::CreateWord(System.Int32, System.Int32, System.String, System.String)" />*/
	createWord: function (startPos, length, val, wordId) {
		if ($.ig.CPTextTrackerWord.prototype.isWhiteSpace(val)) {
			return new $.ig.CPTextTrackerWhiteSpaceWord(startPos, length, wordId);
		} else {
			return new $.ig.CPTextTrackerWord(startPos, length, wordId);
		}
	}
	/*<EndMethod Name="Infragistics.CPTextTrackerWord Infragistics.CPTextTrackerWord::CreateWord(System.Int32, System.Int32, System.String, System.String)" />*/
	,
	$type: new $.ig.Type('CPTextTrackerWord', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextTrackerWord" />*/

/*<BeginType Name="Infragistics.CPTextTrackerWhiteSpaceWord" />*/

$.ig.util.defType('CPTextTrackerWhiteSpaceWord', 'CPTextTrackerWord', {
	init: function (startPos, length, identifier) {
		$.ig.CPTextTrackerWord.prototype.init.call(this, startPos, length, identifier);
	},
	/*<BeginMethod Name="System.Boolean Infragistics.CPTextTrackerWhiteSpaceWord::SupportsString(System.String)" />*/
	supportsString: function (val) {
		return $.ig.CPTextTrackerWord.prototype.isWhiteSpace(val);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTextTrackerWhiteSpaceWord::SupportsString(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTextTrackerWhiteSpaceWord::SupportsTracking()" />*/
	supportsTracking: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTextTrackerWhiteSpaceWord::SupportsTracking()" />*/
	,
	$type: new $.ig.Type('CPTextTrackerWhiteSpaceWord', $.ig.CPTextTrackerWord.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextTrackerWhiteSpaceWord" />*/

/*<BeginType Name="Infragistics.CPTextTrackerWordProcessor" />*/

$.ig.util.defType('CPTextTrackerWordProcessor', 'Object', {
	__words: null,
	__delegate: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__words = new $.ig.Array();
	},
	/*<BeginProperty Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::Words()" />*/
	words: function () {
		return this.__words;
	}
	/*<EndProperty Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::Words()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPTextTrackerWordProcessorDelegate Infragistics.CPTextTrackerWordProcessor::WordTrackingDelegate()" />*/
	wordTrackingDelegate: function (value) {
		if (arguments.length === 1) {
			this.__delegate = value;
			return value;
		} else {
			return this.__delegate;
		}
	}
	/*<EndProperty Name="Infragistics.CPTextTrackerWordProcessorDelegate Infragistics.CPTextTrackerWordProcessor::WordTrackingDelegate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::Clear()" />*/
	clear: function () {
		this.__words.clear();
		this.__wordIdentifer = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::Clear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::Reset(System.String)" />*/
	reset: function (oldFullText) {
		for (var i = this.__words.length - 1; i > -1; i--) {
			this.wordRemoved(this.__words[i], oldFullText);
		}
		this.__words.clear();
		if (this.__delegate != null) {
			this.__delegate.wordsUpdated(this.__words, "");
		}
		this.__wordIdentifer = 0;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::Reset(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextAdded(System.String, System.String, System.String, System.Int32)" />*/
	textAdded: function (oldFullText, newFullText, newlyAddedText, newlyAddedTextPos) {
		var modifiedWords = this.getModifiedWords(oldFullText, newlyAddedTextPos, 0);
		var firstWordModifiedIndex = 0;
		var insertWordIndex = -1;
		var newWords = null;
		var count = modifiedWords.length;
		if (count == 0) {
			if (this.__words.length == 0) {
				insertWordIndex = 0;
				newWords = this.createNewWords(newlyAddedText, newlyAddedTextPos, null);
			} else {
				var textToAdd = newlyAddedText;
				var nextWord = null;
				var countofCharMatchAtEnd = 0;
				if (this.__words.length > 0) {
					nextWord = this.__words[0];
					countofCharMatchAtEnd = nextWord.getLengthOfCharactersSupportedAtEndOfString(textToAdd);
				}
				if (countofCharMatchAtEnd > 0) {
					textToAdd = $.ig.NativeStringUtility.prototype.substring(textToAdd, 0, textToAdd.length - countofCharMatchAtEnd);
					nextWord.updateLength(nextWord.length() + countofCharMatchAtEnd);
					nextWord.start(nextWord.start() - countofCharMatchAtEnd);
				}
				if (textToAdd.length > 0) {
					insertWordIndex = 0;
					newWords = this.createNewWords(textToAdd, newlyAddedTextPos + (newlyAddedText.length - textToAdd.length), null);
				}
			}
		} else if (count == 1) {
			var word = modifiedWords[0];
			firstWordModifiedIndex = word.index();
			if (word.end() == newlyAddedTextPos) {
				if (word.supportsString(newlyAddedText)) {
					word.updateLength(word.length() + newlyAddedText.length);
				} else {
					var textToAdd1 = newlyAddedText;
					var countOfCharMatchInFront = word.getLengthOfCharactersSupportedAtBeginningOfString(newlyAddedText);
					if (countOfCharMatchInFront > 0) {
						textToAdd1 = $.ig.NativeStringUtility.prototype.substring(textToAdd1, countOfCharMatchInFront, textToAdd1.length - countOfCharMatchInFront);
						word.updateLength(word.length() + countOfCharMatchInFront);
					}
					var nextWord1 = null;
					var countofCharMatchAtEnd1 = 0;
					if (word.index() + 1 < this.__words.length) {
						nextWord1 = this.__words[word.index() + 1];
						countofCharMatchAtEnd1 = nextWord1.getLengthOfCharactersSupportedAtEndOfString(textToAdd1);
					}
					if (countofCharMatchAtEnd1 > 0) {
						textToAdd1 = $.ig.NativeStringUtility.prototype.substring(textToAdd1, 0, textToAdd1.length - countofCharMatchAtEnd1);
						nextWord1.updateLength(nextWord1.length() + countofCharMatchAtEnd1);
						nextWord1.start(nextWord1.start() - countofCharMatchAtEnd1);
					}
					if (textToAdd1.length > 0) {
						insertWordIndex = word.index() + 1;
						newWords = this.createNewWords(textToAdd1, newlyAddedTextPos + (newlyAddedText.length - textToAdd1.length), null);
					}
				}
			} else {
				if (word.supportsString(newlyAddedText)) {
					word.updateLength(word.length() + newlyAddedText.length);
				} else {
					var numberOfCharsToRemainInWord = newlyAddedTextPos - word.start();
					var charactersSplitIntoNewWord = $.ig.NativeStringUtility.prototype.substring(oldFullText, newlyAddedTextPos, word.end() - newlyAddedTextPos);
					word.updateLength(numberOfCharsToRemainInWord);
					var textToAdd2 = newlyAddedText + charactersSplitIntoNewWord;
					var countOfCharMatchInFront1 = word.getLengthOfCharactersSupportedAtBeginningOfString(newlyAddedText);
					if (countOfCharMatchInFront1 > 0) {
						textToAdd2 = $.ig.NativeStringUtility.prototype.substring(textToAdd2, countOfCharMatchInFront1, textToAdd2.length - countOfCharMatchInFront1);
						word.updateLength(word.length() + countOfCharMatchInFront1);
					}
					insertWordIndex = word.index() + 1;
					newWords = this.createNewWords(textToAdd2, newlyAddedTextPos, word);
				}
			}
		} else {
			this.badState();
			return;
		}
		if (newWords != null) {
			for (var i = 0; i < newWords.length; i++) {
				var newWord = newWords[i];
				this.__words.insert(insertWordIndex, newWord);
				insertWordIndex++;
			}
		}
		this.fixOffsetsAndNotify(firstWordModifiedIndex, newFullText, null, null);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextAdded(System.String, System.String, System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextReplaced(System.String, System.String, System.String, System.Int32, System.Int32)" />*/
	textReplaced: function (oldFullText, newFullText, newlyAddedText, newlyAddedTextPos, replacedTextLength) {
		var modifiedWords = this.getModifiedWords(oldFullText, newlyAddedTextPos, replacedTextLength);
		var firstWordModifiedIndex = 0;
		var insertWordIndex = -1;
		var newWords = null;
		var removeWordAtIndex = -1;
		var numberOfWordToRemove = 0;
		var count = modifiedWords.length;
		if (count == 0) {
			this.textAdded(oldFullText, newFullText, newlyAddedText, newlyAddedTextPos);
		} else if (count == 1) {
			var word = modifiedWords[0];
			firstWordModifiedIndex = word.index();
			var oldWordLength = word.length();
			word.updateLength(word.length() - replacedTextLength);
			if (word.supportsString(newlyAddedText)) {
				word.updateLength(word.length() + newlyAddedText.length);
			} else {
				var textToAdd = newlyAddedText;
				var offsetPos = newlyAddedTextPos + replacedTextLength;
				if (offsetPos < (word.start() + oldWordLength)) {
					var diff = (word.start() + oldWordLength) - offsetPos;
					textToAdd = textToAdd + $.ig.NativeStringUtility.prototype.substring(oldFullText, offsetPos, diff);
					word.updateLength(word.length() - diff);
				}
				var countOfCharMatchInFront = word.getLengthOfCharactersSupportedAtBeginningOfString(newlyAddedText);
				if (countOfCharMatchInFront > 0) {
					textToAdd = $.ig.NativeStringUtility.prototype.substring(textToAdd, countOfCharMatchInFront, textToAdd.length - countOfCharMatchInFront);
					word.updateLength(word.length() + countOfCharMatchInFront);
				}
				if (word.length() == 0) {
					removeWordAtIndex = word.index();
					numberOfWordToRemove = 1;
				}
				var nextWord = null;
				var countofCharMatchAtEnd = 0;
				if (word.index() + 1 < this.__words.length) {
					nextWord = this.__words[word.index() + 1];
					countofCharMatchAtEnd = nextWord.getLengthOfCharactersSupportedAtEndOfString(textToAdd);
				}
				if (countofCharMatchAtEnd > 0) {
					textToAdd = $.ig.NativeStringUtility.prototype.substring(textToAdd, 0, textToAdd.length - countofCharMatchAtEnd);
					nextWord.updateLength(nextWord.length() + countofCharMatchAtEnd);
				}
				if (textToAdd.length > 0) {
					insertWordIndex = word.index() + 1;
					newWords = this.createNewWords(textToAdd, newlyAddedTextPos + (newlyAddedText.length - textToAdd.length), null);
				}
			}
		} else {
			var firstWord = modifiedWords[0];
			var numberOfCharsRemainInFirstWord = newlyAddedTextPos - firstWord.start();
			firstWordModifiedIndex = firstWord.index();
			var lastWord = modifiedWords[modifiedWords.length - 1];
			var numberOfCharsRemainInLastWord = lastWord.end() - (newlyAddedTextPos + replacedTextLength);
			removeWordAtIndex = firstWord.index();
			numberOfWordToRemove = modifiedWords.length;
			var textToAdd1 = newlyAddedText;
			if (numberOfCharsRemainInLastWord > 0) {
				var remainingTextInLastWord = $.ig.NativeStringUtility.prototype.substring(oldFullText, lastWord.start() + (lastWord.length() - numberOfCharsRemainInLastWord), numberOfCharsRemainInLastWord);
				textToAdd1 = textToAdd1 + remainingTextInLastWord;
			}
			if (numberOfCharsRemainInFirstWord > 0) {
				removeWordAtIndex++;
				numberOfWordToRemove--;
				firstWord.updateLength(numberOfCharsRemainInFirstWord);
				var numberOfCharsSupportedByFirstWord = firstWord.getLengthOfCharactersSupportedAtBeginningOfString(textToAdd1);
				if (numberOfCharsSupportedByFirstWord > 0) {
					textToAdd1 = $.ig.NativeStringUtility.prototype.substring(textToAdd1, numberOfCharsSupportedByFirstWord, textToAdd1.length - numberOfCharsSupportedByFirstWord);
					firstWord.updateLength(firstWord.length() + numberOfCharsSupportedByFirstWord);
				}
			}
			if (textToAdd1.length > 0) {
				if (lastWord.index() + 1 < this.__words.length) {
					var nextWord1 = this.__words[lastWord.index() + 1];
					var countofCharMatchAtEnd1 = nextWord1.getLengthOfCharactersSupportedAtEndOfString(textToAdd1);
					if (countofCharMatchAtEnd1 > 0) {
						textToAdd1 = $.ig.NativeStringUtility.prototype.substring(textToAdd1, 0, textToAdd1.length - countofCharMatchAtEnd1);
						nextWord1.updateLength(nextWord1.length() + countofCharMatchAtEnd1);
					}
				}
				if (textToAdd1.length > 0) {
					insertWordIndex = lastWord.index() + 1;
					newWords = this.createNewWords(textToAdd1, newlyAddedTextPos + (newlyAddedText.length - textToAdd1.length), null);
				}
			}
		}
		var offsetAmmount = newlyAddedText.length - replacedTextLength;
		if (newWords != null) {
			for (var i = 0; i < newWords.length; i++) {
				var newWord = newWords[i];
				this.__words.insert(insertWordIndex, newWord);
				insertWordIndex++;
			}
		}
		var removedWords = null;
		if (numberOfWordToRemove > 0) {
			removedWords = new $.ig.Array();
			var newWordsList = new $.ig.Array();
			for (var i1 = 0; i1 < this.__words.length; i1++) {
				var word1 = this.__words[i1];
				if (word1.index() >= removeWordAtIndex) {
					if (i1 < removeWordAtIndex + numberOfWordToRemove) {
						removedWords.add(word1);
						continue;
					}
				}
				newWordsList.add(word1);
			}
			this.__words = newWordsList;
		}
		this.fixOffsetsAndNotify(firstWordModifiedIndex, newFullText, oldFullText, removedWords);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextReplaced(System.String, System.String, System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextRemoved(System.String, System.String, System.Int32, System.Int32)" />*/
	textRemoved: function (oldFullText, newFullText, textRemoveAtPos, textRemovedLength) {
		if (newFullText.length == 0) {
			this.reset(oldFullText);
		} else {
			var modifiedWords = this.getModifiedWords(oldFullText, textRemoveAtPos, textRemovedLength);
			var removeWordAtIndex = -1;
			var numberOfWordToRemove = 0;
			var firstWordModifiedIndex = 0;
			var count = modifiedWords.length;
			if (count == 0) {
				this.badState();
				return;
			} else if (count == 1) {
				var word = modifiedWords[0];
				firstWordModifiedIndex = word.index();
				word.updateLength(word.length() - textRemovedLength);
				if (word.length() == 0) {
					removeWordAtIndex = word.index();
					numberOfWordToRemove = 1;
				} else if (word.length() < 0) {
					this.badState();
					return;
				}
			} else {
				var firstWord = modifiedWords[0];
				firstWordModifiedIndex = firstWord.index();
				var numberOfCharsRemainInFirstWord = textRemoveAtPos - firstWord.start();
				var lastWord = modifiedWords[modifiedWords.length - 1];
				var numberOfCharsRemainInLastWord = lastWord.end() - (textRemoveAtPos + textRemovedLength);
				if (numberOfCharsRemainInFirstWord == 0 && numberOfCharsRemainInLastWord == 0) {
					removeWordAtIndex = firstWord.index();
					numberOfWordToRemove = modifiedWords.length;
				} else if (numberOfCharsRemainInFirstWord > 0 && numberOfCharsRemainInLastWord > 0) {
					var remainingTextInLastWord = $.ig.NativeStringUtility.prototype.substring(oldFullText, lastWord.start() + (lastWord.length() - numberOfCharsRemainInLastWord), numberOfCharsRemainInLastWord);
					if (firstWord.supportsString(remainingTextInLastWord)) {
						firstWord.updateLength(numberOfCharsRemainInFirstWord + numberOfCharsRemainInLastWord);
						removeWordAtIndex = firstWord.index() + 1;
						numberOfWordToRemove = modifiedWords.length - 1;
					} else {
						firstWord.updateLength(numberOfCharsRemainInFirstWord);
						lastWord.updateLength(numberOfCharsRemainInLastWord);
						numberOfWordToRemove = modifiedWords.length - 2;
						removeWordAtIndex = firstWord.index() + 1;
					}
				} else if (numberOfCharsRemainInFirstWord == 0) {
					removeWordAtIndex = firstWord.index();
					numberOfWordToRemove = modifiedWords.length - 1;
					lastWord.updateLength(numberOfCharsRemainInLastWord);
				} else if (numberOfCharsRemainInLastWord == 0) {
					removeWordAtIndex = firstWord.index() + 1;
					numberOfWordToRemove = modifiedWords.length - 1;
					firstWord.updateLength(numberOfCharsRemainInFirstWord);
					if (lastWord.index() + 1 < this.__words.length) {
						var nextWord = this.__words[lastWord.index() + 1];
						if (firstWord.supportsString(nextWord.resolveWord(oldFullText))) {
							firstWord.updateLength(firstWord.length() + nextWord.length());
							numberOfWordToRemove++;
						}
					}
				}
			}
			var removedWords = null;
			if (numberOfWordToRemove > 0) {
				removedWords = new $.ig.Array();
				var newWordsList = new $.ig.Array();
				for (var i = 0; i < this.__words.length; i++) {
					var word1 = this.__words[i];
					if (word1.index() >= removeWordAtIndex) {
						if (word1.index() < removeWordAtIndex + numberOfWordToRemove) {
							removedWords.add(word1);
							continue;
						}
					}
					newWordsList.add(word1);
				}
				this.__words = newWordsList;
			}
			this.fixOffsetsAndNotify(firstWordModifiedIndex, newFullText, oldFullText, removedWords);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::TextRemoved(System.String, System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::FixOffsetsAndNotify(System.Int32, System.String, System.String, Infragistics.CPList)" />*/
	fixOffsetsAndNotify: function (startIndex, newFullText, oldFullText, removedWords) {
		var wordLocation = 0;
		if (startIndex > 0) {
			var word = this.__words[startIndex - 1];
			wordLocation = word.start() + word.length();
		}
		for (var i = startIndex; i < this.__words.length; i++) {
			var word1 = this.__words[i];
			word1.index(i);
			var locationChanged = word1.start() != wordLocation;
			word1.start(wordLocation);
			wordLocation += word1.length();
			if (word1.isNew()) {
				this.wordAdded(word1, newFullText);
			} else if (word1.isDirty()) {
				this.wordUpdated(word1, newFullText);
			} else if (locationChanged) {
				this.wordLocationChanged(word1);
			}
		}
		if (removedWords != null) {
			for (var i1 = 0; i1 < removedWords.length; i1++) {
				this.wordRemoved(removedWords[i1], oldFullText);
			}
		}
		if (this.__delegate != null) {
			this.__delegate.wordsUpdated(this.__words, newFullText);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::FixOffsetsAndNotify(System.Int32, System.String, System.String, Infragistics.CPList)" />*/
	,
	__wordIdentifer: 0,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::CreateNewWords(System.String, System.Int32, Infragistics.CPTextTrackerWord)" />*/
	createNewWords: function (newText, startPos, createdFromWord) {
		var words = new $.ig.Array();
		var length = newText.length;
		var cursorPos = startPos;
		var currentWord = null;
		for (var i = 0; i < length; i++) {
			var character = $.ig.NativeStringUtility.prototype.substring(newText, i, 1);
			if (currentWord == null || !currentWord.supportsString(character)) {
				currentWord = $.ig.CPTextTrackerWord.prototype.createWord(cursorPos, 1, character, this.__wordIdentifer.toString());
				this.__wordIdentifer++;
				words.add(currentWord);
			} else {
				currentWord.updateLength(currentWord.length() + 1);
			}
			cursorPos++;
		}
		return words;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::CreateNewWords(System.String, System.Int32, Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::BadState()" />*/
	badState: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::BadState()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::GetModifiedWords(System.String, System.Int32, System.Int32)" />*/
	getModifiedWords: function (oldFullText, startPos, modifiedTextLength) {
		var end = startPos + modifiedTextLength;
		var modifiedWords = new $.ig.Array();
		var foundAtLeastOne = false;
		for (var i = 0; i < this.__words.length; i++) {
			var word = this.__words[i];
			if (word.start() < end && word.end() >= startPos) {
				modifiedWords.add(word);
				foundAtLeastOne = true;
			} else if (foundAtLeastOne) {
				break;
			}
		}
		return modifiedWords;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.CPTextTrackerWordProcessor::GetModifiedWords(System.String, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordAdded(Infragistics.CPTextTrackerWord, System.String)" />*/
	wordAdded: function (word, newFullText) {
		if (word.supportsTracking()) {
			if (this.__delegate != null) {
				this.__delegate.wordAdded(word, word.resolveWord(newFullText));
			}
		}
		word.isNew(false);
		word.isDirty(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordAdded(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordUpdated(Infragistics.CPTextTrackerWord, System.String)" />*/
	wordUpdated: function (word, newFullText) {
		if (word.supportsTracking()) {
			if (this.__delegate != null) {
				this.__delegate.wordUpdated(word, word.resolveWord(newFullText));
			}
		}
		word.isDirty(false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordUpdated(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	wordLocationChanged: function (word) {
		if (word.supportsTracking()) {
			if (this.__delegate != null) {
				this.__delegate.wordLocationChanged(word);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordLocationChanged(Infragistics.CPTextTrackerWord)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordRemoved(Infragistics.CPTextTrackerWord, System.String)" />*/
	wordRemoved: function (word, oldFullText) {
		if (word.supportsTracking()) {
			if (this.__delegate != null) {
				this.__delegate.wordRemoved(word);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTextTrackerWordProcessor::WordRemoved(Infragistics.CPTextTrackerWord, System.String)" />*/
	,
	$type: new $.ig.Type('CPTextTrackerWordProcessor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextTrackerWordProcessor" />*/

/*<BeginType Name="Infragistics.CPTextTrackingRange" />*/

$.ig.util.defType('CPTextTrackingRange', 'Object', {
	__json: null,
	init: function (initNumber, json) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.__json = json;
	},
	init1: function (initNumber, range, style, metaData) {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('CPTextTrackingRange', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTextTrackingRange" />*/

/*<BeginType Name="Infragistics.CPThemeColor" />*/

$.ig.util.defType('CPThemeColor', 'Object', {
	__color: null,
	__r: null,
	__g: null,
	__b: null,
	__a: 0,
	init: function (initNumber, color) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		this.__color = new $.ig.Number();
		this.__r = new $.ig.Number();
		this.__g = new $.ig.Number();
		this.__b = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.__color = color;
		this.__a = $.ig.ColorUtility.prototype.getAlpha(color) / 255;
		this.__r = $.ig.ColorUtility.prototype.getRed(color);
		this.__g = $.ig.ColorUtility.prototype.getGreen(color);
		this.__b = $.ig.ColorUtility.prototype.getBlue(color);
	},
	init1: function (initNumber, alpha, color) {
		this.__color = new $.ig.Number();
		this.__r = new $.ig.Number();
		this.__g = new $.ig.Number();
		this.__b = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.__a = alpha;
		this.__r = $.ig.ColorUtility.prototype.getRed(color);
		this.__g = $.ig.ColorUtility.prototype.getGreen(color);
		this.__b = $.ig.ColorUtility.prototype.getBlue(color);
		this.__color = $.ig.ColorUtility.prototype.createColor1((alpha * 255), this.__r, this.__g, this.__b);
	},
	init2: function (initNumber, a, r, g, b) {
		this.__color = new $.ig.Number();
		this.__r = new $.ig.Number();
		this.__g = new $.ig.Number();
		this.__b = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.__a = a;
		this.__r = r;
		this.__g = g;
		this.__b = b;
		this.__color = $.ig.ColorUtility.prototype.createColor1((255 * a), r, g, b);
	},
	/*<BeginProperty Name="System.Double Infragistics.CPThemeColor::A()" />*/
	a: function () {
		return this.__a;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeColor::A()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPThemeColor::R()" />*/
	r: function () {
		return this.__r;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPThemeColor::R()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPThemeColor::G()" />*/
	g: function () {
		return this.__g;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPThemeColor::G()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPThemeColor::B()" />*/
	b: function () {
		return this.__b;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPThemeColor::B()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPThemeColor::Native()" />*/
	$native: function () {
		return $.ig.ColorUtility.prototype.convertToNative(this.__color);
	}
	/*<EndProperty Name="System.String Infragistics.CPThemeColor::Native()" />*/
	,
	/*<BeginProperty Name="System.ColorInt Infragistics.CPThemeColor::Color()" />*/
	color: function () {
		return this.__color;
	}
	/*<EndProperty Name="System.ColorInt Infragistics.CPThemeColor::Color()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPThemeColor::Clone()" />*/
	clone: function () {
		return new $.ig.CPThemeColor(0, this.__color);
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPThemeColor::Clone()" />*/
	,
	$type: new $.ig.Type('CPThemeColor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPThemeColor" />*/

/*<BeginType Name="Infragistics.CPTheme" />*/

$.ig.util.defType('CPTheme', 'Object', {
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ClearColor()" />*/
	clearColor: function () {
		if ($.ig.CPTheme.prototype.__clear == null) {
			$.ig.CPTheme.prototype.__clear = new $.ig.CPThemeColor(2, 0, 0, 0, 0);
		}
		return $.ig.CPTheme.prototype.__clear;
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ClearColor()" />*/
	,
	__fcomRest: null,
	__hoverItemBC: null,
	__pressedItemBC: null,
	__fcomDisabled: null,
	__dcom: null,
	__pressedItemMBC: null,
	init: function () {
		this.__fcomRest = new $.ig.Number();
		this.__hoverItemBC = new $.ig.Number();
		this.__pressedItemBC = new $.ig.Number();
		this.__fcomDisabled = new $.ig.Number();
		this.__dcom = new $.ig.Number();
		this.__pressedItemMBC = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.__colorCache = new $.ig.Dictionary(0);
		this.__fcomRest = 0;
		this.__fcomDisabled = 0;
		this.__pressedItemBC = 0;
		this.__hoverItemBC = 0;
		this.__dcom = 0;
		this.__pressedItemMBC = 0;
	},
	/*<BeginProperty Name="System.String Infragistics.CPTheme::Name()" />*/
	name: function () {
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::Name()" />*/
	,
	__colors: null,
	/*<BeginProperty Name=" Infragistics.CPTheme::Colors()" />*/
	colors: function () {
		if (this.__colors == null) {
			var colors = new Array(12);
			colors[0] = $.ig.ColorUtility.prototype.createColor1(255, 64, 109, 188);
			colors[1] = $.ig.ColorUtility.prototype.createColor1(255, 151, 178, 236);
			colors[2] = $.ig.ColorUtility.prototype.createColor1(255, 198, 213, 246);
			colors[3] = $.ig.ColorUtility.prototype.createColor1(255, 83, 170, 183);
			colors[4] = $.ig.ColorUtility.prototype.createColor1(255, 138, 202, 122);
			colors[5] = $.ig.ColorUtility.prototype.createColor1(255, 207, 219, 88);
			colors[6] = $.ig.ColorUtility.prototype.createColor1(255, 248, 220, 77);
			colors[7] = $.ig.ColorUtility.prototype.createColor1(255, 246, 158, 65);
			colors[8] = $.ig.ColorUtility.prototype.createColor1(255, 255, 168, 151);
			colors[9] = $.ig.ColorUtility.prototype.createColor1(255, 222, 128, 128);
			colors[10] = $.ig.ColorUtility.prototype.createColor1(255, 204, 122, 181);
			colors[11] = $.ig.ColorUtility.prototype.createColor1(255, 198, 153, 229);
			this.__colors = colors;
		}
		return this.__colors;
	}
	/*<EndProperty Name=" Infragistics.CPTheme::Colors()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::AnimationDuration()" />*/
	animationDuration: function () {
		return 0.15;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::AnimationDuration()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::VisualizeAnimationDuration()" />*/
	visualizeAnimationDuration: function () {
		return 0.35;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::VisualizeAnimationDuration()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::AppBackgroundColor()" />*/
	appBackgroundColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::AppBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MainBackgroundColor()" />*/
	mainBackgroundColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MainBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemBackgroundColor()" />*/
	itemBackgroundColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MainSecondaryBackgroundColor()" />*/
	mainSecondaryBackgroundColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MainSecondaryBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemHeaderColor()" />*/
	itemHeaderColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemHeaderColor()" />*/
	,
	_sideBarMarketingColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::SideBarMarketingColor()" />*/
	sideBarMarketingColor: function (value) {
		if (arguments.length === 1) {
			this._sideBarMarketingColor = value;
			return value;
		} else {
			return this._sideBarMarketingColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::SideBarMarketingColor()" />*/
	,
	_tabBarMarketingColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TabBarMarketingColor()" />*/
	tabBarMarketingColor: function (value) {
		if (arguments.length === 1) {
			this._tabBarMarketingColor = value;
			return value;
		} else {
			return this._tabBarMarketingColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TabBarMarketingColor()" />*/
	,
	_toolbarOverrideColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarOverrideColor()" />*/
	toolbarOverrideColor: function (value) {
		if (arguments.length === 1) {
			this._toolbarOverrideColor = value;
			return value;
		} else {
			return this._toolbarOverrideColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarOverrideColor()" />*/
	,
	_level2OverrideColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2OverrideColor()" />*/
	level2OverrideColor: function (value) {
		if (arguments.length === 1) {
			this._level2OverrideColor = value;
			return value;
		} else {
			return this._level2OverrideColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2OverrideColor()" />*/
	,
	_level3OverrideColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3OverrideColor()" />*/
	level3OverrideColor: function (value) {
		if (arguments.length === 1) {
			this._level3OverrideColor = value;
			return value;
		} else {
			return this._level3OverrideColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3OverrideColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarColorSet()" />*/
	toolbarColorSet: function () {
		return this.resolveLevelColorSet(this.toolbarOverrideColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarInteractiveColorSet()" />*/
	toolbarInteractiveColorSet: function () {
		return this.resolveLevelInterativeColorSet(this.toolbarColorSet(), "tbcsi");
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ToolbarInteractiveColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level1ColorSet()" />*/
	level1ColorSet: function () {
		return this.resolveColorSet("abcSet", this.appBackgroundColor().r(), this.appBackgroundColor().g(), this.appBackgroundColor().b());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level1ColorSet()" />*/
	,
	__l1InterationColorSet: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level1InteractiveColorSet()" />*/
	level1InteractiveColorSet: function () {
		if (this.__l1InterationColorSet == null) {
			this.__l1InterationColorSet = new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().level1PressedColor().color());
			this.__l1InterationColorSet.pressed($.ig.ThemeManager.prototype.theme().level1PressedColor());
			this.__l1InterationColorSet.hover($.ig.ThemeManager.prototype.theme().level1HoverColor());
		}
		return this.__l1InterationColorSet;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level1InteractiveColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::Level1PressedColor()" />*/
	level1PressedColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::Level1PressedColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::Level1HoverColor()" />*/
	level1HoverColor: function () {
		return this.resolveColor2("l1hc", this.level1HoverOpacity(), this.level1PressedColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::Level1HoverColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::Level1HoverOpacity()" />*/
	level1HoverOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::Level1HoverOpacity()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2ColorSet()" />*/
	level2ColorSet: function () {
		return this.resolveLevelColorSet(this.level2OverrideColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2ColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2InteractiveColorSet()" />*/
	level2InteractiveColorSet: function () {
		return this.resolveLevelInterativeColorSet(this.level2OverrideColor(), "l2csi");
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level2InteractiveColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3ColorSet()" />*/
	level3ColorSet: function () {
		return this.resolveLevelColorSet(this.level3OverrideColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3ColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3InteractiveColorSet()" />*/
	level3InteractiveColorSet: function () {
		return this.resolveLevelInterativeColorSet(this.level3OverrideColor(), "l3csi");
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::Level3InteractiveColorSet()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveLevelColorSet(Infragistics.CPThemeColorSet)" />*/
	resolveLevelColorSet: function (overrideColor) {
		if (overrideColor != null) {
			var altColor = this.alternativeToOverrideColor();
			if (altColor != null) {
				return altColor;
			}
			return overrideColor;
		}
		return this.allLevelFallbackColorSet();
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveLevelColorSet(Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AlternativeToOverrideColor()" />*/
	alternativeToOverrideColor: function () {
		return null;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AlternativeToOverrideColor()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveLevelInterativeColorSet(Infragistics.CPThemeColorSet, System.String)" />*/
	resolveLevelInterativeColorSet: function (overrideColor, key) {
		if (overrideColor != null) {
			var color = this.resolveColorSet2(key, 0.19, this.resolveLevelColorSet(overrideColor).foreground().color());
			color.useColorAsForeground(true);
			return color;
		} else {
			return this.defaultInteractionColorSet();
		}
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveLevelInterativeColorSet(Infragistics.CPThemeColorSet, System.String)" />*/
	,
	__defaultInterationColorSet: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DefaultInteractionColorSet()" />*/
	defaultInteractionColorSet: function () {
		if (this.__defaultInterationColorSet == null) {
			this.__defaultInterationColorSet = new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().appBackgroundColor().color());
			this.__defaultInterationColorSet.pressed($.ig.ThemeManager.prototype.theme().appBackgroundColor());
			this.__defaultInterationColorSet.hover($.ig.ThemeManager.prototype.theme().itemHoverColor());
		}
		return this.__defaultInterationColorSet;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DefaultInteractionColorSet()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AllLevelFallbackColorSet()" />*/
	allLevelFallbackColorSet: function () {
		return this.resolveColorSet1("fbcs", 1, this.itemBackgroundColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AllLevelFallbackColorSet()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsAppTabBarShadow()" />*/
	supportsAppTabBarShadow: function () {
		return this.level2ColorSet().color() != this.allLevelFallbackColorSet().color();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsAppTabBarShadow()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsMainViewLeftOffset()" />*/
	supportsMainViewLeftOffset: function () {
		return this.level3ColorSet().color() == this.allLevelFallbackColorSet().color();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsMainViewLeftOffset()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ForegroundColorOverMainAtRest()" />*/
	foregroundColorOverMainAtRest: function () {
		if (this.__fcomRest == 0) {
			this.__fcomRest = $.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.foregroundColor().color(), this.mainBackgroundColor().color(), this.restOpacity());
		}
		return this.resolveColorSet2("fcomr", 1, this.__fcomRest);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ForegroundColorOverMainAtRest()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ForegroundColorOverMainAtDisabled()" />*/
	foregroundColorOverMainAtDisabled: function () {
		if (this.__fcomDisabled == 0) {
			this.__fcomDisabled = $.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.foregroundColor().color(), this.mainBackgroundColor().color(), this.disabledOpacity());
		}
		return this.resolveColorSet2("fcomd", 1, this.__fcomDisabled);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ForegroundColorOverMainAtDisabled()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemHoverColor()" />*/
	itemHoverColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ItemHoverColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ForegroundColor()" />*/
	foregroundColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ForegroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::SubtleColor()" />*/
	subtleColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::SubtleColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::HintTextColor()" />*/
	hintTextColor: function () {
		return this.resolveColor2("hintText", this.disabledOpacity(), this.foregroundColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::HintTextColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::DividerColor()" />*/
	dividerColor: function () {
		return this.resolveColor2("divider", this.dividerOpacity(), this.foregroundColor());
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::DividerColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DividerColorOverMain()" />*/
	dividerColorOverMain: function () {
		if (this.__dcom == 0) {
			this.__dcom = $.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.foregroundColor().color(), this.mainBackgroundColor().color(), this.dividerOpacity());
		}
		return this.resolveColorSet2("dcom", 1, this.__dcom);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DividerColorOverMain()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::SuccessColor()" />*/
	successColor: function () {
		return this.resolveColorSet("success", 102, 187, 106);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::SuccessColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::WarningColor()" />*/
	warningColor: function () {
		return this.resolveColorSet("warning", 254, 182, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::WarningColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::PurpleColor()" />*/
	purpleColor: function () {
		return this.resolveColorSet("purple", 119, 92, 167);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::PurpleColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::OrangeColor()" />*/
	orangeColor: function () {
		return this.resolveColorSet("orange", 247, 140, 30);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::OrangeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ErrorColor()" />*/
	errorColor: function () {
		return this.resolveColorSet("error", 239, 84, 81);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ErrorColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ErrorColorTextOnly()" />*/
	errorColorTextOnly: function () {
		return this.errorColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ErrorColorTextOnly()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DateTypeColor()" />*/
	dateTypeColor: function () {
		return this.resolveColorSet("date", 254, 76, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::DateTypeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::NumericTypeColor()" />*/
	numericTypeColor: function () {
		return this.resolveColorSet("numeric", 255, 157, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::NumericTypeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TextTypeColor()" />*/
	textTypeColor: function () {
		return this.resolveColorSet("text", 254, 76, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TextTypeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentColor()" />*/
	accentColor: function () {
		return this.resolveColorSet("accent", 110, 137, 247);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentColor()" />*/
	,
	__accentInverseColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentInverseColor()" />*/
	accentInverseColor: function () {
		if (this.__accentInverseColor == null) {
			this.__accentInverseColor = new $.ig.CPThemeColorSet(0, $.ig.ThemeManager.prototype.theme().accentColor().foreground().color());
			this.__accentInverseColor.foreground($.ig.ThemeManager.prototype.theme().accentColor());
		}
		return this.__accentInverseColor;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentInverseColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentTextColorOverDark()" />*/
	accentTextColorOverDark: function () {
		return this.resolveColorSet("atcod", 162, 182, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::AccentTextColorOverDark()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveAccentColorTextOnlyForBackground(Infragistics.CPThemeColor)" />*/
	resolveAccentColorTextOnlyForBackground: function (background) {
		if ($.ig.ColorUtility.prototype.isDarkColor(background.color())) {
			return $.ig.ThemeManager.prototype.theme().accentTextColorOverDark();
		}
		return $.ig.ThemeManager.prototype.theme().accentColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveAccentColorTextOnlyForBackground(Infragistics.CPThemeColor)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::AccentColorTextOnly()" />*/
	accentColorTextOnly: function () {
		return this.accentColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::AccentColorTextOnly()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::CheckedColor()" />*/
	checkedColor: function () {
		return this.accentColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::CheckedColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::UncheckedColor()" />*/
	uncheckedColor: function () {
		return this.accentColorTextOnly();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::UncheckedColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::OverdueBackgroundColor()" />*/
	overdueBackgroundColor: function () {
		return this.errorColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::OverdueBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::OverdueForegroundColor()" />*/
	overdueForegroundColor: function () {
		return this.errorColorTextOnly();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::OverdueForegroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MemberBackgroundColor()" />*/
	memberBackgroundColor: function () {
		return this.resolveColor3("memgbc", 1, 144, 164, 174);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::MemberBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::PopupShadeColor()" />*/
	popupShadeColor: function () {
		return this.resolveColor3("popovershade", this.popoverShadeOpacity(), 0, 0, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::PopupShadeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ModalShadeColor()" />*/
	modalShadeColor: function () {
		return this.resolveColor3("modalshade", this.modalShadeOpacity(), 0, 0, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::ModalShadeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::SmallScreenModalShadeColor()" />*/
	smallScreenModalShadeColor: function () {
		return this.resolveColor3("smallmodalshade", this.smallScreenModalOpacity(), 0, 0, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::SmallScreenModalShadeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TooltipColor()" />*/
	tooltipColor: function () {
		return this.resolveColorSet1("tooltip", 1, this.foregroundColorOverMainAtRest());
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::TooltipColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::NotificationColor()" />*/
	notificationColor: function () {
		return this.resolveColorSet("notification", 219, 87, 151);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::NotificationColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ScrollBarThumbColor()" />*/
	scrollBarThumbColor: function () {
		return this.foregroundColorOverMainAtDisabled();
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ScrollBarThumbColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::InfoBackgroundColor()" />*/
	infoBackgroundColor: function () {
		return this.resolveColorSet("infoBackground", 255, 245, 205);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::InfoBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::HighlightColor()" />*/
	highlightColor: function () {
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::HighlightColor()" />*/
	,
	__colorCache: null,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	resolveColor1: function (key, r, g, b) {
		return this.resolveColor3(key, 1, r, g, b);
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.ColorInt)" />*/
	resolveColor: function (key, c) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__colorCache, key)) {
			return this.__colorCache.item(key);
		}
		var color = new $.ig.CPThemeColor(0, c);
		this.__colorCache.item(key, color);
		return color;
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.Double, Infragistics.CPThemeColor)" />*/
	resolveColor2: function (key, opacity, baseColor) {
		return this.resolveColor3(key, opacity, baseColor.r(), baseColor.g(), baseColor.b());
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.Double, Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.Double, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	resolveColor3: function (key, opacity, r, g, b) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__colorCache, key)) {
			return this.__colorCache.item(key);
		}
		var color = new $.ig.CPThemeColor(2, opacity, r, g, b);
		this.__colorCache.item(key, color);
		return color;
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::ResolveColor(System.String, System.Double, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	resolveColorSet: function (key, r, g, b) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__colorCache, key)) {
			return this.__colorCache.item(key);
		}
		var color = new $.ig.CPThemeColorSet(0, $.ig.ColorUtility.prototype.createColor(r, g, b));
		this.__colorCache.item(key, color);
		return color;
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.ColorInt, System.ColorInt, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.Double, System.ColorInt)" />*/
	resolveColorSet2: function (key, opacity, baseColor) {
		if ($.ig.NativeDictionaryUtility.prototype.containsKey(this.__colorCache, key)) {
			return this.__colorCache.item(key);
		}
		var color = new $.ig.CPThemeColorSet(1, opacity, baseColor);
		this.__colorCache.item(key, color);
		return color;
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.Double, System.ColorInt)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.Double, Infragistics.CPThemeColor)" />*/
	resolveColorSet1: function (key, opacity, baseColor) {
		return baseColor == null ? null : this.resolveColorSet2(key, opacity, baseColor.color());
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPTheme::ResolveColorSet(System.String, System.Double, Infragistics.CPThemeColor)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::RestOpacity()" />*/
	restOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::RestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::HoverOpacity()" />*/
	hoverOpacity: function () {
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::HoverOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::DisabledOpacity()" />*/
	disabledOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::DisabledOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::DividerOpacity()" />*/
	dividerOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::DividerOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::PressedOpacity()" />*/
	pressedOpacity: function () {
		return this.hoverOpacity();
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::PressedOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::PressedOutlineOpacity()" />*/
	pressedOutlineOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::PressedOutlineOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::PopoverShadeOpacity()" />*/
	popoverShadeOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::PopoverShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::ModalShadeOpacity()" />*/
	modalShadeOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::ModalShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::SmallScreenModalOpacity()" />*/
	smallScreenModalOpacity: function () {
		return 0.8;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::SmallScreenModalOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::DraggingOpacity()" />*/
	draggingOpacity: function () {
		return 0.6;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::DraggingOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsCornerRadius()" />*/
	supportsCornerRadius: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::TooltipCornerRadius()" />*/
	tooltipCornerRadius: function () {
		if (this.supportsCornerRadius()) {
			return this.smallCornerRadius();
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::TooltipCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SmallCornerRadius()" />*/
	smallCornerRadius: function () {
		if (this.supportsCornerRadius()) {
			return $.ig.NativeUIUtility.prototype.utility().densify(2);
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SmallCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ItemCornerRadius()" />*/
	itemCornerRadius: function () {
		if (this.supportsCornerRadius()) {
			return $.ig.NativeUIUtility.prototype.utility().densify(6);
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ItemCornerRadius()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyCornerRadiusToButton(Infragistics.CPView, System.Int32)" />*/
	applyCornerRadiusToButton: function (button, height) {
		if (this.supportsCornerRadius()) {
			button.setCornerRadius(height / 2);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyCornerRadiusToButton(Infragistics.CPView, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ContainerCornerRadius()" />*/
	containerCornerRadius: function () {
		if (this.supportsCornerRadius()) {
			return $.ig.NativeUIUtility.prototype.utility().densify(20);
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ContainerCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ModalCornerRadius()" />*/
	modalCornerRadius: function () {
		if (this.supportsCornerRadius()) {
			return $.ig.NativeUIUtility.prototype.utility().densify(8);
		}
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ModalCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::NotificationSize()" />*/
	notificationSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(6);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::NotificationSize()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPCircleView Infragistics.CPTheme::CreateNotificationIcon()" />*/
	createNotificationIcon: function () {
		var softNotification = new $.ig.CPCircleView();
		softNotification.setBackgroundColor($.ig.ThemeManager.prototype.theme().notificationColor().$native());
		return softNotification;
	}
	/*<EndMethod Name="Infragistics.CPCircleView Infragistics.CPTheme::CreateNotificationIcon()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::EnsureFontSize(System.Int32)" />*/
	ensureFontSize: function (fontSize) {
		return $.ig.NativeUIUtility.prototype.utility().densifyFont(fontSize);
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::EnsureFontSize(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::AppScaling()" />*/
	appScaling: function () {
		return $.ig.ThemeManager.prototype.zoomLevel();
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::AppScaling()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH1()" />*/
	fontSizeH1: function () {
		return this.ensureFontSize(32);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH1()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH2()" />*/
	fontSizeH2: function () {
		return this.ensureFontSize(24);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH2()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH2_5()" />*/
	fontSizeH2_5: function () {
		return this.ensureFontSize(20);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH2_5()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH3()" />*/
	fontSizeH3: function () {
		return this.ensureFontSize(18);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH3()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH4()" />*/
	fontSizeH4: function () {
		return this.ensureFontSize(16);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeH4()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeBody()" />*/
	fontSizeBody: function () {
		return this.ensureFontSize(14);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeBody()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeSecondary()" />*/
	fontSizeSecondary: function () {
		return this.ensureFontSize(12);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeSecondary()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeSubSecondary()" />*/
	fontSizeSubSecondary: function () {
		return this.ensureFontSize(10);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeSubSecondary()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FontSizeTiny()" />*/
	fontSizeTiny: function () {
		return this.ensureFontSize(8);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FontSizeTiny()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolveStepDownFontSize(System.Int32)" />*/
	resolveStepDownFontSize: function (fontSize) {
		if (fontSize == this.fontSizeH1()) {
			return this.fontSizeH2();
		} else if (fontSize == this.fontSizeH2()) {
			return this.fontSizeH3();
		} else if (fontSize == this.fontSizeH3()) {
			return this.fontSizeH4();
		} else if (fontSize == this.fontSizeBody()) {
			return this.fontSizeSecondary();
		} else if (fontSize == this.fontSizeSecondary()) {
			return this.fontSizeSubSecondary();
		} else if (fontSize == this.fontSizeSubSecondary()) {
			return this.fontSizeTiny();
		}
		return fontSize;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolveStepDownFontSize(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::RegularFontName()" />*/
	regularFontName: function () {
		return "Roboto-Regular";
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::RegularFontName()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::BoldFontName()" />*/
	boldFontName: function () {
		return "Roboto-Bold";
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::BoldFontName()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::MediumFontName()" />*/
	mediumFontName: function () {
		return "Roboto-Medium";
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::MediumFontName()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::DrawingRegularFont()" />*/
	drawingRegularFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(this.regularFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::DrawingRegularFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::DrawingBoldFont()" />*/
	drawingBoldFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(this.boldFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::DrawingBoldFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::DrawingMediumFont()" />*/
	drawingMediumFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeDrawingFont(this.mediumFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::DrawingMediumFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::RegularFont()" />*/
	regularFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeFont(this.regularFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::RegularFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::BoldFont()" />*/
	boldFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeFont(this.boldFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::BoldFont()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::MediumFont()" />*/
	mediumFont: function () {
		return $.ig.NativeUIUtility.prototype.utility().resolveNativeFont(this.mediumFontName());
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::MediumFont()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SmallDialogWidth()" />*/
	smallDialogWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(400);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SmallDialogWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SmallDialogMinimumHeight()" />*/
	smallDialogMinimumHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(430);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SmallDialogMinimumHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MediumDialogHeight()" />*/
	mediumDialogHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(579);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MediumDialogHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::NarrowDialogWidth()" />*/
	narrowDialogWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(500);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::NarrowDialogWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::NarrowDialogHeight()" />*/
	narrowDialogHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(750);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::NarrowDialogHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MediumDialogWidth()" />*/
	mediumDialogWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(736);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MediumDialogWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::LargeDialogWidth()" />*/
	largeDialogWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(980);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::LargeDialogWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ExtraLargeDialogWidth()" />*/
	extraLargeDialogWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(1200);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ExtraLargeDialogWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding40()" />*/
	padding40: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(40);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding40()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding30()" />*/
	padding30: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(30);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding30()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding25()" />*/
	padding25: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(25);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding25()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding20()" />*/
	padding20: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(20);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding20()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding16()" />*/
	padding16: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(16);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding16()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding15()" />*/
	padding15: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(15);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding15()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding10()" />*/
	padding10: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(10);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding10()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding5()" />*/
	padding5: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(5);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding5()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Padding3()" />*/
	padding3: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(3);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Padding3()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ScrollbarPadding()" />*/
	scrollbarPadding: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(10);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ScrollbarPadding()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolvePadding(System.Int32)" />*/
	resolvePadding: function (w) {
		if (this.isLargeArea(w) || this.isMediumLargeArea(w)) {
			return this.padding40();
		} else if (this.isMediumArea(w)) {
			return this.padding20();
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolvePadding(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolveDisplayAreaPadding(System.Int32)" />*/
	resolveDisplayAreaPadding: function (w) {
		return this.displayAreaPadding();
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolveDisplayAreaPadding(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::DisplayAreaPadding()" />*/
	displayAreaPadding: function () {
		return this.padding15();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::DisplayAreaPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SideBarRowSpacing()" />*/
	sideBarRowSpacing: function () {
		return this.borderWidth1();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SideBarRowSpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::OuterIslandPadding()" />*/
	outerIslandPadding: function () {
		return this.padding15();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::OuterIslandPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::InnerIslandPadding()" />*/
	innerIslandPadding: function () {
		return this.padding5();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::InnerIslandPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::IslandCornerRadius()" />*/
	islandCornerRadius: function () {
		return this.modalCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::IslandCornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Level1NavRightPadding()" />*/
	level1NavRightPadding: function () {
		return this.padding10();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Level1NavRightPadding()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingWithMinimum(System.Int32)" />*/
	resolvePaddingWithMinimum: function (w) {
		return Math.max(this.resolvePadding(w), this.padding10());
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingWithMinimum(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingForModal(System.Int32)" />*/
	resolvePaddingForModal: function (w) {
		if (this.isLargeArea(w) || this.isMediumLargeArea(w)) {
			return this.largeHitSize();
		} else {
			return this.padding20();
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingForModal(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingForModalGridContent(System.Int32)" />*/
	resolvePaddingForModalGridContent: function (w) {
		if (this.isLargeArea(w) || this.isMediumLargeArea(w)) {
			return this.largeHitSize();
		} else if (this.isMediumArea(w)) {
			return this.padding20();
		} else {
			return 0;
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ResolvePaddingForModalGridContent(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::IndentSpacing()" />*/
	indentSpacing: function () {
		return this.padding5();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::IndentSpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ExtraLargeHitSize()" />*/
	extraLargeHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(80);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ExtraLargeHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::LargerHitSize()" />*/
	largerHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(64);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::LargerHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::LargeHitSize()" />*/
	largeHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(58);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::LargeHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MediumHitSize()" />*/
	mediumHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(50);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MediumHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Level1NavHitSize()" />*/
	level1NavHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(40);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Level1NavHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Level3NavHitSize()" />*/
	level3NavHitSize: function () {
		return this.level1NavHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Level3NavHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SmallHitSize()" />*/
	smallHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(44);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SmallHitSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::VerySmallHitSize()" />*/
	verySmallHitSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(36);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::VerySmallHitSize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ToolbarHeightForRows(System.Int32)" />*/
	toolbarHeightForRows: function (rowCount) {
		if (!this.isSmallScreen()) {
			if (this.isLargeScreen()) {
				rowCount = 1;
			}
		}
		return (rowCount * ($.ig.ThemeManager.prototype.theme().smallHitSize()));
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ToolbarHeightForRows(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ToolbarButtonSpacing()" />*/
	toolbarButtonSpacing: function () {
		return this.padding10();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ToolbarButtonSpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::HeaderHeight()" />*/
	headerHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(70);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::HeaderHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::TabBarItemWidth()" />*/
	tabBarItemWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(75);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::TabBarItemWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::TabBarItemLabelThreshold()" />*/
	tabBarItemLabelThreshold: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(70);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::TabBarItemLabelThreshold()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaHeight()" />*/
	buttonAreaHeight: function () {
		return this.largerHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaSpacing()" />*/
	buttonAreaSpacing: function () {
		return this.padding15();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaSpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaCondensedSpacing()" />*/
	buttonAreaCondensedSpacing: function () {
		return this.padding10();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ButtonAreaCondensedSpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::FixedButtonWidth()" />*/
	fixedButtonWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(120);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::FixedButtonWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::LargeCardHeight()" />*/
	largeCardHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(84);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::LargeCardHeight()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPTheme::ButtonAreaHeightForNumberOfLines(System.Int32)" />*/
	buttonAreaHeightForNumberOfLines: function (lines) {
		if (lines == 1) {
			return this.buttonAreaHeight();
		} else if (lines == 2) {
			return $.ig.NativeUIUtility.prototype.utility().densify(108);
		} else {
			return $.ig.truncate(((this.resolveButtonGuide($.ig.CPTheme.prototype.buttonGuideStyleMedium).size() * lines) * 1.3));
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPTheme::ButtonAreaHeightForNumberOfLines(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MaxTooltipWidth()" />*/
	maxTooltipWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(300);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MaxTooltipWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MaxTooltipHeight()" />*/
	maxTooltipHeight: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(200);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MaxTooltipHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::TabBarSize()" />*/
	tabBarSize: function () {
		return this.largeHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::TabBarSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SideBarSize()" />*/
	sideBarSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(230);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SideBarSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::Level1Width()" />*/
	level1Width: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(280);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::Level1Width()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::WideScreenThreshold()" />*/
	wideScreenThreshold: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(765);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::WideScreenThreshold()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::NavigationOffsetDistance()" />*/
	navigationOffsetDistance: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(50);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::NavigationOffsetDistance()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::NavBarHeight()" />*/
	navBarHeight: function () {
		return this.smallHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::NavBarHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::CardWidth()" />*/
	cardWidth: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(250);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::CardWidth()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::PinnedSideAreaSize()" />*/
	pinnedSideAreaSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(320);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::PinnedSideAreaSize()" />*/
	,
	__screenSize: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::UpdateAppScreenSize(System.Int32)" />*/
	updateAppScreenSize: function (size) {
		this.__screenSize = size;
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::UpdateAppScreenSize(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::IsLargeScreen()" />*/
	isLargeScreen: function () {
		return this.isLargeArea(this.__screenSize);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::IsLargeScreen()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::isMeidumScreen()" />*/
	isMeidumScreen: function () {
		return this.isMediumArea(this.__screenSize);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::isMeidumScreen()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::IsSmallScreen()" />*/
	isSmallScreen: function () {
		return this.isSmallArea(this.__screenSize);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::IsSmallScreen()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ScreenWidth()" />*/
	screenWidth: function () {
		return this.__screenSize;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ScreenWidth()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTheme::IsSmallArea(System.Int32)" />*/
	isSmallArea: function (w) {
		return !this.isMediumArea(w) && !this.isLargeArea(w);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTheme::IsSmallArea(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTheme::IsMediumArea(System.Int32)" />*/
	isMediumArea: function (w) {
		return !this.isLargeArea(w) && w >= $.ig.NativeUIUtility.prototype.utility().densify(450);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTheme::IsMediumArea(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTheme::IsMediumLargeArea(System.Int32)" />*/
	isMediumLargeArea: function (w) {
		return !this.isLargeArea(w) && w >= $.ig.NativeUIUtility.prototype.utility().densify(600);
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTheme::IsMediumLargeArea(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPTheme::IsLargeArea(System.Int32)" />*/
	isLargeArea: function (w) {
		return w >= this.wideScreenThreshold();
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPTheme::IsLargeArea(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsLevel1Inline()" />*/
	supportsLevel1Inline: function () {
		return this.__screenSize >= $.ig.NativeUIUtility.prototype.utility().densify(1180);
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsLevel1Inline()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsLevel3Inline()" />*/
	supportsLevel3Inline: function () {
		return $.ig.ThemeManager.prototype.theme().isLargeScreen();
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsLevel3Inline()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPItemLayoutGuide Infragistics.CPTheme::PopupListSizingGuide()" />*/
	popupListSizingGuide: function () {
		return this.resolveItemGuide($.ig.CPTheme.prototype.itemGuideStyleMedium);
	}
	/*<EndProperty Name="Infragistics.CPItemLayoutGuide Infragistics.CPTheme::PopupListSizingGuide()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::BorderWidth1()" />*/
	borderWidth1: function () {
		var val = $.ig.NativeUIUtility.prototype.utility().densify(1);
		if (val < 1) {
			val = 1;
		}
		return val;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::BorderWidth1()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::BorderWidth2()" />*/
	borderWidth2: function () {
		var val = $.ig.NativeUIUtility.prototype.utility().densify(2);
		if (val < 1) {
			val = 1;
		}
		return val;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::BorderWidth2()" />*/
	,
	__itemGuides: null,
	/*<BeginMethod Name="Infragistics.CPItemLayoutGuide Infragistics.CPTheme::ResolveItemGuide(System.String)" />*/
	resolveItemGuide: function (style) {
		if (this.__itemGuides == null) {
			this.__itemGuides = new $.ig.Dictionary(0);
			this.__itemGuides.item($.ig.CPTheme.prototype.itemGuideStyleExtraLarge, new $.ig.CPItemLayoutGuide($.ig.CPTheme.prototype.itemGuideStyleExtraLarge, $.ig.CPTheme.prototype.buttonGuideStyleExtraLarge, this.largeCardHeight(), this.fontSizeBody(), this.padding15(), this.padding10(), $.ig.NativeUIUtility.prototype.utility().densify(7), this.padding3()));
			this.__itemGuides.item($.ig.CPTheme.prototype.itemGuideStyleLarge, new $.ig.CPItemLayoutGuide($.ig.CPTheme.prototype.itemGuideStyleLarge, $.ig.CPTheme.prototype.buttonGuideStyleMedium, this.mediumHitSize(), this.fontSizeBody(), this.padding15(), this.padding10(), $.ig.NativeUIUtility.prototype.utility().densify(7), this.padding3()));
			this.__itemGuides.item($.ig.CPTheme.prototype.itemGuideStyleMedium, new $.ig.CPItemLayoutGuide($.ig.CPTheme.prototype.itemGuideStyleMedium, $.ig.CPTheme.prototype.buttonGuideStyleSmall, this.smallHitSize(), this.fontSizeBody(), this.padding10(), $.ig.NativeUIUtility.prototype.utility().densify(8), $.ig.NativeUIUtility.prototype.utility().densify(4), 0));
			this.__itemGuides.item($.ig.CPTheme.prototype.itemGuideStyleSmall, new $.ig.CPItemLayoutGuide($.ig.CPTheme.prototype.itemGuideStyleSmall, $.ig.CPTheme.prototype.buttonGuideStyleSmall, this.verySmallHitSize(), this.fontSizeBody(), this.padding10(), $.ig.NativeUIUtility.prototype.utility().densify(6), $.ig.NativeUIUtility.prototype.utility().densify(4), 0));
		}
		return this.__itemGuides.item(style);
	}
	/*<EndMethod Name="Infragistics.CPItemLayoutGuide Infragistics.CPTheme::ResolveItemGuide(System.String)" />*/
	,
	__buttonGuides: null,
	/*<BeginMethod Name="Infragistics.CPButtonLayoutGuide Infragistics.CPTheme::ResolveButtonGuide(System.String)" />*/
	resolveButtonGuide: function (style) {
		if (this.__buttonGuides == null) {
			this.__buttonGuides = new $.ig.Dictionary(0);
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleExtraLarge, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleExtraLarge, this.largeCardHeight(), this.largerHitSize(), this.padding30(), this.fontSizeH3(), this.padding25(), this.padding20()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleLarge, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleLarge, this.smallHitSize(), this.largeIconSize(), this.padding30(), this.fontSizeH3(), this.padding25(), this.padding20()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleMediumLarge, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleMediumLarge, this.largeHitSize(), this.mediumIconSize(), this.padding20(), this.fontSizeBody(), this.padding25(), this.indicatorIconSize()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleMedium, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleMedium, this.smallHitSize(), this.mediumIconSize(), this.padding20(), this.fontSizeBody(), this.padding25(), this.indicatorIconSize()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleSmall, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleSmall, $.ig.NativeUIUtility.prototype.utility().densify(36), this.smallIconSize(), this.indicatorIconSize(), this.fontSizeSecondary(), this.padding20(), this.indicatorIconSize()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleTinyMouseOnly, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleTinyMouseOnly, this.padding20(), this.tinyIconSize(), this.padding20(), this.fontSizeSecondary(), this.padding20(), this.indicatorIconSize()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleTinyReadOnly, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleTinyReadOnly, $.ig.NativeUIUtility.prototype.utility().densify(24), this.tinyIconSize(), this.padding20(), this.fontSizeSecondary(), this.padding20(), this.indicatorIconSize()));
			this.__buttonGuides.item($.ig.CPTheme.prototype.buttonGuideStyleExtraTinyMouseOnly, new $.ig.CPButtonLayoutGuide($.ig.CPTheme.prototype.buttonGuideStyleExtraTinyMouseOnly, this.padding16(), this.padding16(), this.indicatorIconSize(), this.fontSizeSecondary(), this.padding16(), this.extraTinyIconSize()));
		}
		return this.__buttonGuides.item(style);
	}
	/*<EndMethod Name="Infragistics.CPButtonLayoutGuide Infragistics.CPTheme::ResolveButtonGuide(System.String)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::LargeIconSize()" />*/
	largeIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(38);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::LargeIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::MediumIconSize()" />*/
	mediumIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(28);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::MediumIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::SmallIconSize()" />*/
	smallIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(24);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::SmallIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::TinyIconSize()" />*/
	tinyIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(20);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::TinyIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::IndicatorIconSize()" />*/
	indicatorIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(16);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::IndicatorIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::BadgeSize()" />*/
	badgeSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(14);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::BadgeSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::ExtraTinyIconSize()" />*/
	extraTinyIconSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(12);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::ExtraTinyIconSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyLevel1Shadow(Infragistics.CPView)" />*/
	applyLevel1Shadow: function (view) {
		this.applyLevel1ShadowForBackgroundColor(view, this.mainBackgroundColor());
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyLevel1Shadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyLevel1ShadowForBackgroundColor(Infragistics.CPView, Infragistics.CPThemeColor)" />*/
	applyLevel1ShadowForBackgroundColor: function (view, color) {
		if ($.ig.ColorUtility.prototype.isDarkColor(color.color())) {
			this.addShadowToView1(view, 1, 3, this.shadowOpacityOverDark());
		} else {
			this.addShadowToView(view, 1, 3);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyLevel1ShadowForBackgroundColor(Infragistics.CPView, Infragistics.CPThemeColor)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyLevel2Shadow(Infragistics.CPView)" />*/
	applyLevel2Shadow: function (view) {
		this.addShadowToView(view, 2, 6);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyLevel2Shadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyLevel3Shadow(Infragistics.CPView)" />*/
	applyLevel3Shadow: function (view) {
		this.addShadowToView(view, 4, 12);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyLevel3Shadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyAppToolBarShadow(Infragistics.CPView)" />*/
	applyAppToolBarShadow: function (view) {
		this.applyLevel1Shadow(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyAppToolBarShadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyContainerShadow(Infragistics.CPView)" />*/
	applyContainerShadow: function (view) {
		this.addShadowToView(view, 2, 6);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyContainerShadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyProgressShadowToView(Infragistics.CPView)" />*/
	applyProgressShadowToView: function (view) {
		this.addShadowToView(view, 2, 4);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyProgressShadowToView(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyPopoverShadow(Infragistics.CPView)" />*/
	applyPopoverShadow: function (view) {
		this.addShadowToView(view, 2, 6);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyPopoverShadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyModalDialogShadowToView(Infragistics.CPView)" />*/
	applyModalDialogShadowToView: function (view) {
		this.addShadowToView(view, 4, 12);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyModalDialogShadowToView(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyButtonAreaShadow(Infragistics.CPView)" />*/
	applyButtonAreaShadow: function (view) {
		this.applyButtonAreaShadow1(view, 1);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyButtonAreaShadow(Infragistics.CPView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyButtonAreaShadow(Infragistics.CPView, System.Double)" />*/
	applyButtonAreaShadow1: function (view, scale) {
		this.addShadowToView(view, 0, $.ig.truncate((10 * scale)));
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyButtonAreaShadow(Infragistics.CPView, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::ApplyCardShadow(Infragistics.CPView)" />*/
	applyCardShadow: function (view) {
		this.applyLevel1Shadow(view);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::ApplyCardShadow(Infragistics.CPView)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::ShadowOpacity()" />*/
	shadowOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::ShadowOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::ShadowOpacityOverDark()" />*/
	shadowOpacityOverDark: function () {
		return 0.2;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::ShadowOpacityOverDark()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::AddShadowToView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	addShadowToView: function (view, y, blur) {
		this.addShadowToView1(view, y, blur, this.shadowOpacity());
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::AddShadowToView(Infragistics.CPView, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::AddShadowToView(Infragistics.CPView, System.Int32, System.Int32, System.Double)" />*/
	addShadowToView1: function (view, y, blur, opacity) {
		view.addShadow($.ig.ColorUtility.prototype.createColor1((255 * opacity), 0, 0, 0), y, blur);
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::AddShadowToView(Infragistics.CPView, System.Int32, System.Int32, System.Double)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPTheme::NavButtonStyleGuideSize()" />*/
	navButtonStyleGuideSize: function () {
		return $.ig.CPTheme.prototype.buttonGuideStyleMedium;
	}
	/*<EndProperty Name="System.String Infragistics.CPTheme::NavButtonStyleGuideSize()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTheme::CreateNavBarButton(System.String, Infragistics.PathIcon, Infragistics.PointExecutionBlock)" />*/
	createNavBarButton: function (title, icon, action) {
		var button = new $.ig.CPIconLabelButton(0, this.navButtonStyleGuideSize(), $.ig.CPIconButtonStyle.prototype.standard);
		button.setText(title);
		button.setIcon(icon);
		button.addClickHandler(action);
		return button;
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTheme::CreateNavBarButton(System.String, Infragistics.PathIcon, Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTheme::CreateConfirmButton(System.String, Infragistics.PointExecutionBlock)" />*/
	createConfirmButton: function (title, action) {
		var button = new $.ig.CPIconLabelButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.accent);
		button.setText(title);
		button.addClickHandler(action);
		return button;
	}
	/*<EndMethod Name="Infragistics.CPIconLabelButton Infragistics.CPTheme::CreateConfirmButton(System.String, Infragistics.PointExecutionBlock)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTheme::SupportsColorIconsInPopups()" />*/
	supportsColorIconsInPopups: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTheme::SupportsColorIconsInPopups()" />*/
	,
	__revealGradient: null,
	__smallRevealGradient: null,
	/*<BeginMethod Name="Infragistics.CPLinearGradientBrush Infragistics.CPTheme::RevealGradientBrush(System.Int32)" />*/
	revealGradientBrush: function (w) {
		if (this.isSmallArea(w)) {
			if (this.__smallRevealGradient == null) {
				this.__smallRevealGradient = this.createRevealGradient(true);
			}
			return this.__smallRevealGradient;
		} else {
			if (this.__revealGradient == null) {
				this.__revealGradient = this.createRevealGradient(false);
			}
			return this.__revealGradient;
		}
	}
	/*<EndMethod Name="Infragistics.CPLinearGradientBrush Infragistics.CPTheme::RevealGradientBrush(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPLinearGradientBrush Infragistics.CPTheme::CreateRevealGradient(System.Boolean)" />*/
	createRevealGradient: function (isSmall) {
		var revealGradient = new $.ig.CPLinearGradientBrush();
		revealGradient._start = new $.ig.CPPoint(0, 0);
		revealGradient._end = new $.ig.CPPoint(100, 0);
		var colors = new $.ig.Array();
		colors = new $.ig.Array();
		colors.add($.ig.ColorUtility.prototype.createColor1(255, 251, 179, 101));
		colors.add($.ig.ColorUtility.prototype.createColor1(255, 236, 65, 122));
		revealGradient.colors(colors);
		var stops = new $.ig.Array();
		stops.add(0);
		if (isSmall) {
			stops.add(60);
		} else {
			stops.add(40);
		}
		revealGradient.stops(stops);
		return revealGradient;
	}
	/*<EndMethod Name="Infragistics.CPLinearGradientBrush Infragistics.CPTheme::CreateRevealGradient(System.Boolean)" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::RevealBrandingPrimaryColor()" />*/
	revealBrandingPrimaryColor: function () {
		return this.resolveColor("revealbpc", $.ig.ColorUtility.prototype.createColor1(255, 237, 74, 153));
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPTheme::RevealBrandingPrimaryColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::RevealLargeTearDropOpacity()" />*/
	revealLargeTearDropOpacity: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::RevealLargeTearDropOpacity()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::GetForegroundColorWithAlpha(System.Double)" />*/
	getForegroundColorWithAlpha: function (alpha) {
		return new $.ig.CPThemeColor(1, alpha, this.foregroundColor().color());
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTheme::GetForegroundColorWithAlpha(System.Double)" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPTheme::AutoScrollTimerDuration()" />*/
	autoScrollTimerDuration: function () {
		return 0.01;
	}
	/*<EndProperty Name="System.Double Infragistics.CPTheme::AutoScrollTimerDuration()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::AutoScrollHitThreshold()" />*/
	autoScrollHitThreshold: function () {
		return $.ig.ThemeManager.prototype.theme().largeHitSize();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::AutoScrollHitThreshold()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTheme::AutScrollStepSize()" />*/
	autScrollStepSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(10);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTheme::AutScrollStepSize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPTheme::StyleNavigationBarForModal(Infragistics.CPNavigationViewController)" />*/
	styleNavigationBarForModal: function (nav) {
		nav.styleNavigationBar($.ig.ThemeManager.prototype.theme().toolbarColorSet());
	}
	/*<EndMethod Name="System.Void Infragistics.CPTheme::StyleNavigationBarForModal(Infragistics.CPNavigationViewController)" />*/
	,
	$type: new $.ig.Type('CPTheme', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTheme" />*/

/*<BeginType Name="Infragistics.CPThemeColorSet" />*/

$.ig.util.defType('CPThemeColorSet', 'CPThemeColor', {
	__fg: null,
	__sfg: null,
	__hover: null,
	__pressed: null,
	init: function (initNumber, color) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPThemeColor.prototype.init.call(this, 0, color);
		this.setup();
	},
	init1: function (initNumber, alpha, color) {
		$.ig.CPThemeColor.prototype.init1.call(this, 1, alpha, color);
		this.setup();
	},
	/*<BeginMethod Name="System.Void Infragistics.CPThemeColorSet::Setup()" />*/
	setup: function () {
		this.setup1(0.15, 0.25);
	}
	/*<EndMethod Name="System.Void Infragistics.CPThemeColorSet::Setup()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPThemeColorSet::Setup(System.Double, System.Double)" />*/
	setup1: function (hover, pressed) {
		this.__hoverOpacity = hover;
		this.__pressedOpacity = pressed;
		this.__sfg = this.__fg = new $.ig.CPThemeColor(0, $.ig.ColorUtility.prototype.resolveForgroundColorForColor(this.color()));
		this.__hover = new $.ig.CPThemeColor(2, hover, 0, 0, 0);
		this.__pressed = new $.ig.CPThemeColor(2, pressed, 0, 0, 0);
	}
	/*<EndMethod Name="System.Void Infragistics.CPThemeColorSet::Setup(System.Double, System.Double)" />*/
	,
	__caf: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPThemeColorSet::UseColorAsForeground()" />*/
	useColorAsForeground: function (value) {
		if (arguments.length === 1) {
			if (this.__caf != value) {
				this.__caf = value;
				if (this.__caf) {
					this.__sfg = this.__fg = new $.ig.CPThemeColor(1, 1, this.color());
					this.__hover = new $.ig.CPThemeColor(1, this.hoverOpacity(), this.color());
					this.__pressed = new $.ig.CPThemeColor(1, this.pressedOpacity(), this.color());
				} else {
					this.setup();
				}
			}
			return value;
		} else {
			return this.__caf;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPThemeColorSet::UseColorAsForeground()" />*/
	,
	__caif: false,
	/*<BeginProperty Name="System.Boolean Infragistics.CPThemeColorSet::UseColorAsInteractiveForeground()" />*/
	useColorAsInteractiveForeground: function (value) {
		if (arguments.length === 1) {
			if (this.__caif != value) {
				this.__caif = value;
				if (this.__caif) {
					this.__fg = new $.ig.CPThemeColor(1, 1, this.color());
					this.__hover = new $.ig.CPThemeColor(1, this.hoverOpacity(), this.color());
					this.__pressed = new $.ig.CPThemeColor(1, this.pressedOpacity(), this.color());
				} else {
					this.setup();
				}
			}
			return value;
		} else {
			return this.__caif;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPThemeColorSet::UseColorAsInteractiveForeground()" />*/
	,
	__hoverOpacity: 0,
	__pressedOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeColorSet::HoverOpacity()" />*/
	hoverOpacity: function () {
		return this.__hoverOpacity;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeColorSet::HoverOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeColorSet::PressedOpacity()" />*/
	pressedOpacity: function () {
		return this.__pressedOpacity;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeColorSet::PressedOpacity()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Foreground()" />*/
	foreground: function (value) {
		if (arguments.length === 1) {
			this.__fg = value;
			return value;
		} else {
			return this.__fg;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Foreground()" />*/
	,
	__sepColor: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::SepColor()" />*/
	sepColor: function (value) {
		if (arguments.length === 1) {
			this.__sepColor = value;
			return value;
		} else {
			if (this.__sepColor == null) {
				return this.foreground();
			}
			return this.__sepColor;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::SepColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::SelectedForeground()" />*/
	selectedForeground: function () {
		return this.__sfg;
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::SelectedForeground()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Hover()" />*/
	hover: function (value) {
		if (arguments.length === 1) {
			this.__hover = value;
			return value;
		} else {
			return this.__hover;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Hover()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Pressed()" />*/
	pressed: function (value) {
		if (arguments.length === 1) {
			this.__pressed = value;
			return value;
		} else {
			return this.__pressed;
		}
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::Pressed()" />*/
	,
	__actualHover: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::ActualHoverColor()" />*/
	actualHoverColor: function () {
		if (this.__actualHover == null) {
			this.__actualHover = new $.ig.CPThemeColor(0, $.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.hover().color(), this.color(), this.hoverOpacity()));
		}
		return this.__actualHover;
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::ActualHoverColor()" />*/
	,
	__actualPressed: null,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::ActualPressedColor()" />*/
	actualPressedColor: function () {
		if (this.__actualPressed == null) {
			this.__actualPressed = new $.ig.CPThemeColor(0, $.ig.ColorUtility.prototype.calcluateColorOverColorWithAlpha(this.pressed().color(), this.color(), this.pressedOpacity()));
		}
		return this.__actualPressed;
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeColorSet::ActualPressedColor()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColorSet Infragistics.CPThemeColorSet::Copy()" />*/
	copy: function () {
		var c = new $.ig.CPThemeColorSet(0, this.color());
		c.useColorAsForeground(this.useColorAsForeground());
		return c;
	}
	/*<EndMethod Name="Infragistics.CPThemeColorSet Infragistics.CPThemeColorSet::Copy()" />*/
	,
	$type: new $.ig.Type('CPThemeColorSet', $.ig.CPThemeColor.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPThemeColorSet" />*/

/*<BeginType Name="Infragistics.CPItemLayoutGuide" />*/

$.ig.util.defType('CPItemLayoutGuide', 'Object', {
	__style: null,
	__buttonStyle: null,
	__h: 0,
	__ip: 0,
	__rep: 0,
	__leip: 0,
	__lep: 0,
	__fs: 0,
	init: function (style, buttonStyle, height, fontSize, indentPadding, leftEdgeIndentPadding, leftEdgePadding, rightEdgePadding) {
		$.ig.Object.prototype.init.call(this);
		this.__style = style;
		this.__buttonStyle = buttonStyle;
		this.__h = height;
		this.__fs = fontSize;
		this.__ip = indentPadding;
		this.__rep = rightEdgePadding;
		this.__leip = leftEdgeIndentPadding;
		this.__lep = leftEdgePadding;
	},
	/*<BeginProperty Name="System.String Infragistics.CPItemLayoutGuide::Name()" />*/
	name: function () {
		return this.__style;
	}
	/*<EndProperty Name="System.String Infragistics.CPItemLayoutGuide::Name()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPItemLayoutGuide::ButtonStyleName()" />*/
	buttonStyleName: function () {
		return this.__buttonStyle;
	}
	/*<EndProperty Name="System.String Infragistics.CPItemLayoutGuide::ButtonStyleName()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPButtonLayoutGuide Infragistics.CPItemLayoutGuide::ButtonGuide()" />*/
	buttonGuide: function () {
		return $.ig.ThemeManager.prototype.theme().resolveButtonGuide(this.__buttonStyle);
	}
	/*<EndProperty Name="Infragistics.CPButtonLayoutGuide Infragistics.CPItemLayoutGuide::ButtonGuide()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::Height()" />*/
	height: function () {
		return this.__h;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::Height()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::LeftEdgeIndentPadding()" />*/
	leftEdgeIndentPadding: function () {
		return this.__leip;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::LeftEdgeIndentPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::LeftEdgePadding()" />*/
	leftEdgePadding: function () {
		return this.__lep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::LeftEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::RightEdgePadding()" />*/
	rightEdgePadding: function () {
		return this.__rep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::RightEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::NoRightContentEdgePadding()" />*/
	noRightContentEdgePadding: function () {
		return this.__lep + this.__rep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::NoRightContentEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::FontSize()" />*/
	fontSize: function () {
		return this.__fs;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::FontSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::IndentPadding()" />*/
	indentPadding: function () {
		return this.__ip;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPItemLayoutGuide::IndentPadding()" />*/
	,
	$type: new $.ig.Type('CPItemLayoutGuide', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPItemLayoutGuide" />*/

/*<BeginType Name="Infragistics.CPButtonLayoutGuide" />*/

$.ig.util.defType('CPButtonLayoutGuide', 'Object', {
	__style: null,
	__h: 0,
	__is: 0,
	__inset: 0,
	__iws: 0,
	__lep: 0,
	__llep: 0,
	__ilp: 0,
	__iep: 0,
	__liep: 0,
	__dds: 0,
	__ais: 0,
	__fs: 0,
	__font: null,
	__accentFont: null,
	init: function (style, height, iconSize, accentIconSize, fontSize, largeLabelEdgePadding, dropDownSize) {
		$.ig.Object.prototype.init.call(this);
		this.__style = style;
		this.__h = height;
		this.__is = iconSize;
		this.__fs = fontSize;
		this.__inset = $.ig.NativeUIUtility.prototype.utility().densify(4);
		this.__iws = $.ig.NativeUIUtility.prototype.utility().densify(4);
		this.__lep = $.ig.ThemeManager.prototype.theme().padding16();
		this.__ilp = $.ig.NativeUIUtility.prototype.utility().densify(5);
		this.__iep = $.ig.NativeUIUtility.prototype.utility().densify(8);
		this.__llep = largeLabelEdgePadding;
		this.__liep = $.ig.NativeUIUtility.prototype.utility().densify(15);
		this.__font = $.ig.ThemeManager.prototype.theme().regularFont();
		this.__accentFont = $.ig.ThemeManager.prototype.theme().boldFont();
		this.__dds = dropDownSize;
		this.__ais = accentIconSize;
	},
	/*<BeginProperty Name="System.String Infragistics.CPButtonLayoutGuide::Name()" />*/
	name: function () {
		return this.__style;
	}
	/*<EndProperty Name="System.String Infragistics.CPButtonLayoutGuide::Name()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::Size()" />*/
	size: function () {
		return this.__h;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::Size()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::Inset()" />*/
	inset: function () {
		return this.__inset;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::Inset()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconWhiteSpace()" />*/
	iconWhiteSpace: function () {
		return this.__iws;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconWhiteSpace()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconSize()" />*/
	iconSize: function () {
		return this.__is;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::AccentIconSize()" />*/
	accentIconSize: function () {
		return this.__ais;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::AccentIconSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::FontSize()" />*/
	fontSize: function () {
		return this.__fs;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::FontSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LabelEdgePadding()" />*/
	labelEdgePadding: function () {
		return this.__lep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LabelEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LargeLabelEdgePadding()" />*/
	largeLabelEdgePadding: function () {
		return this.__llep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LargeLabelEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconLabelPadding()" />*/
	iconLabelPadding: function () {
		return this.__ilp;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconLabelPadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconEdgePadding()" />*/
	iconEdgePadding: function () {
		return this.__iep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::IconEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LargeIconEdgePadding()" />*/
	largeIconEdgePadding: function () {
		return this.__liep;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::LargeIconEdgePadding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::DropDownSize()" />*/
	dropDownSize: function () {
		return this.__dds;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPButtonLayoutGuide::DropDownSize()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPButtonLayoutGuide::Font()" />*/
	font: function () {
		return this.__font;
	}
	/*<EndProperty Name="System.String Infragistics.CPButtonLayoutGuide::Font()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.CPButtonLayoutGuide::AccentFont()" />*/
	accentFont: function () {
		return this.__accentFont;
	}
	/*<EndProperty Name="System.String Infragistics.CPButtonLayoutGuide::AccentFont()" />*/
	,
	$type: new $.ig.Type('CPButtonLayoutGuide', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPButtonLayoutGuide" />*/

/*<BeginType Name="Infragistics.CPThemeDark" />*/

$.ig.util.defType('CPThemeDark', 'CPTheme', {
	init: function () {
		$.ig.CPTheme.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.String Infragistics.CPThemeDark::Name()" />*/
	name: function () {
		return $.ig.ThemeManager.prototype.darkTheme;
	}
	/*<EndProperty Name="System.String Infragistics.CPThemeDark::Name()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::AppBackgroundColor()" />*/
	appBackgroundColor: function () {
		return this.resolveColor1("abc", 40, 46, 63);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::AppBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::MainBackgroundColor()" />*/
	mainBackgroundColor: function () {
		return this.resolveColor1("mb", 44, 50, 70);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::MainBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemBackgroundColor()" />*/
	itemBackgroundColor: function () {
		return this.resolveColor1("ibc", 55, 63, 86);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::MainSecondaryBackgroundColor()" />*/
	mainSecondaryBackgroundColor: function () {
		return this.resolveColor1("msbc", 44, 50, 70);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::MainSecondaryBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ForegroundColor()" />*/
	foregroundColor: function () {
		return this.resolveColor1("fg", 255, 255, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ForegroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::SubtleColor()" />*/
	subtleColor: function () {
		return this.resolveColor1("subtle", 83, 87, 102);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::SubtleColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemHeaderColor()" />*/
	itemHeaderColor: function () {
		return this.resolveColor1("itemhc", 36, 43, 61);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemHeaderColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::Level1PressedColor()" />*/
	level1PressedColor: function () {
		return this.resolveColor1("l1pc", 63, 71, 93);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::Level1PressedColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::Level1HoverOpacity()" />*/
	level1HoverOpacity: function () {
		return 0.45;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::Level1HoverOpacity()" />*/
	,
	__altCS: null,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::AlternativeToOverrideColor()" />*/
	alternativeToOverrideColor: function () {
		if (this.__altCS == null) {
			this.__altCS = this.resolveColorSet1("altmbOC", 1, this.resolveColor1("tb", 29, 33, 48));
			this.__altCS.sepColor(new $.ig.CPThemeColor(2, 1, 93, 97, 114));
		}
		return this.__altCS;
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::AlternativeToOverrideColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::RestOpacity()" />*/
	restOpacity: function () {
		return 0.8;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::RestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::DisabledOpacity()" />*/
	disabledOpacity: function () {
		return 0.35;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::DisabledOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::DividerOpacity()" />*/
	dividerOpacity: function () {
		return 0.2;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::DividerOpacity()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemHoverColor()" />*/
	itemHoverColor: function () {
		return this.resolveColor3("ihc", 0.1, 105, 136, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::ItemHoverColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::PressedOutlineOpacity()" />*/
	pressedOutlineOpacity: function () {
		return 0.6;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::PressedOutlineOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::ShadowOpacity()" />*/
	shadowOpacity: function () {
		return this.shadowOpacityOverDark();
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::ShadowOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::PopoverShadeOpacity()" />*/
	popoverShadeOpacity: function () {
		return 0.15;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::PopoverShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::ModalShadeOpacity()" />*/
	modalShadeOpacity: function () {
		return 0.4;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::ModalShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeDark::RevealLargeTearDropOpacity()" />*/
	revealLargeTearDropOpacity: function () {
		return 0.1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeDark::RevealLargeTearDropOpacity()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::AccentColorTextOnly()" />*/
	accentColorTextOnly: function () {
		return this.accentTextColorOverDark();
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeDark::AccentColorTextOnly()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPThemeDark::SupportsColorIconsInPopups()" />*/
	supportsColorIconsInPopups: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPThemeDark::SupportsColorIconsInPopups()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::HighlightColor()" />*/
	highlightColor: function () {
		return this.resolveColorSet("highlight", 102, 109, 126);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::HighlightColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::DateTypeColor()" />*/
	dateTypeColor: function () {
		return this.resolveColorSet("date", 255, 77, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::DateTypeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::NumericTypeColor()" />*/
	numericTypeColor: function () {
		return this.resolveColorSet("numeric", 255, 161, 93);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::NumericTypeColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::TextTypeColor()" />*/
	textTypeColor: function () {
		return this.resolveColorSet("text", 251, 136, 252);
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeDark::TextTypeColor()" />*/
	,
	$type: new $.ig.Type('CPThemeDark', $.ig.CPTheme.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPThemeDark" />*/

/*<BeginType Name="Infragistics.CPThemeLight" />*/

$.ig.util.defType('CPThemeLight', 'CPTheme', {
	init: function () {
		$.ig.CPTheme.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.String Infragistics.CPThemeLight::Name()" />*/
	name: function () {
		return $.ig.ThemeManager.prototype.lightTheme;
	}
	/*<EndProperty Name="System.String Infragistics.CPThemeLight::Name()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::AppBackgroundColor()" />*/
	appBackgroundColor: function () {
		return this.resolveColor1("abc", 233, 235, 242);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::AppBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::MainBackgroundColor()" />*/
	mainBackgroundColor: function () {
		return this.resolveColor1("mb", 246, 247, 250);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::MainBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemBackgroundColor()" />*/
	itemBackgroundColor: function () {
		return this.resolveColor1("ibc", 255, 255, 255);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::MainSecondaryBackgroundColor()" />*/
	mainSecondaryBackgroundColor: function () {
		return this.resolveColor1("msbc", 246, 247, 250);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::MainSecondaryBackgroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ForegroundColor()" />*/
	foregroundColor: function () {
		return this.resolveColor1("fg", 0, 0, 0);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ForegroundColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::SubtleColor()" />*/
	subtleColor: function () {
		return this.resolveColor1("subtle", 212, 214, 219);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::SubtleColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemHeaderColor()" />*/
	itemHeaderColor: function () {
		return this.resolveColor1("ihc", 250, 251, 252);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemHeaderColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::Level1PressedColor()" />*/
	level1PressedColor: function () {
		return this.resolveColor1("l1pc", 201, 205, 224);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::Level1PressedColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::Level1HoverOpacity()" />*/
	level1HoverOpacity: function () {
		return 0.45;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::Level1HoverOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::RestOpacity()" />*/
	restOpacity: function () {
		return 0.8;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::RestOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::DisabledOpacity()" />*/
	disabledOpacity: function () {
		return 0.4;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::DisabledOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::DividerOpacity()" />*/
	dividerOpacity: function () {
		return 0.1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::DividerOpacity()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemHoverColor()" />*/
	itemHoverColor: function () {
		return this.resolveColor3("ihoverc", 0.2, 178, 191, 220);
	}
	/*<EndProperty Name="Infragistics.CPThemeColor Infragistics.CPThemeLight::ItemHoverColor()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::PressedOutlineOpacity()" />*/
	pressedOutlineOpacity: function () {
		return 0.5;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::PressedOutlineOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::ShadowOpacity()" />*/
	shadowOpacity: function () {
		return 0.1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::ShadowOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::PopoverShadeOpacity()" />*/
	popoverShadeOpacity: function () {
		return 0.05;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::PopoverShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::ModalShadeOpacity()" />*/
	modalShadeOpacity: function () {
		return 0.2;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::ModalShadeOpacity()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.CPThemeLight::RevealLargeTearDropOpacity()" />*/
	revealLargeTearDropOpacity: function () {
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.CPThemeLight::RevealLargeTearDropOpacity()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPThemeLight::SupportsColorIconsInPopups()" />*/
	supportsColorIconsInPopups: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPThemeLight::SupportsColorIconsInPopups()" />*/
	,
	/*<BeginProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeLight::HighlightColor()" />*/
	highlightColor: function () {
		return this.infoBackgroundColor();
	}
	/*<EndProperty Name="Infragistics.CPThemeColorSet Infragistics.CPThemeLight::HighlightColor()" />*/
	,
	$type: new $.ig.Type('CPThemeLight', $.ig.CPTheme.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPThemeLight" />*/

/*<BeginType Name="Infragistics.SystemThemeManager" />*/

$.ig.util.defType('SystemThemeManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__supportsAutoTheme: false,
	/*<BeginMethod Name="System.Boolean Infragistics.SystemThemeManager::SupportsAutoTheme()" />*/
	supportsAutoTheme: function () {
		return $.ig.SystemThemeManager.prototype.__utility.__supportsAutoTheme;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SystemThemeManager::SupportsAutoTheme()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::RegisterAutoTheme(System.Boolean, System.Boolean)" />*/
	registerAutoTheme: function (supportsAutoTheme, usesAutoTheme) {
		$.ig.SystemThemeManager.prototype.__usesAutoTheme = usesAutoTheme;
		if ($.ig.SystemThemeManager.prototype.__systemThemeManager == null) {
			$.ig.SystemThemeManager.prototype.__systemThemeManager = new $.ig.NativeSystemThemeManager();
		}
		if ($.ig.SystemThemeManager.prototype.__utility == null) {
			$.ig.SystemThemeManager.prototype.__utility = new $.ig.SystemThemeManager();
		}
		$.ig.SystemThemeManager.prototype.__utility.__supportsAutoTheme = $.ig.SystemThemeManager.prototype.__systemThemeManager.supportsSystemTheme() && supportsAutoTheme;
		if ($.ig.SystemThemeManager.prototype.__utility.__supportsAutoTheme && usesAutoTheme) {
			$.ig.SystemThemeManager.prototype.__systemThemeManager.resolveSystemTheme(function (theme) {
				$.ig.SystemThemeManager.prototype.setTheme(theme, true);
			});
		} else {
			$.ig.SystemThemeManager.prototype.setTheme($.ig.ThemeManager.prototype.theme().name(), true);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::RegisterAutoTheme(System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::UpdateRegistration(System.Boolean)" />*/
	updateRegistration: function (startListening) {
		$.ig.SystemThemeManager.prototype.__usesAutoTheme = startListening;
		if (startListening) {
			if (!$.ig.SystemThemeManager.prototype.__systemThemeManager.isRegistered()) {
				$.ig.SystemThemeManager.prototype.registerAutoTheme(true, true);
			}
			$.ig.SystemThemeManager.prototype.__systemThemeManager.startListening();
		} else {
			$.ig.SystemThemeManager.prototype.__systemThemeManager.stopListening();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::UpdateRegistration(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::ToggleAutoTheme(System.Boolean)" />*/
	toggleAutoTheme: function (usesAutoTheme) {
		if (usesAutoTheme) {
			$.ig.SystemThemeManager.prototype.updateRegistration(true);
		} else {
			$.ig.SystemThemeManager.prototype.updateRegistration(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::ToggleAutoTheme(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::UpdatedUserFileReceived(System.Boolean, System.String, System.Boolean)" />*/
	updatedUserFileReceived: function (usesAutoTheme, theme, firstLoad) {
		if (usesAutoTheme && $.ig.SystemThemeManager.prototype.supportsAutoTheme()) {
			if ($.ig.SystemThemeManager.prototype.__usesAutoTheme != usesAutoTheme || firstLoad) {
				$.ig.SystemThemeManager.prototype.updateRegistration(true);
			} else {
				if ($.ig.SystemThemeManager.prototype.__systemTheme != null) {
					$.ig.ThemeManager.prototype.applyTheme($.ig.SystemThemeManager.prototype.__systemTheme, false);
				}
			}
		} else {
			$.ig.SystemThemeManager.prototype.updateRegistration(false);
			$.ig.SystemThemeManager.prototype.setTheme(theme, firstLoad);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::UpdatedUserFileReceived(System.Boolean, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::SetTheme(System.String, System.Boolean)" />*/
	setTheme: function (theme, force) {
		if (!$.ig.SystemThemeManager.prototype.__themeSettingLock) {
			if (theme != null && (theme != $.ig.ThemeManager.prototype.theme().name() || force)) {
				$.ig.ThemeManager.prototype.applyTheme(theme, force);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::SetTheme(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::Reset()" />*/
	reset: function () {
		if ($.ig.SystemThemeManager.prototype.__systemThemeManager != null) {
			$.ig.SystemThemeManager.prototype.__systemThemeManager.stopListening();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::SetThemeLock()" />*/
	setThemeLock: function () {
		$.ig.SystemThemeManager.prototype.__themeSettingLock = true;
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::SetThemeLock()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.SystemThemeManager::ClearThemeLock()" />*/
	clearThemeLock: function () {
		$.ig.SystemThemeManager.prototype.__themeSettingLock = false;
	}
	/*<EndMethod Name="System.Void Infragistics.SystemThemeManager::ClearThemeLock()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.SystemThemeManager::IsThemeLockOn()" />*/
	isThemeLockOn: function () {
		return $.ig.SystemThemeManager.prototype.__themeSettingLock;
	}
	/*<EndMethod Name="System.Boolean Infragistics.SystemThemeManager::IsThemeLockOn()" />*/
	,
	$type: new $.ig.Type('SystemThemeManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.SystemThemeManager" />*/

/*<BeginType Name="Infragistics.ThemeManager" />*/

$.ig.util.defType('ThemeManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.CPTheme Infragistics.ThemeManager::Theme()" />*/
	theme: function () {
		if ($.ig.ThemeManager.prototype.__theme == null) {
			$.ig.ThemeManager.prototype.__theme = new $.ig.CPThemeLight();
		}
		return $.ig.ThemeManager.prototype.__theme;
	}
	/*<EndMethod Name="Infragistics.CPTheme Infragistics.ThemeManager::Theme()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ThemeManager::ZoomLevel()" />*/
	zoomLevel: function (value) {
		if (arguments.length === 1) {
			var original = $.ig.ThemeManager.prototype.zoomLevel();
			if (original != value) {
				$.ig.ThemeManager.prototype.__cachedZoomLevel = value;
				$.ig.CPLongTermMemoryStorageUtility.prototype.saveDouble("zoom", value);
				if ($.ig.ThemeManager.prototype.__theme != null) {
					$.ig.ThemeManager.prototype.setTheme($.ig.ThemeManager.prototype.__theme.name(), true);
				}
			}
			return value;
		} else {
			if ($.ig.ThemeManager.prototype.__cachedZoomLevel == 0) {
				var val = $.ig.CPLongTermMemoryStorageUtility.prototype.getDouble("zoom");
				if (val == 0) {
					val = 1;
				}
				$.ig.ThemeManager.prototype.__cachedZoomLevel = val;
			}
			return $.ig.ThemeManager.prototype.__cachedZoomLevel;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ThemeManager::ZoomLevel()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::SetThemeObject(Infragistics.CPTheme, System.Boolean)" />*/
	setThemeObject: function (theme, force) {
		if (!force && $.ig.ThemeManager.prototype.__theme != null && $.ig.ThemeManager.prototype.__theme.name().equals(theme.name())) {
			if ($.ig.ThemeManager.prototype.__theme.toolbarOverrideColor() == $.ig.ThemeManager.prototype._toolbarColor && $.ig.ThemeManager.prototype.__theme.level2OverrideColor() == $.ig.ThemeManager.prototype._level2Color && $.ig.ThemeManager.prototype.__theme.level3OverrideColor() == $.ig.ThemeManager.prototype._level3Color) {
				return;
			}
		}
		$.ig.ThemeManager.prototype.__theme = theme;
		$.ig.ThemeManager.prototype.ensureThemeHasMarketingColors();
		$.ig.ThemeManager.prototype.notifyThemeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::SetThemeObject(Infragistics.CPTheme, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::SetMarktingColors(Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet)" />*/
	setMarktingColors: function (toolbarColor, level2Color, level3Color) {
		$.ig.ThemeManager.prototype._toolbarColor = toolbarColor;
		$.ig.ThemeManager.prototype._level2Color = level2Color;
		$.ig.ThemeManager.prototype._level3Color = level3Color;
		$.ig.ThemeManager.prototype.ensureThemeHasMarketingColors();
		$.ig.ThemeManager.prototype.notifyThemeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::SetMarktingColors(Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet, Infragistics.CPThemeColorSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::EnsureThemeHasMarketingColors()" />*/
	ensureThemeHasMarketingColors: function () {
		if ($.ig.ThemeManager.prototype.__theme != null) {
			$.ig.ThemeManager.prototype.__theme.toolbarOverrideColor($.ig.ThemeManager.prototype._toolbarColor);
			$.ig.ThemeManager.prototype.__theme.level2OverrideColor($.ig.ThemeManager.prototype._level2Color);
			$.ig.ThemeManager.prototype.__theme.level3OverrideColor($.ig.ThemeManager.prototype._level3Color);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::EnsureThemeHasMarketingColors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::SetTheme(System.String, System.Boolean)" />*/
	setTheme: function (themeName, force) {
		if (!force && $.ig.ThemeManager.prototype.__theme != null && $.ig.ThemeManager.prototype.__theme.name().equals(themeName)) {
			if ($.ig.ThemeManager.prototype.__theme.toolbarOverrideColor() == $.ig.ThemeManager.prototype._toolbarColor && $.ig.ThemeManager.prototype.__theme.level2OverrideColor() == $.ig.ThemeManager.prototype._level2Color && $.ig.ThemeManager.prototype.__theme.level3OverrideColor() == $.ig.ThemeManager.prototype._level3Color) {
				return;
			}
		}
		if (themeName == $.ig.ThemeManager.prototype.lightTheme) {
			$.ig.ThemeManager.prototype.__theme = new $.ig.CPThemeLight();
		} else {
			$.ig.ThemeManager.prototype.__theme = new $.ig.CPThemeDark();
		}
		$.ig.ThemeManager.prototype.ensureThemeHasMarketingColors();
		$.ig.ThemeManager.prototype.notifyThemeChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::SetTheme(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::NotifyThemeChanged()" />*/
	notifyThemeChanged: function () {
		if ($.ig.ThemeManager.prototype.__listeners != null) {
			var keys = $.ig.NativeDictionaryUtility.prototype.getKeys($.ig.ThemeManager.prototype.__listeners);
			for (var i = 0; i < keys.length; i++) {
				var key = keys[i];
				var action = $.ig.ThemeManager.prototype.__listeners.item(key);
				action();
			}
		}
		$.ig.UIPathIcons.prototype.icons().reset();
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::NotifyThemeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::RegisterListener(System.String, Infragistics.ExecutionBlock)" />*/
	registerListener: function (key, action) {
		if ($.ig.ThemeManager.prototype.__listeners == null) {
			$.ig.ThemeManager.prototype.__listeners = new $.ig.Dictionary(0);
		}
		$.ig.ThemeManager.prototype.__listeners.item(key, action);
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::RegisterListener(System.String, Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::UnregisterListener(System.String)" />*/
	unregisterListener: function (key) {
		if ($.ig.ThemeManager.prototype.__listeners != null && $.ig.NativeDictionaryUtility.prototype.containsKey($.ig.ThemeManager.prototype.__listeners, key)) {
			$.ig.NativeDictionaryUtility.prototype.removeValue($.ig.ThemeManager.prototype.__listeners, key);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::UnregisterListener(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ThemeManager::ApplyTheme(System.String, System.Boolean)" />*/
	applyTheme: function (themeName, force) {
		if (themeName == null || themeName.length == 0) {
			themeName = $.ig.ThemeManager.prototype.lightTheme;
		}
		if ((themeName != $.ig.ThemeManager.prototype.darkTheme && themeName != $.ig.ThemeManager.prototype.lightTheme)) {
			themeName = $.ig.ThemeManager.prototype.lightTheme;
		}
		themeName = themeName.toLowerCase();
		$.ig.ThemeManager.prototype.setTheme(themeName, force);
	}
	/*<EndMethod Name="System.Void Infragistics.ThemeManager::ApplyTheme(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.CPList Infragistics.ThemeManager::GetAllThemeNames()" />*/
	getAllThemeNames: function () {
		var themeNames = new $.ig.Array();
		themeNames.add($.ig.ThemeManager.prototype.lightTheme);
		themeNames.add($.ig.ThemeManager.prototype.darkTheme);
		return themeNames;
	}
	/*<EndMethod Name="Infragistics.CPList Infragistics.ThemeManager::GetAllThemeNames()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPTheme Infragistics.ThemeManager::ResolveThemeFromName(System.String)" />*/
	resolveThemeFromName: function (themeName) {
		if (themeName.equals($.ig.ThemeManager.prototype.lightTheme)) {
			return new $.ig.CPThemeLight();
		} else if (themeName.equals($.ig.ThemeManager.prototype.darkTheme)) {
			return new $.ig.CPThemeDark();
		} else {
			return new $.ig.CPThemeLight();
		}
	}
	/*<EndMethod Name="Infragistics.CPTheme Infragistics.ThemeManager::ResolveThemeFromName(System.String)" />*/
	,
	$type: new $.ig.Type('ThemeManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ThemeManager" />*/

/*<BeginType Name="Infragistics.CPLabelTooltip" />*/

$.ig.util.defType('CPLabelTooltip', 'CPViewBase', {
	__mainLabel: null,
	__subLabel: null,
	init: function (initNumber, mainString, subString, color) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CPLabelTooltip.prototype.init1.call(this, 1, mainString, subString, color, $.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFont());
	},
	init1: function (initNumber, mainString, subString, color, fontSize, font) {
		$.ig.CPViewBase.prototype.init.call(this);
		if (color == null) {
			color = $.ig.ThemeManager.prototype.theme().tooltipColor();
		}
		this.__mainLabel = new $.ig.CPLabel();
		this.__mainLabel.setFont(fontSize, font);
		this.__mainLabel.setText(mainString);
		this.__mainLabel.setTextWrapping(true);
		this.__mainLabel.setTextClipping(true);
		this.__mainLabel.setNumberOfLinesToClipBy(12);
		this.__mainLabel.setTextColor(color.foreground().$native());
		this.addSubview(this.__mainLabel);
		if (subString != null && subString.length > 0) {
			this.__subLabel = new $.ig.CPLabel();
			this.__subLabel.setFont($.ig.ThemeManager.prototype.theme().fontSizeSecondary(), $.ig.ThemeManager.prototype.theme().regularFont());
			this.__subLabel.setText(subString);
			this.__subLabel.setTextWrapping(true);
			this.__subLabel.setTextClipping(true);
			this.__subLabel.setNumberOfLinesToClipBy(12);
			this.__subLabel.setTextColor(color.foreground().$native());
			this.addSubview(this.__subLabel);
		}
		this.__vPadding = $.ig.ThemeManager.prototype.theme().padding5();
		this.__hPadding = $.ig.ThemeManager.prototype.theme().padding10();
	},
	__calcH: 0,
	__calcW: 0,
	__mlw: 0,
	__mlh: 0,
	__slw: 0,
	__slh: 0,
	__hPadding: 0,
	__vPadding: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPLabelTooltip::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPViewBase.prototype.calculateSizeToFit.call(this);
		var totalPadding = this.__hPadding * 2;
		var max = $.ig.ThemeManager.prototype.theme().maxTooltipWidth() - totalPadding;
		this.__mainLabel.calculateSizeToFit();
		this.__mlw = this.__mainLabel.getCalculatedWidth();
		if (this.__mlw > max) {
			this.__mainLabel.calculateSizeToFit1(max);
			this.__mlw = this.__mainLabel.getCalculatedWidth();
		}
		this.__mlh = this.__mainLabel.getCalculatedHeight();
		this.__slw = 0;
		this.__slh = 0;
		if (this.__subLabel != null) {
			this.__subLabel.calculateSizeToFit();
			this.__slw = this.__subLabel.getCalculatedWidth();
			if (this.__slw > max) {
				this.__subLabel.setTextWrapping(true);
				this.__subLabel.calculateSizeToFit1(max);
				this.__slw = this.__subLabel.getCalculatedWidth();
			}
			this.__slh = this.__subLabel.getCalculatedHeight();
		}
		this.__calcH = (this.__mlh + this.__slh + (this.__vPadding * 2));
		this.__calcH = Math.max(this.__calcH, $.ig.NativeUIUtility.prototype.utility().densify(40));
		this.__calcH = Math.min(this.__calcH, $.ig.ThemeManager.prototype.theme().maxTooltipHeight());
		this.__calcW = Math.max(this.__slw, this.__mlw) + (this.__hPadding * 2);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabelTooltip::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLabelTooltip::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLabelTooltip::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPLabelTooltip::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPLabelTooltip::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabelTooltip::SetText(System.String)" />*/
	setText: function (mainText) {
		this.__mainLabel.setText(mainText);
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabelTooltip::SetText(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPLabelTooltip::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		if (this.__mlw == 0) {
			this.calculateSizeToFit();
		}
		var top = this.__vPadding;
		if (this.__mlh + this.__slh < h) {
			top = $.ig.intDivide(h, 2) - $.ig.intDivide((this.__mlh + this.__slh), 2);
		}
		var availH = h - this.__vPadding * 2;
		var mh = this.__mlh;
		if (mh > this.__slh && mh > availH - this.__slh) {
			mh = availH - this.__slh;
		}
		this.measureView1(this.__mainLabel, this.__hPadding, top, this.__mlw, mh, 1);
		top += mh;
		availH -= mh;
		if (this.__subLabel != null) {
			if (availH > 0) {
				this.__subLabel.isHidden(false);
				this.measureView1(this.__subLabel, this.__hPadding, top, this.__slw, availH, 1);
			} else {
				this.__subLabel.isHidden(true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPLabelTooltip::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPLabelTooltip', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPLabelTooltip" />*/

/*<BeginType Name="Infragistics.CPRichLabelTooltip" />*/

$.ig.util.defType('CPRichLabelTooltip', 'CPViewBase', {
	__ttInteractiveLabel: null,
	init: function (richText, richTriggers) {
		$.ig.CPViewBase.prototype.init.call(this);
		this.setBackgroundColor($.ig.ThemeManager.prototype.theme().foregroundColor().$native());
		this.__ttInteractiveLabel = new $.ig.InteractiveLabel();
		this.__ttInteractiveLabel.setFont1($.ig.ThemeManager.prototype.theme().fontSizeBody(), $.ig.ThemeManager.prototype.theme().regularFontName(), $.ig.ThemeManager.prototype.theme().boldFontName());
		this.__ttInteractiveLabel.setText(richText, richTriggers);
		this.__ttInteractiveLabel.setColors($.ig.ThemeManager.prototype.theme().tooltipColor().foreground().color(), $.ig.ThemeManager.prototype.theme().tooltipColor().foreground().color());
		this.addSubview(this.__ttInteractiveLabel);
		this.__vPadding = $.ig.ThemeManager.prototype.theme().padding5();
		this.__hPadding = $.ig.ThemeManager.prototype.theme().padding10();
	},
	__calcH: 0,
	__calcW: 0,
	__mlw: 0,
	__mlh: 0,
	__hPadding: 0,
	__vPadding: 0,
	/*<BeginMethod Name="System.Void Infragistics.CPRichLabelTooltip::CalculateSizeToFit()" />*/
	calculateSizeToFit: function () {
		$.ig.CPViewBase.prototype.calculateSizeToFit.call(this);
		var totalPadding = this.__hPadding * 2;
		var max = $.ig.ThemeManager.prototype.theme().maxTooltipWidth() - totalPadding;
		this.__ttInteractiveLabel.calculateSizeToFit();
		this.__mlw = this.__ttInteractiveLabel.getCalculatedWidth();
		if (this.__mlw > max) {
			this.__ttInteractiveLabel.setTextWrapping(true);
			this.__ttInteractiveLabel.calculateSizeToFit1(max);
			this.__mlw = this.__ttInteractiveLabel.getCalculatedWidth();
		}
		this.__mlh = this.__ttInteractiveLabel.getCalculatedHeight();
		this.__calcH = this.__mlh + (this.__vPadding * 2);
		this.__calcW = this.__mlw + (this.__hPadding * 2);
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichLabelTooltip::CalculateSizeToFit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPRichLabelTooltip::GetCalculatedWidth()" />*/
	getCalculatedWidth: function () {
		return this.__calcW;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPRichLabelTooltip::GetCalculatedWidth()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.CPRichLabelTooltip::GetCalculatedHeight()" />*/
	getCalculatedHeight: function () {
		return this.__calcH;
	}
	/*<EndMethod Name="System.Int32 Infragistics.CPRichLabelTooltip::GetCalculatedHeight()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPRichLabelTooltip::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		if (this.__mlw == 0) {
			this.calculateSizeToFit();
		}
		this.measureView(this.__ttInteractiveLabel, this.__hPadding, this.__vPadding, this.__mlw, this.__mlh);
	}
	/*<EndMethod Name="System.Void Infragistics.CPRichLabelTooltip::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPRichLabelTooltip', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPRichLabelTooltip" />*/

/*<BeginType Name="Infragistics.CPTooltipPopupManager" />*/

$.ig.util.defType('CPTooltipPopupManager', 'CPContentPopupManager', {
	__bgColorOverride: null,
	__clickToDismiss: false,
	init: function (relativeView, captureView, contentView, contentWidth, contentHeight, preferedLocation, bgColor, clickToDismiss) {
		$.ig.CPContentPopupManager.prototype.init.call(this, 0, relativeView, captureView, contentView, contentWidth, contentHeight, null, preferedLocation, false, null, false);
		this.__clickToDismiss = clickToDismiss;
		this.__bgColorOverride = bgColor;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::SupportsBackgroundView()" />*/
	supportsBackgroundView: function () {
		return this.__clickToDismiss;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::SupportsBackgroundView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::AutoHideWhenClickingOutsideView()" />*/
	autoHideWhenClickingOutsideView: function () {
		return this.__clickToDismiss;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::AutoHideWhenClickingOutsideView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::AutoHidesAfterDuration()" />*/
	autoHidesAfterDuration: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::AutoHidesAfterDuration()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::MinSize()" />*/
	minSize: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::MinSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::AddjustedOffsetForAnimation()" />*/
	addjustedOffsetForAnimation: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::AddjustedOffsetForAnimation()" />*/
	,
	/*<BeginMethod Name="Infragistics.CPThemeColor Infragistics.CPTooltipPopupManager::GetBackgroundColor()" />*/
	getBackgroundColor: function () {
		if (this.__bgColorOverride != null) {
			return this.__bgColorOverride;
		}
		return $.ig.ThemeManager.prototype.theme().tooltipColor();
	}
	/*<EndMethod Name="Infragistics.CPThemeColor Infragistics.CPTooltipPopupManager::GetBackgroundColor()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::CornerRadius()" />*/
	cornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().tooltipCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::CornerRadius()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::SupportsKeyboard()" />*/
	supportsKeyboard: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::SupportsKeyboard()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::ArrowSize()" />*/
	arrowSize: function () {
		return $.ig.NativeUIUtility.prototype.utility().densify(14);
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipPopupManager::ArrowSize()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::HasShadowBackground()" />*/
	hasShadowBackground: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipPopupManager::HasShadowBackground()" />*/
	,
	$type: new $.ig.Type('CPTooltipPopupManager', $.ig.CPContentPopupManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTooltipPopupManager" />*/

/*<BeginType Name="Infragistics.CPTooltipListPopupManager" />*/

$.ig.util.defType('CPTooltipListPopupManager', 'CPPopupListManager', {
	init: function (relativeView, captureView, dismiss, items, preferedLocation, secondaryLocation, supportsBackgroundView, header, x, y, x2, y2, footer, pointerMoveAction) {
		this.__preferredSecondaryLocation = $.ig.CPPopupPosition.prototype.none;
		$.ig.CPPopupListManager.prototype.init1.call(this, 1, relativeView, captureView, false, dismiss, 1, items, preferedLocation, supportsBackgroundView, -1, -1, header, x, y, footer);
		this.__preferredSecondaryLocation = secondaryLocation;
		this.__pointerActionHandler = pointerMoveAction;
		this.setCoordinates(x, y, x2, y2);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.CPTooltipListPopupManager::SupportsAnimating()" />*/
	supportsAnimating: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.CPTooltipListPopupManager::SupportsAnimating()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipListPopupManager::ArrowSize()" />*/
	arrowSize: function () {
		return 0;
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipListPopupManager::ArrowSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.CPTooltipListPopupManager::CornerRadius()" />*/
	cornerRadius: function () {
		return $.ig.ThemeManager.prototype.theme().itemCornerRadius();
	}
	/*<EndProperty Name="System.Int32 Infragistics.CPTooltipListPopupManager::CornerRadius()" />*/
	,
	__preferredSecondaryLocation: 0,
	/*<BeginProperty Name="Infragistics.CPPopupPosition Infragistics.CPTooltipListPopupManager::PreferredSecondaryLocation()" />*/
	preferredSecondaryLocation: function () {
		return this.__preferredSecondaryLocation;
	}
	/*<EndProperty Name="Infragistics.CPPopupPosition Infragistics.CPTooltipListPopupManager::PreferredSecondaryLocation()" />*/
	,
	__pointerActionHandler: null,
	/*<BeginMethod Name="System.Void Infragistics.CPTooltipListPopupManager::InitializeContainerView(Infragistics.CPPopupContentContainerView)" />*/
	initializeContainerView: function (container) {
		var $self = this;
		$.ig.CPPopupListManager.prototype.initializeContainerView.call(this, container);
		if (!this.supportsBackgroundView()) {
			(container).addPointerActionHandler(function (x, y) {
				if ($self.__pointerActionHandler != null) {
					var translatedPoint = container.translatePoint(new $.ig.CPPoint(x, y), $self._relativeView);
					$self.__pointerActionHandler($.ig.truncate(translatedPoint._x), $.ig.truncate(translatedPoint._y));
				}
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPTooltipListPopupManager::InitializeContainerView(Infragistics.CPPopupContentContainerView)" />*/
	,
	$type: new $.ig.Type('CPTooltipListPopupManager', $.ig.CPPopupListManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPTooltipListPopupManager" />*/

/*<BeginType Name="Infragistics.UIUtility" />*/

$.ig.util.defType('UIUtility', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.UIUtility Infragistics.UIUtility::Utility()" />*/
	utility: function () {
		if ($.ig.UIUtility.prototype.__utility == null) {
			$.ig.UIUtility.prototype.__utility = new $.ig.UIUtility();
		}
		return $.ig.UIUtility.prototype.__utility;
	}
	/*<EndMethod Name="Infragistics.UIUtility Infragistics.UIUtility::Utility()" />*/
	,
	__urlInterceptor: null,
	__activityInterceptor: null,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::RegisterUrlInterceptor(Infragistics.CancellableObjectBlock)" />*/
	registerUrlInterceptor: function (urlInterceptor) {
		$.ig.UIUtility.prototype.utility().__urlInterceptor = urlInterceptor;
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::RegisterUrlInterceptor(Infragistics.CancellableObjectBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::RegisterActivityInterceptor(Infragistics.ExecutionBlock)" />*/
	registerActivityInterceptor: function (activityInterceptor) {
		$.ig.UIUtility.prototype.utility().__activityInterceptor = activityInterceptor;
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::RegisterActivityInterceptor(Infragistics.ExecutionBlock)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::TrackActivity()" />*/
	trackActivity: function () {
		if ($.ig.UIUtility.prototype.utility().__activityInterceptor != null) {
			$.ig.UIUtility.prototype.utility().__activityInterceptor();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::TrackActivity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::OpenUrl(System.String)" />*/
	openUrl: function (url) {
		var util = $.ig.UIUtility.prototype.utility();
		if (util.__urlInterceptor != null && util.__urlInterceptor(url)) {
			return;
		}
		$.ig.NativeUIUtility.prototype.utility().openUrl(url);
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::OpenUrl(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::AddRange(Infragistics.CPList, Infragistics.CPList)" />*/
	addRange: function (from, to) {
		var count = from.length;
		for (var i = 0; i < count; i++) {
			to.add(from[i]);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::AddRange(Infragistics.CPList, Infragistics.CPList)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.UIUtility::ConvertDegreesToRadians(System.Single)" />*/
	convertDegreesToRadians: function (degrees) {
		return degrees * (Math.PI / 180);
	}
	/*<EndMethod Name="System.Single Infragistics.UIUtility::ConvertDegreesToRadians(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Single Infragistics.UIUtility::ConvertRadiansToDegrees(System.Single)" />*/
	convertRadiansToDegrees: function (radians) {
		return radians / (Math.PI / 180);
	}
	/*<EndMethod Name="System.Single Infragistics.UIUtility::ConvertRadiansToDegrees(System.Single)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.UIUtility::GetValidAccessibilityName(System.String)" />*/
	getValidAccessibilityName: function (id) {
		if (id != null) {
			id = $.ig.NativeStringUtility.prototype.regexReplace(id, "[^a-zA-Z0-9]", "_");
			return $.ig.NativeStringUtility.prototype.regexReplace(id, "^[0-9]", "_");
		}
		return "";
	}
	/*<EndMethod Name="System.String Infragistics.UIUtility::GetValidAccessibilityName(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.UIUtility::GetValidAccessibilityName(System.String, System.String)" />*/
	getValidAccessibilityName1: function (prefix, identifier) {
		if (prefix != null && identifier != null) {
			return $.ig.UIUtility.prototype.getValidAccessibilityName(prefix + identifier);
		}
		return "";
	}
	/*<EndMethod Name="System.String Infragistics.UIUtility::GetValidAccessibilityName(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityNameIfNotSet(Infragistics.CPViewCore, System.String)" />*/
	setAccessibilityNameIfNotSet: function (element, identifier) {
		if (element != null && identifier != null && (element.accessibilityName() == null || element.accessibilityName() == "")) {
			$.ig.UIUtility.prototype.setAccessibilityName1(element, identifier);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityNameIfNotSet(Infragistics.CPViewCore, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String)" />*/
	setAccessibilityName1: function (element, identifier) {
		if (element != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String)" />*/
	setAccessibilityName2: function (element, prefix, identifier) {
		if (element != null && prefix != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(prefix + identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String, System.String)" />*/
	setAccessibilityName3: function (element, prefix1, prefix2, identifier) {
		if (element != null && prefix1 != null && prefix2 != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(prefix1 + prefix2 + identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String, System.String, System.String)" />*/
	setAccessibilityName4: function (element, prefix1, prefix2, prefix3, identifier) {
		if (element != null && prefix1 != null && prefix2 != null && prefix3 != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(prefix1 + prefix2 + prefix3 + identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPViewCore, System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPLabel, System.String)" />*/
	setAccessibilityName: function (element, identifier) {
		if (element != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetAccessibilityName(Infragistics.CPLabel, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityNameIfNotSet(System.String, System.String)" />*/
	setPopUpAccessibilityNameIfNotSet: function (popUpID, identifier) {
		var element = $.ig.CPPopupManager.prototype.getPopupManagerById(popUpID);
		if (element != null && identifier != null && $.ig.CPStringUtility.prototype.isNullOrEmpty(element.accessibilityName())) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityNameIfNotSet(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityName(System.String, System.String)" />*/
	setPopUpAccessibilityName: function (popUpID, identifier) {
		var element = $.ig.CPPopupManager.prototype.getPopupManagerById(popUpID);
		$.ig.UIUtility.prototype.setPopUpAccessibilityNameWithElement(element, identifier);
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityName(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityNameWithElement(Infragistics.CPPopupManagerBase, System.String)" />*/
	setPopUpAccessibilityNameWithElement: function (element, identifier) {
		if (element != null && identifier != null) {
			element.accessibilityName($.ig.UIUtility.prototype.getValidAccessibilityName(identifier));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::SetPopUpAccessibilityNameWithElement(Infragistics.CPPopupManagerBase, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.UIUtility::ReleaseMouseCapture()" />*/
	releaseMouseCapture: function () {
		$.ig.UIEventManager.prototype.releaseMouseDownCapture();
	}
	/*<EndMethod Name="System.Void Infragistics.UIUtility::ReleaseMouseCapture()" />*/
	,
	$type: new $.ig.Type('UIUtility', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.UIUtility" />*/

/*<BeginType Name="Infragistics.CPVideoView" />*/

$.ig.util.defType('CPVideoView', 'CPViewBase', {
	__slider: null,
	__closeButton: null,
	__playButton: null,
	__player: null,
	__paused: false,
	init: function (uriString, dismissed) {
		var $self = this;
		$.ig.CPViewBase.prototype.init.call(this);
		this.setBackgroundColor($.ig.ColorUtility.prototype.createNativeColor(255, 0, 0, 0));
		this.__paused = false;
		this.__player = new $.ig.CPVideoPlayer(uriString, function () {
			$self.playerPositionUpdated();
		}, function (position, duration) {
			$self.playerFinishedPlaying(position, duration);
		}, dismissed);
		this.addSubview(this.__player);
		this.__closeButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.minimal);
		this.__closeButton.setIcon($.ig.UIPathIcons.prototype.icons().getEMCloseIcon());
		this.__closeButton.setIconColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__closeButton.isHidden(true);
		this.__closeButton.addClickHandler(function (x, y) {
			$self.playerDismissed();
		});
		this.addSubview(this.__closeButton);
		this.__playButton = new $.ig.CPIconButton(0, $.ig.CPTheme.prototype.buttonGuideStyleMedium, $.ig.CPIconButtonStyle.prototype.minimal);
		this.__playButton.setIcon($.ig.UIPathIcons.prototype.icons().getRightArrowIcon());
		this.__playButton.setIconColor($.ig.ThemeManager.prototype.theme().itemBackgroundColor().$native());
		this.__playButton.isHidden(true);
		this.__playButton.addClickHandler(function (x, y) {
			$self.playButtonClicked();
		});
		this.addSubview(this.__playButton);
		this.__slider = new $.ig.CPSlider(false);
		this.__slider.isHidden(true);
		this.__slider._value = 0;
		this.__slider._maxValue = 20;
		this.__slider._minValue = 0;
		this.__slider._valueChanged = function (val) {
			return $self.sliderUpdated(val);
		};
		this.addSubview(this.__slider);
		$.ig.ProgressHelper.prototype.showProgress(this, null, function () {
			$self.playerDismissed();
		}, false, true);
		this.__player.play();
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__closeButton, "closeButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__playButton, "playButton");
		$.ig.UIUtility.prototype.setAccessibilityName1(this.__slider, "slider");
	},
	/*<BeginMethod Name="System.Void Infragistics.CPVideoView::PlayerPositionUpdated()" />*/
	playerPositionUpdated: function () {
		this.__playButton.setIcon($.ig.UIPathIcons.prototype.icons().getChevronUpIcon());
		this.__closeButton.isHidden(false);
		this.__playButton.isHidden(false);
		this.__slider.isHidden(false);
		this.__playButton.iconView().render1(false);
		$.ig.ProgressHelper.prototype.hideProgress(this, false);
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoView::PlayerPositionUpdated()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoView::PlayerFinishedPlaying(System.Double, System.Double)" />*/
	playerFinishedPlaying: function (pos, dur) {
		if (dur > 0) {
			this.__slider._value = (pos / dur * this.__slider._maxValue);
			this.__slider.triggerSizeChanged();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoView::PlayerFinishedPlaying(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoView::PlayerDismissed()" />*/
	playerDismissed: function () {
		this.__player.dismiss();
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoView::PlayerDismissed()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoView::PlayButtonClicked()" />*/
	playButtonClicked: function () {
		if (this.__paused) {
			this.__paused = false;
			this.__playButton.setIcon($.ig.UIPathIcons.prototype.icons().getRightArrowIcon());
			this.__playButton.iconView().render1(false);
			this.__player.play();
		} else {
			this.__paused = true;
			this.__playButton.setIcon($.ig.UIPathIcons.prototype.icons().getChevronUpIcon());
			this.__playButton.iconView().render1(false);
			this.__player.pause();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoView::PlayButtonClicked()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.CPVideoView::SliderUpdated(System.Single)" />*/
	sliderUpdated: function (val) {
		this.__player.setPosition(val);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.CPVideoView::SliderUpdated(System.Single)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.CPVideoView::SizeChanged(System.Int32, System.Int32)" />*/
	sizeChanged: function (w, h) {
		$.ig.CPViewBase.prototype.sizeChanged.call(this, w, h);
		this.measureView(this.__player, 0, 0, w, h);
		var buttonSize = $.ig.ThemeManager.prototype.theme().smallHitSize();
		this.measureView(this.__closeButton, w - buttonSize, 0, buttonSize, buttonSize);
		this.measureView(this.__playButton, buttonSize, h - buttonSize, buttonSize, buttonSize);
		this.measureView(this.__slider, buttonSize * 2, h - buttonSize, w - buttonSize * 4, buttonSize);
	}
	/*<EndMethod Name="System.Void Infragistics.CPVideoView::SizeChanged(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('CPVideoView', $.ig.CPViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.CPVideoView" />*/

/*<BeginStatics Name="Infragistics.ViewControllerModalPresentationStyle" />*/

$.ig.ViewControllerModalPresentationStyle.prototype.fullScreen = 0;
$.ig.ViewControllerModalPresentationStyle.prototype.formSheet = 2;
$.ig.ViewControllerModalPresentationStyle.prototype.currentContext = 3;
$.ig.ViewControllerModalPresentationStyle.prototype.overCurrentContext = 4;
/*<EndStatics Name="Infragistics.ViewControllerModalPresentationStyle" />*/

/*<BeginStatics Name="Infragistics.EscapeKeyCloseMode" />*/

$.ig.EscapeKeyCloseMode.prototype.none = 0;
$.ig.EscapeKeyCloseMode.prototype.close = 1;
$.ig.EscapeKeyCloseMode.prototype.ask = 2;
/*<EndStatics Name="Infragistics.EscapeKeyCloseMode" />*/

/*<BeginStatics Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode" />*/

$.ig.CPTextViewOnScreenKeyboardResizeMode.prototype.none = 0;
$.ig.CPTextViewOnScreenKeyboardResizeMode.prototype.moveWindow = 1;
$.ig.CPTextViewOnScreenKeyboardResizeMode.prototype.resizeWindow = 2;
/*<EndStatics Name="Infragistics.CPTextViewOnScreenKeyboardResizeMode" />*/

/*<BeginStatics Name="Infragistics.ZoomType" />*/

$.ig.ZoomType.prototype.none = 0;
$.ig.ZoomType.prototype.both = 1;
$.ig.ZoomType.prototype.horizontalOnly = 2;
$.ig.ZoomType.prototype.verticalOnly = 3;
/*<EndStatics Name="Infragistics.ZoomType" />*/

/*<BeginStatics Name="Infragistics.CPPopupListItemSelectionMode" />*/

$.ig.CPPopupListItemSelectionMode.prototype.radial = 0;
$.ig.CPPopupListItemSelectionMode.prototype.border = 1;
$.ig.CPPopupListItemSelectionMode.prototype.none = 2;
/*<EndStatics Name="Infragistics.CPPopupListItemSelectionMode" />*/

/*<BeginStatics Name="Infragistics.CPPopupPosition" />*/

$.ig.CPPopupPosition.prototype.above = 0;
$.ig.CPPopupPosition.prototype.below = 1;
$.ig.CPPopupPosition.prototype.left = 2;
$.ig.CPPopupPosition.prototype.right = 3;
$.ig.CPPopupPosition.prototype.menu = 4;
$.ig.CPPopupPosition.prototype.auto = 5;
$.ig.CPPopupPosition.prototype.toast = 6;
$.ig.CPPopupPosition.prototype.modal = 7;
$.ig.CPPopupPosition.prototype.none = 8;
/*<EndStatics Name="Infragistics.CPPopupPosition" />*/

/*<BeginStatics Name="Infragistics.PathCommandType" />*/

$.ig.PathCommandType.prototype.move = 0;
$.ig.PathCommandType.prototype.curve = 1;
$.ig.PathCommandType.prototype.end = 2;
$.ig.PathCommandType.prototype.line = 3;
$.ig.PathCommandType.prototype.arc = 4;
$.ig.PathCommandType.prototype.none = 5;
/*<EndStatics Name="Infragistics.PathCommandType" />*/

/*<BeginStatics Name="Infragistics.ImageHorizontalAlignment" />*/

$.ig.ImageHorizontalAlignment.prototype.center = 0;
$.ig.ImageHorizontalAlignment.prototype.left = 1;
$.ig.ImageHorizontalAlignment.prototype.right = 2;
/*<EndStatics Name="Infragistics.ImageHorizontalAlignment" />*/

/*<BeginStatics Name="Infragistics.ImageVerticalAlignment" />*/

$.ig.ImageVerticalAlignment.prototype.center = 0;
$.ig.ImageVerticalAlignment.prototype.top = 1;
$.ig.ImageVerticalAlignment.prototype.bottom = 2;
/*<EndStatics Name="Infragistics.ImageVerticalAlignment" />*/

/*<BeginStatics Name="Infragistics.CPGridViewSelectionType" />*/

$.ig.CPGridViewSelectionType.prototype.cell = 0;
$.ig.CPGridViewSelectionType.prototype.row = 1;
$.ig.CPGridViewSelectionType.prototype.none = 2;
/*<EndStatics Name="Infragistics.CPGridViewSelectionType" />*/

/*<BeginStatics Name="Infragistics.CPGridViewItemExpandableType" />*/

$.ig.CPGridViewItemExpandableType.prototype.tree = 0;
$.ig.CPGridViewItemExpandableType.prototype.header = 1;
/*<EndStatics Name="Infragistics.CPGridViewItemExpandableType" />*/

/*<BeginStatics Name="Infragistics.CPGridViewCheckBoxEditMode" />*/

$.ig.CPGridViewCheckBoxEditMode.prototype.none = 0;
$.ig.CPGridViewCheckBoxEditMode.prototype.checkBoxHitArea = 1;
$.ig.CPGridViewCheckBoxEditMode.prototype.entireCellIsHitArea = 2;
$.ig.CPGridViewCheckBoxEditMode.prototype.readOnly = 3;
/*<EndStatics Name="Infragistics.CPGridViewCheckBoxEditMode" />*/

/*<BeginStatics Name="Infragistics.CPGridViewCellItemHitArea" />*/

$.ig.CPGridViewCellItemHitArea.prototype.itemOnly = 0;
$.ig.CPGridViewCellItemHitArea.prototype.entireCell = 1;
/*<EndStatics Name="Infragistics.CPGridViewCellItemHitArea" />*/

/*<BeginStatics Name="Infragistics.CPGridViewFixedColumnDirection" />*/

$.ig.CPGridViewFixedColumnDirection.prototype.none = 0;
$.ig.CPGridViewFixedColumnDirection.prototype.left = 1;
$.ig.CPGridViewFixedColumnDirection.prototype.right = 2;
/*<EndStatics Name="Infragistics.CPGridViewFixedColumnDirection" />*/

/*<BeginStatics Name="Infragistics.CPSectionSortType" />*/

$.ig.CPSectionSortType.prototype.asc = 0;
$.ig.CPSectionSortType.prototype.desc = 1;
$.ig.CPSectionSortType.prototype.none = 2;
/*<EndStatics Name="Infragistics.CPSectionSortType" />*/

/*<BeginStatics Name="Infragistics.CPCellType" />*/

$.ig.CPCellType.prototype.cell = 0;
$.ig.CPCellType.prototype.fixedLeftCell = 1;
$.ig.CPCellType.prototype.headerCell = 2;
$.ig.CPCellType.prototype.fixedLeftHeaderCell = 3;
$.ig.CPCellType.prototype.rowSeparatorCell = 4;
$.ig.CPCellType.prototype.sectionHeaderCell = 5;
$.ig.CPCellType.prototype.sectionFooterCell = 6;
$.ig.CPCellType.prototype.fixedRightCell = 7;
$.ig.CPCellType.prototype.fixedRightHeaderCell = 8;
/*<EndStatics Name="Infragistics.CPCellType" />*/

/*<BeginStatics Name="Infragistics.FlowLayoutResizeHandleLocation" />*/

$.ig.FlowLayoutResizeHandleLocation.prototype.right = 0;
$.ig.FlowLayoutResizeHandleLocation.prototype.bottom = 1;
$.ig.FlowLayoutResizeHandleLocation.prototype.bottomRight = 2;
$.ig.FlowLayoutResizeHandleLocation.prototype.none = 3;
/*<EndStatics Name="Infragistics.FlowLayoutResizeHandleLocation" />*/

/*<BeginStatics Name="Infragistics.FlowLayoutDirection" />*/

$.ig.FlowLayoutDirection.prototype.landscape = 0;
$.ig.FlowLayoutDirection.prototype.portrait = 1;
/*<EndStatics Name="Infragistics.FlowLayoutDirection" />*/

/*<BeginStatics Name="Infragistics.CPStrokeJoin" />*/

$.ig.CPStrokeJoin.prototype.bevel = 0;
$.ig.CPStrokeJoin.prototype.round = 1;
$.ig.CPStrokeJoin.prototype.miter = 2;
/*<EndStatics Name="Infragistics.CPStrokeJoin" />*/

/*<BeginStatics Name="Infragistics.CPStrokeCap" />*/

$.ig.CPStrokeCap.prototype.butt = 0;
$.ig.CPStrokeCap.prototype.round = 1;
$.ig.CPStrokeCap.prototype.square = 2;
/*<EndStatics Name="Infragistics.CPStrokeCap" />*/

/*<BeginStatics Name="Infragistics.CPHapticType" />*/

$.ig.CPHapticType.prototype.dragStart = 0;
$.ig.CPHapticType.prototype.dragSwap = 1;
$.ig.CPHapticType.prototype.dragLeave = 2;
$.ig.CPHapticType.prototype.dragEnter = 3;
/*<EndStatics Name="Infragistics.CPHapticType" />*/

/*<BeginStatics Name="Infragistics.CPCursors" />*/

$.ig.CPCursors.prototype.$default = 0;
$.ig.CPCursors.prototype.clickable = 1;
$.ig.CPCursors.prototype.text = 2;
$.ig.CPCursors.prototype.grab = 3;
$.ig.CPCursors.prototype.grabbing = 4;
$.ig.CPCursors.prototype.resizeLeftRight = 5;
/*<EndStatics Name="Infragistics.CPCursors" />*/

/*<BeginStatics Name="Infragistics.CPCompactMonthViewAnimation" />*/

$.ig.CPCompactMonthViewAnimation.prototype.notAnimating = 0;
$.ig.CPCompactMonthViewAnimation.prototype.initializeForPreviousMonth = 1;
$.ig.CPCompactMonthViewAnimation.prototype.initializeForNextMonth = 2;
$.ig.CPCompactMonthViewAnimation.prototype.previousMonth = 3;
$.ig.CPCompactMonthViewAnimation.prototype.nextMonth = 4;
/*<EndStatics Name="Infragistics.CPCompactMonthViewAnimation" />*/

/*<BeginStatics Name="Infragistics.CPMonthViewSelectedState" />*/

$.ig.CPMonthViewSelectedState.prototype.notSelected = 0;
$.ig.CPMonthViewSelectedState.prototype.isSelectionStart = 1;
$.ig.CPMonthViewSelectedState.prototype.isSelectionEnd = 2;
$.ig.CPMonthViewSelectedState.prototype.isBetweenSelectionStartAndEnd = 3;
$.ig.CPMonthViewSelectedState.prototype.isSelected = 4;
/*<EndStatics Name="Infragistics.CPMonthViewSelectedState" />*/

/*<BeginStatics Name="Infragistics.CPMonthViewDisplayMode" />*/

$.ig.CPMonthViewDisplayMode.prototype.day = 0;
$.ig.CPMonthViewDisplayMode.prototype.month = 1;
$.ig.CPMonthViewDisplayMode.prototype.year = 2;
/*<EndStatics Name="Infragistics.CPMonthViewDisplayMode" />*/

/*<BeginStatics Name="Infragistics.CPIconButtonStyle" />*/

$.ig.CPIconButtonStyle.prototype.standard = 0;
$.ig.CPIconButtonStyle.prototype.bordered = 1;
$.ig.CPIconButtonStyle.prototype.accent = 2;
$.ig.CPIconButtonStyle.prototype.accentSmall = 3;
$.ig.CPIconButtonStyle.prototype.minimal = 4;
$.ig.CPIconButtonStyle.prototype.link = 5;
/*<EndStatics Name="Infragistics.CPIconButtonStyle" />*/

/*<BeginStatics Name="Infragistics.CPCheckedState" />*/

$.ig.CPCheckedState.prototype.checked = 0;
$.ig.CPCheckedState.prototype.notChecked = 1;
$.ig.CPCheckedState.prototype.notSet = 2;
/*<EndStatics Name="Infragistics.CPCheckedState" />*/

/*<BeginStatics Name="Infragistics.KeyboardType" />*/

$.ig.KeyboardType.prototype.$default = 0;
$.ig.KeyboardType.prototype.email = 1;
$.ig.KeyboardType.prototype.numeric = 2;
/*<EndStatics Name="Infragistics.KeyboardType" />*/

/*<BeginStatics Name="System.Windows.TextAlignment" />*/

$.ig.TextAlignment.prototype.center = 0;
$.ig.TextAlignment.prototype.left = 1;
$.ig.TextAlignment.prototype.right = 2;
/*<EndStatics Name="System.Windows.TextAlignment" />*/

/*<BeginStatics Name="Infragistics.InteractiveView" />*/

$.ig.InteractiveView.prototype.touchSlop = 15;
/*<EndStatics Name="Infragistics.InteractiveView" />*/

/*<BeginStatics Name="System.Windows.Input.Key" />*/

$.ig.Key.prototype.a = 65;
$.ig.Key.prototype.b = 66;
$.ig.Key.prototype.c = 67;
$.ig.Key.prototype.d = 68;
$.ig.Key.prototype.e = 69;
$.ig.Key.prototype.f = 70;
$.ig.Key.prototype.g = 71;
$.ig.Key.prototype.h = 72;
$.ig.Key.prototype.i = 73;
$.ig.Key.prototype.j = 74;
$.ig.Key.prototype.k = 75;
$.ig.Key.prototype.l = 76;
$.ig.Key.prototype.m = 77;
$.ig.Key.prototype.n = 78;
$.ig.Key.prototype.o = 79;
$.ig.Key.prototype.p = 80;
$.ig.Key.prototype.q = 81;
$.ig.Key.prototype.r = 82;
$.ig.Key.prototype.s = 83;
$.ig.Key.prototype.t = 84;
$.ig.Key.prototype.u = 85;
$.ig.Key.prototype.v = 86;
$.ig.Key.prototype.w = 87;
$.ig.Key.prototype.x = 88;
$.ig.Key.prototype.y = 89;
$.ig.Key.prototype.z = 90;
$.ig.Key.prototype.left = 37;
$.ig.Key.prototype.up = 38;
$.ig.Key.prototype.right = 39;
$.ig.Key.prototype.down = 40;
$.ig.Key.prototype.tab = 9;
$.ig.Key.prototype.enter = 13;
$.ig.Key.prototype.space = 32;
$.ig.Key.prototype.escape = 27;
$.ig.Key.prototype.system = 18;
$.ig.Key.prototype.back = 8;
$.ig.Key.prototype.pageUp = 33;
$.ig.Key.prototype.pageDown = 34;
$.ig.Key.prototype.end = 35;
$.ig.Key.prototype.home = 36;
$.ig.Key.prototype.oemOpenBrackets = 219;
$.ig.Key.prototype.oemCloseBrackets = 221;
$.ig.Key.prototype.oemPeriod = 190;
$.ig.Key.prototype.f10 = 121;
/*<EndStatics Name="System.Windows.Input.Key" />*/

/*<BeginStatics Name="Infragistics.CPTextView" />*/

$.ig.CPTextView.prototype._mAX_PADDING = 5;
/*<EndStatics Name="Infragistics.CPTextView" />*/

/*<BeginStatics Name="Infragistics.JSHelperUtility" />*/

$.ig.JSHelperUtility.prototype.__utility = null;
$.ig.JSHelperUtility.prototype.__rootElement = null;
/*<EndStatics Name="Infragistics.JSHelperUtility" />*/

/*<BeginStatics Name="Infragistics.NativeImageUtility" />*/

$.ig.NativeImageUtility.prototype.base64PrefixPNG = "data:image/png;base64, ";
$.ig.NativeImageUtility.prototype.base64PrefixGIF = "data:image/gif;base64, ";
$.ig.NativeImageUtility.prototype.base64PrefixJPG = "data:image/jpg;base64, ";
$.ig.NativeImageUtility.prototype.__imageCache = null;
/*<EndStatics Name="Infragistics.NativeImageUtility" />*/

/*<BeginStatics Name="Infragistics.NativeUIUtility" />*/

$.ig.NativeUIUtility.prototype.__utility = null;
/*<EndStatics Name="Infragistics.NativeUIUtility" />*/

/*<BeginStatics Name="Infragistics.UIEventManager" />*/

$.ig.UIEventManager.prototype.__panels = new $.ig.Array();
$.ig.UIEventManager.prototype.__dragCaptureView = null;
$.ig.UIEventManager.prototype.__mouseDownCaptureView = null;
/*<EndStatics Name="Infragistics.UIEventManager" />*/

/*<BeginStatics Name="Infragistics.QuillWrapper" />*/

$.ig.QuillWrapper.prototype.__setReadOnly = "SetReadOnly";
$.ig.QuillWrapper.prototype.__setTextAlignment = "SetTextAlignment";
$.ig.QuillWrapper.prototype.__setText = "SetText";
$.ig.QuillWrapper.prototype.__insertText = "InsertText";
$.ig.QuillWrapper.prototype.__setPlaceholderText = "SetPlaceholderText";
$.ig.QuillWrapper.prototype.__attachTextChangedEvent = "AttachTextChangedEvent";
$.ig.QuillWrapper.prototype.__detachTextChangedEvent = "DetachTextChangedEvent";
$.ig.QuillWrapper.prototype.__attachSelectionChangedEvent = "AttachSelectionChangedEvent";
$.ig.QuillWrapper.prototype.__detachSelectionChangedEvent = "DetachSelectionChangedEvent";
/*<EndStatics Name="Infragistics.QuillWrapper" />*/

/*<BeginStatics Name="Infragistics.CPGridViewItemCellBase" />*/

$.ig.CPGridViewItemCellBase.prototype.flatSideBottom = "bottom";
$.ig.CPGridViewItemCellBase.prototype.flatSideTop = "top";
$.ig.CPGridViewItemCellBase.prototype.flatSideNone = "none";
/*<EndStatics Name="Infragistics.CPGridViewItemCellBase" />*/

/*<BeginStatics Name="Infragistics.CPCompactMonthView" />*/

$.ig.CPCompactMonthView.prototype.rOW_COUNT = 6;
$.ig.CPCompactMonthView.prototype.cOL_COUNT = 7;
$.ig.CPCompactMonthView.prototype.dAY_COUNT = $.ig.CPCompactMonthView.prototype.rOW_COUNT * $.ig.CPCompactMonthView.prototype.cOL_COUNT;
/*<EndStatics Name="Infragistics.CPCompactMonthView" />*/

/*<BeginStatics Name="Infragistics.CPDateRangePickerModeSelectorView" />*/

$.ig.CPDateRangePickerModeSelectorView.prototype.sTARTDATE_IDENTIFIER = 0;
$.ig.CPDateRangePickerModeSelectorView.prototype.dUEDATE_IDENTIFIER = 1;
/*<EndStatics Name="Infragistics.CPDateRangePickerModeSelectorView" />*/

/*<BeginStatics Name="Infragistics.CPDateRangePickerModeIndicator" />*/

$.ig.CPDateRangePickerModeIndicator.prototype.dEFAULT_WIDTH_NORMALIZED = 12;
$.ig.CPDateRangePickerModeIndicator.prototype.dEFAULT_HEIGHT_NORMALIZED = 7;
/*<EndStatics Name="Infragistics.CPDateRangePickerModeIndicator" />*/

/*<BeginStatics Name="Infragistics.CPImageUtility" />*/

$.ig.CPImageUtility.prototype.largeThumbnailSize = 128;
$.ig.CPImageUtility.prototype.profileImageThumbnailSize = 64;
$.ig.CPImageUtility.prototype.uRLThumbnailSize = 32;
$.ig.CPImageUtility.prototype.extensionPNG = ".png";
$.ig.CPImageUtility.prototype.extensionGIF = ".gif";
$.ig.CPImageUtility.prototype.extensionJPG = ".jpg";
$.ig.CPImageUtility.prototype.extensionJPEG = ".jpeg";
$.ig.CPImageUtility.prototype.gifImageType = "GIF";
$.ig.CPImageUtility.prototype.pNGImageType = "PNG";
$.ig.CPImageUtility.prototype.jPGImageType = "JPG";
/*<EndStatics Name="Infragistics.CPImageUtility" />*/

/*<BeginStatics Name="Infragistics.CPPasteEvent" />*/

$.ig.CPPasteEvent.prototype.imageEventType = "IMAGE";
$.ig.CPPasteEvent.prototype.textEventType = "TEXT";
/*<EndStatics Name="Infragistics.CPPasteEvent" />*/

/*<BeginStatics Name="Infragistics.CPDroppableViewManager" />*/

$.ig.CPDroppableViewManager.prototype.__droppableObjects = new $.ig.Dictionary(0);
$.ig.CPDroppableViewManager.prototype.__dropListeners = null;
/*<EndStatics Name="Infragistics.CPDroppableViewManager" />*/

/*<BeginStatics Name="Infragistics.CPKeyboardEventManager" />*/

$.ig.CPKeyboardEventManager.prototype._listenerLayerStack = null;
$.ig.CPKeyboardEventManager.prototype.keyboardNavigationEnabled = false;
$.ig.CPKeyboardEventManager.prototype.ignoreKeyPresses = false;
/*<EndStatics Name="Infragistics.CPKeyboardEventManager" />*/

/*<BeginStatics Name="Infragistics.UIPathIcons" />*/

$.ig.UIPathIcons.prototype.__icons = null;
/*<EndStatics Name="Infragistics.UIPathIcons" />*/

/*<BeginStatics Name="Infragistics.CPPopupManager" />*/

$.ig.CPPopupManager.prototype.__popupStack = null;
$.ig.CPPopupManager.prototype.__popupLookup = null;
$.ig.CPPopupManager.prototype.__subscribedPopups = null;
$.ig.CPPopupManager.prototype.__lockedTopMostPopup = null;
$.ig.CPPopupManager.prototype.__rootLayer = null;
$.ig.CPPopupManager.prototype.__isEmbedded = false;
$.ig.CPPopupManager.prototype.__tooltipPopupId = null;
$.ig.CPPopupManager.prototype.__fullScreenProgressId = null;
/*<EndStatics Name="Infragistics.CPPopupManager" />*/

/*<BeginStatics Name="Infragistics.ProgressHelper" />*/

$.ig.ProgressHelper.prototype.__helper = null;
$.ig.ProgressHelper.prototype.__label = null;
/*<EndStatics Name="Infragistics.ProgressHelper" />*/

/*<BeginStatics Name="Infragistics.ScrollEventProcessor" />*/

$.ig.ScrollEventProcessor.prototype._tIMER_THRESHOLD = 0.1;
$.ig.ScrollEventProcessor.prototype._bOUNCE_DURATION = 1;
$.ig.ScrollEventProcessor.prototype._tO_MILLISECONDS = 1000;
$.ig.ScrollEventProcessor.prototype._mUlTIPLIER = 1;
$.ig.ScrollEventProcessor.prototype._dECELERATION = -0.0020020026706730793;
/*<EndStatics Name="Infragistics.ScrollEventProcessor" />*/

/*<BeginStatics Name="Infragistics.CPTextViewManager" />*/

$.ig.CPTextViewManager.prototype.__manager = null;
/*<EndStatics Name="Infragistics.CPTextViewManager" />*/

/*<BeginStatics Name="Infragistics.CPTextCurlyBraceDetector" />*/

$.ig.CPTextCurlyBraceDetector.prototype.typeName = "CurlyBrace";
/*<EndStatics Name="Infragistics.CPTextCurlyBraceDetector" />*/

/*<BeginStatics Name="Infragistics.CPTextEmailDetector" />*/

$.ig.CPTextEmailDetector.prototype.typeName = "Message";
/*<EndStatics Name="Infragistics.CPTextEmailDetector" />*/

/*<BeginStatics Name="Infragistics.CPTextMetaDataDetector" />*/

$.ig.CPTextMetaDataDetector.prototype.typeName = "MetaData";
/*<EndStatics Name="Infragistics.CPTextMetaDataDetector" />*/

/*<BeginStatics Name="Infragistics.CPTextPhoneNumberDetector" />*/

$.ig.CPTextPhoneNumberDetector.prototype.typeName = "Phone";
/*<EndStatics Name="Infragistics.CPTextPhoneNumberDetector" />*/

/*<BeginStatics Name="Infragistics.CPTextURLDetector" />*/

$.ig.CPTextURLDetector.prototype.typeName = "URL";
/*<EndStatics Name="Infragistics.CPTextURLDetector" />*/

/*<BeginStatics Name="Infragistics.CPTheme" />*/

$.ig.CPTheme.prototype.itemGuideStyleSmall = "small";
$.ig.CPTheme.prototype.itemGuideStyleMedium = "medium";
$.ig.CPTheme.prototype.itemGuideStyleLarge = "large";
$.ig.CPTheme.prototype.itemGuideStyleExtraLarge = "extralarge";
$.ig.CPTheme.prototype.buttonGuideStyleExtraTinyMouseOnly = "extratinymouseonly";
$.ig.CPTheme.prototype.buttonGuideStyleTinyMouseOnly = "tinymouseonly";
$.ig.CPTheme.prototype.buttonGuideStyleTinyReadOnly = "tinyreadonly";
$.ig.CPTheme.prototype.buttonGuideStyleSmall = "small";
$.ig.CPTheme.prototype.buttonGuideStyleMedium = "medium";
$.ig.CPTheme.prototype.buttonGuideStyleMediumLarge = "mediumLarge";
$.ig.CPTheme.prototype.buttonGuideStyleLarge = "large";
$.ig.CPTheme.prototype.buttonGuideStyleExtraLarge = "extralarge";
$.ig.CPTheme.prototype.__clear = null;
/*<EndStatics Name="Infragistics.CPTheme" />*/

/*<BeginStatics Name="Infragistics.SystemThemeManager" />*/

$.ig.SystemThemeManager.prototype.__systemThemeManager = null;
$.ig.SystemThemeManager.prototype.__utility = null;
$.ig.SystemThemeManager.prototype.__usesAutoTheme = false;
$.ig.SystemThemeManager.prototype.__themeSettingLock = false;
$.ig.SystemThemeManager.prototype.__systemTheme = null;
/*<EndStatics Name="Infragistics.SystemThemeManager" />*/

/*<BeginStatics Name="Infragistics.ThemeManager" />*/

$.ig.ThemeManager.prototype.__theme = null;
$.ig.ThemeManager.prototype.darkTheme = "dark";
$.ig.ThemeManager.prototype.lightTheme = "light";
$.ig.ThemeManager.prototype.__listeners = null;
$.ig.ThemeManager.prototype.__cachedZoomLevel = 0;
$.ig.ThemeManager.prototype._toolbarColor = null;
$.ig.ThemeManager.prototype._level2Color = null;
$.ig.ThemeManager.prototype._level3Color = null;
/*<EndStatics Name="Infragistics.ThemeManager" />*/

/*<BeginStatics Name="Infragistics.UIUtility" />*/

$.ig.UIUtility.prototype.__utility = null;
/*<EndStatics Name="Infragistics.UIUtility" />*/


} (jQuery));

